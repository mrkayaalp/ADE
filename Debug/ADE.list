
ADE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009804  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08009a3c  08009a3c  0000aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b50  08009b50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  20000000  08009b60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  20000084  08009be4  0000b084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000450  08009be4  0000b450  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ceaf  00000000  00000000  0000b0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003767  00000000  00000000  00027f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f8  00000000  00000000  0002b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012a8  00000000  00000000  0002cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000355fb  00000000  00000000  0002e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002050d  00000000  00000000  0006376b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014970e  00000000  00000000  00083c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cd386  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b58  00000000  00000000  001cd3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001d3f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000084 	.word	0x20000084
 8000254:	00000000 	.word	0x00000000
 8000258:	08009a24 	.word	0x08009a24

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000088 	.word	0x20000088
 8000274:	08009a24 	.word	0x08009a24

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <MX_GPDMA1_Init+0x3c>)
 8000598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800059c:	4a0b      	ldr	r2, [pc, #44]	@ (80005cc <MX_GPDMA1_Init+0x3c>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80005a6:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_GPDMA1_Init+0x3c>)
 80005a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel14_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2056      	movs	r0, #86	@ 0x56
 80005ba:	f001 f82d 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel14_IRQn);
 80005be:	2056      	movs	r0, #86	@ 0x56
 80005c0:	f001 f844 	bl	800164c <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	46020c00 	.word	0x46020c00

080005d0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <MX_GPIO_Init+0xbc>)
 80005e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005ec:	4a27      	ldr	r2, [pc, #156]	@ (800068c <MX_GPIO_Init+0xbc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005f6:	4b25      	ldr	r3, [pc, #148]	@ (800068c <MX_GPIO_Init+0xbc>)
 80005f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005fc:	f003 0310 	and.w	r3, r3, #16
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <MX_GPIO_Init+0xbc>)
 8000606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <MX_GPIO_Init+0xbc>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000614:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <MX_GPIO_Init+0xbc>)
 8000616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_GPIO_Init+0xbc>)
 8000624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000628:	4a18      	ldr	r2, [pc, #96]	@ (800068c <MX_GPIO_Init+0xbc>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <MX_GPIO_Init+0xbc>)
 8000634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_GPIO_Init+0xbc>)
 8000642:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000646:	4a11      	ldr	r2, [pc, #68]	@ (800068c <MX_GPIO_Init+0xbc>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_GPIO_Init+0xbc>)
 8000652:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LR_Select_GPIO_Port, LR_Select_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2104      	movs	r1, #4
 8000662:	480b      	ldr	r0, [pc, #44]	@ (8000690 <MX_GPIO_Init+0xc0>)
 8000664:	f002 fd02 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LR_Select_Pin */
  GPIO_InitStruct.Pin = LR_Select_Pin;
 8000668:	2304      	movs	r3, #4
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_Select_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_GPIO_Init+0xc0>)
 8000680:	f002 fb1c 	bl	8002cbc <HAL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	46020c00 	.word	0x46020c00
 8000690:	42021000 	.word	0x42021000

08000694 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000698:	2000      	movs	r0, #0
 800069a:	f002 fcff 	bl	800309c <HAL_ICACHE_ConfigAssociativityMode>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80006a4:	f000 f93c 	bl	8000920 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006a8:	f002 fd18 	bl	80030dc <HAL_ICACHE_Enable>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80006b2:	f000 f935 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}

080006ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d013      	beq.n	80006fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80006da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00b      	beq.n	80006fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e2:	e000      	b.n	80006e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0f9      	beq.n	80006e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006fa:	687b      	ldr	r3, [r7, #4]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <HAL_SAI_RxCpltCallback>:





void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  l_sample = (int) (audio_buffer[0] << 16) | (audio_buffer[1]);
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <HAL_SAI_RxCpltCallback+0x34>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	4a09      	ldr	r2, [pc, #36]	@ (800073c <HAL_SAI_RxCpltCallback+0x34>)
 8000718:	8852      	ldrh	r2, [r2, #2]
 800071a:	4313      	orrs	r3, r2
 800071c:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <HAL_SAI_RxCpltCallback+0x38>)
 800071e:	6013      	str	r3, [r2, #0]
  r_sample = (int) (audio_buffer[2] << 16) | (audio_buffer[3]);
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_SAI_RxCpltCallback+0x34>)
 8000722:	889b      	ldrh	r3, [r3, #4]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	4a05      	ldr	r2, [pc, #20]	@ (800073c <HAL_SAI_RxCpltCallback+0x34>)
 8000728:	88d2      	ldrh	r2, [r2, #6]
 800072a:	4313      	orrs	r3, r2
 800072c:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <HAL_SAI_RxCpltCallback+0x3c>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	200000a0 	.word	0x200000a0
 8000740:	200000a8 	.word	0x200000a8
 8000744:	200000ac 	.word	0x200000ac

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fe38 	bl	80013c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000750:	f000 f8aa 	bl	80008a8 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f84c 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f7ff ff3a 	bl	80005d0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800075c:	f7ff ff18 	bl	8000590 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8000760:	f7ff ff98 	bl	8000694 <MX_ICACHE_Init>
  MX_SAI1_Init();
 8000764:	f000 f8e2 	bl	800092c <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fc3b 	bl	8000fe4 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800076e:	2001      	movs	r0, #1
 8000770:	f000 fc38 	bl	8000fe4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000774:	2002      	movs	r0, #2
 8000776:	f000 fc35 	bl	8000fe4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800077a:	2101      	movs	r1, #1
 800077c:	2000      	movs	r0, #0
 800077e:	f000 fcc1 	bl	8001104 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <main+0x94>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800078a:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <main+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <main+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <main+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <main+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007a2:	490e      	ldr	r1, [pc, #56]	@ (80007dc <main+0x94>)
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 fd47 	bl	8001238 <BSP_COM_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <main+0x6c>
  {
    Error_Handler();
 80007b0:	f000 f8b6 	bl	8000920 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LR_Select_GPIO_Port, LR_Select_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2104      	movs	r1, #4
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <main+0x98>)
 80007ba:	f002 fc57 	bl	800306c <HAL_GPIO_WritePin>

  if (HAL_SAI_Receive_DMA(&hsai_BlockA1, audio_buffer, AUDIO_BUFFER_SIZE) != HAL_OK)
 80007be:	2204      	movs	r2, #4
 80007c0:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <main+0x9c>)
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <main+0xa0>)
 80007c4:	f006 ffb8 	bl	8007738 <HAL_SAI_Receive_DMA>
  }
  
  while (1)
  {
  
       printf("hello world\n");
 80007c8:	4808      	ldr	r0, [pc, #32]	@ (80007ec <main+0xa4>)
 80007ca:	f008 fd97 	bl	80092fc <puts>
	   HAL_Delay(500);
 80007ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d2:	f000 fe45 	bl	8001460 <HAL_Delay>
       printf("hello world\n");
 80007d6:	bf00      	nop
 80007d8:	e7f6      	b.n	80007c8 <main+0x80>
 80007da:	bf00      	nop
 80007dc:	200000b0 	.word	0x200000b0
 80007e0:	42021000 	.word	0x42021000
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	200000c0 	.word	0x200000c0
 80007ec:	08009a3c 	.word	0x08009a3c

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	@ 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 fe5c 	bl	80094bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000814:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000818:	f002 fc70 	bl	80030fc <HAL_PWREx_ControlVoltageScaling>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000822:	f000 f87d 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000826:	2310      	movs	r3, #16
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800083a:	2301      	movs	r3, #1
 800083c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800083e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000842:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000844:	2303      	movs	r3, #3
 8000846:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000848:	230a      	movs	r3, #10
 800084a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000858:	230c      	movs	r3, #12
 800085a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fd45 	bl	80032f4 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000870:	f000 f856 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	231f      	movs	r3, #31
 8000876:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	2104      	movs	r1, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fc0b 	bl	80040ac <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800089c:	f000 f840 	bl	8000920 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3778      	adds	r7, #120	@ 0x78
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ac:	f002 fd12 	bl	80032d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80008b0:	2002      	movs	r0, #2
 80008b2:	f002 fcaf 	bl	8003214 <HAL_PWREx_ConfigSupply>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80008bc:	f000 f830 	bl	8000920 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e009      	b.n	80008ea <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	60ba      	str	r2, [r7, #8]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff feeb 	bl	80006ba <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	3301      	adds	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dbf1      	blt.n	80008d6 <_write+0x12>
  }
  return len;
 80008f2:	687b      	ldr	r3, [r7, #4]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090e:	f000 fd87 	bl	8001420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40014800 	.word	0x40014800

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <MX_SAI1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel14;
DMA_HandleTypeDef handle_GPDMA1_Channel14;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <MX_SAI1_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000938:	2201      	movs	r2, #1
 800093a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_SAI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000948:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_SAI1_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000958:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800095c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_SAI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_SAI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000976:	2302      	movs	r3, #2
 8000978:	2202      	movs	r2, #2
 800097a:	2100      	movs	r1, #0
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_SAI1_Init+0x64>)
 800097e:	f006 fc35 	bl	80071ec <HAL_SAI_InitProtocol>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8000988:	f7ff ffca 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000c0 	.word	0x200000c0
 8000994:	40015404 	.word	0x40015404

08000998 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0d4      	sub	sp, #336	@ 0x150
 800099c:	af00      	add	r7, sp, #0
 800099e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80009a2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80009a6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80009ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80009b0:	4618      	mov	r0, r3
 80009b2:	23c0      	movs	r3, #192	@ 0xc0
 80009b4:	461a      	mov	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f008 fd80 	bl	80094bc <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80009bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80009c0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a98      	ldr	r2, [pc, #608]	@ (8000c2c <HAL_SAI_MspInit+0x294>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	f040 8128 	bne.w	8000c20 <HAL_SAI_MspInit+0x288>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80009d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80009d4:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 80009d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80009e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80009e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80009ec:	2200      	movs	r2, #0
 80009ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 80009f2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80009f6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80009fa:	2201      	movs	r2, #1
 80009fc:	609a      	str	r2, [r3, #8]
    PeriphClkInit.PLL2.PLL2M = 3;
 80009fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a02:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a06:	2203      	movs	r2, #3
 8000a08:	60da      	str	r2, [r3, #12]
    PeriphClkInit.PLL2.PLL2N = 8;
 8000a0a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a0e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a12:	2208      	movs	r2, #8
 8000a14:	611a      	str	r2, [r3, #16]
    PeriphClkInit.PLL2.PLL2P = 1;
 8000a16:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a1a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a1e:	2201      	movs	r2, #1
 8000a20:	615a      	str	r2, [r3, #20]
    PeriphClkInit.PLL2.PLL2Q = 2;
 8000a22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a26:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	619a      	str	r2, [r3, #24]
    PeriphClkInit.PLL2.PLL2R = 2;
 8000a2e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a32:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a36:	2202      	movs	r2, #2
 8000a38:	61da      	str	r2, [r3, #28]
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000a3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a3e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a42:	220c      	movs	r2, #12
 8000a44:	621a      	str	r2, [r3, #32]
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8000a46:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a4a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 8000a52:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a56:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000a5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a5e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 ff29 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 8000a70:	f7ff ff56 	bl	8000920 <Error_Handler>
    }

    if (SAI1_client == 0)
 8000a74:	4b6e      	ldr	r3, [pc, #440]	@ (8000c30 <HAL_SAI_MspInit+0x298>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d11e      	bne.n	8000aba <HAL_SAI_MspInit+0x122>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8000c34 <HAL_SAI_MspInit+0x29c>)
 8000a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a82:	4a6c      	ldr	r2, [pc, #432]	@ (8000c34 <HAL_SAI_MspInit+0x29c>)
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000a8c:	4b69      	ldr	r3, [pc, #420]	@ (8000c34 <HAL_SAI_MspInit+0x29c>)
 8000a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000a92:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000a96:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000a9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000aa4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000aa8:	681b      	ldr	r3, [r3, #0]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	205a      	movs	r0, #90	@ 0x5a
 8000ab0:	f000 fdb2 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8000ab4:	205a      	movs	r0, #90	@ 0x5a
 8000ab6:	f000 fdc9 	bl	800164c <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8000aba:	4b5d      	ldr	r3, [pc, #372]	@ (8000c30 <HAL_SAI_MspInit+0x298>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a5b      	ldr	r2, [pc, #364]	@ (8000c30 <HAL_SAI_MspInit+0x298>)
 8000ac2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ac4:	2370      	movs	r3, #112	@ 0x70
 8000ac6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000adc:	230d      	movs	r3, #13
 8000ade:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae2:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4853      	ldr	r0, [pc, #332]	@ (8000c38 <HAL_SAI_MspInit+0x2a0>)
 8000aea:	f002 f8e7 	bl	8002cbc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000aee:	2322      	movs	r3, #34	@ 0x22
 8000af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI1_A;
 8000af4:	2324      	movs	r3, #36	@ 0x24
 8000af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000b0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000b14:	2301      	movs	r3, #1
 8000b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b1e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcBurstLength = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.DestBurstLength = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Mode = DMA_NORMAL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel14) != HAL_OK)
 8000b70:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000b74:	4931      	ldr	r1, [pc, #196]	@ (8000c3c <HAL_SAI_MspInit+0x2a4>)
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fa56 	bl	8002028 <HAL_DMAEx_List_BuildNode>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_SAI_MspInit+0x1ee>
    {
      Error_Handler();
 8000b82:	f7ff fecd 	bl	8000920 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel14, NULL, &Node_GPDMA1_Channel14) != HAL_OK)
 8000b86:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <HAL_SAI_MspInit+0x2a4>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	482d      	ldr	r0, [pc, #180]	@ (8000c40 <HAL_SAI_MspInit+0x2a8>)
 8000b8c:	f001 fa62 	bl	8002054 <HAL_DMAEx_List_InsertNode>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_SAI_MspInit+0x202>
    {
      Error_Handler();
 8000b96:	f7ff fec3 	bl	8000920 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel14) != HAL_OK)
 8000b9a:	4829      	ldr	r0, [pc, #164]	@ (8000c40 <HAL_SAI_MspInit+0x2a8>)
 8000b9c:	f001 fb23 	bl	80021e6 <HAL_DMAEx_List_SetCircularMode>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_SAI_MspInit+0x212>
    {
      Error_Handler();
 8000ba6:	f7ff febb 	bl	8000920 <Error_Handler>
    }

    handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 8000baa:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bac:	4a26      	ldr	r2, [pc, #152]	@ (8000c48 <HAL_SAI_MspInit+0x2b0>)
 8000bae:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel14.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel14.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel14.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel14.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel14.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bca:	2281      	movs	r2, #129	@ 0x81
 8000bcc:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8000bce:	481d      	ldr	r0, [pc, #116]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bd0:	f001 f86a 	bl	8001ca8 <HAL_DMAEx_List_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_SAI_MspInit+0x246>
    {
      Error_Handler();
 8000bda:	f7ff fea1 	bl	8000920 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel14, &List_GPDMA1_Channel14) != HAL_OK)
 8000bde:	4918      	ldr	r1, [pc, #96]	@ (8000c40 <HAL_SAI_MspInit+0x2a8>)
 8000be0:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000be2:	f001 fb61 	bl	80022a8 <HAL_DMAEx_List_LinkQ>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 8000bec:	f7ff fe98 	bl	8000920 <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel14);
 8000bf0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000bf4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000c00:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000c02:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000c06:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000c0e:	2110      	movs	r1, #16
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <HAL_SAI_MspInit+0x2ac>)
 8000c12:	f000 ffe7 	bl	8001be4 <HAL_DMA_ConfigChannelAttributes>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_SAI_MspInit+0x288>
    {
      Error_Handler();
 8000c1c:	f7ff fe80 	bl	8000920 <Error_Handler>
    }

    }
}
 8000c20:	bf00      	nop
 8000c22:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40015404 	.word	0x40015404
 8000c30:	2000020c 	.word	0x2000020c
 8000c34:	46020c00 	.word	0x46020c00
 8000c38:	42021000 	.word	0x42021000
 8000c3c:	20000158 	.word	0x20000158
 8000c40:	2000017c 	.word	0x2000017c
 8000c44:	20000194 	.word	0x20000194
 8000c48:	40020750 	.word	0x40020750

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <HAL_MspInit+0x34>)
 8000c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c58:	4a09      	ldr	r2, [pc, #36]	@ (8000c80 <HAL_MspInit+0x34>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <HAL_MspInit+0x34>)
 8000c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000c70:	2004      	movs	r0, #4
 8000c72:	f000 fcc6 	bl	8001602 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	46020c00 	.word	0x46020c00

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	@ 0x38
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000c94:	4b2e      	ldr	r3, [pc, #184]	@ (8000d50 <HAL_InitTick+0xcc>)
 8000c96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000d50 <HAL_InitTick+0xcc>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d50 <HAL_InitTick+0xcc>)
 8000ca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb2:	f107 0210 	add.w	r2, r7, #16
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fd3f 	bl	8004740 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cc2:	f003 fd15 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8000cc6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cca:	4a22      	ldr	r2, [pc, #136]	@ (8000d54 <HAL_InitTick+0xd0>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	0c9b      	lsrs	r3, r3, #18
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cd8:	4a20      	ldr	r2, [pc, #128]	@ (8000d5c <HAL_InitTick+0xd8>)
 8000cda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cde:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000cf6:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000cf8:	f007 fa0d 	bl	8008116 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000d02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d118      	bne.n	8000d3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000d0a:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <HAL_InitTick+0xd4>)
 8000d0c:	f007 fa64 	bl	80081d8 <HAL_TIM_Base_Start_IT>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000d16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10e      	bne.n	8000d3c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d808      	bhi.n	8000d36 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	2047      	movs	r0, #71	@ 0x47
 8000d2a:	f000 fc75 	bl	8001618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	e002      	b.n	8000d3c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000d3c:	2047      	movs	r0, #71	@ 0x47
 8000d3e:	f000 fc85 	bl	800164c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000d42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3738      	adds	r7, #56	@ 0x38
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	46020c00 	.word	0x46020c00
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	20000210 	.word	0x20000210
 8000d5c:	40014800 	.word	0x40014800
 8000d60:	20000020 	.word	0x20000020

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 fa13 	bl	80011f4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <TIM17_IRQHandler+0x10>)
 8000dda:	f007 fa9d 	bl	8008318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000210 	.word	0x20000210

08000de8 <GPDMA1_Channel14_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 14 global interrupt.
  */
void GPDMA1_Channel14_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 0 */

  /* USER CODE END GPDMA1_Channel14_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel14);
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <GPDMA1_Channel14_IRQHandler+0x10>)
 8000dee:	f000 fd98 	bl	8001922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 1 */

  /* USER CODE END GPDMA1_Channel14_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000194 	.word	0x20000194

08000dfc <SAI1_IRQHandler>:

/**
  * @brief This function handles Serial Audio Interface 1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8000e00:	4802      	ldr	r0, [pc, #8]	@ (8000e0c <SAI1_IRQHandler+0x10>)
 8000e02:	f006 fd79 	bl	80078f8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000c0 	.word	0x200000c0

08000e10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e00a      	b.n	8000e38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e22:	f3af 8000 	nop.w
 8000e26:	4601      	mov	r1, r0
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	b2ca      	uxtb	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf0      	blt.n	8000e22 <_read+0x12>
  }

  return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e72:	605a      	str	r2, [r3, #4]
  return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_isatty>:

int _isatty(int file)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f008 fb38 	bl	8009558 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200c0000 	.word	0x200c0000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	2000025c 	.word	0x2000025c
 8000f1c:	20000450 	.word	0x20000450

08000f20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <SystemInit+0x68>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2a:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <SystemInit+0x68>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <SystemInit+0x6c>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <SystemInit+0x6c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <SystemInit+0x6c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <SystemInit+0x6c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <SystemInit+0x6c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <SystemInit+0x6c>)
 8000f52:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000f56:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000f5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <SystemInit+0x6c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <SystemInit+0x6c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a09      	ldr	r2, [pc, #36]	@ (8000f8c <SystemInit+0x6c>)
 8000f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <SystemInit+0x6c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <SystemInit+0x68>)
 8000f76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f7a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	46020c00 	.word	0x46020c00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f94:	f7ff ffc4 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9a:	e003      	b.n	8000fa4 <LoopCopyDataInit>

08000f9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa2:	3104      	adds	r1, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa4:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fa8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000faa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fac:	d3f6      	bcc.n	8000f9c <CopyDataInit>
	ldr	r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb0:	e002      	b.n	8000fb8 <LoopFillZerobss>

08000fb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb4:	f842 3b04 	str.w	r3, [r2], #4

08000fb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <LoopForever+0x16>)
	cmp	r2, r3
 8000fba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fbc:	d3f9      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f008 fad1 	bl	8009564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fbc1 	bl	8000748 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000fc8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000fcc:	08009b60 	.word	0x08009b60
	ldr	r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fd4:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8000fd8:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8000fdc:	20000450 	.word	0x20000450

08000fe0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_IRQHandler>
	...

08000fe4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	@ 0x38
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d009      	beq.n	8001010 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <BSP_LED_Init+0x2c>
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d003      	beq.n	8001010 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001008:	f06f 0301 	mvn.w	r3, #1
 800100c:	637b      	str	r3, [r7, #52]	@ 0x34
 800100e:	e06e      	b.n	80010ee <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d10f      	bne.n	8001036 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001016:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <BSP_LED_Init+0x114>)
 8001018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101c:	4a36      	ldr	r2, [pc, #216]	@ (80010f8 <BSP_LED_Init+0x114>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001026:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <BSP_LED_Init+0x114>)
 8001028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	e046      	b.n	80010c4 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10f      	bne.n	800105c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <BSP_LED_Init+0x114>)
 800103e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001042:	4a2d      	ldr	r2, [pc, #180]	@ (80010f8 <BSP_LED_Init+0x114>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <BSP_LED_Init+0x114>)
 800104e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	e033      	b.n	80010c4 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <BSP_LED_Init+0x114>)
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	d110      	bne.n	800108c <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <BSP_LED_Init+0x114>)
 800106c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001070:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <BSP_LED_Init+0x114>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800107a:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <BSP_LED_Init+0x114>)
 800107c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001088:	2301      	movs	r3, #1
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 800108c:	f002 f912 	bl	80032b4 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001092:	2b01      	cmp	r3, #1
 8001094:	d107      	bne.n	80010a6 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <BSP_LED_Init+0x114>)
 8001098:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800109c:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <BSP_LED_Init+0x114>)
 800109e:	f023 0304 	bic.w	r3, r3, #4
 80010a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <BSP_LED_Init+0x114>)
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ac:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <BSP_LED_Init+0x114>)
 80010ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <BSP_LED_Init+0x114>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <BSP_LED_Init+0x118>)
 80010c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010cc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <BSP_LED_Init+0x11c>)
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	f107 021c 	add.w	r2, r7, #28
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fde7 	bl	8002cbc <HAL_GPIO_Init>
  }

  return ret;
 80010ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3738      	adds	r7, #56	@ 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	46020c00 	.word	0x46020c00
 80010fc:	08009aac 	.word	0x08009aac
 8001100:	20000008 	.word	0x20000008

08001104 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001114:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <BSP_PB_Init+0xd4>)
 8001116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800111a:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <BSP_PB_Init+0xd4>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001124:	4b2c      	ldr	r3, [pc, #176]	@ (80011d8 <BSP_PB_Init+0xd4>)
 8001126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001132:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001136:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <BSP_PB_Init+0xd8>)
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	f107 020c 	add.w	r2, r7, #12
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fdaf 	bl	8002cbc <HAL_GPIO_Init>
 800115e:	e036      	b.n	80011ce <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <BSP_PB_Init+0xdc>)
 8001162:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <BSP_PB_Init+0xd8>)
 8001168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fda2 	bl	8002cbc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <BSP_PB_Init+0xe0>)
 8001184:	441a      	add	r2, r3
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4917      	ldr	r1, [pc, #92]	@ (80011e8 <BSP_PB_Init+0xe4>)
 800118a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800118e:	4619      	mov	r1, r3
 8001190:	4610      	mov	r0, r2
 8001192:	f001 fd36 	bl	8002c02 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <BSP_PB_Init+0xe0>)
 80011a2:	1898      	adds	r0, r3, r2
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <BSP_PB_Init+0xe8>)
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	461a      	mov	r2, r3
 80011ae:	2100      	movs	r1, #0
 80011b0:	f001 fcfb 	bl	8002baa <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011b4:	2018      	movs	r0, #24
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <BSP_PB_Init+0xec>)
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	f000 fa29 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011c6:	2318      	movs	r3, #24
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fa3f 	bl	800164c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	46020c00 	.word	0x46020c00
 80011dc:	20000014 	.word	0x20000014
 80011e0:	10110000 	.word	0x10110000
 80011e4:	20000260 	.word	0x20000260
 80011e8:	08009ab4 	.word	0x08009ab4
 80011ec:	20000018 	.word	0x20000018
 80011f0:	2000001c 	.word	0x2000001c

080011f4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <BSP_PB_IRQHandler+0x28>)
 800120a:	4413      	add	r3, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fd0d 	bl	8002c2c <HAL_EXTI_IRQHandler>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000260 	.word	0x20000260

08001220 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800124e:	f06f 0301 	mvn.w	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	e018      	b.n	8001288 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2294      	movs	r2, #148	@ 0x94
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <BSP_COM_Init+0x5c>)
 8001260:	4413      	add	r3, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f854 	bl	8001310 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2294      	movs	r2, #148	@ 0x94
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <BSP_COM_Init+0x5c>)
 8001272:	4413      	add	r3, r2
 8001274:	6839      	ldr	r1, [r7, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f80e 	bl	8001298 <MX_USART1_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001282:	f06f 0303 	mvn.w	r3, #3
 8001286:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001288:	68fb      	ldr	r3, [r7, #12]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000026c 	.word	0x2000026c

08001298 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_USART1_Init+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	220c      	movs	r2, #12
 80012b6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	895b      	ldrh	r3, [r3, #10]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	891b      	ldrh	r3, [r3, #8]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	899b      	ldrh	r3, [r3, #12]
 80012d8:	461a      	mov	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012e4:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f007 fad1 	bl	8008894 <HAL_UART_Init>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000004 	.word	0x20000004

08001300 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ff8b 	bl	8001220 <BSP_PB_Callback>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <COM1_MspInit+0xa8>)
 800131a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131e:	4a26      	ldr	r2, [pc, #152]	@ (80013b8 <COM1_MspInit+0xa8>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <COM1_MspInit+0xa8>)
 800132a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001336:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <COM1_MspInit+0xa8>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	4a1e      	ldr	r2, [pc, #120]	@ (80013b8 <COM1_MspInit+0xa8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <COM1_MspInit+0xa8>)
 8001348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <COM1_MspInit+0xa8>)
 8001356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <COM1_MspInit+0xa8>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001360:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001364:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <COM1_MspInit+0xa8>)
 8001366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800136a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001376:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001380:	2301      	movs	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001384:	2307      	movs	r3, #7
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	480b      	ldr	r0, [pc, #44]	@ (80013bc <COM1_MspInit+0xac>)
 8001390:	f001 fc94 	bl	8002cbc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001398:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800139e:	2307      	movs	r3, #7
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <COM1_MspInit+0xac>)
 80013aa:	f001 fc87 	bl	8002cbc <HAL_GPIO_Init>
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	46020c00 	.word	0x46020c00
 80013bc:	42020000 	.word	0x42020000

080013c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <HAL_Init+0x50>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a11      	ldr	r2, [pc, #68]	@ (8001410 <HAL_Init+0x50>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 f916 	bl	8001602 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80013d6:	f003 f85b 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_Init+0x54>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	490c      	ldr	r1, [pc, #48]	@ (8001418 <HAL_Init+0x58>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ec:	4a0b      	ldr	r2, [pc, #44]	@ (800141c <HAL_Init+0x5c>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80013f0:	2004      	movs	r0, #4
 80013f2:	f000 f939 	bl	8001668 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f6:	2007      	movs	r0, #7
 80013f8:	f7ff fc44 	bl	8000c84 <HAL_InitTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e002      	b.n	800140c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001406:	f7ff fc21 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40022000 	.word	0x40022000
 8001414:	46020c00 	.word	0x46020c00
 8001418:	08009a54 	.word	0x08009a54
 800141c:	20000000 	.word	0x20000000

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000024 	.word	0x20000024
 8001444:	20000300 	.word	0x20000300

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000300 	.word	0x20000300

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000024 	.word	0x20000024

080014a8 <__NVIC_SetPriorityGrouping>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	@ (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	@ (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	@ (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	@ 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	@ 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff4c 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001626:	f7ff ff63 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800162a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f7ff ffb3 	bl	800159c <NVIC_EncodePriority>
 8001636:	4602      	mov	r2, r0
 8001638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff82 	bl	8001548 <__NVIC_SetPriority>
}
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff56 	bl	800150c <__NVIC_EnableIRQ>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b04      	cmp	r3, #4
 8001674:	d844      	bhi.n	8001700 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001676:	a201      	add	r2, pc, #4	@ (adr r2, 800167c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	0800169f 	.word	0x0800169f
 8001680:	080016bd 	.word	0x080016bd
 8001684:	080016df 	.word	0x080016df
 8001688:	08001701 	.word	0x08001701
 800168c:	08001691 	.word	0x08001691
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001690:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6013      	str	r3, [r2, #0]
      break;
 800169c:	e031      	b.n	8001702 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800169e:	4b1c      	ldr	r3, [pc, #112]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016a4:	f023 0304 	bic.w	r3, r3, #4
 80016a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b0:	4a18      	ldr	r2, [pc, #96]	@ (8001714 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016b2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80016ba:	e022      	b.n	8001702 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80016d2:	4a10      	ldr	r2, [pc, #64]	@ (8001714 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80016dc:	e011      	b.n	8001702 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80016f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80016fe:	e000      	b.n	8001702 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001700:	bf00      	nop
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010
 8001714:	46020c00 	.word	0x46020c00

08001718 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e04f      	b.n	80017d0 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_DMA_Start_IT+0x26>
 800173a:	2302      	movs	r3, #2
 800173c:	e048      	b.n	80017d0 <HAL_DMA_Start_IT+0xb8>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d136      	bne.n	80017c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2202      	movs	r2, #2
 8001756:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fa78 	bl	8001c5c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800177a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001792:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80017aa:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e007      	b.n	80017d0 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2240      	movs	r2, #64	@ 0x40
 80017c4:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80017e0:	f7ff fe32 	bl	8001448 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e06b      	b.n	80018c8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d008      	beq.n	800180e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e05c      	b.n	80018c8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0204 	orr.w	r2, r2, #4
 800181c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2205      	movs	r2, #5
 8001822:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001826:	e020      	b.n	800186a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001828:	f7ff fe0e 	bl	8001448 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b05      	cmp	r3, #5
 8001834:	d919      	bls.n	800186a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	f043 0210 	orr.w	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800184e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800185a:	2201      	movs	r2, #1
 800185c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e02e      	b.n	80018c8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0d7      	beq.n	8001828 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0202 	orr.w	r2, r2, #2
 8001886:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2204      	movs	r2, #4
 800188c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001898:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018b2:	2201      	movs	r2, #1
 80018b4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e019      	b.n	8001916 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d004      	beq.n	80018f8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e00e      	b.n	8001916 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2204      	movs	r2, #4
 80018fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001932:	f023 030f 	bic.w	r3, r3, #15
 8001936:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	3b50      	subs	r3, #80	@ 0x50
 8001942:	09db      	lsrs	r3, r3, #7
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2201      	movs	r2, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 813b 	beq.w	8001bd8 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d011      	beq.n	8001994 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00a      	beq.n	8001994 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001986:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d011      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019b8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d011      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019ea:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d011      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00a      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a1c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	f043 0208 	orr.w	r2, r3, #8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00c      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a4e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04c      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d045      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a84:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d12e      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001aa0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0202 	orr.w	r2, r2, #2
 8001ab0:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aca:	2201      	movs	r2, #1
 8001acc:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d07a      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
        }

        return;
 8001aee:	e075      	b.n	8001bdc <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2205      	movs	r2, #5
 8001af4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d039      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d032      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d111      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b50:	2201      	movs	r2, #1
 8001b52:	731a      	strb	r2, [r3, #12]
 8001b54:	e008      	b.n	8001b68 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001b70:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d025      	beq.n	8001bde <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0202 	orr.w	r2, r2, #2
 8001ba0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bba:	2201      	movs	r2, #1
 8001bbc:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
 8001bd6:	e002      	b.n	8001bde <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001bd8:	bf00      	nop
 8001bda:	e000      	b.n	8001bde <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001bdc:	bf00      	nop
    }
  }
}
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e02b      	b.n	8001c50 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001c00:	f023 030f 	bic.w	r3, r3, #15
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0e:	3b50      	subs	r3, #80	@ 0x50
 8001c10:	09db      	lsrs	r3, r3, #7
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	2201      	movs	r2, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d012      	beq.n	8001c4e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f003 0311 	and.w	r3, r3, #17
 8001c2e:	2b11      	cmp	r3, #17
 8001c30:	d106      	bne.n	8001c40 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	e006      	b.n	8001c4e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	401a      	ands	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	b291      	uxth	r1, r2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001c88:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff fbca 	bl	8001448 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0db      	b.n	8001e78 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001e80 <HAL_DMAEx_List_Init+0x1d8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f000 809f 	beq.w	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6c      	ldr	r2, [pc, #432]	@ (8001e84 <HAL_DMAEx_List_Init+0x1dc>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	f000 8099 	beq.w	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	@ (8001e88 <HAL_DMAEx_List_Init+0x1e0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	f000 8093 	beq.w	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a68      	ldr	r2, [pc, #416]	@ (8001e8c <HAL_DMAEx_List_Init+0x1e4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	f000 808d 	beq.w	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a66      	ldr	r2, [pc, #408]	@ (8001e90 <HAL_DMAEx_List_Init+0x1e8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f000 8087 	beq.w	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a64      	ldr	r2, [pc, #400]	@ (8001e94 <HAL_DMAEx_List_Init+0x1ec>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f000 8081 	beq.w	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a62      	ldr	r2, [pc, #392]	@ (8001e98 <HAL_DMAEx_List_Init+0x1f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d07b      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a61      	ldr	r2, [pc, #388]	@ (8001e9c <HAL_DMAEx_List_Init+0x1f4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d076      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5f      	ldr	r2, [pc, #380]	@ (8001ea0 <HAL_DMAEx_List_Init+0x1f8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d071      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea4 <HAL_DMAEx_List_Init+0x1fc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d06c      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea8 <HAL_DMAEx_List_Init+0x200>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d067      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001eac <HAL_DMAEx_List_Init+0x204>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d062      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a59      	ldr	r2, [pc, #356]	@ (8001eb0 <HAL_DMAEx_List_Init+0x208>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d05d      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a58      	ldr	r2, [pc, #352]	@ (8001eb4 <HAL_DMAEx_List_Init+0x20c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a56      	ldr	r2, [pc, #344]	@ (8001eb8 <HAL_DMAEx_List_Init+0x210>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d053      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a55      	ldr	r2, [pc, #340]	@ (8001ebc <HAL_DMAEx_List_Init+0x214>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d04e      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a53      	ldr	r2, [pc, #332]	@ (8001ec0 <HAL_DMAEx_List_Init+0x218>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d049      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a52      	ldr	r2, [pc, #328]	@ (8001ec4 <HAL_DMAEx_List_Init+0x21c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d044      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a50      	ldr	r2, [pc, #320]	@ (8001ec8 <HAL_DMAEx_List_Init+0x220>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d03f      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a4f      	ldr	r2, [pc, #316]	@ (8001ecc <HAL_DMAEx_List_Init+0x224>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d03a      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed0 <HAL_DMAEx_List_Init+0x228>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d035      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a4c      	ldr	r2, [pc, #304]	@ (8001ed4 <HAL_DMAEx_List_Init+0x22c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d030      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed8 <HAL_DMAEx_List_Init+0x230>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02b      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a49      	ldr	r2, [pc, #292]	@ (8001edc <HAL_DMAEx_List_Init+0x234>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d026      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a47      	ldr	r2, [pc, #284]	@ (8001ee0 <HAL_DMAEx_List_Init+0x238>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d021      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a46      	ldr	r2, [pc, #280]	@ (8001ee4 <HAL_DMAEx_List_Init+0x23c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d01c      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a44      	ldr	r2, [pc, #272]	@ (8001ee8 <HAL_DMAEx_List_Init+0x240>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d017      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a43      	ldr	r2, [pc, #268]	@ (8001eec <HAL_DMAEx_List_Init+0x244>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d012      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a41      	ldr	r2, [pc, #260]	@ (8001ef0 <HAL_DMAEx_List_Init+0x248>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a40      	ldr	r2, [pc, #256]	@ (8001ef4 <HAL_DMAEx_List_Init+0x24c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d008      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ef8 <HAL_DMAEx_List_Init+0x250>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <HAL_DMAEx_List_Init+0x162>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3d      	ldr	r2, [pc, #244]	@ (8001efc <HAL_DMAEx_List_Init+0x254>)
 8001e08:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0206 	orr.w	r2, r2, #6
 8001e28:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001e2a:	e00f      	b.n	8001e4c <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001e2c:	f7ff fb0c 	bl	8001448 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d908      	bls.n	8001e4c <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e015      	b.n	8001e78 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1e8      	bne.n	8001e2c <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 faba 	bl	80023d4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40020050 	.word	0x40020050
 8001e84:	50020050 	.word	0x50020050
 8001e88:	400200d0 	.word	0x400200d0
 8001e8c:	500200d0 	.word	0x500200d0
 8001e90:	40020150 	.word	0x40020150
 8001e94:	50020150 	.word	0x50020150
 8001e98:	400201d0 	.word	0x400201d0
 8001e9c:	500201d0 	.word	0x500201d0
 8001ea0:	40020250 	.word	0x40020250
 8001ea4:	50020250 	.word	0x50020250
 8001ea8:	400202d0 	.word	0x400202d0
 8001eac:	500202d0 	.word	0x500202d0
 8001eb0:	40020350 	.word	0x40020350
 8001eb4:	50020350 	.word	0x50020350
 8001eb8:	400203d0 	.word	0x400203d0
 8001ebc:	500203d0 	.word	0x500203d0
 8001ec0:	40020450 	.word	0x40020450
 8001ec4:	50020450 	.word	0x50020450
 8001ec8:	400204d0 	.word	0x400204d0
 8001ecc:	500204d0 	.word	0x500204d0
 8001ed0:	40020550 	.word	0x40020550
 8001ed4:	50020550 	.word	0x50020550
 8001ed8:	400205d0 	.word	0x400205d0
 8001edc:	500205d0 	.word	0x500205d0
 8001ee0:	40020650 	.word	0x40020650
 8001ee4:	50020650 	.word	0x50020650
 8001ee8:	400206d0 	.word	0x400206d0
 8001eec:	500206d0 	.word	0x500206d0
 8001ef0:	40020750 	.word	0x40020750
 8001ef4:	50020750 	.word	0x50020750
 8001ef8:	400207d0 	.word	0x400207d0
 8001efc:	500207d0 	.word	0x500207d0

08001f00 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_DMAEx_List_Start_IT+0x16>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e082      	b.n	8002020 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f20:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2c:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d005      	beq.n	8001f40 <HAL_DMAEx_List_Start_IT+0x40>
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d16a      	bne.n	8002010 <HAL_DMAEx_List_Start_IT+0x110>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d067      	beq.n	8002010 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d157      	bne.n	8001ffc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_DMAEx_List_Start_IT+0x5a>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e062      	b.n	8002020 <HAL_DMAEx_List_Start_IT+0x120>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6e:	2202      	movs	r2, #2
 8001f70:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8001f8e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa6:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d007      	beq.n	8001fc0 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fbe:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f107 010c 	add.w	r1, r7, #12
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 fd1d 	bl	8002a0c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	0c0b      	lsrs	r3, r1, #16
 8001fe0:	041b      	lsls	r3, r3, #16
 8001fe2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e007      	b.n	8002020 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2240      	movs	r2, #64	@ 0x40
 8002014:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_DMAEx_List_BuildNode+0x16>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e004      	b.n	800204c <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fb1d 	bl	8002684 <DMA_List_BuildNode>

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	@ 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_DMAEx_List_InsertNode+0x18>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b6      	b.n	80021de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d104      	bne.n	8002082 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2204      	movs	r2, #4
 800207c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0ad      	b.n	80021de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fc52 	bl	8002934 <DMA_List_CheckNodesBaseAddresses>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2205      	movs	r2, #5
 800209a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e09e      	b.n	80021de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fc73 	bl	8002994 <DMA_List_CheckNodesTypes>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2204      	movs	r2, #4
 80020b8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e08f      	b.n	80021de <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2202      	movs	r2, #2
 80020c2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80020ca:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fc99 	bl	8002a0c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11a      	bne.n	8002118 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e06c      	b.n	80021d0 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002102:	4013      	ands	r3, r2
 8002104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002108:	4319      	orrs	r1, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2202      	movs	r2, #2
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	e05b      	b.n	80021d0 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002128:	4013      	ands	r3, r2
 800212a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800212c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800212e:	4319      	orrs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e043      	b.n	80021c6 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002140:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	461a      	mov	r2, r3
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fc8e 	bl	8002a6c <DMA_List_FindNode>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d132      	bne.n	80021bc <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d11a      	bne.n	8002196 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	461a      	mov	r2, r3
 800216e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002172:	4013      	ands	r3, r2
 8002174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002178:	4319      	orrs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002186:	4013      	ands	r3, r2
 8002188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800218a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800218c:	4319      	orrs	r1, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002194:	e017      	b.n	80021c6 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8002196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80021ac:	4013      	ands	r3, r2
 80021ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021b2:	4319      	orrs	r1, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80021ba:	e004      	b.n	80021c6 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2206      	movs	r2, #6
 80021c0:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00b      	b.n	80021de <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3730      	adds	r7, #48	@ 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b08a      	sub	sp, #40	@ 0x28
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e052      	b.n	800229e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d104      	bne.n	800220a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e049      	b.n	800229e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d101      	bne.n	8002222 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e03d      	b.n	800229e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2204      	movs	r2, #4
 8002226:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e038      	b.n	800229e <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d104      	bne.n	800223e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2204      	movs	r2, #4
 8002238:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e02f      	b.n	800229e <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f107 0220 	add.w	r2, r7, #32
 8002252:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fbd8 	bl	8002a0c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	461a      	mov	r2, r3
 8002266:	2100      	movs	r1, #0
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fbff 	bl	8002a6c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002278:	4013      	ands	r3, r2
 800227a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4610      	mov	r0, r2
 8002280:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8002282:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8002284:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_DMAEx_List_LinkQ+0x16>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e072      	b.n	80023a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022c8:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d002      	beq.n	80022dc <HAL_DMAEx_List_LinkQ+0x34>
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d108      	bne.n	80022ee <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2240      	movs	r2, #64	@ 0x40
 80022e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e05c      	b.n	80023a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	7b1b      	ldrb	r3, [r3, #12]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d104      	bne.n	8002302 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e052      	b.n	80023a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2b      	ldr	r2, [pc, #172]	@ (80023b4 <HAL_DMAEx_List_LinkQ+0x10c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d022      	beq.n	8002352 <HAL_DMAEx_List_LinkQ+0xaa>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a29      	ldr	r2, [pc, #164]	@ (80023b8 <HAL_DMAEx_List_LinkQ+0x110>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d01d      	beq.n	8002352 <HAL_DMAEx_List_LinkQ+0xaa>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a28      	ldr	r2, [pc, #160]	@ (80023bc <HAL_DMAEx_List_LinkQ+0x114>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d018      	beq.n	8002352 <HAL_DMAEx_List_LinkQ+0xaa>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a26      	ldr	r2, [pc, #152]	@ (80023c0 <HAL_DMAEx_List_LinkQ+0x118>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_DMAEx_List_LinkQ+0xaa>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <HAL_DMAEx_List_LinkQ+0x11c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00e      	beq.n	8002352 <HAL_DMAEx_List_LinkQ+0xaa>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a23      	ldr	r2, [pc, #140]	@ (80023c8 <HAL_DMAEx_List_LinkQ+0x120>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_DMAEx_List_LinkQ+0xaa>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a22      	ldr	r2, [pc, #136]	@ (80023cc <HAL_DMAEx_List_LinkQ+0x124>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_DMAEx_List_LinkQ+0xaa>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a20      	ldr	r2, [pc, #128]	@ (80023d0 <HAL_DMAEx_List_LinkQ+0x128>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_DMAEx_List_LinkQ+0xae>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_DMAEx_List_LinkQ+0xb0>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2203      	movs	r2, #3
 800236e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e019      	b.n	80023a8 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002378:	2b81      	cmp	r3, #129	@ 0x81
 800237a:	d108      	bne.n	800238e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10d      	bne.n	80023a0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2204      	movs	r2, #4
 8002388:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00c      	b.n	80023a8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d004      	beq.n	80023a0 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2204      	movs	r2, #4
 800239a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e003      	b.n	80023a8 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40020650 	.word	0x40020650
 80023b8:	50020650 	.word	0x50020650
 80023bc:	400206d0 	.word	0x400206d0
 80023c0:	500206d0 	.word	0x500206d0
 80023c4:	40020750 	.word	0x40020750
 80023c8:	50020750 	.word	0x50020750
 80023cc:	400207d0 	.word	0x400207d0
 80023d0:	500207d0 	.word	0x500207d0

080023d4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a85      	ldr	r2, [pc, #532]	@ (8002604 <DMA_List_Init+0x230>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f000 80a0 	beq.w	8002534 <DMA_List_Init+0x160>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a83      	ldr	r2, [pc, #524]	@ (8002608 <DMA_List_Init+0x234>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	f000 809a 	beq.w	8002534 <DMA_List_Init+0x160>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a81      	ldr	r2, [pc, #516]	@ (800260c <DMA_List_Init+0x238>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f000 8094 	beq.w	8002534 <DMA_List_Init+0x160>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a7f      	ldr	r2, [pc, #508]	@ (8002610 <DMA_List_Init+0x23c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	f000 808e 	beq.w	8002534 <DMA_List_Init+0x160>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a7d      	ldr	r2, [pc, #500]	@ (8002614 <DMA_List_Init+0x240>)
 800241e:	4293      	cmp	r3, r2
 8002420:	f000 8088 	beq.w	8002534 <DMA_List_Init+0x160>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7b      	ldr	r2, [pc, #492]	@ (8002618 <DMA_List_Init+0x244>)
 800242a:	4293      	cmp	r3, r2
 800242c:	f000 8082 	beq.w	8002534 <DMA_List_Init+0x160>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a79      	ldr	r2, [pc, #484]	@ (800261c <DMA_List_Init+0x248>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d07c      	beq.n	8002534 <DMA_List_Init+0x160>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a78      	ldr	r2, [pc, #480]	@ (8002620 <DMA_List_Init+0x24c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d077      	beq.n	8002534 <DMA_List_Init+0x160>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a76      	ldr	r2, [pc, #472]	@ (8002624 <DMA_List_Init+0x250>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d072      	beq.n	8002534 <DMA_List_Init+0x160>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a75      	ldr	r2, [pc, #468]	@ (8002628 <DMA_List_Init+0x254>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d06d      	beq.n	8002534 <DMA_List_Init+0x160>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a73      	ldr	r2, [pc, #460]	@ (800262c <DMA_List_Init+0x258>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d068      	beq.n	8002534 <DMA_List_Init+0x160>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a72      	ldr	r2, [pc, #456]	@ (8002630 <DMA_List_Init+0x25c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d063      	beq.n	8002534 <DMA_List_Init+0x160>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a70      	ldr	r2, [pc, #448]	@ (8002634 <DMA_List_Init+0x260>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d05e      	beq.n	8002534 <DMA_List_Init+0x160>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	@ (8002638 <DMA_List_Init+0x264>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d059      	beq.n	8002534 <DMA_List_Init+0x160>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6d      	ldr	r2, [pc, #436]	@ (800263c <DMA_List_Init+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d054      	beq.n	8002534 <DMA_List_Init+0x160>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6c      	ldr	r2, [pc, #432]	@ (8002640 <DMA_List_Init+0x26c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d04f      	beq.n	8002534 <DMA_List_Init+0x160>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6a      	ldr	r2, [pc, #424]	@ (8002644 <DMA_List_Init+0x270>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04a      	beq.n	8002534 <DMA_List_Init+0x160>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a69      	ldr	r2, [pc, #420]	@ (8002648 <DMA_List_Init+0x274>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d045      	beq.n	8002534 <DMA_List_Init+0x160>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a67      	ldr	r2, [pc, #412]	@ (800264c <DMA_List_Init+0x278>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d040      	beq.n	8002534 <DMA_List_Init+0x160>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a66      	ldr	r2, [pc, #408]	@ (8002650 <DMA_List_Init+0x27c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <DMA_List_Init+0x160>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a64      	ldr	r2, [pc, #400]	@ (8002654 <DMA_List_Init+0x280>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d036      	beq.n	8002534 <DMA_List_Init+0x160>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a63      	ldr	r2, [pc, #396]	@ (8002658 <DMA_List_Init+0x284>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d031      	beq.n	8002534 <DMA_List_Init+0x160>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a61      	ldr	r2, [pc, #388]	@ (800265c <DMA_List_Init+0x288>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02c      	beq.n	8002534 <DMA_List_Init+0x160>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a60      	ldr	r2, [pc, #384]	@ (8002660 <DMA_List_Init+0x28c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d027      	beq.n	8002534 <DMA_List_Init+0x160>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002664 <DMA_List_Init+0x290>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <DMA_List_Init+0x160>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002668 <DMA_List_Init+0x294>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <DMA_List_Init+0x160>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5b      	ldr	r2, [pc, #364]	@ (800266c <DMA_List_Init+0x298>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <DMA_List_Init+0x160>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5a      	ldr	r2, [pc, #360]	@ (8002670 <DMA_List_Init+0x29c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <DMA_List_Init+0x160>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a58      	ldr	r2, [pc, #352]	@ (8002674 <DMA_List_Init+0x2a0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <DMA_List_Init+0x160>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a57      	ldr	r2, [pc, #348]	@ (8002678 <DMA_List_Init+0x2a4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <DMA_List_Init+0x160>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a55      	ldr	r2, [pc, #340]	@ (800267c <DMA_List_Init+0x2a8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <DMA_List_Init+0x160>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a54      	ldr	r2, [pc, #336]	@ (8002680 <DMA_List_Init+0x2ac>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <DMA_List_Init+0x164>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <DMA_List_Init+0x166>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	430a      	orrs	r2, r1
 800255a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2200      	movs	r2, #0
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a36      	ldr	r2, [pc, #216]	@ (8002664 <DMA_List_Init+0x290>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d022      	beq.n	80025d6 <DMA_List_Init+0x202>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a34      	ldr	r2, [pc, #208]	@ (8002668 <DMA_List_Init+0x294>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01d      	beq.n	80025d6 <DMA_List_Init+0x202>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a33      	ldr	r2, [pc, #204]	@ (800266c <DMA_List_Init+0x298>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d018      	beq.n	80025d6 <DMA_List_Init+0x202>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a31      	ldr	r2, [pc, #196]	@ (8002670 <DMA_List_Init+0x29c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <DMA_List_Init+0x202>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a30      	ldr	r2, [pc, #192]	@ (8002674 <DMA_List_Init+0x2a0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00e      	beq.n	80025d6 <DMA_List_Init+0x202>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002678 <DMA_List_Init+0x2a4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d009      	beq.n	80025d6 <DMA_List_Init+0x202>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2d      	ldr	r2, [pc, #180]	@ (800267c <DMA_List_Init+0x2a8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <DMA_List_Init+0x202>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002680 <DMA_List_Init+0x2ac>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <DMA_List_Init+0x206>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <DMA_List_Init+0x208>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d007      	beq.n	80025f0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2200      	movs	r2, #0
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40020050 	.word	0x40020050
 8002608:	50020050 	.word	0x50020050
 800260c:	400200d0 	.word	0x400200d0
 8002610:	500200d0 	.word	0x500200d0
 8002614:	40020150 	.word	0x40020150
 8002618:	50020150 	.word	0x50020150
 800261c:	400201d0 	.word	0x400201d0
 8002620:	500201d0 	.word	0x500201d0
 8002624:	40020250 	.word	0x40020250
 8002628:	50020250 	.word	0x50020250
 800262c:	400202d0 	.word	0x400202d0
 8002630:	500202d0 	.word	0x500202d0
 8002634:	40020350 	.word	0x40020350
 8002638:	50020350 	.word	0x50020350
 800263c:	400203d0 	.word	0x400203d0
 8002640:	500203d0 	.word	0x500203d0
 8002644:	40020450 	.word	0x40020450
 8002648:	50020450 	.word	0x50020450
 800264c:	400204d0 	.word	0x400204d0
 8002650:	500204d0 	.word	0x500204d0
 8002654:	40020550 	.word	0x40020550
 8002658:	50020550 	.word	0x50020550
 800265c:	400205d0 	.word	0x400205d0
 8002660:	500205d0 	.word	0x500205d0
 8002664:	40020650 	.word	0x40020650
 8002668:	50020650 	.word	0x50020650
 800266c:	400206d0 	.word	0x400206d0
 8002670:	500206d0 	.word	0x500206d0
 8002674:	40020750 	.word	0x40020750
 8002678:	50020750 	.word	0x50020750
 800267c:	400207d0 	.word	0x400207d0
 8002680:	500207d0 	.word	0x500207d0

08002684 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8002696:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800269c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80026a2:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80026a8:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d017      	beq.n	80026ea <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c6:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80026d4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80026e2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80026e4:	431a      	orrs	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	f240 237f 	movw	r3, #639	@ 0x27f
 80026f6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80026f8:	431a      	orrs	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002706:	d10c      	bne.n	8002722 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d011      	beq.n	8002738 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	e00a      	b.n	8002738 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800272a:	d105      	bne.n	8002738 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00f      	beq.n	8002760 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8002758:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800275a:	431a      	orrs	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002764:	b29a      	uxth	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d04e      	beq.n	8002814 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277e:	3b01      	subs	r3, #1
 8002780:	0419      	lsls	r1, r3, #16
 8002782:	4b6a      	ldr	r3, [pc, #424]	@ (800292c <DMA_List_BuildNode+0x2a8>)
 8002784:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8002786:	431a      	orrs	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002790:	2b00      	cmp	r3, #0
 8002792:	da06      	bge.n	80027a2 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e005      	b.n	80027ae <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da06      	bge.n	80027c4 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	e005      	b.n	80027d0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da06      	bge.n	80027e6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	e005      	b.n	80027f2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da06      	bge.n	8002808 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e005      	b.n	8002814 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05d      	beq.n	80028ec <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002834:	2b00      	cmp	r3, #0
 8002836:	da09      	bge.n	800284c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800283c:	425b      	negs	r3, r3
 800283e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	615a      	str	r2, [r3, #20]
 800284a:	e005      	b.n	8002858 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002850:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	2b00      	cmp	r3, #0
 800285e:	da0d      	bge.n	800287c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	425b      	negs	r3, r3
 8002866:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	0419      	lsls	r1, r3, #16
 8002870:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <DMA_List_BuildNode+0x2ac>)
 8002872:	400b      	ands	r3, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	615a      	str	r2, [r3, #20]
 800287a:	e009      	b.n	8002890 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002884:	0419      	lsls	r1, r3, #16
 8002886:	4b2a      	ldr	r3, [pc, #168]	@ (8002930 <DMA_List_BuildNode+0x2ac>)
 8002888:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800288a:	431a      	orrs	r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	2b00      	cmp	r3, #0
 8002896:	da08      	bge.n	80028aa <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	425b      	negs	r3, r3
 800289e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	619a      	str	r2, [r3, #24]
 80028a8:	e004      	b.n	80028b4 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da0b      	bge.n	80028d4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	425b      	negs	r3, r3
 80028c2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80028cc:	431a      	orrs	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	619a      	str	r2, [r3, #24]
 80028d2:	e007      	b.n	80028e4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028dc:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80028de:	431a      	orrs	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
 80028ea:	e002      	b.n	80028f2 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8002912:	e005      	b.n	8002920 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	621a      	str	r2, [r3, #32]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	07ff0000 	.word	0x07ff0000
 8002930:	1fff0000 	.word	0x1fff0000

08002934 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	e00a      	b.n	8002976 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e004      	b.n	8002976 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	041b      	lsls	r3, r3, #16
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	d001      	beq.n	8002986 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e00e      	b.n	80029d2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e006      	b.n	80029d2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80029e4:	2302      	movs	r3, #2
 80029e6:	e00b      	b.n	8002a00 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d001      	beq.n	80029fe <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e000      	b.n	8002a00 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <DMA_List_GetCLLRNodeInfo+0x58>)
 8002a2e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00f      	beq.n	8002a56 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8002a3c:	e00b      	b.n	8002a56 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8002a48:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2205      	movs	r2, #5
 8002a54:	601a      	str	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	fe010000 	.word	0xfe010000
 8002a68:	f8010000 	.word	0xf8010000

08002a6c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	@ 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d142      	bne.n	8002b16 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8002a90:	e01d      	b.n	8002ace <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e00f      	b.n	8002ac8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8002ac0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3dc      	bcc.n	8002a92 <DMA_List_FindNode+0x26>
 8002ad8:	e029      	b.n	8002b2e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e00f      	b.n	8002b10 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8002b08:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d206      	bcs.n	8002b2e <DMA_List_FindNode+0xc2>
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002b26:	4013      	ands	r3, r2
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d1d5      	bne.n	8002ada <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d001      	beq.n	8002b46 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e02b      	b.n	8002b9e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	461a      	mov	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00f      	beq.n	8002b9c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	461a      	mov	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8002b8c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	@ 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002baa:	b480      	push	{r7}
 8002bac:	b087      	sub	sp, #28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002bbc:	7afb      	ldrb	r3, [r7, #11]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d011      	beq.n	8002be6 <HAL_EXTI_RegisterCallback+0x3c>
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	dc13      	bgt.n	8002bee <HAL_EXTI_RegisterCallback+0x44>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_EXTI_RegisterCallback+0x26>
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d007      	beq.n	8002bde <HAL_EXTI_RegisterCallback+0x34>
 8002bce:	e00e      	b.n	8002bee <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	609a      	str	r2, [r3, #8]
      break;
 8002bdc:	e00a      	b.n	8002bf4 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	605a      	str	r2, [r3, #4]
      break;
 8002be4:	e006      	b.n	8002bf4 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
      break;
 8002bec:	e002      	b.n	8002bf4 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf2:	bf00      	nop
  }

  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e003      	b.n	8002c1e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2201      	movs	r2, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <HAL_EXTI_IRQHandler+0x88>)
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <HAL_EXTI_IRQHandler+0x8c>)
 8002c84:	4413      	add	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d009      	beq.n	8002cac <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4798      	blx	r3
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	4602200c 	.word	0x4602200c
 8002cb8:	46022010 	.word	0x46022010

08002cbc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cce:	e1ba      	b.n	8003046 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 81aa 	beq.w	8003040 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a55      	ldr	r2, [pc, #340]	@ (8002e44 <HAL_GPIO_Init+0x188>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d15d      	bne.n	8002db0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0201 	and.w	r2, r3, #1
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002d24:	4a48      	ldr	r2, [pc, #288]	@ (8002e48 <HAL_GPIO_Init+0x18c>)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d2c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002d2e:	4a46      	ldr	r2, [pc, #280]	@ (8002e48 <HAL_GPIO_Init+0x18c>)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	3208      	adds	r2, #8
 8002d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d46:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220b      	movs	r2, #11
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69f9      	ldr	r1, [r7, #28]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e067      	b.n	8002e80 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x104>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b12      	cmp	r3, #18
 8002dbe:	d145      	bne.n	8002e4c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	69f9      	ldr	r1, [r7, #28]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e01e      	b.n	8002e80 <HAL_GPIO_Init+0x1c4>
 8002e42:	bf00      	nop
 8002e44:	46020000 	.word	0x46020000
 8002e48:	08009ab8 	.word	0x08009ab8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d00b      	beq.n	8002ea0 <HAL_GPIO_Init+0x1e4>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d007      	beq.n	8002ea0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e94:	2b11      	cmp	r3, #17
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b12      	cmp	r3, #18
 8002e9e:	d130      	bne.n	8002f02 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0201 	and.w	r2, r3, #1
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d017      	beq.n	8002f3a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d07c      	beq.n	8003040 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002f46:	4a47      	ldr	r2, [pc, #284]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0a9a      	lsrs	r2, r3, #10
 8002f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8003068 <HAL_GPIO_Init+0x3ac>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	f002 0203 	and.w	r2, r2, #3
 8002f78:	00d2      	lsls	r2, r2, #3
 8002f7a:	4093      	lsls	r3, r2
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002f82:	4938      	ldr	r1, [pc, #224]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3318      	adds	r3, #24
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002fba:	4b2a      	ldr	r3, [pc, #168]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002fde:	4a21      	ldr	r2, [pc, #132]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800300a:	4a16      	ldr	r2, [pc, #88]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003012:	4b14      	ldr	r3, [pc, #80]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 8003014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003018:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43db      	mvns	r3, r3
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	4013      	ands	r3, r2
 8003022:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003038:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <HAL_GPIO_Init+0x3a8>)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3301      	adds	r3, #1
 8003044:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f ae3d 	bne.w	8002cd0 <HAL_GPIO_Init+0x14>
  }
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	3724      	adds	r7, #36	@ 0x24
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	46022000 	.word	0x46022000
 8003068:	002f7f7f 	.word	0x002f7f7f

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003088:	e002      	b.n	8003090 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e007      	b.n	80030ca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80030ba:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 0204 	bic.w	r2, r3, #4
 80030c2:	4905      	ldr	r1, [pc, #20]	@ (80030d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40030400 	.word	0x40030400

080030dc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_ICACHE_Enable+0x1c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <HAL_ICACHE_Enable+0x1c>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	40030400 	.word	0x40030400

080030fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003104:	4b39      	ldr	r3, [pc, #228]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800310c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d10b      	bne.n	800312e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311c:	d905      	bls.n	800312a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800311e:	4b33      	ldr	r3, [pc, #204]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4a32      	ldr	r2, [pc, #200]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003128:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e057      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003134:	d90a      	bls.n	800314c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003136:	4b2d      	ldr	r3, [pc, #180]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4313      	orrs	r3, r2
 8003142:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003148:	60d3      	str	r3, [r2, #12]
 800314a:	e007      	b.n	800315c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800314c:	4b27      	ldr	r3, [pc, #156]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003154:	4925      	ldr	r1, [pc, #148]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4313      	orrs	r3, r2
 800315a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800315c:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a24      	ldr	r2, [pc, #144]	@ (80031f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2232      	movs	r2, #50	@ 0x32
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	099b      	lsrs	r3, r3, #6
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800317a:	e002      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b01      	subs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003182:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_PWREx_ControlVoltageScaling+0x98>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f3      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d01b      	beq.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800319a:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a15      	ldr	r2, [pc, #84]	@ (80031f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	2232      	movs	r2, #50	@ 0x32
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	4a11      	ldr	r2, [pc, #68]	@ (80031f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	099b      	lsrs	r3, r3, #6
 80031b4:	3301      	adds	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031b8:	e002      	b.n	80031c0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3b01      	subs	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031c0:	4b0a      	ldr	r3, [pc, #40]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d102      	bne.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f3      	bne.n	80031ba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e000      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	46020800 	.word	0x46020800
 80031f0:	20000000 	.word	0x20000000
 80031f4:	10624dd3 	.word	0x10624dd3

080031f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80031fc:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <HAL_PWREx_GetVoltageRange+0x18>)
 80031fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	46020800 	.word	0x46020800

08003214 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800321c:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <HAL_PWREx_ConfigSupply+0x94>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a22      	ldr	r2, [pc, #136]	@ (80032ac <HAL_PWREx_ConfigSupply+0x98>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	2232      	movs	r2, #50	@ 0x32
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_PWREx_ConfigSupply+0x98>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d113      	bne.n	8003268 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a1a      	ldr	r2, [pc, #104]	@ (80032b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003246:	f023 0302 	bic.w	r3, r3, #2
 800324a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800324c:	e002      	b.n	8003254 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3b01      	subs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003254:	4b16      	ldr	r3, [pc, #88]	@ (80032b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d116      	bne.n	800328e <HAL_PWREx_ConfigSupply+0x7a>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f3      	bne.n	800324e <HAL_PWREx_ConfigSupply+0x3a>
 8003266:	e012      	b.n	800328e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a10      	ldr	r2, [pc, #64]	@ (80032b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003274:	e002      	b.n	800327c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3b01      	subs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800327e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_PWREx_ConfigSupply+0x7a>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f3      	bne.n	8003276 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e000      	b.n	800329a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000000 	.word	0x20000000
 80032ac:	10624dd3 	.word	0x10624dd3
 80032b0:	46020800 	.word	0x46020800

080032b4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80032b8:	4b05      	ldr	r3, [pc, #20]	@ (80032d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80032be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032c2:	6113      	str	r3, [r2, #16]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	46020800 	.word	0x46020800

080032d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	46020800 	.word	0x46020800

080032f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08e      	sub	sp, #56	@ 0x38
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f000 bec8 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330e:	4b99      	ldr	r3, [pc, #612]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003318:	4b96      	ldr	r3, [pc, #600]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800331a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 816c 	beq.w	8003608 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_RCC_OscConfig+0x52>
 8003336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003338:	2b0c      	cmp	r3, #12
 800333a:	f040 80de 	bne.w	80034fa <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800333e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 80da 	bne.w	80034fa <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f000 bea5 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003358:	4b86      	ldr	r3, [pc, #536]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <HAL_RCC_OscConfig+0x7a>
 8003364:	4b83      	ldr	r3, [pc, #524]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800336c:	e005      	b.n	800337a <HAL_RCC_OscConfig+0x86>
 800336e:	4b81      	ldr	r3, [pc, #516]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800337a:	4293      	cmp	r3, r2
 800337c:	d255      	bcs.n	800342a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fa11 	bl	80047b0 <RCC_SetFlashLatencyFromMSIRange>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f000 be82 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800339a:	4b76      	ldr	r3, [pc, #472]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4a75      	ldr	r2, [pc, #468]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80033a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	4b73      	ldr	r3, [pc, #460]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	4970      	ldr	r1, [pc, #448]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80033c0:	d309      	bcc.n	80033d6 <HAL_RCC_OscConfig+0xe2>
 80033c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 021f 	bic.w	r2, r3, #31
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	4969      	ldr	r1, [pc, #420]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60cb      	str	r3, [r1, #12]
 80033d4:	e07e      	b.n	80034d4 <HAL_RCC_OscConfig+0x1e0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da0a      	bge.n	80033f4 <HAL_RCC_OscConfig+0x100>
 80033de:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	015b      	lsls	r3, r3, #5
 80033ec:	4961      	ldr	r1, [pc, #388]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60cb      	str	r3, [r1, #12]
 80033f2:	e06f      	b.n	80034d4 <HAL_RCC_OscConfig+0x1e0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fc:	d30a      	bcc.n	8003414 <HAL_RCC_OscConfig+0x120>
 80033fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	029b      	lsls	r3, r3, #10
 800340c:	4959      	ldr	r1, [pc, #356]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800340e:	4313      	orrs	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
 8003412:	e05f      	b.n	80034d4 <HAL_RCC_OscConfig+0x1e0>
 8003414:	4b57      	ldr	r3, [pc, #348]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	03db      	lsls	r3, r3, #15
 8003422:	4954      	ldr	r1, [pc, #336]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003424:	4313      	orrs	r3, r2
 8003426:	60cb      	str	r3, [r1, #12]
 8003428:	e054      	b.n	80034d4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800342a:	4b52      	ldr	r3, [pc, #328]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4a51      	ldr	r2, [pc, #324]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003430:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003434:	6093      	str	r3, [r2, #8]
 8003436:	4b4f      	ldr	r3, [pc, #316]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	494c      	ldr	r1, [pc, #304]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003450:	d309      	bcc.n	8003466 <HAL_RCC_OscConfig+0x172>
 8003452:	4b48      	ldr	r3, [pc, #288]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 021f 	bic.w	r2, r3, #31
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4945      	ldr	r1, [pc, #276]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003460:	4313      	orrs	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
 8003464:	e028      	b.n	80034b8 <HAL_RCC_OscConfig+0x1c4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	da0a      	bge.n	8003484 <HAL_RCC_OscConfig+0x190>
 800346e:	4b41      	ldr	r3, [pc, #260]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	493d      	ldr	r1, [pc, #244]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800347e:	4313      	orrs	r3, r2
 8003480:	60cb      	str	r3, [r1, #12]
 8003482:	e019      	b.n	80034b8 <HAL_RCC_OscConfig+0x1c4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348c:	d30a      	bcc.n	80034a4 <HAL_RCC_OscConfig+0x1b0>
 800348e:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	029b      	lsls	r3, r3, #10
 800349c:	4935      	ldr	r1, [pc, #212]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	60cb      	str	r3, [r1, #12]
 80034a2:	e009      	b.n	80034b8 <HAL_RCC_OscConfig+0x1c4>
 80034a4:	4b33      	ldr	r3, [pc, #204]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	03db      	lsls	r3, r3, #15
 80034b2:	4930      	ldr	r1, [pc, #192]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f974 	bl	80047b0 <RCC_SetFlashLatencyFromMSIRange>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f000 bde5 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80034d4:	f001 f8de 	bl	8004694 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034d8:	4b27      	ldr	r3, [pc, #156]	@ (8003578 <HAL_RCC_OscConfig+0x284>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fbd1 	bl	8000c84 <HAL_InitTick>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80034e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 808a 	beq.w	8003606 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80034f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034f6:	f000 bdd2 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d066      	beq.n	80035d0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003502:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800350e:	f7fd ff9b 	bl	8001448 <HAL_GetTick>
 8003512:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003514:	e009      	b.n	800352a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003516:	f7fd ff97 	bl	8001448 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d902      	bls.n	800352a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	f000 bdba 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ef      	beq.n	8003516 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4a0e      	ldr	r2, [pc, #56]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800353c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003540:	6093      	str	r3, [r2, #8]
 8003542:	4b0c      	ldr	r3, [pc, #48]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	4909      	ldr	r1, [pc, #36]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003550:	4313      	orrs	r3, r2
 8003552:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800355c:	d30e      	bcc.n	800357c <HAL_RCC_OscConfig+0x288>
 800355e:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f023 021f 	bic.w	r2, r3, #31
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4902      	ldr	r1, [pc, #8]	@ (8003574 <HAL_RCC_OscConfig+0x280>)
 800356c:	4313      	orrs	r3, r2
 800356e:	60cb      	str	r3, [r1, #12]
 8003570:	e04a      	b.n	8003608 <HAL_RCC_OscConfig+0x314>
 8003572:	bf00      	nop
 8003574:	46020c00 	.word	0x46020c00
 8003578:	20000020 	.word	0x20000020
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	2b00      	cmp	r3, #0
 8003582:	da0a      	bge.n	800359a <HAL_RCC_OscConfig+0x2a6>
 8003584:	4b98      	ldr	r3, [pc, #608]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	015b      	lsls	r3, r3, #5
 8003592:	4995      	ldr	r1, [pc, #596]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	60cb      	str	r3, [r1, #12]
 8003598:	e036      	b.n	8003608 <HAL_RCC_OscConfig+0x314>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d30a      	bcc.n	80035ba <HAL_RCC_OscConfig+0x2c6>
 80035a4:	4b90      	ldr	r3, [pc, #576]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	029b      	lsls	r3, r3, #10
 80035b2:	498d      	ldr	r1, [pc, #564]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60cb      	str	r3, [r1, #12]
 80035b8:	e026      	b.n	8003608 <HAL_RCC_OscConfig+0x314>
 80035ba:	4b8b      	ldr	r3, [pc, #556]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	03db      	lsls	r3, r3, #15
 80035c8:	4987      	ldr	r1, [pc, #540]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60cb      	str	r3, [r1, #12]
 80035ce:	e01b      	b.n	8003608 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80035d0:	4b85      	ldr	r3, [pc, #532]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a84      	ldr	r2, [pc, #528]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80035dc:	f7fd ff34 	bl	8001448 <HAL_GetTick>
 80035e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035e2:	e009      	b.n	80035f8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e4:	f7fd ff30 	bl	8001448 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d902      	bls.n	80035f8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	f000 bd53 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80035f8:	4b7b      	ldr	r3, [pc, #492]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ef      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
 8003604:	e000      	b.n	8003608 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003606:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 808b 	beq.w	800372c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	2b08      	cmp	r3, #8
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x334>
 800361c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d109      	bne.n	8003636 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	2b03      	cmp	r3, #3
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d17d      	bne.n	800372c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f000 bd34 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x35a>
 8003640:	4b69      	ldr	r3, [pc, #420]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a68      	ldr	r2, [pc, #416]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	e041      	b.n	80036d2 <HAL_RCC_OscConfig+0x3de>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003656:	d112      	bne.n	800367e <HAL_RCC_OscConfig+0x38a>
 8003658:	4b63      	ldr	r3, [pc, #396]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a62      	ldr	r2, [pc, #392]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800365e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b60      	ldr	r3, [pc, #384]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a5f      	ldr	r2, [pc, #380]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800366a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b5d      	ldr	r3, [pc, #372]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5c      	ldr	r2, [pc, #368]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e029      	b.n	80036d2 <HAL_RCC_OscConfig+0x3de>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003686:	d112      	bne.n	80036ae <HAL_RCC_OscConfig+0x3ba>
 8003688:	4b57      	ldr	r3, [pc, #348]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a56      	ldr	r2, [pc, #344]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b54      	ldr	r3, [pc, #336]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a53      	ldr	r2, [pc, #332]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b51      	ldr	r3, [pc, #324]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a50      	ldr	r2, [pc, #320]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e011      	b.n	80036d2 <HAL_RCC_OscConfig+0x3de>
 80036ae:	4b4e      	ldr	r3, [pc, #312]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4d      	ldr	r2, [pc, #308]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b4b      	ldr	r3, [pc, #300]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a4a      	ldr	r2, [pc, #296]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b48      	ldr	r3, [pc, #288]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a47      	ldr	r2, [pc, #284]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80036d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d014      	beq.n	8003704 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80036da:	f7fd feb5 	bl	8001448 <HAL_GetTick>
 80036de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e0:	e009      	b.n	80036f6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e2:	f7fd feb1 	bl	8001448 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b64      	cmp	r3, #100	@ 0x64
 80036ee:	d902      	bls.n	80036f6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	f000 bcd4 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036f6:	4b3c      	ldr	r3, [pc, #240]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ef      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3ee>
 8003702:	e013      	b.n	800372c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003704:	f7fd fea0 	bl	8001448 <HAL_GetTick>
 8003708:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370a:	e009      	b.n	8003720 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7fd fe9c 	bl	8001448 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	@ 0x64
 8003718:	d902      	bls.n	8003720 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	f000 bcbf 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003720:	4b31      	ldr	r3, [pc, #196]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ef      	bne.n	800370c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05f      	beq.n	80037f8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	2b04      	cmp	r3, #4
 800373c:	d005      	beq.n	800374a <HAL_RCC_OscConfig+0x456>
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d114      	bne.n	800376e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	2b02      	cmp	r3, #2
 8003748:	d111      	bne.n	800376e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f000 bca3 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b23      	ldr	r3, [pc, #140]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	4920      	ldr	r1, [pc, #128]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800376c:	e044      	b.n	80037f8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d024      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003776:	4b1c      	ldr	r3, [pc, #112]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003780:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003782:	f7fd fe61 	bl	8001448 <HAL_GetTick>
 8003786:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003788:	e009      	b.n	800379e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378a:	f7fd fe5d 	bl	8001448 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d902      	bls.n	800379e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	f000 bc80 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ef      	beq.n	800378a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b0f      	ldr	r3, [pc, #60]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	490b      	ldr	r1, [pc, #44]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]
 80037be:	e01b      	b.n	80037f8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80037c0:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a08      	ldr	r2, [pc, #32]	@ (80037e8 <HAL_RCC_OscConfig+0x4f4>)
 80037c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80037cc:	f7fd fe3c 	bl	8001448 <HAL_GetTick>
 80037d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fd fe38 	bl	8001448 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d904      	bls.n	80037ec <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	f000 bc5b 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
 80037e8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ec:	4baf      	ldr	r3, [pc, #700]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80c8 	beq.w	8003996 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380c:	4ba7      	ldr	r3, [pc, #668]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 800380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d111      	bne.n	800383e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	4ba4      	ldr	r3, [pc, #656]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003820:	4aa2      	ldr	r2, [pc, #648]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800382a:	4ba0      	ldr	r3, [pc, #640]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800383e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 8003840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d119      	bne.n	800387e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800384a:	4b99      	ldr	r3, [pc, #612]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	4a98      	ldr	r2, [pc, #608]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fd fdf7 	bl	8001448 <HAL_GetTick>
 800385a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800385c:	e009      	b.n	8003872 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7fd fdf3 	bl	8001448 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d902      	bls.n	8003872 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	f000 bc16 	b.w	800409e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003872:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0ef      	beq.n	800385e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d05f      	beq.n	8003946 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003886:	4b89      	ldr	r3, [pc, #548]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800388c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003898:	429a      	cmp	r2, r3
 800389a:	d037      	beq.n	800390c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d006      	beq.n	80038b4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e3f4      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01b      	beq.n	80038f6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80038be:	4b7b      	ldr	r3, [pc, #492]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80038c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038c4:	4a79      	ldr	r2, [pc, #484]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80038c6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80038ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80038ce:	f7fd fdbb 	bl	8001448 <HAL_GetTick>
 80038d2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d6:	f7fd fdb7 	bl	8001448 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e3da      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038e8:	4b70      	ldr	r3, [pc, #448]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80038ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ef      	bne.n	80038d6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80038f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80038f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	4969      	ldr	r1, [pc, #420]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800390c:	4b67      	ldr	r3, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 800390e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003912:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003914:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003918:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800391c:	f7fd fd94 	bl	8001448 <HAL_GetTick>
 8003920:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7fd fd90 	bl	8001448 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b05      	cmp	r3, #5
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e3b3      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003936:	4b5d      	ldr	r3, [pc, #372]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800393c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCC_OscConfig+0x630>
 8003944:	e01b      	b.n	800397e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003946:	4b59      	ldr	r3, [pc, #356]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800394c:	4a57      	ldr	r2, [pc, #348]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 800394e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003952:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003956:	f7fd fd77 	bl	8001448 <HAL_GetTick>
 800395a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395e:	f7fd fd73 	bl	8001448 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b05      	cmp	r3, #5
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e396      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003970:	4b4e      	ldr	r3, [pc, #312]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ef      	bne.n	800395e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800397e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4b49      	ldr	r3, [pc, #292]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800398c:	4a47      	ldr	r2, [pc, #284]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8111 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039aa:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80039ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d111      	bne.n	80039dc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b3c      	ldr	r3, [pc, #240]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80039ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039be:	4a3b      	ldr	r2, [pc, #236]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80039c8:	4b38      	ldr	r3, [pc, #224]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 80039ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039dc:	4b34      	ldr	r3, [pc, #208]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d118      	bne.n	8003a1a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80039e8:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	4a30      	ldr	r2, [pc, #192]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f4:	f7fd fd28 	bl	8001448 <HAL_GetTick>
 80039f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fc:	f7fd fd24 	bl	8001448 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e347      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a0e:	4b28      	ldr	r3, [pc, #160]	@ (8003ab0 <HAL_RCC_OscConfig+0x7bc>)
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01f      	beq.n	8003a66 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d010      	beq.n	8003a54 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a32:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a38:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a42:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a48:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a52:	e018      	b.n	8003a86 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a54:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a5a:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a64:	e00f      	b.n	8003a86 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a66:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003aac <HAL_RCC_OscConfig+0x7b8>)
 8003a7e:	f023 0304 	bic.w	r3, r3, #4
 8003a82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d057      	beq.n	8003b3e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fcdb 	bl	8001448 <HAL_GetTick>
 8003a92:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a94:	e00e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fd fcd7 	bl	8001448 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d905      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e2f8      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
 8003aac:	46020c00 	.word	0x46020c00
 8003ab0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab4:	4b9c      	ldr	r3, [pc, #624]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0e9      	beq.n	8003a96 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ace:	4b96      	ldr	r3, [pc, #600]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad4:	4a94      	ldr	r2, [pc, #592]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ada:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fcb2 	bl	8001448 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e2d3      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003af6:	4b8c      	ldr	r3, [pc, #560]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ed      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x7ec>
 8003b04:	e053      	b.n	8003bae <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b06:	4b88      	ldr	r3, [pc, #544]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b0c:	4a86      	ldr	r2, [pc, #536]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fd fc96 	bl	8001448 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e2b7      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ed      	bne.n	8003b18 <HAL_RCC_OscConfig+0x824>
 8003b3c:	e037      	b.n	8003bae <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fc83 	bl	8001448 <HAL_GetTick>
 8003b42:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd fc7f 	bl	8001448 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e2a0      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b5c:	4b72      	ldr	r3, [pc, #456]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ed      	bne.n	8003b46 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b78:	4b6b      	ldr	r3, [pc, #428]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd fc5d 	bl	8001448 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e27e      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ba0:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ed      	bne.n	8003b8a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003bbe:	f023 0304 	bic.w	r3, r3, #4
 8003bc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d036      	beq.n	8003c40 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d019      	beq.n	8003c0e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003bda:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a52      	ldr	r2, [pc, #328]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003be0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003be4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003be6:	f7fd fc2f 	bl	8001448 <HAL_GetTick>
 8003bea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bee:	f7fd fc2b 	bl	8001448 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e24e      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c00:	4b49      	ldr	r3, [pc, #292]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x8fa>
 8003c0c:	e018      	b.n	8003c40 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003c0e:	4b46      	ldr	r3, [pc, #280]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a45      	ldr	r2, [pc, #276]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c18:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c1a:	f7fd fc15 	bl	8001448 <HAL_GetTick>
 8003c1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c22:	f7fd fc11 	bl	8001448 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e234      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c34:	4b3c      	ldr	r3, [pc, #240]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d036      	beq.n	8003cba <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d019      	beq.n	8003c88 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003c54:	4b34      	ldr	r3, [pc, #208]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c60:	f7fd fbf2 	bl	8001448 <HAL_GetTick>
 8003c64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c68:	f7fd fbee 	bl	8001448 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e211      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x974>
 8003c86:	e018      	b.n	8003cba <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003c88:	4b27      	ldr	r3, [pc, #156]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a26      	ldr	r2, [pc, #152]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c92:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003c94:	f7fd fbd8 	bl	8001448 <HAL_GetTick>
 8003c98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003c9c:	f7fd fbd4 	bl	8001448 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1f7      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003cae:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d07f      	beq.n	8003dc6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d062      	beq.n	8003d94 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003cce:	4b16      	ldr	r3, [pc, #88]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	4a15      	ldr	r2, [pc, #84]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003cd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cd8:	6093      	str	r3, [r2, #8]
 8003cda:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	4910      	ldr	r1, [pc, #64]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003cf4:	d309      	bcc.n	8003d0a <HAL_RCC_OscConfig+0xa16>
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f023 021f 	bic.w	r2, r3, #31
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4909      	ldr	r1, [pc, #36]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
 8003d08:	e02a      	b.n	8003d60 <HAL_RCC_OscConfig+0xa6c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da0c      	bge.n	8003d2c <HAL_RCC_OscConfig+0xa38>
 8003d12:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	015b      	lsls	r3, r3, #5
 8003d20:	4901      	ldr	r1, [pc, #4]	@ (8003d28 <HAL_RCC_OscConfig+0xa34>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60cb      	str	r3, [r1, #12]
 8003d26:	e01b      	b.n	8003d60 <HAL_RCC_OscConfig+0xa6c>
 8003d28:	46020c00 	.word	0x46020c00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d30a      	bcc.n	8003d4c <HAL_RCC_OscConfig+0xa58>
 8003d36:	4ba1      	ldr	r3, [pc, #644]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	499d      	ldr	r1, [pc, #628]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
 8003d4a:	e009      	b.n	8003d60 <HAL_RCC_OscConfig+0xa6c>
 8003d4c:	4b9b      	ldr	r3, [pc, #620]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	03db      	lsls	r3, r3, #15
 8003d5a:	4998      	ldr	r1, [pc, #608]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003d60:	4b96      	ldr	r3, [pc, #600]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a95      	ldr	r2, [pc, #596]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d66:	f043 0310 	orr.w	r3, r3, #16
 8003d6a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003d6c:	f7fd fb6c 	bl	8001448 <HAL_GetTick>
 8003d70:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003d74:	f7fd fb68 	bl	8001448 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e18b      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003d86:	4b8d      	ldr	r3, [pc, #564]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xa80>
 8003d92:	e018      	b.n	8003dc6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003d94:	4b89      	ldr	r3, [pc, #548]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a88      	ldr	r2, [pc, #544]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003d9a:	f023 0310 	bic.w	r3, r3, #16
 8003d9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003da0:	f7fd fb52 	bl	8001448 <HAL_GetTick>
 8003da4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003da8:	f7fd fb4e 	bl	8001448 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e171      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003dba:	4b80      	ldr	r3, [pc, #512]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8166 	beq.w	800409c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd6:	4b79      	ldr	r3, [pc, #484]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	f000 80f2 	beq.w	8003fc8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	f040 80c5 	bne.w	8003f78 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b73      	ldr	r3, [pc, #460]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a72      	ldr	r2, [pc, #456]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003dfa:	f7fd fb25 	bl	8001448 <HAL_GetTick>
 8003dfe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd fb21 	bl	8001448 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e144      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003e14:	4b69      	ldr	r3, [pc, #420]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f0      	bne.n	8003e02 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e20:	4b66      	ldr	r3, [pc, #408]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d111      	bne.n	8003e52 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	4b63      	ldr	r3, [pc, #396]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e34:	4a61      	ldr	r2, [pc, #388]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003e52:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc0 <HAL_RCC_OscConfig+0xccc>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e5e:	d102      	bne.n	8003e66 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e66:	4b56      	ldr	r3, [pc, #344]	@ (8003fc0 <HAL_RCC_OscConfig+0xccc>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a55      	ldr	r2, [pc, #340]	@ (8003fc0 <HAL_RCC_OscConfig+0xccc>)
 8003e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e70:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003e72:	4b52      	ldr	r3, [pc, #328]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e86:	3a01      	subs	r2, #1
 8003e88:	0212      	lsls	r2, r2, #8
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e90:	430a      	orrs	r2, r1
 8003e92:	494a      	ldr	r1, [pc, #296]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e98:	4b48      	ldr	r3, [pc, #288]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9c:	4b49      	ldr	r3, [pc, #292]	@ (8003fc4 <HAL_RCC_OscConfig+0xcd0>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ea4:	3a01      	subs	r2, #1
 8003ea6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0252      	lsls	r2, r2, #9
 8003eb2:	b292      	uxth	r2, r2
 8003eb4:	4311      	orrs	r1, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eba:	3a01      	subs	r2, #1
 8003ebc:	0412      	lsls	r2, r2, #16
 8003ebe:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	0612      	lsls	r2, r2, #24
 8003ecc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	493a      	ldr	r1, [pc, #232]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003ed8:	4b38      	ldr	r3, [pc, #224]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	4a37      	ldr	r2, [pc, #220]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	4a34      	ldr	r2, [pc, #208]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003eee:	4b33      	ldr	r3, [pc, #204]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	4a32      	ldr	r2, [pc, #200]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003ef4:	f043 0310 	orr.w	r3, r3, #16
 8003ef8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003efa:	4b30      	ldr	r3, [pc, #192]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	f023 020c 	bic.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	492d      	ldr	r1, [pc, #180]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003f14:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <HAL_RCC_OscConfig+0xccc>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a29      	ldr	r2, [pc, #164]	@ (8003fc0 <HAL_RCC_OscConfig+0xccc>)
 8003f1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f1e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003f20:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003f28:	4b24      	ldr	r3, [pc, #144]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f2e:	4a23      	ldr	r2, [pc, #140]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f30:	f023 0304 	bic.w	r3, r3, #4
 8003f34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003f38:	4b20      	ldr	r3, [pc, #128]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f44:	f7fd fa80 	bl	8001448 <HAL_GetTick>
 8003f48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fd fa7c 	bl	8001448 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e09f      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003f5e:	4b17      	ldr	r3, [pc, #92]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f6a:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	4a13      	ldr	r2, [pc, #76]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f74:	6293      	str	r3, [r2, #40]	@ 0x28
 8003f76:	e091      	b.n	800409c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003f7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f84:	f7fd fa60 	bl	8001448 <HAL_GetTick>
 8003f88:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8c:	f7fd fa5c 	bl	8001448 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e07f      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f9e:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003faa:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	4a03      	ldr	r2, [pc, #12]	@ (8003fbc <HAL_RCC_OscConfig+0xcc8>)
 8003fb0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	6293      	str	r3, [r2, #40]	@ 0x28
 8003fba:	e06f      	b.n	800409c <HAL_RCC_OscConfig+0xda8>
 8003fbc:	46020c00 	.word	0x46020c00
 8003fc0:	46020800 	.word	0x46020800
 8003fc4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003fc8:	4b37      	ldr	r3, [pc, #220]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fce:	4b36      	ldr	r3, [pc, #216]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d039      	beq.n	8004050 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0203 	and.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d132      	bne.n	8004050 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d129      	bne.n	8004050 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d122      	bne.n	8004050 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d11a      	bne.n	8004050 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	0a5b      	lsrs	r3, r3, #9
 800401e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004026:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004038:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d108      	bne.n	8004050 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	0e1b      	lsrs	r3, r3, #24
 8004042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e024      	b.n	800409e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004054:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	08db      	lsrs	r3, r3, #3
 800405a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004062:	429a      	cmp	r2, r3
 8004064:	d01a      	beq.n	800409c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004066:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	4a0f      	ldr	r2, [pc, #60]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 800406c:	f023 0310 	bic.w	r3, r3, #16
 8004070:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd f9e9 	bl	8001448 <HAL_GetTick>
 8004076:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004078:	bf00      	nop
 800407a:	f7fd f9e5 	bl	8001448 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	4293      	cmp	r3, r2
 8004084:	d0f9      	beq.n	800407a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408a:	4a07      	ldr	r2, [pc, #28]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004090:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <HAL_RCC_OscConfig+0xdb4>)
 8004096:	f043 0310 	orr.w	r3, r3, #16
 800409a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3738      	adds	r7, #56	@ 0x38
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	46020c00 	.word	0x46020c00

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e1d9      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b9b      	ldr	r3, [pc, #620]	@ (8004330 <HAL_RCC_ClockConfig+0x284>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d910      	bls.n	80040f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b98      	ldr	r3, [pc, #608]	@ (8004330 <HAL_RCC_ClockConfig+0x284>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 020f 	bic.w	r2, r3, #15
 80040d6:	4996      	ldr	r1, [pc, #600]	@ (8004330 <HAL_RCC_ClockConfig+0x284>)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040de:	4b94      	ldr	r3, [pc, #592]	@ (8004330 <HAL_RCC_ClockConfig+0x284>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e1c1      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	4b8c      	ldr	r3, [pc, #560]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004108:	429a      	cmp	r2, r3
 800410a:	d908      	bls.n	800411e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800410c:	4b89      	ldr	r3, [pc, #548]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	4986      	ldr	r1, [pc, #536]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800411a:	4313      	orrs	r3, r2
 800411c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d012      	beq.n	8004150 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	4b81      	ldr	r3, [pc, #516]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	091b      	lsrs	r3, r3, #4
 8004134:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004138:	429a      	cmp	r2, r3
 800413a:	d909      	bls.n	8004150 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800413c:	4b7d      	ldr	r3, [pc, #500]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	497a      	ldr	r1, [pc, #488]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800414c:	4313      	orrs	r3, r2
 800414e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b74      	ldr	r3, [pc, #464]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004168:	429a      	cmp	r2, r3
 800416a:	d908      	bls.n	800417e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800416c:	4b71      	ldr	r3, [pc, #452]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	496e      	ldr	r1, [pc, #440]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800417a:	4313      	orrs	r3, r2
 800417c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d010      	beq.n	80041ac <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	4b69      	ldr	r3, [pc, #420]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	429a      	cmp	r2, r3
 8004198:	d908      	bls.n	80041ac <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800419a:	4b66      	ldr	r3, [pc, #408]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 020f 	bic.w	r2, r3, #15
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	4963      	ldr	r1, [pc, #396]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80d2 	beq.w	800435e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d143      	bne.n	800424e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d110      	bne.n	80041f6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041d4:	4b57      	ldr	r3, [pc, #348]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041da:	4a56      	ldr	r2, [pc, #344]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80041e4:	4b53      	ldr	r3, [pc, #332]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80041f6:	f7fd f927 	bl	8001448 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80041fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004338 <HAL_RCC_ClockConfig+0x28c>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00f      	beq.n	8004228 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800420a:	f7fd f91d 	bl	8001448 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e12b      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800421c:	4b46      	ldr	r3, [pc, #280]	@ (8004338 <HAL_RCC_ClockConfig+0x28c>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800422e:	4b41      	ldr	r3, [pc, #260]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004234:	4a3f      	ldr	r2, [pc, #252]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004236:	f023 0304 	bic.w	r3, r3, #4
 800423a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800423e:	4b3d      	ldr	r3, [pc, #244]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d121      	bne.n	800428e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e112      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004256:	4b37      	ldr	r3, [pc, #220]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d115      	bne.n	800428e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e106      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800426e:	4b31      	ldr	r3, [pc, #196]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0fa      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800427e:	4b2d      	ldr	r3, [pc, #180]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0f2      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800428e:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4926      	ldr	r1, [pc, #152]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 800429c:	4313      	orrs	r3, r2
 800429e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80042a0:	f7fd f8d2 	bl	8001448 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d112      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fd f8ca 	bl	8001448 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0d6      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x204>
 80042d2:	e044      	b.n	800435e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d112      	bne.n	8004302 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042de:	f7fd f8b3 	bl	8001448 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0bf      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f003 030c 	and.w	r3, r3, #12
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d1ee      	bne.n	80042de <HAL_RCC_ClockConfig+0x232>
 8004300:	e02d      	b.n	800435e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d123      	bne.n	8004352 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fd f89c 	bl	8001448 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0a8      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004322:	4b04      	ldr	r3, [pc, #16]	@ (8004334 <HAL_RCC_ClockConfig+0x288>)
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ee      	bne.n	800430c <HAL_RCC_ClockConfig+0x260>
 800432e:	e016      	b.n	800435e <HAL_RCC_ClockConfig+0x2b2>
 8004330:	40022000 	.word	0x40022000
 8004334:	46020c00 	.word	0x46020c00
 8004338:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433c:	f7fd f884 	bl	8001448 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e090      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004352:	4b4a      	ldr	r3, [pc, #296]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b04      	cmp	r3, #4
 800435c:	d1ee      	bne.n	800433c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d010      	beq.n	800438c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	4b43      	ldr	r3, [pc, #268]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	429a      	cmp	r2, r3
 8004378:	d208      	bcs.n	800438c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800437a:	4b40      	ldr	r3, [pc, #256]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	493d      	ldr	r1, [pc, #244]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <HAL_RCC_ClockConfig+0x3d4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d210      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b39      	ldr	r3, [pc, #228]	@ (8004480 <HAL_RCC_ClockConfig+0x3d4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 020f 	bic.w	r2, r3, #15
 80043a2:	4937      	ldr	r1, [pc, #220]	@ (8004480 <HAL_RCC_ClockConfig+0x3d4>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b35      	ldr	r3, [pc, #212]	@ (8004480 <HAL_RCC_ClockConfig+0x3d4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e05b      	b.n	8004474 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	4b2b      	ldr	r3, [pc, #172]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d208      	bcs.n	80043ea <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b28      	ldr	r3, [pc, #160]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4925      	ldr	r1, [pc, #148]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d012      	beq.n	800441c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004404:	429a      	cmp	r2, r3
 8004406:	d209      	bcs.n	800441c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004408:	4b1c      	ldr	r3, [pc, #112]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	4919      	ldr	r1, [pc, #100]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 8004418:	4313      	orrs	r3, r2
 800441a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	4b13      	ldr	r3, [pc, #76]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004434:	429a      	cmp	r2, r3
 8004436:	d208      	bcs.n	800444a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004438:	4b10      	ldr	r3, [pc, #64]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	490d      	ldr	r1, [pc, #52]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800444a:	f000 f821 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800444e:	4602      	mov	r2, r0
 8004450:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <HAL_RCC_ClockConfig+0x3d0>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	490a      	ldr	r1, [pc, #40]	@ (8004484 <HAL_RCC_ClockConfig+0x3d8>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	4a09      	ldr	r2, [pc, #36]	@ (8004488 <HAL_RCC_ClockConfig+0x3dc>)
 8004462:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004464:	4b09      	ldr	r3, [pc, #36]	@ (800448c <HAL_RCC_ClockConfig+0x3e0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fc fc0b 	bl	8000c84 <HAL_InitTick>
 800446e:	4603      	mov	r3, r0
 8004470:	73fb      	strb	r3, [r7, #15]

  return status;
 8004472:	7bfb      	ldrb	r3, [r7, #15]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	46020c00 	.word	0x46020c00
 8004480:	40022000 	.word	0x40022000
 8004484:	08009a54 	.word	0x08009a54
 8004488:	20000000 	.word	0x20000000
 800448c:	20000020 	.word	0x20000020

08004490 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	b08b      	sub	sp, #44	@ 0x2c
 8004494:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449e:	4b78      	ldr	r3, [pc, #480]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a8:	4b75      	ldr	r3, [pc, #468]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x34>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d121      	bne.n	8004502 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d11e      	bne.n	8004502 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80044c4:	4b6e      	ldr	r3, [pc, #440]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d107      	bne.n	80044e0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80044d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044d6:	0b1b      	lsrs	r3, r3, #12
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044de:	e005      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80044e0:	4b67      	ldr	r3, [pc, #412]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	0f1b      	lsrs	r3, r3, #28
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ec:	4a65      	ldr	r2, [pc, #404]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d110      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004500:	e00d      	b.n	800451e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004502:	4b5f      	ldr	r3, [pc, #380]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b04      	cmp	r3, #4
 800450c:	d102      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800450e:	4b5e      	ldr	r3, [pc, #376]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004510:	623b      	str	r3, [r7, #32]
 8004512:	e004      	b.n	800451e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d101      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800451a:	4b5b      	ldr	r3, [pc, #364]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800451c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	f040 80a5 	bne.w	8004670 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004526:	4b56      	ldr	r3, [pc, #344]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004530:	4b53      	ldr	r3, [pc, #332]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	3301      	adds	r3, #1
 800453c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800453e:	4b50      	ldr	r3, [pc, #320]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800454a:	4b4d      	ldr	r3, [pc, #308]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800454c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454e:	08db      	lsrs	r3, r3, #3
 8004550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004562:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d003      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0xe4>
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d022      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x128>
 8004572:	e043      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800468c <HAL_RCC_GetSysClockFreq+0x1fc>
 8004582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004586:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004596:	ed97 6a01 	vldr	s12, [r7, #4]
 800459a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004690 <HAL_RCC_GetSysClockFreq+0x200>
 800459e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045b6:	e046      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800468c <HAL_RCC_GetSysClockFreq+0x1fc>
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80045cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045da:	ed97 6a01 	vldr	s12, [r7, #4]
 80045de:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004690 <HAL_RCC_GetSysClockFreq+0x200>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045fa:	e024      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004614:	4b1a      	ldr	r3, [pc, #104]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461c:	ee07 3a90 	vmov	s15, r3
 8004620:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004624:	ed97 6a01 	vldr	s12, [r7, #4]
 8004628:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004690 <HAL_RCC_GetSysClockFreq+0x200>
 800462c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004630:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004638:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800463c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004640:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004644:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004646:	4b0e      	ldr	r3, [pc, #56]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464a:	0e1b      	lsrs	r3, r3, #24
 800464c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004650:	3301      	adds	r3, #1
 8004652:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800465e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466a:	ee17 3a90 	vmov	r3, s15
 800466e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004670:	6a3b      	ldr	r3, [r7, #32]
}
 8004672:	4618      	mov	r0, r3
 8004674:	372c      	adds	r7, #44	@ 0x2c
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	46020c00 	.word	0x46020c00
 8004684:	08009a6c 	.word	0x08009a6c
 8004688:	00f42400 	.word	0x00f42400
 800468c:	4b742400 	.word	0x4b742400
 8004690:	46000000 	.word	0x46000000

08004694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004698:	f7ff fefa 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b07      	ldr	r3, [pc, #28]	@ (80046bc <HAL_RCC_GetHCLKFreq+0x28>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	4906      	ldr	r1, [pc, #24]	@ (80046c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80046a8:	5ccb      	ldrb	r3, [r1, r3]
 80046aa:	fa22 f303 	lsr.w	r3, r2, r3
 80046ae:	4a05      	ldr	r2, [pc, #20]	@ (80046c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80046b0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80046b2:	4b04      	ldr	r3, [pc, #16]	@ (80046c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80046b4:	681b      	ldr	r3, [r3, #0]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	46020c00 	.word	0x46020c00
 80046c0:	08009a54 	.word	0x08009a54
 80046c4:	20000000 	.word	0x20000000

080046c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80046cc:	f7ff ffe2 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	@ (80046ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	46020c00 	.word	0x46020c00
 80046ec:	08009a64 	.word	0x08009a64

080046f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80046f4:	f7ff ffce 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	@ (8004714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	46020c00 	.word	0x46020c00
 8004714:	08009a64 	.word	0x08009a64

08004718 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800471c:	f7ff ffba 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	@ (800473c <HAL_RCC_GetPCLK3Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	46020c00 	.word	0x46020c00
 800473c:	08009a64 	.word	0x08009a64

08004740 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	221f      	movs	r2, #31
 800474e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004750:	4b15      	ldr	r3, [pc, #84]	@ (80047a8 <HAL_RCC_GetClockConfig+0x68>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f003 0203 	and.w	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800475c:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <HAL_RCC_GetClockConfig+0x68>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 020f 	and.w	r2, r3, #15
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8004768:	4b0f      	ldr	r3, [pc, #60]	@ (80047a8 <HAL_RCC_GetClockConfig+0x68>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004774:	4b0c      	ldr	r3, [pc, #48]	@ (80047a8 <HAL_RCC_GetClockConfig+0x68>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004782:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <HAL_RCC_GetClockConfig+0x68>)
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800478e:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <HAL_RCC_GetClockConfig+0x6c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 020f 	and.w	r2, r3, #15
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	601a      	str	r2, [r3, #0]
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	46020c00 	.word	0x46020c00
 80047ac:	40022000 	.word	0x40022000

080047b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047b8:	4b3e      	ldr	r3, [pc, #248]	@ (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047c6:	f7fe fd17 	bl	80031f8 <HAL_PWREx_GetVoltageRange>
 80047ca:	6178      	str	r0, [r7, #20]
 80047cc:	e019      	b.n	8004802 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80047d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d4:	4a37      	ldr	r2, [pc, #220]	@ (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80047d6:	f043 0304 	orr.w	r3, r3, #4
 80047da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047de:	4b35      	ldr	r3, [pc, #212]	@ (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80047e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047ec:	f7fe fd04 	bl	80031f8 <HAL_PWREx_GetVoltageRange>
 80047f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047f2:	4b30      	ldr	r3, [pc, #192]	@ (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80047f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047f8:	4a2e      	ldr	r2, [pc, #184]	@ (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80047fa:	f023 0304 	bic.w	r3, r3, #4
 80047fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004808:	d003      	beq.n	8004812 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004810:	d109      	bne.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004818:	d202      	bcs.n	8004820 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800481a:	2301      	movs	r3, #1
 800481c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800481e:	e033      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004824:	e030      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800482c:	d208      	bcs.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004834:	d102      	bne.n	800483c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004836:	2303      	movs	r3, #3
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	e025      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e035      	b.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004846:	d90f      	bls.n	8004868 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004854:	d902      	bls.n	800485c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	e015      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800485c:	2301      	movs	r3, #1
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e012      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e00f      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800486e:	d109      	bne.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004876:	d102      	bne.n	800487e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004878:	2301      	movs	r3, #1
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	e004      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800487e:	2302      	movs	r3, #2
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	e001      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004884:	2301      	movs	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004888:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 020f 	bic.w	r2, r3, #15
 8004890:	4909      	ldr	r1, [pc, #36]	@ (80048b8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004898:	4b07      	ldr	r3, [pc, #28]	@ (80048b8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d001      	beq.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	46020c00 	.word	0x46020c00
 80048b8:	40022000 	.word	0x40022000

080048bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b0b8      	sub	sp, #224	@ 0xe0
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048c8:	2300      	movs	r3, #0
 80048ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f002 0401 	and.w	r4, r2, #1
 80048e0:	2500      	movs	r5, #0
 80048e2:	ea54 0305 	orrs.w	r3, r4, r5
 80048e6:	d00b      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80048e8:	4bca      	ldr	r3, [pc, #808]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ee:	f023 0103 	bic.w	r1, r3, #3
 80048f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f8:	4ac6      	ldr	r2, [pc, #792]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048fa:	430b      	orrs	r3, r1
 80048fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f002 0802 	and.w	r8, r2, #2
 800490c:	f04f 0900 	mov.w	r9, #0
 8004910:	ea58 0309 	orrs.w	r3, r8, r9
 8004914:	d00b      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004916:	4bbf      	ldr	r3, [pc, #764]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800491c:	f023 010c 	bic.w	r1, r3, #12
 8004920:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004926:	4abb      	ldr	r2, [pc, #748]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004928:	430b      	orrs	r3, r1
 800492a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800492e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	f002 0a04 	and.w	sl, r2, #4
 800493a:	f04f 0b00 	mov.w	fp, #0
 800493e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004942:	d00b      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004944:	4bb3      	ldr	r3, [pc, #716]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800494a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800494e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004954:	4aaf      	ldr	r2, [pc, #700]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004956:	430b      	orrs	r3, r1
 8004958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800495c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f002 0308 	and.w	r3, r2, #8
 8004968:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004972:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004976:	460b      	mov	r3, r1
 8004978:	4313      	orrs	r3, r2
 800497a:	d00b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800497c:	4ba5      	ldr	r3, [pc, #660]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800497e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004982:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004986:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800498a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498c:	4aa1      	ldr	r2, [pc, #644]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800498e:	430b      	orrs	r3, r1
 8004990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f002 0310 	and.w	r3, r2, #16
 80049a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049a4:	2300      	movs	r3, #0
 80049a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80049aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80049ae:	460b      	mov	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	d00b      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80049b4:	4b97      	ldr	r3, [pc, #604]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c4:	4a93      	ldr	r2, [pc, #588]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049c6:	430b      	orrs	r3, r1
 80049c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f002 0320 	and.w	r3, r2, #32
 80049d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80049ec:	4b89      	ldr	r3, [pc, #548]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049f2:	f023 0107 	bic.w	r1, r3, #7
 80049f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049fc:	4a85      	ldr	r2, [pc, #532]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049fe:	430b      	orrs	r3, r1
 8004a00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004a10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a14:	2300      	movs	r3, #0
 8004a16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a1a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004a24:	4b7b      	ldr	r3, [pc, #492]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a2a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a34:	4a77      	ldr	r2, [pc, #476]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a36:	430b      	orrs	r3, r1
 8004a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a52:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004a5c:	4b6d      	ldr	r3, [pc, #436]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6c:	4a69      	ldr	r2, [pc, #420]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d00b      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004a94:	4b5f      	ldr	r3, [pc, #380]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ab8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ac2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004acc:	4b51      	ldr	r3, [pc, #324]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ad2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004adc:	4a4d      	ldr	r2, [pc, #308]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004afa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004afe:	460b      	mov	r3, r1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	d00b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004b04:	4b43      	ldr	r3, [pc, #268]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b0a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b14:	4a3f      	ldr	r2, [pc, #252]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b36:	460b      	mov	r3, r1
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004b3c:	4b35      	ldr	r3, [pc, #212]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b42:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004b46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b4c:	4a31      	ldr	r2, [pc, #196]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004b54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b62:	2300      	movs	r3, #0
 8004b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b66:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	d00c      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004b70:	4b28      	ldr	r3, [pc, #160]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b82:	4a24      	ldr	r2, [pc, #144]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b84:	430b      	orrs	r3, r1
 8004b86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b96:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b98:	2300      	movs	r3, #0
 8004b9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	d04f      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	2b80      	cmp	r3, #128	@ 0x80
 8004bb0:	d02d      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004bb2:	2b80      	cmp	r3, #128	@ 0x80
 8004bb4:	d827      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004bb6:	2b60      	cmp	r3, #96	@ 0x60
 8004bb8:	d02e      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004bba:	2b60      	cmp	r3, #96	@ 0x60
 8004bbc:	d823      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004bbe:	2b40      	cmp	r3, #64	@ 0x40
 8004bc0:	d006      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	d81f      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x322>
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d011      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004bce:	e01a      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bd0:	4b10      	ldr	r3, [pc, #64]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bda:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004bdc:	e01d      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004be2:	3308      	adds	r3, #8
 8004be4:	4618      	mov	r0, r3
 8004be6:	f002 f9d1 	bl	8006f8c <RCCEx_PLL2_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004bf0:	e013      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bf6:	332c      	adds	r3, #44	@ 0x2c
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f002 fa5f 	bl	80070bc <RCCEx_PLL3_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c04:	e009      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004c0c:	e005      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8004c0e:	bf00      	nop
 8004c10:	e003      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004c12:	bf00      	nop
 8004c14:	46020c00 	.word	0x46020c00
        break;
 8004c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c1a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004c22:	4bb6      	ldr	r3, [pc, #728]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c28:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c34:	4ab1      	ldr	r2, [pc, #708]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c36:	430b      	orrs	r3, r1
 8004c38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c42:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004c52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c54:	2300      	movs	r3, #0
 8004c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c58:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	d053      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d033      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c74:	d82c      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c7a:	d02f      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004c7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c80:	d826      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c86:	d008      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c8c:	d820      	bhi.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c96:	d011      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004c98:	e01a      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c9a:	4b98      	ldr	r3, [pc, #608]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	4a97      	ldr	r2, [pc, #604]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ca6:	e01a      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cac:	3308      	adds	r3, #8
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f002 f96c 	bl	8006f8c <RCCEx_PLL2_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004cba:	e010      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc0:	332c      	adds	r3, #44	@ 0x2c
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f002 f9fa 	bl	80070bc <RCCEx_PLL3_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004cce:	e006      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004cd6:	e002      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004cd8:	bf00      	nop
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cde:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10d      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004ce6:	4b85      	ldr	r3, [pc, #532]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ce8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cec:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf8:	4a80      	ldr	r2, [pc, #512]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004d00:	e003      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d02:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d06:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d18:	2300      	movs	r3, #0
 8004d1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d20:	460b      	mov	r3, r1
 8004d22:	4313      	orrs	r3, r2
 8004d24:	d046      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d2e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d32:	d028      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d34:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d38:	d821      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d3e:	d022      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d44:	d81b      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004d46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d4a:	d01c      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d50:	d815      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d56:	d008      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5c:	d80f      	bhi.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d011      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d66:	d00e      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d68:	e009      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6e:	3308      	adds	r3, #8
 8004d70:	4618      	mov	r0, r3
 8004d72:	f002 f90b 	bl	8006f8c <RCCEx_PLL2_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d7c:	e004      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d84:	e000      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8004d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d88:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10d      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004d90:	4b5a      	ldr	r3, [pc, #360]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d96:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004da2:	4a56      	ldr	r2, [pc, #344]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004da4:	430b      	orrs	r3, r1
 8004da6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004db0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d03f      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d81e      	bhi.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e23 	.word	0x08004e23
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e07 	.word	0x08004e07
 8004df0:	08004e23 	.word	0x08004e23
 8004df4:	08004e23 	.word	0x08004e23
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004df8:	4b40      	ldr	r3, [pc, #256]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e02:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004e04:	e00e      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e0a:	332c      	adds	r3, #44	@ 0x2c
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f002 f955 	bl	80070bc <RCCEx_PLL3_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e18:	e004      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004e22:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e24:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004e2c:	4b33      	ldr	r3, [pc, #204]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e32:	f023 0107 	bic.w	r1, r3, #7
 8004e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004e40:	430b      	orrs	r3, r1
 8004e42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e46:	e003      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e4c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e5e:	2300      	movs	r3, #0
 8004e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d04d      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e78:	d028      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004e7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e7e:	d821      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e84:	d024      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004e86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e8a:	d81b      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e90:	d00e      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e96:	d815      	bhi.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea0:	d110      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ea2:	4b16      	ldr	r3, [pc, #88]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	4a15      	ldr	r2, [pc, #84]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eac:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004eae:	e012      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eb4:	332c      	adds	r3, #44	@ 0x2c
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f002 f900 	bl	80070bc <RCCEx_PLL3_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004eca:	e004      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004ecc:	bf00      	nop
 8004ece:	e002      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004ed0:	bf00      	nop
 8004ed2:	e000      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004ed4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004ed6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d110      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004ede:	4b07      	ldr	r3, [pc, #28]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ee4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef0:	4a02      	ldr	r2, [pc, #8]	@ (8004efc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ef8:	e006      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004efa:	bf00      	nop
 8004efc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f00:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f04:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f16:	2300      	movs	r3, #0
 8004f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f000 80b5 	beq.w	8005090 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d113      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	4b9a      	ldr	r3, [pc, #616]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f40:	4a98      	ldr	r2, [pc, #608]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f42:	f043 0304 	orr.w	r3, r3, #4
 8004f46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f4a:	4b96      	ldr	r3, [pc, #600]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f62:	4b91      	ldr	r3, [pc, #580]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	4a90      	ldr	r2, [pc, #576]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc fa6b 	bl	8001448 <HAL_GetTick>
 8004f72:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f76:	e00b      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f78:	f7fc fa66 	bl	8001448 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d903      	bls.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004f8e:	e005      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f90:	4b85      	ldr	r3, [pc, #532]	@ (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0ed      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004f9c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d165      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fa4:	4b7f      	ldr	r3, [pc, #508]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d023      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fbe:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01b      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fca:	4b76      	ldr	r3, [pc, #472]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fd8:	4b72      	ldr	r3, [pc, #456]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fde:	4a71      	ldr	r2, [pc, #452]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe8:	4b6e      	ldr	r3, [pc, #440]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fee:	4a6d      	ldr	r2, [pc, #436]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ff8:	4a6a      	ldr	r2, [pc, #424]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d019      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500e:	f7fc fa1b 	bl	8001448 <HAL_GetTick>
 8005012:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005016:	e00d      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fc fa16 	bl	8001448 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005022:	1ad2      	subs	r2, r2, r3
 8005024:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005028:	429a      	cmp	r2, r3
 800502a:	d903      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8005032:	e006      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005034:	4b5b      	ldr	r3, [pc, #364]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005036:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0ea      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005042:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800504a:	4b56      	ldr	r3, [pc, #344]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800504c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005050:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005058:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800505c:	4a51      	ldr	r2, [pc, #324]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800505e:	430b      	orrs	r3, r1
 8005060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005064:	e008      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005066:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800506a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800506e:	e003      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005074:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005078:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800507c:	2b01      	cmp	r3, #1
 800507e:	d107      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005080:	4b48      	ldr	r3, [pc, #288]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005086:	4a47      	ldr	r2, [pc, #284]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005088:	f023 0304 	bic.w	r3, r3, #4
 800508c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800509c:	643b      	str	r3, [r7, #64]	@ 0x40
 800509e:	2300      	movs	r3, #0
 80050a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80050a6:	460b      	mov	r3, r1
 80050a8:	4313      	orrs	r3, r2
 80050aa:	d042      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80050ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80050b8:	d022      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80050ba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80050be:	d81b      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80050c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050c4:	d011      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80050c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ca:	d815      	bhi.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d019      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80050d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050d4:	d110      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050da:	3308      	adds	r3, #8
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 ff55 	bl	8006f8c <RCCEx_PLL2_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050e8:	e00d      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ea:	4b2e      	ldr	r3, [pc, #184]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	4a2d      	ldr	r2, [pc, #180]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050f4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80050f6:	e006      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80050fe:	e002      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005104:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005106:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10d      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800510e:	4b25      	ldr	r3, [pc, #148]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005114:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800511c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005120:	4a20      	ldr	r2, [pc, #128]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005122:	430b      	orrs	r3, r1
 8005124:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005128:	e003      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800512e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800513e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005140:	2300      	movs	r3, #0
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005144:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005148:	460b      	mov	r3, r1
 800514a:	4313      	orrs	r3, r2
 800514c:	d032      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800514e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005152:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005160:	d804      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516a:	d007      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005172:	e004      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005174:	bf00      	nop
 8005176:	e002      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005178:	bf00      	nop
 800517a:	e000      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800517c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800517e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005182:	2b00      	cmp	r3, #0
 8005184:	d112      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005186:	4b07      	ldr	r3, [pc, #28]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005188:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800518c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005198:	4a02      	ldr	r2, [pc, #8]	@ (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800519a:	430b      	orrs	r3, r1
 800519c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051a0:	e008      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80051a2:	bf00      	nop
 80051a4:	46020c00 	.word	0x46020c00
 80051a8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80051b0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80051b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80051c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c2:	2300      	movs	r3, #0
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d019      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80051d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051dc:	d105      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051de:	4b88      	ldr	r3, [pc, #544]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	4a87      	ldr	r2, [pc, #540]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80051ea:	4b85      	ldr	r3, [pc, #532]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80051f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051fc:	4a80      	ldr	r2, [pc, #512]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80051fe:	430b      	orrs	r3, r1
 8005200:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005212:	2300      	movs	r3, #0
 8005214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005216:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800521a:	460b      	mov	r3, r1
 800521c:	4313      	orrs	r3, r2
 800521e:	d00c      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005220:	4b77      	ldr	r3, [pc, #476]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005226:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800522a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800522e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005232:	4973      	ldr	r1, [pc, #460]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800523a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	2300      	movs	r3, #0
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
 800524c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005250:	460b      	mov	r3, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	d00c      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005256:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800525c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005264:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005268:	4965      	ldr	r1, [pc, #404]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005286:	460b      	mov	r3, r1
 8005288:	4313      	orrs	r3, r2
 800528a:	d00c      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800528c:	4b5c      	ldr	r3, [pc, #368]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800528e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005292:	f023 0218 	bic.w	r2, r3, #24
 8005296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800529a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800529e:	4958      	ldr	r1, [pc, #352]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80052bc:	460b      	mov	r3, r1
 80052be:	4313      	orrs	r3, r2
 80052c0:	d032      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80052c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052ce:	d105      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80052d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052da:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80052dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052e8:	d108      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ee:	3308      	adds	r3, #8
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 fe4b 	bl	8006f8c <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80052fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005304:	4b3e      	ldr	r3, [pc, #248]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005306:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800530a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800530e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005316:	493a      	ldr	r1, [pc, #232]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800531e:	e003      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005324:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005328:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800533e:	460b      	mov	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	d03a      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800534c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005350:	d00e      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005356:	d815      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d017      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800535c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005360:	d110      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005362:	4b27      	ldr	r3, [pc, #156]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	4a26      	ldr	r2, [pc, #152]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800536c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800536e:	e00e      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005374:	3308      	adds	r3, #8
 8005376:	4618      	mov	r0, r3
 8005378:	f001 fe08 	bl	8006f8c <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005382:	e004      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800538c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800538e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005396:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800539c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a8:	4915      	ldr	r1, [pc, #84]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80053b0:	e003      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80053b6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80053ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80053d0:	460b      	mov	r3, r1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	d00c      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80053d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053dc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80053e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80053e8:	4905      	ldr	r1, [pc, #20]	@ (8005400 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80053f0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	37e0      	adds	r7, #224	@ 0xe0
 80053f8:	46bd      	mov	sp, r7
 80053fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fe:	bf00      	nop
 8005400:	46020c00 	.word	0x46020c00

08005404 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005404:	b480      	push	{r7}
 8005406:	b089      	sub	sp, #36	@ 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800540c:	4ba6      	ldr	r3, [pc, #664]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800540e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005414:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005416:	4ba4      	ldr	r3, [pc, #656]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005420:	4ba1      	ldr	r3, [pc, #644]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	3301      	adds	r3, #1
 800542c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800542e:	4b9e      	ldr	r3, [pc, #632]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	091b      	lsrs	r3, r3, #4
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800543a:	4b9b      	ldr	r3, [pc, #620]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	08db      	lsrs	r3, r3, #3
 8005440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d062      	beq.n	8005522 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b03      	cmp	r3, #3
 8005460:	f200 8081 	bhi.w	8005566 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d024      	beq.n	80054b4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d17a      	bne.n	8005566 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80056ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b89      	ldr	r3, [pc, #548]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005492:	ed97 6a02 	vldr	s12, [r7, #8]
 8005496:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054b2:	e08f      	b.n	80055d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80054b4:	4b7c      	ldr	r3, [pc, #496]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80054c0:	4b79      	ldr	r3, [pc, #484]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	0f1b      	lsrs	r3, r3, #28
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	e006      	b.n	80054da <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80054cc:	4b76      	ldr	r3, [pc, #472]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80054ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	0f1b      	lsrs	r3, r3, #28
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	4a76      	ldr	r2, [pc, #472]	@ (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	ee07 3a90 	vmov	s15, r3
 80054e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005500:	ed97 6a02 	vldr	s12, [r7, #8]
 8005504:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005514:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005520:	e058      	b.n	80055d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80056ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005534:	4b5c      	ldr	r3, [pc, #368]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005544:	ed97 6a02 	vldr	s12, [r7, #8]
 8005548:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800554c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005550:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005558:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800555c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005564:	e036      	b.n	80055d4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005566:	4b50      	ldr	r3, [pc, #320]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005572:	4b4d      	ldr	r3, [pc, #308]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0f1b      	lsrs	r3, r3, #28
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	e006      	b.n	800558c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800557e:	4b4a      	ldr	r3, [pc, #296]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	0f1b      	lsrs	r3, r3, #28
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	4a49      	ldr	r2, [pc, #292]	@ (80056b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055b6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80056b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80055d4:	4b34      	ldr	r3, [pc, #208]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d017      	beq.n	8005610 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055e0:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e4:	0a5b      	lsrs	r3, r3, #9
 80055e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80055f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80055fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80055fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005606:	ee17 2a90 	vmov	r2, s15
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e002      	b.n	8005616 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005616:	4b24      	ldr	r3, [pc, #144]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d017      	beq.n	8005652 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005622:	4b21      	ldr	r3, [pc, #132]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005638:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800563c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005648:	ee17 2a90 	vmov	r2, s15
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	e002      	b.n	8005658 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005658:	4b13      	ldr	r3, [pc, #76]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800565a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d017      	beq.n	8005694 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005664:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800567a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800567e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568a:	ee17 2a90 	vmov	r2, s15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005692:	e002      	b.n	800569a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
}
 800569a:	bf00      	nop
 800569c:	3724      	adds	r7, #36	@ 0x24
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	46020c00 	.word	0x46020c00
 80056ac:	4b742400 	.word	0x4b742400
 80056b0:	46000000 	.word	0x46000000
 80056b4:	08009a6c 	.word	0x08009a6c

080056b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	@ 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80056c0:	4ba6      	ldr	r3, [pc, #664]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80056ca:	4ba4      	ldr	r3, [pc, #656]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80056d4:	4ba1      	ldr	r3, [pc, #644]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	3301      	adds	r3, #1
 80056e0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80056e2:	4b9e      	ldr	r3, [pc, #632]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80056ee:	4b9b      	ldr	r3, [pc, #620]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005706:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d062      	beq.n	80057d6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b03      	cmp	r3, #3
 8005714:	f200 8081 	bhi.w	800581a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d024      	beq.n	8005768 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d17a      	bne.n	800581a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b89      	ldr	r3, [pc, #548]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005766:	e08f      	b.n	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005768:	4b7c      	ldr	r3, [pc, #496]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005774:	4b79      	ldr	r3, [pc, #484]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	0f1b      	lsrs	r3, r3, #28
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	e006      	b.n	800578e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005780:	4b76      	ldr	r3, [pc, #472]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	0f1b      	lsrs	r3, r3, #28
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	4a76      	ldr	r2, [pc, #472]	@ (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005794:	ee07 3a90 	vmov	s15, r3
 8005798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80057b8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80057bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80057cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057d4:	e058      	b.n	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80057e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e8:	4b5c      	ldr	r3, [pc, #368]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80057f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80057fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005800:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005804:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005808:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005814:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005818:	e036      	b.n	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800581a:	4b50      	ldr	r3, [pc, #320]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005826:	4b4d      	ldr	r3, [pc, #308]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	0f1b      	lsrs	r3, r3, #28
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	e006      	b.n	8005840 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005832:	4b4a      	ldr	r3, [pc, #296]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005838:	041b      	lsls	r3, r3, #16
 800583a:	0f1b      	lsrs	r3, r3, #28
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4a49      	ldr	r2, [pc, #292]	@ (8005968 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	ee07 3a90 	vmov	s15, r3
 8005854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a02 	vldr	s12, [r7, #8]
 800586a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005964 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005886:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005888:	4b34      	ldr	r3, [pc, #208]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d017      	beq.n	80058c4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005894:	4b31      	ldr	r3, [pc, #196]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005898:	0a5b      	lsrs	r3, r3, #9
 800589a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80058a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80058b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ba:	ee17 2a90 	vmov	r2, s15
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e002      	b.n	80058ca <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80058ca:	4b24      	ldr	r3, [pc, #144]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d017      	beq.n	8005906 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058d6:	4b21      	ldr	r3, [pc, #132]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e0:	ee07 3a90 	vmov	s15, r3
 80058e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80058e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058ec:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80058f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80058f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058fc:	ee17 2a90 	vmov	r2, s15
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	e002      	b.n	800590c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800590c:	4b13      	ldr	r3, [pc, #76]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005918:	4b10      	ldr	r3, [pc, #64]	@ (800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005932:	edd7 6a07 	vldr	s13, [r7, #28]
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005946:	e002      	b.n	800594e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
}
 800594e:	bf00      	nop
 8005950:	3724      	adds	r7, #36	@ 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	46020c00 	.word	0x46020c00
 8005960:	4b742400 	.word	0x4b742400
 8005964:	46000000 	.word	0x46000000
 8005968:	08009a6c 	.word	0x08009a6c

0800596c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	@ 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005974:	4ba6      	ldr	r3, [pc, #664]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800597e:	4ba4      	ldr	r3, [pc, #656]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005988:	4ba1      	ldr	r3, [pc, #644]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598c:	0a1b      	lsrs	r3, r3, #8
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	3301      	adds	r3, #1
 8005994:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005996:	4b9e      	ldr	r3, [pc, #632]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80059a2:	4b9b      	ldr	r3, [pc, #620]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80059a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a6:	08db      	lsrs	r3, r3, #3
 80059a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d062      	beq.n	8005a8a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	f200 8081 	bhi.w	8005ace <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d024      	beq.n	8005a1c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d17a      	bne.n	8005ace <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b89      	ldr	r3, [pc, #548]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80059fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005a1a:	e08f      	b.n	8005b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005a28:	4b79      	ldr	r3, [pc, #484]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	0f1b      	lsrs	r3, r3, #28
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	e006      	b.n	8005a42 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005a34:	4b76      	ldr	r3, [pc, #472]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	0f1b      	lsrs	r3, r3, #28
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	4a76      	ldr	r2, [pc, #472]	@ (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	ee07 3a90 	vmov	s15, r3
 8005a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a68:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a6c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a88:	e058      	b.n	8005b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a94:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005aac:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ab0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005abc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005acc:	e036      	b.n	8005b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ace:	4b50      	ldr	r3, [pc, #320]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005ada:	4b4d      	ldr	r3, [pc, #308]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0f1b      	lsrs	r3, r3, #28
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	e006      	b.n	8005af4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	0f1b      	lsrs	r3, r3, #28
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	4a49      	ldr	r2, [pc, #292]	@ (8005c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b1e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005c18 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b3a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005b3c:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d017      	beq.n	8005b78 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b48:	4b31      	ldr	r3, [pc, #196]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4c:	0a5b      	lsrs	r3, r3, #9
 8005b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6e:	ee17 2a90 	vmov	r2, s15
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005b7e:	4b24      	ldr	r3, [pc, #144]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005b8a:	4b21      	ldr	r3, [pc, #132]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b94:	ee07 3a90 	vmov	s15, r3
 8005b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005b9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb0:	ee17 2a90 	vmov	r2, s15
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	e002      	b.n	8005bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005bc0:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d017      	beq.n	8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005bcc:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd0:	0e1b      	lsrs	r3, r3, #24
 8005bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005be2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf2:	ee17 2a90 	vmov	r2, s15
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bfa:	e002      	b.n	8005c02 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	609a      	str	r2, [r3, #8]
}
 8005c02:	bf00      	nop
 8005c04:	3724      	adds	r7, #36	@ 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	46020c00 	.word	0x46020c00
 8005c14:	4b742400 	.word	0x4b742400
 8005c18:	46000000 	.word	0x46000000
 8005c1c:	08009a6c 	.word	0x08009a6c

08005c20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08e      	sub	sp, #56	@ 0x38
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c2e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005c32:	430b      	orrs	r3, r1
 8005c34:	d145      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c36:	4baa      	ldr	r3, [pc, #680]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c40:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c42:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d108      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c56:	d104      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c5e:	f001 b987 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c62:	4b9f      	ldr	r3, [pc, #636]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c70:	d114      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c78:	d110      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c7a:	4b99      	ldr	r3, [pc, #612]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c88:	d103      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005c8a:	23fa      	movs	r3, #250	@ 0xfa
 8005c8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c8e:	f001 b96f 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c92:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005c96:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c98:	f001 b96a 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c9c:	4b90      	ldr	r3, [pc, #576]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ca8:	d107      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cb0:	d103      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005cb2:	4b8c      	ldr	r3, [pc, #560]	@ (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb6:	f001 b95b 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cbe:	f001 b957 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	d151      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005cce:	4b84      	ldr	r3, [pc, #528]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005cd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cd4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005cd8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	2b80      	cmp	r3, #128	@ 0x80
 8005cde:	d035      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce2:	2b80      	cmp	r3, #128	@ 0x80
 8005ce4:	d841      	bhi.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	2b60      	cmp	r3, #96	@ 0x60
 8005cea:	d02a      	beq.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cee:	2b60      	cmp	r3, #96	@ 0x60
 8005cf0:	d83b      	bhi.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	2b40      	cmp	r3, #64	@ 0x40
 8005cf6:	d009      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d835      	bhi.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00c      	beq.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d012      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005d0a:	e02e      	b.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fb77 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d1a:	f001 b929 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d1e:	f107 0318 	add.w	r3, r7, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fcc8 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d2c:	f001 b920 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d30:	f107 030c 	add.w	r3, r7, #12
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff fe19 	bl	800596c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d3e:	f001 b917 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005d42:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d48:	f001 b912 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d4c:	4b64      	ldr	r3, [pc, #400]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d58:	d103      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005d5a:	4b63      	ldr	r3, [pc, #396]	@ (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005d5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d5e:	f001 b907 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d66:	f001 b903 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d6e:	f001 b8ff 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d76:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	d158      	bne.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005d7e:	4b58      	ldr	r3, [pc, #352]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005d80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d90:	d03b      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d98:	d846      	bhi.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da0:	d02e      	beq.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da8:	d83e      	bhi.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db0:	d00b      	beq.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db8:	d836      	bhi.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc6:	d012      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005dc8:	e02e      	b.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fb18 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dd8:	f001 b8ca 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ddc:	f107 0318 	add.w	r3, r7, #24
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fc69 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dea:	f001 b8c1 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dee:	f107 030c 	add.w	r3, r7, #12
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fdba 	bl	800596c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005dfc:	f001 b8b8 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e00:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e06:	f001 b8b3 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e0a:	4b35      	ldr	r3, [pc, #212]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e16:	d103      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005e18:	4b33      	ldr	r3, [pc, #204]	@ (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e1c:	f001 b8a8 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e24:	f001 b8a4 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e2c:	f001 b8a0 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e34:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	d16e      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005e3c:	4b28      	ldr	r3, [pc, #160]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e42:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005e46:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e4e:	d034      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005e56:	d85c      	bhi.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e5e:	d00b      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e66:	d854      	bhi.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e74:	d009      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005e76:	e04c      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fac1 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e86:	f001 b873 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e8a:	f107 0318 	add.w	r3, r7, #24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fc12 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e98:	f001 b86a 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005e9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea8:	d103      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005eaa:	4b10      	ldr	r3, [pc, #64]	@ (8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005eac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005eae:	f001 b85f 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eb6:	f001 b85b 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005eba:	4b09      	ldr	r3, [pc, #36]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d121      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ec6:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005ed2:	4b03      	ldr	r3, [pc, #12]	@ (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	0e1b      	lsrs	r3, r3, #24
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	e00f      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005ede:	bf00      	nop
 8005ee0:	46020c00 	.word	0x46020c00
 8005ee4:	0007a120 	.word	0x0007a120
 8005ee8:	00f42400 	.word	0x00f42400
 8005eec:	02dc6c00 	.word	0x02dc6c00
 8005ef0:	4ba7      	ldr	r3, [pc, #668]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ef6:	041b      	lsls	r3, r3, #16
 8005ef8:	0e1b      	lsrs	r3, r3, #24
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	4aa5      	ldr	r2, [pc, #660]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f06:	f001 b833 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f0e:	f001 b82f 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f16:	f001 b82b 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f1e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005f22:	430b      	orrs	r3, r1
 8005f24:	d17f      	bne.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005f26:	4b9a      	ldr	r3, [pc, #616]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f30:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d165      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005f38:	4b95      	ldr	r3, [pc, #596]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f3e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005f42:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f4a:	d034      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005f52:	d853      	bhi.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f5a:	d00b      	beq.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f62:	d84b      	bhi.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d016      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f70:	d009      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005f72:	e043      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fa43 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f82:	f000 bff5 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f86:	f107 0318 	add.w	r3, r7, #24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fb94 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005f94:	f000 bfec 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005f98:	4b7d      	ldr	r3, [pc, #500]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa4:	d103      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005faa:	f000 bfe1 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005fb2:	f000 bfdd 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005fb6:	4b76      	ldr	r3, [pc, #472]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d118      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005fc2:	4b73      	ldr	r3, [pc, #460]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005fce:	4b70      	ldr	r3, [pc, #448]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	0e1b      	lsrs	r3, r3, #24
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005fda:	4b6d      	ldr	r3, [pc, #436]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	0e1b      	lsrs	r3, r3, #24
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	4a6a      	ldr	r2, [pc, #424]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fee:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005ff0:	f000 bfbe 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005ff8:	f000 bfba 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006000:	f000 bfb6 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800600a:	d108      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800600c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff f9f7 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
 800601a:	f000 bfa9 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	637b      	str	r3, [r7, #52]	@ 0x34
 8006022:	f000 bfa5 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602a:	1e51      	subs	r1, r2, #1
 800602c:	430b      	orrs	r3, r1
 800602e:	d136      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006030:	4b57      	ldr	r3, [pc, #348]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	2b00      	cmp	r3, #0
 8006040:	d104      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006042:	f7fe fb55 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8006046:	6378      	str	r0, [r7, #52]	@ 0x34
 8006048:	f000 bf92 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	2b01      	cmp	r3, #1
 8006050:	d104      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006052:	f7fe fa1d 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006056:	6378      	str	r0, [r7, #52]	@ 0x34
 8006058:	f000 bf8a 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800605c:	4b4c      	ldr	r3, [pc, #304]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006068:	d106      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	2b02      	cmp	r3, #2
 800606e:	d103      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006070:	4b4a      	ldr	r3, [pc, #296]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
 8006074:	f000 bf7c 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006078:	4b45      	ldr	r3, [pc, #276]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800607a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b02      	cmp	r3, #2
 8006084:	d107      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006088:	2b03      	cmp	r3, #3
 800608a:	d104      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800608c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006090:	637b      	str	r3, [r7, #52]	@ 0x34
 8006092:	f000 bf6d 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	637b      	str	r3, [r7, #52]	@ 0x34
 800609a:	f000 bf69 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800609e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a2:	1e91      	subs	r1, r2, #2
 80060a4:	430b      	orrs	r3, r1
 80060a6:	d136      	bne.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80060a8:	4b39      	ldr	r3, [pc, #228]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ae:	f003 030c 	and.w	r3, r3, #12
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d104      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80060ba:	f7fe fb05 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 80060be:	6378      	str	r0, [r7, #52]	@ 0x34
 80060c0:	f000 bf56 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d104      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fe f9e1 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80060ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80060d0:	f000 bf4e 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80060d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e0:	d106      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d103      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 80060e8:	4b2c      	ldr	r3, [pc, #176]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ec:	f000 bf40 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80060f0:	4b27      	ldr	r3, [pc, #156]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80060f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d107      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d104      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
 800610a:	f000 bf31 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	637b      	str	r3, [r7, #52]	@ 0x34
 8006112:	f000 bf2d 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611a:	1f11      	subs	r1, r2, #4
 800611c:	430b      	orrs	r3, r1
 800611e:	d13f      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006120:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006126:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800612a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006132:	f7fe fac9 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006136:	6378      	str	r0, [r7, #52]	@ 0x34
 8006138:	f000 bf1a 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	2b10      	cmp	r3, #16
 8006140:	d104      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006142:	f7fe f9a5 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006146:	6378      	str	r0, [r7, #52]	@ 0x34
 8006148:	f000 bf12 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800614c:	4b10      	ldr	r3, [pc, #64]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006158:	d106      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	2b20      	cmp	r3, #32
 800615e:	d103      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006160:	4b0e      	ldr	r3, [pc, #56]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006162:	637b      	str	r3, [r7, #52]	@ 0x34
 8006164:	f000 bf04 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800616a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b02      	cmp	r3, #2
 8006174:	d107      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	2b30      	cmp	r3, #48	@ 0x30
 800617a:	d104      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 800617c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
 8006182:	f000 bef5 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	637b      	str	r3, [r7, #52]	@ 0x34
 800618a:	f000 bef1 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800618e:	bf00      	nop
 8006190:	46020c00 	.word	0x46020c00
 8006194:	08009a6c 	.word	0x08009a6c
 8006198:	02dc6c00 	.word	0x02dc6c00
 800619c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80061a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a4:	f1a2 0108 	sub.w	r1, r2, #8
 80061a8:	430b      	orrs	r3, r1
 80061aa:	d136      	bne.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80061ac:	4ba4      	ldr	r3, [pc, #656]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80061be:	f7fe fa83 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 80061c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80061c4:	f000 bed4 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	2b40      	cmp	r3, #64	@ 0x40
 80061cc:	d104      	bne.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061ce:	f7fe f95f 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80061d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80061d4:	f000 becc 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80061d8:	4b99      	ldr	r3, [pc, #612]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e4:	d106      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	2b80      	cmp	r3, #128	@ 0x80
 80061ea:	d103      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 80061ec:	4b95      	ldr	r3, [pc, #596]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f0:	f000 bebe 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80061f4:	4b92      	ldr	r3, [pc, #584]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80061f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d107      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	2bc0      	cmp	r3, #192	@ 0xc0
 8006206:	d104      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620c:	637b      	str	r3, [r7, #52]	@ 0x34
 800620e:	f000 beaf 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
 8006216:	f000 beab 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800621a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621e:	f1a2 0110 	sub.w	r1, r2, #16
 8006222:	430b      	orrs	r3, r1
 8006224:	d139      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006226:	4b86      	ldr	r3, [pc, #536]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800622c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006230:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	2b00      	cmp	r3, #0
 8006236:	d104      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006238:	f7fe fa46 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 800623c:	6378      	str	r0, [r7, #52]	@ 0x34
 800623e:	f000 be97 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006248:	d104      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800624a:	f7fe f921 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800624e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006250:	f000 be8e 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006254:	4b7a      	ldr	r3, [pc, #488]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006260:	d107      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006268:	d103      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800626a:	4b76      	ldr	r3, [pc, #472]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
 800626e:	f000 be7f 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006272:	4b73      	ldr	r3, [pc, #460]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d108      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006286:	d104      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34
 800628e:	f000 be6f 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34
 8006296:	f000 be6b 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800629a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629e:	f1a2 0120 	sub.w	r1, r2, #32
 80062a2:	430b      	orrs	r3, r1
 80062a4:	d158      	bne.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80062a6:	4b66      	ldr	r3, [pc, #408]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80062b8:	f7fe fa2e 	bl	8004718 <HAL_RCC_GetPCLK3Freq>
 80062bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80062be:	f000 be57 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d104      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062c8:	f7fe f8e2 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80062cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80062ce:	f000 be4f 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80062d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062de:	d106      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d103      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 80062e6:	4b57      	ldr	r3, [pc, #348]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ea:	f000 be41 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80062ee:	4b54      	ldr	r3, [pc, #336]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80062f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d107      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d104      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006306:	637b      	str	r3, [r7, #52]	@ 0x34
 8006308:	f000 be32 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800630c:	4b4c      	ldr	r3, [pc, #304]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b20      	cmp	r3, #32
 8006316:	d11b      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	2b04      	cmp	r3, #4
 800631c:	d118      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800631e:	4b48      	ldr	r3, [pc, #288]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800632a:	4b45      	ldr	r3, [pc, #276]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0e1b      	lsrs	r3, r3, #24
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	e006      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006336:	4b42      	ldr	r3, [pc, #264]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	0e1b      	lsrs	r3, r3, #24
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	4a40      	ldr	r2, [pc, #256]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634a:	637b      	str	r3, [r7, #52]	@ 0x34
 800634c:	f000 be10 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	637b      	str	r3, [r7, #52]	@ 0x34
 8006354:	f000 be0c 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006360:	430b      	orrs	r3, r1
 8006362:	d173      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006364:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800636a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800636e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006376:	d104      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006378:	f7fe f88a 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800637c:	6378      	str	r0, [r7, #52]	@ 0x34
 800637e:	f000 bdf7 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006388:	d108      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800638a:	f107 0318 	add.w	r3, r7, #24
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff f992 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	637b      	str	r3, [r7, #52]	@ 0x34
 8006398:	f000 bdea 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80063a2:	f7fe f977 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80063a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80063a8:	f000 bde2 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063b2:	d122      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063b4:	4b22      	ldr	r3, [pc, #136]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d118      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80063cc:	4b1c      	ldr	r3, [pc, #112]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	0e1b      	lsrs	r3, r3, #24
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	e006      	b.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80063d8:	4b19      	ldr	r3, [pc, #100]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	0e1b      	lsrs	r3, r3, #24
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80063e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ee:	f000 bdbf 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f6:	f000 bdbb 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80063fa:	4b11      	ldr	r3, [pc, #68]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006406:	d107      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800640e:	d103      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006410:	4b0c      	ldr	r3, [pc, #48]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006412:	637b      	str	r3, [r7, #52]	@ 0x34
 8006414:	f000 bdac 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006418:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006424:	d107      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800642c:	d103      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800642e:	4b05      	ldr	r3, [pc, #20]	@ (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006430:	637b      	str	r3, [r7, #52]	@ 0x34
 8006432:	f000 bd9d 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	637b      	str	r3, [r7, #52]	@ 0x34
 800643a:	f000 bd99 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800643e:	bf00      	nop
 8006440:	46020c00 	.word	0x46020c00
 8006444:	00f42400 	.word	0x00f42400
 8006448:	08009a6c 	.word	0x08009a6c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800644c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006450:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006454:	430b      	orrs	r3, r1
 8006456:	d158      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006458:	4bad      	ldr	r3, [pc, #692]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800645a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	2b04      	cmp	r3, #4
 8006468:	d84b      	bhi.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800646a:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	080064a9 	.word	0x080064a9
 8006474:	08006485 	.word	0x08006485
 8006478:	08006497 	.word	0x08006497
 800647c:	080064b3 	.word	0x080064b3
 8006480:	080064bd 	.word	0x080064bd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe ffbb 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006492:	f000 bd6d 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fa66 	bl	800596c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064a4:	f000 bd64 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80064a8:	f7fe f8f4 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80064ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80064ae:	f000 bd5f 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80064b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80064b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064b8:	f000 bd5a 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064bc:	4b94      	ldr	r3, [pc, #592]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d118      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064c8:	4b91      	ldr	r3, [pc, #580]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80064d4:	4b8e      	ldr	r3, [pc, #568]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	0e1b      	lsrs	r3, r3, #24
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	e006      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80064e0:	4b8b      	ldr	r3, [pc, #556]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80064e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064e6:	041b      	lsls	r3, r3, #16
 80064e8:	0e1b      	lsrs	r3, r3, #24
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	4a89      	ldr	r2, [pc, #548]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80064f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80064f6:	f000 bd3b 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064fe:	f000 bd37 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006506:	f000 bd33 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800650a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006512:	430b      	orrs	r3, r1
 8006514:	d167      	bne.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006516:	4b7e      	ldr	r3, [pc, #504]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800651c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006520:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006528:	d036      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006530:	d855      	bhi.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006538:	d029      	beq.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006540:	d84d      	bhi.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006548:	d013      	beq.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006550:	d845      	bhi.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800655e:	d13e      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe ff4d 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800656e:	f000 bcff 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f9f8 	bl	800596c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006580:	f000 bcf6 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006584:	f7fe f886 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 8006588:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800658a:	f000 bcf1 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800658e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006594:	f000 bcec 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006598:	4b5d      	ldr	r3, [pc, #372]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d118      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80065b0:	4b57      	ldr	r3, [pc, #348]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	e006      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80065bc:	4b54      	ldr	r3, [pc, #336]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	0e1b      	lsrs	r3, r3, #24
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	4a52      	ldr	r2, [pc, #328]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80065cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80065d2:	f000 bccd 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065da:	f000 bcc9 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065e2:	f000 bcc5 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80065e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ea:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80065ee:	430b      	orrs	r3, r1
 80065f0:	d14c      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80065f2:	4b47      	ldr	r3, [pc, #284]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80065f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80065fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006604:	f7fe f860 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006608:	6378      	str	r0, [r7, #52]	@ 0x34
 800660a:	f000 bcb1 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006614:	d104      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006616:	f7fd ff3b 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 800661a:	6378      	str	r0, [r7, #52]	@ 0x34
 800661c:	f000 bca8 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006620:	4b3b      	ldr	r3, [pc, #236]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662c:	d107      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006634:	d103      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006636:	4b38      	ldr	r3, [pc, #224]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
 800663a:	f000 bc99 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800663e:	4b34      	ldr	r3, [pc, #208]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b20      	cmp	r3, #32
 8006648:	d11c      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006650:	d118      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006652:	4b2f      	ldr	r3, [pc, #188]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d005      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800665e:	4b2c      	ldr	r3, [pc, #176]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	0e1b      	lsrs	r3, r3, #24
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	e006      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800666a:	4b29      	ldr	r3, [pc, #164]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800666c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	0e1b      	lsrs	r3, r3, #24
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	4a26      	ldr	r2, [pc, #152]	@ (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800667a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006680:	f000 bc76 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
 8006688:	f000 bc72 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800668c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006690:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006694:	430b      	orrs	r3, r1
 8006696:	d152      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006698:	4b1d      	ldr	r3, [pc, #116]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800669a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800669e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80066a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066aa:	f7fe f80d 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 80066ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80066b0:	f000 bc5e 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ba:	d104      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066bc:	f7fd fee8 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80066c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80066c2:	f000 bc55 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80066c6:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d2:	d107      	bne.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066da:	d103      	bne.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80066dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80066de:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e0:	f000 bc46 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80066e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d122      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066f6:	d11e      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066f8:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006704:	4b02      	ldr	r3, [pc, #8]	@ (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	0e1b      	lsrs	r3, r3, #24
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	e00c      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006710:	46020c00 	.word	0x46020c00
 8006714:	08009a6c 	.word	0x08009a6c
 8006718:	00f42400 	.word	0x00f42400
 800671c:	4ba1      	ldr	r3, [pc, #644]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800671e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	0e1b      	lsrs	r3, r3, #24
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4a9f      	ldr	r2, [pc, #636]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800672c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006730:	637b      	str	r3, [r7, #52]	@ 0x34
 8006732:	f000 bc1d 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
 800673a:	f000 bc19 	b.w	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800673e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006742:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006746:	430b      	orrs	r3, r1
 8006748:	d151      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800674a:	4b96      	ldr	r3, [pc, #600]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800674c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006750:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006754:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2bc0      	cmp	r3, #192	@ 0xc0
 800675a:	d024      	beq.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800675c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006760:	d842      	bhi.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	2b80      	cmp	r3, #128	@ 0x80
 8006766:	d00d      	beq.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	2b80      	cmp	r3, #128	@ 0x80
 800676c:	d83c      	bhi.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d011      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800677a:	e035      	b.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800677c:	f7fd ffcc 	bl	8004718 <HAL_RCC_GetPCLK3Freq>
 8006780:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006782:	e3f5      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006784:	4b87      	ldr	r3, [pc, #540]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006790:	d102      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8006792:	4b86      	ldr	r3, [pc, #536]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006796:	e3eb      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800679c:	e3e8      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800679e:	f7fd fe77 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 80067a2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067a4:	e3e4      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067a6:	4b7f      	ldr	r3, [pc, #508]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0320 	and.w	r3, r3, #32
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d117      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067b2:	4b7c      	ldr	r3, [pc, #496]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80067be:	4b79      	ldr	r3, [pc, #484]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0e1b      	lsrs	r3, r3, #24
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	e006      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80067ca:	4b76      	ldr	r3, [pc, #472]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067d0:	041b      	lsls	r3, r3, #16
 80067d2:	0e1b      	lsrs	r3, r3, #24
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	4a73      	ldr	r2, [pc, #460]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80067da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067e0:	e3c6      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067e6:	e3c3      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ec:	e3c0      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80067ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f2:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80067f6:	430b      	orrs	r3, r1
 80067f8:	d147      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80067fa:	4b6a      	ldr	r3, [pc, #424]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80067fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006804:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	2b00      	cmp	r3, #0
 800680a:	d103      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fd ff5c 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006810:	6378      	str	r0, [r7, #52]	@ 0x34
 8006812:	e3ad      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800681a:	d103      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800681c:	f7fd fe38 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006820:	6378      	str	r0, [r7, #52]	@ 0x34
 8006822:	e3a5      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006824:	4b5f      	ldr	r3, [pc, #380]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006830:	d106      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006838:	d102      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800683a:	4b5c      	ldr	r3, [pc, #368]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800683c:	637b      	str	r3, [r7, #52]	@ 0x34
 800683e:	e397      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006840:	4b58      	ldr	r3, [pc, #352]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b20      	cmp	r3, #32
 800684a:	d11b      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006852:	d117      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006854:	4b53      	ldr	r3, [pc, #332]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8006860:	4b50      	ldr	r3, [pc, #320]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	0e1b      	lsrs	r3, r3, #24
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	e006      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800686c:	4b4d      	ldr	r3, [pc, #308]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800686e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	0e1b      	lsrs	r3, r3, #24
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	4a4b      	ldr	r2, [pc, #300]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800687c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006880:	637b      	str	r3, [r7, #52]	@ 0x34
 8006882:	e375      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
 8006888:	e372      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800688a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006892:	430b      	orrs	r3, r1
 8006894:	d164      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006896:	4b43      	ldr	r3, [pc, #268]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800689c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d120      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068a8:	4b3e      	ldr	r3, [pc, #248]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d117      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068b4:	4b3b      	ldr	r3, [pc, #236]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80068c0:	4b38      	ldr	r3, [pc, #224]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	0e1b      	lsrs	r3, r3, #24
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	e006      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80068cc:	4b35      	ldr	r3, [pc, #212]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	0e1b      	lsrs	r3, r3, #24
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	4a33      	ldr	r2, [pc, #204]	@ (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80068dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e2:	e345      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e8:	e342      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80068ea:	4b2e      	ldr	r3, [pc, #184]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80068ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068f8:	d112      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006900:	d10e      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006902:	4b28      	ldr	r3, [pc, #160]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800690c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006910:	d102      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006912:	23fa      	movs	r3, #250	@ 0xfa
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006916:	e32b      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006918:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800691e:	e327      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006920:	4b20      	ldr	r3, [pc, #128]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800692c:	d106      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006934:	d102      	bne.n	800693c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006936:	4b1d      	ldr	r3, [pc, #116]	@ (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006938:	637b      	str	r3, [r7, #52]	@ 0x34
 800693a:	e319      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800693c:	4b19      	ldr	r3, [pc, #100]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800693e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d107      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006950:	d103      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006956:	637b      	str	r3, [r7, #52]	@ 0x34
 8006958:	e30a      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
 800695e:	e307      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006964:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006968:	430b      	orrs	r3, r1
 800696a:	d16b      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800696c:	4b0d      	ldr	r3, [pc, #52]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800696e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006972:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006976:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	2b00      	cmp	r3, #0
 800697c:	d127      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800697e:	4b09      	ldr	r3, [pc, #36]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b20      	cmp	r3, #32
 8006988:	d11e      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800698a:	4b06      	ldr	r3, [pc, #24]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00c      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006996:	4b03      	ldr	r3, [pc, #12]	@ (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	0e1b      	lsrs	r3, r3, #24
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	e00d      	b.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80069a2:	bf00      	nop
 80069a4:	46020c00 	.word	0x46020c00
 80069a8:	08009a6c 	.word	0x08009a6c
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	4b94      	ldr	r3, [pc, #592]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	0e1b      	lsrs	r3, r3, #24
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	4a92      	ldr	r2, [pc, #584]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80069c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c6:	e2d3      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80069cc:	e2d0      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80069ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069dc:	d112      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e4:	d10e      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069e6:	4b87      	ldr	r3, [pc, #540]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80069e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069f4:	d102      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80069f6:	23fa      	movs	r3, #250	@ 0xfa
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80069fa:	e2b9      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80069fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a02:	e2b5      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006a04:	4b7f      	ldr	r3, [pc, #508]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a10:	d106      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a18:	d102      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8006a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1e:	e2a7      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006a20:	4b78      	ldr	r3, [pc, #480]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a34:	d103      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3c:	e298      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a42:	e295      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a48:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	d147      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a50:	4b6c      	ldr	r3, [pc, #432]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a56:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006a5a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a62:	f7fd fe31 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006a66:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a68:	e282      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006a6a:	4b66      	ldr	r3, [pc, #408]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a78:	d112      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a80:	d10e      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a82:	4b60      	ldr	r3, [pc, #384]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a90:	d102      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8006a92:	23fa      	movs	r3, #250	@ 0xfa
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a96:	e26b      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a9e:	e267      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006aa0:	4b58      	ldr	r3, [pc, #352]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aac:	d106      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ab4:	d102      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006ab6:	4b55      	ldr	r3, [pc, #340]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aba:	e259      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006abc:	4b51      	ldr	r3, [pc, #324]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d107      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ad0:	d103      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad8:	e24a      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ade:	e247      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	d12d      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006aec:	4b45      	ldr	r3, [pc, #276]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006af2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006af6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006af8:	4b42      	ldr	r3, [pc, #264]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b04:	d105      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8006b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b10:	e22e      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b18:	d107      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fc70 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b28:	e222      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b30:	d107      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b32:	f107 0318 	add.w	r3, r7, #24
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fdbe 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b40:	e216      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b46:	e213      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b4c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006b50:	430b      	orrs	r3, r1
 8006b52:	d15d      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006b54:	4b2b      	ldr	r3, [pc, #172]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b5a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b66:	d028      	beq.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b6e:	d845      	bhi.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b76:	d013      	beq.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b7e:	d83d      	bhi.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b8c:	d004      	beq.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8006b8e:	e035      	b.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006b90:	f7fd fdae 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8006b94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b96:	e1eb      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006b98:	f7fd fc7a 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006b9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b9e:	e1e7      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ba0:	4b18      	ldr	r3, [pc, #96]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bac:	d102      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8006bae:	4b17      	ldr	r3, [pc, #92]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006bb0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bb2:	e1dd      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bb8:	e1da      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bba:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d117      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	0e1b      	lsrs	r3, r3, #24
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	e006      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8006bde:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	0e1b      	lsrs	r3, r3, #24
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	4a06      	ldr	r2, [pc, #24]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bf4:	e1bc      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bfa:	e1b9      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c00:	e1b6      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006c02:	bf00      	nop
 8006c04:	46020c00 	.word	0x46020c00
 8006c08:	08009a6c 	.word	0x08009a6c
 8006c0c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c14:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	d156      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006c1c:	4ba5      	ldr	r3, [pc, #660]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c26:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c2e:	d028      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c36:	d845      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c3e:	d013      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c46:	d83d      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c54:	d004      	beq.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8006c56:	e035      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006c58:	f7fd fd36 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006c5c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c5e:	e187      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006c60:	f7fd fc16 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006c64:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c66:	e183      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c68:	4b92      	ldr	r3, [pc, #584]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c74:	d102      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8006c76:	4b90      	ldr	r3, [pc, #576]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c7a:	e179      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c80:	e176      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c82:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d117      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c8e:	4b89      	ldr	r3, [pc, #548]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8006c9a:	4b86      	ldr	r3, [pc, #536]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	0e1b      	lsrs	r3, r3, #24
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	e006      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8006ca6:	4b83      	ldr	r3, [pc, #524]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	0e1b      	lsrs	r3, r3, #24
 8006cb0:	f003 030f 	and.w	r3, r3, #15
 8006cb4:	4a81      	ldr	r2, [pc, #516]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cbc:	e158      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cc2:	e155      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cc8:	e152      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cce:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	d177      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006cd6:	4b77      	ldr	r3, [pc, #476]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cdc:	f003 0318 	and.w	r3, r3, #24
 8006ce0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	2b18      	cmp	r3, #24
 8006ce6:	d86b      	bhi.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d55 	.word	0x08006d55
 8006cf4:	08006dc1 	.word	0x08006dc1
 8006cf8:	08006dc1 	.word	0x08006dc1
 8006cfc:	08006dc1 	.word	0x08006dc1
 8006d00:	08006dc1 	.word	0x08006dc1
 8006d04:	08006dc1 	.word	0x08006dc1
 8006d08:	08006dc1 	.word	0x08006dc1
 8006d0c:	08006dc1 	.word	0x08006dc1
 8006d10:	08006d5d 	.word	0x08006d5d
 8006d14:	08006dc1 	.word	0x08006dc1
 8006d18:	08006dc1 	.word	0x08006dc1
 8006d1c:	08006dc1 	.word	0x08006dc1
 8006d20:	08006dc1 	.word	0x08006dc1
 8006d24:	08006dc1 	.word	0x08006dc1
 8006d28:	08006dc1 	.word	0x08006dc1
 8006d2c:	08006dc1 	.word	0x08006dc1
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006dc1 	.word	0x08006dc1
 8006d38:	08006dc1 	.word	0x08006dc1
 8006d3c:	08006dc1 	.word	0x08006dc1
 8006d40:	08006dc1 	.word	0x08006dc1
 8006d44:	08006dc1 	.word	0x08006dc1
 8006d48:	08006dc1 	.word	0x08006dc1
 8006d4c:	08006dc1 	.word	0x08006dc1
 8006d50:	08006d7f 	.word	0x08006d7f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006d54:	f7fd fce0 	bl	8004718 <HAL_RCC_GetPCLK3Freq>
 8006d58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d5a:	e109      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d5c:	f7fd fb98 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006d60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d62:	e105      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d64:	4b53      	ldr	r3, [pc, #332]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d70:	d102      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8006d72:	4b51      	ldr	r3, [pc, #324]	@ (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8006d74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d76:	e0fb      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d7c:	e0f8      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d7e:	4b4d      	ldr	r3, [pc, #308]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d117      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8006d96:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	0e1b      	lsrs	r3, r3, #24
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	e006      	b.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8006da2:	4b44      	ldr	r3, [pc, #272]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006da8:	041b      	lsls	r3, r3, #16
 8006daa:	0e1b      	lsrs	r3, r3, #24
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	4a42      	ldr	r2, [pc, #264]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006db8:	e0da      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dbe:	e0d7      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dc4:	e0d4      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dca:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	d155      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006dd2:	4b38      	ldr	r3, [pc, #224]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006dd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dd8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006de4:	d013      	beq.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006dec:	d844      	bhi.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006df4:	d013      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dfc:	d83c      	bhi.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d014      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e0a:	d014      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006e0c:	e034      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e0e:	f107 0318 	add.w	r3, r7, #24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fc50 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e1c:	e0a8      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe faee 	bl	8005404 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e2c:	e0a0      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e2e:	f7fd fb2f 	bl	8004490 <HAL_RCC_GetSysClockFreq>
 8006e32:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e34:	e09c      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e36:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d117      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e42:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006e4e:	4b19      	ldr	r3, [pc, #100]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	0e1b      	lsrs	r3, r3, #24
 8006e54:	f003 030f 	and.w	r3, r3, #15
 8006e58:	e006      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006e5a:	4b16      	ldr	r3, [pc, #88]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	0e1b      	lsrs	r3, r3, #24
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	4a14      	ldr	r2, [pc, #80]	@ (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e70:	e07e      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e76:	e07b      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e7c:	e078      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e82:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006e86:	430b      	orrs	r3, r1
 8006e88:	d138      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e94:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006e96:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d10d      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb0:	e05e      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006eb2:	bf00      	nop
 8006eb4:	46020c00 	.word	0x46020c00
 8006eb8:	00f42400 	.word	0x00f42400
 8006ebc:	08009a6c 	.word	0x08009a6c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006ec2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ece:	d112      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed6:	d10e      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ed8:	4b28      	ldr	r3, [pc, #160]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ee6:	d102      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8006ee8:	23fa      	movs	r3, #250	@ 0xfa
 8006eea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006eec:	e040      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006eee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ef4:	e03c      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efa:	e039      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006f04:	430b      	orrs	r3, r1
 8006f06:	d131      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006f08:	4b1c      	ldr	r3, [pc, #112]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006f14:	4b19      	ldr	r3, [pc, #100]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f20:	d105      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006f28:	4b15      	ldr	r3, [pc, #84]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2c:	e020      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006f2e:	4b13      	ldr	r3, [pc, #76]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f3a:	d106      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f42:	d102      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006f44:	4b0f      	ldr	r3, [pc, #60]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f48:	e012      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f56:	d106      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f5e:	d102      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006f60:	4b09      	ldr	r3, [pc, #36]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f64:	e004      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f6a:	e001      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3738      	adds	r7, #56	@ 0x38
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	46020c00 	.word	0x46020c00
 8006f80:	02dc6c00 	.word	0x02dc6c00
 8006f84:	016e3600 	.word	0x016e3600
 8006f88:	00f42400 	.word	0x00f42400

08006f8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006f94:	4b47      	ldr	r3, [pc, #284]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a46      	ldr	r2, [pc, #280]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8006f9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006fa0:	f7fa fa52 	bl	8001448 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fa6:	e008      	b.n	8006fba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fa8:	f7fa fa4e 	bl	8001448 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e077      	b.n	80070aa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fba:	4b3e      	ldr	r3, [pc, #248]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1f0      	bne.n	8006fa8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006fce:	f023 0303 	bic.w	r3, r3, #3
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6811      	ldr	r1, [r2, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6852      	ldr	r2, [r2, #4]
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	0212      	lsls	r2, r2, #8
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	4934      	ldr	r1, [pc, #208]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006fe6:	4b33      	ldr	r3, [pc, #204]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8006fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fea:	4b33      	ldr	r3, [pc, #204]	@ (80070b8 <RCCEx_PLL2_Config+0x12c>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6892      	ldr	r2, [r2, #8]
 8006ff2:	3a01      	subs	r2, #1
 8006ff4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68d2      	ldr	r2, [r2, #12]
 8006ffc:	3a01      	subs	r2, #1
 8006ffe:	0252      	lsls	r2, r2, #9
 8007000:	b292      	uxth	r2, r2
 8007002:	4311      	orrs	r1, r2
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6912      	ldr	r2, [r2, #16]
 8007008:	3a01      	subs	r2, #1
 800700a:	0412      	lsls	r2, r2, #16
 800700c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007010:	4311      	orrs	r1, r2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6952      	ldr	r2, [r2, #20]
 8007016:	3a01      	subs	r2, #1
 8007018:	0612      	lsls	r2, r2, #24
 800701a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800701e:	430a      	orrs	r2, r1
 8007020:	4924      	ldr	r1, [pc, #144]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007022:	4313      	orrs	r3, r2
 8007024:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007026:	4b23      	ldr	r3, [pc, #140]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702a:	f023 020c 	bic.w	r2, r3, #12
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	4920      	ldr	r1, [pc, #128]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007034:	4313      	orrs	r3, r2
 8007036:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007038:	4b1e      	ldr	r3, [pc, #120]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 800703a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	491c      	ldr	r1, [pc, #112]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007042:	4313      	orrs	r3, r2
 8007044:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007046:	4b1b      	ldr	r3, [pc, #108]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	4a1a      	ldr	r2, [pc, #104]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007052:	4b18      	ldr	r3, [pc, #96]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800705a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	69d2      	ldr	r2, [r2, #28]
 8007062:	00d2      	lsls	r2, r2, #3
 8007064:	4913      	ldr	r1, [pc, #76]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007066:	4313      	orrs	r3, r2
 8007068:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800706a:	4b12      	ldr	r3, [pc, #72]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 800706c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706e:	4a11      	ldr	r2, [pc, #68]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007070:	f043 0310 	orr.w	r3, r3, #16
 8007074:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007076:	4b0f      	ldr	r3, [pc, #60]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a0e      	ldr	r2, [pc, #56]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 800707c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007080:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007082:	f7fa f9e1 	bl	8001448 <HAL_GetTick>
 8007086:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007088:	e008      	b.n	800709c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800708a:	f7fa f9dd 	bl	8001448 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800709c:	4b05      	ldr	r3, [pc, #20]	@ (80070b4 <RCCEx_PLL2_Config+0x128>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0

}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	46020c00 	.word	0x46020c00
 80070b8:	80800000 	.word	0x80800000

080070bc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80070c4:	4b47      	ldr	r3, [pc, #284]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a46      	ldr	r2, [pc, #280]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80070ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80070d0:	f7fa f9ba 	bl	8001448 <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070d6:	e008      	b.n	80070ea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070d8:	f7fa f9b6 	bl	8001448 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d901      	bls.n	80070ea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e077      	b.n	80071da <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070ea:	4b3e      	ldr	r3, [pc, #248]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1f0      	bne.n	80070d8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80070f6:	4b3b      	ldr	r3, [pc, #236]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6811      	ldr	r1, [r2, #0]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6852      	ldr	r2, [r2, #4]
 800710a:	3a01      	subs	r2, #1
 800710c:	0212      	lsls	r2, r2, #8
 800710e:	430a      	orrs	r2, r1
 8007110:	4934      	ldr	r1, [pc, #208]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007112:	4313      	orrs	r3, r2
 8007114:	630b      	str	r3, [r1, #48]	@ 0x30
 8007116:	4b33      	ldr	r3, [pc, #204]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800711a:	4b33      	ldr	r3, [pc, #204]	@ (80071e8 <RCCEx_PLL3_Config+0x12c>)
 800711c:	4013      	ands	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6892      	ldr	r2, [r2, #8]
 8007122:	3a01      	subs	r2, #1
 8007124:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68d2      	ldr	r2, [r2, #12]
 800712c:	3a01      	subs	r2, #1
 800712e:	0252      	lsls	r2, r2, #9
 8007130:	b292      	uxth	r2, r2
 8007132:	4311      	orrs	r1, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6912      	ldr	r2, [r2, #16]
 8007138:	3a01      	subs	r2, #1
 800713a:	0412      	lsls	r2, r2, #16
 800713c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007140:	4311      	orrs	r1, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6952      	ldr	r2, [r2, #20]
 8007146:	3a01      	subs	r2, #1
 8007148:	0612      	lsls	r2, r2, #24
 800714a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800714e:	430a      	orrs	r2, r1
 8007150:	4924      	ldr	r1, [pc, #144]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007152:	4313      	orrs	r3, r2
 8007154:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007156:	4b23      	ldr	r3, [pc, #140]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	f023 020c 	bic.w	r2, r3, #12
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	4920      	ldr	r1, [pc, #128]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007164:	4313      	orrs	r3, r2
 8007166:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007168:	4b1e      	ldr	r3, [pc, #120]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 800716a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	491c      	ldr	r1, [pc, #112]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007172:	4313      	orrs	r3, r2
 8007174:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007176:	4b1b      	ldr	r3, [pc, #108]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717a:	4a1a      	ldr	r2, [pc, #104]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 800717c:	f023 0310 	bic.w	r3, r3, #16
 8007180:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007182:	4b18      	ldr	r3, [pc, #96]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800718a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	69d2      	ldr	r2, [r2, #28]
 8007192:	00d2      	lsls	r2, r2, #3
 8007194:	4913      	ldr	r1, [pc, #76]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 8007196:	4313      	orrs	r3, r2
 8007198:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800719a:	4b12      	ldr	r3, [pc, #72]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	4a11      	ldr	r2, [pc, #68]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80071a0:	f043 0310 	orr.w	r3, r3, #16
 80071a4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80071a6:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a0e      	ldr	r2, [pc, #56]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071b2:	f7fa f949 	bl	8001448 <HAL_GetTick>
 80071b6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071b8:	e008      	b.n	80071cc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071ba:	f7fa f945 	bl	8001448 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e006      	b.n	80071da <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071cc:	4b05      	ldr	r3, [pc, #20]	@ (80071e4 <RCCEx_PLL3_Config+0x128>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	46020c00 	.word	0x46020c00
 80071e8:	80800000 	.word	0x80800000

080071ec <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d904      	bls.n	800720a <HAL_SAI_InitProtocol+0x1e>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	3b03      	subs	r3, #3
 8007204:	2b01      	cmp	r3, #1
 8007206:	d812      	bhi.n	800722e <HAL_SAI_InitProtocol+0x42>
 8007208:	e008      	b.n	800721c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fd3d 	bl	8007c90 <SAI_InitI2S>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]
      break;
 800721a:	e00b      	b.n	8007234 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 fde6 	bl	8007df4 <SAI_InitPCM>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]
      break;
 800722c:	e002      	b.n	8007234 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
      break;
 8007232:	bf00      	nop
  }

  if (status == HAL_OK)
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f808 	bl	8007250 <HAL_SAI_Init>
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007244:	7dfb      	ldrb	r3, [r7, #23]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	@ 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e1ce      	b.n	8007600 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10e      	bne.n	800728a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a83      	ldr	r2, [pc, #524]	@ (8007480 <HAL_SAI_Init+0x230>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d107      	bne.n	8007286 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800727a:	2b01      	cmp	r3, #1
 800727c:	d103      	bne.n	8007286 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e1ba      	b.n	8007600 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7f9 fb7a 	bl	8000998 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fe5f 	bl	8007f68 <SAI_Disable>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e1a5      	b.n	8007600 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d00c      	beq.n	80072de <HAL_SAI_Init+0x8e>
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d80d      	bhi.n	80072e4 <HAL_SAI_Init+0x94>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_SAI_Init+0x82>
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d003      	beq.n	80072d8 <HAL_SAI_Init+0x88>
 80072d0:	e008      	b.n	80072e4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80072d2:	2300      	movs	r3, #0
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072d6:	e008      	b.n	80072ea <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80072d8:	2310      	movs	r3, #16
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072dc:	e005      	b.n	80072ea <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80072de:	2320      	movs	r3, #32
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072e2:	e002      	b.n	80072ea <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80072e8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d81d      	bhi.n	800732e <HAL_SAI_Init+0xde>
 80072f2:	a201      	add	r2, pc, #4	@ (adr r2, 80072f8 <HAL_SAI_Init+0xa8>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	08007309 	.word	0x08007309
 80072fc:	0800730f 	.word	0x0800730f
 8007300:	08007317 	.word	0x08007317
 8007304:	0800731f 	.word	0x0800731f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
      break;
 800730c:	e012      	b.n	8007334 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800730e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007312:	61fb      	str	r3, [r7, #28]
      break;
 8007314:	e00e      	b.n	8007334 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800731a:	61fb      	str	r3, [r7, #28]
      break;
 800731c:	e00a      	b.n	8007334 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800731e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007322:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800732c:	e002      	b.n	8007334 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
      break;
 8007332:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a51      	ldr	r2, [pc, #324]	@ (8007480 <HAL_SAI_Init+0x230>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d004      	beq.n	8007348 <HAL_SAI_Init+0xf8>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a50      	ldr	r2, [pc, #320]	@ (8007484 <HAL_SAI_Init+0x234>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d103      	bne.n	8007350 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007348:	4a4f      	ldr	r2, [pc, #316]	@ (8007488 <HAL_SAI_Init+0x238>)
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e002      	b.n	8007356 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007350:	4a4e      	ldr	r2, [pc, #312]	@ (800748c <HAL_SAI_Init+0x23c>)
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d077      	beq.n	800744e <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a47      	ldr	r2, [pc, #284]	@ (8007480 <HAL_SAI_Init+0x230>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d004      	beq.n	8007372 <HAL_SAI_Init+0x122>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a45      	ldr	r2, [pc, #276]	@ (8007484 <HAL_SAI_Init+0x234>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d107      	bne.n	8007382 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007372:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007376:	f04f 0100 	mov.w	r1, #0
 800737a:	f7fe fc51 	bl	8005c20 <HAL_RCCEx_GetPeriphCLKFreq>
 800737e:	61b8      	str	r0, [r7, #24]
 8007380:	e006      	b.n	8007390 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007382:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007386:	f04f 0100 	mov.w	r1, #0
 800738a:	f7fe fc49 	bl	8005c20 <HAL_RCCEx_GetPeriphCLKFreq>
 800738e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007398:	d120      	bne.n	80073dc <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d102      	bne.n	80073a8 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80073a2:	2340      	movs	r3, #64	@ 0x40
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	e00a      	b.n	80073be <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d103      	bne.n	80073b8 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80073b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	e002      	b.n	80073be <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073bc:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4619      	mov	r1, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	fb02 f303 	mul.w	r3, r2, r3
 80073d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	e017      	b.n	800740c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073e4:	d101      	bne.n	80073ea <HAL_SAI_Init+0x19a>
 80073e6:	2302      	movs	r3, #2
 80073e8:	e000      	b.n	80073ec <HAL_SAI_Init+0x19c>
 80073ea:	2301      	movs	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	4619      	mov	r1, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	fb02 f303 	mul.w	r3, r2, r3
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	fbb1 f3f3 	udiv	r3, r1, r3
 800740a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	4a20      	ldr	r2, [pc, #128]	@ (8007490 <HAL_SAI_Init+0x240>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	08da      	lsrs	r2, r3, #3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800741a:	6979      	ldr	r1, [r7, #20]
 800741c:	4b1c      	ldr	r3, [pc, #112]	@ (8007490 <HAL_SAI_Init+0x240>)
 800741e:	fba3 2301 	umull	r2, r3, r3, r1
 8007422:	08da      	lsrs	r2, r3, #3
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	1aca      	subs	r2, r1, r3
 800742e:	2a08      	cmp	r2, #8
 8007430:	d904      	bls.n	800743c <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007440:	2b04      	cmp	r3, #4
 8007442:	d104      	bne.n	800744e <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007448:	085a      	lsrs	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_SAI_Init+0x20e>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d109      	bne.n	8007472 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_SAI_Init+0x21a>
 8007466:	2300      	movs	r3, #0
 8007468:	e001      	b.n	800746e <HAL_SAI_Init+0x21e>
 800746a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800746e:	623b      	str	r3, [r7, #32]
 8007470:	e012      	b.n	8007498 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007476:	2b01      	cmp	r3, #1
 8007478:	d10c      	bne.n	8007494 <HAL_SAI_Init+0x244>
 800747a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800747e:	e00a      	b.n	8007496 <HAL_SAI_Init+0x246>
 8007480:	40015404 	.word	0x40015404
 8007484:	40015424 	.word	0x40015424
 8007488:	40015400 	.word	0x40015400
 800748c:	40015800 	.word	0x40015800
 8007490:	cccccccd 	.word	0xcccccccd
 8007494:	2300      	movs	r3, #0
 8007496:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6819      	ldr	r1, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b59      	ldr	r3, [pc, #356]	@ (8007608 <HAL_SAI_Init+0x3b8>)
 80074a4:	400b      	ands	r3, r1
 80074a6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6819      	ldr	r1, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074bc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c2:	431a      	orrs	r2, r3
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 80074d0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074dc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	051b      	lsls	r3, r3, #20
 80074e4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80074ea:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007508:	f023 030f 	bic.w	r3, r3, #15
 800750c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6859      	ldr	r1, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6899      	ldr	r1, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4b35      	ldr	r3, [pc, #212]	@ (800760c <HAL_SAI_Init+0x3bc>)
 8007538:	400b      	ands	r3, r1
 800753a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6899      	ldr	r1, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007546:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800754c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8007552:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8007558:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800755e:	3b01      	subs	r3, #1
 8007560:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007562:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68d9      	ldr	r1, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800757a:	400b      	ands	r3, r1
 800757c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68d9      	ldr	r1, [r3, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800758c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007592:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007594:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759a:	3b01      	subs	r3, #1
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a18      	ldr	r2, [pc, #96]	@ (8007610 <HAL_SAI_Init+0x3c0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d119      	bne.n	80075e6 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80075b2:	4b18      	ldr	r3, [pc, #96]	@ (8007614 <HAL_SAI_Init+0x3c4>)
 80075b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b6:	4a17      	ldr	r2, [pc, #92]	@ (8007614 <HAL_SAI_Init+0x3c4>)
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d10e      	bne.n	80075e6 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	3b01      	subs	r3, #1
 80075d2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80075d4:	490f      	ldr	r1, [pc, #60]	@ (8007614 <HAL_SAI_Init+0x3c4>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80075da:	4b0e      	ldr	r3, [pc, #56]	@ (8007614 <HAL_SAI_Init+0x3c4>)
 80075dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075de:	4a0d      	ldr	r2, [pc, #52]	@ (8007614 <HAL_SAI_Init+0x3c4>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3728      	adds	r7, #40	@ 0x28
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	f005c010 	.word	0xf005c010
 800760c:	fff88000 	.word	0xfff88000
 8007610:	40015404 	.word	0x40015404
 8007614:	40015400 	.word	0x40015400

08007618 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_SAI_Abort+0x1a>
 800762e:	2302      	movs	r3, #2
 8007630:	e07d      	b.n	800772e <HAL_SAI_Abort+0x116>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fc94 	bl	8007f68 <SAI_Disable>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007658:	d14f      	bne.n	80076fa <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007668:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b12      	cmp	r3, #18
 8007674:	d11d      	bne.n	80076b2 <HAL_SAI_Abort+0x9a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767c:	2b00      	cmp	r3, #0
 800767e:	d018      	beq.n	80076b2 <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007686:	4618      	mov	r0, r3
 8007688:	f7fa f8a6 	bl	80017d8 <HAL_DMA_Abort>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00f      	beq.n	80076b2 <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769a:	2b20      	cmp	r3, #32
 800769c:	d009      	beq.n	80076b2 <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b22      	cmp	r3, #34	@ 0x22
 80076bc:	d11d      	bne.n	80076fa <HAL_SAI_Abort+0xe2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d018      	beq.n	80076fa <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fa f882 	bl	80017d8 <HAL_DMA_Abort>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00f      	beq.n	80076fa <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d009      	beq.n	80076fa <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0208 	orr.w	r2, r2, #8
 800771a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_SAI_Receive_DMA+0x1a>
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e0c6      	b.n	80078e4 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b01      	cmp	r3, #1
 8007760:	f040 80bf 	bne.w	80078e2 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_SAI_Receive_DMA+0x3a>
 800776e:	2302      	movs	r3, #2
 8007770:	e0b8      	b.n	80078e4 <HAL_SAI_Receive_DMA+0x1ac>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	88fa      	ldrh	r2, [r7, #6]
 8007784:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	88fa      	ldrh	r2, [r7, #6]
 800778c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2222      	movs	r2, #34	@ 0x22
 800779c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a6:	4a51      	ldr	r2, [pc, #324]	@ (80078ec <HAL_SAI_Receive_DMA+0x1b4>)
 80077a8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b0:	4a4f      	ldr	r2, [pc, #316]	@ (80078f0 <HAL_SAI_Receive_DMA+0x1b8>)
 80077b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077ba:	4a4e      	ldr	r2, [pc, #312]	@ (80078f4 <HAL_SAI_Receive_DMA+0x1bc>)
 80077bc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c4:	2200      	movs	r2, #0
 80077c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077cc:	2b40      	cmp	r3, #64	@ 0x40
 80077ce:	d106      	bne.n	80077de <HAL_SAI_Receive_DMA+0xa6>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 80077d8:	88fb      	ldrh	r3, [r7, #6]
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	e00a      	b.n	80077f4 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e2:	2b80      	cmp	r3, #128	@ 0x80
 80077e4:	d803      	bhi.n	80077ee <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	e002      	b.n	80077f4 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 80077ee:	88fb      	ldrh	r3, [r7, #6]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02d      	beq.n	8007860 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780c:	2b00      	cmp	r3, #0
 800780e:	d021      	beq.n	8007854 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f103 021c 	add.w	r2, r3, #28
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800782c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800783c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007848:	4618      	mov	r0, r3
 800784a:	f7fa fb59 	bl	8001f00 <HAL_DMAEx_List_Start_IT>
 800784e:	4603      	mov	r3, r0
 8007850:	75fb      	strb	r3, [r7, #23]
 8007852:	e014      	b.n	800787e <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e041      	b.n	80078e4 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	331c      	adds	r3, #28
 800786c:	4619      	mov	r1, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007872:	461a      	mov	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f7f9 ff4f 	bl	8001718 <HAL_DMA_Start_IT>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e029      	b.n	80078e4 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007890:	2100      	movs	r1, #0
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 fb30 	bl	8007ef8 <SAI_InterruptFlag>
 8007898:	4601      	mov	r1, r0
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80078b6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d107      	bne.n	80078d6 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80078d4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	e000      	b.n	80078e4 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 80078e2:	2302      	movs	r3, #2
  }
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	0800803b 	.word	0x0800803b
 80078f0:	08007fdd 	.word	0x08007fdd
 80078f4:	08008057 	.word	0x08008057

080078f8 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 81a7 	beq.w	8007c5c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <HAL_SAI_IRQHandler+0x4e>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d005      	beq.n	8007946 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
 8007944:	e18a      	b.n	8007c5c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01e      	beq.n	800798e <HAL_SAI_IRQHandler+0x96>
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d019      	beq.n	800798e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2201      	movs	r2, #1
 8007960:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b22      	cmp	r3, #34	@ 0x22
 800796c:	d101      	bne.n	8007972 <HAL_SAI_IRQHandler+0x7a>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <HAL_SAI_IRQHandler+0x7c>
 8007972:	2302      	movs	r3, #2
 8007974:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f978 	bl	8007c7c <HAL_SAI_ErrorCallback>
 800798c:	e166      	b.n	8007c5c <HAL_SAI_IRQHandler+0x364>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d013      	beq.n	80079c0 <HAL_SAI_IRQHandler+0xc8>
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2202      	movs	r2, #2
 80079a8:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8153 	beq.w	8007c5c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079bc:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80079be:	e14d      	b.n	8007c5c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d05b      	beq.n	8007a82 <HAL_SAI_IRQHandler+0x18a>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f003 0320 	and.w	r3, r3, #32
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d056      	beq.n	8007a82 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2220      	movs	r2, #32
 80079da:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079e2:	f043 0204 	orr.w	r2, r3, #4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d03e      	beq.n	8007a74 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d018      	beq.n	8007a32 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a06:	4a97      	ldr	r2, [pc, #604]	@ (8007c64 <HAL_SAI_IRQHandler+0x36c>)
 8007a08:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7f9 ff5d 	bl	80018d0 <HAL_DMA_Abort_IT>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a22:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f925 	bl	8007c7c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 810a 	beq.w	8007c52 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a44:	4a87      	ldr	r2, [pc, #540]	@ (8007c64 <HAL_SAI_IRQHandler+0x36c>)
 8007a46:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7f9 ff3e 	bl	80018d0 <HAL_DMA_Abort_IT>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80fb 	beq.w	8007c52 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f905 	bl	8007c7c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007a72:	e0ee      	b.n	8007c52 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff fdcf 	bl	8007618 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8fe 	bl	8007c7c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007a80:	e0e7      	b.n	8007c52 <HAL_SAI_IRQHandler+0x35a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d05b      	beq.n	8007b44 <HAL_SAI_IRQHandler+0x24c>
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d056      	beq.n	8007b44 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2240      	movs	r2, #64	@ 0x40
 8007a9c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aa4:	f043 0208 	orr.w	r2, r3, #8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d03e      	beq.n	8007b36 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d018      	beq.n	8007af4 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac8:	4a66      	ldr	r2, [pc, #408]	@ (8007c64 <HAL_SAI_IRQHandler+0x36c>)
 8007aca:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7f9 fefc 	bl	80018d0 <HAL_DMA_Abort_IT>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f8c4 	bl	8007c7c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 80ab 	beq.w	8007c56 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b06:	4a57      	ldr	r2, [pc, #348]	@ (8007c64 <HAL_SAI_IRQHandler+0x36c>)
 8007b08:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7f9 fedd 	bl	80018d0 <HAL_DMA_Abort_IT>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 809c 	beq.w	8007c56 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8a4 	bl	8007c7c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007b34:	e08f      	b.n	8007c56 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fd6e 	bl	8007618 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f89d 	bl	8007c7c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007b42:	e088      	b.n	8007c56 <HAL_SAI_IRQHandler+0x35e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d067      	beq.n	8007c1e <HAL_SAI_IRQHandler+0x326>
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d062      	beq.n	8007c1e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2204      	movs	r2, #4
 8007b5e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b66:	f043 0220 	orr.w	r2, r3, #32
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d03c      	beq.n	8007bf4 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d018      	beq.n	8007bb6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b8a:	4a36      	ldr	r2, [pc, #216]	@ (8007c64 <HAL_SAI_IRQHandler+0x36c>)
 8007b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7f9 fe9b 	bl	80018d0 <HAL_DMA_Abort_IT>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ba6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f863 	bl	8007c7c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d04c      	beq.n	8007c5a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc6:	4a27      	ldr	r2, [pc, #156]	@ (8007c64 <HAL_SAI_IRQHandler+0x36c>)
 8007bc8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f9 fe7d 	bl	80018d0 <HAL_DMA_Abort_IT>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d03e      	beq.n	8007c5a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007be2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f845 	bl	8007c7c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007bf2:	e032      	b.n	8007c5a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295
 8007c04:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f830 	bl	8007c7c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c1c:	e01d      	b.n	8007c5a <HAL_SAI_IRQHandler+0x362>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d019      	beq.n	8007c5c <HAL_SAI_IRQHandler+0x364>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d014      	beq.n	8007c5c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2210      	movs	r2, #16
 8007c38:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c40:	f043 0210 	orr.w	r2, r3, #16
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f816 	bl	8007c7c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8007c50:	e004      	b.n	8007c5c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c52:	bf00      	nop
 8007c54:	e002      	b.n	8007c5c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c56:	bf00      	nop
 8007c58:	e000      	b.n	8007c5c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c5a:	bf00      	nop
}
 8007c5c:	bf00      	nop
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	080080a9 	.word	0x080080a9

08007c68 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <SAI_InitI2S+0x2e>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d103      	bne.n	8007cc6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cc4:	e002      	b.n	8007ccc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cda:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e077      	b.n	8007de6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d107      	bne.n	8007d0c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007d08:	665a      	str	r2, [r3, #100]	@ 0x64
 8007d0a:	e006      	b.n	8007d1a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d12:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d84f      	bhi.n	8007dc0 <SAI_InitI2S+0x130>
 8007d20:	a201      	add	r2, pc, #4	@ (adr r2, 8007d28 <SAI_InitI2S+0x98>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d5b 	.word	0x08007d5b
 8007d30:	08007d7d 	.word	0x08007d7d
 8007d34:	08007d9f 	.word	0x08007d9f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2280      	movs	r2, #128	@ 0x80
 8007d3c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	085b      	lsrs	r3, r3, #1
 8007d4c:	011a      	lsls	r2, r3, #4
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2240      	movs	r2, #64	@ 0x40
 8007d56:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007d58:	e035      	b.n	8007dc6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2280      	movs	r2, #128	@ 0x80
 8007d5e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	085b      	lsrs	r3, r3, #1
 8007d64:	019a      	lsls	r2, r3, #6
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	085b      	lsrs	r3, r3, #1
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2280      	movs	r2, #128	@ 0x80
 8007d78:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007d7a:	e024      	b.n	8007dc6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	22c0      	movs	r2, #192	@ 0xc0
 8007d80:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	019a      	lsls	r2, r3, #6
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2280      	movs	r2, #128	@ 0x80
 8007d9a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007d9c:	e013      	b.n	8007dc6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	22e0      	movs	r2, #224	@ 0xe0
 8007da2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	085b      	lsrs	r3, r3, #1
 8007da8:	019a      	lsls	r2, r3, #6
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	085b      	lsrs	r3, r3, #1
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2280      	movs	r2, #128	@ 0x80
 8007dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007dbe:	e002      	b.n	8007dc6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d10b      	bne.n	8007de4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d102      	bne.n	8007dd8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2210      	movs	r2, #16
 8007dd6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d102      	bne.n	8007de4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2208      	movs	r2, #8
 8007de2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop

08007df4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <SAI_InitPCM+0x2e>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d103      	bne.n	8007e2a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e28:	e002      	b.n	8007e30 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007e3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007e44:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e58:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d103      	bne.n	8007e68 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e66:	e002      	b.n	8007e6e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	220d      	movs	r2, #13
 8007e6c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d837      	bhi.n	8007ee4 <SAI_InitPCM+0xf0>
 8007e74:	a201      	add	r2, pc, #4	@ (adr r2, 8007e7c <SAI_InitPCM+0x88>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007e8d 	.word	0x08007e8d
 8007e80:	08007ea3 	.word	0x08007ea3
 8007e84:	08007eb9 	.word	0x08007eb9
 8007e88:	08007ecf 	.word	0x08007ecf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2280      	movs	r2, #128	@ 0x80
 8007e90:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	011a      	lsls	r2, r3, #4
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2240      	movs	r2, #64	@ 0x40
 8007e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007ea0:	e023      	b.n	8007eea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2280      	movs	r2, #128	@ 0x80
 8007ea6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2280      	movs	r2, #128	@ 0x80
 8007eb4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007eb6:	e018      	b.n	8007eea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	22c0      	movs	r2, #192	@ 0xc0
 8007ebc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2280      	movs	r2, #128	@ 0x80
 8007eca:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007ecc:	e00d      	b.n	8007eea <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	22e0      	movs	r2, #224	@ 0xe0
 8007ed2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2280      	movs	r2, #128	@ 0x80
 8007ee0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8007ee2:	e002      	b.n	8007eea <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee8:	bf00      	nop
  }

  return status;
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d103      	bne.n	8007f16 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f043 0308 	orr.w	r3, r3, #8
 8007f14:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1a:	2b08      	cmp	r3, #8
 8007f1c:	d10b      	bne.n	8007f36 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d003      	beq.n	8007f2e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d103      	bne.n	8007f36 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f043 0310 	orr.w	r3, r3, #16
 8007f34:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d003      	beq.n	8007f46 <SAI_InterruptFlag+0x4e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d104      	bne.n	8007f50 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	e003      	b.n	8007f58 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f043 0304 	orr.w	r3, r3, #4
 8007f56:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007f58:	68fb      	ldr	r3, [r7, #12]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007f70:	4b18      	ldr	r3, [pc, #96]	@ (8007fd4 <SAI_Disable+0x6c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a18      	ldr	r2, [pc, #96]	@ (8007fd8 <SAI_Disable+0x70>)
 8007f76:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7a:	0b1b      	lsrs	r3, r3, #12
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007f92:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	72fb      	strb	r3, [r7, #11]
      break;
 8007fae:	e009      	b.n	8007fc4 <SAI_Disable+0x5c>
    }
    count--;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e7      	bne.n	8007f94 <SAI_Disable+0x2c>

  return status;
 8007fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20000000 	.word	0x20000000
 8007fd8:	95cbec1b 	.word	0x95cbec1b

08007fdc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fee:	2b81      	cmp	r3, #129	@ 0x81
 8007ff0:	d01c      	beq.n	800802c <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008000:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800800a:	2100      	movs	r1, #0
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ff73 	bl	8007ef8 <SAI_InterruptFlag>
 8008012:	4603      	mov	r3, r0
 8008014:	43d9      	mvns	r1, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	400a      	ands	r2, r1
 8008022:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7f8 fb6b 	bl	8000708 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008046:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7ff fe0d 	bl	8007c68 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008062:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800806a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008082:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff ff6f 	bl	8007f68 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7ff fdee 	bl	8007c7c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80080a0:	bf00      	nop
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80080c4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f04f 32ff 	mov.w	r2, #4294967295
 80080d6:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d00a      	beq.n	80080f8 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff ff40 	bl	8007f68 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0208 	orr.w	r2, r2, #8
 80080f6:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff fdb7 	bl	8007c7c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e049      	b.n	80081bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d106      	bne.n	8008142 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f841 	bl	80081c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f000 fa57 	bl	8008608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d001      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e072      	b.n	80082d6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a35      	ldr	r2, [pc, #212]	@ (80082e4 <HAL_TIM_Base_Start_IT+0x10c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d040      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a34      	ldr	r2, [pc, #208]	@ (80082e8 <HAL_TIM_Base_Start_IT+0x110>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d03b      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008224:	d036      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800822e:	d031      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a2d      	ldr	r2, [pc, #180]	@ (80082ec <HAL_TIM_Base_Start_IT+0x114>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d02c      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a2c      	ldr	r2, [pc, #176]	@ (80082f0 <HAL_TIM_Base_Start_IT+0x118>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d027      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a2a      	ldr	r2, [pc, #168]	@ (80082f4 <HAL_TIM_Base_Start_IT+0x11c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d022      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a29      	ldr	r2, [pc, #164]	@ (80082f8 <HAL_TIM_Base_Start_IT+0x120>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d01d      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a27      	ldr	r2, [pc, #156]	@ (80082fc <HAL_TIM_Base_Start_IT+0x124>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d018      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a26      	ldr	r2, [pc, #152]	@ (8008300 <HAL_TIM_Base_Start_IT+0x128>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d013      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a24      	ldr	r2, [pc, #144]	@ (8008304 <HAL_TIM_Base_Start_IT+0x12c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00e      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a23      	ldr	r2, [pc, #140]	@ (8008308 <HAL_TIM_Base_Start_IT+0x130>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d009      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a21      	ldr	r2, [pc, #132]	@ (800830c <HAL_TIM_Base_Start_IT+0x134>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d004      	beq.n	8008294 <HAL_TIM_Base_Start_IT+0xbc>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a20      	ldr	r2, [pc, #128]	@ (8008310 <HAL_TIM_Base_Start_IT+0x138>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d115      	bne.n	80082c0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	4b1e      	ldr	r3, [pc, #120]	@ (8008314 <HAL_TIM_Base_Start_IT+0x13c>)
 800829c:	4013      	ands	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b06      	cmp	r3, #6
 80082a4:	d015      	beq.n	80082d2 <HAL_TIM_Base_Start_IT+0xfa>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ac:	d011      	beq.n	80082d2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0201 	orr.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082be:	e008      	b.n	80082d2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 0201 	orr.w	r2, r2, #1
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	e000      	b.n	80082d4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	40012c00 	.word	0x40012c00
 80082e8:	50012c00 	.word	0x50012c00
 80082ec:	40000400 	.word	0x40000400
 80082f0:	50000400 	.word	0x50000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	50000800 	.word	0x50000800
 80082fc:	40000c00 	.word	0x40000c00
 8008300:	50000c00 	.word	0x50000c00
 8008304:	40013400 	.word	0x40013400
 8008308:	50013400 	.word	0x50013400
 800830c:	40014000 	.word	0x40014000
 8008310:	50014000 	.word	0x50014000
 8008314:	00010007 	.word	0x00010007

08008318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d020      	beq.n	800837c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01b      	beq.n	800837c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f06f 0202 	mvn.w	r2, #2
 800834c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f931 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 8008368:	e005      	b.n	8008376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f923 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f934 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d020      	beq.n	80083c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01b      	beq.n	80083c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f06f 0204 	mvn.w	r2, #4
 8008398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f90b 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 80083b4:	e005      	b.n	80083c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f8fd 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f90e 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d020      	beq.n	8008414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01b      	beq.n	8008414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0208 	mvn.w	r2, #8
 80083e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2204      	movs	r2, #4
 80083ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f8e5 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8d7 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f8e8 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f003 0310 	and.w	r3, r3, #16
 800841a:	2b00      	cmp	r3, #0
 800841c:	d020      	beq.n	8008460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01b      	beq.n	8008460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f06f 0210 	mvn.w	r2, #16
 8008430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2208      	movs	r2, #8
 8008436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f8bf 	bl	80085ca <HAL_TIM_IC_CaptureCallback>
 800844c:	e005      	b.n	800845a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f8b1 	bl	80085b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f8c2 	bl	80085de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d007      	beq.n	8008484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f06f 0201 	mvn.w	r2, #1
 800847c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7f8 fa3c 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800848a:	2b00      	cmp	r3, #0
 800848c:	d104      	bne.n	8008498 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00c      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d007      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80084aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f9b5 	bl	800881c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00c      	beq.n	80084d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d007      	beq.n	80084d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80084ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f9ad 	bl	8008830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00c      	beq.n	80084fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d007      	beq.n	80084fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80084f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f87c 	bl	80085f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00c      	beq.n	800851e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d007      	beq.n	800851e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f06f 0220 	mvn.w	r2, #32
 8008516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f975 	bl	8008808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00c      	beq.n	8008542 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d007      	beq.n	8008542 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800853a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f981 	bl	8008844 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00c      	beq.n	8008566 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d007      	beq.n	8008566 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800855e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f979 	bl	8008858 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00c      	beq.n	800858a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d007      	beq.n	800858a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f971 	bl	800886c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00c      	beq.n	80085ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d007      	beq.n	80085ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80085a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f969 	bl	8008880 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a6b      	ldr	r2, [pc, #428]	@ (80087c8 <TIM_Base_SetConfig+0x1c0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d02b      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a6a      	ldr	r2, [pc, #424]	@ (80087cc <TIM_Base_SetConfig+0x1c4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d027      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800862e:	d023      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008636:	d01f      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a65      	ldr	r2, [pc, #404]	@ (80087d0 <TIM_Base_SetConfig+0x1c8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d01b      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a64      	ldr	r2, [pc, #400]	@ (80087d4 <TIM_Base_SetConfig+0x1cc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d017      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a63      	ldr	r2, [pc, #396]	@ (80087d8 <TIM_Base_SetConfig+0x1d0>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d013      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a62      	ldr	r2, [pc, #392]	@ (80087dc <TIM_Base_SetConfig+0x1d4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00f      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a61      	ldr	r2, [pc, #388]	@ (80087e0 <TIM_Base_SetConfig+0x1d8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00b      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a60      	ldr	r2, [pc, #384]	@ (80087e4 <TIM_Base_SetConfig+0x1dc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d007      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a5f      	ldr	r2, [pc, #380]	@ (80087e8 <TIM_Base_SetConfig+0x1e0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d003      	beq.n	8008678 <TIM_Base_SetConfig+0x70>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a5e      	ldr	r2, [pc, #376]	@ (80087ec <TIM_Base_SetConfig+0x1e4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d108      	bne.n	800868a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a4e      	ldr	r2, [pc, #312]	@ (80087c8 <TIM_Base_SetConfig+0x1c0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d043      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a4d      	ldr	r2, [pc, #308]	@ (80087cc <TIM_Base_SetConfig+0x1c4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d03f      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a0:	d03b      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086a8:	d037      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a48      	ldr	r2, [pc, #288]	@ (80087d0 <TIM_Base_SetConfig+0x1c8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d033      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a47      	ldr	r2, [pc, #284]	@ (80087d4 <TIM_Base_SetConfig+0x1cc>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d02f      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a46      	ldr	r2, [pc, #280]	@ (80087d8 <TIM_Base_SetConfig+0x1d0>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d02b      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a45      	ldr	r2, [pc, #276]	@ (80087dc <TIM_Base_SetConfig+0x1d4>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d027      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a44      	ldr	r2, [pc, #272]	@ (80087e0 <TIM_Base_SetConfig+0x1d8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d023      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a43      	ldr	r2, [pc, #268]	@ (80087e4 <TIM_Base_SetConfig+0x1dc>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01f      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a42      	ldr	r2, [pc, #264]	@ (80087e8 <TIM_Base_SetConfig+0x1e0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01b      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a41      	ldr	r2, [pc, #260]	@ (80087ec <TIM_Base_SetConfig+0x1e4>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d017      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a40      	ldr	r2, [pc, #256]	@ (80087f0 <TIM_Base_SetConfig+0x1e8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d013      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a3f      	ldr	r2, [pc, #252]	@ (80087f4 <TIM_Base_SetConfig+0x1ec>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00f      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a3e      	ldr	r2, [pc, #248]	@ (80087f8 <TIM_Base_SetConfig+0x1f0>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00b      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a3d      	ldr	r2, [pc, #244]	@ (80087fc <TIM_Base_SetConfig+0x1f4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d007      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a3c      	ldr	r2, [pc, #240]	@ (8008800 <TIM_Base_SetConfig+0x1f8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d003      	beq.n	800871a <TIM_Base_SetConfig+0x112>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a3b      	ldr	r2, [pc, #236]	@ (8008804 <TIM_Base_SetConfig+0x1fc>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d108      	bne.n	800872c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a1e      	ldr	r2, [pc, #120]	@ (80087c8 <TIM_Base_SetConfig+0x1c0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d023      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a1d      	ldr	r2, [pc, #116]	@ (80087cc <TIM_Base_SetConfig+0x1c4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d01f      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a22      	ldr	r2, [pc, #136]	@ (80087e8 <TIM_Base_SetConfig+0x1e0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01b      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a21      	ldr	r2, [pc, #132]	@ (80087ec <TIM_Base_SetConfig+0x1e4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d017      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a20      	ldr	r2, [pc, #128]	@ (80087f0 <TIM_Base_SetConfig+0x1e8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a1f      	ldr	r2, [pc, #124]	@ (80087f4 <TIM_Base_SetConfig+0x1ec>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00f      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1e      	ldr	r2, [pc, #120]	@ (80087f8 <TIM_Base_SetConfig+0x1f0>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00b      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1d      	ldr	r2, [pc, #116]	@ (80087fc <TIM_Base_SetConfig+0x1f4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d007      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1c      	ldr	r2, [pc, #112]	@ (8008800 <TIM_Base_SetConfig+0x1f8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d003      	beq.n	800879a <TIM_Base_SetConfig+0x192>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a1b      	ldr	r2, [pc, #108]	@ (8008804 <TIM_Base_SetConfig+0x1fc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d103      	bne.n	80087a2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	691a      	ldr	r2, [r3, #16]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f043 0204 	orr.w	r2, r3, #4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	601a      	str	r2, [r3, #0]
}
 80087ba:	bf00      	nop
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	50012c00 	.word	0x50012c00
 80087d0:	40000400 	.word	0x40000400
 80087d4:	50000400 	.word	0x50000400
 80087d8:	40000800 	.word	0x40000800
 80087dc:	50000800 	.word	0x50000800
 80087e0:	40000c00 	.word	0x40000c00
 80087e4:	50000c00 	.word	0x50000c00
 80087e8:	40013400 	.word	0x40013400
 80087ec:	50013400 	.word	0x50013400
 80087f0:	40014000 	.word	0x40014000
 80087f4:	50014000 	.word	0x50014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	50014400 	.word	0x50014400
 8008800:	40014800 	.word	0x40014800
 8008804:	50014800 	.word	0x50014800

08008808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e042      	b.n	800892c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d106      	bne.n	80088be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f83b 	bl	8008934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2224      	movs	r2, #36	@ 0x24
 80088c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0201 	bic.w	r2, r2, #1
 80088d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f9d4 	bl	8008c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f82f 	bl	8008948 <UART_SetConfig>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e01b      	b.n	800892c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fa53 	bl	8008dd0 <UART_CheckIdleState>
 800892a:	4603      	mov	r3, r0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800894c:	b094      	sub	sp, #80	@ 0x50
 800894e:	af00      	add	r7, sp, #0
 8008950:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b58 <UART_SetConfig+0x210>)
 800895e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	431a      	orrs	r2, r3
 800896a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	431a      	orrs	r2, r3
 8008970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	4313      	orrs	r3, r2
 8008976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4977      	ldr	r1, [pc, #476]	@ (8008b5c <UART_SetConfig+0x214>)
 8008980:	4019      	ands	r1, r3
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008988:	430b      	orrs	r3, r1
 800898a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008998:	68d9      	ldr	r1, [r3, #12]
 800899a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	ea40 0301 	orr.w	r3, r0, r1
 80089a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4b6a      	ldr	r3, [pc, #424]	@ (8008b58 <UART_SetConfig+0x210>)
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d009      	beq.n	80089c8 <UART_SetConfig+0x80>
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b69      	ldr	r3, [pc, #420]	@ (8008b60 <UART_SetConfig+0x218>)
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d004      	beq.n	80089c8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c0:	6a1a      	ldr	r2, [r3, #32]
 80089c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089c4:	4313      	orrs	r3, r2
 80089c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80089d2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80089d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089dc:	430b      	orrs	r3, r1
 80089de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e6:	f023 000f 	bic.w	r0, r3, #15
 80089ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80089ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	ea40 0301 	orr.w	r3, r0, r1
 80089f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	4b59      	ldr	r3, [pc, #356]	@ (8008b64 <UART_SetConfig+0x21c>)
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d102      	bne.n	8008a08 <UART_SetConfig+0xc0>
 8008a02:	2301      	movs	r3, #1
 8008a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a06:	e029      	b.n	8008a5c <UART_SetConfig+0x114>
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	4b56      	ldr	r3, [pc, #344]	@ (8008b68 <UART_SetConfig+0x220>)
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d102      	bne.n	8008a18 <UART_SetConfig+0xd0>
 8008a12:	2302      	movs	r3, #2
 8008a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a16:	e021      	b.n	8008a5c <UART_SetConfig+0x114>
 8008a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	4b53      	ldr	r3, [pc, #332]	@ (8008b6c <UART_SetConfig+0x224>)
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d102      	bne.n	8008a28 <UART_SetConfig+0xe0>
 8008a22:	2304      	movs	r3, #4
 8008a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a26:	e019      	b.n	8008a5c <UART_SetConfig+0x114>
 8008a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	4b50      	ldr	r3, [pc, #320]	@ (8008b70 <UART_SetConfig+0x228>)
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d102      	bne.n	8008a38 <UART_SetConfig+0xf0>
 8008a32:	2308      	movs	r3, #8
 8008a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a36:	e011      	b.n	8008a5c <UART_SetConfig+0x114>
 8008a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008b74 <UART_SetConfig+0x22c>)
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d102      	bne.n	8008a48 <UART_SetConfig+0x100>
 8008a42:	2310      	movs	r3, #16
 8008a44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a46:	e009      	b.n	8008a5c <UART_SetConfig+0x114>
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	4b42      	ldr	r3, [pc, #264]	@ (8008b58 <UART_SetConfig+0x210>)
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d102      	bne.n	8008a58 <UART_SetConfig+0x110>
 8008a52:	2320      	movs	r3, #32
 8008a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a56:	e001      	b.n	8008a5c <UART_SetConfig+0x114>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4b3d      	ldr	r3, [pc, #244]	@ (8008b58 <UART_SetConfig+0x210>)
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d005      	beq.n	8008a72 <UART_SetConfig+0x12a>
 8008a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8008b60 <UART_SetConfig+0x218>)
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	f040 8085 	bne.w	8008b7c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a74:	2200      	movs	r2, #0
 8008a76:	623b      	str	r3, [r7, #32]
 8008a78:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a7e:	f7fd f8cf 	bl	8005c20 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a82:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 80e8 	beq.w	8008c5c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a90:	4a39      	ldr	r2, [pc, #228]	@ (8008b78 <UART_SetConfig+0x230>)
 8008a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	4413      	add	r3, r2
 8008aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d305      	bcc.n	8008abc <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d903      	bls.n	8008ac4 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ac2:	e048      	b.n	8008b56 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	61fa      	str	r2, [r7, #28]
 8008acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad0:	4a29      	ldr	r2, [pc, #164]	@ (8008b78 <UART_SetConfig+0x230>)
 8008ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	617a      	str	r2, [r7, #20]
 8008ade:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ae2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ae6:	f7f7 fbc7 	bl	8000278 <__aeabi_uldivmod>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4610      	mov	r0, r2
 8008af0:	4619      	mov	r1, r3
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	020b      	lsls	r3, r1, #8
 8008afc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b00:	0202      	lsls	r2, r0, #8
 8008b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b04:	6849      	ldr	r1, [r1, #4]
 8008b06:	0849      	lsrs	r1, r1, #1
 8008b08:	2000      	movs	r0, #0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	eb12 0804 	adds.w	r8, r2, r4
 8008b12:	eb43 0905 	adc.w	r9, r3, r5
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	60fa      	str	r2, [r7, #12]
 8008b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b24:	4640      	mov	r0, r8
 8008b26:	4649      	mov	r1, r9
 8008b28:	f7f7 fba6 	bl	8000278 <__aeabi_uldivmod>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4613      	mov	r3, r2
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b3a:	d308      	bcc.n	8008b4e <UART_SetConfig+0x206>
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b42:	d204      	bcs.n	8008b4e <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b4a:	60da      	str	r2, [r3, #12]
 8008b4c:	e003      	b.n	8008b56 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008b54:	e082      	b.n	8008c5c <UART_SetConfig+0x314>
 8008b56:	e081      	b.n	8008c5c <UART_SetConfig+0x314>
 8008b58:	46002400 	.word	0x46002400
 8008b5c:	cfff69f3 	.word	0xcfff69f3
 8008b60:	56002400 	.word	0x56002400
 8008b64:	40013800 	.word	0x40013800
 8008b68:	40004400 	.word	0x40004400
 8008b6c:	40004800 	.word	0x40004800
 8008b70:	40004c00 	.word	0x40004c00
 8008b74:	40005000 	.word	0x40005000
 8008b78:	08009b38 	.word	0x08009b38
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b84:	d13c      	bne.n	8008c00 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b88:	2200      	movs	r2, #0
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b92:	f7fd f845 	bl	8005c20 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b96:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d05e      	beq.n	8008c5c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba2:	4a39      	ldr	r2, [pc, #228]	@ (8008c88 <UART_SetConfig+0x340>)
 8008ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb0:	005a      	lsls	r2, r3, #1
 8008bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	085b      	lsrs	r3, r3, #1
 8008bb8:	441a      	add	r2, r3
 8008bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc6:	2b0f      	cmp	r3, #15
 8008bc8:	d916      	bls.n	8008bf8 <UART_SetConfig+0x2b0>
 8008bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bd0:	d212      	bcs.n	8008bf8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	f023 030f 	bic.w	r3, r3, #15
 8008bda:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008bea:	4313      	orrs	r3, r2
 8008bec:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008bf4:	60da      	str	r2, [r3, #12]
 8008bf6:	e031      	b.n	8008c5c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008bfe:	e02d      	b.n	8008c5c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c02:	2200      	movs	r2, #0
 8008c04:	469a      	mov	sl, r3
 8008c06:	4693      	mov	fp, r2
 8008c08:	4650      	mov	r0, sl
 8008c0a:	4659      	mov	r1, fp
 8008c0c:	f7fd f808 	bl	8005c20 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c10:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d021      	beq.n	8008c5c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8008c88 <UART_SetConfig+0x340>)
 8008c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c22:	461a      	mov	r2, r3
 8008c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	441a      	add	r2, r3
 8008c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3e:	2b0f      	cmp	r3, #15
 8008c40:	d909      	bls.n	8008c56 <UART_SetConfig+0x30e>
 8008c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c48:	d205      	bcs.n	8008c56 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60da      	str	r2, [r3, #12]
 8008c54:	e002      	b.n	8008c5c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c66:	2201      	movs	r2, #1
 8008c68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6e:	2200      	movs	r2, #0
 8008c70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	2200      	movs	r2, #0
 8008c76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3750      	adds	r7, #80	@ 0x50
 8008c80:	46bd      	mov	sp, r7
 8008c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c86:	bf00      	nop
 8008c88:	08009b38 	.word	0x08009b38

08008c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	f003 0308 	and.w	r3, r3, #8
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfe:	f003 0304 	and.w	r3, r3, #4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01a      	beq.n	8008da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d8a:	d10a      	bne.n	8008da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00a      	beq.n	8008dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	605a      	str	r2, [r3, #4]
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b098      	sub	sp, #96	@ 0x60
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008de0:	f7f8 fb32 	bl	8001448 <HAL_GetTick>
 8008de4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d12f      	bne.n	8008e54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008df4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f88e 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d022      	beq.n	8008e54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e22:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e6      	bne.n	8008e0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e063      	b.n	8008f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d149      	bne.n	8008ef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f857 	bl	8008f24 <UART_WaitOnFlagUntilTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d03c      	beq.n	8008ef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	623b      	str	r3, [r7, #32]
   return(result);
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e6      	bne.n	8008e7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f023 0301 	bic.w	r3, r3, #1
 8008ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ece:	61fa      	str	r2, [r7, #28]
 8008ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	69b9      	ldr	r1, [r7, #24]
 8008ed4:	69fa      	ldr	r2, [r7, #28]
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	617b      	str	r3, [r7, #20]
   return(result);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e5      	bne.n	8008eae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e012      	b.n	8008f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3758      	adds	r7, #88	@ 0x58
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f34:	e04f      	b.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3c:	d04b      	beq.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3e:	f7f8 fa83 	bl	8001448 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d302      	bcc.n	8008f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e04e      	b.n	8008ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0304 	and.w	r3, r3, #4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d037      	beq.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b80      	cmp	r3, #128	@ 0x80
 8008f6a:	d034      	beq.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b40      	cmp	r3, #64	@ 0x40
 8008f70:	d031      	beq.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	f003 0308 	and.w	r3, r3, #8
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d110      	bne.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2208      	movs	r2, #8
 8008f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f838 	bl	8008ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2208      	movs	r2, #8
 8008f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e029      	b.n	8008ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fb0:	d111      	bne.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f81e 	bl	8008ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e00f      	b.n	8008ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	bf0c      	ite	eq
 8008fe6:	2301      	moveq	r3, #1
 8008fe8:	2300      	movne	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d0a0      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b095      	sub	sp, #84	@ 0x54
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800901a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009024:	643b      	str	r3, [r7, #64]	@ 0x40
 8009026:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800902a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e6      	bne.n	8009006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3308      	adds	r3, #8
 800903e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	61fb      	str	r3, [r7, #28]
   return(result);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800904e:	f023 0301 	bic.w	r3, r3, #1
 8009052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3308      	adds	r3, #8
 800905a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800905c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800905e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e3      	bne.n	8009038 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009074:	2b01      	cmp	r3, #1
 8009076:	d118      	bne.n	80090aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	60bb      	str	r3, [r7, #8]
   return(result);
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f023 0310 	bic.w	r3, r3, #16
 800908c:	647b      	str	r3, [r7, #68]	@ 0x44
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009096:	61bb      	str	r3, [r7, #24]
 8009098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6979      	ldr	r1, [r7, #20]
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	613b      	str	r3, [r7, #16]
   return(result);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80090be:	bf00      	nop
 80090c0:	3754      	adds	r7, #84	@ 0x54
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
	...

080090cc <std>:
 80090cc:	2300      	movs	r3, #0
 80090ce:	b510      	push	{r4, lr}
 80090d0:	4604      	mov	r4, r0
 80090d2:	6083      	str	r3, [r0, #8]
 80090d4:	8181      	strh	r1, [r0, #12]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6643      	str	r3, [r0, #100]	@ 0x64
 80090da:	81c2      	strh	r2, [r0, #14]
 80090dc:	2208      	movs	r2, #8
 80090de:	6183      	str	r3, [r0, #24]
 80090e0:	e9c0 3300 	strd	r3, r3, [r0]
 80090e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090e8:	305c      	adds	r0, #92	@ 0x5c
 80090ea:	f000 f9e7 	bl	80094bc <memset>
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <std+0x58>)
 80090f0:	6224      	str	r4, [r4, #32]
 80090f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80090f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009128 <std+0x5c>)
 80090f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090f8:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <std+0x60>)
 80090fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <std+0x64>)
 80090fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8009100:	4b0c      	ldr	r3, [pc, #48]	@ (8009134 <std+0x68>)
 8009102:	429c      	cmp	r4, r3
 8009104:	d006      	beq.n	8009114 <std+0x48>
 8009106:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800910a:	4294      	cmp	r4, r2
 800910c:	d002      	beq.n	8009114 <std+0x48>
 800910e:	33d0      	adds	r3, #208	@ 0xd0
 8009110:	429c      	cmp	r4, r3
 8009112:	d105      	bne.n	8009120 <std+0x54>
 8009114:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800911c:	f000 ba46 	b.w	80095ac <__retarget_lock_init_recursive>
 8009120:	bd10      	pop	{r4, pc}
 8009122:	bf00      	nop
 8009124:	0800930d 	.word	0x0800930d
 8009128:	0800932f 	.word	0x0800932f
 800912c:	08009367 	.word	0x08009367
 8009130:	0800938b 	.word	0x0800938b
 8009134:	20000304 	.word	0x20000304

08009138 <stdio_exit_handler>:
 8009138:	4a02      	ldr	r2, [pc, #8]	@ (8009144 <stdio_exit_handler+0xc>)
 800913a:	4903      	ldr	r1, [pc, #12]	@ (8009148 <stdio_exit_handler+0x10>)
 800913c:	4803      	ldr	r0, [pc, #12]	@ (800914c <stdio_exit_handler+0x14>)
 800913e:	f000 b869 	b.w	8009214 <_fwalk_sglue>
 8009142:	bf00      	nop
 8009144:	20000028 	.word	0x20000028
 8009148:	080098ad 	.word	0x080098ad
 800914c:	20000038 	.word	0x20000038

08009150 <cleanup_stdio>:
 8009150:	6841      	ldr	r1, [r0, #4]
 8009152:	4b0c      	ldr	r3, [pc, #48]	@ (8009184 <cleanup_stdio+0x34>)
 8009154:	4299      	cmp	r1, r3
 8009156:	b510      	push	{r4, lr}
 8009158:	4604      	mov	r4, r0
 800915a:	d001      	beq.n	8009160 <cleanup_stdio+0x10>
 800915c:	f000 fba6 	bl	80098ac <_fflush_r>
 8009160:	68a1      	ldr	r1, [r4, #8]
 8009162:	4b09      	ldr	r3, [pc, #36]	@ (8009188 <cleanup_stdio+0x38>)
 8009164:	4299      	cmp	r1, r3
 8009166:	d002      	beq.n	800916e <cleanup_stdio+0x1e>
 8009168:	4620      	mov	r0, r4
 800916a:	f000 fb9f 	bl	80098ac <_fflush_r>
 800916e:	68e1      	ldr	r1, [r4, #12]
 8009170:	4b06      	ldr	r3, [pc, #24]	@ (800918c <cleanup_stdio+0x3c>)
 8009172:	4299      	cmp	r1, r3
 8009174:	d004      	beq.n	8009180 <cleanup_stdio+0x30>
 8009176:	4620      	mov	r0, r4
 8009178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800917c:	f000 bb96 	b.w	80098ac <_fflush_r>
 8009180:	bd10      	pop	{r4, pc}
 8009182:	bf00      	nop
 8009184:	20000304 	.word	0x20000304
 8009188:	2000036c 	.word	0x2000036c
 800918c:	200003d4 	.word	0x200003d4

08009190 <global_stdio_init.part.0>:
 8009190:	b510      	push	{r4, lr}
 8009192:	4b0b      	ldr	r3, [pc, #44]	@ (80091c0 <global_stdio_init.part.0+0x30>)
 8009194:	2104      	movs	r1, #4
 8009196:	4c0b      	ldr	r4, [pc, #44]	@ (80091c4 <global_stdio_init.part.0+0x34>)
 8009198:	4a0b      	ldr	r2, [pc, #44]	@ (80091c8 <global_stdio_init.part.0+0x38>)
 800919a:	4620      	mov	r0, r4
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	2200      	movs	r2, #0
 80091a0:	f7ff ff94 	bl	80090cc <std>
 80091a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091a8:	2201      	movs	r2, #1
 80091aa:	2109      	movs	r1, #9
 80091ac:	f7ff ff8e 	bl	80090cc <std>
 80091b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091b4:	2202      	movs	r2, #2
 80091b6:	2112      	movs	r1, #18
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	f7ff bf86 	b.w	80090cc <std>
 80091c0:	2000043c 	.word	0x2000043c
 80091c4:	20000304 	.word	0x20000304
 80091c8:	08009139 	.word	0x08009139

080091cc <__sfp_lock_acquire>:
 80091cc:	4801      	ldr	r0, [pc, #4]	@ (80091d4 <__sfp_lock_acquire+0x8>)
 80091ce:	f000 b9ee 	b.w	80095ae <__retarget_lock_acquire_recursive>
 80091d2:	bf00      	nop
 80091d4:	20000445 	.word	0x20000445

080091d8 <__sfp_lock_release>:
 80091d8:	4801      	ldr	r0, [pc, #4]	@ (80091e0 <__sfp_lock_release+0x8>)
 80091da:	f000 b9e9 	b.w	80095b0 <__retarget_lock_release_recursive>
 80091de:	bf00      	nop
 80091e0:	20000445 	.word	0x20000445

080091e4 <__sinit>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	f7ff fff0 	bl	80091cc <__sfp_lock_acquire>
 80091ec:	6a23      	ldr	r3, [r4, #32]
 80091ee:	b11b      	cbz	r3, 80091f8 <__sinit+0x14>
 80091f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f4:	f7ff bff0 	b.w	80091d8 <__sfp_lock_release>
 80091f8:	4b04      	ldr	r3, [pc, #16]	@ (800920c <__sinit+0x28>)
 80091fa:	6223      	str	r3, [r4, #32]
 80091fc:	4b04      	ldr	r3, [pc, #16]	@ (8009210 <__sinit+0x2c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f5      	bne.n	80091f0 <__sinit+0xc>
 8009204:	f7ff ffc4 	bl	8009190 <global_stdio_init.part.0>
 8009208:	e7f2      	b.n	80091f0 <__sinit+0xc>
 800920a:	bf00      	nop
 800920c:	08009151 	.word	0x08009151
 8009210:	2000043c 	.word	0x2000043c

08009214 <_fwalk_sglue>:
 8009214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009218:	4607      	mov	r7, r0
 800921a:	4688      	mov	r8, r1
 800921c:	4614      	mov	r4, r2
 800921e:	2600      	movs	r6, #0
 8009220:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009224:	f1b9 0901 	subs.w	r9, r9, #1
 8009228:	d505      	bpl.n	8009236 <_fwalk_sglue+0x22>
 800922a:	6824      	ldr	r4, [r4, #0]
 800922c:	2c00      	cmp	r4, #0
 800922e:	d1f7      	bne.n	8009220 <_fwalk_sglue+0xc>
 8009230:	4630      	mov	r0, r6
 8009232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009236:	89ab      	ldrh	r3, [r5, #12]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d907      	bls.n	800924c <_fwalk_sglue+0x38>
 800923c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009240:	3301      	adds	r3, #1
 8009242:	d003      	beq.n	800924c <_fwalk_sglue+0x38>
 8009244:	4629      	mov	r1, r5
 8009246:	4638      	mov	r0, r7
 8009248:	47c0      	blx	r8
 800924a:	4306      	orrs	r6, r0
 800924c:	3568      	adds	r5, #104	@ 0x68
 800924e:	e7e9      	b.n	8009224 <_fwalk_sglue+0x10>

08009250 <_puts_r>:
 8009250:	6a03      	ldr	r3, [r0, #32]
 8009252:	b570      	push	{r4, r5, r6, lr}
 8009254:	4605      	mov	r5, r0
 8009256:	460e      	mov	r6, r1
 8009258:	6884      	ldr	r4, [r0, #8]
 800925a:	b90b      	cbnz	r3, 8009260 <_puts_r+0x10>
 800925c:	f7ff ffc2 	bl	80091e4 <__sinit>
 8009260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009262:	07db      	lsls	r3, r3, #31
 8009264:	d405      	bmi.n	8009272 <_puts_r+0x22>
 8009266:	89a3      	ldrh	r3, [r4, #12]
 8009268:	0598      	lsls	r0, r3, #22
 800926a:	d402      	bmi.n	8009272 <_puts_r+0x22>
 800926c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800926e:	f000 f99e 	bl	80095ae <__retarget_lock_acquire_recursive>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	0719      	lsls	r1, r3, #28
 8009276:	d502      	bpl.n	800927e <_puts_r+0x2e>
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d135      	bne.n	80092ea <_puts_r+0x9a>
 800927e:	4621      	mov	r1, r4
 8009280:	4628      	mov	r0, r5
 8009282:	f000 f8c5 	bl	8009410 <__swsetup_r>
 8009286:	b380      	cbz	r0, 80092ea <_puts_r+0x9a>
 8009288:	f04f 35ff 	mov.w	r5, #4294967295
 800928c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800928e:	07da      	lsls	r2, r3, #31
 8009290:	d405      	bmi.n	800929e <_puts_r+0x4e>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	059b      	lsls	r3, r3, #22
 8009296:	d402      	bmi.n	800929e <_puts_r+0x4e>
 8009298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800929a:	f000 f989 	bl	80095b0 <__retarget_lock_release_recursive>
 800929e:	4628      	mov	r0, r5
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da04      	bge.n	80092b0 <_puts_r+0x60>
 80092a6:	69a2      	ldr	r2, [r4, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	dc17      	bgt.n	80092dc <_puts_r+0x8c>
 80092ac:	290a      	cmp	r1, #10
 80092ae:	d015      	beq.n	80092dc <_puts_r+0x8c>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	6022      	str	r2, [r4, #0]
 80092b6:	7019      	strb	r1, [r3, #0]
 80092b8:	68a3      	ldr	r3, [r4, #8]
 80092ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092be:	3b01      	subs	r3, #1
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	2900      	cmp	r1, #0
 80092c4:	d1ed      	bne.n	80092a2 <_puts_r+0x52>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	da11      	bge.n	80092ee <_puts_r+0x9e>
 80092ca:	4622      	mov	r2, r4
 80092cc:	210a      	movs	r1, #10
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 f85f 	bl	8009392 <__swbuf_r>
 80092d4:	3001      	adds	r0, #1
 80092d6:	d0d7      	beq.n	8009288 <_puts_r+0x38>
 80092d8:	250a      	movs	r5, #10
 80092da:	e7d7      	b.n	800928c <_puts_r+0x3c>
 80092dc:	4622      	mov	r2, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 f857 	bl	8009392 <__swbuf_r>
 80092e4:	3001      	adds	r0, #1
 80092e6:	d1e7      	bne.n	80092b8 <_puts_r+0x68>
 80092e8:	e7ce      	b.n	8009288 <_puts_r+0x38>
 80092ea:	3e01      	subs	r6, #1
 80092ec:	e7e4      	b.n	80092b8 <_puts_r+0x68>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	6022      	str	r2, [r4, #0]
 80092f4:	220a      	movs	r2, #10
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	e7ee      	b.n	80092d8 <_puts_r+0x88>
	...

080092fc <puts>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	@ (8009308 <puts+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	f7ff bfa5 	b.w	8009250 <_puts_r>
 8009306:	bf00      	nop
 8009308:	20000034 	.word	0x20000034

0800930c <__sread>:
 800930c:	b510      	push	{r4, lr}
 800930e:	460c      	mov	r4, r1
 8009310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009314:	f000 f8fc 	bl	8009510 <_read_r>
 8009318:	2800      	cmp	r0, #0
 800931a:	bfab      	itete	ge
 800931c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800931e:	89a3      	ldrhlt	r3, [r4, #12]
 8009320:	181b      	addge	r3, r3, r0
 8009322:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009326:	bfac      	ite	ge
 8009328:	6563      	strge	r3, [r4, #84]	@ 0x54
 800932a:	81a3      	strhlt	r3, [r4, #12]
 800932c:	bd10      	pop	{r4, pc}

0800932e <__swrite>:
 800932e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009332:	461f      	mov	r7, r3
 8009334:	898b      	ldrh	r3, [r1, #12]
 8009336:	4605      	mov	r5, r0
 8009338:	460c      	mov	r4, r1
 800933a:	05db      	lsls	r3, r3, #23
 800933c:	4616      	mov	r6, r2
 800933e:	d505      	bpl.n	800934c <__swrite+0x1e>
 8009340:	2302      	movs	r3, #2
 8009342:	2200      	movs	r2, #0
 8009344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009348:	f000 f8d0 	bl	80094ec <_lseek_r>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	4632      	mov	r2, r6
 8009350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009354:	4628      	mov	r0, r5
 8009356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	463b      	mov	r3, r7
 800935e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009362:	f000 b8e7 	b.w	8009534 <_write_r>

08009366 <__sseek>:
 8009366:	b510      	push	{r4, lr}
 8009368:	460c      	mov	r4, r1
 800936a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936e:	f000 f8bd 	bl	80094ec <_lseek_r>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	bf15      	itete	ne
 8009378:	6560      	strne	r0, [r4, #84]	@ 0x54
 800937a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800937e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009382:	81a3      	strheq	r3, [r4, #12]
 8009384:	bf18      	it	ne
 8009386:	81a3      	strhne	r3, [r4, #12]
 8009388:	bd10      	pop	{r4, pc}

0800938a <__sclose>:
 800938a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938e:	f000 b89d 	b.w	80094cc <_close_r>

08009392 <__swbuf_r>:
 8009392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009394:	460e      	mov	r6, r1
 8009396:	4614      	mov	r4, r2
 8009398:	4605      	mov	r5, r0
 800939a:	b118      	cbz	r0, 80093a4 <__swbuf_r+0x12>
 800939c:	6a03      	ldr	r3, [r0, #32]
 800939e:	b90b      	cbnz	r3, 80093a4 <__swbuf_r+0x12>
 80093a0:	f7ff ff20 	bl	80091e4 <__sinit>
 80093a4:	69a3      	ldr	r3, [r4, #24]
 80093a6:	60a3      	str	r3, [r4, #8]
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	071a      	lsls	r2, r3, #28
 80093ac:	d501      	bpl.n	80093b2 <__swbuf_r+0x20>
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	b943      	cbnz	r3, 80093c4 <__swbuf_r+0x32>
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 f82b 	bl	8009410 <__swsetup_r>
 80093ba:	b118      	cbz	r0, 80093c4 <__swbuf_r+0x32>
 80093bc:	f04f 37ff 	mov.w	r7, #4294967295
 80093c0:	4638      	mov	r0, r7
 80093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	b2f6      	uxtb	r6, r6
 80093c8:	6922      	ldr	r2, [r4, #16]
 80093ca:	4637      	mov	r7, r6
 80093cc:	1a98      	subs	r0, r3, r2
 80093ce:	6963      	ldr	r3, [r4, #20]
 80093d0:	4283      	cmp	r3, r0
 80093d2:	dc05      	bgt.n	80093e0 <__swbuf_r+0x4e>
 80093d4:	4621      	mov	r1, r4
 80093d6:	4628      	mov	r0, r5
 80093d8:	f000 fa68 	bl	80098ac <_fflush_r>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d1ed      	bne.n	80093bc <__swbuf_r+0x2a>
 80093e0:	68a3      	ldr	r3, [r4, #8]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	60a3      	str	r3, [r4, #8]
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	6022      	str	r2, [r4, #0]
 80093ec:	701e      	strb	r6, [r3, #0]
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	6962      	ldr	r2, [r4, #20]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d004      	beq.n	8009400 <__swbuf_r+0x6e>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	07db      	lsls	r3, r3, #31
 80093fa:	d5e1      	bpl.n	80093c0 <__swbuf_r+0x2e>
 80093fc:	2e0a      	cmp	r6, #10
 80093fe:	d1df      	bne.n	80093c0 <__swbuf_r+0x2e>
 8009400:	4621      	mov	r1, r4
 8009402:	4628      	mov	r0, r5
 8009404:	f000 fa52 	bl	80098ac <_fflush_r>
 8009408:	2800      	cmp	r0, #0
 800940a:	d0d9      	beq.n	80093c0 <__swbuf_r+0x2e>
 800940c:	e7d6      	b.n	80093bc <__swbuf_r+0x2a>
	...

08009410 <__swsetup_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4b29      	ldr	r3, [pc, #164]	@ (80094b8 <__swsetup_r+0xa8>)
 8009414:	4605      	mov	r5, r0
 8009416:	460c      	mov	r4, r1
 8009418:	6818      	ldr	r0, [r3, #0]
 800941a:	b118      	cbz	r0, 8009424 <__swsetup_r+0x14>
 800941c:	6a03      	ldr	r3, [r0, #32]
 800941e:	b90b      	cbnz	r3, 8009424 <__swsetup_r+0x14>
 8009420:	f7ff fee0 	bl	80091e4 <__sinit>
 8009424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009428:	0719      	lsls	r1, r3, #28
 800942a:	d422      	bmi.n	8009472 <__swsetup_r+0x62>
 800942c:	06da      	lsls	r2, r3, #27
 800942e:	d407      	bmi.n	8009440 <__swsetup_r+0x30>
 8009430:	2209      	movs	r2, #9
 8009432:	602a      	str	r2, [r5, #0]
 8009434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	e033      	b.n	80094a8 <__swsetup_r+0x98>
 8009440:	0758      	lsls	r0, r3, #29
 8009442:	d512      	bpl.n	800946a <__swsetup_r+0x5a>
 8009444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009446:	b141      	cbz	r1, 800945a <__swsetup_r+0x4a>
 8009448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800944c:	4299      	cmp	r1, r3
 800944e:	d002      	beq.n	8009456 <__swsetup_r+0x46>
 8009450:	4628      	mov	r0, r5
 8009452:	f000 f8af 	bl	80095b4 <_free_r>
 8009456:	2300      	movs	r3, #0
 8009458:	6363      	str	r3, [r4, #52]	@ 0x34
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	2300      	movs	r3, #0
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	f043 0308 	orr.w	r3, r3, #8
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	b94b      	cbnz	r3, 800948a <__swsetup_r+0x7a>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800947c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009480:	d003      	beq.n	800948a <__swsetup_r+0x7a>
 8009482:	4621      	mov	r1, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f000 fa5e 	bl	8009946 <__smakebuf_r>
 800948a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948e:	f013 0201 	ands.w	r2, r3, #1
 8009492:	d00a      	beq.n	80094aa <__swsetup_r+0x9a>
 8009494:	2200      	movs	r2, #0
 8009496:	60a2      	str	r2, [r4, #8]
 8009498:	6962      	ldr	r2, [r4, #20]
 800949a:	4252      	negs	r2, r2
 800949c:	61a2      	str	r2, [r4, #24]
 800949e:	6922      	ldr	r2, [r4, #16]
 80094a0:	b942      	cbnz	r2, 80094b4 <__swsetup_r+0xa4>
 80094a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094a6:	d1c5      	bne.n	8009434 <__swsetup_r+0x24>
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	0799      	lsls	r1, r3, #30
 80094ac:	bf58      	it	pl
 80094ae:	6962      	ldrpl	r2, [r4, #20]
 80094b0:	60a2      	str	r2, [r4, #8]
 80094b2:	e7f4      	b.n	800949e <__swsetup_r+0x8e>
 80094b4:	2000      	movs	r0, #0
 80094b6:	e7f7      	b.n	80094a8 <__swsetup_r+0x98>
 80094b8:	20000034 	.word	0x20000034

080094bc <memset>:
 80094bc:	4402      	add	r2, r0
 80094be:	4603      	mov	r3, r0
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d100      	bne.n	80094c6 <memset+0xa>
 80094c4:	4770      	bx	lr
 80094c6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ca:	e7f9      	b.n	80094c0 <memset+0x4>

080094cc <_close_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	2300      	movs	r3, #0
 80094d0:	4d05      	ldr	r5, [pc, #20]	@ (80094e8 <_close_r+0x1c>)
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7f7 fcb7 	bl	8000e4a <_close>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_close_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_close_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20000440 	.word	0x20000440

080094ec <_lseek_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4604      	mov	r4, r0
 80094f0:	4d06      	ldr	r5, [pc, #24]	@ (800950c <_lseek_r+0x20>)
 80094f2:	4608      	mov	r0, r1
 80094f4:	4611      	mov	r1, r2
 80094f6:	2200      	movs	r2, #0
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f7f7 fccc 	bl	8000e98 <_lseek>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_lseek_r+0x1e>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_lseek_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20000440 	.word	0x20000440

08009510 <_read_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4604      	mov	r4, r0
 8009514:	4d06      	ldr	r5, [pc, #24]	@ (8009530 <_read_r+0x20>)
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	2200      	movs	r2, #0
 800951c:	602a      	str	r2, [r5, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f7f7 fc76 	bl	8000e10 <_read>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d102      	bne.n	800952e <_read_r+0x1e>
 8009528:	682b      	ldr	r3, [r5, #0]
 800952a:	b103      	cbz	r3, 800952e <_read_r+0x1e>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	bd38      	pop	{r3, r4, r5, pc}
 8009530:	20000440 	.word	0x20000440

08009534 <_write_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4604      	mov	r4, r0
 8009538:	4d06      	ldr	r5, [pc, #24]	@ (8009554 <_write_r+0x20>)
 800953a:	4608      	mov	r0, r1
 800953c:	4611      	mov	r1, r2
 800953e:	2200      	movs	r2, #0
 8009540:	602a      	str	r2, [r5, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	f7f7 f9be 	bl	80008c4 <_write>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_write_r+0x1e>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_write_r+0x1e>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20000440 	.word	0x20000440

08009558 <__errno>:
 8009558:	4b01      	ldr	r3, [pc, #4]	@ (8009560 <__errno+0x8>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	20000034 	.word	0x20000034

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	4d0d      	ldr	r5, [pc, #52]	@ (800959c <__libc_init_array+0x38>)
 8009568:	2600      	movs	r6, #0
 800956a:	4c0d      	ldr	r4, [pc, #52]	@ (80095a0 <__libc_init_array+0x3c>)
 800956c:	1b64      	subs	r4, r4, r5
 800956e:	10a4      	asrs	r4, r4, #2
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	4d0b      	ldr	r5, [pc, #44]	@ (80095a4 <__libc_init_array+0x40>)
 8009576:	2600      	movs	r6, #0
 8009578:	4c0b      	ldr	r4, [pc, #44]	@ (80095a8 <__libc_init_array+0x44>)
 800957a:	f000 fa53 	bl	8009a24 <_init>
 800957e:	1b64      	subs	r4, r4, r5
 8009580:	10a4      	asrs	r4, r4, #2
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	3601      	adds	r6, #1
 800958e:	4798      	blx	r3
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	3601      	adds	r6, #1
 8009598:	4798      	blx	r3
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	08009b58 	.word	0x08009b58
 80095a0:	08009b58 	.word	0x08009b58
 80095a4:	08009b58 	.word	0x08009b58
 80095a8:	08009b5c 	.word	0x08009b5c

080095ac <__retarget_lock_init_recursive>:
 80095ac:	4770      	bx	lr

080095ae <__retarget_lock_acquire_recursive>:
 80095ae:	4770      	bx	lr

080095b0 <__retarget_lock_release_recursive>:
 80095b0:	4770      	bx	lr
	...

080095b4 <_free_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4605      	mov	r5, r0
 80095b8:	2900      	cmp	r1, #0
 80095ba:	d041      	beq.n	8009640 <_free_r+0x8c>
 80095bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c0:	1f0c      	subs	r4, r1, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bfb8      	it	lt
 80095c6:	18e4      	addlt	r4, r4, r3
 80095c8:	f000 f8e0 	bl	800978c <__malloc_lock>
 80095cc:	4a1d      	ldr	r2, [pc, #116]	@ (8009644 <_free_r+0x90>)
 80095ce:	6813      	ldr	r3, [r2, #0]
 80095d0:	b933      	cbnz	r3, 80095e0 <_free_r+0x2c>
 80095d2:	6063      	str	r3, [r4, #4]
 80095d4:	6014      	str	r4, [r2, #0]
 80095d6:	4628      	mov	r0, r5
 80095d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095dc:	f000 b8dc 	b.w	8009798 <__malloc_unlock>
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	d908      	bls.n	80095f6 <_free_r+0x42>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	1821      	adds	r1, r4, r0
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf01      	itttt	eq
 80095ec:	6819      	ldreq	r1, [r3, #0]
 80095ee:	685b      	ldreq	r3, [r3, #4]
 80095f0:	1809      	addeq	r1, r1, r0
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	e7ed      	b.n	80095d2 <_free_r+0x1e>
 80095f6:	461a      	mov	r2, r3
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	b10b      	cbz	r3, 8009600 <_free_r+0x4c>
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d9fa      	bls.n	80095f6 <_free_r+0x42>
 8009600:	6811      	ldr	r1, [r2, #0]
 8009602:	1850      	adds	r0, r2, r1
 8009604:	42a0      	cmp	r0, r4
 8009606:	d10b      	bne.n	8009620 <_free_r+0x6c>
 8009608:	6820      	ldr	r0, [r4, #0]
 800960a:	4401      	add	r1, r0
 800960c:	1850      	adds	r0, r2, r1
 800960e:	6011      	str	r1, [r2, #0]
 8009610:	4283      	cmp	r3, r0
 8009612:	d1e0      	bne.n	80095d6 <_free_r+0x22>
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4408      	add	r0, r1
 800961a:	6053      	str	r3, [r2, #4]
 800961c:	6010      	str	r0, [r2, #0]
 800961e:	e7da      	b.n	80095d6 <_free_r+0x22>
 8009620:	d902      	bls.n	8009628 <_free_r+0x74>
 8009622:	230c      	movs	r3, #12
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	e7d6      	b.n	80095d6 <_free_r+0x22>
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	1821      	adds	r1, r4, r0
 800962c:	428b      	cmp	r3, r1
 800962e:	bf02      	ittt	eq
 8009630:	6819      	ldreq	r1, [r3, #0]
 8009632:	685b      	ldreq	r3, [r3, #4]
 8009634:	1809      	addeq	r1, r1, r0
 8009636:	6063      	str	r3, [r4, #4]
 8009638:	bf08      	it	eq
 800963a:	6021      	streq	r1, [r4, #0]
 800963c:	6054      	str	r4, [r2, #4]
 800963e:	e7ca      	b.n	80095d6 <_free_r+0x22>
 8009640:	bd38      	pop	{r3, r4, r5, pc}
 8009642:	bf00      	nop
 8009644:	2000044c 	.word	0x2000044c

08009648 <sbrk_aligned>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	4e0f      	ldr	r6, [pc, #60]	@ (8009688 <sbrk_aligned+0x40>)
 800964c:	460c      	mov	r4, r1
 800964e:	4605      	mov	r5, r0
 8009650:	6831      	ldr	r1, [r6, #0]
 8009652:	b911      	cbnz	r1, 800965a <sbrk_aligned+0x12>
 8009654:	f000 f9d6 	bl	8009a04 <_sbrk_r>
 8009658:	6030      	str	r0, [r6, #0]
 800965a:	4621      	mov	r1, r4
 800965c:	4628      	mov	r0, r5
 800965e:	f000 f9d1 	bl	8009a04 <_sbrk_r>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	d103      	bne.n	800966e <sbrk_aligned+0x26>
 8009666:	f04f 34ff 	mov.w	r4, #4294967295
 800966a:	4620      	mov	r0, r4
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	1cc4      	adds	r4, r0, #3
 8009670:	f024 0403 	bic.w	r4, r4, #3
 8009674:	42a0      	cmp	r0, r4
 8009676:	d0f8      	beq.n	800966a <sbrk_aligned+0x22>
 8009678:	1a21      	subs	r1, r4, r0
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f9c2 	bl	8009a04 <_sbrk_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d1f2      	bne.n	800966a <sbrk_aligned+0x22>
 8009684:	e7ef      	b.n	8009666 <sbrk_aligned+0x1e>
 8009686:	bf00      	nop
 8009688:	20000448 	.word	0x20000448

0800968c <_malloc_r>:
 800968c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009690:	1ccd      	adds	r5, r1, #3
 8009692:	4606      	mov	r6, r0
 8009694:	f025 0503 	bic.w	r5, r5, #3
 8009698:	3508      	adds	r5, #8
 800969a:	2d0c      	cmp	r5, #12
 800969c:	bf38      	it	cc
 800969e:	250c      	movcc	r5, #12
 80096a0:	2d00      	cmp	r5, #0
 80096a2:	db01      	blt.n	80096a8 <_malloc_r+0x1c>
 80096a4:	42a9      	cmp	r1, r5
 80096a6:	d904      	bls.n	80096b2 <_malloc_r+0x26>
 80096a8:	230c      	movs	r3, #12
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	2000      	movs	r0, #0
 80096ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009788 <_malloc_r+0xfc>
 80096b6:	f000 f869 	bl	800978c <__malloc_lock>
 80096ba:	f8d8 3000 	ldr.w	r3, [r8]
 80096be:	461c      	mov	r4, r3
 80096c0:	bb44      	cbnz	r4, 8009714 <_malloc_r+0x88>
 80096c2:	4629      	mov	r1, r5
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff ffbf 	bl	8009648 <sbrk_aligned>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	4604      	mov	r4, r0
 80096ce:	d158      	bne.n	8009782 <_malloc_r+0xf6>
 80096d0:	f8d8 4000 	ldr.w	r4, [r8]
 80096d4:	4627      	mov	r7, r4
 80096d6:	2f00      	cmp	r7, #0
 80096d8:	d143      	bne.n	8009762 <_malloc_r+0xd6>
 80096da:	2c00      	cmp	r4, #0
 80096dc:	d04b      	beq.n	8009776 <_malloc_r+0xea>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	4639      	mov	r1, r7
 80096e2:	4630      	mov	r0, r6
 80096e4:	eb04 0903 	add.w	r9, r4, r3
 80096e8:	f000 f98c 	bl	8009a04 <_sbrk_r>
 80096ec:	4581      	cmp	r9, r0
 80096ee:	d142      	bne.n	8009776 <_malloc_r+0xea>
 80096f0:	6821      	ldr	r1, [r4, #0]
 80096f2:	4630      	mov	r0, r6
 80096f4:	1a6d      	subs	r5, r5, r1
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7ff ffa6 	bl	8009648 <sbrk_aligned>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d03a      	beq.n	8009776 <_malloc_r+0xea>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	442b      	add	r3, r5
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	f8d8 3000 	ldr.w	r3, [r8]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	bb62      	cbnz	r2, 8009768 <_malloc_r+0xdc>
 800970e:	f8c8 7000 	str.w	r7, [r8]
 8009712:	e00f      	b.n	8009734 <_malloc_r+0xa8>
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	1b52      	subs	r2, r2, r5
 8009718:	d420      	bmi.n	800975c <_malloc_r+0xd0>
 800971a:	2a0b      	cmp	r2, #11
 800971c:	d917      	bls.n	800974e <_malloc_r+0xc2>
 800971e:	1961      	adds	r1, r4, r5
 8009720:	42a3      	cmp	r3, r4
 8009722:	6025      	str	r5, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	6059      	strne	r1, [r3, #4]
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	bf08      	it	eq
 800972c:	f8c8 1000 	streq.w	r1, [r8]
 8009730:	5162      	str	r2, [r4, r5]
 8009732:	604b      	str	r3, [r1, #4]
 8009734:	4630      	mov	r0, r6
 8009736:	f000 f82f 	bl	8009798 <__malloc_unlock>
 800973a:	f104 000b 	add.w	r0, r4, #11
 800973e:	1d23      	adds	r3, r4, #4
 8009740:	f020 0007 	bic.w	r0, r0, #7
 8009744:	1ac2      	subs	r2, r0, r3
 8009746:	bf1c      	itt	ne
 8009748:	1a1b      	subne	r3, r3, r0
 800974a:	50a3      	strne	r3, [r4, r2]
 800974c:	e7af      	b.n	80096ae <_malloc_r+0x22>
 800974e:	6862      	ldr	r2, [r4, #4]
 8009750:	42a3      	cmp	r3, r4
 8009752:	bf0c      	ite	eq
 8009754:	f8c8 2000 	streq.w	r2, [r8]
 8009758:	605a      	strne	r2, [r3, #4]
 800975a:	e7eb      	b.n	8009734 <_malloc_r+0xa8>
 800975c:	4623      	mov	r3, r4
 800975e:	6864      	ldr	r4, [r4, #4]
 8009760:	e7ae      	b.n	80096c0 <_malloc_r+0x34>
 8009762:	463c      	mov	r4, r7
 8009764:	687f      	ldr	r7, [r7, #4]
 8009766:	e7b6      	b.n	80096d6 <_malloc_r+0x4a>
 8009768:	461a      	mov	r2, r3
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	42a3      	cmp	r3, r4
 800976e:	d1fb      	bne.n	8009768 <_malloc_r+0xdc>
 8009770:	2300      	movs	r3, #0
 8009772:	6053      	str	r3, [r2, #4]
 8009774:	e7de      	b.n	8009734 <_malloc_r+0xa8>
 8009776:	230c      	movs	r3, #12
 8009778:	4630      	mov	r0, r6
 800977a:	6033      	str	r3, [r6, #0]
 800977c:	f000 f80c 	bl	8009798 <__malloc_unlock>
 8009780:	e794      	b.n	80096ac <_malloc_r+0x20>
 8009782:	6005      	str	r5, [r0, #0]
 8009784:	e7d6      	b.n	8009734 <_malloc_r+0xa8>
 8009786:	bf00      	nop
 8009788:	2000044c 	.word	0x2000044c

0800978c <__malloc_lock>:
 800978c:	4801      	ldr	r0, [pc, #4]	@ (8009794 <__malloc_lock+0x8>)
 800978e:	f7ff bf0e 	b.w	80095ae <__retarget_lock_acquire_recursive>
 8009792:	bf00      	nop
 8009794:	20000444 	.word	0x20000444

08009798 <__malloc_unlock>:
 8009798:	4801      	ldr	r0, [pc, #4]	@ (80097a0 <__malloc_unlock+0x8>)
 800979a:	f7ff bf09 	b.w	80095b0 <__retarget_lock_release_recursive>
 800979e:	bf00      	nop
 80097a0:	20000444 	.word	0x20000444

080097a4 <__sflush_r>:
 80097a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	0716      	lsls	r6, r2, #28
 80097ae:	4605      	mov	r5, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	d454      	bmi.n	800985e <__sflush_r+0xba>
 80097b4:	684b      	ldr	r3, [r1, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dc02      	bgt.n	80097c0 <__sflush_r+0x1c>
 80097ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dd48      	ble.n	8009852 <__sflush_r+0xae>
 80097c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	d045      	beq.n	8009852 <__sflush_r+0xae>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097cc:	682f      	ldr	r7, [r5, #0]
 80097ce:	6a21      	ldr	r1, [r4, #32]
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	d030      	beq.n	8009836 <__sflush_r+0x92>
 80097d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	0759      	lsls	r1, r3, #29
 80097da:	d505      	bpl.n	80097e8 <__sflush_r+0x44>
 80097dc:	6863      	ldr	r3, [r4, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097e2:	b10b      	cbz	r3, 80097e8 <__sflush_r+0x44>
 80097e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097e6:	1ad2      	subs	r2, r2, r3
 80097e8:	2300      	movs	r3, #0
 80097ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097ec:	6a21      	ldr	r1, [r4, #32]
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b0      	blx	r6
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	d106      	bne.n	8009806 <__sflush_r+0x62>
 80097f8:	6829      	ldr	r1, [r5, #0]
 80097fa:	291d      	cmp	r1, #29
 80097fc:	d82b      	bhi.n	8009856 <__sflush_r+0xb2>
 80097fe:	4a2a      	ldr	r2, [pc, #168]	@ (80098a8 <__sflush_r+0x104>)
 8009800:	410a      	asrs	r2, r1
 8009802:	07d6      	lsls	r6, r2, #31
 8009804:	d427      	bmi.n	8009856 <__sflush_r+0xb2>
 8009806:	2200      	movs	r2, #0
 8009808:	04d9      	lsls	r1, r3, #19
 800980a:	6062      	str	r2, [r4, #4]
 800980c:	6922      	ldr	r2, [r4, #16]
 800980e:	6022      	str	r2, [r4, #0]
 8009810:	d504      	bpl.n	800981c <__sflush_r+0x78>
 8009812:	1c42      	adds	r2, r0, #1
 8009814:	d101      	bne.n	800981a <__sflush_r+0x76>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	b903      	cbnz	r3, 800981c <__sflush_r+0x78>
 800981a:	6560      	str	r0, [r4, #84]	@ 0x54
 800981c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800981e:	602f      	str	r7, [r5, #0]
 8009820:	b1b9      	cbz	r1, 8009852 <__sflush_r+0xae>
 8009822:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009826:	4299      	cmp	r1, r3
 8009828:	d002      	beq.n	8009830 <__sflush_r+0x8c>
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff fec2 	bl	80095b4 <_free_r>
 8009830:	2300      	movs	r3, #0
 8009832:	6363      	str	r3, [r4, #52]	@ 0x34
 8009834:	e00d      	b.n	8009852 <__sflush_r+0xae>
 8009836:	2301      	movs	r3, #1
 8009838:	4628      	mov	r0, r5
 800983a:	47b0      	blx	r6
 800983c:	4602      	mov	r2, r0
 800983e:	1c50      	adds	r0, r2, #1
 8009840:	d1c9      	bne.n	80097d6 <__sflush_r+0x32>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0c6      	beq.n	80097d6 <__sflush_r+0x32>
 8009848:	2b1d      	cmp	r3, #29
 800984a:	d001      	beq.n	8009850 <__sflush_r+0xac>
 800984c:	2b16      	cmp	r3, #22
 800984e:	d11d      	bne.n	800988c <__sflush_r+0xe8>
 8009850:	602f      	str	r7, [r5, #0]
 8009852:	2000      	movs	r0, #0
 8009854:	e021      	b.n	800989a <__sflush_r+0xf6>
 8009856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800985a:	b21b      	sxth	r3, r3
 800985c:	e01a      	b.n	8009894 <__sflush_r+0xf0>
 800985e:	690f      	ldr	r7, [r1, #16]
 8009860:	2f00      	cmp	r7, #0
 8009862:	d0f6      	beq.n	8009852 <__sflush_r+0xae>
 8009864:	0793      	lsls	r3, r2, #30
 8009866:	680e      	ldr	r6, [r1, #0]
 8009868:	600f      	str	r7, [r1, #0]
 800986a:	bf0c      	ite	eq
 800986c:	694b      	ldreq	r3, [r1, #20]
 800986e:	2300      	movne	r3, #0
 8009870:	eba6 0807 	sub.w	r8, r6, r7
 8009874:	608b      	str	r3, [r1, #8]
 8009876:	f1b8 0f00 	cmp.w	r8, #0
 800987a:	ddea      	ble.n	8009852 <__sflush_r+0xae>
 800987c:	4643      	mov	r3, r8
 800987e:	463a      	mov	r2, r7
 8009880:	6a21      	ldr	r1, [r4, #32]
 8009882:	4628      	mov	r0, r5
 8009884:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009886:	47b0      	blx	r6
 8009888:	2800      	cmp	r0, #0
 800988a:	dc08      	bgt.n	800989e <__sflush_r+0xfa>
 800988c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009894:	f04f 30ff 	mov.w	r0, #4294967295
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989e:	4407      	add	r7, r0
 80098a0:	eba8 0800 	sub.w	r8, r8, r0
 80098a4:	e7e7      	b.n	8009876 <__sflush_r+0xd2>
 80098a6:	bf00      	nop
 80098a8:	dfbffffe 	.word	0xdfbffffe

080098ac <_fflush_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	690b      	ldr	r3, [r1, #16]
 80098b0:	4605      	mov	r5, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	b913      	cbnz	r3, 80098bc <_fflush_r+0x10>
 80098b6:	2500      	movs	r5, #0
 80098b8:	4628      	mov	r0, r5
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	b118      	cbz	r0, 80098c6 <_fflush_r+0x1a>
 80098be:	6a03      	ldr	r3, [r0, #32]
 80098c0:	b90b      	cbnz	r3, 80098c6 <_fflush_r+0x1a>
 80098c2:	f7ff fc8f 	bl	80091e4 <__sinit>
 80098c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0f3      	beq.n	80098b6 <_fflush_r+0xa>
 80098ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098d0:	07d0      	lsls	r0, r2, #31
 80098d2:	d404      	bmi.n	80098de <_fflush_r+0x32>
 80098d4:	0599      	lsls	r1, r3, #22
 80098d6:	d402      	bmi.n	80098de <_fflush_r+0x32>
 80098d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098da:	f7ff fe68 	bl	80095ae <__retarget_lock_acquire_recursive>
 80098de:	4628      	mov	r0, r5
 80098e0:	4621      	mov	r1, r4
 80098e2:	f7ff ff5f 	bl	80097a4 <__sflush_r>
 80098e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098e8:	4605      	mov	r5, r0
 80098ea:	07da      	lsls	r2, r3, #31
 80098ec:	d4e4      	bmi.n	80098b8 <_fflush_r+0xc>
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	059b      	lsls	r3, r3, #22
 80098f2:	d4e1      	bmi.n	80098b8 <_fflush_r+0xc>
 80098f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098f6:	f7ff fe5b 	bl	80095b0 <__retarget_lock_release_recursive>
 80098fa:	e7dd      	b.n	80098b8 <_fflush_r+0xc>

080098fc <__swhatbuf_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	460c      	mov	r4, r1
 8009900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009904:	b096      	sub	sp, #88	@ 0x58
 8009906:	4615      	mov	r5, r2
 8009908:	2900      	cmp	r1, #0
 800990a:	461e      	mov	r6, r3
 800990c:	da0c      	bge.n	8009928 <__swhatbuf_r+0x2c>
 800990e:	89a3      	ldrh	r3, [r4, #12]
 8009910:	2100      	movs	r1, #0
 8009912:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009916:	bf14      	ite	ne
 8009918:	2340      	movne	r3, #64	@ 0x40
 800991a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800991e:	2000      	movs	r0, #0
 8009920:	6031      	str	r1, [r6, #0]
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	b016      	add	sp, #88	@ 0x58
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	466a      	mov	r2, sp
 800992a:	f000 f849 	bl	80099c0 <_fstat_r>
 800992e:	2800      	cmp	r0, #0
 8009930:	dbed      	blt.n	800990e <__swhatbuf_r+0x12>
 8009932:	9901      	ldr	r1, [sp, #4]
 8009934:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009938:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800993c:	4259      	negs	r1, r3
 800993e:	4159      	adcs	r1, r3
 8009940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009944:	e7eb      	b.n	800991e <__swhatbuf_r+0x22>

08009946 <__smakebuf_r>:
 8009946:	898b      	ldrh	r3, [r1, #12]
 8009948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800994a:	079d      	lsls	r5, r3, #30
 800994c:	4606      	mov	r6, r0
 800994e:	460c      	mov	r4, r1
 8009950:	d507      	bpl.n	8009962 <__smakebuf_r+0x1c>
 8009952:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	2301      	movs	r3, #1
 800995c:	6163      	str	r3, [r4, #20]
 800995e:	b003      	add	sp, #12
 8009960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009962:	ab01      	add	r3, sp, #4
 8009964:	466a      	mov	r2, sp
 8009966:	f7ff ffc9 	bl	80098fc <__swhatbuf_r>
 800996a:	9f00      	ldr	r7, [sp, #0]
 800996c:	4605      	mov	r5, r0
 800996e:	4630      	mov	r0, r6
 8009970:	4639      	mov	r1, r7
 8009972:	f7ff fe8b 	bl	800968c <_malloc_r>
 8009976:	b948      	cbnz	r0, 800998c <__smakebuf_r+0x46>
 8009978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800997c:	059a      	lsls	r2, r3, #22
 800997e:	d4ee      	bmi.n	800995e <__smakebuf_r+0x18>
 8009980:	f023 0303 	bic.w	r3, r3, #3
 8009984:	f043 0302 	orr.w	r3, r3, #2
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	e7e2      	b.n	8009952 <__smakebuf_r+0xc>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	6020      	str	r0, [r4, #0]
 8009990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009994:	81a3      	strh	r3, [r4, #12]
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800999c:	b15b      	cbz	r3, 80099b6 <__smakebuf_r+0x70>
 800999e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a2:	4630      	mov	r0, r6
 80099a4:	f000 f81e 	bl	80099e4 <_isatty_r>
 80099a8:	b128      	cbz	r0, 80099b6 <__smakebuf_r+0x70>
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f023 0303 	bic.w	r3, r3, #3
 80099b0:	f043 0301 	orr.w	r3, r3, #1
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	431d      	orrs	r5, r3
 80099ba:	81a5      	strh	r5, [r4, #12]
 80099bc:	e7cf      	b.n	800995e <__smakebuf_r+0x18>
	...

080099c0 <_fstat_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	2300      	movs	r3, #0
 80099c4:	4d06      	ldr	r5, [pc, #24]	@ (80099e0 <_fstat_r+0x20>)
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	f7f7 fa48 	bl	8000e62 <_fstat>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d102      	bne.n	80099dc <_fstat_r+0x1c>
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	b103      	cbz	r3, 80099dc <_fstat_r+0x1c>
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
 80099de:	bf00      	nop
 80099e0:	20000440 	.word	0x20000440

080099e4 <_isatty_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	2300      	movs	r3, #0
 80099e8:	4d05      	ldr	r5, [pc, #20]	@ (8009a00 <_isatty_r+0x1c>)
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f7 fa47 	bl	8000e82 <_isatty>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_isatty_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_isatty_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20000440 	.word	0x20000440

08009a04 <_sbrk_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	2300      	movs	r3, #0
 8009a08:	4d05      	ldr	r5, [pc, #20]	@ (8009a20 <_sbrk_r+0x1c>)
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f7 fa50 	bl	8000eb4 <_sbrk>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_sbrk_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_sbrk_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20000440 	.word	0x20000440

08009a24 <_init>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr

08009a30 <_fini>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr
