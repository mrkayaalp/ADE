
ADE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a40  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d9c1  08012c78  08012c78  00013c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803063c  0803063c  0003163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08030644  08030644  00031644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08030648  08030648  00031648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  0803064c  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00013ab4  200001ec  08030838  000321ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20013ca0  08030838  00032ca0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000321ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038340  00000000  00000000  00032222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068ee  00000000  00000000  0006a562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000021b0  00000000  00000000  00070e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000188c  00000000  00000000  00073000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039ebd  00000000  00000000  0007488c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f53c  00000000  00000000  000ae749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166948  00000000  00000000  000ddc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000bc  00000000  00000000  002445cd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a2c4  00000000  00000000  0024468c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0024e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00004627  00000000  00000000  0024e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000120  00000000  00000000  00252fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001ec 	.word	0x200001ec
 8000254:	00000000 	.word	0x00000000
 8000258:	08012c60 	.word	0x08012c60

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f0 	.word	0x200001f0
 8000274:	08012c60 	.word	0x08012c60

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800107e:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <MX_ADC1_Init+0x84>)
 8001080:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010e6:	f002 f8b7 	bl	8003258 <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f001 f826 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000208 	.word	0x20000208
 80010fc:	42028000 	.word	0x42028000

08001100 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ba      	sub	sp, #232	@ 0xe8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	22c0      	movs	r2, #192	@ 0xc0
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f00e f802 	bl	800f12a <memset>
  if(adcHandle->Instance==ADC1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_ADC_MspInit+0xbc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d140      	bne.n	80011b2 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001130:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800113c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fa55 	bl	80075f8 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001154:	f000 fff4 	bl	8002140 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800115a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001160:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001164:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800116a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800116e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800117c:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_ADC_MspInit+0xc4>)
 80011ae:	f004 fb7f 	bl	80058b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	37e8      	adds	r7, #232	@ 0xe8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	42028000 	.word	0x42028000
 80011c0:	46020c00 	.word	0x46020c00
 80011c4:	42020800 	.word	0x42020800

080011c8 <MX_DCACHE1_Init>:

DCACHE_HandleTypeDef hdcache1;

/* DCACHE1 init function */
void MX_DCACHE1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80011cc:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <MX_DCACHE1_Init+0x24>)
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <MX_DCACHE1_Init+0x28>)
 80011d0:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <MX_DCACHE1_Init+0x24>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_DCACHE1_Init+0x24>)
 80011da:	f002 fc3f 	bl	8003a5c <HAL_DCACHE_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80011e4:	f000 ffac 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000294 	.word	0x20000294
 80011f0:	40031400 	.word	0x40031400

080011f4 <HAL_DCACHE_MspInit>:

void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* dcacheHandle)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  if(dcacheHandle->Instance==DCACHE1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <HAL_DCACHE_MspInit+0x3c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10e      	bne.n	8001224 <HAL_DCACHE_MspInit+0x30>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* DCACHE1 clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_DCACHE_MspInit+0x40>)
 8001208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120c:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <HAL_DCACHE_MspInit+0x40>)
 800120e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001212:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <HAL_DCACHE_MspInit+0x40>)
 8001218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE1_MspInit 1 */

  /* USER CODE END DCACHE1_MspInit 1 */
  }
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40031400 	.word	0x40031400
 8001234:	46020c00 	.word	0x46020c00

08001238 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <MX_GPDMA1_Init+0x5c>)
 8001240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001244:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <MX_GPDMA1_Init+0x5c>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_GPDMA1_Init+0x5c>)
 8001250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2055      	movs	r0, #85	@ 0x55
 8001262:	f002 fb7b 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 8001266:	2055      	movs	r0, #85	@ 0x55
 8001268:	f002 fb92 	bl	8003990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel14_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2056      	movs	r0, #86	@ 0x56
 8001272:	f002 fb73 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel14_IRQn);
 8001276:	2056      	movs	r0, #86	@ 0x56
 8001278:	f002 fb8a 	bl	8003990 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel15_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2057      	movs	r0, #87	@ 0x57
 8001282:	f002 fb6b 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel15_IRQn);
 8001286:	2057      	movs	r0, #87	@ 0x57
 8001288:	f002 fb82 	bl	8003990 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	46020c00 	.word	0x46020c00

08001298 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b4:	4a5c      	ldr	r2, [pc, #368]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012be:	4b5a      	ldr	r3, [pc, #360]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b56      	ldr	r3, [pc, #344]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d2:	4a55      	ldr	r2, [pc, #340]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012dc:	4b52      	ldr	r3, [pc, #328]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001428 <MX_GPIO_Init+0x190>)
 80012fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <MX_GPIO_Init+0x190>)
 800130a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130e:	4a46      	ldr	r2, [pc, #280]	@ (8001428 <MX_GPIO_Init+0x190>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001318:	4b43      	ldr	r3, [pc, #268]	@ (8001428 <MX_GPIO_Init+0x190>)
 800131a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <MX_GPIO_Init+0x190>)
 8001328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132c:	4a3e      	ldr	r2, [pc, #248]	@ (8001428 <MX_GPIO_Init+0x190>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <MX_GPIO_Init+0x190>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001344:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <MX_GPIO_Init+0x190>)
 8001346:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134a:	4a37      	ldr	r2, [pc, #220]	@ (8001428 <MX_GPIO_Init+0x190>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001354:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <MX_GPIO_Init+0x190>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2104      	movs	r1, #4
 8001366:	4831      	ldr	r0, [pc, #196]	@ (800142c <MX_GPIO_Init+0x194>)
 8001368:	f004 fc7a 	bl	8005c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m3_lr_sel_GPIO_Port, m3_lr_sel_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	482f      	ldr	r0, [pc, #188]	@ (8001430 <MX_GPIO_Init+0x198>)
 8001372:	f004 fc75 	bl	8005c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m2_lr_sel_Pin|led_blue_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2184      	movs	r1, #132	@ 0x84
 800137a:	482e      	ldr	r0, [pc, #184]	@ (8001434 <MX_GPIO_Init+0x19c>)
 800137c:	f004 fc70 	bl	8005c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2180      	movs	r1, #128	@ 0x80
 8001384:	482c      	ldr	r0, [pc, #176]	@ (8001438 <MX_GPIO_Init+0x1a0>)
 8001386:	f004 fc6b 	bl	8005c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m4_lr_sel_GPIO_Port, m4_lr_sel_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2101      	movs	r1, #1
 800138e:	482b      	ldr	r0, [pc, #172]	@ (800143c <MX_GPIO_Init+0x1a4>)
 8001390:	f004 fc66 	bl	8005c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : m1_lr_sel_Pin */
  GPIO_InitStruct.Pin = m1_lr_sel_Pin;
 8001394:	2304      	movs	r3, #4
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(m1_lr_sel_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4820      	ldr	r0, [pc, #128]	@ (800142c <MX_GPIO_Init+0x194>)
 80013ac:	f004 fa80 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : m3_lr_sel_Pin */
  GPIO_InitStruct.Pin = m3_lr_sel_Pin;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(m3_lr_sel_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	481a      	ldr	r0, [pc, #104]	@ (8001430 <MX_GPIO_Init+0x198>)
 80013c8:	f004 fa72 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : m2_lr_sel_Pin led_blue_Pin */
  GPIO_InitStruct.Pin = m2_lr_sel_Pin|led_blue_Pin;
 80013cc:	2384      	movs	r3, #132	@ 0x84
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	@ (8001434 <MX_GPIO_Init+0x19c>)
 80013e4:	f004 fa64 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_green_Pin */
  GPIO_InitStruct.Pin = led_green_Pin;
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(led_green_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	480e      	ldr	r0, [pc, #56]	@ (8001438 <MX_GPIO_Init+0x1a0>)
 8001400:	f004 fa56 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : m4_lr_sel_Pin */
  GPIO_InitStruct.Pin = m4_lr_sel_Pin;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(m4_lr_sel_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4808      	ldr	r0, [pc, #32]	@ (800143c <MX_GPIO_Init+0x1a4>)
 800141c:	f004 fa48 	bl	80058b0 <HAL_GPIO_Init>

}
 8001420:	bf00      	nop
 8001422:	3730      	adds	r7, #48	@ 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	46020c00 	.word	0x46020c00
 800142c:	42021000 	.word	0x42021000
 8001430:	42021400 	.word	0x42021400
 8001434:	42020400 	.word	0x42020400
 8001438:	42020800 	.word	0x42020800
 800143c:	42020c00 	.word	0x42020c00

08001440 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001444:	2000      	movs	r0, #0
 8001446:	f004 fca7 	bl	8005d98 <HAL_ICACHE_ConfigAssociativityMode>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001450:	f000 fe76 	bl	8002140 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001454:	f004 fcc0 	bl	8005dd8 <HAL_ICACHE_Enable>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800145e:	f000 fe6f 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146e:	f001 fd81 	bl	8002f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001472:	f000 f94e 	bl	8001712 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001476:	f000 f8b5 	bl	80015e4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800147a:	f000 f917 	bl	80016ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147e:	f7ff ff0b 	bl	8001298 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001482:	f7ff fed9 	bl	8001238 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8001486:	f7ff ffdb 	bl	8001440 <MX_ICACHE_Init>
  MX_SAI1_Init();
 800148a:	f000 fe5f 	bl	800214c <MX_SAI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 800148e:	f001 fb65 	bl	8002b5c <MX_USB_OTG_FS_HCD_Init>
  MX_USART1_UART_Init();
 8001492:	f001 fa5d 	bl	8002950 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001496:	f7ff fdef 	bl	8001078 <MX_ADC1_Init>
  MX_DCACHE1_Init();
 800149a:	f7ff fe95 	bl	80011c8 <MX_DCACHE1_Init>
  /* USER CODE BEGIN 2 */

  if (arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE) != ARM_MATH_SUCCESS) {
 800149e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014a2:	4841      	ldr	r0, [pc, #260]	@ (80015a8 <main+0x140>)
 80014a4:	f00b fd82 	bl	800cfac <arm_rfft_fast_init_f32>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <main+0x50>
    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);  
 80014ae:	2201      	movs	r2, #1
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	483e      	ldr	r0, [pc, #248]	@ (80015ac <main+0x144>)
 80014b4:	f004 fbd4 	bl	8005c60 <HAL_GPIO_WritePin>
  }

  // Initialize the IIR filter for each microphone channel
  for (int i = 0; i < NUM_MICS; i++) {
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	e024      	b.n	8001508 <main+0xa0>
    arm_biquad_cascade_df1_init_f32(&iir_filter_instances[i], IIR_NUM_STAGES, iir_filter_coeffs, iir_filter_states[i]);
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4a39      	ldr	r2, [pc, #228]	@ (80015b0 <main+0x148>)
 80014ca:	1898      	adds	r0, r3, r2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4a38      	ldr	r2, [pc, #224]	@ (80015b4 <main+0x14c>)
 80014d2:	4413      	add	r3, r2
 80014d4:	4a38      	ldr	r2, [pc, #224]	@ (80015b8 <main+0x150>)
 80014d6:	2102      	movs	r1, #2
 80014d8:	f00c fa3c 	bl	800d954 <arm_biquad_cascade_df1_init_f32>
  	arm_biquad_cascade_df1_f32(&iir_filter_instances[i], mic_buffers[i], mic_buffers[i], FFT_SIZE);
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4a32      	ldr	r2, [pc, #200]	@ (80015b0 <main+0x148>)
 80014e8:	1898      	adds	r0, r3, r2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	031b      	lsls	r3, r3, #12
 80014ee:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <main+0x154>)
 80014f0:	1899      	adds	r1, r3, r2
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	031b      	lsls	r3, r3, #12
 80014f6:	4a31      	ldr	r2, [pc, #196]	@ (80015bc <main+0x154>)
 80014f8:	441a      	add	r2, r3
 80014fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014fe:	f00c fa37 	bl	800d970 <arm_biquad_cascade_df1_f32>
  for (int i = 0; i < NUM_MICS; i++) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3301      	adds	r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b03      	cmp	r3, #3
 800150c:	ddd7      	ble.n	80014be <main+0x56>
  }
    // Start SAI audio capture for BOTH blocks

  if (HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)sai_a_dma_buffer, SAI_RX_BUFFER_SIZE * 2) != HAL_OK) {
 800150e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001512:	492b      	ldr	r1, [pc, #172]	@ (80015c0 <main+0x158>)
 8001514:	482b      	ldr	r0, [pc, #172]	@ (80015c4 <main+0x15c>)
 8001516:	f008 ffad 	bl	800a474 <HAL_SAI_Receive_DMA>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <main+0xc2>
      HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_SET);  
 8001520:	2201      	movs	r2, #1
 8001522:	2180      	movs	r1, #128	@ 0x80
 8001524:	4828      	ldr	r0, [pc, #160]	@ (80015c8 <main+0x160>)
 8001526:	f004 fb9b 	bl	8005c60 <HAL_GPIO_WritePin>
  }


   if (HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*)sai_b_dma_buffer, SAI_RX_BUFFER_SIZE * 2) != HAL_OK) {
 800152a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800152e:	4927      	ldr	r1, [pc, #156]	@ (80015cc <main+0x164>)
 8001530:	4827      	ldr	r0, [pc, #156]	@ (80015d0 <main+0x168>)
 8001532:	f008 ff9f 	bl	800a474 <HAL_SAI_Receive_DMA>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <main+0xde>
       HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	2180      	movs	r1, #128	@ 0x80
 8001540:	4821      	ldr	r0, [pc, #132]	@ (80015c8 <main+0x160>)
 8001542:	f004 fb8d 	bl	8005c60 <HAL_GPIO_WritePin>
   }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001546:	2000      	movs	r0, #0
 8001548:	f001 fbe4 	bl	8002d14 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800154c:	2001      	movs	r0, #1
 800154e:	f001 fbe1 	bl	8002d14 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001552:	2002      	movs	r0, #2
 8001554:	f001 fbde 	bl	8002d14 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001558:	2101      	movs	r1, #1
 800155a:	2000      	movs	r0, #0
 800155c:	f001 fc6a 	bl	8002e34 <BSP_PB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Set Mics SAI1 A Left and Right
  // TODO: add m3 and m4
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, MIC_1);
 8001560:	2200      	movs	r2, #0
 8001562:	2104      	movs	r1, #4
 8001564:	481b      	ldr	r0, [pc, #108]	@ (80015d4 <main+0x16c>)
 8001566:	f004 fb7b 	bl	8005c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m2_lr_sel_GPIO_Port, m2_lr_sel_Pin, MIC_2);
 800156a:	2201      	movs	r2, #1
 800156c:	2104      	movs	r1, #4
 800156e:	480f      	ldr	r0, [pc, #60]	@ (80015ac <main+0x144>)
 8001570:	f004 fb76 	bl	8005c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m3_lr_sel_GPIO_Port, m3_lr_sel_Pin, MIC_3);
 8001574:	2200      	movs	r2, #0
 8001576:	2101      	movs	r1, #1
 8001578:	4817      	ldr	r0, [pc, #92]	@ (80015d8 <main+0x170>)
 800157a:	f004 fb71 	bl	8005c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m4_lr_sel_GPIO_Port, m4_lr_sel_Pin, MIC_4);
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	4816      	ldr	r0, [pc, #88]	@ (80015dc <main+0x174>)
 8001584:	f004 fb6c 	bl	8005c60 <HAL_GPIO_WritePin>
  
  while (1)
  {

    if (data_ready_flags) {
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <main+0x178>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0fa      	beq.n	8001588 <main+0x120>

    	// Taking 18 ms to process
        process_audio_data();
 8001592:	f000 f8cd 	bl	8001730 <process_audio_data>
        HAL_GPIO_TogglePin(led_green_GPIO_Port, led_green_Pin); // Indicate processing done
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	480b      	ldr	r0, [pc, #44]	@ (80015c8 <main+0x160>)
 800159a:	f004 fb79 	bl	8005c90 <HAL_GPIO_TogglePin>
        
        // Reset flag after processing
        data_ready_flags = 0;
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <main+0x178>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
    if (data_ready_flags) {
 80015a4:	e7f0      	b.n	8001588 <main+0x120>
 80015a6:	bf00      	nop
 80015a8:	200102c0 	.word	0x200102c0
 80015ac:	42020400 	.word	0x42020400
 80015b0:	200102e8 	.word	0x200102e8
 80015b4:	20010318 	.word	0x20010318
 80015b8:	08012c78 	.word	0x08012c78
 80015bc:	200082c0 	.word	0x200082c0
 80015c0:	200002c0 	.word	0x200002c0
 80015c4:	2001336c 	.word	0x2001336c
 80015c8:	42020800 	.word	0x42020800
 80015cc:	200042c0 	.word	0x200042c0
 80015d0:	20013404 	.word	0x20013404
 80015d4:	42021000 	.word	0x42021000
 80015d8:	42021400 	.word	0x42021400
 80015dc:	42020c00 	.word	0x42020c00
 80015e0:	200102d8 	.word	0x200102d8

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09e      	sub	sp, #120	@ 0x78
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	2260      	movs	r2, #96	@ 0x60
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00d fd99 	bl	800f12a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001608:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800160c:	f004 fbf4 	bl	8005df8 <HAL_PWREx_ControlVoltageScaling>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001616:	f000 fd93 	bl	8002140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800161a:	2332      	movs	r3, #50	@ 0x32
 800161c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162a:	2310      	movs	r3, #16
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800162e:	2301      	movs	r3, #1
 8001630:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001632:	2310      	movs	r3, #16
 8001634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001636:	2300      	movs	r3, #0
 8001638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163a:	2302      	movs	r3, #2
 800163c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800163e:	2301      	movs	r3, #1
 8001640:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001646:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001648:	2303      	movs	r3, #3
 800164a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800164c:	2308      	movs	r3, #8
 800164e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800165c:	230c      	movs	r3, #12
 800165e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f004 fce1 	bl	8006030 <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001674:	f000 fd64 	bl	8002140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	231f      	movs	r3, #31
 800167a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2303      	movs	r3, #3
 800167e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001690:	463b      	mov	r3, r7
 8001692:	2103      	movs	r1, #3
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fba7 	bl	8006de8 <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016a0:	f000 fd4e 	bl	8002140 <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3778      	adds	r7, #120	@ 0x78
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0b0      	sub	sp, #192	@ 0xc0
 80016b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	22c0      	movs	r2, #192	@ 0xc0
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00d fd36 	bl	800f12a <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80016be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 3;
 80016d4:	2303      	movs	r3, #3
 80016d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 15;
 80016d8:	230f      	movs	r3, #15
 80016da:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 80016e8:	230c      	movs	r3, #12
 80016ea:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 3072;
 80016ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 80016f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 ff7c 	bl	80075f8 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001706:	f000 fd1b 	bl	8002140 <Error_Handler>
  }
}
 800170a:	bf00      	nop
 800170c:	37c0      	adds	r7, #192	@ 0xc0
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001716:	f004 fc7b 	bl	8006010 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800171a:	2002      	movs	r0, #2
 800171c:	f004 fbf8 	bl	8005f10 <HAL_PWREx_ConfigSupply>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001726:	f000 fd0b 	bl	8002140 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <process_audio_data>:
/**
  * @brief  Processes a block of audio data to calculate sound direction.
  * @retval None
  */
void process_audio_data(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	f5ad 5d40 	sub.w	sp, sp, #12288	@ 0x3000
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
    float32_t dc_offset;

//    SCB_InvalidateDCache_by_Addr((uint32_t*)processing_ptr_a, SAI_RX_BUFFER_SIZE * sizeof(int32_t));
//    SCB_InvalidateDCache_by_Addr((uint32_t*)processing_ptr_b, SAI_RX_BUFFER_SIZE * sizeof(int32_t));

    for (int i = 0; i < FFT_SIZE; i++) {
 800173a:	2300      	movs	r3, #0
 800173c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001740:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e076      	b.n	8001836 <process_audio_data+0x106>
        mic_buffers[0][i] = (float32_t)(processing_ptr_a[i * 2] >> 8);
 8001748:	4bcb      	ldr	r3, [pc, #812]	@ (8001a78 <process_audio_data+0x348>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001750:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	121b      	asrs	r3, r3, #8
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001766:	4ac5      	ldr	r2, [pc, #788]	@ (8001a7c <process_audio_data+0x34c>)
 8001768:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800176c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	edc3 7a00 	vstr	s15, [r3]
        mic_buffers[1][i] = (float32_t)(processing_ptr_a[i * 2 + 1] >> 8);
 800177a:	4bbf      	ldr	r3, [pc, #764]	@ (8001a78 <process_audio_data+0x348>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001782:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	3304      	adds	r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	121b      	asrs	r3, r3, #8
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	4ab8      	ldr	r2, [pc, #736]	@ (8001a7c <process_audio_data+0x34c>)
 800179c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80017a0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	edc3 7a00 	vstr	s15, [r3]
        mic_buffers[2][i] = (float32_t)(processing_ptr_b[i * 2] >> 8);
 80017b2:	4bb3      	ldr	r3, [pc, #716]	@ (8001a80 <process_audio_data+0x350>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80017ba:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	121b      	asrs	r3, r3, #8
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	4aaa      	ldr	r2, [pc, #680]	@ (8001a7c <process_audio_data+0x34c>)
 80017d2:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80017d6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	edc3 7a00 	vstr	s15, [r3]
        mic_buffers[3][i] = (float32_t)(processing_ptr_b[i * 2 + 1] >> 8);
 80017e8:	4ba5      	ldr	r3, [pc, #660]	@ (8001a80 <process_audio_data+0x350>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80017f0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	3304      	adds	r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	121b      	asrs	r3, r3, #8
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	4a9c      	ldr	r2, [pc, #624]	@ (8001a7c <process_audio_data+0x34c>)
 800180a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800180e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < FFT_SIZE; i++) {
 8001820:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001824:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001830:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800183a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001844:	db80      	blt.n	8001748 <process_audio_data+0x18>
    }

    // --- Step 2: Remove DC offset ---
    // NOTE: The IIR filter has been temporarily disabled to debug instability.
    // We will only perform DC offset removal for now.
    for (int i = 0; i < NUM_MICS; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 800184c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e037      	b.n	80018c4 <process_audio_data+0x194>
    	// Calculate the DC offset (mean) of the buffer
    	arm_mean_f32(mic_buffers[i], FFT_SIZE, &dc_offset);
 8001854:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001858:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	031b      	lsls	r3, r3, #12
 8001860:	4a86      	ldr	r2, [pc, #536]	@ (8001a7c <process_audio_data+0x34c>)
 8001862:	1898      	adds	r0, r3, r2
 8001864:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001868:	3b18      	subs	r3, #24
 800186a:	461a      	mov	r2, r3
 800186c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001870:	f00b fa5a 	bl	800cd28 <arm_mean_f32>

    	// Subtract the DC offset from every sample in the buffer
    	arm_offset_f32(mic_buffers[i], -dc_offset, mic_buffers[i], FFT_SIZE);
 8001874:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001878:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	031b      	lsls	r3, r3, #12
 8001880:	4a7e      	ldr	r2, [pc, #504]	@ (8001a7c <process_audio_data+0x34c>)
 8001882:	1898      	adds	r0, r3, r2
 8001884:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001888:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 800188c:	eef1 7a67 	vneg.f32	s15, s15
 8001890:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001894:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	031b      	lsls	r3, r3, #12
 800189c:	4a77      	ldr	r2, [pc, #476]	@ (8001a7c <process_audio_data+0x34c>)
 800189e:	4413      	add	r3, r2
 80018a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a4:	4619      	mov	r1, r3
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	f00c f95b 	bl	800db64 <arm_offset_f32>
    for (int i = 0; i < NUM_MICS; i++) {
 80018ae:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018b2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80018be:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018c8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	ddc0      	ble.n	8001854 <process_audio_data+0x124>
    }
    // --- Calculate TDOA lag for adjacent microphone pairs ---
    int16_t lags[NUM_PAIRS];
    lags[0] = calculate_tdoa_lag(mic_buffers[0], mic_buffers[1], all_correlation_outputs[0]); // Pair 1-2
 80018d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d6:	3b14      	subs	r3, #20
 80018d8:	461a      	mov	r2, r3
 80018da:	496a      	ldr	r1, [pc, #424]	@ (8001a84 <process_audio_data+0x354>)
 80018dc:	4867      	ldr	r0, [pc, #412]	@ (8001a7c <process_audio_data+0x34c>)
 80018de:	f000 f9c3 	bl	8001c68 <calculate_tdoa_lag>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ea:	f823 2c20 	strh.w	r2, [r3, #-32]
    lags[1] = calculate_tdoa_lag(mic_buffers[1], mic_buffers[2], all_correlation_outputs[1]); // Pair 2-3
 80018ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018f2:	3b14      	subs	r3, #20
 80018f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f8:	461a      	mov	r2, r3
 80018fa:	4963      	ldr	r1, [pc, #396]	@ (8001a88 <process_audio_data+0x358>)
 80018fc:	4861      	ldr	r0, [pc, #388]	@ (8001a84 <process_audio_data+0x354>)
 80018fe:	f000 f9b3 	bl	8001c68 <calculate_tdoa_lag>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800190a:	f823 2c1e 	strh.w	r2, [r3, #-30]
    lags[2] = calculate_tdoa_lag(mic_buffers[2], mic_buffers[3], all_correlation_outputs[2]); // Pair 3-4
 800190e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001912:	3b14      	subs	r3, #20
 8001914:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001918:	461a      	mov	r2, r3
 800191a:	495c      	ldr	r1, [pc, #368]	@ (8001a8c <process_audio_data+0x35c>)
 800191c:	485a      	ldr	r0, [pc, #360]	@ (8001a88 <process_audio_data+0x358>)
 800191e:	f000 f9a3 	bl	8001c68 <calculate_tdoa_lag>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800192a:	f823 2c1c 	strh.w	r2, [r3, #-28]

    // --- Convert each lag into an angle and average the results ---
    float32_t angles[NUM_PAIRS];
    float32_t angle_sum = 0.0f;
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001936:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800193a:	6013      	str	r3, [r2, #0]
    uint8_t valid_pairs = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001942:	f102 0223 	add.w	r2, r2, #35	@ 0x23
 8001946:	7013      	strb	r3, [r2, #0]

    for (int i = 0; i < NUM_PAIRS; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 800194e:	f102 021c 	add.w	r2, r2, #28
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e076      	b.n	8001a44 <process_audio_data+0x314>
        // All pairs use the same adjacent distance for this calculation
        angles[i] = calculate_angle_from_lag(lags[i], MIC_ADJACENT_DISTANCE);
 8001956:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800195a:	461a      	mov	r2, r3
 800195c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001960:	f103 031c 	add.w	r3, r3, #28
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 800196e:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8001a90 <process_audio_data+0x360>
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f918 	bl	8001ba8 <calculate_angle_from_lag>
 8001978:	eef0 7a40 	vmov.f32	s15, s0
 800197c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001980:	461a      	mov	r2, r3
 8001982:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001986:	f103 031c 	add.w	r3, r3, #28
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b2c      	subs	r3, #44	@ 0x2c
 8001992:	edc3 7a00 	vstr	s15, [r3]
        // A simple check to exclude potentially invalid angles from averaging
        if (angles[i] > 0.0f && angles[i] < 180.0f) {
 8001996:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800199a:	461a      	mov	r2, r3
 800199c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80019a0:	f103 031c 	add.w	r3, r3, #28
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b2c      	subs	r3, #44	@ 0x2c
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	dd39      	ble.n	8001a2e <process_audio_data+0x2fe>
 80019ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019be:	461a      	mov	r2, r3
 80019c0:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80019c4:	f103 031c 	add.w	r3, r3, #28
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3b2c      	subs	r3, #44	@ 0x2c
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001a94 <process_audio_data+0x364>
 80019d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d525      	bpl.n	8001a2e <process_audio_data+0x2fe>
             angle_sum += angles[i];
 80019e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019e6:	461a      	mov	r2, r3
 80019e8:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80019ec:	f103 031c 	add.w	r3, r3, #28
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b2c      	subs	r3, #44	@ 0x2c
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001a00:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001a10:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001a14:	edc3 7a00 	vstr	s15, [r3]
             valid_pairs++;
 8001a18:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001a1c:	f103 0323 	add.w	r3, r3, #35	@ 0x23
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001a28:	f102 0223 	add.w	r2, r2, #35	@ 0x23
 8001a2c:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < NUM_PAIRS; i++) {
 8001a2e:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001a32:	f103 031c 	add.w	r3, r3, #28
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001a3e:	f102 021c 	add.w	r2, r2, #28
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001a48:	f103 031c 	add.w	r3, r3, #28
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	dd81      	ble.n	8001956 <process_audio_data+0x226>
        }
    }
    
    // Only calculate an average if all 3 pairs produce a valid angle.
    average_angle = (valid_pairs == NUM_PAIRS) ? (angle_sum / NUM_PAIRS) : average_angle;
 8001a52:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001a56:	f103 0323 	add.w	r3, r3, #35	@ 0x23
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d11b      	bne.n	8001a98 <process_audio_data+0x368>
 8001a60:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001a64:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a74:	e013      	b.n	8001a9e <process_audio_data+0x36e>
 8001a76:	bf00      	nop
 8001a78:	200102dc 	.word	0x200102dc
 8001a7c:	200082c0 	.word	0x200082c0
 8001a80:	200102e0 	.word	0x200102e0
 8001a84:	200092c0 	.word	0x200092c0
 8001a88:	2000a2c0 	.word	0x2000a2c0
 8001a8c:	2000b2c0 	.word	0x2000b2c0
 8001a90:	3dcccccd 	.word	0x3dcccccd
 8001a94:	43340000 	.word	0x43340000
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <process_audio_data+0x3b8>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <process_audio_data+0x3b8>)
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
    
    // --- Check if it's time to transmit ---
    tx_cycle_counter++;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <process_audio_data+0x3bc>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <process_audio_data+0x3bc>)
 8001aae:	701a      	strb	r2, [r3, #0]
    if (tx_cycle_counter >= UART_TX_CYCLE_INTERVAL) {
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <process_audio_data+0x3bc>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d911      	bls.n	8001adc <process_audio_data+0x3ac>
        transmit_uart_data(average_angle, lags, all_correlation_outputs);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <process_audio_data+0x3b8>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001ac2:	3a14      	subs	r2, #20
 8001ac4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ac8:	3b20      	subs	r3, #32
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad2:	f000 f80d 	bl	8001af0 <transmit_uart_data>
        tx_cycle_counter = 0; // Reset counter
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <process_audio_data+0x3bc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
    }
}
 8001adc:	bf00      	nop
 8001ade:	f507 5740 	add.w	r7, r7, #12288	@ 0x3000
 8001ae2:	3730      	adds	r7, #48	@ 0x30
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200102e4 	.word	0x200102e4
 8001aec:	20013369 	.word	0x20013369

08001af0 <transmit_uart_data>:
 * @brief Fills and transmits a data packet over UART using DMA.
 * @param angle The final averaged angle in degrees.
 * @param lags  Pointer to an array of the 3 individual lag values.
 * @param correlation_results 2D array containing the full correlation output for each pair.
 */
void transmit_uart_data(float32_t angle, int16_t* lags, float32_t correlation_results[NUM_PAIRS][FFT_SIZE]) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001afa:	60b8      	str	r0, [r7, #8]
 8001afc:	6079      	str	r1, [r7, #4]
    if (huart1.gState != HAL_UART_STATE_READY) {
 8001afe:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <transmit_uart_data+0x9c>)
 8001b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d13c      	bne.n	8001b82 <transmit_uart_data+0x92>
        return; 
    }

    uart_tx_packet.header = UART_PACKET_HEADER;
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <transmit_uart_data+0xa0>)
 8001b0a:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8001b0e:	801a      	strh	r2, [r3, #0]
    uart_tx_packet.angle_q10 = (uint16_t)(angle * 1024.0f);
 8001b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b14:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001b94 <transmit_uart_data+0xa4>
 8001b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <transmit_uart_data+0xa0>)
 8001b28:	805a      	strh	r2, [r3, #2]
    uart_tx_packet.timestamp = HAL_GetTick();
 8001b2a:	f001 fa67 	bl	8002ffc <HAL_GetTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <transmit_uart_data+0xa0>)
 8001b32:	6053      	str	r3, [r2, #4]
    memcpy(uart_tx_packet.lags, lags, sizeof(uart_tx_packet.lags));
 8001b34:	2206      	movs	r2, #6
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	4817      	ldr	r0, [pc, #92]	@ (8001b98 <transmit_uart_data+0xa8>)
 8001b3a:	f00d fb84 	bl	800f246 <memcpy>
    uart_tx_packet.reserved = 0;
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <transmit_uart_data+0xa0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	81da      	strh	r2, [r3, #14]

    // Copy all three full correlation results into the packet
    memcpy(uart_tx_packet.correlation_pair1, correlation_results[0], FFT_SIZE * sizeof(float32_t));
 8001b44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4814      	ldr	r0, [pc, #80]	@ (8001b9c <transmit_uart_data+0xac>)
 8001b4c:	f00d fb7b 	bl	800f246 <memcpy>
    memcpy(uart_tx_packet.correlation_pair2, correlation_results[1], FFT_SIZE * sizeof(float32_t));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4810      	ldr	r0, [pc, #64]	@ (8001ba0 <transmit_uart_data+0xb0>)
 8001b5e:	f00d fb72 	bl	800f246 <memcpy>
    memcpy(uart_tx_packet.correlation_pair3, correlation_results[2], FFT_SIZE * sizeof(float32_t));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480d      	ldr	r0, [pc, #52]	@ (8001ba4 <transmit_uart_data+0xb4>)
 8001b70:	f00d fb69 	bl	800f246 <memcpy>

    // Start the non-blocking DMA transfer
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&uart_tx_packet, sizeof(UART_DataPacket));
 8001b74:	f243 0210 	movw	r2, #12304	@ 0x3010
 8001b78:	4905      	ldr	r1, [pc, #20]	@ (8001b90 <transmit_uart_data+0xa0>)
 8001b7a:	4804      	ldr	r0, [pc, #16]	@ (8001b8c <transmit_uart_data+0x9c>)
 8001b7c:	f009 fd6e 	bl	800b65c <HAL_UART_Transmit_DMA>
 8001b80:	e000      	b.n	8001b84 <transmit_uart_data+0x94>
        return; 
 8001b82:	bf00      	nop
}
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20013658 	.word	0x20013658
 8001b90:	20010358 	.word	0x20010358
 8001b94:	44800000 	.word	0x44800000
 8001b98:	20010360 	.word	0x20010360
 8001b9c:	20010368 	.word	0x20010368
 8001ba0:	20011368 	.word	0x20011368
 8001ba4:	20012368 	.word	0x20012368

08001ba8 <calculate_angle_from_lag>:
/**
  * @brief  Calculates the direction angle from a TDOA lag and pair distance.
  * @retval Angle in degrees (0-180).
  */
float32_t calculate_angle_from_lag(int16_t lag, float32_t distance)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	ed87 0a00 	vstr	s0, [r7]
 8001bb4:	80fb      	strh	r3, [r7, #6]
    float32_t dt = (float32_t)lag / SAMPLE_RATE;
 8001bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc2:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001c58 <calculate_angle_from_lag+0xb0>
 8001bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bca:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t cos_theta = (dt * SPEED_OF_SOUND) / distance;
 8001bce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001c5c <calculate_angle_from_lag+0xb4>
 8001bd6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001bda:	ed97 7a00 	vldr	s14, [r7]
 8001bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be2:	edc7 7a04 	vstr	s15, [r7, #16]
    cos_theta = fmaxf(-1.0f, fminf(1.0f, cos_theta));
 8001be6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001bea:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bee:	f010 ff03 	bl	80129f8 <fminf>
 8001bf2:	eef0 7a40 	vmov.f32	s15, s0
 8001bf6:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	f010 fede 	bl	80129be <fmaxf>
 8001c02:	ed87 0a04 	vstr	s0, [r7, #16]
    float32_t angle_rad = acosf(cos_theta);
 8001c06:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c0a:	f010 fe87 	bl	801291c <acosf>
 8001c0e:	ed87 0a03 	vstr	s0, [r7, #12]
    return angle_rad * 180.0f / M_PI;
 8001c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c16:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001c60 <calculate_angle_from_lag+0xb8>
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1e:	ee17 0a90 	vmov	r0, s15
 8001c22:	f7fe fc95 	bl	8000550 <__aeabi_f2d>
 8001c26:	a30a      	add	r3, pc, #40	@ (adr r3, 8001c50 <calculate_angle_from_lag+0xa8>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fe12 	bl	8000854 <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ffda 	bl	8000bf0 <__aeabi_d2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	ee07 3a90 	vmov	s15, r3
}
 8001c42:	eeb0 0a67 	vmov.f32	s0, s15
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	f3af 8000 	nop.w
 8001c50:	54442d18 	.word	0x54442d18
 8001c54:	400921fb 	.word	0x400921fb
 8001c58:	473b8000 	.word	0x473b8000
 8001c5c:	43ab8000 	.word	0x43ab8000
 8001c60:	43340000 	.word	0x43340000
 8001c64:	00000000 	.word	0x00000000

08001c68 <calculate_tdoa_lag>:
  * @param  mic1_data, mic2_data: Pointers to input audio buffers.
  * @param  correlation_result: Pointer to a buffer to store the IFFT output.
  * @retval The lag in samples.
  */
int16_t calculate_tdoa_lag(float32_t* mic1_data, float32_t* mic2_data, float32_t* correlation_result)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	f5ad 5d01 	sub.w	sp, sp, #8256	@ 0x2040
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c76:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001c7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c7e:	f843 1c40 	str.w	r1, [r3, #-64]
 8001c82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c86:	f843 2c44 	str.w	r2, [r3, #-68]
    float32_t temp_corr_buffer[FFT_SIZE * 2];
    memcpy(fft_buffer1, mic1_data, FFT_SIZE * sizeof(float32_t));
 8001c8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c92:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8001c96:	48d2      	ldr	r0, [pc, #840]	@ (8001fe0 <calculate_tdoa_lag+0x378>)
 8001c98:	f00d fad5 	bl	800f246 <memcpy>
    memcpy(fft_buffer2, mic2_data, FFT_SIZE * sizeof(float32_t));
 8001c9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ca0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ca4:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8001ca8:	48ce      	ldr	r0, [pc, #824]	@ (8001fe4 <calculate_tdoa_lag+0x37c>)
 8001caa:	f00d facc 	bl	800f246 <memcpy>
    arm_rfft_fast_f32(&fft_instance, fft_buffer1, fft_buffer1, 0);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4acb      	ldr	r2, [pc, #812]	@ (8001fe0 <calculate_tdoa_lag+0x378>)
 8001cb2:	49cb      	ldr	r1, [pc, #812]	@ (8001fe0 <calculate_tdoa_lag+0x378>)
 8001cb4:	48cc      	ldr	r0, [pc, #816]	@ (8001fe8 <calculate_tdoa_lag+0x380>)
 8001cb6:	f00b fa67 	bl	800d188 <arm_rfft_fast_f32>
    arm_rfft_fast_f32(&fft_instance, fft_buffer2, fft_buffer2, 0);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	4ac9      	ldr	r2, [pc, #804]	@ (8001fe4 <calculate_tdoa_lag+0x37c>)
 8001cbe:	49c9      	ldr	r1, [pc, #804]	@ (8001fe4 <calculate_tdoa_lag+0x37c>)
 8001cc0:	48c9      	ldr	r0, [pc, #804]	@ (8001fe8 <calculate_tdoa_lag+0x380>)
 8001cc2:	f00b fa61 	bl	800d188 <arm_rfft_fast_f32>

    for (int i = 0; i < FFT_SIZE * 2; i += 2) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001ccc:	f102 0204 	add.w	r2, r2, #4
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e130      	b.n	8001f36 <calculate_tdoa_lag+0x2ce>
        float32_t X_re = fft_buffer1[i], X_im = fft_buffer1[i+1];
 8001cd4:	4ac2      	ldr	r2, [pc, #776]	@ (8001fe0 <calculate_tdoa_lag+0x378>)
 8001cd6:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001cda:	f103 0304 	add.w	r3, r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001cea:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001cf4:	f103 0304 	add.w	r3, r3, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	4ab8      	ldr	r2, [pc, #736]	@ (8001fe0 <calculate_tdoa_lag+0x378>)
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001d08:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001d0c:	6013      	str	r3, [r2, #0]
        float32_t Y_re = fft_buffer2[i], Y_im = fft_buffer2[i+1];
 8001d0e:	4ab5      	ldr	r2, [pc, #724]	@ (8001fe4 <calculate_tdoa_lag+0x37c>)
 8001d10:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001d14:	f103 0304 	add.w	r3, r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001d24:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001d2e:	f103 0304 	add.w	r3, r3, #4
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4aab      	ldr	r2, [pc, #684]	@ (8001fe4 <calculate_tdoa_lag+0x37c>)
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001d42:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001d46:	6013      	str	r3, [r2, #0]
        float32_t R_re = X_re * Y_re + X_im * Y_im;
 8001d48:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d4c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d58:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d68:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d6c:	edd3 6a00 	vldr	s13, [r3]
 8001d70:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d74:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d84:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d88:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
        float32_t R_im = X_im * Y_re - X_re * Y_im;
 8001d90:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d94:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d98:	ed93 7a00 	vldr	s14, [r3]
 8001d9c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001da0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001db0:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001db4:	edd3 6a00 	vldr	s13, [r3]
 8001db8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001dbc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dcc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001dd0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001dd4:	edc3 7a00 	vstr	s15, [r3]
        float32_t R_mag;
        arm_sqrt_f32(R_re * R_re + R_im * R_im, &R_mag);
 8001dd8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001ddc:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001de8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001dec:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001e00:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e04:	edc3 7a00 	vstr	s15, [r3]
 8001e08:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e0c:	3b34      	subs	r3, #52	@ 0x34
 8001e0e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001e12:	f102 0220 	add.w	r2, r2, #32
 8001e16:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001e18:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001e1c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	db11      	blt.n	8001e52 <calculate_tdoa_lag+0x1ea>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001e2e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001e32:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e36:	ed93 0a00 	vldr	s0, [r3]
 8001e3a:	f010 fd9b 	bl	8012974 <sqrtf>
 8001e3e:	eef0 7a40 	vmov.f32	s15, s0
 8001e42:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001e46:	f103 0320 	add.w	r3, r3, #32
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001e50:	e008      	b.n	8001e64 <calculate_tdoa_lag+0x1fc>
    }
    else
    {
      *pOut = 0.0f;
 8001e52:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001e56:	f103 0320 	add.w	r3, r3, #32
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001e62:	bf00      	nop
        if (R_mag > 1e-9) {
 8001e64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e68:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb6f 	bl	8000550 <__aeabi_f2d>
 8001e72:	a359      	add	r3, pc, #356	@ (adr r3, 8001fd8 <calculate_tdoa_lag+0x370>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fe52 	bl	8000b20 <__aeabi_dcmpgt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d032      	beq.n	8001ee8 <calculate_tdoa_lag+0x280>
            temp_corr_buffer[i]   = R_re / R_mag;
 8001e82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e86:	ed13 7a0d 	vldr	s14, [r3, #-52]	@ 0xffffffcc
 8001e8a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001e8e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001e92:	edd3 6a00 	vldr	s13, [r3]
 8001e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001ea4:	f103 0304 	add.w	r3, r3, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b28      	subs	r3, #40	@ 0x28
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
            temp_corr_buffer[i+1] = R_im / R_mag;
 8001eb4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eb8:	ed13 7a0d 	vldr	s14, [r3, #-52]	@ 0xffffffcc
 8001ebc:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001ec0:	f103 0304 	add.w	r3, r3, #4
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001ecc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001ed0:	edd2 6a00 	vldr	s13, [r2]
 8001ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b28      	subs	r3, #40	@ 0x28
 8001ee2:	edc3 7a00 	vstr	s15, [r3]
 8001ee6:	e01b      	b.n	8001f20 <calculate_tdoa_lag+0x2b8>
        } else {
            temp_corr_buffer[i]   = 0.0f;
 8001ee8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eec:	461a      	mov	r2, r3
 8001eee:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001ef2:	f103 0304 	add.w	r3, r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b28      	subs	r3, #40	@ 0x28
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
            temp_corr_buffer[i+1] = 0.0f;
 8001f04:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001f08:	f103 0304 	add.w	r3, r3, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b28      	subs	r3, #40	@ 0x28
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FFT_SIZE * 2; i += 2) {
 8001f20:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001f24:	f103 0304 	add.w	r3, r3, #4
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001f30:	f102 0204 	add.w	r2, r2, #4
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001f3a:	f103 0304 	add.w	r3, r3, #4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f44:	f6ff aec6 	blt.w	8001cd4 <calculate_tdoa_lag+0x6c>
        }
    }
    
    arm_rfft_fast_f32(&fft_instance, temp_corr_buffer, correlation_result, 1);
 8001f48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001f52:	3928      	subs	r1, #40	@ 0x28
 8001f54:	2301      	movs	r3, #1
 8001f56:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8001f5a:	4823      	ldr	r0, [pc, #140]	@ (8001fe8 <calculate_tdoa_lag+0x380>)
 8001f5c:	f00b f914 	bl	800d188 <arm_rfft_fast_f32>
    
    float32_t max_val;
    uint32_t max_idx;
    arm_max_f32(correlation_result, FFT_SIZE, &max_val, &max_idx);
 8001f60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f64:	3b30      	subs	r3, #48	@ 0x30
 8001f66:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001f6a:	3a2c      	subs	r2, #44	@ 0x2c
 8001f6c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001f70:	4608      	mov	r0, r1
 8001f72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f76:	f850 0c44 	ldr.w	r0, [r0, #-68]
 8001f7a:	f00a ff15 	bl	800cda8 <arm_max_f32>
    int16_t lag_val = max_idx;
 8001f7e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f82:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001f86:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001f8a:	f102 0202 	add.w	r2, r2, #2
 8001f8e:	8013      	strh	r3, [r2, #0]
    if (lag_val >= FFT_SIZE / 2) {
 8001f90:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001f94:	f103 0302 	add.w	r3, r3, #2
 8001f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa0:	db0c      	blt.n	8001fbc <calculate_tdoa_lag+0x354>
        lag_val -= FFT_SIZE;
 8001fa2:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001fa6:	f103 0302 	add.w	r3, r3, #2
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001fb6:	f102 0202 	add.w	r2, r2, #2
 8001fba:	8013      	strh	r3, [r2, #0]
    }
    return lag_val;
 8001fbc:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001fc0:	f103 0302 	add.w	r3, r3, #2
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f507 5701 	add.w	r7, r7, #8256	@ 0x2040
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	e826d695 	.word	0xe826d695
 8001fdc:	3e112e0b 	.word	0x3e112e0b
 8001fe0:	2000c2c0 	.word	0x2000c2c0
 8001fe4:	2000e2c0 	.word	0x2000e2c0
 8001fe8:	200102c0 	.word	0x200102c0

08001fec <trigger_processing>:

// --- DMA Transfer Complete Callbacks ---
volatile uint8_t dma_sync_flags = 0;
void trigger_processing(uint8_t half) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
    if (dma_sync_flags == 0x03) {
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <trigger_processing+0x4c>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d115      	bne.n	800202c <trigger_processing+0x40>
        if(half == 0) {
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <trigger_processing+0x28>
            processing_ptr_a = &sai_a_dma_buffer[0];
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <trigger_processing+0x50>)
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <trigger_processing+0x54>)
 800200a:	601a      	str	r2, [r3, #0]
            processing_ptr_b = &sai_b_dma_buffer[0];
 800200c:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <trigger_processing+0x58>)
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <trigger_processing+0x5c>)
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e005      	b.n	8002020 <trigger_processing+0x34>
        } else {
            processing_ptr_a = &sai_a_dma_buffer[SAI_RX_BUFFER_SIZE];
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <trigger_processing+0x50>)
 8002016:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <trigger_processing+0x60>)
 8002018:	601a      	str	r2, [r3, #0]
            processing_ptr_b = &sai_b_dma_buffer[SAI_RX_BUFFER_SIZE];
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <trigger_processing+0x58>)
 800201c:	4a0c      	ldr	r2, [pc, #48]	@ (8002050 <trigger_processing+0x64>)
 800201e:	601a      	str	r2, [r3, #0]
        }
        data_ready_flags = 1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <trigger_processing+0x68>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
        dma_sync_flags = 0;
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <trigger_processing+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
    }
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20013368 	.word	0x20013368
 800203c:	200102dc 	.word	0x200102dc
 8002040:	200002c0 	.word	0x200002c0
 8002044:	200102e0 	.word	0x200102e0
 8002048:	200042c0 	.word	0x200042c0
 800204c:	200022c0 	.word	0x200022c0
 8002050:	200062c0 	.word	0x200062c0
 8002054:	200102d8 	.word	0x200102d8

08002058 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if (hsai->Instance == SAI1_Block_A) {
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <HAL_SAI_RxHalfCpltCallback+0x4c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <HAL_SAI_RxHalfCpltCallback+0x24>
      dma_sync_flags |= (1 << 0);
 800206a:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <HAL_SAI_RxHalfCpltCallback+0x50>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e00c      	b.n	8002096 <HAL_SAI_RxHalfCpltCallback+0x3e>
  } else if (hsai->Instance == SAI1_Block_B) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <HAL_SAI_RxHalfCpltCallback+0x54>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d107      	bne.n	8002096 <HAL_SAI_RxHalfCpltCallback+0x3e>
      dma_sync_flags |= (1 << 1);
 8002086:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8002094:	701a      	strb	r2, [r3, #0]
  }
  trigger_processing(0);
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff ffa8 	bl	8001fec <trigger_processing>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40015404 	.word	0x40015404
 80020a8:	20013368 	.word	0x20013368
 80020ac:	40015424 	.word	0x40015424

080020b0 <HAL_SAI_RxCpltCallback>:
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if (hsai->Instance == SAI1_Block_A) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0f      	ldr	r2, [pc, #60]	@ (80020fc <HAL_SAI_RxCpltCallback+0x4c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d108      	bne.n	80020d4 <HAL_SAI_RxCpltCallback+0x24>
      dma_sync_flags |= (1 << 0);
 80020c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <HAL_SAI_RxCpltCallback+0x50>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <HAL_SAI_RxCpltCallback+0x50>)
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e00c      	b.n	80020ee <HAL_SAI_RxCpltCallback+0x3e>
  } else if (hsai->Instance == SAI1_Block_B) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_SAI_RxCpltCallback+0x54>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d107      	bne.n	80020ee <HAL_SAI_RxCpltCallback+0x3e>
      dma_sync_flags |= (1 << 1);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_SAI_RxCpltCallback+0x50>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <HAL_SAI_RxCpltCallback+0x50>)
 80020ec:	701a      	strb	r2, [r3, #0]
  }
  trigger_processing(1);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff ff7c 	bl	8001fec <trigger_processing>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40015404 	.word	0x40015404
 8002100:	20013368 	.word	0x20013368
 8002104:	40015424 	.word	0x40015424

08002108 <HAL_UART_TxCpltCallback>:
  * @brief  UART Transmit Complete Callback.
  * @param  huart: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  // the huart->gState back to HAL_UART_STATE_READY, allowing the next transfer to start.
  if (huart->Instance == USART1)
  {
      // You could add code here if you needed to, e.g., to toggle an LED.
  }
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a04      	ldr	r2, [pc, #16]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800212e:	f000 ff51 	bl	8002fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40014800 	.word	0x40014800

08002140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002144:	b672      	cpsid	i
}
 8002146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <Error_Handler+0x8>

0800214c <MX_SAI1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel13;
DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002150:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002152:	4a2f      	ldr	r2, [pc, #188]	@ (8002210 <MX_SAI1_Init+0xc4>)
 8002154:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8002156:	4b2d      	ldr	r3, [pc, #180]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002158:	2201      	movs	r2, #1
 800215a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800215c:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <MX_SAI1_Init+0xc0>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8002162:	4b2a      	ldr	r3, [pc, #168]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002168:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800216a:	4b28      	ldr	r3, [pc, #160]	@ (800220c <MX_SAI1_Init+0xc0>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002170:	4b26      	ldr	r3, [pc, #152]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002176:	4b25      	ldr	r3, [pc, #148]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002178:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800217c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800217e:	4b23      	ldr	r3, [pc, #140]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <MX_SAI1_Init+0xc0>)
 800218c:	2200      	movs	r2, #0
 800218e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002190:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <MX_SAI1_Init+0xc0>)
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002196:	2302      	movs	r3, #2
 8002198:	2202      	movs	r2, #2
 800219a:	2100      	movs	r1, #0
 800219c:	481b      	ldr	r0, [pc, #108]	@ (800220c <MX_SAI1_Init+0xc0>)
 800219e:	f007 fec3 	bl	8009f28 <HAL_SAI_InitProtocol>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 80021a8:	f7ff ffca 	bl	8002140 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002218 <MX_SAI1_Init+0xcc>)
 80021b0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021b4:	2203      	movs	r2, #3
 80021b6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80021b8:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80021c4:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021dc:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80021de:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80021f0:	2302      	movs	r3, #2
 80021f2:	2202      	movs	r2, #2
 80021f4:	2100      	movs	r1, #0
 80021f6:	4807      	ldr	r0, [pc, #28]	@ (8002214 <MX_SAI1_Init+0xc8>)
 80021f8:	f007 fe96 	bl	8009f28 <HAL_SAI_InitProtocol>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8002202:	f7ff ff9d 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2001336c 	.word	0x2001336c
 8002210:	40015404 	.word	0x40015404
 8002214:	20013404 	.word	0x20013404
 8002218:	40015424 	.word	0x40015424

0800221c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a4      	sub	sp, #144	@ 0x90
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4ab2      	ldr	r2, [pc, #712]	@ (80024f4 <HAL_SAI_MspInit+0x2d8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	f040 80b1 	bne.w	8002392 <HAL_SAI_MspInit+0x176>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002230:	4bb1      	ldr	r3, [pc, #708]	@ (80024f8 <HAL_SAI_MspInit+0x2dc>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <HAL_SAI_MspInit+0x4a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002238:	4bb0      	ldr	r3, [pc, #704]	@ (80024fc <HAL_SAI_MspInit+0x2e0>)
 800223a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800223e:	4aaf      	ldr	r2, [pc, #700]	@ (80024fc <HAL_SAI_MspInit+0x2e0>)
 8002240:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002244:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002248:	4bac      	ldr	r3, [pc, #688]	@ (80024fc <HAL_SAI_MspInit+0x2e0>)
 800224a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800224e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	205a      	movs	r0, #90	@ 0x5a
 800225c:	f001 fb7e 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8002260:	205a      	movs	r0, #90	@ 0x5a
 8002262:	f001 fb95 	bl	8003990 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8002266:	4ba4      	ldr	r3, [pc, #656]	@ (80024f8 <HAL_SAI_MspInit+0x2dc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4aa2      	ldr	r2, [pc, #648]	@ (80024f8 <HAL_SAI_MspInit+0x2dc>)
 800226e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002270:	2370      	movs	r3, #112	@ 0x70
 8002272:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002286:	230d      	movs	r3, #13
 8002288:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800228c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002290:	4619      	mov	r1, r3
 8002292:	489b      	ldr	r0, [pc, #620]	@ (8002500 <HAL_SAI_MspInit+0x2e4>)
 8002294:	f003 fb0c 	bl	80058b0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8002298:	2322      	movs	r3, #34	@ 0x22
 800229a:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI1_A;
 800229c:	2324      	movs	r3, #36	@ 0x24
 800229e:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80022ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80022b2:	2302      	movs	r3, #2
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80022b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80022bc:	2301      	movs	r3, #1
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80022c8:	2300      	movs	r3, #0
 80022ca:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80022e4:	2300      	movs	r3, #0
 80022e6:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80022ec:	2300      	movs	r3, #0
 80022ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel14) != HAL_OK)
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	4983      	ldr	r1, [pc, #524]	@ (8002504 <HAL_SAI_MspInit+0x2e8>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fc90 	bl	8004c1c <HAL_DMAEx_List_BuildNode>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 8002302:	f7ff ff1d 	bl	8002140 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel14, NULL, &Node_GPDMA1_Channel14) != HAL_OK)
 8002306:	4a7f      	ldr	r2, [pc, #508]	@ (8002504 <HAL_SAI_MspInit+0x2e8>)
 8002308:	2100      	movs	r1, #0
 800230a:	487f      	ldr	r0, [pc, #508]	@ (8002508 <HAL_SAI_MspInit+0x2ec>)
 800230c:	f002 fc9c 	bl	8004c48 <HAL_DMAEx_List_InsertNode>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_SAI_MspInit+0xfe>
    {
      Error_Handler();
 8002316:	f7ff ff13 	bl	8002140 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel14) != HAL_OK)
 800231a:	487b      	ldr	r0, [pc, #492]	@ (8002508 <HAL_SAI_MspInit+0x2ec>)
 800231c:	f002 fd5d 	bl	8004dda <HAL_DMAEx_List_SetCircularMode>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 8002326:	f7ff ff0b 	bl	8002140 <Error_Handler>
    }

    handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 800232a:	4b78      	ldr	r3, [pc, #480]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 800232c:	4a78      	ldr	r2, [pc, #480]	@ (8002510 <HAL_SAI_MspInit+0x2f4>)
 800232e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel14.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8002330:	4b76      	ldr	r3, [pc, #472]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 8002332:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002336:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel14.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002338:	4b74      	ldr	r3, [pc, #464]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 800233a:	2200      	movs	r2, #0
 800233c:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel14.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800233e:	4b73      	ldr	r3, [pc, #460]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 8002340:	2200      	movs	r2, #0
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel14.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002344:	4b71      	ldr	r3, [pc, #452]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel14.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800234a:	4b70      	ldr	r3, [pc, #448]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 800234c:	2281      	movs	r2, #129	@ 0x81
 800234e:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8002350:	486e      	ldr	r0, [pc, #440]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 8002352:	f002 faa3 	bl	800489c <HAL_DMAEx_List_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_SAI_MspInit+0x144>
    {
      Error_Handler();
 800235c:	f7ff fef0 	bl	8002140 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel14, &List_GPDMA1_Channel14) != HAL_OK)
 8002360:	4969      	ldr	r1, [pc, #420]	@ (8002508 <HAL_SAI_MspInit+0x2ec>)
 8002362:	486a      	ldr	r0, [pc, #424]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 8002364:	f002 fd9a 	bl	8004e9c <HAL_DMAEx_List_LinkQ>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_SAI_MspInit+0x156>
    {
      Error_Handler();
 800236e:	f7ff fee7 	bl	8002140 <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel14);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a65      	ldr	r2, [pc, #404]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 8002376:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800237a:	4a64      	ldr	r2, [pc, #400]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002380:	2110      	movs	r1, #16
 8002382:	4862      	ldr	r0, [pc, #392]	@ (800250c <HAL_SAI_MspInit+0x2f0>)
 8002384:	f001 ffa8 	bl	80042d8 <HAL_DMA_ConfigChannelAttributes>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 800238e:	f7ff fed7 	bl	8002140 <Error_Handler>
    }

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5f      	ldr	r2, [pc, #380]	@ (8002514 <HAL_SAI_MspInit+0x2f8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	f040 80cd 	bne.w	8002538 <HAL_SAI_MspInit+0x31c>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800239e:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <HAL_SAI_MspInit+0x2dc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_SAI_MspInit+0x1b8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80023a6:	4b55      	ldr	r3, [pc, #340]	@ (80024fc <HAL_SAI_MspInit+0x2e0>)
 80023a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023ac:	4a53      	ldr	r2, [pc, #332]	@ (80024fc <HAL_SAI_MspInit+0x2e0>)
 80023ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023b2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023b6:	4b51      	ldr	r3, [pc, #324]	@ (80024fc <HAL_SAI_MspInit+0x2e0>)
 80023b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	205a      	movs	r0, #90	@ 0x5a
 80023ca:	f001 fac7 	bl	800395c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80023ce:	205a      	movs	r0, #90	@ 0x5a
 80023d0:	f001 fade 	bl	8003990 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 80023d4:	4b48      	ldr	r3, [pc, #288]	@ (80024f8 <HAL_SAI_MspInit+0x2dc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3301      	adds	r3, #1
 80023da:	4a47      	ldr	r2, [pc, #284]	@ (80024f8 <HAL_SAI_MspInit+0x2dc>)
 80023dc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023de:	2308      	movs	r3, #8
 80023e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80023f4:	230d      	movs	r3, #13
 80023f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023fa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80023fe:	4619      	mov	r1, r3
 8002400:	483f      	ldr	r0, [pc, #252]	@ (8002500 <HAL_SAI_MspInit+0x2e4>)
 8002402:	f003 fa55 	bl	80058b0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8002406:	2322      	movs	r3, #34	@ 0x22
 8002408:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI1_B;
 800240a:	2325      	movs	r3, #37	@ 0x25
 800240c:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800241a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002420:	2302      	movs	r3, #2
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002424:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 800242e:	2301      	movs	r3, #1
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002432:	2300      	movs	r3, #0
 8002434:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002436:	2300      	movs	r3, #0
 8002438:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800243a:	2300      	movs	r3, #0
 800243c:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002452:	2300      	movs	r3, #0
 8002454:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002456:	2300      	movs	r3, #0
 8002458:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800245a:	2300      	movs	r3, #0
 800245c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel13) != HAL_OK)
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	492d      	ldr	r1, [pc, #180]	@ (8002518 <HAL_SAI_MspInit+0x2fc>)
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fbd9 	bl	8004c1c <HAL_DMAEx_List_BuildNode>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 8002470:	f7ff fe66 	bl	8002140 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel13, NULL, &Node_GPDMA1_Channel13) != HAL_OK)
 8002474:	4a28      	ldr	r2, [pc, #160]	@ (8002518 <HAL_SAI_MspInit+0x2fc>)
 8002476:	2100      	movs	r1, #0
 8002478:	4828      	ldr	r0, [pc, #160]	@ (800251c <HAL_SAI_MspInit+0x300>)
 800247a:	f002 fbe5 	bl	8004c48 <HAL_DMAEx_List_InsertNode>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 8002484:	f7ff fe5c 	bl	8002140 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel13) != HAL_OK)
 8002488:	4824      	ldr	r0, [pc, #144]	@ (800251c <HAL_SAI_MspInit+0x300>)
 800248a:	f002 fca6 	bl	8004dda <HAL_DMAEx_List_SetCircularMode>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_SAI_MspInit+0x27c>
    {
      Error_Handler();
 8002494:	f7ff fe54 	bl	8002140 <Error_Handler>
    }

    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 8002498:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 800249a:	4a22      	ldr	r2, [pc, #136]	@ (8002524 <HAL_SAI_MspInit+0x308>)
 800249c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 800249e:	4b20      	ldr	r3, [pc, #128]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024a0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80024a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024ba:	2281      	movs	r2, #129	@ 0x81
 80024bc:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 80024be:	4818      	ldr	r0, [pc, #96]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024c0:	f002 f9ec 	bl	800489c <HAL_DMAEx_List_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_SAI_MspInit+0x2b2>
    {
      Error_Handler();
 80024ca:	f7ff fe39 	bl	8002140 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &List_GPDMA1_Channel13) != HAL_OK)
 80024ce:	4913      	ldr	r1, [pc, #76]	@ (800251c <HAL_SAI_MspInit+0x300>)
 80024d0:	4813      	ldr	r0, [pc, #76]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024d2:	f002 fce3 	bl	8004e9c <HAL_DMAEx_List_LinkQ>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_SAI_MspInit+0x2c4>
    {
      Error_Handler();
 80024dc:	f7ff fe30 	bl	8002140 <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel13);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <HAL_SAI_MspInit+0x304>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 80024ee:	2110      	movs	r1, #16
 80024f0:	e01a      	b.n	8002528 <HAL_SAI_MspInit+0x30c>
 80024f2:	bf00      	nop
 80024f4:	40015404 	.word	0x40015404
 80024f8:	20013604 	.word	0x20013604
 80024fc:	46020c00 	.word	0x46020c00
 8002500:	42021000 	.word	0x42021000
 8002504:	2001349c 	.word	0x2001349c
 8002508:	200134c0 	.word	0x200134c0
 800250c:	200134d8 	.word	0x200134d8
 8002510:	40020750 	.word	0x40020750
 8002514:	40015424 	.word	0x40015424
 8002518:	20013550 	.word	0x20013550
 800251c:	20013574 	.word	0x20013574
 8002520:	2001358c 	.word	0x2001358c
 8002524:	400206d0 	.word	0x400206d0
 8002528:	4805      	ldr	r0, [pc, #20]	@ (8002540 <HAL_SAI_MspInit+0x324>)
 800252a:	f001 fed5 	bl	80042d8 <HAL_DMA_ConfigChannelAttributes>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_SAI_MspInit+0x31c>
    {
      Error_Handler();
 8002534:	f7ff fe04 	bl	8002140 <Error_Handler>
    }

    }
}
 8002538:	bf00      	nop
 800253a:	3790      	adds	r7, #144	@ 0x90
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	2001358c 	.word	0x2001358c

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <HAL_MspInit+0x3c>)
 800254c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002550:	4a0b      	ldr	r2, [pc, #44]	@ (8002580 <HAL_MspInit+0x3c>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <HAL_MspInit+0x3c>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8002568:	f003 fd22 	bl	8005fb0 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddA();
 800256c:	f003 fd40 	bl	8005ff0 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002570:	2004      	movs	r0, #4
 8002572:	f001 f9e8 	bl	8003946 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	46020c00 	.word	0x46020c00

08002584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	@ 0x38
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002594:	4b2e      	ldr	r3, [pc, #184]	@ (8002650 <HAL_InitTick+0xcc>)
 8002596:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800259a:	4a2d      	ldr	r2, [pc, #180]	@ (8002650 <HAL_InitTick+0xcc>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_InitTick+0xcc>)
 80025a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025b2:	f107 0210 	add.w	r2, r7, #16
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 ff5d 	bl	800747c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025c2:	f004 ff33 	bl	800742c <HAL_RCC_GetPCLK2Freq>
 80025c6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	4a22      	ldr	r2, [pc, #136]	@ (8002654 <HAL_InitTick+0xd0>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	3b01      	subs	r3, #1
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80025d6:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <HAL_InitTick+0xd4>)
 80025d8:	4a20      	ldr	r2, [pc, #128]	@ (800265c <HAL_InitTick+0xd8>)
 80025da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80025dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_InitTick+0xd4>)
 80025de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025e2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_InitTick+0xd4>)
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80025ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <HAL_InitTick+0xd4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_InitTick+0xd4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80025f6:	4818      	ldr	r0, [pc, #96]	@ (8002658 <HAL_InitTick+0xd4>)
 80025f8:	f008 fc21 	bl	800ae3e <HAL_TIM_Base_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8002602:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800260a:	4813      	ldr	r0, [pc, #76]	@ (8002658 <HAL_InitTick+0xd4>)
 800260c:	f008 fc78 	bl	800af00 <HAL_TIM_Base_Start_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8002616:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10e      	bne.n	800263c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d808      	bhi.n	8002636 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	2047      	movs	r0, #71	@ 0x47
 800262a:	f001 f997 	bl	800395c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800262e:	4a0c      	ldr	r2, [pc, #48]	@ (8002660 <HAL_InitTick+0xdc>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e002      	b.n	800263c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800263c:	2047      	movs	r0, #71	@ 0x47
 800263e:	f001 f9a7 	bl	8003990 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002642:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002646:	4618      	mov	r0, r3
 8002648:	3738      	adds	r7, #56	@ 0x38
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	46020c00 	.word	0x46020c00
 8002654:	431bde83 	.word	0x431bde83
 8002658:	20013608 	.word	0x20013608
 800265c:	40014800 	.word	0x40014800
 8002660:	2000001c 	.word	0x2000001c

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <NMI_Handler+0x4>

0800266c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <HardFault_Handler+0x4>

08002674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <MemManage_Handler+0x4>

0800267c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <UsageFault_Handler+0x4>

0800268c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 fc2b 	bl	8002f24 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <USART1_IRQHandler+0x10>)
 80026da:	f009 f887 	bl	800b7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20013658 	.word	0x20013658

080026e8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <TIM17_IRQHandler+0x10>)
 80026ee:	f008 fca7 	bl	800b040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20013608 	.word	0x20013608

080026fc <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <GPDMA1_Channel13_IRQHandler+0x10>)
 8002702:	f001 fc88 	bl	8004016 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2001358c 	.word	0x2001358c

08002710 <GPDMA1_Channel14_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 14 global interrupt.
  */
void GPDMA1_Channel14_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 0 */

  /* USER CODE END GPDMA1_Channel14_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel14);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <GPDMA1_Channel14_IRQHandler+0x10>)
 8002716:	f001 fc7e 	bl	8004016 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 1 */

  /* USER CODE END GPDMA1_Channel14_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200134d8 	.word	0x200134d8

08002724 <GPDMA1_Channel15_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 15 global interrupt.
  */
void GPDMA1_Channel15_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 0 */

  /* USER CODE END GPDMA1_Channel15_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel15);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <GPDMA1_Channel15_IRQHandler+0x10>)
 800272a:	f001 fc74 	bl	8004016 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 1 */

  /* USER CODE END GPDMA1_Channel15_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200136ec 	.word	0x200136ec

08002738 <SAI1_IRQHandler>:

/**
  * @brief This function handles Serial Audio Interface 1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 800273c:	4803      	ldr	r0, [pc, #12]	@ (800274c <SAI1_IRQHandler+0x14>)
 800273e:	f007 ff79 	bl	800a634 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8002742:	4803      	ldr	r0, [pc, #12]	@ (8002750 <SAI1_IRQHandler+0x18>)
 8002744:	f007 ff76 	bl	800a634 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2001336c 	.word	0x2001336c
 8002750:	20013404 	.word	0x20013404

08002754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_kill>:

int _kill(int pid, int sig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800276e:	f00c fd2f 	bl	800f1d0 <__errno>
 8002772:	4603      	mov	r3, r0
 8002774:	2216      	movs	r2, #22
 8002776:	601a      	str	r2, [r3, #0]
  return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <_exit>:

void _exit (int status)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ffe7 	bl	8002764 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002796:	bf00      	nop
 8002798:	e7fd      	b.n	8002796 <_exit+0x12>

0800279a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e00a      	b.n	80027c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027ac:	f3af 8000 	nop.w
 80027b0:	4601      	mov	r1, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	60ba      	str	r2, [r7, #8]
 80027b8:	b2ca      	uxtb	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3301      	adds	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dbf0      	blt.n	80027ac <_read+0x12>
  }

  return len;
 80027ca:	687b      	ldr	r3, [r7, #4]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e009      	b.n	80027fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	60ba      	str	r2, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3301      	adds	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	dbf1      	blt.n	80027e6 <_write+0x12>
  }
  return len;
 8002802:	687b      	ldr	r3, [r7, #4]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_close>:

int _close(int file)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002834:	605a      	str	r2, [r3, #4]
  return 0;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_isatty>:

int _isatty(int file)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800284c:	2301      	movs	r3, #1
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800287c:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <_sbrk+0x5c>)
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <_sbrk+0x60>)
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002888:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <_sbrk+0x64>)
 8002892:	4a12      	ldr	r2, [pc, #72]	@ (80028dc <_sbrk+0x68>)
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a4:	f00c fc94 	bl	800f1d0 <__errno>
 80028a8:	4603      	mov	r3, r0
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	e009      	b.n	80028c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ba:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <_sbrk+0x64>)
 80028c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200c0000 	.word	0x200c0000
 80028d4:	00000400 	.word	0x00000400
 80028d8:	20013654 	.word	0x20013654
 80028dc:	20013ca0 	.word	0x20013ca0

080028e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028e4:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <SystemInit+0x68>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <SystemInit+0x68>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80028f4:	4b15      	ldr	r3, [pc, #84]	@ (800294c <SystemInit+0x6c>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80028fa:	4b14      	ldr	r3, [pc, #80]	@ (800294c <SystemInit+0x6c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002900:	4b12      	ldr	r3, [pc, #72]	@ (800294c <SystemInit+0x6c>)
 8002902:	2200      	movs	r2, #0
 8002904:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <SystemInit+0x6c>)
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800290c:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <SystemInit+0x6c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0e      	ldr	r2, [pc, #56]	@ (800294c <SystemInit+0x6c>)
 8002912:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002916:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800291a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <SystemInit+0x6c>)
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <SystemInit+0x6c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <SystemInit+0x6c>)
 8002928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800292e:	4b07      	ldr	r3, [pc, #28]	@ (800294c <SystemInit+0x6c>)
 8002930:	2200      	movs	r2, #0
 8002932:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <SystemInit+0x68>)
 8002936:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800293a:	609a      	str	r2, [r3, #8]
  #endif
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00
 800294c:	46020c00 	.word	0x46020c00

08002950 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel15;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002954:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002956:	4a23      	ldr	r2, [pc, #140]	@ (80029e4 <MX_USART1_UART_Init+0x94>)
 8002958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 800295c:	4a22      	ldr	r2, [pc, #136]	@ (80029e8 <MX_USART1_UART_Init+0x98>)
 800295e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002960:	4b1f      	ldr	r3, [pc, #124]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002966:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800296c:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002974:	220c      	movs	r2, #12
 8002976:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002980:	2200      	movs	r2, #0
 8002982:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002986:	2200      	movs	r2, #0
 8002988:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 800298c:	2200      	movs	r2, #0
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002990:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002992:	2200      	movs	r2, #0
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002996:	4812      	ldr	r0, [pc, #72]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 8002998:	f008 fe10 	bl	800b5bc <HAL_UART_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80029a2:	f7ff fbcd 	bl	8002140 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029a6:	2100      	movs	r1, #0
 80029a8:	480d      	ldr	r0, [pc, #52]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 80029aa:	f009 ff21 	bl	800c7f0 <HAL_UARTEx_SetTxFifoThreshold>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80029b4:	f7ff fbc4 	bl	8002140 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029b8:	2100      	movs	r1, #0
 80029ba:	4809      	ldr	r0, [pc, #36]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 80029bc:	f009 ff56 	bl	800c86c <HAL_UARTEx_SetRxFifoThreshold>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80029c6:	f7ff fbbb 	bl	8002140 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_USART1_UART_Init+0x90>)
 80029cc:	f009 fed7 	bl	800c77e <HAL_UARTEx_DisableFifoMode>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80029d6:	f7ff fbb3 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20013658 	.word	0x20013658
 80029e4:	40013800 	.word	0x40013800
 80029e8:	001e8480 	.word	0x001e8480

080029ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0ba      	sub	sp, #232	@ 0xe8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	22c0      	movs	r2, #192	@ 0xc0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f00c fb8c 	bl	800f12a <memset>
  if(uartHandle->Instance==USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4c      	ldr	r2, [pc, #304]	@ (8002b48 <HAL_UART_MspInit+0x15c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	f040 8091 	bne.w	8002b40 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a1e:	f04f 0201 	mov.w	r2, #1
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a2e:	f107 0310 	add.w	r3, r7, #16
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 fde0 	bl	80075f8 <HAL_RCCEx_PeriphCLKConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a3e:	f7ff fb7f 	bl	8002140 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a42:	4b42      	ldr	r3, [pc, #264]	@ (8002b4c <HAL_UART_MspInit+0x160>)
 8002a44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a48:	4a40      	ldr	r2, [pc, #256]	@ (8002b4c <HAL_UART_MspInit+0x160>)
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a52:	4b3e      	ldr	r3, [pc, #248]	@ (8002b4c <HAL_UART_MspInit+0x160>)
 8002a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	4b3a      	ldr	r3, [pc, #232]	@ (8002b4c <HAL_UART_MspInit+0x160>)
 8002a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a66:	4a39      	ldr	r2, [pc, #228]	@ (8002b4c <HAL_UART_MspInit+0x160>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a70:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <HAL_UART_MspInit+0x160>)
 8002a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a98:	2307      	movs	r3, #7
 8002a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	482a      	ldr	r0, [pc, #168]	@ (8002b50 <HAL_UART_MspInit+0x164>)
 8002aa6:	f002 ff03 	bl	80058b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel15.Instance = GPDMA1_Channel15;
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002aac:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <HAL_UART_MspInit+0x16c>)
 8002aae:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel15.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002ab2:	2219      	movs	r2, #25
 8002ab4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel15.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002ab6:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel15.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002abc:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel15.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002ac4:	4b23      	ldr	r3, [pc, #140]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel15.Init.DestInc = DMA_DINC_FIXED;
 8002aca:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel15.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel15.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel15.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002ade:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002ae2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel15.Init.SrcBurstLength = 1;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel15.Init.DestBurstLength = 1;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel15.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002af0:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel15.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002af6:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel15.Init.Mode = DMA_NORMAL;
 8002afc:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel15) != HAL_OK)
 8002b02:	4814      	ldr	r0, [pc, #80]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002b04:	f001 f856 	bl	8003bb4 <HAL_DMA_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002b0e:	f7ff fb17 	bl	8002140 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel15);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a0f      	ldr	r2, [pc, #60]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002b16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b18:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel15, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002b1e:	2110      	movs	r1, #16
 8002b20:	480c      	ldr	r0, [pc, #48]	@ (8002b54 <HAL_UART_MspInit+0x168>)
 8002b22:	f001 fbd9 	bl	80042d8 <HAL_DMA_ConfigChannelAttributes>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8002b2c:	f7ff fb08 	bl	8002140 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	203d      	movs	r0, #61	@ 0x3d
 8002b36:	f000 ff11 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b3a:	203d      	movs	r0, #61	@ 0x3d
 8002b3c:	f000 ff28 	bl	8003990 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b40:	bf00      	nop
 8002b42:	37e8      	adds	r7, #232	@ 0xe8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	46020c00 	.word	0x46020c00
 8002b50:	42020000 	.word	0x42020000
 8002b54:	200136ec 	.word	0x200136ec
 8002b58:	400207d0 	.word	0x400207d0

08002b5c <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b62:	4a10      	ldr	r2, [pc, #64]	@ (8002ba4 <MX_USB_OTG_FS_HCD_Init+0x48>)
 8002b64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b68:	220c      	movs	r2, #12
 8002b6a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	739a      	strb	r2, [r3, #14]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002b8c:	f003 f89a 	bl	8005cc4 <HAL_HCD_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USB_OTG_FS_HCD_Init+0x3e>
  {
    Error_Handler();
 8002b96:	f7ff fad3 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20013764 	.word	0x20013764
 8002ba4:	42040000 	.word	0x42040000

08002ba8 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0bc      	sub	sp, #240	@ 0xf0
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bc0:	f107 0318 	add.w	r3, r7, #24
 8002bc4:	22c0      	movs	r2, #192	@ 0xc0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f00c faae 	bl	800f12a <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a38      	ldr	r2, [pc, #224]	@ (8002cb4 <HAL_HCD_MspInit+0x10c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d169      	bne.n	8002cac <HAL_HCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002bd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bea:	f107 0318 	add.w	r3, r7, #24
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fd02 	bl	80075f8 <HAL_RCCEx_PeriphCLKConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 8002bfa:	f7ff faa1 	bl	8002140 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c04:	4a2c      	ldr	r2, [pc, #176]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c1c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002c36:	230a      	movs	r3, #10
 8002c38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c40:	4619      	mov	r1, r3
 8002c42:	481e      	ldr	r0, [pc, #120]	@ (8002cbc <HAL_HCD_MspInit+0x114>)
 8002c44:	f002 fe34 	bl	80058b0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c58:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d119      	bne.n	8002ca8 <HAL_HCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c84:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002c92:	f003 f98d 	bl	8005fb0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9c:	4a06      	ldr	r2, [pc, #24]	@ (8002cb8 <HAL_HCD_MspInit+0x110>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002ca6:	e001      	b.n	8002cac <HAL_HCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8002ca8:	f003 f982 	bl	8005fb0 <HAL_PWREx_EnableVddUSB>
}
 8002cac:	bf00      	nop
 8002cae:	37f0      	adds	r7, #240	@ 0xf0
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	42040000 	.word	0x42040000
 8002cb8:	46020c00 	.word	0x46020c00
 8002cbc:	42020000 	.word	0x42020000

08002cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cf8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cc4:	f7ff fe0c 	bl	80028e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cca:	e003      	b.n	8002cd4 <LoopCopyDataInit>

08002ccc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cd0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cd2:	3104      	adds	r1, #4

08002cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002cd4:	480a      	ldr	r0, [pc, #40]	@ (8002d00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002cd8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002cda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002cdc:	d3f6      	bcc.n	8002ccc <CopyDataInit>
	ldr	r2, =_sbss
 8002cde:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ce0:	e002      	b.n	8002ce8 <LoopFillZerobss>

08002ce2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ce2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ce4:	f842 3b04 	str.w	r3, [r2], #4

08002ce8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <LoopForever+0x16>)
	cmp	r2, r3
 8002cea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002cec:	d3f9      	bcc.n	8002ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cee:	f00c fa75 	bl	800f1dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cf2:	f7fe fbb9 	bl	8001468 <main>

08002cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cf6:	e7fe      	b.n	8002cf6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002cf8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002cfc:	0803064c 	.word	0x0803064c
	ldr	r0, =_sdata
 8002d00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d04:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8002d08:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8002d0c:	20013ca0 	.word	0x20013ca0

08002d10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC1_IRQHandler>
	...

08002d14 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	@ 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d009      	beq.n	8002d40 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <BSP_LED_Init+0x2c>
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d003      	beq.n	8002d40 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d38:	f06f 0301 	mvn.w	r3, #1
 8002d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d3e:	e06e      	b.n	8002e1e <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10f      	bne.n	8002d66 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8002d46:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d4c:	4a36      	ldr	r2, [pc, #216]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d56:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	e046      	b.n	8002df4 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d72:	4a2d      	ldr	r2, [pc, #180]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	e033      	b.n	8002df4 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8c:	4b26      	ldr	r3, [pc, #152]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d110      	bne.n	8002dbc <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002da0:	4a21      	ldr	r2, [pc, #132]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002daa:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8002db8:	2301      	movs	r3, #1
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8002dbc:	f003 f908 	bl	8005fd0 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d107      	bne.n	8002dd6 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dcc:	4a16      	ldr	r2, [pc, #88]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8002dd6:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ddc:	4a12      	ldr	r2, [pc, #72]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002de6:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <BSP_LED_Init+0x114>)
 8002de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	4a0d      	ldr	r2, [pc, #52]	@ (8002e2c <BSP_LED_Init+0x118>)
 8002df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	4a08      	ldr	r2, [pc, #32]	@ (8002e30 <BSP_LED_Init+0x11c>)
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	f107 021c 	add.w	r2, r7, #28
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fd49 	bl	80058b0 <HAL_GPIO_Init>
  }

  return ret;
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3738      	adds	r7, #56	@ 0x38
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	46020c00 	.word	0x46020c00
 8002e2c:	08012cf8 	.word	0x08012cf8
 8002e30:	20000004 	.word	0x20000004

08002e34 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	71fb      	strb	r3, [r7, #7]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002e44:	4b30      	ldr	r3, [pc, #192]	@ (8002f08 <BSP_PB_Init+0xd4>)
 8002e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f08 <BSP_PB_Init+0xd4>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e54:	4b2c      	ldr	r3, [pc, #176]	@ (8002f08 <BSP_PB_Init+0xd4>)
 8002e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002e62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e66:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002e70:	79bb      	ldrb	r3, [r7, #6]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4a23      	ldr	r2, [pc, #140]	@ (8002f0c <BSP_PB_Init+0xd8>)
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	f107 020c 	add.w	r2, r7, #12
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 fd11 	bl	80058b0 <HAL_GPIO_Init>
 8002e8e:	e036      	b.n	8002efe <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	@ (8002f10 <BSP_PB_Init+0xdc>)
 8002e92:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <BSP_PB_Init+0xd8>)
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	f107 020c 	add.w	r2, r7, #12
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 fd04 	bl	80058b0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002ea8:	79fa      	ldrb	r2, [r7, #7]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <BSP_PB_Init+0xe0>)
 8002eb4:	441a      	add	r2, r3
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	4917      	ldr	r1, [pc, #92]	@ (8002f18 <BSP_PB_Init+0xe4>)
 8002eba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f002 fc98 	bl	80057f6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a10      	ldr	r2, [pc, #64]	@ (8002f14 <BSP_PB_Init+0xe0>)
 8002ed2:	1898      	adds	r0, r3, r2
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4a11      	ldr	r2, [pc, #68]	@ (8002f1c <BSP_PB_Init+0xe8>)
 8002ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002edc:	461a      	mov	r2, r3
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f002 fc5d 	bl	800579e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002ee4:	2018      	movs	r0, #24
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <BSP_PB_Init+0xec>)
 8002eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f000 fd33 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002ef6:	2318      	movs	r3, #24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fd49 	bl	8003990 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	46020c00 	.word	0x46020c00
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	10110000 	.word	0x10110000
 8002f14:	20013b44 	.word	0x20013b44
 8002f18:	08012d00 	.word	0x08012d00
 8002f1c:	20000014 	.word	0x20000014
 8002f20:	20000018 	.word	0x20000018

08002f24 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002f2e:	79fa      	ldrb	r2, [r7, #7]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <BSP_PB_IRQHandler+0x28>)
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fc6f 	bl	8005820 <HAL_EXTI_IRQHandler>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20013b44 	.word	0x20013b44

08002f50 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7ff fff0 	bl	8002f50 <BSP_PB_Callback>
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	4b12      	ldr	r3, [pc, #72]	@ (8002fc4 <HAL_Init+0x50>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a11      	ldr	r2, [pc, #68]	@ (8002fc4 <HAL_Init+0x50>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 fcde 	bl	8003946 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f8a:	f004 f91f 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <HAL_Init+0x54>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <HAL_Init+0x58>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd0 <HAL_Init+0x5c>)
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002fa4:	2004      	movs	r0, #4
 8002fa6:	f000 fd01 	bl	80039ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7ff faea 	bl	8002584 <HAL_InitTick>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e002      	b.n	8002fc0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fba:	f7ff fac3 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	46020c00 	.word	0x46020c00
 8002fcc:	08012ca0 	.word	0x08012ca0
 8002fd0:	20000000 	.word	0x20000000

08002fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_IncTick+0x20>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_IncTick+0x24>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <HAL_IncTick+0x24>)
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000020 	.word	0x20000020
 8002ff8:	20013b50 	.word	0x20013b50

08002ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8003000:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <HAL_GetTick+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20013b50 	.word	0x20013b50

08003014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff ffee 	bl	8002ffc <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d005      	beq.n	800303a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <HAL_Delay+0x44>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800303a:	bf00      	nop
 800303c:	f7ff ffde 	bl	8002ffc <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d8f7      	bhi.n	800303c <HAL_Delay+0x28>
  {
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000020 	.word	0x20000020

0800305c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <LL_ADC_SetResolution+0x3c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d104      	bne.n	80030a4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b01      	subs	r3, #1
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f023 020c 	bic.w	r2, r3, #12
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	60da      	str	r2, [r3, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	46021000 	.word	0x46021000

080030c4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	d002      	beq.n	80030f6 <LL_ADC_SetGainCompensation+0x32>
 80030f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030f4:	e000      	b.n	80030f8 <LL_ADC_SetGainCompensation+0x34>
 80030f6:	2200      	movs	r2, #0
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2107      	movs	r1, #7
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	431a      	orrs	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003158:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6093      	str	r3, [r2, #8]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003180:	d101      	bne.n	8003186 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031d0:	d101      	bne.n	80031d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <LL_ADC_IsEnabled+0x18>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_ADC_IsEnabled+0x1a>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b04      	cmp	r3, #4
 800321c:	d101      	bne.n	8003222 <LL_ADC_REG_IsConversionOngoing+0x18>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d101      	bne.n	8003248 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e2b3      	b.n	80037e0 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a8b      	ldr	r2, [pc, #556]	@ (80034b4 <HAL_ADC_Init+0x25c>)
 8003286:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fd ff35 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ff5f 	bl	800316c <LL_ADC_IsDeepPowerDownEnabled>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff45 	bl	8003148 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff7a 	bl	80031bc <LL_ADC_IsInternalRegulatorEnabled>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d115      	bne.n	80032fa <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff5e 	bl	8003194 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032d8:	4b77      	ldr	r3, [pc, #476]	@ (80034b8 <HAL_ADC_Init+0x260>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	4a77      	ldr	r2, [pc, #476]	@ (80034bc <HAL_ADC_Init+0x264>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032ec:	e002      	b.n	80032f4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f9      	bne.n	80032ee <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff ff5c 	bl	80031bc <LL_ADC_IsInternalRegulatorEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10e      	bne.n	8003328 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff6c 	bl	800320a <LL_ADC_REG_IsConversionOngoing>
 8003332:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 8244 	bne.w	80037ca <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 8240 	bne.w	80037ca <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800334e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003352:	f043 0202 	orr.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff40 	bl	80031e4 <LL_ADC_IsEnabled>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d140      	bne.n	80033ec <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a51      	ldr	r2, [pc, #324]	@ (80034b4 <HAL_ADC_Init+0x25c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d028      	beq.n	80033c6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a51      	ldr	r2, [pc, #324]	@ (80034c0 <HAL_ADC_Init+0x268>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d109      	bne.n	8003392 <HAL_ADC_Init+0x13a>
 800337e:	4850      	ldr	r0, [pc, #320]	@ (80034c0 <HAL_ADC_Init+0x268>)
 8003380:	f7ff ff30 	bl	80031e4 <LL_ADC_IsEnabled>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf0c      	ite	eq
 800338a:	2301      	moveq	r3, #1
 800338c:	2300      	movne	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e008      	b.n	80033a4 <HAL_ADC_Init+0x14c>
 8003392:	4848      	ldr	r0, [pc, #288]	@ (80034b4 <HAL_ADC_Init+0x25c>)
 8003394:	f7ff ff26 	bl	80031e4 <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d021      	beq.n	80033ec <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a44      	ldr	r2, [pc, #272]	@ (80034c0 <HAL_ADC_Init+0x268>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_Init+0x15e>
 80033b2:	4a44      	ldr	r2, [pc, #272]	@ (80034c4 <HAL_ADC_Init+0x26c>)
 80033b4:	e000      	b.n	80033b8 <HAL_ADC_Init+0x160>
 80033b6:	4a44      	ldr	r2, [pc, #272]	@ (80034c8 <HAL_ADC_Init+0x270>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff fe4c 	bl	800305c <LL_ADC_SetCommonClock>
 80033c4:	e012      	b.n	80033ec <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f7ff fe57 	bl	8003084 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80033d6:	4b3c      	ldr	r3, [pc, #240]	@ (80034c8 <HAL_ADC_Init+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80033e6:	4938      	ldr	r1, [pc, #224]	@ (80034c8 <HAL_ADC_Init+0x270>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a30      	ldr	r2, [pc, #192]	@ (80034b4 <HAL_ADC_Init+0x25c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d010      	beq.n	8003418 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033fc:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003402:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003408:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003410:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003412:	4313      	orrs	r3, r2
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	e030      	b.n	800347a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7f1b      	ldrb	r3, [r3, #28]
 800341c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003424:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003426:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800342c:	2a00      	cmp	r2, #0
 800342e:	d002      	beq.n	8003436 <HAL_ADC_Init+0x1de>
 8003430:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003434:	e000      	b.n	8003438 <HAL_ADC_Init+0x1e0>
 8003436:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003438:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800343e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	da04      	bge.n	8003452 <HAL_ADC_Init+0x1fa>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003450:	e001      	b.n	8003456 <HAL_ADC_Init+0x1fe>
 8003452:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003456:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4918      	ldr	r1, [pc, #96]	@ (80034c0 <HAL_ADC_Init+0x268>)
 800345e:	428b      	cmp	r3, r1
 8003460:	d103      	bne.n	800346a <HAL_ADC_Init+0x212>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003468:	e003      	b.n	8003472 <HAL_ADC_Init+0x21a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003470:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003472:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003474:	6a3a      	ldr	r2, [r7, #32]
 8003476:	4313      	orrs	r3, r2
 8003478:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d12f      	bne.n	80034e4 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0a      	ldr	r2, [pc, #40]	@ (80034b4 <HAL_ADC_Init+0x25c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	3b01      	subs	r3, #1
 8003494:	045b      	lsls	r3, r3, #17
 8003496:	6a3a      	ldr	r2, [r7, #32]
 8003498:	4313      	orrs	r3, r2
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	e022      	b.n	80034e4 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	e018      	b.n	80034e4 <HAL_ADC_Init+0x28c>
 80034b2:	bf00      	nop
 80034b4:	46021000 	.word	0x46021000
 80034b8:	20000000 	.word	0x20000000
 80034bc:	053e2d63 	.word	0x053e2d63
 80034c0:	42028000 	.word	0x42028000
 80034c4:	42028308 	.word	0x42028308
 80034c8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a92      	ldr	r2, [pc, #584]	@ (8003734 <HAL_ADC_Init+0x4dc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d018      	beq.n	8003520 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003502:	4313      	orrs	r3, r2
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	4313      	orrs	r3, r2
 8003508:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	4b89      	ldr	r3, [pc, #548]	@ (8003738 <HAL_ADC_Init+0x4e0>)
 8003512:	4013      	ands	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	6a39      	ldr	r1, [r7, #32]
 800351a:	430b      	orrs	r3, r1
 800351c:	60d3      	str	r3, [r2, #12]
 800351e:	e031      	b.n	8003584 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	4313      	orrs	r3, r2
 8003536:	6a3a      	ldr	r2, [r7, #32]
 8003538:	4313      	orrs	r3, r2
 800353a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	4b7e      	ldr	r3, [pc, #504]	@ (800373c <HAL_ADC_Init+0x4e4>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	6a39      	ldr	r1, [r7, #32]
 800354c:	430b      	orrs	r3, r1
 800354e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1a      	ldr	r2, [r3, #32]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6a      	ldr	r2, [pc, #424]	@ (8003734 <HAL_ADC_Init+0x4dc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	f000 8093 	beq.w	80036b6 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fe38 	bl	800320a <LL_ADC_REG_IsConversionOngoing>
 800359a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fe45 	bl	8003230 <LL_ADC_INJ_IsConversionOngoing>
 80035a6:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d161      	bne.n	8003672 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d15e      	bne.n	8003672 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	7f1b      	ldrb	r3, [r3, #28]
 80035b8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4960      	ldr	r1, [pc, #384]	@ (8003740 <HAL_ADC_Init+0x4e8>)
 80035c0:	428b      	cmp	r3, r1
 80035c2:	d102      	bne.n	80035ca <HAL_ADC_Init+0x372>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	e002      	b.n	80035d0 <HAL_ADC_Init+0x378>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035d0:	4313      	orrs	r3, r2
 80035d2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6a39      	ldr	r1, [r7, #32]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f7ff fd60 	bl	80030c4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800360a:	2b01      	cmp	r3, #1
 800360c:	d11e      	bne.n	800364c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003612:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	4b4a      	ldr	r3, [pc, #296]	@ (8003744 <HAL_ADC_Init+0x4ec>)
 800361c:	4013      	ands	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003622:	0411      	lsls	r1, r2, #16
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003628:	4311      	orrs	r1, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800363a:	0892      	lsrs	r2, r2, #2
 800363c:	430a      	orrs	r2, r1
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	611a      	str	r2, [r3, #16]
 800364a:	e007      	b.n	800365c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10c      	bne.n	8003694 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	f023 010f 	bic.w	r1, r3, #15
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
 8003692:	e007      	b.n	80036a4 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 020f 	bic.w	r2, r2, #15
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a8:	f023 0303 	bic.w	r3, r3, #3
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80036b4:	e092      	b.n	80037dc <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d111      	bne.n	80036e4 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80036c8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80036ce:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80036d4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <HAL_ADC_Init+0x4f0>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	69f9      	ldr	r1, [r7, #28]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	461a      	mov	r2, r3
 8003702:	2100      	movs	r1, #0
 8003704:	f7ff fd01 	bl	800310a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	461a      	mov	r2, r3
 8003712:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003716:	f7ff fcf8 	bl	800310a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d114      	bne.n	800374c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f062 020f 	orn	r2, r2, #15
 8003730:	629a      	str	r2, [r3, #40]	@ 0x28
 8003732:	e024      	b.n	800377e <HAL_ADC_Init+0x526>
 8003734:	46021000 	.word	0x46021000
 8003738:	fff0c013 	.word	0xfff0c013
 800373c:	ffde800d 	.word	0xffde800d
 8003740:	42028000 	.word	0x42028000
 8003744:	fc00f81e 	.word	0xfc00f81e
 8003748:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003754:	d113      	bne.n	800377e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f003 031c 	and.w	r3, r3, #28
 8003768:	f06f 020f 	mvn.w	r2, #15
 800376c:	fa02 f103 	lsl.w	r1, r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <HAL_ADC_Init+0x590>)
 8003786:	4013      	ands	r3, r2
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	429a      	cmp	r2, r3
 800378c:	d10b      	bne.n	80037a6 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003798:	f023 0303 	bic.w	r3, r3, #3
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80037a4:	e01a      	b.n	80037dc <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037aa:	f023 0312 	bic.w	r3, r3, #18
 80037ae:	f043 0210 	orr.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80037c8:	e008      	b.n	80037dc <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80037dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3728      	adds	r7, #40	@ 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	833ffff3 	.word	0x833ffff3

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	@ (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	@ (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	@ (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	@ (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	@ (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	@ 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
         );
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff4c 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800396a:	f7ff ff63 	bl	8003834 <__NVIC_GetPriorityGrouping>
 800396e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7ff ffb3 	bl	80038e0 <NVIC_EncodePriority>
 800397a:	4602      	mov	r2, r0
 800397c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff ff82 	bl	800388c <__NVIC_SetPriority>
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff56 	bl	8003850 <__NVIC_EnableIRQ>
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d844      	bhi.n	8003a44 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80039ba:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039e3 	.word	0x080039e3
 80039c4:	08003a01 	.word	0x08003a01
 80039c8:	08003a23 	.word	0x08003a23
 80039cc:	08003a45 	.word	0x08003a45
 80039d0:	080039d5 	.word	0x080039d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80039d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039da:	f043 0304 	orr.w	r3, r3, #4
 80039de:	6013      	str	r3, [r2, #0]
      break;
 80039e0:	e031      	b.n	8003a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80039e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80039ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80039f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039f4:	4a18      	ldr	r2, [pc, #96]	@ (8003a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80039f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80039fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80039fe:	e022      	b.n	8003a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003a00:	4b14      	ldr	r3, [pc, #80]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a13      	ldr	r2, [pc, #76]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a12:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003a16:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003a18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003a20:	e011      	b.n	8003a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003a22:	4b0c      	ldr	r3, [pc, #48]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a0b      	ldr	r2, [pc, #44]	@ (8003a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a34:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003a3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003a42:	e000      	b.n	8003a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003a44:	bf00      	nop
  }
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010
 8003a58:	46020c00 	.word	0x46020c00

08003a5c <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e037      	b.n	8003ade <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d119      	bne.n	8003aae <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae8 <HAL_DCACHE_Init+0x8c>)
 8003a7e:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a1a      	ldr	r2, [pc, #104]	@ (8003aec <HAL_DCACHE_Init+0x90>)
 8003a84:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_DCACHE_Init+0x94>)
 8003a8a:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a19      	ldr	r2, [pc, #100]	@ (8003af4 <HAL_DCACHE_Init+0x98>)
 8003a90:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <HAL_DCACHE_Init+0x9c>)
 8003a96:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <HAL_DCACHE_Init+0xa0>)
 8003aa4:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f814 	bl	8003b00 <HAL_DCACHE_Enable>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	73fb      	strb	r3, [r7, #15]

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08003b9f 	.word	0x08003b9f
 8003aec:	08003b4f 	.word	0x08003b4f
 8003af0:	08003b63 	.word	0x08003b63
 8003af4:	08003b8b 	.word	0x08003b8b
 8003af8:	08003b77 	.word	0x08003b77
 8003afc:	080011f5 	.word	0x080011f5

08003b00 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e015      	b.n	8003b42 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0309 	and.w	r3, r3, #9
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e00a      	b.n	8003b40 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  return status;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003bbc:	f7ff fa1e 	bl	8002ffc <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0db      	b.n	8003d84 <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d8c <HAL_DMA_Init+0x1d8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f000 809f 	beq.w	8003d16 <HAL_DMA_Init+0x162>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6c      	ldr	r2, [pc, #432]	@ (8003d90 <HAL_DMA_Init+0x1dc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	f000 8099 	beq.w	8003d16 <HAL_DMA_Init+0x162>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d94 <HAL_DMA_Init+0x1e0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	f000 8093 	beq.w	8003d16 <HAL_DMA_Init+0x162>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a68      	ldr	r2, [pc, #416]	@ (8003d98 <HAL_DMA_Init+0x1e4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	f000 808d 	beq.w	8003d16 <HAL_DMA_Init+0x162>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a66      	ldr	r2, [pc, #408]	@ (8003d9c <HAL_DMA_Init+0x1e8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f000 8087 	beq.w	8003d16 <HAL_DMA_Init+0x162>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a64      	ldr	r2, [pc, #400]	@ (8003da0 <HAL_DMA_Init+0x1ec>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	f000 8081 	beq.w	8003d16 <HAL_DMA_Init+0x162>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a62      	ldr	r2, [pc, #392]	@ (8003da4 <HAL_DMA_Init+0x1f0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d07b      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a61      	ldr	r2, [pc, #388]	@ (8003da8 <HAL_DMA_Init+0x1f4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d076      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a5f      	ldr	r2, [pc, #380]	@ (8003dac <HAL_DMA_Init+0x1f8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d071      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a5e      	ldr	r2, [pc, #376]	@ (8003db0 <HAL_DMA_Init+0x1fc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d06c      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5c      	ldr	r2, [pc, #368]	@ (8003db4 <HAL_DMA_Init+0x200>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d067      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003db8 <HAL_DMA_Init+0x204>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d062      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a59      	ldr	r2, [pc, #356]	@ (8003dbc <HAL_DMA_Init+0x208>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d05d      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a58      	ldr	r2, [pc, #352]	@ (8003dc0 <HAL_DMA_Init+0x20c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d058      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a56      	ldr	r2, [pc, #344]	@ (8003dc4 <HAL_DMA_Init+0x210>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d053      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a55      	ldr	r2, [pc, #340]	@ (8003dc8 <HAL_DMA_Init+0x214>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04e      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a53      	ldr	r2, [pc, #332]	@ (8003dcc <HAL_DMA_Init+0x218>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d049      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a52      	ldr	r2, [pc, #328]	@ (8003dd0 <HAL_DMA_Init+0x21c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d044      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a50      	ldr	r2, [pc, #320]	@ (8003dd4 <HAL_DMA_Init+0x220>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d03f      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd8 <HAL_DMA_Init+0x224>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d03a      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8003ddc <HAL_DMA_Init+0x228>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d035      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4c      	ldr	r2, [pc, #304]	@ (8003de0 <HAL_DMA_Init+0x22c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d030      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8003de4 <HAL_DMA_Init+0x230>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02b      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a49      	ldr	r2, [pc, #292]	@ (8003de8 <HAL_DMA_Init+0x234>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d026      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a47      	ldr	r2, [pc, #284]	@ (8003dec <HAL_DMA_Init+0x238>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d021      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a46      	ldr	r2, [pc, #280]	@ (8003df0 <HAL_DMA_Init+0x23c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d01c      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a44      	ldr	r2, [pc, #272]	@ (8003df4 <HAL_DMA_Init+0x240>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d017      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a43      	ldr	r2, [pc, #268]	@ (8003df8 <HAL_DMA_Init+0x244>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d012      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a41      	ldr	r2, [pc, #260]	@ (8003dfc <HAL_DMA_Init+0x248>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00d      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a40      	ldr	r2, [pc, #256]	@ (8003e00 <HAL_DMA_Init+0x24c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d008      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a3e      	ldr	r2, [pc, #248]	@ (8003e04 <HAL_DMA_Init+0x250>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <HAL_DMA_Init+0x162>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a3d      	ldr	r2, [pc, #244]	@ (8003e08 <HAL_DMA_Init+0x254>)
 8003d14:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0206 	orr.w	r2, r2, #6
 8003d34:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003d36:	e00f      	b.n	8003d58 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003d38:	f7ff f960 	bl	8002ffc <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d908      	bls.n	8003d58 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e015      	b.n	8003d84 <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e8      	bne.n	8003d38 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb18 	bl	800439c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40020050 	.word	0x40020050
 8003d90:	50020050 	.word	0x50020050
 8003d94:	400200d0 	.word	0x400200d0
 8003d98:	500200d0 	.word	0x500200d0
 8003d9c:	40020150 	.word	0x40020150
 8003da0:	50020150 	.word	0x50020150
 8003da4:	400201d0 	.word	0x400201d0
 8003da8:	500201d0 	.word	0x500201d0
 8003dac:	40020250 	.word	0x40020250
 8003db0:	50020250 	.word	0x50020250
 8003db4:	400202d0 	.word	0x400202d0
 8003db8:	500202d0 	.word	0x500202d0
 8003dbc:	40020350 	.word	0x40020350
 8003dc0:	50020350 	.word	0x50020350
 8003dc4:	400203d0 	.word	0x400203d0
 8003dc8:	500203d0 	.word	0x500203d0
 8003dcc:	40020450 	.word	0x40020450
 8003dd0:	50020450 	.word	0x50020450
 8003dd4:	400204d0 	.word	0x400204d0
 8003dd8:	500204d0 	.word	0x500204d0
 8003ddc:	40020550 	.word	0x40020550
 8003de0:	50020550 	.word	0x50020550
 8003de4:	400205d0 	.word	0x400205d0
 8003de8:	500205d0 	.word	0x500205d0
 8003dec:	40020650 	.word	0x40020650
 8003df0:	50020650 	.word	0x50020650
 8003df4:	400206d0 	.word	0x400206d0
 8003df8:	500206d0 	.word	0x500206d0
 8003dfc:	40020750 	.word	0x40020750
 8003e00:	50020750 	.word	0x50020750
 8003e04:	400207d0 	.word	0x400207d0
 8003e08:	500207d0 	.word	0x500207d0

08003e0c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e04f      	b.n	8003ec4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_DMA_Start_IT+0x26>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e048      	b.n	8003ec4 <HAL_DMA_Start_IT+0xb8>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d136      	bne.n	8003eb4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa78 	bl	8004350 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003e6e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e86:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e9e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e007      	b.n	8003ec4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003ed4:	f7ff f892 	bl	8002ffc <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e06b      	b.n	8003fbc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d008      	beq.n	8003f02 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e05c      	b.n	8003fbc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0204 	orr.w	r2, r2, #4
 8003f10:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2205      	movs	r2, #5
 8003f16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003f1a:	e020      	b.n	8003f5e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003f1c:	f7ff f86e 	bl	8002ffc <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d919      	bls.n	8003f5e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	f043 0210 	orr.w	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f4e:	2201      	movs	r2, #1
 8003f50:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e02e      	b.n	8003fbc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0d7      	beq.n	8003f1c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0202 	orr.w	r2, r2, #2
 8003f7a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003f8c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e019      	b.n	800400a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d004      	beq.n	8003fec <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e00e      	b.n	800400a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b086      	sub	sp, #24
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004026:	f023 030f 	bic.w	r3, r3, #15
 800402a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	3b50      	subs	r3, #80	@ 0x50
 8004036:	09db      	lsrs	r3, r3, #7
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2201      	movs	r2, #1
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 813b 	beq.w	80042cc <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d011      	beq.n	8004088 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800407a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004092:	2b00      	cmp	r3, #0
 8004094:	d011      	beq.n	80040ba <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040ac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d011      	beq.n	80040ec <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040de:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d011      	beq.n	800411e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004110:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004116:	f043 0208 	orr.w	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004142:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04c      	beq.n	80041fc <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d045      	beq.n	80041fc <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004178:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b04      	cmp	r3, #4
 8004184:	d12e      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004194:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695a      	ldr	r2, [r3, #20]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0202 	orr.w	r2, r2, #2
 80041a4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041be:	2201      	movs	r2, #1
 80041c0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d07a      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
        }

        return;
 80041e2:	e075      	b.n	80042d0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2205      	movs	r2, #5
 80041e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d039      	beq.n	800427e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d032      	beq.n	800427e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004244:	2201      	movs	r2, #1
 8004246:	731a      	strb	r2, [r3, #12]
 8004248:	e008      	b.n	800425c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004264:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	2b00      	cmp	r3, #0
 8004284:	d025      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0202 	orr.w	r2, r2, #2
 8004294:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ae:	2201      	movs	r2, #1
 80042b0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e002      	b.n	80042d2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80042cc:	bf00      	nop
 80042ce:	e000      	b.n	80042d2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80042d0:	bf00      	nop
    }
  }
}
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e02b      	b.n	8004344 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80042f4:	f023 030f 	bic.w	r3, r3, #15
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004302:	3b50      	subs	r3, #80	@ 0x50
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	d012      	beq.n	8004342 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f003 0311 	and.w	r3, r3, #17
 8004322:	2b11      	cmp	r3, #17
 8004324:	d106      	bne.n	8004334 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	e006      	b.n	8004342 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	43db      	mvns	r3, r3
 800433c:	401a      	ands	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b291      	uxth	r1, r2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	430b      	orrs	r3, r1
 8004372:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800437c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a53      	ldr	r2, [pc, #332]	@ (8004528 <DMA_Init+0x18c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	f000 80a0 	beq.w	8004522 <DMA_Init+0x186>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a51      	ldr	r2, [pc, #324]	@ (800452c <DMA_Init+0x190>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	f000 809a 	beq.w	8004522 <DMA_Init+0x186>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4f      	ldr	r2, [pc, #316]	@ (8004530 <DMA_Init+0x194>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	f000 8094 	beq.w	8004522 <DMA_Init+0x186>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004534 <DMA_Init+0x198>)
 8004400:	4293      	cmp	r3, r2
 8004402:	f000 808e 	beq.w	8004522 <DMA_Init+0x186>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a4b      	ldr	r2, [pc, #300]	@ (8004538 <DMA_Init+0x19c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	f000 8088 	beq.w	8004522 <DMA_Init+0x186>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a49      	ldr	r2, [pc, #292]	@ (800453c <DMA_Init+0x1a0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	f000 8082 	beq.w	8004522 <DMA_Init+0x186>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a47      	ldr	r2, [pc, #284]	@ (8004540 <DMA_Init+0x1a4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d07c      	beq.n	8004522 <DMA_Init+0x186>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a45      	ldr	r2, [pc, #276]	@ (8004544 <DMA_Init+0x1a8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d077      	beq.n	8004522 <DMA_Init+0x186>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a44      	ldr	r2, [pc, #272]	@ (8004548 <DMA_Init+0x1ac>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d072      	beq.n	8004522 <DMA_Init+0x186>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a42      	ldr	r2, [pc, #264]	@ (800454c <DMA_Init+0x1b0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d06d      	beq.n	8004522 <DMA_Init+0x186>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a41      	ldr	r2, [pc, #260]	@ (8004550 <DMA_Init+0x1b4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d068      	beq.n	8004522 <DMA_Init+0x186>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3f      	ldr	r2, [pc, #252]	@ (8004554 <DMA_Init+0x1b8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d063      	beq.n	8004522 <DMA_Init+0x186>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3e      	ldr	r2, [pc, #248]	@ (8004558 <DMA_Init+0x1bc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d05e      	beq.n	8004522 <DMA_Init+0x186>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3c      	ldr	r2, [pc, #240]	@ (800455c <DMA_Init+0x1c0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d059      	beq.n	8004522 <DMA_Init+0x186>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3b      	ldr	r2, [pc, #236]	@ (8004560 <DMA_Init+0x1c4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d054      	beq.n	8004522 <DMA_Init+0x186>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a39      	ldr	r2, [pc, #228]	@ (8004564 <DMA_Init+0x1c8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d04f      	beq.n	8004522 <DMA_Init+0x186>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a38      	ldr	r2, [pc, #224]	@ (8004568 <DMA_Init+0x1cc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d04a      	beq.n	8004522 <DMA_Init+0x186>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a36      	ldr	r2, [pc, #216]	@ (800456c <DMA_Init+0x1d0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d045      	beq.n	8004522 <DMA_Init+0x186>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a35      	ldr	r2, [pc, #212]	@ (8004570 <DMA_Init+0x1d4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d040      	beq.n	8004522 <DMA_Init+0x186>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a33      	ldr	r2, [pc, #204]	@ (8004574 <DMA_Init+0x1d8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d03b      	beq.n	8004522 <DMA_Init+0x186>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a32      	ldr	r2, [pc, #200]	@ (8004578 <DMA_Init+0x1dc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d036      	beq.n	8004522 <DMA_Init+0x186>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a30      	ldr	r2, [pc, #192]	@ (800457c <DMA_Init+0x1e0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d031      	beq.n	8004522 <DMA_Init+0x186>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004580 <DMA_Init+0x1e4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d02c      	beq.n	8004522 <DMA_Init+0x186>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004584 <DMA_Init+0x1e8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d027      	beq.n	8004522 <DMA_Init+0x186>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004588 <DMA_Init+0x1ec>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d022      	beq.n	8004522 <DMA_Init+0x186>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	@ (800458c <DMA_Init+0x1f0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01d      	beq.n	8004522 <DMA_Init+0x186>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a29      	ldr	r2, [pc, #164]	@ (8004590 <DMA_Init+0x1f4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d018      	beq.n	8004522 <DMA_Init+0x186>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a27      	ldr	r2, [pc, #156]	@ (8004594 <DMA_Init+0x1f8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <DMA_Init+0x186>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a26      	ldr	r2, [pc, #152]	@ (8004598 <DMA_Init+0x1fc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00e      	beq.n	8004522 <DMA_Init+0x186>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a24      	ldr	r2, [pc, #144]	@ (800459c <DMA_Init+0x200>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d009      	beq.n	8004522 <DMA_Init+0x186>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a23      	ldr	r2, [pc, #140]	@ (80045a0 <DMA_Init+0x204>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <DMA_Init+0x186>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a21      	ldr	r2, [pc, #132]	@ (80045a4 <DMA_Init+0x208>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d142      	bne.n	80045a8 <DMA_Init+0x20c>
 8004522:	2301      	movs	r3, #1
 8004524:	e041      	b.n	80045aa <DMA_Init+0x20e>
 8004526:	bf00      	nop
 8004528:	40020050 	.word	0x40020050
 800452c:	50020050 	.word	0x50020050
 8004530:	400200d0 	.word	0x400200d0
 8004534:	500200d0 	.word	0x500200d0
 8004538:	40020150 	.word	0x40020150
 800453c:	50020150 	.word	0x50020150
 8004540:	400201d0 	.word	0x400201d0
 8004544:	500201d0 	.word	0x500201d0
 8004548:	40020250 	.word	0x40020250
 800454c:	50020250 	.word	0x50020250
 8004550:	400202d0 	.word	0x400202d0
 8004554:	500202d0 	.word	0x500202d0
 8004558:	40020350 	.word	0x40020350
 800455c:	50020350 	.word	0x50020350
 8004560:	400203d0 	.word	0x400203d0
 8004564:	500203d0 	.word	0x500203d0
 8004568:	40020450 	.word	0x40020450
 800456c:	50020450 	.word	0x50020450
 8004570:	400204d0 	.word	0x400204d0
 8004574:	500204d0 	.word	0x500204d0
 8004578:	40020550 	.word	0x40020550
 800457c:	50020550 	.word	0x50020550
 8004580:	400205d0 	.word	0x400205d0
 8004584:	500205d0 	.word	0x500205d0
 8004588:	40020650 	.word	0x40020650
 800458c:	50020650 	.word	0x50020650
 8004590:	400206d0 	.word	0x400206d0
 8004594:	500206d0 	.word	0x500206d0
 8004598:	40020750 	.word	0x40020750
 800459c:	50020750 	.word	0x50020750
 80045a0:	400207d0 	.word	0x400207d0
 80045a4:	500207d0 	.word	0x500207d0
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d012      	beq.n	80045d4 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	051b      	lsls	r3, r3, #20
 80045ba:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80045be:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	3b01      	subs	r3, #1
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80045cc:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004606:	f040 80b0 	bne.w	800476a <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a82      	ldr	r2, [pc, #520]	@ (8004818 <DMA_Init+0x47c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	f000 80a0 	beq.w	8004756 <DMA_Init+0x3ba>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a80      	ldr	r2, [pc, #512]	@ (800481c <DMA_Init+0x480>)
 800461c:	4293      	cmp	r3, r2
 800461e:	f000 809a 	beq.w	8004756 <DMA_Init+0x3ba>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a7e      	ldr	r2, [pc, #504]	@ (8004820 <DMA_Init+0x484>)
 8004628:	4293      	cmp	r3, r2
 800462a:	f000 8094 	beq.w	8004756 <DMA_Init+0x3ba>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a7c      	ldr	r2, [pc, #496]	@ (8004824 <DMA_Init+0x488>)
 8004634:	4293      	cmp	r3, r2
 8004636:	f000 808e 	beq.w	8004756 <DMA_Init+0x3ba>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7a      	ldr	r2, [pc, #488]	@ (8004828 <DMA_Init+0x48c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	f000 8088 	beq.w	8004756 <DMA_Init+0x3ba>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a78      	ldr	r2, [pc, #480]	@ (800482c <DMA_Init+0x490>)
 800464c:	4293      	cmp	r3, r2
 800464e:	f000 8082 	beq.w	8004756 <DMA_Init+0x3ba>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a76      	ldr	r2, [pc, #472]	@ (8004830 <DMA_Init+0x494>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d07c      	beq.n	8004756 <DMA_Init+0x3ba>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a74      	ldr	r2, [pc, #464]	@ (8004834 <DMA_Init+0x498>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d077      	beq.n	8004756 <DMA_Init+0x3ba>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a73      	ldr	r2, [pc, #460]	@ (8004838 <DMA_Init+0x49c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d072      	beq.n	8004756 <DMA_Init+0x3ba>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a71      	ldr	r2, [pc, #452]	@ (800483c <DMA_Init+0x4a0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d06d      	beq.n	8004756 <DMA_Init+0x3ba>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a70      	ldr	r2, [pc, #448]	@ (8004840 <DMA_Init+0x4a4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d068      	beq.n	8004756 <DMA_Init+0x3ba>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a6e      	ldr	r2, [pc, #440]	@ (8004844 <DMA_Init+0x4a8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d063      	beq.n	8004756 <DMA_Init+0x3ba>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a6d      	ldr	r2, [pc, #436]	@ (8004848 <DMA_Init+0x4ac>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d05e      	beq.n	8004756 <DMA_Init+0x3ba>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a6b      	ldr	r2, [pc, #428]	@ (800484c <DMA_Init+0x4b0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d059      	beq.n	8004756 <DMA_Init+0x3ba>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004850 <DMA_Init+0x4b4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d054      	beq.n	8004756 <DMA_Init+0x3ba>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a68      	ldr	r2, [pc, #416]	@ (8004854 <DMA_Init+0x4b8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d04f      	beq.n	8004756 <DMA_Init+0x3ba>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a67      	ldr	r2, [pc, #412]	@ (8004858 <DMA_Init+0x4bc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d04a      	beq.n	8004756 <DMA_Init+0x3ba>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a65      	ldr	r2, [pc, #404]	@ (800485c <DMA_Init+0x4c0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d045      	beq.n	8004756 <DMA_Init+0x3ba>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a64      	ldr	r2, [pc, #400]	@ (8004860 <DMA_Init+0x4c4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d040      	beq.n	8004756 <DMA_Init+0x3ba>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a62      	ldr	r2, [pc, #392]	@ (8004864 <DMA_Init+0x4c8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d03b      	beq.n	8004756 <DMA_Init+0x3ba>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a61      	ldr	r2, [pc, #388]	@ (8004868 <DMA_Init+0x4cc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d036      	beq.n	8004756 <DMA_Init+0x3ba>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a5f      	ldr	r2, [pc, #380]	@ (800486c <DMA_Init+0x4d0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d031      	beq.n	8004756 <DMA_Init+0x3ba>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004870 <DMA_Init+0x4d4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d02c      	beq.n	8004756 <DMA_Init+0x3ba>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a5c      	ldr	r2, [pc, #368]	@ (8004874 <DMA_Init+0x4d8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d027      	beq.n	8004756 <DMA_Init+0x3ba>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a5b      	ldr	r2, [pc, #364]	@ (8004878 <DMA_Init+0x4dc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <DMA_Init+0x3ba>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a59      	ldr	r2, [pc, #356]	@ (800487c <DMA_Init+0x4e0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01d      	beq.n	8004756 <DMA_Init+0x3ba>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a58      	ldr	r2, [pc, #352]	@ (8004880 <DMA_Init+0x4e4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <DMA_Init+0x3ba>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a56      	ldr	r2, [pc, #344]	@ (8004884 <DMA_Init+0x4e8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <DMA_Init+0x3ba>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a55      	ldr	r2, [pc, #340]	@ (8004888 <DMA_Init+0x4ec>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <DMA_Init+0x3ba>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a53      	ldr	r2, [pc, #332]	@ (800488c <DMA_Init+0x4f0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <DMA_Init+0x3ba>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a52      	ldr	r2, [pc, #328]	@ (8004890 <DMA_Init+0x4f4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <DMA_Init+0x3ba>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a50      	ldr	r2, [pc, #320]	@ (8004894 <DMA_Init+0x4f8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <DMA_Init+0x3be>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <DMA_Init+0x3c0>
 800475a:	2300      	movs	r3, #0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e008      	b.n	800477c <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004772:	d103      	bne.n	800477c <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800477a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004782:	4b45      	ldr	r3, [pc, #276]	@ (8004898 <DMA_Init+0x4fc>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	430b      	orrs	r3, r1
 800478e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a36      	ldr	r2, [pc, #216]	@ (8004878 <DMA_Init+0x4dc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d022      	beq.n	80047e8 <DMA_Init+0x44c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a35      	ldr	r2, [pc, #212]	@ (800487c <DMA_Init+0x4e0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d01d      	beq.n	80047e8 <DMA_Init+0x44c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a33      	ldr	r2, [pc, #204]	@ (8004880 <DMA_Init+0x4e4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <DMA_Init+0x44c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a32      	ldr	r2, [pc, #200]	@ (8004884 <DMA_Init+0x4e8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <DMA_Init+0x44c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a30      	ldr	r2, [pc, #192]	@ (8004888 <DMA_Init+0x4ec>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <DMA_Init+0x44c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2f      	ldr	r2, [pc, #188]	@ (800488c <DMA_Init+0x4f0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <DMA_Init+0x44c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004890 <DMA_Init+0x4f4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <DMA_Init+0x44c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004894 <DMA_Init+0x4f8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <DMA_Init+0x450>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <DMA_Init+0x452>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40020050 	.word	0x40020050
 800481c:	50020050 	.word	0x50020050
 8004820:	400200d0 	.word	0x400200d0
 8004824:	500200d0 	.word	0x500200d0
 8004828:	40020150 	.word	0x40020150
 800482c:	50020150 	.word	0x50020150
 8004830:	400201d0 	.word	0x400201d0
 8004834:	500201d0 	.word	0x500201d0
 8004838:	40020250 	.word	0x40020250
 800483c:	50020250 	.word	0x50020250
 8004840:	400202d0 	.word	0x400202d0
 8004844:	500202d0 	.word	0x500202d0
 8004848:	40020350 	.word	0x40020350
 800484c:	50020350 	.word	0x50020350
 8004850:	400203d0 	.word	0x400203d0
 8004854:	500203d0 	.word	0x500203d0
 8004858:	40020450 	.word	0x40020450
 800485c:	50020450 	.word	0x50020450
 8004860:	400204d0 	.word	0x400204d0
 8004864:	500204d0 	.word	0x500204d0
 8004868:	40020550 	.word	0x40020550
 800486c:	50020550 	.word	0x50020550
 8004870:	400205d0 	.word	0x400205d0
 8004874:	500205d0 	.word	0x500205d0
 8004878:	40020650 	.word	0x40020650
 800487c:	50020650 	.word	0x50020650
 8004880:	400206d0 	.word	0x400206d0
 8004884:	500206d0 	.word	0x500206d0
 8004888:	40020750 	.word	0x40020750
 800488c:	50020750 	.word	0x50020750
 8004890:	400207d0 	.word	0x400207d0
 8004894:	500207d0 	.word	0x500207d0
 8004898:	3cc03180 	.word	0x3cc03180

0800489c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7fe fbaa 	bl	8002ffc <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0db      	b.n	8004a6c <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a74 <HAL_DMAEx_List_Init+0x1d8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f000 809f 	beq.w	80049fe <HAL_DMAEx_List_Init+0x162>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004a78 <HAL_DMAEx_List_Init+0x1dc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	f000 8099 	beq.w	80049fe <HAL_DMAEx_List_Init+0x162>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a6a      	ldr	r2, [pc, #424]	@ (8004a7c <HAL_DMAEx_List_Init+0x1e0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f000 8093 	beq.w	80049fe <HAL_DMAEx_List_Init+0x162>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a68      	ldr	r2, [pc, #416]	@ (8004a80 <HAL_DMAEx_List_Init+0x1e4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f000 808d 	beq.w	80049fe <HAL_DMAEx_List_Init+0x162>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a66      	ldr	r2, [pc, #408]	@ (8004a84 <HAL_DMAEx_List_Init+0x1e8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f000 8087 	beq.w	80049fe <HAL_DMAEx_List_Init+0x162>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a64      	ldr	r2, [pc, #400]	@ (8004a88 <HAL_DMAEx_List_Init+0x1ec>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	f000 8081 	beq.w	80049fe <HAL_DMAEx_List_Init+0x162>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a62      	ldr	r2, [pc, #392]	@ (8004a8c <HAL_DMAEx_List_Init+0x1f0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d07b      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a61      	ldr	r2, [pc, #388]	@ (8004a90 <HAL_DMAEx_List_Init+0x1f4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d076      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a5f      	ldr	r2, [pc, #380]	@ (8004a94 <HAL_DMAEx_List_Init+0x1f8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d071      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a98 <HAL_DMAEx_List_Init+0x1fc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d06c      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a5c      	ldr	r2, [pc, #368]	@ (8004a9c <HAL_DMAEx_List_Init+0x200>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d067      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5b      	ldr	r2, [pc, #364]	@ (8004aa0 <HAL_DMAEx_List_Init+0x204>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d062      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a59      	ldr	r2, [pc, #356]	@ (8004aa4 <HAL_DMAEx_List_Init+0x208>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d05d      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a58      	ldr	r2, [pc, #352]	@ (8004aa8 <HAL_DMAEx_List_Init+0x20c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d058      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a56      	ldr	r2, [pc, #344]	@ (8004aac <HAL_DMAEx_List_Init+0x210>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d053      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a55      	ldr	r2, [pc, #340]	@ (8004ab0 <HAL_DMAEx_List_Init+0x214>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d04e      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a53      	ldr	r2, [pc, #332]	@ (8004ab4 <HAL_DMAEx_List_Init+0x218>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d049      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a52      	ldr	r2, [pc, #328]	@ (8004ab8 <HAL_DMAEx_List_Init+0x21c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d044      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a50      	ldr	r2, [pc, #320]	@ (8004abc <HAL_DMAEx_List_Init+0x220>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d03f      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a4f      	ldr	r2, [pc, #316]	@ (8004ac0 <HAL_DMAEx_List_Init+0x224>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d03a      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a4d      	ldr	r2, [pc, #308]	@ (8004ac4 <HAL_DMAEx_List_Init+0x228>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d035      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a4c      	ldr	r2, [pc, #304]	@ (8004ac8 <HAL_DMAEx_List_Init+0x22c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d030      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4a      	ldr	r2, [pc, #296]	@ (8004acc <HAL_DMAEx_List_Init+0x230>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d02b      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a49      	ldr	r2, [pc, #292]	@ (8004ad0 <HAL_DMAEx_List_Init+0x234>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d026      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a47      	ldr	r2, [pc, #284]	@ (8004ad4 <HAL_DMAEx_List_Init+0x238>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d021      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a46      	ldr	r2, [pc, #280]	@ (8004ad8 <HAL_DMAEx_List_Init+0x23c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d01c      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a44      	ldr	r2, [pc, #272]	@ (8004adc <HAL_DMAEx_List_Init+0x240>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d017      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a43      	ldr	r2, [pc, #268]	@ (8004ae0 <HAL_DMAEx_List_Init+0x244>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d012      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a41      	ldr	r2, [pc, #260]	@ (8004ae4 <HAL_DMAEx_List_Init+0x248>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00d      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a40      	ldr	r2, [pc, #256]	@ (8004ae8 <HAL_DMAEx_List_Init+0x24c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d008      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3e      	ldr	r2, [pc, #248]	@ (8004aec <HAL_DMAEx_List_Init+0x250>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d003      	beq.n	80049fe <HAL_DMAEx_List_Init+0x162>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3d      	ldr	r2, [pc, #244]	@ (8004af0 <HAL_DMAEx_List_Init+0x254>)
 80049fc:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0206 	orr.w	r2, r2, #6
 8004a1c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004a1e:	e00f      	b.n	8004a40 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004a20:	f7fe faec 	bl	8002ffc <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d908      	bls.n	8004a40 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2210      	movs	r2, #16
 8004a32:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e015      	b.n	8004a6c <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e8      	bne.n	8004a20 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 faba 	bl	8004fc8 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40020050 	.word	0x40020050
 8004a78:	50020050 	.word	0x50020050
 8004a7c:	400200d0 	.word	0x400200d0
 8004a80:	500200d0 	.word	0x500200d0
 8004a84:	40020150 	.word	0x40020150
 8004a88:	50020150 	.word	0x50020150
 8004a8c:	400201d0 	.word	0x400201d0
 8004a90:	500201d0 	.word	0x500201d0
 8004a94:	40020250 	.word	0x40020250
 8004a98:	50020250 	.word	0x50020250
 8004a9c:	400202d0 	.word	0x400202d0
 8004aa0:	500202d0 	.word	0x500202d0
 8004aa4:	40020350 	.word	0x40020350
 8004aa8:	50020350 	.word	0x50020350
 8004aac:	400203d0 	.word	0x400203d0
 8004ab0:	500203d0 	.word	0x500203d0
 8004ab4:	40020450 	.word	0x40020450
 8004ab8:	50020450 	.word	0x50020450
 8004abc:	400204d0 	.word	0x400204d0
 8004ac0:	500204d0 	.word	0x500204d0
 8004ac4:	40020550 	.word	0x40020550
 8004ac8:	50020550 	.word	0x50020550
 8004acc:	400205d0 	.word	0x400205d0
 8004ad0:	500205d0 	.word	0x500205d0
 8004ad4:	40020650 	.word	0x40020650
 8004ad8:	50020650 	.word	0x50020650
 8004adc:	400206d0 	.word	0x400206d0
 8004ae0:	500206d0 	.word	0x500206d0
 8004ae4:	40020750 	.word	0x40020750
 8004ae8:	50020750 	.word	0x50020750
 8004aec:	400207d0 	.word	0x400207d0
 8004af0:	500207d0 	.word	0x500207d0

08004af4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_DMAEx_List_Start_IT+0x16>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e082      	b.n	8004c14 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b14:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b20:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d005      	beq.n	8004b34 <HAL_DMAEx_List_Start_IT+0x40>
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d16a      	bne.n	8004c04 <HAL_DMAEx_List_Start_IT+0x110>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d067      	beq.n	8004c04 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d157      	bne.n	8004bf0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_DMAEx_List_Start_IT+0x5a>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e062      	b.n	8004c14 <HAL_DMAEx_List_Start_IT+0x120>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b62:	2202      	movs	r2, #2
 8004b64:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b70:	2200      	movs	r2, #0
 8004b72:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004b82:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b9a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bb2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f107 010c 	add.w	r1, r7, #12
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fd1d 	bl	8005600 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	0c0b      	lsrs	r3, r1, #16
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004be4:	4013      	ands	r3, r2
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	430b      	orrs	r3, r1
 8004bee:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e007      	b.n	8004c14 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2240      	movs	r2, #64	@ 0x40
 8004c08:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_DMAEx_List_BuildNode+0x16>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e004      	b.n	8004c40 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8004c36:	6839      	ldr	r1, [r7, #0]
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fb1d 	bl	8005278 <DMA_List_BuildNode>

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	@ 0x30
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_DMAEx_List_InsertNode+0x18>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0b6      	b.n	8004dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d104      	bne.n	8004c76 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e0ad      	b.n	8004dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fc52 	bl	8005528 <DMA_List_CheckNodesBaseAddresses>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d004      	beq.n	8004c94 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e09e      	b.n	8004dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fc73 	bl	8005588 <DMA_List_CheckNodesTypes>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2204      	movs	r2, #4
 8004cac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e08f      	b.n	8004dd2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8004cbe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fc99 	bl	8005600 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11a      	bne.n	8004d0c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	609a      	str	r2, [r3, #8]
 8004ce8:	e06c      	b.n	8004dc4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cfc:	4319      	orrs	r1, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2202      	movs	r2, #2
 8004d08:	609a      	str	r2, [r3, #8]
 8004d0a:	e05b      	b.n	8004dc4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d22:	4319      	orrs	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e043      	b.n	8004dba <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fc8e 	bl	8005660 <DMA_List_FindNode>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d132      	bne.n	8004db0 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d11a      	bne.n	8004d8a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004d66:	4013      	ands	r3, r2
 8004d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d6c:	4319      	orrs	r1, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d80:	4319      	orrs	r1, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d88:	e017      	b.n	8004dba <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8004d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004da0:	4013      	ands	r3, r2
 8004da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004da6:	4319      	orrs	r1, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004dae:	e004      	b.n	8004dba <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2206      	movs	r2, #6
 8004db4:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00b      	b.n	8004dd2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3730      	adds	r7, #48	@ 0x30
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b08a      	sub	sp, #40	@ 0x28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e052      	b.n	8004e92 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e049      	b.n	8004e92 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00c      	beq.n	8004e20 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d101      	bne.n	8004e16 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	e03d      	b.n	8004e92 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2204      	movs	r2, #4
 8004e1a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e038      	b.n	8004e92 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d104      	bne.n	8004e32 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e02f      	b.n	8004e92 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f107 0220 	add.w	r2, r7, #32
 8004e46:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fbd8 	bl	8005600 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fbff 	bl	8005660 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4610      	mov	r0, r2
 8004e74:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004e76:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004e78:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3728      	adds	r7, #40	@ 0x28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_DMAEx_List_LinkQ+0x16>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e072      	b.n	8004f9c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ebc:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d002      	beq.n	8004ed0 <HAL_DMAEx_List_LinkQ+0x34>
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d108      	bne.n	8004ee2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2240      	movs	r2, #64	@ 0x40
 8004ed4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e05c      	b.n	8004f9c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	7b1b      	ldrb	r3, [r3, #12]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d104      	bne.n	8004ef6 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e052      	b.n	8004f9c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2b      	ldr	r2, [pc, #172]	@ (8004fa8 <HAL_DMAEx_List_LinkQ+0x10c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a29      	ldr	r2, [pc, #164]	@ (8004fac <HAL_DMAEx_List_LinkQ+0x110>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a28      	ldr	r2, [pc, #160]	@ (8004fb0 <HAL_DMAEx_List_LinkQ+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a26      	ldr	r2, [pc, #152]	@ (8004fb4 <HAL_DMAEx_List_LinkQ+0x118>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a25      	ldr	r2, [pc, #148]	@ (8004fb8 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	@ (8004fbc <HAL_DMAEx_List_LinkQ+0x120>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a22      	ldr	r2, [pc, #136]	@ (8004fc0 <HAL_DMAEx_List_LinkQ+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a20      	ldr	r2, [pc, #128]	@ (8004fc4 <HAL_DMAEx_List_LinkQ+0x128>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_DMAEx_List_LinkQ+0xae>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_DMAEx_List_LinkQ+0xb0>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2203      	movs	r2, #3
 8004f62:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e019      	b.n	8004f9c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6c:	2b81      	cmp	r3, #129	@ 0x81
 8004f6e:	d108      	bne.n	8004f82 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e00c      	b.n	8004f9c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d004      	beq.n	8004f94 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e003      	b.n	8004f9c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40020650 	.word	0x40020650
 8004fac:	50020650 	.word	0x50020650
 8004fb0:	400206d0 	.word	0x400206d0
 8004fb4:	500206d0 	.word	0x500206d0
 8004fb8:	40020750 	.word	0x40020750
 8004fbc:	50020750 	.word	0x50020750
 8004fc0:	400207d0 	.word	0x400207d0
 8004fc4:	500207d0 	.word	0x500207d0

08004fc8 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a85      	ldr	r2, [pc, #532]	@ (80051f8 <DMA_List_Init+0x230>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	f000 80a0 	beq.w	8005128 <DMA_List_Init+0x160>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a83      	ldr	r2, [pc, #524]	@ (80051fc <DMA_List_Init+0x234>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f000 809a 	beq.w	8005128 <DMA_List_Init+0x160>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a81      	ldr	r2, [pc, #516]	@ (8005200 <DMA_List_Init+0x238>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	f000 8094 	beq.w	8005128 <DMA_List_Init+0x160>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7f      	ldr	r2, [pc, #508]	@ (8005204 <DMA_List_Init+0x23c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	f000 808e 	beq.w	8005128 <DMA_List_Init+0x160>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a7d      	ldr	r2, [pc, #500]	@ (8005208 <DMA_List_Init+0x240>)
 8005012:	4293      	cmp	r3, r2
 8005014:	f000 8088 	beq.w	8005128 <DMA_List_Init+0x160>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7b      	ldr	r2, [pc, #492]	@ (800520c <DMA_List_Init+0x244>)
 800501e:	4293      	cmp	r3, r2
 8005020:	f000 8082 	beq.w	8005128 <DMA_List_Init+0x160>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a79      	ldr	r2, [pc, #484]	@ (8005210 <DMA_List_Init+0x248>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d07c      	beq.n	8005128 <DMA_List_Init+0x160>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a78      	ldr	r2, [pc, #480]	@ (8005214 <DMA_List_Init+0x24c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d077      	beq.n	8005128 <DMA_List_Init+0x160>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a76      	ldr	r2, [pc, #472]	@ (8005218 <DMA_List_Init+0x250>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d072      	beq.n	8005128 <DMA_List_Init+0x160>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a75      	ldr	r2, [pc, #468]	@ (800521c <DMA_List_Init+0x254>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d06d      	beq.n	8005128 <DMA_List_Init+0x160>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a73      	ldr	r2, [pc, #460]	@ (8005220 <DMA_List_Init+0x258>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d068      	beq.n	8005128 <DMA_List_Init+0x160>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a72      	ldr	r2, [pc, #456]	@ (8005224 <DMA_List_Init+0x25c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d063      	beq.n	8005128 <DMA_List_Init+0x160>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a70      	ldr	r2, [pc, #448]	@ (8005228 <DMA_List_Init+0x260>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d05e      	beq.n	8005128 <DMA_List_Init+0x160>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6f      	ldr	r2, [pc, #444]	@ (800522c <DMA_List_Init+0x264>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d059      	beq.n	8005128 <DMA_List_Init+0x160>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6d      	ldr	r2, [pc, #436]	@ (8005230 <DMA_List_Init+0x268>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d054      	beq.n	8005128 <DMA_List_Init+0x160>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a6c      	ldr	r2, [pc, #432]	@ (8005234 <DMA_List_Init+0x26c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d04f      	beq.n	8005128 <DMA_List_Init+0x160>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6a      	ldr	r2, [pc, #424]	@ (8005238 <DMA_List_Init+0x270>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d04a      	beq.n	8005128 <DMA_List_Init+0x160>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a69      	ldr	r2, [pc, #420]	@ (800523c <DMA_List_Init+0x274>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d045      	beq.n	8005128 <DMA_List_Init+0x160>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a67      	ldr	r2, [pc, #412]	@ (8005240 <DMA_List_Init+0x278>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d040      	beq.n	8005128 <DMA_List_Init+0x160>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a66      	ldr	r2, [pc, #408]	@ (8005244 <DMA_List_Init+0x27c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d03b      	beq.n	8005128 <DMA_List_Init+0x160>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a64      	ldr	r2, [pc, #400]	@ (8005248 <DMA_List_Init+0x280>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d036      	beq.n	8005128 <DMA_List_Init+0x160>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a63      	ldr	r2, [pc, #396]	@ (800524c <DMA_List_Init+0x284>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d031      	beq.n	8005128 <DMA_List_Init+0x160>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a61      	ldr	r2, [pc, #388]	@ (8005250 <DMA_List_Init+0x288>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d02c      	beq.n	8005128 <DMA_List_Init+0x160>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a60      	ldr	r2, [pc, #384]	@ (8005254 <DMA_List_Init+0x28c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d027      	beq.n	8005128 <DMA_List_Init+0x160>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005258 <DMA_List_Init+0x290>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d022      	beq.n	8005128 <DMA_List_Init+0x160>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a5d      	ldr	r2, [pc, #372]	@ (800525c <DMA_List_Init+0x294>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d01d      	beq.n	8005128 <DMA_List_Init+0x160>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5b      	ldr	r2, [pc, #364]	@ (8005260 <DMA_List_Init+0x298>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <DMA_List_Init+0x160>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005264 <DMA_List_Init+0x29c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <DMA_List_Init+0x160>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a58      	ldr	r2, [pc, #352]	@ (8005268 <DMA_List_Init+0x2a0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <DMA_List_Init+0x160>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a57      	ldr	r2, [pc, #348]	@ (800526c <DMA_List_Init+0x2a4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <DMA_List_Init+0x160>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a55      	ldr	r2, [pc, #340]	@ (8005270 <DMA_List_Init+0x2a8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <DMA_List_Init+0x160>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a54      	ldr	r2, [pc, #336]	@ (8005274 <DMA_List_Init+0x2ac>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d101      	bne.n	800512c <DMA_List_Init+0x164>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <DMA_List_Init+0x166>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	430a      	orrs	r2, r1
 800514e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2200      	movs	r2, #0
 8005168:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a36      	ldr	r2, [pc, #216]	@ (8005258 <DMA_List_Init+0x290>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d022      	beq.n	80051ca <DMA_List_Init+0x202>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a34      	ldr	r2, [pc, #208]	@ (800525c <DMA_List_Init+0x294>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <DMA_List_Init+0x202>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a33      	ldr	r2, [pc, #204]	@ (8005260 <DMA_List_Init+0x298>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d018      	beq.n	80051ca <DMA_List_Init+0x202>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a31      	ldr	r2, [pc, #196]	@ (8005264 <DMA_List_Init+0x29c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <DMA_List_Init+0x202>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a30      	ldr	r2, [pc, #192]	@ (8005268 <DMA_List_Init+0x2a0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <DMA_List_Init+0x202>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a2e      	ldr	r2, [pc, #184]	@ (800526c <DMA_List_Init+0x2a4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <DMA_List_Init+0x202>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005270 <DMA_List_Init+0x2a8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <DMA_List_Init+0x202>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005274 <DMA_List_Init+0x2ac>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d101      	bne.n	80051ce <DMA_List_Init+0x206>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <DMA_List_Init+0x208>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d007      	beq.n	80051e4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2200      	movs	r2, #0
 80051e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40020050 	.word	0x40020050
 80051fc:	50020050 	.word	0x50020050
 8005200:	400200d0 	.word	0x400200d0
 8005204:	500200d0 	.word	0x500200d0
 8005208:	40020150 	.word	0x40020150
 800520c:	50020150 	.word	0x50020150
 8005210:	400201d0 	.word	0x400201d0
 8005214:	500201d0 	.word	0x500201d0
 8005218:	40020250 	.word	0x40020250
 800521c:	50020250 	.word	0x50020250
 8005220:	400202d0 	.word	0x400202d0
 8005224:	500202d0 	.word	0x500202d0
 8005228:	40020350 	.word	0x40020350
 800522c:	50020350 	.word	0x50020350
 8005230:	400203d0 	.word	0x400203d0
 8005234:	500203d0 	.word	0x500203d0
 8005238:	40020450 	.word	0x40020450
 800523c:	50020450 	.word	0x50020450
 8005240:	400204d0 	.word	0x400204d0
 8005244:	500204d0 	.word	0x500204d0
 8005248:	40020550 	.word	0x40020550
 800524c:	50020550 	.word	0x50020550
 8005250:	400205d0 	.word	0x400205d0
 8005254:	500205d0 	.word	0x500205d0
 8005258:	40020650 	.word	0x40020650
 800525c:	50020650 	.word	0x50020650
 8005260:	400206d0 	.word	0x400206d0
 8005264:	500206d0 	.word	0x500206d0
 8005268:	40020750 	.word	0x40020750
 800526c:	50020750 	.word	0x50020750
 8005270:	400207d0 	.word	0x400207d0
 8005274:	500207d0 	.word	0x500207d0

08005278 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800528a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005290:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005296:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800529c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d017      	beq.n	80052de <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ba:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	3b01      	subs	r3, #1
 80052c2:	051b      	lsls	r3, r3, #20
 80052c4:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80052c8:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	3b01      	subs	r3, #1
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80052d6:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80052d8:	431a      	orrs	r2, r3
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	f240 237f 	movw	r3, #639	@ 0x27f
 80052ea:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80052ec:	431a      	orrs	r2, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fa:	d10c      	bne.n	8005316 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d011      	beq.n	800532c <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	e00a      	b.n	800532c <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531e:	d105      	bne.n	800532c <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00f      	beq.n	8005354 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800534c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800534e:	431a      	orrs	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005358:	b29a      	uxth	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04e      	beq.n	8005408 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005372:	3b01      	subs	r3, #1
 8005374:	0419      	lsls	r1, r3, #16
 8005376:	4b6a      	ldr	r3, [pc, #424]	@ (8005520 <DMA_List_BuildNode+0x2a8>)
 8005378:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800537a:	431a      	orrs	r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005384:	2b00      	cmp	r3, #0
 8005386:	da06      	bge.n	8005396 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	e005      	b.n	80053a2 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da06      	bge.n	80053b8 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	609a      	str	r2, [r3, #8]
 80053b6:	e005      	b.n	80053c4 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	da06      	bge.n	80053da <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	e005      	b.n	80053e6 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da06      	bge.n	80053fc <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	609a      	str	r2, [r3, #8]
 80053fa:	e005      	b.n	8005408 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d05d      	beq.n	80054e0 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005428:	2b00      	cmp	r3, #0
 800542a:	da09      	bge.n	8005440 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005430:	425b      	negs	r3, r3
 8005432:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	615a      	str	r2, [r3, #20]
 800543e:	e005      	b.n	800544c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005444:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005450:	2b00      	cmp	r3, #0
 8005452:	da0d      	bge.n	8005470 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005458:	425b      	negs	r3, r3
 800545a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695a      	ldr	r2, [r3, #20]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	0419      	lsls	r1, r3, #16
 8005464:	4b2f      	ldr	r3, [pc, #188]	@ (8005524 <DMA_List_BuildNode+0x2ac>)
 8005466:	400b      	ands	r3, r1
 8005468:	431a      	orrs	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	615a      	str	r2, [r3, #20]
 800546e:	e009      	b.n	8005484 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005478:	0419      	lsls	r1, r3, #16
 800547a:	4b2a      	ldr	r3, [pc, #168]	@ (8005524 <DMA_List_BuildNode+0x2ac>)
 800547c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800547e:	431a      	orrs	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005488:	2b00      	cmp	r3, #0
 800548a:	da08      	bge.n	800549e <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	425b      	negs	r3, r3
 8005492:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	b29a      	uxth	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	619a      	str	r2, [r3, #24]
 800549c:	e004      	b.n	80054a8 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a2:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	da0b      	bge.n	80054c8 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	425b      	negs	r3, r3
 80054b6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054c0:	431a      	orrs	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	619a      	str	r2, [r3, #24]
 80054c6:	e007      	b.n	80054d8 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054d2:	431a      	orrs	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2200      	movs	r2, #0
 80054dc:	61da      	str	r2, [r3, #28]
 80054de:	e002      	b.n	80054e6 <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005506:	e005      	b.n	8005514 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	07ff0000 	.word	0x07ff0000
 8005524:	1fff0000 	.word	0x1fff0000

08005528 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4313      	orrs	r3, r2
 800553e:	0c1b      	lsrs	r3, r3, #16
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	e00a      	b.n	800556a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e004      	b.n	800556a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	0c1b      	lsrs	r3, r3, #16
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d001      	beq.n	800557a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e00e      	b.n	80055c6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e006      	b.n	80055c6 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80055d8:	2302      	movs	r3, #2
 80055da:	e00b      	b.n	80055f4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d001      	beq.n	80055f2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e000      	b.n	80055f4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a0d      	ldr	r2, [pc, #52]	@ (8005658 <DMA_List_GetCLLRNodeInfo+0x58>)
 8005622:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00f      	beq.n	800564a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2207      	movs	r2, #7
 800562e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005630:	e00b      	b.n	800564a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4a08      	ldr	r2, [pc, #32]	@ (800565c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800563c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2205      	movs	r2, #5
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	fe010000 	.word	0xfe010000
 800565c:	f8010000 	.word	0xf8010000

08005660 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8005660:	b480      	push	{r7}
 8005662:	b089      	sub	sp, #36	@ 0x24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d142      	bne.n	800570a <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8005684:	e01d      	b.n	80056c2 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005696:	4013      	ands	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e00f      	b.n	80056bc <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4413      	add	r3, r2
 80056ac:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80056b4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d3dc      	bcc.n	8005686 <DMA_List_FindNode+0x26>
 80056cc:	e029      	b.n	8005722 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d107      	bne.n	80056e4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e00f      	b.n	8005704 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4413      	add	r3, r2
 80056f4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80056fc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	3301      	adds	r3, #1
 8005708:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	429a      	cmp	r2, r3
 8005712:	d206      	bcs.n	8005722 <DMA_List_FindNode+0xc2>
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800571a:	4013      	ands	r3, r2
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	429a      	cmp	r2, r3
 8005720:	d1d5      	bne.n	80056ce <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800572e:	4013      	ands	r3, r2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	429a      	cmp	r2, r3
 8005734:	d001      	beq.n	800573a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8005736:	2301      	movs	r3, #1
 8005738:	e02b      	b.n	8005792 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	461a      	mov	r2, r3
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00f      	beq.n	8005790 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	461a      	mov	r2, r3
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8005780:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3724      	adds	r7, #36	@ 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	460b      	mov	r3, r1
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d011      	beq.n	80057da <HAL_EXTI_RegisterCallback+0x3c>
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	dc13      	bgt.n	80057e2 <HAL_EXTI_RegisterCallback+0x44>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_EXTI_RegisterCallback+0x26>
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d007      	beq.n	80057d2 <HAL_EXTI_RegisterCallback+0x34>
 80057c2:	e00e      	b.n	80057e2 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	609a      	str	r2, [r3, #8]
      break;
 80057d0:	e00a      	b.n	80057e8 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]
      break;
 80057d8:	e006      	b.n	80057e8 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]
      break;
 80057e0:	e002      	b.n	80057e8 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
      break;
 80057e6:	bf00      	nop
  }

  return status;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e003      	b.n	8005812 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005810:	2300      	movs	r3, #0
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	2201      	movs	r2, #1
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	4b17      	ldr	r3, [pc, #92]	@ (80058a8 <HAL_EXTI_IRQHandler+0x88>)
 800584a:	4413      	add	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4013      	ands	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	4b0d      	ldr	r3, [pc, #52]	@ (80058ac <HAL_EXTI_IRQHandler+0x8c>)
 8005878:	4413      	add	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4013      	ands	r3, r2
 8005884:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4798      	blx	r3
    }
  }
}
 80058a0:	bf00      	nop
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	4602200c 	.word	0x4602200c
 80058ac:	46022010 	.word	0x46022010

080058b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	@ 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80058c2:	e1ba      	b.n	8005c3a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	2101      	movs	r1, #1
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 81aa 	beq.w	8005c34 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a55      	ldr	r2, [pc, #340]	@ (8005a38 <HAL_GPIO_Init+0x188>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d15d      	bne.n	80059a4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80058ee:	2201      	movs	r2, #1
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0201 	and.w	r2, r3, #1
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	4313      	orrs	r3, r2
 8005910:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005918:	4a48      	ldr	r2, [pc, #288]	@ (8005a3c <HAL_GPIO_Init+0x18c>)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005920:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005922:	4a46      	ldr	r2, [pc, #280]	@ (8005a3c <HAL_GPIO_Init+0x18c>)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	08da      	lsrs	r2, r3, #3
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3208      	adds	r2, #8
 8005936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	220f      	movs	r2, #15
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	4013      	ands	r3, r2
 8005950:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	220b      	movs	r2, #11
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	4313      	orrs	r3, r2
 8005964:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	08da      	lsrs	r2, r3, #3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3208      	adds	r2, #8
 800596e:	69f9      	ldr	r1, [r7, #28]
 8005970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	2203      	movs	r2, #3
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	4013      	ands	r3, r2
 800598a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	2202      	movs	r2, #2
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	4313      	orrs	r3, r2
 800599a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e067      	b.n	8005a74 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d003      	beq.n	80059b4 <HAL_GPIO_Init+0x104>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b12      	cmp	r3, #18
 80059b2:	d145      	bne.n	8005a40 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	08da      	lsrs	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3208      	adds	r2, #8
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	220f      	movs	r2, #15
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	08da      	lsrs	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3208      	adds	r2, #8
 80059fa:	69f9      	ldr	r1, [r7, #28]
 80059fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f003 0203 	and.w	r2, r3, #3
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e01e      	b.n	8005a74 <HAL_GPIO_Init+0x1c4>
 8005a36:	bf00      	nop
 8005a38:	46020000 	.word	0x46020000
 8005a3c:	08012d04 	.word	0x08012d04
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69fa      	ldr	r2, [r7, #28]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 0203 	and.w	r2, r3, #3
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d00b      	beq.n	8005a94 <HAL_GPIO_Init+0x1e4>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d007      	beq.n	8005a94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a88:	2b11      	cmp	r3, #17
 8005a8a:	d003      	beq.n	8005a94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b12      	cmp	r3, #18
 8005a92:	d130      	bne.n	8005af6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005aca:	2201      	movs	r2, #1
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 0201 	and.w	r2, r3, #1
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d017      	beq.n	8005b2e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	2203      	movs	r2, #3
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	005b      	lsls	r3, r3, #1
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d07c      	beq.n	8005c34 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005b3a:	4a47      	ldr	r2, [pc, #284]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	3318      	adds	r3, #24
 8005b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	220f      	movs	r2, #15
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0a9a      	lsrs	r2, r3, #10
 8005b62:	4b3e      	ldr	r3, [pc, #248]	@ (8005c5c <HAL_GPIO_Init+0x3ac>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	f002 0203 	and.w	r2, r2, #3
 8005b6c:	00d2      	lsls	r2, r2, #3
 8005b6e:	4093      	lsls	r3, r2
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005b76:	4938      	ldr	r1, [pc, #224]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005b84:	4b34      	ldr	r3, [pc, #208]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005bae:	4b2a      	ldr	r3, [pc, #168]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005bd2:	4a21      	ldr	r2, [pc, #132]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bde:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005bfe:	4a16      	ldr	r2, [pc, #88]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005c06:	4b14      	ldr	r3, [pc, #80]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8005c58 <HAL_GPIO_Init+0x3a8>)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	3301      	adds	r3, #1
 8005c38:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f47f ae3d 	bne.w	80058c4 <HAL_GPIO_Init+0x14>
  }
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	3724      	adds	r7, #36	@ 0x24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	46022000 	.word	0x46022000
 8005c5c:	002f7f7f 	.word	0x002f7f7f

08005c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	807b      	strh	r3, [r7, #2]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c70:	787b      	ldrb	r3, [r7, #1]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005c7c:	e002      	b.n	8005c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005c7e:	887a      	ldrh	r2, [r7, #2]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	041a      	lsls	r2, r3, #16
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	43d9      	mvns	r1, r3
 8005cae:	887b      	ldrh	r3, [r7, #2]
 8005cb0:	400b      	ands	r3, r1
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	619a      	str	r2, [r3, #24]
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e059      	b.n	8005d8a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fc ff59 	bl	8002ba8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a24      	ldr	r2, [pc, #144]	@ (8005d94 <HAL_HCD_Init+0xd0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d102      	bne.n	8005d0c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f006 fe64 	bl	800c9de <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	7c1a      	ldrb	r2, [r3, #16]
 8005d1e:	f88d 2000 	strb.w	r2, [sp]
 8005d22:	3304      	adds	r3, #4
 8005d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d26:	f006 fe2d 	bl	800c984 <USB_CoreInit>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e026      	b.n	8005d8a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2101      	movs	r1, #1
 8005d42:	4618      	mov	r0, r3
 8005d44:	f006 fe5c 	bl	800ca00 <USB_SetCurrentMode>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e017      	b.n	8005d8a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	7c1a      	ldrb	r2, [r3, #16]
 8005d62:	f88d 2000 	strb.w	r2, [sp]
 8005d66:	3304      	adds	r3, #4
 8005d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d6a:	f006 ff35 	bl	800cbd8 <USB_HostInit>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e004      	b.n	8005d8a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	42040000 	.word	0x42040000

08005d98 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e007      	b.n	8005dc6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005db6:	4b07      	ldr	r3, [pc, #28]	@ (8005dd4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 0204 	bic.w	r2, r3, #4
 8005dbe:	4905      	ldr	r1, [pc, #20]	@ (8005dd4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40030400 	.word	0x40030400

08005dd8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005ddc:	4b05      	ldr	r3, [pc, #20]	@ (8005df4 <HAL_ICACHE_Enable+0x1c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a04      	ldr	r2, [pc, #16]	@ (8005df4 <HAL_ICACHE_Enable+0x1c>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40030400 	.word	0x40030400

08005df8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005e00:	4b39      	ldr	r3, [pc, #228]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e08:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d10b      	bne.n	8005e2a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e18:	d905      	bls.n	8005e26 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005e1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	4a32      	ldr	r2, [pc, #200]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e24:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e057      	b.n	8005eda <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e30:	d90a      	bls.n	8005e48 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005e32:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e44:	60d3      	str	r3, [r2, #12]
 8005e46:	e007      	b.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005e48:	4b27      	ldr	r3, [pc, #156]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005e50:	4925      	ldr	r1, [pc, #148]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005e58:	4b24      	ldr	r3, [pc, #144]	@ (8005eec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a24      	ldr	r2, [pc, #144]	@ (8005ef0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	099b      	lsrs	r3, r3, #6
 8005e64:	2232      	movs	r2, #50	@ 0x32
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
 8005e6a:	4a21      	ldr	r2, [pc, #132]	@ (8005ef0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e70:	099b      	lsrs	r3, r3, #6
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005e76:	e002      	b.n	8005e7e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f3      	bne.n	8005e78 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01b      	beq.n	8005ece <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005e96:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	@ (8005ef0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	2232      	movs	r2, #50	@ 0x32
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	4a11      	ldr	r2, [pc, #68]	@ (8005ef0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005eb4:	e002      	b.n	8005ebc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f3      	bne.n	8005eb6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e000      	b.n	8005eda <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	46020800 	.word	0x46020800
 8005eec:	20000000 	.word	0x20000000
 8005ef0:	10624dd3 	.word	0x10624dd3

08005ef4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005ef8:	4b04      	ldr	r3, [pc, #16]	@ (8005f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8005efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	46020800 	.word	0x46020800

08005f10 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005f18:	4b22      	ldr	r3, [pc, #136]	@ (8005fa4 <HAL_PWREx_ConfigSupply+0x94>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	@ (8005fa8 <HAL_PWREx_ConfigSupply+0x98>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	2232      	movs	r2, #50	@ 0x32
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <HAL_PWREx_ConfigSupply+0x98>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	099b      	lsrs	r3, r3, #6
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d113      	bne.n	8005f64 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fac <HAL_PWREx_ConfigSupply+0x9c>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	4a1a      	ldr	r2, [pc, #104]	@ (8005fac <HAL_PWREx_ConfigSupply+0x9c>)
 8005f42:	f023 0302 	bic.w	r3, r3, #2
 8005f46:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005f48:	e002      	b.n	8005f50 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005f50:	4b16      	ldr	r3, [pc, #88]	@ (8005fac <HAL_PWREx_ConfigSupply+0x9c>)
 8005f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d116      	bne.n	8005f8a <HAL_PWREx_ConfigSupply+0x7a>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f3      	bne.n	8005f4a <HAL_PWREx_ConfigSupply+0x3a>
 8005f62:	e012      	b.n	8005f8a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005f64:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <HAL_PWREx_ConfigSupply+0x9c>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a10      	ldr	r2, [pc, #64]	@ (8005fac <HAL_PWREx_ConfigSupply+0x9c>)
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005f70:	e002      	b.n	8005f78 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005f78:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <HAL_PWREx_ConfigSupply+0x9c>)
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <HAL_PWREx_ConfigSupply+0x7a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f3      	bne.n	8005f72 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e000      	b.n	8005f96 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000000 	.word	0x20000000
 8005fa8:	10624dd3 	.word	0x10624dd3
 8005fac:	46020800 	.word	0x46020800

08005fb0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8005fb4:	4b05      	ldr	r3, [pc, #20]	@ (8005fcc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	6113      	str	r3, [r2, #16]
}
 8005fc0:	bf00      	nop
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	46020800 	.word	0x46020800

08005fd0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005fd4:	4b05      	ldr	r3, [pc, #20]	@ (8005fec <HAL_PWREx_EnableVddIO2+0x1c>)
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	4a04      	ldr	r2, [pc, #16]	@ (8005fec <HAL_PWREx_EnableVddIO2+0x1c>)
 8005fda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fde:	6113      	str	r3, [r2, #16]
}
 8005fe0:	bf00      	nop
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	46020800 	.word	0x46020800

08005ff0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005ff4:	4b05      	ldr	r3, [pc, #20]	@ (800600c <HAL_PWREx_EnableVddA+0x1c>)
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	4a04      	ldr	r2, [pc, #16]	@ (800600c <HAL_PWREx_EnableVddA+0x1c>)
 8005ffa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ffe:	6113      	str	r3, [r2, #16]
}
 8006000:	bf00      	nop
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	46020800 	.word	0x46020800

08006010 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006018:	4a04      	ldr	r2, [pc, #16]	@ (800602c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	46020800 	.word	0x46020800

08006030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	@ 0x38
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f000 bec8 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800604a:	4b99      	ldr	r3, [pc, #612]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f003 030c 	and.w	r3, r3, #12
 8006052:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006054:	4b96      	ldr	r3, [pc, #600]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 816c 	beq.w	8006344 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_RCC_OscConfig+0x52>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b0c      	cmp	r3, #12
 8006076:	f040 80de 	bne.w	8006236 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800607a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607c:	2b01      	cmp	r3, #1
 800607e:	f040 80da 	bne.w	8006236 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f000 bea5 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006094:	4b86      	ldr	r3, [pc, #536]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <HAL_RCC_OscConfig+0x7a>
 80060a0:	4b83      	ldr	r3, [pc, #524]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80060a8:	e005      	b.n	80060b6 <HAL_RCC_OscConfig+0x86>
 80060aa:	4b81      	ldr	r3, [pc, #516]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80060ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060b0:	041b      	lsls	r3, r3, #16
 80060b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d255      	bcs.n	8006166 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fa11 	bl	80074ec <RCC_SetFlashLatencyFromMSIRange>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f000 be82 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80060d6:	4b76      	ldr	r3, [pc, #472]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4a75      	ldr	r2, [pc, #468]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80060dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060e0:	6093      	str	r3, [r2, #8]
 80060e2:	4b73      	ldr	r3, [pc, #460]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ee:	4970      	ldr	r1, [pc, #448]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80060fc:	d309      	bcc.n	8006112 <HAL_RCC_OscConfig+0xe2>
 80060fe:	4b6c      	ldr	r3, [pc, #432]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f023 021f 	bic.w	r2, r3, #31
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4969      	ldr	r1, [pc, #420]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800610c:	4313      	orrs	r3, r2
 800610e:	60cb      	str	r3, [r1, #12]
 8006110:	e07e      	b.n	8006210 <HAL_RCC_OscConfig+0x1e0>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	da0a      	bge.n	8006130 <HAL_RCC_OscConfig+0x100>
 800611a:	4b65      	ldr	r3, [pc, #404]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	015b      	lsls	r3, r3, #5
 8006128:	4961      	ldr	r1, [pc, #388]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800612a:	4313      	orrs	r3, r2
 800612c:	60cb      	str	r3, [r1, #12]
 800612e:	e06f      	b.n	8006210 <HAL_RCC_OscConfig+0x1e0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006138:	d30a      	bcc.n	8006150 <HAL_RCC_OscConfig+0x120>
 800613a:	4b5d      	ldr	r3, [pc, #372]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	029b      	lsls	r3, r3, #10
 8006148:	4959      	ldr	r1, [pc, #356]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800614a:	4313      	orrs	r3, r2
 800614c:	60cb      	str	r3, [r1, #12]
 800614e:	e05f      	b.n	8006210 <HAL_RCC_OscConfig+0x1e0>
 8006150:	4b57      	ldr	r3, [pc, #348]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	03db      	lsls	r3, r3, #15
 800615e:	4954      	ldr	r1, [pc, #336]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006160:	4313      	orrs	r3, r2
 8006162:	60cb      	str	r3, [r1, #12]
 8006164:	e054      	b.n	8006210 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006166:	4b52      	ldr	r3, [pc, #328]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4a51      	ldr	r2, [pc, #324]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800616c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006170:	6093      	str	r3, [r2, #8]
 8006172:	4b4f      	ldr	r3, [pc, #316]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	494c      	ldr	r1, [pc, #304]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006180:	4313      	orrs	r3, r2
 8006182:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800618c:	d309      	bcc.n	80061a2 <HAL_RCC_OscConfig+0x172>
 800618e:	4b48      	ldr	r3, [pc, #288]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f023 021f 	bic.w	r2, r3, #31
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4945      	ldr	r1, [pc, #276]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800619c:	4313      	orrs	r3, r2
 800619e:	60cb      	str	r3, [r1, #12]
 80061a0:	e028      	b.n	80061f4 <HAL_RCC_OscConfig+0x1c4>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da0a      	bge.n	80061c0 <HAL_RCC_OscConfig+0x190>
 80061aa:	4b41      	ldr	r3, [pc, #260]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	015b      	lsls	r3, r3, #5
 80061b8:	493d      	ldr	r1, [pc, #244]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60cb      	str	r3, [r1, #12]
 80061be:	e019      	b.n	80061f4 <HAL_RCC_OscConfig+0x1c4>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c8:	d30a      	bcc.n	80061e0 <HAL_RCC_OscConfig+0x1b0>
 80061ca:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	4935      	ldr	r1, [pc, #212]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	60cb      	str	r3, [r1, #12]
 80061de:	e009      	b.n	80061f4 <HAL_RCC_OscConfig+0x1c4>
 80061e0:	4b33      	ldr	r3, [pc, #204]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	03db      	lsls	r3, r3, #15
 80061ee:	4930      	ldr	r1, [pc, #192]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 f974 	bl	80074ec <RCC_SetFlashLatencyFromMSIRange>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f000 bde5 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006210:	f001 f8de 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006214:	4b27      	ldr	r3, [pc, #156]	@ (80062b4 <HAL_RCC_OscConfig+0x284>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f7fc f9b3 	bl	8002584 <HAL_InitTick>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 808a 	beq.w	8006342 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800622e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006232:	f000 bdd2 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d066      	beq.n	800630c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800623e:	4b1c      	ldr	r3, [pc, #112]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1b      	ldr	r2, [pc, #108]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800624a:	f7fc fed7 	bl	8002ffc <HAL_GetTick>
 800624e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006250:	e009      	b.n	8006266 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006252:	f7fc fed3 	bl	8002ffc <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d902      	bls.n	8006266 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	f000 bdba 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006266:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0ef      	beq.n	8006252 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006272:	4b0f      	ldr	r3, [pc, #60]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	4a0e      	ldr	r2, [pc, #56]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800627c:	6093      	str	r3, [r2, #8]
 800627e:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	4909      	ldr	r1, [pc, #36]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800628c:	4313      	orrs	r3, r2
 800628e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006298:	d30e      	bcc.n	80062b8 <HAL_RCC_OscConfig+0x288>
 800629a:	4b05      	ldr	r3, [pc, #20]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f023 021f 	bic.w	r2, r3, #31
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	4902      	ldr	r1, [pc, #8]	@ (80062b0 <HAL_RCC_OscConfig+0x280>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60cb      	str	r3, [r1, #12]
 80062ac:	e04a      	b.n	8006344 <HAL_RCC_OscConfig+0x314>
 80062ae:	bf00      	nop
 80062b0:	46020c00 	.word	0x46020c00
 80062b4:	2000001c 	.word	0x2000001c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	da0a      	bge.n	80062d6 <HAL_RCC_OscConfig+0x2a6>
 80062c0:	4b98      	ldr	r3, [pc, #608]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	015b      	lsls	r3, r3, #5
 80062ce:	4995      	ldr	r1, [pc, #596]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60cb      	str	r3, [r1, #12]
 80062d4:	e036      	b.n	8006344 <HAL_RCC_OscConfig+0x314>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062de:	d30a      	bcc.n	80062f6 <HAL_RCC_OscConfig+0x2c6>
 80062e0:	4b90      	ldr	r3, [pc, #576]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	029b      	lsls	r3, r3, #10
 80062ee:	498d      	ldr	r1, [pc, #564]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60cb      	str	r3, [r1, #12]
 80062f4:	e026      	b.n	8006344 <HAL_RCC_OscConfig+0x314>
 80062f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	03db      	lsls	r3, r3, #15
 8006304:	4987      	ldr	r1, [pc, #540]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006306:	4313      	orrs	r3, r2
 8006308:	60cb      	str	r3, [r1, #12]
 800630a:	e01b      	b.n	8006344 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800630c:	4b85      	ldr	r3, [pc, #532]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a84      	ldr	r2, [pc, #528]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006318:	f7fc fe70 	bl	8002ffc <HAL_GetTick>
 800631c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800631e:	e009      	b.n	8006334 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006320:	f7fc fe6c 	bl	8002ffc <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d902      	bls.n	8006334 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	f000 bd53 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006334:	4b7b      	ldr	r3, [pc, #492]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1ef      	bne.n	8006320 <HAL_RCC_OscConfig+0x2f0>
 8006340:	e000      	b.n	8006344 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006342:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 808b 	beq.w	8006468 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	2b08      	cmp	r3, #8
 8006356:	d005      	beq.n	8006364 <HAL_RCC_OscConfig+0x334>
 8006358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635a:	2b0c      	cmp	r3, #12
 800635c:	d109      	bne.n	8006372 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800635e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006360:	2b03      	cmp	r3, #3
 8006362:	d106      	bne.n	8006372 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d17d      	bne.n	8006468 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f000 bd34 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800637a:	d106      	bne.n	800638a <HAL_RCC_OscConfig+0x35a>
 800637c:	4b69      	ldr	r3, [pc, #420]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a68      	ldr	r2, [pc, #416]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e041      	b.n	800640e <HAL_RCC_OscConfig+0x3de>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006392:	d112      	bne.n	80063ba <HAL_RCC_OscConfig+0x38a>
 8006394:	4b63      	ldr	r3, [pc, #396]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a62      	ldr	r2, [pc, #392]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 800639a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	4b60      	ldr	r3, [pc, #384]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a5f      	ldr	r2, [pc, #380]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	4b5d      	ldr	r3, [pc, #372]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a5c      	ldr	r2, [pc, #368]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e029      	b.n	800640e <HAL_RCC_OscConfig+0x3de>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80063c2:	d112      	bne.n	80063ea <HAL_RCC_OscConfig+0x3ba>
 80063c4:	4b57      	ldr	r3, [pc, #348]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a56      	ldr	r2, [pc, #344]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	4b54      	ldr	r3, [pc, #336]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a53      	ldr	r2, [pc, #332]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	4b51      	ldr	r3, [pc, #324]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a50      	ldr	r2, [pc, #320]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	e011      	b.n	800640e <HAL_RCC_OscConfig+0x3de>
 80063ea:	4b4e      	ldr	r3, [pc, #312]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4d      	ldr	r2, [pc, #308]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a4a      	ldr	r2, [pc, #296]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80063fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	4b48      	ldr	r3, [pc, #288]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a47      	ldr	r2, [pc, #284]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006408:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800640c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d014      	beq.n	8006440 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006416:	f7fc fdf1 	bl	8002ffc <HAL_GetTick>
 800641a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800641c:	e009      	b.n	8006432 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641e:	f7fc fded 	bl	8002ffc <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b64      	cmp	r3, #100	@ 0x64
 800642a:	d902      	bls.n	8006432 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	f000 bcd4 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006432:	4b3c      	ldr	r3, [pc, #240]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ef      	beq.n	800641e <HAL_RCC_OscConfig+0x3ee>
 800643e:	e013      	b.n	8006468 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006440:	f7fc fddc 	bl	8002ffc <HAL_GetTick>
 8006444:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006446:	e009      	b.n	800645c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006448:	f7fc fdd8 	bl	8002ffc <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	@ 0x64
 8006454:	d902      	bls.n	800645c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	f000 bcbf 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800645c:	4b31      	ldr	r3, [pc, #196]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1ef      	bne.n	8006448 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d05f      	beq.n	8006534 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	2b04      	cmp	r3, #4
 8006478:	d005      	beq.n	8006486 <HAL_RCC_OscConfig+0x456>
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	2b0c      	cmp	r3, #12
 800647e:	d114      	bne.n	80064aa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006482:	2b02      	cmp	r3, #2
 8006484:	d111      	bne.n	80064aa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f000 bca3 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006494:	4b23      	ldr	r3, [pc, #140]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	4920      	ldr	r1, [pc, #128]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064a8:	e044      	b.n	8006534 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d024      	beq.n	80064fc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80064b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80064b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80064be:	f7fc fd9d 	bl	8002ffc <HAL_GetTick>
 80064c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064c4:	e009      	b.n	80064da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c6:	f7fc fd99 	bl	8002ffc <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d902      	bls.n	80064da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	f000 bc80 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064da:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0ef      	beq.n	80064c6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80064e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	041b      	lsls	r3, r3, #16
 80064f4:	490b      	ldr	r1, [pc, #44]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	610b      	str	r3, [r1, #16]
 80064fa:	e01b      	b.n	8006534 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80064fc:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a08      	ldr	r2, [pc, #32]	@ (8006524 <HAL_RCC_OscConfig+0x4f4>)
 8006502:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006506:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006508:	f7fc fd78 	bl	8002ffc <HAL_GetTick>
 800650c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800650e:	e00b      	b.n	8006528 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006510:	f7fc fd74 	bl	8002ffc <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d904      	bls.n	8006528 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	f000 bc5b 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
 8006524:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006528:	4baf      	ldr	r3, [pc, #700]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1ed      	bne.n	8006510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80c8 	beq.w	80066d2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006548:	4ba7      	ldr	r3, [pc, #668]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 800654a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d111      	bne.n	800657a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006556:	4ba4      	ldr	r3, [pc, #656]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800655c:	4aa2      	ldr	r2, [pc, #648]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 800655e:	f043 0304 	orr.w	r3, r3, #4
 8006562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006566:	4ba0      	ldr	r3, [pc, #640]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800656c:	f003 0304 	and.w	r3, r3, #4
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800657a:	4b9c      	ldr	r3, [pc, #624]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 800657c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d119      	bne.n	80065ba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006586:	4b99      	ldr	r3, [pc, #612]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	4a98      	ldr	r2, [pc, #608]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006592:	f7fc fd33 	bl	8002ffc <HAL_GetTick>
 8006596:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006598:	e009      	b.n	80065ae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659a:	f7fc fd2f 	bl	8002ffc <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d902      	bls.n	80065ae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	f000 bc16 	b.w	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065ae:	4b8f      	ldr	r3, [pc, #572]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d05f      	beq.n	8006682 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80065c2:	4b89      	ldr	r3, [pc, #548]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80065c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d037      	beq.n	8006648 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d006      	beq.n	80065f0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e3f4      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01b      	beq.n	8006632 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80065fa:	4b7b      	ldr	r3, [pc, #492]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80065fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006600:	4a79      	ldr	r2, [pc, #484]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006602:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800660a:	f7fc fcf7 	bl	8002ffc <HAL_GetTick>
 800660e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006612:	f7fc fcf3 	bl	8002ffc <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b05      	cmp	r3, #5
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e3da      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006624:	4b70      	ldr	r3, [pc, #448]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800662a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1ef      	bne.n	8006612 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006632:	4b6d      	ldr	r3, [pc, #436]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006638:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	4969      	ldr	r1, [pc, #420]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006648:	4b67      	ldr	r3, [pc, #412]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 800664a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800664e:	4a66      	ldr	r2, [pc, #408]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006650:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006654:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006658:	f7fc fcd0 	bl	8002ffc <HAL_GetTick>
 800665c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006660:	f7fc fccc 	bl	8002ffc <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b05      	cmp	r3, #5
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e3b3      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006672:	4b5d      	ldr	r3, [pc, #372]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0ef      	beq.n	8006660 <HAL_RCC_OscConfig+0x630>
 8006680:	e01b      	b.n	80066ba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006682:	4b59      	ldr	r3, [pc, #356]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006688:	4a57      	ldr	r2, [pc, #348]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 800668a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800668e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006692:	f7fc fcb3 	bl	8002ffc <HAL_GetTick>
 8006696:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800669a:	f7fc fcaf 	bl	8002ffc <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e396      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80066ac:	4b4e      	ldr	r3, [pc, #312]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80066ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1ef      	bne.n	800669a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d107      	bne.n	80066d2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066c2:	4b49      	ldr	r3, [pc, #292]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80066c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066c8:	4a47      	ldr	r2, [pc, #284]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80066ca:	f023 0304 	bic.w	r3, r3, #4
 80066ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8111 	beq.w	8006902 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066e6:	4b40      	ldr	r3, [pc, #256]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80066e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d111      	bne.n	8006718 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f4:	4b3c      	ldr	r3, [pc, #240]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80066f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066fa:	4a3b      	ldr	r2, [pc, #236]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80066fc:	f043 0304 	orr.w	r3, r3, #4
 8006700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006704:	4b38      	ldr	r3, [pc, #224]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006718:	4b34      	ldr	r3, [pc, #208]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d118      	bne.n	8006756 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006724:	4b31      	ldr	r3, [pc, #196]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 8006726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006728:	4a30      	ldr	r2, [pc, #192]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006730:	f7fc fc64 	bl	8002ffc <HAL_GetTick>
 8006734:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006738:	f7fc fc60 	bl	8002ffc <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e347      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800674a:	4b28      	ldr	r3, [pc, #160]	@ (80067ec <HAL_RCC_OscConfig+0x7bc>)
 800674c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01f      	beq.n	80067a2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d010      	beq.n	8006790 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800676e:	4b1e      	ldr	r3, [pc, #120]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006774:	4a1c      	ldr	r2, [pc, #112]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006776:	f043 0304 	orr.w	r3, r3, #4
 800677a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006784:	4a18      	ldr	r2, [pc, #96]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800678e:	e018      	b.n	80067c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006790:	4b15      	ldr	r3, [pc, #84]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006796:	4a14      	ldr	r2, [pc, #80]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067a0:	e00f      	b.n	80067c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80067a2:	4b11      	ldr	r3, [pc, #68]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80067a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067a8:	4a0f      	ldr	r2, [pc, #60]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80067aa:	f023 0301 	bic.w	r3, r3, #1
 80067ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80067b2:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80067b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067b8:	4a0b      	ldr	r2, [pc, #44]	@ (80067e8 <HAL_RCC_OscConfig+0x7b8>)
 80067ba:	f023 0304 	bic.w	r3, r3, #4
 80067be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d057      	beq.n	800687a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80067ca:	f7fc fc17 	bl	8002ffc <HAL_GetTick>
 80067ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d0:	e00e      	b.n	80067f0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d2:	f7fc fc13 	bl	8002ffc <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d905      	bls.n	80067f0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e2f8      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
 80067e8:	46020c00 	.word	0x46020c00
 80067ec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067f0:	4b9c      	ldr	r3, [pc, #624]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80067f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0e9      	beq.n	80067d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01b      	beq.n	8006842 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800680a:	4b96      	ldr	r3, [pc, #600]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 800680c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006810:	4a94      	ldr	r2, [pc, #592]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800681a:	e00a      	b.n	8006832 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681c:	f7fc fbee 	bl	8002ffc <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800682a:	4293      	cmp	r3, r2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e2d3      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006832:	4b8c      	ldr	r3, [pc, #560]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0ed      	beq.n	800681c <HAL_RCC_OscConfig+0x7ec>
 8006840:	e053      	b.n	80068ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006842:	4b88      	ldr	r3, [pc, #544]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006848:	4a86      	ldr	r2, [pc, #536]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 800684a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800684e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006852:	e00a      	b.n	800686a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006854:	f7fc fbd2 	bl	8002ffc <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e2b7      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800686a:	4b7e      	ldr	r3, [pc, #504]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 800686c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1ed      	bne.n	8006854 <HAL_RCC_OscConfig+0x824>
 8006878:	e037      	b.n	80068ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800687a:	f7fc fbbf 	bl	8002ffc <HAL_GetTick>
 800687e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006880:	e00a      	b.n	8006898 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006882:	f7fc fbbb 	bl	8002ffc <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e2a0      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006898:	4b72      	ldr	r3, [pc, #456]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 800689a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1ed      	bne.n	8006882 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80068a6:	4b6f      	ldr	r3, [pc, #444]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80068a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01a      	beq.n	80068ea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80068b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80068b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ba:	4a6a      	ldr	r2, [pc, #424]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80068bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80068c4:	e00a      	b.n	80068dc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c6:	f7fc fb99 	bl	8002ffc <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e27e      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80068dc:	4b61      	ldr	r3, [pc, #388]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80068de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1ed      	bne.n	80068c6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068ea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d107      	bne.n	8006902 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80068f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80068fa:	f023 0304 	bic.w	r3, r3, #4
 80068fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d036      	beq.n	800697c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d019      	beq.n	800694a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006916:	4b53      	ldr	r3, [pc, #332]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a52      	ldr	r2, [pc, #328]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 800691c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006920:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006922:	f7fc fb6b 	bl	8002ffc <HAL_GetTick>
 8006926:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800692a:	f7fc fb67 	bl	8002ffc <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e24e      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800693c:	4b49      	ldr	r3, [pc, #292]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <HAL_RCC_OscConfig+0x8fa>
 8006948:	e018      	b.n	800697c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800694a:	4b46      	ldr	r3, [pc, #280]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a45      	ldr	r2, [pc, #276]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006954:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006956:	f7fc fb51 	bl	8002ffc <HAL_GetTick>
 800695a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800695e:	f7fc fb4d 	bl	8002ffc <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e234      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006970:	4b3c      	ldr	r3, [pc, #240]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f0      	bne.n	800695e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006984:	2b00      	cmp	r3, #0
 8006986:	d036      	beq.n	80069f6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	2b00      	cmp	r3, #0
 800698e:	d019      	beq.n	80069c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006990:	4b34      	ldr	r3, [pc, #208]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a33      	ldr	r2, [pc, #204]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800699a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800699c:	f7fc fb2e 	bl	8002ffc <HAL_GetTick>
 80069a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80069a4:	f7fc fb2a 	bl	8002ffc <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e211      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80069b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0x974>
 80069c2:	e018      	b.n	80069f6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80069c4:	4b27      	ldr	r3, [pc, #156]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a26      	ldr	r2, [pc, #152]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80069ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80069d0:	f7fc fb14 	bl	8002ffc <HAL_GetTick>
 80069d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80069d8:	f7fc fb10 	bl	8002ffc <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e1f7      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80069ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d07f      	beq.n	8006b02 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d062      	beq.n	8006ad0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006a0a:	4b16      	ldr	r3, [pc, #88]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	4a15      	ldr	r2, [pc, #84]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a14:	6093      	str	r3, [r2, #8]
 8006a16:	4b13      	ldr	r3, [pc, #76]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	4910      	ldr	r1, [pc, #64]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006a30:	d309      	bcc.n	8006a46 <HAL_RCC_OscConfig+0xa16>
 8006a32:	4b0c      	ldr	r3, [pc, #48]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f023 021f 	bic.w	r2, r3, #31
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	4909      	ldr	r1, [pc, #36]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60cb      	str	r3, [r1, #12]
 8006a44:	e02a      	b.n	8006a9c <HAL_RCC_OscConfig+0xa6c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da0c      	bge.n	8006a68 <HAL_RCC_OscConfig+0xa38>
 8006a4e:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	015b      	lsls	r3, r3, #5
 8006a5c:	4901      	ldr	r1, [pc, #4]	@ (8006a64 <HAL_RCC_OscConfig+0xa34>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60cb      	str	r3, [r1, #12]
 8006a62:	e01b      	b.n	8006a9c <HAL_RCC_OscConfig+0xa6c>
 8006a64:	46020c00 	.word	0x46020c00
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a70:	d30a      	bcc.n	8006a88 <HAL_RCC_OscConfig+0xa58>
 8006a72:	4ba1      	ldr	r3, [pc, #644]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	029b      	lsls	r3, r3, #10
 8006a80:	499d      	ldr	r1, [pc, #628]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60cb      	str	r3, [r1, #12]
 8006a86:	e009      	b.n	8006a9c <HAL_RCC_OscConfig+0xa6c>
 8006a88:	4b9b      	ldr	r3, [pc, #620]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	03db      	lsls	r3, r3, #15
 8006a96:	4998      	ldr	r1, [pc, #608]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006a9c:	4b96      	ldr	r3, [pc, #600]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a95      	ldr	r2, [pc, #596]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006aa2:	f043 0310 	orr.w	r3, r3, #16
 8006aa6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006aa8:	f7fc faa8 	bl	8002ffc <HAL_GetTick>
 8006aac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006ab0:	f7fc faa4 	bl	8002ffc <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e18b      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0xa80>
 8006ace:	e018      	b.n	8006b02 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006ad0:	4b89      	ldr	r3, [pc, #548]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a88      	ldr	r2, [pc, #544]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006adc:	f7fc fa8e 	bl	8002ffc <HAL_GetTick>
 8006ae0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006ae4:	f7fc fa8a 	bl	8002ffc <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e171      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006af6:	4b80      	ldr	r3, [pc, #512]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8166 	beq.w	8006dd8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b12:	4b79      	ldr	r3, [pc, #484]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f003 030c 	and.w	r3, r3, #12
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	f000 80f2 	beq.w	8006d04 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	f040 80c5 	bne.w	8006cb4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006b2a:	4b73      	ldr	r3, [pc, #460]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a72      	ldr	r2, [pc, #456]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b34:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b36:	f7fc fa61 	bl	8002ffc <HAL_GetTick>
 8006b3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fc fa5d 	bl	8002ffc <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e144      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006b50:	4b69      	ldr	r3, [pc, #420]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5c:	4b66      	ldr	r3, [pc, #408]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b62:	f003 0304 	and.w	r3, r3, #4
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d111      	bne.n	8006b8e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006b6a:	4b63      	ldr	r3, [pc, #396]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b70:	4a61      	ldr	r2, [pc, #388]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b72:	f043 0304 	orr.w	r3, r3, #4
 8006b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8006cfc <HAL_RCC_OscConfig+0xccc>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b9a:	d102      	bne.n	8006ba2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006ba2:	4b56      	ldr	r3, [pc, #344]	@ (8006cfc <HAL_RCC_OscConfig+0xccc>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	4a55      	ldr	r2, [pc, #340]	@ (8006cfc <HAL_RCC_OscConfig+0xccc>)
 8006ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006bae:	4b52      	ldr	r3, [pc, #328]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	0212      	lsls	r2, r2, #8
 8006bc6:	4311      	orrs	r1, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	494a      	ldr	r1, [pc, #296]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006bd4:	4b48      	ldr	r3, [pc, #288]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bd8:	4b49      	ldr	r3, [pc, #292]	@ (8006d00 <HAL_RCC_OscConfig+0xcd0>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006be0:	3a01      	subs	r2, #1
 8006be2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006bea:	3a01      	subs	r2, #1
 8006bec:	0252      	lsls	r2, r2, #9
 8006bee:	b292      	uxth	r2, r2
 8006bf0:	4311      	orrs	r1, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006bf6:	3a01      	subs	r2, #1
 8006bf8:	0412      	lsls	r2, r2, #16
 8006bfa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006bfe:	4311      	orrs	r1, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006c04:	3a01      	subs	r2, #1
 8006c06:	0612      	lsls	r2, r2, #24
 8006c08:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	493a      	ldr	r1, [pc, #232]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006c14:	4b38      	ldr	r3, [pc, #224]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	4a37      	ldr	r2, [pc, #220]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c24:	4a34      	ldr	r2, [pc, #208]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006c2a:	4b33      	ldr	r3, [pc, #204]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2e:	4a32      	ldr	r2, [pc, #200]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c30:	f043 0310 	orr.w	r3, r3, #16
 8006c34:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006c36:	4b30      	ldr	r3, [pc, #192]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	f023 020c 	bic.w	r2, r3, #12
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c42:	492d      	ldr	r1, [pc, #180]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006c48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d105      	bne.n	8006c5c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006c50:	4b2a      	ldr	r3, [pc, #168]	@ (8006cfc <HAL_RCC_OscConfig+0xccc>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	4a29      	ldr	r2, [pc, #164]	@ (8006cfc <HAL_RCC_OscConfig+0xccc>)
 8006c56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c5a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006c5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d107      	bne.n	8006c74 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006c64:	4b24      	ldr	r3, [pc, #144]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c6a:	4a23      	ldr	r2, [pc, #140]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006c74:	4b20      	ldr	r3, [pc, #128]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006c80:	f7fc f9bc 	bl	8002ffc <HAL_GetTick>
 8006c84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c88:	f7fc f9b8 	bl	8002ffc <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e09f      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c9a:	4b17      	ldr	r3, [pc, #92]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0f0      	beq.n	8006c88 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ca6:	4b14      	ldr	r3, [pc, #80]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006caa:	4a13      	ldr	r2, [pc, #76]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cb0:	6293      	str	r3, [r2, #40]	@ 0x28
 8006cb2:	e091      	b.n	8006dd8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006cb4:	4b10      	ldr	r3, [pc, #64]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cbe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006cc0:	f7fc f99c 	bl	8002ffc <HAL_GetTick>
 8006cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc8:	f7fc f998 	bl	8002ffc <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e07f      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006cda:	4b07      	ldr	r3, [pc, #28]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006ce6:	4b04      	ldr	r3, [pc, #16]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cea:	4a03      	ldr	r2, [pc, #12]	@ (8006cf8 <HAL_RCC_OscConfig+0xcc8>)
 8006cec:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006cf0:	f023 0303 	bic.w	r3, r3, #3
 8006cf4:	6293      	str	r3, [r2, #40]	@ 0x28
 8006cf6:	e06f      	b.n	8006dd8 <HAL_RCC_OscConfig+0xda8>
 8006cf8:	46020c00 	.word	0x46020c00
 8006cfc:	46020800 	.word	0x46020800
 8006d00:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006d04:	4b37      	ldr	r3, [pc, #220]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d0a:	4b36      	ldr	r3, [pc, #216]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d039      	beq.n	8006d8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f003 0203 	and.w	r2, r3, #3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d132      	bne.n	8006d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d129      	bne.n	8006d8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d122      	bne.n	8006d8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d50:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d11a      	bne.n	8006d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	0a5b      	lsrs	r3, r3, #9
 8006d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d111      	bne.n	8006d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d108      	bne.n	8006d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	0e1b      	lsrs	r3, r3, #24
 8006d7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d86:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e024      	b.n	8006dda <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d90:	4b14      	ldr	r3, [pc, #80]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d01a      	beq.n	8006dd8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006da2:	4b10      	ldr	r3, [pc, #64]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	4a0f      	ldr	r2, [pc, #60]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dae:	f7fc f925 	bl	8002ffc <HAL_GetTick>
 8006db2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006db4:	bf00      	nop
 8006db6:	f7fc f921 	bl	8002ffc <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d0f9      	beq.n	8006db6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc6:	4a07      	ldr	r2, [pc, #28]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd0:	4a04      	ldr	r2, [pc, #16]	@ (8006de4 <HAL_RCC_OscConfig+0xdb4>)
 8006dd2:	f043 0310 	orr.w	r3, r3, #16
 8006dd6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3738      	adds	r7, #56	@ 0x38
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	46020c00 	.word	0x46020c00

08006de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e1d9      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800706c <HAL_RCC_ClockConfig+0x284>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d910      	bls.n	8006e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b98      	ldr	r3, [pc, #608]	@ (800706c <HAL_RCC_ClockConfig+0x284>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f023 020f 	bic.w	r2, r3, #15
 8006e12:	4996      	ldr	r1, [pc, #600]	@ (800706c <HAL_RCC_ClockConfig+0x284>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1a:	4b94      	ldr	r3, [pc, #592]	@ (800706c <HAL_RCC_ClockConfig+0x284>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e1c1      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695a      	ldr	r2, [r3, #20]
 8006e3c:	4b8c      	ldr	r3, [pc, #560]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d908      	bls.n	8006e5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006e48:	4b89      	ldr	r3, [pc, #548]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	4986      	ldr	r1, [pc, #536]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d012      	beq.n	8006e8c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	4b81      	ldr	r3, [pc, #516]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d909      	bls.n	8006e8c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006e78:	4b7d      	ldr	r3, [pc, #500]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	497a      	ldr	r1, [pc, #488]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d010      	beq.n	8006eba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	4b74      	ldr	r3, [pc, #464]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d908      	bls.n	8006eba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006ea8:	4b71      	ldr	r3, [pc, #452]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	496e      	ldr	r1, [pc, #440]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d010      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	4b69      	ldr	r3, [pc, #420]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d908      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006ed6:	4b66      	ldr	r3, [pc, #408]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 020f 	bic.w	r2, r3, #15
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	4963      	ldr	r1, [pc, #396]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80d2 	beq.w	800709a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d143      	bne.n	8006f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f02:	4b5b      	ldr	r3, [pc, #364]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d110      	bne.n	8006f32 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006f10:	4b57      	ldr	r3, [pc, #348]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f16:	4a56      	ldr	r2, [pc, #344]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f18:	f043 0304 	orr.w	r3, r3, #4
 8006f1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006f20:	4b53      	ldr	r3, [pc, #332]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006f32:	f7fc f863 	bl	8002ffc <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006f38:	4b4e      	ldr	r3, [pc, #312]	@ (8007074 <HAL_RCC_ClockConfig+0x28c>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00f      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006f46:	f7fc f859 	bl	8002ffc <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e12b      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006f58:	4b46      	ldr	r3, [pc, #280]	@ (8007074 <HAL_RCC_ClockConfig+0x28c>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0f0      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d107      	bne.n	8006f7a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006f6a:	4b41      	ldr	r3, [pc, #260]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f70:	4a3f      	ldr	r2, [pc, #252]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f72:	f023 0304 	bic.w	r3, r3, #4
 8006f76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d121      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e112      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d107      	bne.n	8006fa2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f92:	4b37      	ldr	r3, [pc, #220]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d115      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e106      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d107      	bne.n	8006fba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006faa:	4b31      	ldr	r3, [pc, #196]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e0fa      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fba:	4b2d      	ldr	r3, [pc, #180]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e0f2      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006fca:	4b29      	ldr	r3, [pc, #164]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f023 0203 	bic.w	r2, r3, #3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4926      	ldr	r1, [pc, #152]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006fdc:	f7fc f80e 	bl	8002ffc <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d112      	bne.n	8007010 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fea:	e00a      	b.n	8007002 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fec:	f7fc f806 	bl	8002ffc <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e0d6      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007002:	4b1b      	ldr	r3, [pc, #108]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b0c      	cmp	r3, #12
 800700c:	d1ee      	bne.n	8006fec <HAL_RCC_ClockConfig+0x204>
 800700e:	e044      	b.n	800709a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d112      	bne.n	800703e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007018:	e00a      	b.n	8007030 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800701a:	f7fb ffef 	bl	8002ffc <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e0bf      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007030:	4b0f      	ldr	r3, [pc, #60]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	f003 030c 	and.w	r3, r3, #12
 8007038:	2b08      	cmp	r3, #8
 800703a:	d1ee      	bne.n	800701a <HAL_RCC_ClockConfig+0x232>
 800703c:	e02d      	b.n	800709a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d123      	bne.n	800708e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007046:	e00a      	b.n	800705e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007048:	f7fb ffd8 	bl	8002ffc <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e0a8      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800705e:	4b04      	ldr	r3, [pc, #16]	@ (8007070 <HAL_RCC_ClockConfig+0x288>)
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f003 030c 	and.w	r3, r3, #12
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1ee      	bne.n	8007048 <HAL_RCC_ClockConfig+0x260>
 800706a:	e016      	b.n	800709a <HAL_RCC_ClockConfig+0x2b2>
 800706c:	40022000 	.word	0x40022000
 8007070:	46020c00 	.word	0x46020c00
 8007074:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007078:	f7fb ffc0 	bl	8002ffc <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e090      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800708e:	4b4a      	ldr	r3, [pc, #296]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f003 030c 	and.w	r3, r3, #12
 8007096:	2b04      	cmp	r3, #4
 8007098:	d1ee      	bne.n	8007078 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d010      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	4b43      	ldr	r3, [pc, #268]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d208      	bcs.n	80070c8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80070b6:	4b40      	ldr	r3, [pc, #256]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 020f 	bic.w	r2, r3, #15
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	493d      	ldr	r1, [pc, #244]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070c8:	4b3c      	ldr	r3, [pc, #240]	@ (80071bc <HAL_RCC_ClockConfig+0x3d4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d210      	bcs.n	80070f8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d6:	4b39      	ldr	r3, [pc, #228]	@ (80071bc <HAL_RCC_ClockConfig+0x3d4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f023 020f 	bic.w	r2, r3, #15
 80070de:	4937      	ldr	r1, [pc, #220]	@ (80071bc <HAL_RCC_ClockConfig+0x3d4>)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b35      	ldr	r3, [pc, #212]	@ (80071bc <HAL_RCC_ClockConfig+0x3d4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e05b      	b.n	80071b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d010      	beq.n	8007126 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	4b2b      	ldr	r3, [pc, #172]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007110:	429a      	cmp	r2, r3
 8007112:	d208      	bcs.n	8007126 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007114:	4b28      	ldr	r3, [pc, #160]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4925      	ldr	r1, [pc, #148]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007122:	4313      	orrs	r3, r2
 8007124:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d012      	beq.n	8007158 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	4b20      	ldr	r3, [pc, #128]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	091b      	lsrs	r3, r3, #4
 800713c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007140:	429a      	cmp	r2, r3
 8007142:	d209      	bcs.n	8007158 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007144:	4b1c      	ldr	r3, [pc, #112]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	4919      	ldr	r1, [pc, #100]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007154:	4313      	orrs	r3, r2
 8007156:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d010      	beq.n	8007186 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	695a      	ldr	r2, [r3, #20]
 8007168:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007170:	429a      	cmp	r2, r3
 8007172:	d208      	bcs.n	8007186 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007174:	4b10      	ldr	r3, [pc, #64]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007178:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	490d      	ldr	r1, [pc, #52]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 8007182:	4313      	orrs	r3, r2
 8007184:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007186:	f000 f821 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 800718a:	4602      	mov	r2, r0
 800718c:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <HAL_RCC_ClockConfig+0x3d0>)
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	490a      	ldr	r1, [pc, #40]	@ (80071c0 <HAL_RCC_ClockConfig+0x3d8>)
 8007196:	5ccb      	ldrb	r3, [r1, r3]
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
 800719c:	4a09      	ldr	r2, [pc, #36]	@ (80071c4 <HAL_RCC_ClockConfig+0x3dc>)
 800719e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80071a0:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <HAL_RCC_ClockConfig+0x3e0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fb f9ed 	bl	8002584 <HAL_InitTick>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	46020c00 	.word	0x46020c00
 80071bc:	40022000 	.word	0x40022000
 80071c0:	08012ca0 	.word	0x08012ca0
 80071c4:	20000000 	.word	0x20000000
 80071c8:	2000001c 	.word	0x2000001c

080071cc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b08b      	sub	sp, #44	@ 0x2c
 80071d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071da:	4b78      	ldr	r3, [pc, #480]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f003 030c 	and.w	r3, r3, #12
 80071e2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071e4:	4b75      	ldr	r3, [pc, #468]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_RCC_GetSysClockFreq+0x34>
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2b0c      	cmp	r3, #12
 80071f8:	d121      	bne.n	800723e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d11e      	bne.n	800723e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007200:	4b6e      	ldr	r3, [pc, #440]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d107      	bne.n	800721c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800720c:	4b6b      	ldr	r3, [pc, #428]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800720e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007212:	0b1b      	lsrs	r3, r3, #12
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
 800721a:	e005      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800721c:	4b67      	ldr	r3, [pc, #412]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	0f1b      	lsrs	r3, r3, #28
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007228:	4a65      	ldr	r2, [pc, #404]	@ (80073c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d110      	bne.n	800725a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800723c:	e00d      	b.n	800725a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800723e:	4b5f      	ldr	r3, [pc, #380]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f003 030c 	and.w	r3, r3, #12
 8007246:	2b04      	cmp	r3, #4
 8007248:	d102      	bne.n	8007250 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800724a:	4b5e      	ldr	r3, [pc, #376]	@ (80073c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800724c:	623b      	str	r3, [r7, #32]
 800724e:	e004      	b.n	800725a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b08      	cmp	r3, #8
 8007254:	d101      	bne.n	800725a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007256:	4b5b      	ldr	r3, [pc, #364]	@ (80073c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007258:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b0c      	cmp	r3, #12
 800725e:	f040 80a5 	bne.w	80073ac <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007262:	4b56      	ldr	r3, [pc, #344]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800726c:	4b53      	ldr	r3, [pc, #332]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800726e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007270:	0a1b      	lsrs	r3, r3, #8
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800727a:	4b50      	ldr	r3, [pc, #320]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800727c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007286:	4b4d      	ldr	r3, [pc, #308]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728a:	08db      	lsrs	r3, r3, #3
 800728c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	fb02 f303 	mul.w	r3, r2, r3
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d003      	beq.n	80072b0 <HAL_RCC_GetSysClockFreq+0xe4>
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d022      	beq.n	80072f4 <HAL_RCC_GetSysClockFreq+0x128>
 80072ae:	e043      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80073c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b3e      	ldr	r3, [pc, #248]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80072d2:	ed97 6a01 	vldr	s12, [r7, #4]
 80072d6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80073cc <HAL_RCC_GetSysClockFreq+0x200>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f2:	e046      	b.n	8007382 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80073c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007306:	4b2d      	ldr	r3, [pc, #180]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007316:	ed97 6a01 	vldr	s12, [r7, #4]
 800731a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80073cc <HAL_RCC_GetSysClockFreq+0x200>
 800731e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007322:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800732a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007336:	e024      	b.n	8007382 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007350:	4b1a      	ldr	r3, [pc, #104]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007360:	ed97 6a01 	vldr	s12, [r7, #4]
 8007364:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80073cc <HAL_RCC_GetSysClockFreq+0x200>
 8007368:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800736c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007370:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007374:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007380:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007382:	4b0e      	ldr	r3, [pc, #56]	@ (80073bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007386:	0e1b      	lsrs	r3, r3, #24
 8007388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800738c:	3301      	adds	r3, #1
 800738e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800739a:	edd7 6a07 	vldr	s13, [r7, #28]
 800739e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a6:	ee17 3a90 	vmov	r3, s15
 80073aa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80073ac:	6a3b      	ldr	r3, [r7, #32]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	372c      	adds	r7, #44	@ 0x2c
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	46020c00 	.word	0x46020c00
 80073c0:	08012cb8 	.word	0x08012cb8
 80073c4:	00f42400 	.word	0x00f42400
 80073c8:	4b742400 	.word	0x4b742400
 80073cc:	46000000 	.word	0x46000000

080073d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80073d4:	f7ff fefa 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 80073d8:	4602      	mov	r2, r0
 80073da:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <HAL_RCC_GetHCLKFreq+0x28>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	4906      	ldr	r1, [pc, #24]	@ (80073fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80073e4:	5ccb      	ldrb	r3, [r1, r3]
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	4a05      	ldr	r2, [pc, #20]	@ (8007400 <HAL_RCC_GetHCLKFreq+0x30>)
 80073ec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80073ee:	4b04      	ldr	r3, [pc, #16]	@ (8007400 <HAL_RCC_GetHCLKFreq+0x30>)
 80073f0:	681b      	ldr	r3, [r3, #0]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	46020c00 	.word	0x46020c00
 80073fc:	08012ca0 	.word	0x08012ca0
 8007400:	20000000 	.word	0x20000000

08007404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007408:	f7ff ffe2 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	091b      	lsrs	r3, r3, #4
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	4903      	ldr	r1, [pc, #12]	@ (8007428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800741a:	5ccb      	ldrb	r3, [r1, r3]
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007420:	4618      	mov	r0, r3
 8007422:	bd80      	pop	{r7, pc}
 8007424:	46020c00 	.word	0x46020c00
 8007428:	08012cb0 	.word	0x08012cb0

0800742c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007430:	f7ff ffce 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
 8007434:	4602      	mov	r2, r0
 8007436:	4b05      	ldr	r3, [pc, #20]	@ (800744c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	4903      	ldr	r1, [pc, #12]	@ (8007450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007442:	5ccb      	ldrb	r3, [r1, r3]
 8007444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007448:	4618      	mov	r0, r3
 800744a:	bd80      	pop	{r7, pc}
 800744c:	46020c00 	.word	0x46020c00
 8007450:	08012cb0 	.word	0x08012cb0

08007454 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007458:	f7ff ffba 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
 800745c:	4602      	mov	r2, r0
 800745e:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007462:	091b      	lsrs	r3, r3, #4
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	4903      	ldr	r1, [pc, #12]	@ (8007478 <HAL_RCC_GetPCLK3Freq+0x24>)
 800746a:	5ccb      	ldrb	r3, [r1, r3]
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007470:	4618      	mov	r0, r3
 8007472:	bd80      	pop	{r7, pc}
 8007474:	46020c00 	.word	0x46020c00
 8007478:	08012cb0 	.word	0x08012cb0

0800747c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	221f      	movs	r2, #31
 800748a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800748c:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <HAL_RCC_GetClockConfig+0x68>)
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f003 0203 	and.w	r2, r3, #3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007498:	4b12      	ldr	r3, [pc, #72]	@ (80074e4 <HAL_RCC_GetClockConfig+0x68>)
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80074a4:	4b0f      	ldr	r3, [pc, #60]	@ (80074e4 <HAL_RCC_GetClockConfig+0x68>)
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80074b0:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <HAL_RCC_GetClockConfig+0x68>)
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	091b      	lsrs	r3, r3, #4
 80074b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80074be:	4b09      	ldr	r3, [pc, #36]	@ (80074e4 <HAL_RCC_GetClockConfig+0x68>)
 80074c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074ca:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <HAL_RCC_GetClockConfig+0x6c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 020f 	and.w	r2, r3, #15
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	601a      	str	r2, [r3, #0]
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	46020c00 	.word	0x46020c00
 80074e8:	40022000 	.word	0x40022000

080074ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80074f4:	4b3e      	ldr	r3, [pc, #248]	@ (80075f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80074f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007502:	f7fe fcf7 	bl	8005ef4 <HAL_PWREx_GetVoltageRange>
 8007506:	6178      	str	r0, [r7, #20]
 8007508:	e019      	b.n	800753e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800750a:	4b39      	ldr	r3, [pc, #228]	@ (80075f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800750c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007510:	4a37      	ldr	r2, [pc, #220]	@ (80075f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007512:	f043 0304 	orr.w	r3, r3, #4
 8007516:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800751a:	4b35      	ldr	r3, [pc, #212]	@ (80075f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800751c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007528:	f7fe fce4 	bl	8005ef4 <HAL_PWREx_GetVoltageRange>
 800752c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800752e:	4b30      	ldr	r3, [pc, #192]	@ (80075f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007534:	4a2e      	ldr	r2, [pc, #184]	@ (80075f0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007536:	f023 0304 	bic.w	r3, r3, #4
 800753a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007544:	d003      	beq.n	800754e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800754c:	d109      	bne.n	8007562 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007554:	d202      	bcs.n	800755c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007556:	2301      	movs	r3, #1
 8007558:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800755a:	e033      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800755c:	2300      	movs	r3, #0
 800755e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007560:	e030      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007568:	d208      	bcs.n	800757c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007570:	d102      	bne.n	8007578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007572:	2303      	movs	r3, #3
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	e025      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e035      	b.n	80075e8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007582:	d90f      	bls.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007590:	d902      	bls.n	8007598 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	e015      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007598:	2301      	movs	r3, #1
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	e012      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800759e:	2300      	movs	r3, #0
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	e00f      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075aa:	d109      	bne.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075b2:	d102      	bne.n	80075ba <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80075b4:	2301      	movs	r3, #1
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	e004      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80075ba:	2302      	movs	r3, #2
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	e001      	b.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80075c0:	2301      	movs	r3, #1
 80075c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80075c4:	4b0b      	ldr	r3, [pc, #44]	@ (80075f4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f023 020f 	bic.w	r2, r3, #15
 80075cc:	4909      	ldr	r1, [pc, #36]	@ (80075f4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80075d4:	4b07      	ldr	r3, [pc, #28]	@ (80075f4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d001      	beq.n	80075e6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	46020c00 	.word	0x46020c00
 80075f4:	40022000 	.word	0x40022000

080075f8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80075f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075fc:	b0b8      	sub	sp, #224	@ 0xe0
 80075fe:	af00      	add	r7, sp, #0
 8007600:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007604:	2300      	movs	r3, #0
 8007606:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800760a:	2300      	movs	r3, #0
 800760c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f002 0401 	and.w	r4, r2, #1
 800761c:	2500      	movs	r5, #0
 800761e:	ea54 0305 	orrs.w	r3, r4, r5
 8007622:	d00b      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007624:	4bca      	ldr	r3, [pc, #808]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800762a:	f023 0103 	bic.w	r1, r3, #3
 800762e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007634:	4ac6      	ldr	r2, [pc, #792]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007636:	430b      	orrs	r3, r1
 8007638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800763c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f002 0802 	and.w	r8, r2, #2
 8007648:	f04f 0900 	mov.w	r9, #0
 800764c:	ea58 0309 	orrs.w	r3, r8, r9
 8007650:	d00b      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007652:	4bbf      	ldr	r3, [pc, #764]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007658:	f023 010c 	bic.w	r1, r3, #12
 800765c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007662:	4abb      	ldr	r2, [pc, #748]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007664:	430b      	orrs	r3, r1
 8007666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800766a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f002 0a04 	and.w	sl, r2, #4
 8007676:	f04f 0b00 	mov.w	fp, #0
 800767a:	ea5a 030b 	orrs.w	r3, sl, fp
 800767e:	d00b      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007680:	4bb3      	ldr	r3, [pc, #716]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007686:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800768a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800768e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007690:	4aaf      	ldr	r2, [pc, #700]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007692:	430b      	orrs	r3, r1
 8007694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f002 0308 	and.w	r3, r2, #8
 80076a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076a8:	2300      	movs	r3, #0
 80076aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4313      	orrs	r3, r2
 80076b6:	d00b      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80076b8:	4ba5      	ldr	r3, [pc, #660]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80076ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80076c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c8:	4aa1      	ldr	r2, [pc, #644]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80076ca:	430b      	orrs	r3, r1
 80076cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f002 0310 	and.w	r3, r2, #16
 80076dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076e0:	2300      	movs	r3, #0
 80076e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80076ea:	460b      	mov	r3, r1
 80076ec:	4313      	orrs	r3, r2
 80076ee:	d00b      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80076f0:	4b97      	ldr	r3, [pc, #604]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80076f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007700:	4a93      	ldr	r2, [pc, #588]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007702:	430b      	orrs	r3, r1
 8007704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007708:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f002 0320 	and.w	r3, r2, #32
 8007714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007718:	2300      	movs	r3, #0
 800771a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800771e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007722:	460b      	mov	r3, r1
 8007724:	4313      	orrs	r3, r2
 8007726:	d00b      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007728:	4b89      	ldr	r3, [pc, #548]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800772a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800772e:	f023 0107 	bic.w	r1, r3, #7
 8007732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007738:	4a85      	ldr	r2, [pc, #532]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800773a:	430b      	orrs	r3, r1
 800773c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800774c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007750:	2300      	movs	r3, #0
 8007752:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007756:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800775a:	460b      	mov	r3, r1
 800775c:	4313      	orrs	r3, r2
 800775e:	d00b      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007760:	4b7b      	ldr	r3, [pc, #492]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007766:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800776a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800776e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007770:	4a77      	ldr	r2, [pc, #476]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007772:	430b      	orrs	r3, r1
 8007774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007784:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007788:	2300      	movs	r3, #0
 800778a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800778e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d00b      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007798:	4b6d      	ldr	r3, [pc, #436]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800779a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800779e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a8:	4a69      	ldr	r2, [pc, #420]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80077aa:	430b      	orrs	r3, r1
 80077ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80077bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077c0:	2300      	movs	r3, #0
 80077c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80077d0:	4b5f      	ldr	r3, [pc, #380]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80077d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80077da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e0:	4a5b      	ldr	r2, [pc, #364]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80077e2:	430b      	orrs	r3, r1
 80077e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80077f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077f8:	2300      	movs	r3, #0
 80077fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007802:	460b      	mov	r3, r1
 8007804:	4313      	orrs	r3, r2
 8007806:	d00b      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007808:	4b51      	ldr	r3, [pc, #324]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800780a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800780e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007818:	4a4d      	ldr	r2, [pc, #308]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800781a:	430b      	orrs	r3, r1
 800781c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800782c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007830:	2300      	movs	r3, #0
 8007832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007836:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800783a:	460b      	mov	r3, r1
 800783c:	4313      	orrs	r3, r2
 800783e:	d00b      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007840:	4b43      	ldr	r3, [pc, #268]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007846:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800784a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800784e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007850:	4a3f      	ldr	r2, [pc, #252]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007852:	430b      	orrs	r3, r1
 8007854:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007868:	2300      	movs	r3, #0
 800786a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800786e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007872:	460b      	mov	r3, r1
 8007874:	4313      	orrs	r3, r2
 8007876:	d00b      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007878:	4b35      	ldr	r3, [pc, #212]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800787a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800787e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007888:	4a31      	ldr	r2, [pc, #196]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800788a:	430b      	orrs	r3, r1
 800788c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007898:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800789c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800789e:	2300      	movs	r3, #0
 80078a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80078a6:	460b      	mov	r3, r1
 80078a8:	4313      	orrs	r3, r2
 80078aa:	d00c      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80078ac:	4b28      	ldr	r3, [pc, #160]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80078ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078be:	4a24      	ldr	r2, [pc, #144]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80078c0:	430b      	orrs	r3, r1
 80078c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80078d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80078d4:	2300      	movs	r3, #0
 80078d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80078d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80078dc:	460b      	mov	r3, r1
 80078de:	4313      	orrs	r3, r2
 80078e0:	d04f      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80078e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ea:	2b80      	cmp	r3, #128	@ 0x80
 80078ec:	d02d      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x352>
 80078ee:	2b80      	cmp	r3, #128	@ 0x80
 80078f0:	d827      	bhi.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80078f2:	2b60      	cmp	r3, #96	@ 0x60
 80078f4:	d02e      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80078f6:	2b60      	cmp	r3, #96	@ 0x60
 80078f8:	d823      	bhi.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80078fa:	2b40      	cmp	r3, #64	@ 0x40
 80078fc:	d006      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x314>
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d81f      	bhi.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x322>
 8007906:	2b20      	cmp	r3, #32
 8007908:	d011      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800790a:	e01a      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800790c:	4b10      	ldr	r3, [pc, #64]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800790e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007910:	4a0f      	ldr	r2, [pc, #60]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007916:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007918:	e01d      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800791a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800791e:	3308      	adds	r3, #8
 8007920:	4618      	mov	r0, r3
 8007922:	f002 f9d1 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 800792c:	e013      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800792e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007932:	332c      	adds	r3, #44	@ 0x2c
 8007934:	4618      	mov	r0, r3
 8007936:	f002 fa5f 	bl	8009df8 <RCCEx_PLL3_Config>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007940:	e009      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007948:	e005      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800794a:	bf00      	nop
 800794c:	e003      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800794e:	bf00      	nop
 8007950:	46020c00 	.word	0x46020c00
        break;
 8007954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007956:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10d      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800795e:	4bb6      	ldr	r3, [pc, #728]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007964:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800796c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007970:	4ab1      	ldr	r2, [pc, #708]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007972:	430b      	orrs	r3, r1
 8007974:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007978:	e003      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800797e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007982:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800798e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007990:	2300      	movs	r3, #0
 8007992:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007994:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007998:	460b      	mov	r3, r1
 800799a:	4313      	orrs	r3, r2
 800799c:	d053      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800799e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079aa:	d033      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80079ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079b0:	d82c      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80079b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079b6:	d02f      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80079b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079bc:	d826      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80079be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c2:	d008      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80079c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079c8:	d820      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80079ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079d2:	d011      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80079d4:	e01a      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079d6:	4b98      	ldr	r3, [pc, #608]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80079d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079da:	4a97      	ldr	r2, [pc, #604]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80079dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80079e2:	e01a      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079e8:	3308      	adds	r3, #8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f002 f96c 	bl	8009cc8 <RCCEx_PLL2_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80079f6:	e010      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079fc:	332c      	adds	r3, #44	@ 0x2c
 80079fe:	4618      	mov	r0, r3
 8007a00:	f002 f9fa 	bl	8009df8 <RCCEx_PLL3_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a0a:	e006      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007a12:	e002      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007a14:	bf00      	nop
 8007a16:	e000      	b.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a1a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10d      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007a22:	4b85      	ldr	r3, [pc, #532]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007a24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a28:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007a2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a34:	4a80      	ldr	r2, [pc, #512]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007a36:	430b      	orrs	r3, r1
 8007a38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007a3c:	e003      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a42:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a54:	2300      	movs	r3, #0
 8007a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	d046      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007a62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a6a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a6e:	d028      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007a70:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a74:	d821      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a7a:	d022      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a80:	d81b      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007a82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a86:	d01c      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007a88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a8c:	d815      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a92:	d008      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a98:	d80f      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d011      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa2:	d00e      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007aa4:	e009      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aaa:	3308      	adds	r3, #8
 8007aac:	4618      	mov	r0, r3
 8007aae:	f002 f90b 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007ab8:	e004      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8007ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10d      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007acc:	4b5a      	ldr	r3, [pc, #360]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ad2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ade:	4a56      	ldr	r2, [pc, #344]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ae6:	e003      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007aec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007af0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007afc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007afe:	2300      	movs	r3, #0
 8007b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007b06:	460b      	mov	r3, r1
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	d03f      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d81e      	bhi.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8007b18:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8007b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1e:	bf00      	nop
 8007b20:	08007b5f 	.word	0x08007b5f
 8007b24:	08007b35 	.word	0x08007b35
 8007b28:	08007b43 	.word	0x08007b43
 8007b2c:	08007b5f 	.word	0x08007b5f
 8007b30:	08007b5f 	.word	0x08007b5f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b34:	4b40      	ldr	r3, [pc, #256]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	4a3f      	ldr	r2, [pc, #252]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007b3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b3e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007b40:	e00e      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b46:	332c      	adds	r3, #44	@ 0x2c
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f002 f955 	bl	8009df8 <RCCEx_PLL3_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b54:	e004      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b5c:	e000      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8007b5e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b60:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10d      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007b68:	4b33      	ldr	r3, [pc, #204]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007b6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b6e:	f023 0107 	bic.w	r1, r3, #7
 8007b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007b82:	e003      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b84:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b88:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	d04d      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bb4:	d028      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8007bb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bba:	d821      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007bbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bc0:	d024      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007bc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bc6:	d81b      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007bc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bcc:	d00e      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007bce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd2:	d815      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01b      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bdc:	d110      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bde:	4b16      	ldr	r3, [pc, #88]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	4a15      	ldr	r2, [pc, #84]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007be8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007bea:	e012      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bf0:	332c      	adds	r3, #44	@ 0x2c
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f002 f900 	bl	8009df8 <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007bfe:	e008      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007c06:	e004      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007c08:	bf00      	nop
 8007c0a:	e002      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007c0c:	bf00      	nop
 8007c0e:	e000      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007c10:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c12:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d110      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007c1a:	4b07      	ldr	r3, [pc, #28]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c2c:	4a02      	ldr	r2, [pc, #8]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c34:	e006      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007c36:	bf00      	nop
 8007c38:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007c40:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c52:	2300      	movs	r3, #0
 8007c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c56:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f000 80b5 	beq.w	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c62:	2300      	movs	r3, #0
 8007c64:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c68:	4b9d      	ldr	r3, [pc, #628]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d113      	bne.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c76:	4b9a      	ldr	r3, [pc, #616]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c7c:	4a98      	ldr	r2, [pc, #608]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007c7e:	f043 0304 	orr.w	r3, r3, #4
 8007c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007c86:	4b96      	ldr	r3, [pc, #600]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007c9e:	4b91      	ldr	r3, [pc, #580]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	4a90      	ldr	r2, [pc, #576]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ca4:	f043 0301 	orr.w	r3, r3, #1
 8007ca8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007caa:	f7fb f9a7 	bl	8002ffc <HAL_GetTick>
 8007cae:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007cb2:	e00b      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cb4:	f7fb f9a2 	bl	8002ffc <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d903      	bls.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007cca:	e005      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ccc:	4b85      	ldr	r3, [pc, #532]	@ (8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0ed      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8007cd8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d165      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ce0:	4b7f      	ldr	r3, [pc, #508]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d023      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8007cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cfa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8007cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d01b      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d06:	4b76      	ldr	r3, [pc, #472]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d14:	4b72      	ldr	r3, [pc, #456]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d1a:	4a71      	ldr	r2, [pc, #452]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d24:	4b6e      	ldr	r3, [pc, #440]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d2a:	4a6d      	ldr	r2, [pc, #436]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d34:	4a6a      	ldr	r2, [pc, #424]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d019      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4a:	f7fb f957 	bl	8002ffc <HAL_GetTick>
 8007d4e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d52:	e00d      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d54:	f7fb f952 	bl	8002ffc <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d903      	bls.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8007d6e:	e006      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d70:	4b5b      	ldr	r3, [pc, #364]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0ea      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8007d7e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007d86:	4b56      	ldr	r3, [pc, #344]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d8c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d98:	4a51      	ldr	r2, [pc, #324]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007da0:	e008      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007da2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007da6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8007daa:	e003      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007db0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007db4:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d107      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dbc:	4b48      	ldr	r3, [pc, #288]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dc2:	4a47      	ldr	r2, [pc, #284]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007dc4:	f023 0304 	bic.w	r3, r3, #4
 8007dc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dda:	2300      	movs	r3, #0
 8007ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d042      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007df0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007df4:	d022      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007df6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007dfa:	d81b      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e00:	d011      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007e02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e06:	d815      	bhi.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d019      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007e0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e10:	d110      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e16:	3308      	adds	r3, #8
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 ff55 	bl	8009cc8 <RCCEx_PLL2_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007e24:	e00d      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e26:	4b2e      	ldr	r3, [pc, #184]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e30:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007e32:	e006      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007e3a:	e002      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007e3c:	bf00      	nop
 8007e3e:	e000      	b.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007e40:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007e42:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10d      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007e4a:	4b25      	ldr	r3, [pc, #148]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e50:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e5c:	4a20      	ldr	r2, [pc, #128]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e64:	e003      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007e6a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007e84:	460b      	mov	r3, r1
 8007e86:	4313      	orrs	r3, r2
 8007e88:	d032      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e96:	d00b      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e9c:	d804      	bhi.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d008      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ea6:	d007      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007eae:	e004      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007eb0:	bf00      	nop
 8007eb2:	e002      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007eb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007eba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d112      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007ec2:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ec4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ec8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ed4:	4a02      	ldr	r2, [pc, #8]	@ (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007edc:	e008      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8007ede:	bf00      	nop
 8007ee0:	46020c00 	.word	0x46020c00
 8007ee4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007eec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007efe:	2300      	movs	r3, #0
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d019      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f18:	d105      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f1a:	4b88      	ldr	r3, [pc, #544]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1e:	4a87      	ldr	r2, [pc, #540]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f24:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007f26:	4b85      	ldr	r3, [pc, #532]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f38:	4a80      	ldr	r2, [pc, #512]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007f40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f4e:	2300      	movs	r3, #0
 8007f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f56:	460b      	mov	r3, r1
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	d00c      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007f5c:	4b77      	ldr	r3, [pc, #476]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f6e:	4973      	ldr	r1, [pc, #460]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f82:	623b      	str	r3, [r7, #32]
 8007f84:	2300      	movs	r3, #0
 8007f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	d00c      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007f92:	4b6a      	ldr	r3, [pc, #424]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007f9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fa4:	4965      	ldr	r1, [pc, #404]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	d00c      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fce:	f023 0218 	bic.w	r2, r3, #24
 8007fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007fda:	4958      	ldr	r1, [pc, #352]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	d032      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007ffe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008002:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800800a:	d105      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800800c:	4b4b      	ldr	r3, [pc, #300]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800800e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008010:	4a4a      	ldr	r2, [pc, #296]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008016:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800801c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008020:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008024:	d108      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800802a:	3308      	adds	r3, #8
 800802c:	4618      	mov	r0, r3
 800802e:	f001 fe4b 	bl	8009cc8 <RCCEx_PLL2_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8008038:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10d      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008040:	4b3e      	ldr	r3, [pc, #248]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008046:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800804a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800804e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008052:	493a      	ldr	r1, [pc, #232]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008054:	4313      	orrs	r3, r2
 8008056:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008060:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008070:	60bb      	str	r3, [r7, #8]
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800807a:	460b      	mov	r3, r1
 800807c:	4313      	orrs	r3, r2
 800807e:	d03a      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800808c:	d00e      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800808e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008092:	d815      	bhi.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d017      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8008098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800809c:	d110      	bne.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800809e:	4b27      	ldr	r3, [pc, #156]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80080a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a2:	4a26      	ldr	r2, [pc, #152]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80080a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80080aa:	e00e      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080b0:	3308      	adds	r3, #8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 fe08 	bl	8009cc8 <RCCEx_PLL2_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80080be:	e004      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80080c6:	e000      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80080c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80080ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80080d2:	4b1a      	ldr	r3, [pc, #104]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80080d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80080dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080e4:	4915      	ldr	r1, [pc, #84]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80080ec:	e003      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80080f2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80080f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	607b      	str	r3, [r7, #4]
 8008108:	e9d7 1200 	ldrd	r1, r2, [r7]
 800810c:	460b      	mov	r3, r1
 800810e:	4313      	orrs	r3, r2
 8008110:	d00c      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008112:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008118:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800811c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008124:	4905      	ldr	r1, [pc, #20]	@ (800813c <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008126:	4313      	orrs	r3, r2
 8008128:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800812c:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8008130:	4618      	mov	r0, r3
 8008132:	37e0      	adds	r7, #224	@ 0xe0
 8008134:	46bd      	mov	sp, r7
 8008136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800813a:	bf00      	nop
 800813c:	46020c00 	.word	0x46020c00

08008140 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	@ 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008148:	4ba6      	ldr	r3, [pc, #664]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800814a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008150:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008152:	4ba4      	ldr	r3, [pc, #656]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800815c:	4ba1      	ldr	r3, [pc, #644]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	0a1b      	lsrs	r3, r3, #8
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	3301      	adds	r3, #1
 8008168:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800816a:	4b9e      	ldr	r3, [pc, #632]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	091b      	lsrs	r3, r3, #4
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008176:	4b9b      	ldr	r3, [pc, #620]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	08db      	lsrs	r3, r3, #3
 800817c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b03      	cmp	r3, #3
 8008196:	d062      	beq.n	800825e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b03      	cmp	r3, #3
 800819c:	f200 8081 	bhi.w	80082a2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d024      	beq.n	80081f0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d17a      	bne.n	80082a2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80083e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80081ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081be:	4b89      	ldr	r3, [pc, #548]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80081ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80081d2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80081d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80081de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80081e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ee:	e08f      	b.n	8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80081f0:	4b7c      	ldr	r3, [pc, #496]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80081fc:	4b79      	ldr	r3, [pc, #484]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	0f1b      	lsrs	r3, r3, #28
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	e006      	b.n	8008216 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008208:	4b76      	ldr	r3, [pc, #472]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800820a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	0f1b      	lsrs	r3, r3, #28
 8008212:	f003 030f 	and.w	r3, r3, #15
 8008216:	4a76      	ldr	r2, [pc, #472]	@ (80083f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821c:	ee07 3a90 	vmov	s15, r3
 8008220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008240:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008250:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800825c:	e058      	b.n	8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008268:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800826c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008270:	4b5c      	ldr	r3, [pc, #368]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008278:	ee07 3a90 	vmov	s15, r3
 800827c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008280:	ed97 6a02 	vldr	s12, [r7, #8]
 8008284:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008288:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800828c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008290:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008294:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082a0:	e036      	b.n	8008310 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80082a2:	4b50      	ldr	r3, [pc, #320]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80082ae:	4b4d      	ldr	r3, [pc, #308]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	0f1b      	lsrs	r3, r3, #28
 80082b4:	f003 030f 	and.w	r3, r3, #15
 80082b8:	e006      	b.n	80082c8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80082ba:	4b4a      	ldr	r3, [pc, #296]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082c0:	041b      	lsls	r3, r3, #16
 80082c2:	0f1b      	lsrs	r3, r3, #28
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	4a49      	ldr	r2, [pc, #292]	@ (80083f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80082ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80082f2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80083ec <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008302:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800830e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008310:	4b34      	ldr	r3, [pc, #208]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d017      	beq.n	800834c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800831c:	4b31      	ldr	r3, [pc, #196]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800831e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008320:	0a5b      	lsrs	r3, r3, #9
 8008322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800832e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008332:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008336:	edd7 6a07 	vldr	s13, [r7, #28]
 800833a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800833e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008342:	ee17 2a90 	vmov	r2, s15
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e002      	b.n	8008352 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008352:	4b24      	ldr	r3, [pc, #144]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d017      	beq.n	800838e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800835e:	4b21      	ldr	r3, [pc, #132]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008362:	0c1b      	lsrs	r3, r3, #16
 8008364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008370:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008374:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008378:	edd7 6a07 	vldr	s13, [r7, #28]
 800837c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008384:	ee17 2a90 	vmov	r2, s15
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	605a      	str	r2, [r3, #4]
 800838c:	e002      	b.n	8008394 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008394:	4b13      	ldr	r3, [pc, #76]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d017      	beq.n	80083d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083a0:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a4:	0e1b      	lsrs	r3, r3, #24
 80083a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80083b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083b6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80083be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083c6:	ee17 2a90 	vmov	r2, s15
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80083ce:	e002      	b.n	80083d6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	609a      	str	r2, [r3, #8]
}
 80083d6:	bf00      	nop
 80083d8:	3724      	adds	r7, #36	@ 0x24
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	46020c00 	.word	0x46020c00
 80083e8:	4b742400 	.word	0x4b742400
 80083ec:	46000000 	.word	0x46000000
 80083f0:	08012cb8 	.word	0x08012cb8

080083f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b089      	sub	sp, #36	@ 0x24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80083fc:	4ba6      	ldr	r3, [pc, #664]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008404:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008406:	4ba4      	ldr	r3, [pc, #656]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008410:	4ba1      	ldr	r3, [pc, #644]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008414:	0a1b      	lsrs	r3, r3, #8
 8008416:	f003 030f 	and.w	r3, r3, #15
 800841a:	3301      	adds	r3, #1
 800841c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800841e:	4b9e      	ldr	r3, [pc, #632]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	091b      	lsrs	r3, r3, #4
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800842a:	4b9b      	ldr	r3, [pc, #620]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800842c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842e:	08db      	lsrs	r3, r3, #3
 8008430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	fb02 f303 	mul.w	r3, r2, r3
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d062      	beq.n	8008512 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b03      	cmp	r3, #3
 8008450:	f200 8081 	bhi.w	8008556 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d024      	beq.n	80084a4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d17a      	bne.n	8008556 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800869c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800846e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008472:	4b89      	ldr	r3, [pc, #548]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008482:	ed97 6a02 	vldr	s12, [r7, #8]
 8008486:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800848a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800848e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008496:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800849a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084a2:	e08f      	b.n	80085c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80084a4:	4b7c      	ldr	r3, [pc, #496]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80084b0:	4b79      	ldr	r3, [pc, #484]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	0f1b      	lsrs	r3, r3, #28
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	e006      	b.n	80084ca <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80084bc:	4b76      	ldr	r3, [pc, #472]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084c2:	041b      	lsls	r3, r3, #16
 80084c4:	0f1b      	lsrs	r3, r3, #28
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	4a76      	ldr	r2, [pc, #472]	@ (80086a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80084cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80084f4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80084f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008500:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008504:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008510:	e058      	b.n	80085c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800869c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008524:	4b5c      	ldr	r3, [pc, #368]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852c:	ee07 3a90 	vmov	s15, r3
 8008530:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008534:	ed97 6a02 	vldr	s12, [r7, #8]
 8008538:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800853c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008540:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008548:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800854c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008550:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008554:	e036      	b.n	80085c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008556:	4b50      	ldr	r3, [pc, #320]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8008562:	4b4d      	ldr	r3, [pc, #308]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	0f1b      	lsrs	r3, r3, #28
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	e006      	b.n	800857c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800856e:	4b4a      	ldr	r3, [pc, #296]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008574:	041b      	lsls	r3, r3, #16
 8008576:	0f1b      	lsrs	r3, r3, #28
 8008578:	f003 030f 	and.w	r3, r3, #15
 800857c:	4a49      	ldr	r2, [pc, #292]	@ (80086a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800857e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80085aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80085ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085c2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80085c4:	4b34      	ldr	r3, [pc, #208]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d017      	beq.n	8008600 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085d0:	4b31      	ldr	r3, [pc, #196]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	0a5b      	lsrs	r3, r3, #9
 80085d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80085e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f6:	ee17 2a90 	vmov	r2, s15
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e002      	b.n	8008606 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008606:	4b24      	ldr	r3, [pc, #144]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d017      	beq.n	8008642 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008612:	4b21      	ldr	r3, [pc, #132]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008616:	0c1b      	lsrs	r3, r3, #16
 8008618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008628:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800862c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008638:	ee17 2a90 	vmov	r2, s15
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	605a      	str	r2, [r3, #4]
 8008640:	e002      	b.n	8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008648:	4b13      	ldr	r3, [pc, #76]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d017      	beq.n	8008684 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008654:	4b10      	ldr	r3, [pc, #64]	@ (8008698 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008658:	0e1b      	lsrs	r3, r3, #24
 800865a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800866a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800866e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867a:	ee17 2a90 	vmov	r2, s15
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008682:	e002      	b.n	800868a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	609a      	str	r2, [r3, #8]
}
 800868a:	bf00      	nop
 800868c:	3724      	adds	r7, #36	@ 0x24
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	46020c00 	.word	0x46020c00
 800869c:	4b742400 	.word	0x4b742400
 80086a0:	46000000 	.word	0x46000000
 80086a4:	08012cb8 	.word	0x08012cb8

080086a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b089      	sub	sp, #36	@ 0x24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80086b0:	4ba6      	ldr	r3, [pc, #664]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80086ba:	4ba4      	ldr	r3, [pc, #656]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80086c4:	4ba1      	ldr	r3, [pc, #644]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	3301      	adds	r3, #1
 80086d0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80086d2:	4b9e      	ldr	r3, [pc, #632]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d6:	091b      	lsrs	r3, r3, #4
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80086de:	4b9b      	ldr	r3, [pc, #620]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80086e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086e2:	08db      	lsrs	r3, r3, #3
 80086e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d062      	beq.n	80087c6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b03      	cmp	r3, #3
 8008704:	f200 8081 	bhi.w	800880a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d024      	beq.n	8008758 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d17a      	bne.n	800880a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008726:	4b89      	ldr	r3, [pc, #548]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800872a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008736:	ed97 6a02 	vldr	s12, [r7, #8]
 800873a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800873e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008742:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800874a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800874e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008752:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008756:	e08f      	b.n	8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008758:	4b7c      	ldr	r3, [pc, #496]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008764:	4b79      	ldr	r3, [pc, #484]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	0f1b      	lsrs	r3, r3, #28
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	e006      	b.n	800877e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008770:	4b76      	ldr	r3, [pc, #472]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008776:	041b      	lsls	r3, r3, #16
 8008778:	0f1b      	lsrs	r3, r3, #28
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	4a76      	ldr	r2, [pc, #472]	@ (8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80087a8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80087ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80087bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087c4:	e058      	b.n	8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80087d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d8:	4b5c      	ldr	r3, [pc, #368]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ec:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80087f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008804:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008808:	e036      	b.n	8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800880a:	4b50      	ldr	r3, [pc, #320]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008816:	4b4d      	ldr	r3, [pc, #308]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	0f1b      	lsrs	r3, r3, #28
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	e006      	b.n	8008830 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008822:	4b4a      	ldr	r3, [pc, #296]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008828:	041b      	lsls	r3, r3, #16
 800882a:	0f1b      	lsrs	r3, r3, #28
 800882c:	f003 030f 	and.w	r3, r3, #15
 8008830:	4a49      	ldr	r2, [pc, #292]	@ (8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	ee07 3a90 	vmov	s15, r3
 8008844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008856:	ed97 6a02 	vldr	s12, [r7, #8]
 800885a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008954 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800885e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800886a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800886e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008876:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008878:	4b34      	ldr	r3, [pc, #208]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800887a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d017      	beq.n	80088b4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008884:	4b31      	ldr	r3, [pc, #196]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008888:	0a5b      	lsrs	r3, r3, #9
 800888a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800889a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800889e:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088aa:	ee17 2a90 	vmov	r2, s15
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	e002      	b.n	80088ba <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80088ba:	4b24      	ldr	r3, [pc, #144]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d017      	beq.n	80088f6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088c6:	4b21      	ldr	r3, [pc, #132]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ca:	0c1b      	lsrs	r3, r3, #16
 80088cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d0:	ee07 3a90 	vmov	s15, r3
 80088d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80088d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088dc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ec:	ee17 2a90 	vmov	r2, s15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	605a      	str	r2, [r3, #4]
 80088f4:	e002      	b.n	80088fc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80088fc:	4b13      	ldr	r3, [pc, #76]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d017      	beq.n	8008938 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008908:	4b10      	ldr	r3, [pc, #64]	@ (800894c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800890a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890c:	0e1b      	lsrs	r3, r3, #24
 800890e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800891a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800891e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008922:	edd7 6a07 	vldr	s13, [r7, #28]
 8008926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800892e:	ee17 2a90 	vmov	r2, s15
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008936:	e002      	b.n	800893e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	609a      	str	r2, [r3, #8]
}
 800893e:	bf00      	nop
 8008940:	3724      	adds	r7, #36	@ 0x24
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	46020c00 	.word	0x46020c00
 8008950:	4b742400 	.word	0x4b742400
 8008954:	46000000 	.word	0x46000000
 8008958:	08012cb8 	.word	0x08012cb8

0800895c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08e      	sub	sp, #56	@ 0x38
 8008960:	af00      	add	r7, sp, #0
 8008962:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800896e:	430b      	orrs	r3, r1
 8008970:	d145      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008972:	4baa      	ldr	r3, [pc, #680]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008978:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800897e:	4ba7      	ldr	r3, [pc, #668]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b02      	cmp	r3, #2
 800898a:	d108      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800898c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008992:	d104      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008998:	637b      	str	r3, [r7, #52]	@ 0x34
 800899a:	f001 b987 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800899e:	4b9f      	ldr	r3, [pc, #636]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80089a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ac:	d114      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b4:	d110      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80089b6:	4b99      	ldr	r3, [pc, #612]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80089b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089c4:	d103      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80089c6:	23fa      	movs	r3, #250	@ 0xfa
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80089ca:	f001 b96f 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80089ce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80089d2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80089d4:	f001 b96a 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80089d8:	4b90      	ldr	r3, [pc, #576]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089e4:	d107      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ec:	d103      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80089ee:	4b8c      	ldr	r3, [pc, #560]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f2:	f001 b95b 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fa:	f001 b957 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a02:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a06:	430b      	orrs	r3, r1
 8008a08:	d151      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008a0a:	4b84      	ldr	r3, [pc, #528]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a10:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008a14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	2b80      	cmp	r3, #128	@ 0x80
 8008a1a:	d035      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	2b80      	cmp	r3, #128	@ 0x80
 8008a20:	d841      	bhi.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	2b60      	cmp	r3, #96	@ 0x60
 8008a26:	d02a      	beq.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2a:	2b60      	cmp	r3, #96	@ 0x60
 8008a2c:	d83b      	bhi.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	2b40      	cmp	r3, #64	@ 0x40
 8008a32:	d009      	beq.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	2b40      	cmp	r3, #64	@ 0x40
 8008a38:	d835      	bhi.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a42:	2b20      	cmp	r3, #32
 8008a44:	d012      	beq.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008a46:	e02e      	b.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fb77 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a56:	f001 b929 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5a:	f107 0318 	add.w	r3, r7, #24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fcc8 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a68:	f001 b920 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a6c:	f107 030c 	add.w	r3, r7, #12
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fe19 	bl	80086a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a7a:	f001 b917 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008a7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a84:	f001 b912 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a88:	4b64      	ldr	r3, [pc, #400]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a94:	d103      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008a96:	4b63      	ldr	r3, [pc, #396]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a9a:	f001 b907 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008aa2:	f001 b903 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008aaa:	f001 b8ff 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab2:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008ab6:	430b      	orrs	r3, r1
 8008ab8:	d158      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008aba:	4b58      	ldr	r3, [pc, #352]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008abc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ac0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ac4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008acc:	d03b      	beq.n	8008b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ad4:	d846      	bhi.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008adc:	d02e      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ae4:	d83e      	bhi.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aec:	d00b      	beq.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af4:	d836      	bhi.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00d      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b02:	d012      	beq.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008b04:	e02e      	b.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff fb18 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b14:	f001 b8ca 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b18:	f107 0318 	add.w	r3, r7, #24
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fc69 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b26:	f001 b8c1 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b2a:	f107 030c 	add.w	r3, r7, #12
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fdba 	bl	80086a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b38:	f001 b8b8 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008b3c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008b40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b42:	f001 b8b3 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b46:	4b35      	ldr	r3, [pc, #212]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b52:	d103      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008b54:	4b33      	ldr	r3, [pc, #204]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b58:	f001 b8a8 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b60:	f001 b8a4 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b68:	f001 b8a0 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b70:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008b74:	430b      	orrs	r3, r1
 8008b76:	d16e      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008b78:	4b28      	ldr	r3, [pc, #160]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b7e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008b82:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b86:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008b8a:	d034      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008b92:	d85c      	bhi.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b9a:	d00b      	beq.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba2:	d854      	bhi.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d016      	beq.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bb0:	d009      	beq.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008bb2:	e04c      	b.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fac1 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bc2:	f001 b873 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bc6:	f107 0318 	add.w	r3, r7, #24
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fc12 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bd4:	f001 b86a 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008bd8:	4b10      	ldr	r3, [pc, #64]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008be4:	d103      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8008be6:	4b10      	ldr	r3, [pc, #64]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008be8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bea:	f001 b85f 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bf2:	f001 b85b 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008bf6:	4b09      	ldr	r3, [pc, #36]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d121      	bne.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c02:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00e      	beq.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8008c0e:	4b03      	ldr	r3, [pc, #12]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	0e1b      	lsrs	r3, r3, #24
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	e00f      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008c1a:	bf00      	nop
 8008c1c:	46020c00 	.word	0x46020c00
 8008c20:	0007a120 	.word	0x0007a120
 8008c24:	00f42400 	.word	0x00f42400
 8008c28:	02dc6c00 	.word	0x02dc6c00
 8008c2c:	4ba7      	ldr	r3, [pc, #668]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c32:	041b      	lsls	r3, r3, #16
 8008c34:	0e1b      	lsrs	r3, r3, #24
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	4aa5      	ldr	r2, [pc, #660]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c42:	f001 b833 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c4a:	f001 b82f 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c52:	f001 b82b 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c5a:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	d17f      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008c62:	4b9a      	ldr	r3, [pc, #616]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d165      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008c74:	4b95      	ldr	r3, [pc, #596]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c7a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008c7e:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c86:	d034      	beq.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c8e:	d853      	bhi.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c96:	d00b      	beq.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c9e:	d84b      	bhi.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d016      	beq.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008cac:	d009      	beq.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008cae:	e043      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7ff fa43 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008cbe:	f000 bff5 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc2:	f107 0318 	add.w	r3, r7, #24
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7ff fb94 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008cd0:	f000 bfec 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008cd4:	4b7d      	ldr	r3, [pc, #500]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ce0:	d103      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8008ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008ce4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008ce6:	f000 bfe1 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008cee:	f000 bfdd 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cf2:	4b76      	ldr	r3, [pc, #472]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b20      	cmp	r3, #32
 8008cfc:	d118      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008cfe:	4b73      	ldr	r3, [pc, #460]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008d0a:	4b70      	ldr	r3, [pc, #448]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	0e1b      	lsrs	r3, r3, #24
 8008d10:	f003 030f 	and.w	r3, r3, #15
 8008d14:	e006      	b.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8008d16:	4b6d      	ldr	r3, [pc, #436]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	0e1b      	lsrs	r3, r3, #24
 8008d20:	f003 030f 	and.w	r3, r3, #15
 8008d24:	4a6a      	ldr	r2, [pc, #424]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d2a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008d2c:	f000 bfbe 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d34:	f000 bfba 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d3c:	f000 bfb6 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d46:	d108      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff f9f7 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d56:	f000 bfa9 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5e:	f000 bfa5 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d66:	1e51      	subs	r1, r2, #1
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	d136      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008d6c:	4b57      	ldr	r3, [pc, #348]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d104      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008d7e:	f7fe fb55 	bl	800742c <HAL_RCC_GetPCLK2Freq>
 8008d82:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d84:	f000 bf92 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d104      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d8e:	f7fe fa1d 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8008d92:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d94:	f000 bf8a 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008d98:	4b4c      	ldr	r3, [pc, #304]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008da4:	d106      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d103      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8008dac:	4b4a      	ldr	r3, [pc, #296]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db0:	f000 bf7c 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008db4:	4b45      	ldr	r3, [pc, #276]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d107      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d104      	bne.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8008dc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dce:	f000 bf6d 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd6:	f000 bf69 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dde:	1e91      	subs	r1, r2, #2
 8008de0:	430b      	orrs	r3, r1
 8008de2:	d136      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008de4:	4b39      	ldr	r3, [pc, #228]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dea:	f003 030c 	and.w	r3, r3, #12
 8008dee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008df6:	f7fe fb05 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8008dfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8008dfc:	f000 bf56 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d104      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e06:	f7fe f9e1 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8008e0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e0c:	f000 bf4e 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008e10:	4b2e      	ldr	r3, [pc, #184]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e1c:	d106      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d103      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8008e24:	4b2c      	ldr	r3, [pc, #176]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e28:	f000 bf40 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008e2c:	4b27      	ldr	r3, [pc, #156]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	2b0c      	cmp	r3, #12
 8008e3e:	d104      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8008e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e46:	f000 bf31 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4e:	f000 bf2d 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e56:	1f11      	subs	r1, r2, #4
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	d13f      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e66:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e6e:	f7fe fac9 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8008e72:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e74:	f000 bf1a 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	2b10      	cmp	r3, #16
 8008e7c:	d104      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e7e:	f7fe f9a5 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8008e82:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e84:	f000 bf12 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008e88:	4b10      	ldr	r3, [pc, #64]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e94:	d106      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	2b20      	cmp	r3, #32
 8008e9a:	d103      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea0:	f000 bf04 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008ea4:	4b09      	ldr	r3, [pc, #36]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	2b30      	cmp	r3, #48	@ 0x30
 8008eb6:	d104      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8008eb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ebe:	f000 bef5 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec6:	f000 bef1 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008eca:	bf00      	nop
 8008ecc:	46020c00 	.word	0x46020c00
 8008ed0:	08012cb8 	.word	0x08012cb8
 8008ed4:	02dc6c00 	.word	0x02dc6c00
 8008ed8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee0:	f1a2 0108 	sub.w	r1, r2, #8
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	d136      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008ee8:	4ba4      	ldr	r3, [pc, #656]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ef2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008efa:	f7fe fa83 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8008efe:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f00:	f000 bed4 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	2b40      	cmp	r3, #64	@ 0x40
 8008f08:	d104      	bne.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f0a:	f7fe f95f 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8008f0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f10:	f000 becc 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008f14:	4b99      	ldr	r3, [pc, #612]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f20:	d106      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	2b80      	cmp	r3, #128	@ 0x80
 8008f26:	d103      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8008f28:	4b95      	ldr	r3, [pc, #596]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f2c:	f000 bebe 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008f30:	4b92      	ldr	r3, [pc, #584]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d107      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f42:	d104      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8008f44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4a:	f000 beaf 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f52:	f000 beab 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5a:	f1a2 0110 	sub.w	r1, r2, #16
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	d139      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008f62:	4b86      	ldr	r3, [pc, #536]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d104      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f74:	f7fe fa46 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8008f78:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f7a:	f000 be97 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f84:	d104      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f86:	f7fe f921 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8008f8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f8c:	f000 be8e 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008f90:	4b7a      	ldr	r3, [pc, #488]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f9c:	d107      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fa4:	d103      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8008fa6:	4b76      	ldr	r3, [pc, #472]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008faa:	f000 be7f 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008fae:	4b73      	ldr	r3, [pc, #460]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d108      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fc2:	d104      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8008fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fca:	f000 be6f 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd2:	f000 be6b 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fda:	f1a2 0120 	sub.w	r1, r2, #32
 8008fde:	430b      	orrs	r3, r1
 8008fe0:	d158      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008fe2:	4b66      	ldr	r3, [pc, #408]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008ff4:	f7fe fa2e 	bl	8007454 <HAL_RCC_GetPCLK3Freq>
 8008ff8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ffa:	f000 be57 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009000:	2b01      	cmp	r3, #1
 8009002:	d104      	bne.n	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009004:	f7fe f8e2 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8009008:	6378      	str	r0, [r7, #52]	@ 0x34
 800900a:	f000 be4f 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800900e:	4b5b      	ldr	r3, [pc, #364]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800901a:	d106      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	2b02      	cmp	r3, #2
 8009020:	d103      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8009022:	4b57      	ldr	r3, [pc, #348]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009024:	637b      	str	r3, [r7, #52]	@ 0x34
 8009026:	f000 be41 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800902a:	4b54      	ldr	r3, [pc, #336]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800902c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b02      	cmp	r3, #2
 8009036:	d107      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8009038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903a:	2b03      	cmp	r3, #3
 800903c:	d104      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800903e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009042:	637b      	str	r3, [r7, #52]	@ 0x34
 8009044:	f000 be32 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009048:	4b4c      	ldr	r3, [pc, #304]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b20      	cmp	r3, #32
 8009052:	d11b      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009056:	2b04      	cmp	r3, #4
 8009058:	d118      	bne.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800905a:	4b48      	ldr	r3, [pc, #288]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8009066:	4b45      	ldr	r3, [pc, #276]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	0e1b      	lsrs	r3, r3, #24
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	e006      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009072:	4b42      	ldr	r3, [pc, #264]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009078:	041b      	lsls	r3, r3, #16
 800907a:	0e1b      	lsrs	r3, r3, #24
 800907c:	f003 030f 	and.w	r3, r3, #15
 8009080:	4a40      	ldr	r2, [pc, #256]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8009082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009086:	637b      	str	r3, [r7, #52]	@ 0x34
 8009088:	f000 be10 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009090:	f000 be0c 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8009094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009098:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800909c:	430b      	orrs	r3, r1
 800909e:	d173      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80090a0:	4b36      	ldr	r3, [pc, #216]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80090aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090b2:	d104      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090b4:	f7fe f88a 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 80090b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80090ba:	f000 bdf7 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c4:	d108      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090c6:	f107 0318 	add.w	r3, r7, #24
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff f992 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d4:	f000 bdea 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d104      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80090de:	f7fe f977 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
 80090e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80090e4:	f000 bde2 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090ee:	d122      	bne.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80090f0:	4b22      	ldr	r3, [pc, #136]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d118      	bne.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090fc:	4b1f      	ldr	r3, [pc, #124]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d005      	beq.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8009108:	4b1c      	ldr	r3, [pc, #112]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	0e1b      	lsrs	r3, r3, #24
 800910e:	f003 030f 	and.w	r3, r3, #15
 8009112:	e006      	b.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8009114:	4b19      	ldr	r3, [pc, #100]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800911a:	041b      	lsls	r3, r3, #16
 800911c:	0e1b      	lsrs	r3, r3, #24
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	4a18      	ldr	r2, [pc, #96]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8009124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
 800912a:	f000 bdbf 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	637b      	str	r3, [r7, #52]	@ 0x34
 8009132:	f000 bdbb 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009136:	4b11      	ldr	r3, [pc, #68]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800913e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009142:	d107      	bne.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800914a:	d103      	bne.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800914c:	4b0c      	ldr	r3, [pc, #48]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800914e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009150:	f000 bdac 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009154:	4b09      	ldr	r3, [pc, #36]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800915c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009160:	d107      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009168:	d103      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800916a:	4b05      	ldr	r3, [pc, #20]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
 800916e:	f000 bd9d 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	637b      	str	r3, [r7, #52]	@ 0x34
 8009176:	f000 bd99 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800917a:	bf00      	nop
 800917c:	46020c00 	.word	0x46020c00
 8009180:	00f42400 	.word	0x00f42400
 8009184:	08012cb8 	.word	0x08012cb8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800918c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009190:	430b      	orrs	r3, r1
 8009192:	d158      	bne.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009194:	4bad      	ldr	r3, [pc, #692]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009196:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d84b      	bhi.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80091a6:	a201      	add	r2, pc, #4	@ (adr r2, 80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80091a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ac:	080091e5 	.word	0x080091e5
 80091b0:	080091c1 	.word	0x080091c1
 80091b4:	080091d3 	.word	0x080091d3
 80091b8:	080091ef 	.word	0x080091ef
 80091bc:	080091f9 	.word	0x080091f9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fe ffbb 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ce:	f000 bd6d 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d2:	f107 030c 	add.w	r3, r7, #12
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fa66 	bl	80086a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091e0:	f000 bd64 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80091e4:	f7fe f8f4 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
 80091e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80091ea:	f000 bd5f 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80091ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80091f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091f4:	f000 bd5a 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80091f8:	4b94      	ldr	r3, [pc, #592]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b20      	cmp	r3, #32
 8009202:	d118      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009204:	4b91      	ldr	r3, [pc, #580]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8009210:	4b8e      	ldr	r3, [pc, #568]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	0e1b      	lsrs	r3, r3, #24
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	e006      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800921c:	4b8b      	ldr	r3, [pc, #556]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800921e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	0e1b      	lsrs	r3, r3, #24
 8009226:	f003 030f 	and.w	r3, r3, #15
 800922a:	4a89      	ldr	r2, [pc, #548]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800922c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009232:	f000 bd3b 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800923a:	f000 bd37 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009242:	f000 bd33 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800924a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800924e:	430b      	orrs	r3, r1
 8009250:	d167      	bne.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009252:	4b7e      	ldr	r3, [pc, #504]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009258:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800925c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009264:	d036      	beq.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800926c:	d855      	bhi.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800926e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009270:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009274:	d029      	beq.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800927c:	d84d      	bhi.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009284:	d013      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800928c:	d845      	bhi.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	2b00      	cmp	r3, #0
 8009292:	d015      	beq.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800929a:	d13e      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800929c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fe ff4d 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092aa:	f000 bcff 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ae:	f107 030c 	add.w	r3, r7, #12
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff f9f8 	bl	80086a8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092bc:	f000 bcf6 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80092c0:	f7fe f886 	bl	80073d0 <HAL_RCC_GetHCLKFreq>
 80092c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80092c6:	f000 bcf1 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80092ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092d0:	f000 bcec 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80092d4:	4b5d      	ldr	r3, [pc, #372]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b20      	cmp	r3, #32
 80092de:	d118      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092e0:	4b5a      	ldr	r3, [pc, #360]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80092ec:	4b57      	ldr	r3, [pc, #348]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	0e1b      	lsrs	r3, r3, #24
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	e006      	b.n	8009306 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80092f8:	4b54      	ldr	r3, [pc, #336]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80092fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092fe:	041b      	lsls	r3, r3, #16
 8009300:	0e1b      	lsrs	r3, r3, #24
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	4a52      	ldr	r2, [pc, #328]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800930e:	f000 bccd 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009316:	f000 bcc9 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800931e:	f000 bcc5 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009326:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800932a:	430b      	orrs	r3, r1
 800932c:	d14c      	bne.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800932e:	4b47      	ldr	r3, [pc, #284]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009334:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009338:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009340:	f7fe f860 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8009344:	6378      	str	r0, [r7, #52]	@ 0x34
 8009346:	f000 bcb1 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009350:	d104      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009352:	f7fd ff3b 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8009356:	6378      	str	r0, [r7, #52]	@ 0x34
 8009358:	f000 bca8 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800935c:	4b3b      	ldr	r3, [pc, #236]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009368:	d107      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009370:	d103      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8009372:	4b38      	ldr	r3, [pc, #224]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
 8009376:	f000 bc99 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800937a:	4b34      	ldr	r3, [pc, #208]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b20      	cmp	r3, #32
 8009384:	d11c      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800938c:	d118      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800938e:	4b2f      	ldr	r3, [pc, #188]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800939a:	4b2c      	ldr	r3, [pc, #176]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	0e1b      	lsrs	r3, r3, #24
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80093a6:	4b29      	ldr	r3, [pc, #164]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80093a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	0e1b      	lsrs	r3, r3, #24
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	4a26      	ldr	r2, [pc, #152]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80093b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80093bc:	f000 bc76 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c4:	f000 bc72 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80093c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093cc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80093d0:	430b      	orrs	r3, r1
 80093d2:	d152      	bne.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80093d4:	4b1d      	ldr	r3, [pc, #116]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80093d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80093de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80093e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d104      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80093e6:	f7fe f80d 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 80093ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80093ec:	f000 bc5e 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093f6:	d104      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093f8:	f7fd fee8 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 80093fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80093fe:	f000 bc55 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009402:	4b12      	ldr	r3, [pc, #72]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800940a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800940e:	d107      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009416:	d103      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009418:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
 800941c:	f000 bc46 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009420:	4b0a      	ldr	r3, [pc, #40]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b20      	cmp	r3, #32
 800942a:	d122      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009432:	d11e      	bne.n	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009434:	4b05      	ldr	r3, [pc, #20]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00b      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8009440:	4b02      	ldr	r3, [pc, #8]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	0e1b      	lsrs	r3, r3, #24
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	e00c      	b.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800944c:	46020c00 	.word	0x46020c00
 8009450:	08012cb8 	.word	0x08012cb8
 8009454:	00f42400 	.word	0x00f42400
 8009458:	4ba1      	ldr	r3, [pc, #644]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800945a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800945e:	041b      	lsls	r3, r3, #16
 8009460:	0e1b      	lsrs	r3, r3, #24
 8009462:	f003 030f 	and.w	r3, r3, #15
 8009466:	4a9f      	ldr	r2, [pc, #636]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800946c:	637b      	str	r3, [r7, #52]	@ 0x34
 800946e:	f000 bc1d 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	637b      	str	r3, [r7, #52]	@ 0x34
 8009476:	f000 bc19 	b.w	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800947a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800947e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009482:	430b      	orrs	r3, r1
 8009484:	d151      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009486:	4b96      	ldr	r3, [pc, #600]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800948c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009490:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	2bc0      	cmp	r3, #192	@ 0xc0
 8009496:	d024      	beq.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	2bc0      	cmp	r3, #192	@ 0xc0
 800949c:	d842      	bhi.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	2b80      	cmp	r3, #128	@ 0x80
 80094a2:	d00d      	beq.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	2b80      	cmp	r3, #128	@ 0x80
 80094a8:	d83c      	bhi.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	2b40      	cmp	r3, #64	@ 0x40
 80094b4:	d011      	beq.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80094b6:	e035      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80094b8:	f7fd ffcc 	bl	8007454 <HAL_RCC_GetPCLK3Freq>
 80094bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80094be:	e3f5      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094c0:	4b87      	ldr	r3, [pc, #540]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094cc:	d102      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80094ce:	4b86      	ldr	r3, [pc, #536]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80094d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80094d2:	e3eb      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094d8:	e3e8      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80094da:	f7fd fe77 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 80094de:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80094e0:	e3e4      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80094e2:	4b7f      	ldr	r3, [pc, #508]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0320 	and.w	r3, r3, #32
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d117      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094ee:	4b7c      	ldr	r3, [pc, #496]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80094fa:	4b79      	ldr	r3, [pc, #484]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	0e1b      	lsrs	r3, r3, #24
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	e006      	b.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8009506:	4b76      	ldr	r3, [pc, #472]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800950c:	041b      	lsls	r3, r3, #16
 800950e:	0e1b      	lsrs	r3, r3, #24
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	4a73      	ldr	r2, [pc, #460]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800951c:	e3c6      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009522:	e3c3      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009528:	e3c0      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800952a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952e:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009532:	430b      	orrs	r3, r1
 8009534:	d147      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009536:	4b6a      	ldr	r3, [pc, #424]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800953c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009540:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	2b00      	cmp	r3, #0
 8009546:	d103      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009548:	f7fd ff5c 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 800954c:	6378      	str	r0, [r7, #52]	@ 0x34
 800954e:	e3ad      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009556:	d103      	bne.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009558:	f7fd fe38 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 800955c:	6378      	str	r0, [r7, #52]	@ 0x34
 800955e:	e3a5      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009560:	4b5f      	ldr	r3, [pc, #380]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800956c:	d106      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009574:	d102      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8009576:	4b5c      	ldr	r3, [pc, #368]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009578:	637b      	str	r3, [r7, #52]	@ 0x34
 800957a:	e397      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800957c:	4b58      	ldr	r3, [pc, #352]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b20      	cmp	r3, #32
 8009586:	d11b      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800958e:	d117      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009590:	4b53      	ldr	r3, [pc, #332]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 800959c:	4b50      	ldr	r3, [pc, #320]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	0e1b      	lsrs	r3, r3, #24
 80095a2:	f003 030f 	and.w	r3, r3, #15
 80095a6:	e006      	b.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80095a8:	4b4d      	ldr	r3, [pc, #308]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	0e1b      	lsrs	r3, r3, #24
 80095b2:	f003 030f 	and.w	r3, r3, #15
 80095b6:	4a4b      	ldr	r2, [pc, #300]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80095b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095be:	e375      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c4:	e372      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80095c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80095ce:	430b      	orrs	r3, r1
 80095d0:	d164      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80095d2:	4b43      	ldr	r3, [pc, #268]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095dc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d120      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80095e4:	4b3e      	ldr	r3, [pc, #248]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0320 	and.w	r3, r3, #32
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d117      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095f0:	4b3b      	ldr	r3, [pc, #236]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d005      	beq.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80095fc:	4b38      	ldr	r3, [pc, #224]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	0e1b      	lsrs	r3, r3, #24
 8009602:	f003 030f 	and.w	r3, r3, #15
 8009606:	e006      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009608:	4b35      	ldr	r3, [pc, #212]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800960a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800960e:	041b      	lsls	r3, r3, #16
 8009610:	0e1b      	lsrs	r3, r3, #24
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	4a33      	ldr	r2, [pc, #204]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
 800961e:	e345      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	637b      	str	r3, [r7, #52]	@ 0x34
 8009624:	e342      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009626:	4b2e      	ldr	r3, [pc, #184]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800962c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009630:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009634:	d112      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800963c:	d10e      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800963e:	4b28      	ldr	r3, [pc, #160]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800964c:	d102      	bne.n	8009654 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800964e:	23fa      	movs	r3, #250	@ 0xfa
 8009650:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009652:	e32b      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009654:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800965a:	e327      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800965c:	4b20      	ldr	r3, [pc, #128]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009668:	d106      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009670:	d102      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8009672:	4b1d      	ldr	r3, [pc, #116]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009674:	637b      	str	r3, [r7, #52]	@ 0x34
 8009676:	e319      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009678:	4b19      	ldr	r3, [pc, #100]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800967a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b02      	cmp	r3, #2
 8009684:	d107      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800968c:	d103      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800968e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009692:	637b      	str	r3, [r7, #52]	@ 0x34
 8009694:	e30a      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	637b      	str	r3, [r7, #52]	@ 0x34
 800969a:	e307      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800969c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80096a4:	430b      	orrs	r3, r1
 80096a6:	d16b      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096a8:	4b0d      	ldr	r3, [pc, #52]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d127      	bne.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096ba:	4b09      	ldr	r3, [pc, #36]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0320 	and.w	r3, r3, #32
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	d11e      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096c6:	4b06      	ldr	r3, [pc, #24]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00c      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80096d2:	4b03      	ldr	r3, [pc, #12]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	0e1b      	lsrs	r3, r3, #24
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	e00d      	b.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80096de:	bf00      	nop
 80096e0:	46020c00 	.word	0x46020c00
 80096e4:	08012cb8 	.word	0x08012cb8
 80096e8:	00f42400 	.word	0x00f42400
 80096ec:	4b94      	ldr	r3, [pc, #592]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80096ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096f2:	041b      	lsls	r3, r3, #16
 80096f4:	0e1b      	lsrs	r3, r3, #24
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	4a92      	ldr	r2, [pc, #584]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80096fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
 8009702:	e2d3      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009704:	2300      	movs	r3, #0
 8009706:	637b      	str	r3, [r7, #52]	@ 0x34
 8009708:	e2d0      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800970a:	4b8d      	ldr	r3, [pc, #564]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800970c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009718:	d112      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009720:	d10e      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009722:	4b87      	ldr	r3, [pc, #540]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800972c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009730:	d102      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8009732:	23fa      	movs	r3, #250	@ 0xfa
 8009734:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009736:	e2b9      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009738:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800973c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800973e:	e2b5      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009740:	4b7f      	ldr	r3, [pc, #508]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800974c:	d106      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009754:	d102      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8009756:	4b7c      	ldr	r3, [pc, #496]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
 800975a:	e2a7      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800975c:	4b78      	ldr	r3, [pc, #480]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800975e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b02      	cmp	r3, #2
 8009768:	d107      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009770:	d103      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8009772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009776:	637b      	str	r3, [r7, #52]	@ 0x34
 8009778:	e298      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800977a:	2300      	movs	r3, #0
 800977c:	637b      	str	r3, [r7, #52]	@ 0x34
 800977e:	e295      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009784:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009788:	430b      	orrs	r3, r1
 800978a:	d147      	bne.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800978c:	4b6c      	ldr	r3, [pc, #432]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800978e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009792:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009796:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	2b00      	cmp	r3, #0
 800979c:	d103      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800979e:	f7fd fe31 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 80097a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80097a4:	e282      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80097a6:	4b66      	ldr	r3, [pc, #408]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80097a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097b4:	d112      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097bc:	d10e      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097be:	4b60      	ldr	r3, [pc, #384]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80097c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097cc:	d102      	bne.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80097ce:	23fa      	movs	r3, #250	@ 0xfa
 80097d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097d2:	e26b      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80097d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097da:	e267      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80097dc:	4b58      	ldr	r3, [pc, #352]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097e8:	d106      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80097f0:	d102      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80097f2:	4b55      	ldr	r3, [pc, #340]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f6:	e259      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80097f8:	4b51      	ldr	r3, [pc, #324]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80097fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b02      	cmp	r3, #2
 8009804:	d107      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800980c:	d103      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800980e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
 8009814:	e24a      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
 800981a:	e247      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800981c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009820:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009824:	430b      	orrs	r3, r1
 8009826:	d12d      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009828:	4b45      	ldr	r3, [pc, #276]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800982a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800982e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009832:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009834:	4b42      	ldr	r3, [pc, #264]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800983c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009840:	d105      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8009842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8009848:	4b3f      	ldr	r3, [pc, #252]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
 800984c:	e22e      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800984e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009854:	d107      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fc70 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
 8009864:	e222      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800986c:	d107      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800986e:	f107 0318 	add.w	r3, r7, #24
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fdbe 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	637b      	str	r3, [r7, #52]	@ 0x34
 800987c:	e216      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	637b      	str	r3, [r7, #52]	@ 0x34
 8009882:	e213      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009888:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800988c:	430b      	orrs	r3, r1
 800988e:	d15d      	bne.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009890:	4b2b      	ldr	r3, [pc, #172]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009896:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800989c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098a2:	d028      	beq.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80098aa:	d845      	bhi.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098b2:	d013      	beq.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098ba:	d83d      	bhi.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d004      	beq.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c8:	d004      	beq.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80098ca:	e035      	b.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80098cc:	f7fd fdae 	bl	800742c <HAL_RCC_GetPCLK2Freq>
 80098d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098d2:	e1eb      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80098d4:	f7fd fc7a 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 80098d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098da:	e1e7      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098dc:	4b18      	ldr	r3, [pc, #96]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e8:	d102      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80098ea:	4b17      	ldr	r3, [pc, #92]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80098ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80098ee:	e1dd      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098f4:	e1da      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098f6:	4b12      	ldr	r3, [pc, #72]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b20      	cmp	r3, #32
 8009900:	d117      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009902:	4b0f      	ldr	r3, [pc, #60]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800990e:	4b0c      	ldr	r3, [pc, #48]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	0e1b      	lsrs	r3, r3, #24
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	e006      	b.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800991a:	4b09      	ldr	r3, [pc, #36]	@ (8009940 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800991c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009920:	041b      	lsls	r3, r3, #16
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	f003 030f 	and.w	r3, r3, #15
 8009928:	4a06      	ldr	r2, [pc, #24]	@ (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800992a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800992e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009930:	e1bc      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009936:	e1b9      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800993c:	e1b6      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800993e:	bf00      	nop
 8009940:	46020c00 	.word	0x46020c00
 8009944:	08012cb8 	.word	0x08012cb8
 8009948:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800994c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009950:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009954:	430b      	orrs	r3, r1
 8009956:	d156      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009958:	4ba5      	ldr	r3, [pc, #660]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800995a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800995e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009962:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800996a:	d028      	beq.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009972:	d845      	bhi.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800997a:	d013      	beq.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009982:	d83d      	bhi.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8009984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009986:	2b00      	cmp	r3, #0
 8009988:	d004      	beq.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800998a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009990:	d004      	beq.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8009992:	e035      	b.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009994:	f7fd fd36 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 8009998:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800999a:	e187      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800999c:	f7fd fc16 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 80099a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099a2:	e183      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099a4:	4b92      	ldr	r3, [pc, #584]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099b0:	d102      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80099b2:	4b90      	ldr	r3, [pc, #576]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80099b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099b6:	e179      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099bc:	e176      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099be:	4b8c      	ldr	r3, [pc, #560]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	d117      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099ca:	4b89      	ldr	r3, [pc, #548]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80099d6:	4b86      	ldr	r3, [pc, #536]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	0e1b      	lsrs	r3, r3, #24
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	e006      	b.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80099e2:	4b83      	ldr	r3, [pc, #524]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80099e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099e8:	041b      	lsls	r3, r3, #16
 80099ea:	0e1b      	lsrs	r3, r3, #24
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	4a81      	ldr	r2, [pc, #516]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80099f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099f8:	e158      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099fe:	e155      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a04:	e152      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a0a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	d177      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009a12:	4b77      	ldr	r3, [pc, #476]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a18:	f003 0318 	and.w	r3, r3, #24
 8009a1c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a20:	2b18      	cmp	r3, #24
 8009a22:	d86b      	bhi.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8009a24:	a201      	add	r2, pc, #4	@ (adr r2, 8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a91 	.word	0x08009a91
 8009a30:	08009afd 	.word	0x08009afd
 8009a34:	08009afd 	.word	0x08009afd
 8009a38:	08009afd 	.word	0x08009afd
 8009a3c:	08009afd 	.word	0x08009afd
 8009a40:	08009afd 	.word	0x08009afd
 8009a44:	08009afd 	.word	0x08009afd
 8009a48:	08009afd 	.word	0x08009afd
 8009a4c:	08009a99 	.word	0x08009a99
 8009a50:	08009afd 	.word	0x08009afd
 8009a54:	08009afd 	.word	0x08009afd
 8009a58:	08009afd 	.word	0x08009afd
 8009a5c:	08009afd 	.word	0x08009afd
 8009a60:	08009afd 	.word	0x08009afd
 8009a64:	08009afd 	.word	0x08009afd
 8009a68:	08009afd 	.word	0x08009afd
 8009a6c:	08009aa1 	.word	0x08009aa1
 8009a70:	08009afd 	.word	0x08009afd
 8009a74:	08009afd 	.word	0x08009afd
 8009a78:	08009afd 	.word	0x08009afd
 8009a7c:	08009afd 	.word	0x08009afd
 8009a80:	08009afd 	.word	0x08009afd
 8009a84:	08009afd 	.word	0x08009afd
 8009a88:	08009afd 	.word	0x08009afd
 8009a8c:	08009abb 	.word	0x08009abb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009a90:	f7fd fce0 	bl	8007454 <HAL_RCC_GetPCLK3Freq>
 8009a94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a96:	e109      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a98:	f7fd fb98 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8009a9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a9e:	e105      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009aa0:	4b53      	ldr	r3, [pc, #332]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aac:	d102      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8009aae:	4b51      	ldr	r3, [pc, #324]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8009ab0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ab2:	e0fb      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab8:	e0f8      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009aba:	4b4d      	ldr	r3, [pc, #308]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d117      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d005      	beq.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8009ad2:	4b47      	ldr	r3, [pc, #284]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	0e1b      	lsrs	r3, r3, #24
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	e006      	b.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8009ade:	4b44      	ldr	r3, [pc, #272]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ae4:	041b      	lsls	r3, r3, #16
 8009ae6:	0e1b      	lsrs	r3, r3, #24
 8009ae8:	f003 030f 	and.w	r3, r3, #15
 8009aec:	4a42      	ldr	r2, [pc, #264]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8009aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009af2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009af4:	e0da      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009afa:	e0d7      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b00:	e0d4      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b06:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009b0a:	430b      	orrs	r3, r1
 8009b0c:	d155      	bne.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009b0e:	4b38      	ldr	r3, [pc, #224]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b14:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009b18:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b20:	d013      	beq.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8009b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b28:	d844      	bhi.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b30:	d013      	beq.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b38:	d83c      	bhi.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d014      	beq.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8009b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b46:	d014      	beq.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8009b48:	e034      	b.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b4a:	f107 0318 	add.w	r3, r7, #24
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fc50 	bl	80083f4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b58:	e0a8      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe faee 	bl	8008140 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b68:	e0a0      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b6a:	f7fd fb2f 	bl	80071cc <HAL_RCC_GetSysClockFreq>
 8009b6e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b70:	e09c      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b72:	4b1f      	ldr	r3, [pc, #124]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d117      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8009b8a:	4b19      	ldr	r3, [pc, #100]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	0e1b      	lsrs	r3, r3, #24
 8009b90:	f003 030f 	and.w	r3, r3, #15
 8009b94:	e006      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8009b96:	4b16      	ldr	r3, [pc, #88]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b9c:	041b      	lsls	r3, r3, #16
 8009b9e:	0e1b      	lsrs	r3, r3, #24
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	4a14      	ldr	r2, [pc, #80]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8009ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009baa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bac:	e07e      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb2:	e07b      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb8:	e078      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bbe:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009bc2:	430b      	orrs	r3, r1
 8009bc4:	d138      	bne.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bd0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009bd2:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d10d      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10a      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8009be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bec:	e05e      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009bee:	bf00      	nop
 8009bf0:	46020c00 	.word	0x46020c00
 8009bf4:	00f42400 	.word	0x00f42400
 8009bf8:	08012cb8 	.word	0x08012cb8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c0a:	d112      	bne.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c12:	d10e      	bne.n	8009c32 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c14:	4b28      	ldr	r3, [pc, #160]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c22:	d102      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8009c24:	23fa      	movs	r3, #250	@ 0xfa
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c28:	e040      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009c2a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c2e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c30:	e03c      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c36:	e039      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009c38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c3c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009c40:	430b      	orrs	r3, r1
 8009c42:	d131      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009c44:	4b1c      	ldr	r3, [pc, #112]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009c46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009c4e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009c50:	4b19      	ldr	r3, [pc, #100]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c5c:	d105      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8009c64:	4b15      	ldr	r3, [pc, #84]	@ (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8009c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c68:	e020      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009c6a:	4b13      	ldr	r3, [pc, #76]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c76:	d106      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c7e:	d102      	bne.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009c80:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8009c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c84:	e012      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009c86:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c92:	d106      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8009c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c9a:	d102      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8009c9c:	4b09      	ldr	r3, [pc, #36]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8009c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca0:	e004      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca6:	e001      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3738      	adds	r7, #56	@ 0x38
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	46020c00 	.word	0x46020c00
 8009cbc:	02dc6c00 	.word	0x02dc6c00
 8009cc0:	016e3600 	.word	0x016e3600
 8009cc4:	00f42400 	.word	0x00f42400

08009cc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009cd0:	4b47      	ldr	r3, [pc, #284]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a46      	ldr	r2, [pc, #280]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009cd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009cda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009cdc:	f7f9 f98e 	bl	8002ffc <HAL_GetTick>
 8009ce0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ce2:	e008      	b.n	8009cf6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ce4:	f7f9 f98a 	bl	8002ffc <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e077      	b.n	8009de6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009d02:	4b3b      	ldr	r3, [pc, #236]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	6811      	ldr	r1, [r2, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6852      	ldr	r2, [r2, #4]
 8009d16:	3a01      	subs	r2, #1
 8009d18:	0212      	lsls	r2, r2, #8
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	4934      	ldr	r1, [pc, #208]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009d22:	4b33      	ldr	r3, [pc, #204]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d26:	4b33      	ldr	r3, [pc, #204]	@ (8009df4 <RCCEx_PLL2_Config+0x12c>)
 8009d28:	4013      	ands	r3, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	6892      	ldr	r2, [r2, #8]
 8009d2e:	3a01      	subs	r2, #1
 8009d30:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68d2      	ldr	r2, [r2, #12]
 8009d38:	3a01      	subs	r2, #1
 8009d3a:	0252      	lsls	r2, r2, #9
 8009d3c:	b292      	uxth	r2, r2
 8009d3e:	4311      	orrs	r1, r2
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	6912      	ldr	r2, [r2, #16]
 8009d44:	3a01      	subs	r2, #1
 8009d46:	0412      	lsls	r2, r2, #16
 8009d48:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009d4c:	4311      	orrs	r1, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6952      	ldr	r2, [r2, #20]
 8009d52:	3a01      	subs	r2, #1
 8009d54:	0612      	lsls	r2, r2, #24
 8009d56:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	4924      	ldr	r1, [pc, #144]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009d62:	4b23      	ldr	r3, [pc, #140]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d66:	f023 020c 	bic.w	r2, r3, #12
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	4920      	ldr	r1, [pc, #128]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009d74:	4b1e      	ldr	r3, [pc, #120]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	491c      	ldr	r1, [pc, #112]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009d82:	4b1b      	ldr	r3, [pc, #108]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d86:	4a1a      	ldr	r2, [pc, #104]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d88:	f023 0310 	bic.w	r3, r3, #16
 8009d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d8e:	4b18      	ldr	r3, [pc, #96]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d96:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	69d2      	ldr	r2, [r2, #28]
 8009d9e:	00d2      	lsls	r2, r2, #3
 8009da0:	4913      	ldr	r1, [pc, #76]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009da6:	4b12      	ldr	r3, [pc, #72]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009daa:	4a11      	ldr	r2, [pc, #68]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009dac:	f043 0310 	orr.w	r3, r3, #16
 8009db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009db2:	4b0f      	ldr	r3, [pc, #60]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a0e      	ldr	r2, [pc, #56]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009db8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009dbc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009dbe:	f7f9 f91d 	bl	8002ffc <HAL_GetTick>
 8009dc2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009dc4:	e008      	b.n	8009dd8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dc6:	f7f9 f919 	bl	8002ffc <HAL_GetTick>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d901      	bls.n	8009dd8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e006      	b.n	8009de6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009dd8:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <RCCEx_PLL2_Config+0x128>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d0f0      	beq.n	8009dc6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0

}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	46020c00 	.word	0x46020c00
 8009df4:	80800000 	.word	0x80800000

08009df8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009e00:	4b47      	ldr	r3, [pc, #284]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a46      	ldr	r2, [pc, #280]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e0c:	f7f9 f8f6 	bl	8002ffc <HAL_GetTick>
 8009e10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e12:	e008      	b.n	8009e26 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e14:	f7f9 f8f2 	bl	8002ffc <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d901      	bls.n	8009e26 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e077      	b.n	8009f16 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e26:	4b3e      	ldr	r3, [pc, #248]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1f0      	bne.n	8009e14 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009e32:	4b3b      	ldr	r3, [pc, #236]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	6811      	ldr	r1, [r2, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6852      	ldr	r2, [r2, #4]
 8009e46:	3a01      	subs	r2, #1
 8009e48:	0212      	lsls	r2, r2, #8
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	4934      	ldr	r1, [pc, #208]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	630b      	str	r3, [r1, #48]	@ 0x30
 8009e52:	4b33      	ldr	r3, [pc, #204]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e56:	4b33      	ldr	r3, [pc, #204]	@ (8009f24 <RCCEx_PLL3_Config+0x12c>)
 8009e58:	4013      	ands	r3, r2
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6892      	ldr	r2, [r2, #8]
 8009e5e:	3a01      	subs	r2, #1
 8009e60:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	68d2      	ldr	r2, [r2, #12]
 8009e68:	3a01      	subs	r2, #1
 8009e6a:	0252      	lsls	r2, r2, #9
 8009e6c:	b292      	uxth	r2, r2
 8009e6e:	4311      	orrs	r1, r2
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6912      	ldr	r2, [r2, #16]
 8009e74:	3a01      	subs	r2, #1
 8009e76:	0412      	lsls	r2, r2, #16
 8009e78:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e7c:	4311      	orrs	r1, r2
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6952      	ldr	r2, [r2, #20]
 8009e82:	3a01      	subs	r2, #1
 8009e84:	0612      	lsls	r2, r2, #24
 8009e86:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	4924      	ldr	r1, [pc, #144]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009e92:	4b23      	ldr	r3, [pc, #140]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e96:	f023 020c 	bic.w	r2, r3, #12
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	4920      	ldr	r1, [pc, #128]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a1b      	ldr	r3, [r3, #32]
 8009eac:	491c      	ldr	r1, [pc, #112]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009eb8:	f023 0310 	bic.w	r3, r3, #16
 8009ebc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ebe:	4b18      	ldr	r3, [pc, #96]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ec6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	69d2      	ldr	r2, [r2, #28]
 8009ece:	00d2      	lsls	r2, r2, #3
 8009ed0:	4913      	ldr	r1, [pc, #76]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009ed6:	4b12      	ldr	r3, [pc, #72]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eda:	4a11      	ldr	r2, [pc, #68]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009edc:	f043 0310 	orr.w	r3, r3, #16
 8009ee0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009eec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009eee:	f7f9 f885 	bl	8002ffc <HAL_GetTick>
 8009ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ef4:	e008      	b.n	8009f08 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ef6:	f7f9 f881 	bl	8002ffc <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d901      	bls.n	8009f08 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e006      	b.n	8009f16 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f08:	4b05      	ldr	r3, [pc, #20]	@ (8009f20 <RCCEx_PLL3_Config+0x128>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0f0      	beq.n	8009ef6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	46020c00 	.word	0x46020c00
 8009f24:	80800000 	.word	0x80800000

08009f28 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d904      	bls.n	8009f46 <HAL_SAI_InitProtocol+0x1e>
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	3b03      	subs	r3, #3
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d812      	bhi.n	8009f6a <HAL_SAI_InitProtocol+0x42>
 8009f44:	e008      	b.n	8009f58 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	68b9      	ldr	r1, [r7, #8]
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 fd33 	bl	800a9b8 <SAI_InitI2S>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
      break;
 8009f56:	e00b      	b.n	8009f70 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	68b9      	ldr	r1, [r7, #8]
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 fddc 	bl	800ab1c <SAI_InitPCM>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75fb      	strb	r3, [r7, #23]
      break;
 8009f68:	e002      	b.n	8009f70 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6e:	bf00      	nop
  }

  if (status == HAL_OK)
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d104      	bne.n	8009f80 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 f808 	bl	8009f8c <HAL_SAI_Init>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
	...

08009f8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	@ 0x28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e1ce      	b.n	800a33c <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d10e      	bne.n	8009fc6 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a83      	ldr	r2, [pc, #524]	@ (800a1bc <HAL_SAI_Init+0x230>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d107      	bne.n	8009fc2 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d103      	bne.n	8009fc2 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e1ba      	b.n	800a33c <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7f8 f91e 	bl	800221c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fe55 	bl	800ac90 <SAI_Disable>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e1a5      	b.n	800a33c <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d00c      	beq.n	800a01a <HAL_SAI_Init+0x8e>
 800a000:	2b02      	cmp	r3, #2
 800a002:	d80d      	bhi.n	800a020 <HAL_SAI_Init+0x94>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <HAL_SAI_Init+0x82>
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d003      	beq.n	800a014 <HAL_SAI_Init+0x88>
 800a00c:	e008      	b.n	800a020 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a012:	e008      	b.n	800a026 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a014:	2310      	movs	r3, #16
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a018:	e005      	b.n	800a026 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a01a:	2320      	movs	r3, #32
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a01e:	e002      	b.n	800a026 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800a020:	2300      	movs	r3, #0
 800a022:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a024:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d81d      	bhi.n	800a06a <HAL_SAI_Init+0xde>
 800a02e:	a201      	add	r2, pc, #4	@ (adr r2, 800a034 <HAL_SAI_Init+0xa8>)
 800a030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a034:	0800a045 	.word	0x0800a045
 800a038:	0800a04b 	.word	0x0800a04b
 800a03c:	0800a053 	.word	0x0800a053
 800a040:	0800a05b 	.word	0x0800a05b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	61fb      	str	r3, [r7, #28]
      break;
 800a048:	e012      	b.n	800a070 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a04a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a04e:	61fb      	str	r3, [r7, #28]
      break;
 800a050:	e00e      	b.n	800a070 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a052:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a056:	61fb      	str	r3, [r7, #28]
      break;
 800a058:	e00a      	b.n	800a070 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a05a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a05e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a068:	e002      	b.n	800a070 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]
      break;
 800a06e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a51      	ldr	r2, [pc, #324]	@ (800a1bc <HAL_SAI_Init+0x230>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d004      	beq.n	800a084 <HAL_SAI_Init+0xf8>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a50      	ldr	r2, [pc, #320]	@ (800a1c0 <HAL_SAI_Init+0x234>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d103      	bne.n	800a08c <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800a084:	4a4f      	ldr	r2, [pc, #316]	@ (800a1c4 <HAL_SAI_Init+0x238>)
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	e002      	b.n	800a092 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a08c:	4a4e      	ldr	r2, [pc, #312]	@ (800a1c8 <HAL_SAI_Init+0x23c>)
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d077      	beq.n	800a18a <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a47      	ldr	r2, [pc, #284]	@ (800a1bc <HAL_SAI_Init+0x230>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d004      	beq.n	800a0ae <HAL_SAI_Init+0x122>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a45      	ldr	r2, [pc, #276]	@ (800a1c0 <HAL_SAI_Init+0x234>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d107      	bne.n	800a0be <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a0ae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a0b2:	f04f 0100 	mov.w	r1, #0
 800a0b6:	f7fe fc51 	bl	800895c <HAL_RCCEx_GetPeriphCLKFreq>
 800a0ba:	61b8      	str	r0, [r7, #24]
 800a0bc:	e006      	b.n	800a0cc <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a0be:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a0c2:	f04f 0100 	mov.w	r1, #0
 800a0c6:	f7fe fc49 	bl	800895c <HAL_RCCEx_GetPeriphCLKFreq>
 800a0ca:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a0d4:	d120      	bne.n	800a118 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d102      	bne.n	800a0e4 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a0de:	2340      	movs	r3, #64	@ 0x40
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	e00a      	b.n	800a0fa <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d103      	bne.n	800a0f4 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a0ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	e002      	b.n	800a0fa <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	4619      	mov	r1, r3
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	fb02 f303 	mul.w	r3, r2, r3
 800a110:	fbb1 f3f3 	udiv	r3, r1, r3
 800a114:	617b      	str	r3, [r7, #20]
 800a116:	e017      	b.n	800a148 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a120:	d101      	bne.n	800a126 <HAL_SAI_Init+0x19a>
 800a122:	2302      	movs	r3, #2
 800a124:	e000      	b.n	800a128 <HAL_SAI_Init+0x19c>
 800a126:	2301      	movs	r3, #1
 800a128:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	4619      	mov	r1, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	fb02 f303 	mul.w	r3, r2, r3
 800a140:	021b      	lsls	r3, r3, #8
 800a142:	fbb1 f3f3 	udiv	r3, r1, r3
 800a146:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	4a20      	ldr	r2, [pc, #128]	@ (800a1cc <HAL_SAI_Init+0x240>)
 800a14c:	fba2 2303 	umull	r2, r3, r2, r3
 800a150:	08da      	lsrs	r2, r3, #3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a156:	6979      	ldr	r1, [r7, #20]
 800a158:	4b1c      	ldr	r3, [pc, #112]	@ (800a1cc <HAL_SAI_Init+0x240>)
 800a15a:	fba3 2301 	umull	r2, r3, r3, r1
 800a15e:	08da      	lsrs	r2, r3, #3
 800a160:	4613      	mov	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4413      	add	r3, r2
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	1aca      	subs	r2, r1, r3
 800a16a:	2a08      	cmp	r2, #8
 800a16c:	d904      	bls.n	800a178 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d104      	bne.n	800a18a <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a184:	085a      	lsrs	r2, r3, #1
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d003      	beq.n	800a19a <HAL_SAI_Init+0x20e>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d109      	bne.n	800a1ae <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d101      	bne.n	800a1a6 <HAL_SAI_Init+0x21a>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e001      	b.n	800a1aa <HAL_SAI_Init+0x21e>
 800a1a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1aa:	623b      	str	r3, [r7, #32]
 800a1ac:	e012      	b.n	800a1d4 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d10c      	bne.n	800a1d0 <HAL_SAI_Init+0x244>
 800a1b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1ba:	e00a      	b.n	800a1d2 <HAL_SAI_Init+0x246>
 800a1bc:	40015404 	.word	0x40015404
 800a1c0:	40015424 	.word	0x40015424
 800a1c4:	40015400 	.word	0x40015400
 800a1c8:	40015800 	.word	0x40015800
 800a1cc:	cccccccd 	.word	0xcccccccd
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6819      	ldr	r1, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4b59      	ldr	r3, [pc, #356]	@ (800a344 <HAL_SAI_Init+0x3b8>)
 800a1e0:	400b      	ands	r3, r1
 800a1e2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6819      	ldr	r1, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a1f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1fe:	431a      	orrs	r2, r3
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800a20c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a218:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21e:	051b      	lsls	r3, r3, #20
 800a220:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a226:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6812      	ldr	r2, [r2, #0]
 800a240:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a244:	f023 030f 	bic.w	r3, r3, #15
 800a248:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6859      	ldr	r1, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	69da      	ldr	r2, [r3, #28]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a258:	431a      	orrs	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a25e:	431a      	orrs	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6899      	ldr	r1, [r3, #8]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b35      	ldr	r3, [pc, #212]	@ (800a348 <HAL_SAI_Init+0x3bc>)
 800a274:	400b      	ands	r3, r1
 800a276:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6899      	ldr	r1, [r3, #8]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a282:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a288:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800a28e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800a294:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29a:	3b01      	subs	r3, #1
 800a29c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a29e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68d9      	ldr	r1, [r3, #12]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a2b6:	400b      	ands	r3, r1
 800a2b8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68d9      	ldr	r1, [r3, #12]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2c8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ce:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a2d0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a18      	ldr	r2, [pc, #96]	@ (800a34c <HAL_SAI_Init+0x3c0>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d119      	bne.n	800a322 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a2ee:	4b18      	ldr	r3, [pc, #96]	@ (800a350 <HAL_SAI_Init+0x3c4>)
 800a2f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2f2:	4a17      	ldr	r2, [pc, #92]	@ (800a350 <HAL_SAI_Init+0x3c4>)
 800a2f4:	f023 0301 	bic.w	r3, r3, #1
 800a2f8:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10e      	bne.n	800a322 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a30c:	3b01      	subs	r3, #1
 800a30e:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a310:	490f      	ldr	r1, [pc, #60]	@ (800a350 <HAL_SAI_Init+0x3c4>)
 800a312:	4313      	orrs	r3, r2
 800a314:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800a316:	4b0e      	ldr	r3, [pc, #56]	@ (800a350 <HAL_SAI_Init+0x3c4>)
 800a318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a31a:	4a0d      	ldr	r2, [pc, #52]	@ (800a350 <HAL_SAI_Init+0x3c4>)
 800a31c:	f043 0301 	orr.w	r3, r3, #1
 800a320:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3728      	adds	r7, #40	@ 0x28
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	f005c010 	.word	0xf005c010
 800a348:	fff88000 	.word	0xfff88000
 800a34c:	40015404 	.word	0x40015404
 800a350:	40015400 	.word	0x40015400

0800a354 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <HAL_SAI_Abort+0x1a>
 800a36a:	2302      	movs	r3, #2
 800a36c:	e07d      	b.n	800a46a <HAL_SAI_Abort+0x116>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fc8a 	bl	800ac90 <SAI_Disable>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a394:	d14f      	bne.n	800a436 <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a3a4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b12      	cmp	r3, #18
 800a3b0:	d11d      	bne.n	800a3ee <HAL_SAI_Abort+0x9a>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d018      	beq.n	800a3ee <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f9 fd82 	bl	8003ecc <HAL_DMA_Abort>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00f      	beq.n	800a3ee <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d009      	beq.n	800a3ee <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b22      	cmp	r3, #34	@ 0x22
 800a3f8:	d11d      	bne.n	800a436 <HAL_SAI_Abort+0xe2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a400:	2b00      	cmp	r3, #0
 800a402:	d018      	beq.n	800a436 <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f9 fd5e 	bl	8003ecc <HAL_DMA_Abort>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00f      	beq.n	800a436 <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a41c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a41e:	2b20      	cmp	r3, #32
 800a420:	d009      	beq.n	800a436 <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a42c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2200      	movs	r2, #0
 800a43c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f04f 32ff 	mov.w	r2, #4294967295
 800a446:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f042 0208 	orr.w	r2, r2, #8
 800a456:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800a468:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
	...

0800a474 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <HAL_SAI_Receive_DMA+0x1a>
 800a488:	88fb      	ldrh	r3, [r7, #6]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e0c6      	b.n	800a620 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	f040 80bf 	bne.w	800a61e <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d101      	bne.n	800a4ae <HAL_SAI_Receive_DMA+0x3a>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e0b8      	b.n	800a620 <HAL_SAI_Receive_DMA+0x1ac>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	88fa      	ldrh	r2, [r7, #6]
 800a4c0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	88fa      	ldrh	r2, [r7, #6]
 800a4c8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2222      	movs	r2, #34	@ 0x22
 800a4d8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4e2:	4a51      	ldr	r2, [pc, #324]	@ (800a628 <HAL_SAI_Receive_DMA+0x1b4>)
 800a4e4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ec:	4a4f      	ldr	r2, [pc, #316]	@ (800a62c <HAL_SAI_Receive_DMA+0x1b8>)
 800a4ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4f6:	4a4e      	ldr	r2, [pc, #312]	@ (800a630 <HAL_SAI_Receive_DMA+0x1bc>)
 800a4f8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a500:	2200      	movs	r2, #0
 800a502:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a508:	2b40      	cmp	r3, #64	@ 0x40
 800a50a:	d106      	bne.n	800a51a <HAL_SAI_Receive_DMA+0xa6>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a510:	2b00      	cmp	r3, #0
 800a512:	d102      	bne.n	800a51a <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800a514:	88fb      	ldrh	r3, [r7, #6]
 800a516:	613b      	str	r3, [r7, #16]
 800a518:	e00a      	b.n	800a530 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a51e:	2b80      	cmp	r3, #128	@ 0x80
 800a520:	d803      	bhi.n	800a52a <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800a522:	88fb      	ldrh	r3, [r7, #6]
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	e002      	b.n	800a530 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800a52a:	88fb      	ldrh	r3, [r7, #6]
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d02d      	beq.n	800a59c <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d021      	beq.n	800a590 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f103 021c 	add.w	r2, r3, #28
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a584:	4618      	mov	r0, r3
 800a586:	f7fa fab5 	bl	8004af4 <HAL_DMAEx_List_Start_IT>
 800a58a:	4603      	mov	r3, r0
 800a58c:	75fb      	strb	r3, [r7, #23]
 800a58e:	e014      	b.n	800a5ba <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e041      	b.n	800a620 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	331c      	adds	r3, #28
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f7f9 fc2b 	bl	8003e0c <HAL_DMA_Start_IT>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e029      	b.n	800a620 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 fb26 	bl	800ac20 <SAI_InterruptFlag>
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	691a      	ldr	r2, [r3, #16]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a5f2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d107      	bne.n	800a612 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a610:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	e000      	b.n	800a620 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800a61e:	2302      	movs	r3, #2
  }
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	0800ad63 	.word	0x0800ad63
 800a62c:	0800ad05 	.word	0x0800ad05
 800a630:	0800ad7f 	.word	0x0800ad7f

0800a634 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 81a7 	beq.w	800a998 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <HAL_SAI_IRQHandler+0x4e>
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	f003 0308 	and.w	r3, r3, #8
 800a672:	2b00      	cmp	r3, #0
 800a674:	d005      	beq.n	800a682 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	4798      	blx	r3
 800a680:	e18a      	b.n	800a998 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f003 0301 	and.w	r3, r3, #1
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01e      	beq.n	800a6ca <HAL_SAI_IRQHandler+0x96>
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	2b00      	cmp	r3, #0
 800a694:	d019      	beq.n	800a6ca <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2201      	movs	r2, #1
 800a69c:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b22      	cmp	r3, #34	@ 0x22
 800a6a8:	d101      	bne.n	800a6ae <HAL_SAI_IRQHandler+0x7a>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <HAL_SAI_IRQHandler+0x7c>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f96e 	bl	800a9a4 <HAL_SAI_ErrorCallback>
 800a6c8:	e166      	b.n	800a998 <HAL_SAI_IRQHandler+0x364>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d013      	beq.n	800a6fc <HAL_SAI_IRQHandler+0xc8>
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00e      	beq.n	800a6fc <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 8153 	beq.w	800a998 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6f8:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a6fa:	e14d      	b.n	800a998 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	d05b      	beq.n	800a7be <HAL_SAI_IRQHandler+0x18a>
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f003 0320 	and.w	r3, r3, #32
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d056      	beq.n	800a7be <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2220      	movs	r2, #32
 800a716:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a71e:	f043 0204 	orr.w	r2, r3, #4
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d03e      	beq.n	800a7b0 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d018      	beq.n	800a76e <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a742:	4a97      	ldr	r2, [pc, #604]	@ (800a9a0 <HAL_SAI_IRQHandler+0x36c>)
 800a744:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7f9 fc39 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a75e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f91b 	bl	800a9a4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 810a 	beq.w	800a98e <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a780:	4a87      	ldr	r2, [pc, #540]	@ (800a9a0 <HAL_SAI_IRQHandler+0x36c>)
 800a782:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7f9 fc1a 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 80fb 	beq.w	800a98e <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a79e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f8fb 	bl	800a9a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7ae:	e0ee      	b.n	800a98e <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff fdcf 	bl	800a354 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f8f4 	bl	800a9a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7bc:	e0e7      	b.n	800a98e <HAL_SAI_IRQHandler+0x35a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d05b      	beq.n	800a880 <HAL_SAI_IRQHandler+0x24c>
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d056      	beq.n	800a880 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2240      	movs	r2, #64	@ 0x40
 800a7d8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7e0:	f043 0208 	orr.w	r2, r3, #8
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d03e      	beq.n	800a872 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d018      	beq.n	800a830 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a804:	4a66      	ldr	r2, [pc, #408]	@ (800a9a0 <HAL_SAI_IRQHandler+0x36c>)
 800a806:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a80e:	4618      	mov	r0, r3
 800a810:	f7f9 fbd8 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a820:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8ba 	bl	800a9a4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 80ab 	beq.w	800a992 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a842:	4a57      	ldr	r2, [pc, #348]	@ (800a9a0 <HAL_SAI_IRQHandler+0x36c>)
 800a844:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7f9 fbb9 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 809c 	beq.w	800a992 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a860:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f89a 	bl	800a9a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a870:	e08f      	b.n	800a992 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff fd6e 	bl	800a354 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f893 	bl	800a9a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a87e:	e088      	b.n	800a992 <HAL_SAI_IRQHandler+0x35e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	d067      	beq.n	800a95a <HAL_SAI_IRQHandler+0x326>
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d062      	beq.n	800a95a <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2204      	movs	r2, #4
 800a89a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8a2:	f043 0220 	orr.w	r2, r3, #32
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d03c      	beq.n	800a930 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d018      	beq.n	800a8f2 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8c6:	4a36      	ldr	r2, [pc, #216]	@ (800a9a0 <HAL_SAI_IRQHandler+0x36c>)
 800a8c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7f9 fb77 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00a      	beq.n	800a8f2 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f859 	bl	800a9a4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d04c      	beq.n	800a996 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a902:	4a27      	ldr	r2, [pc, #156]	@ (800a9a0 <HAL_SAI_IRQHandler+0x36c>)
 800a904:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f9 fb59 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d03e      	beq.n	800a996 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a91e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f83b 	bl	800a9a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a92e:	e032      	b.n	800a996 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2200      	movs	r2, #0
 800a936:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f04f 32ff 	mov.w	r2, #4294967295
 800a940:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f826 	bl	800a9a4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a958:	e01d      	b.n	800a996 <HAL_SAI_IRQHandler+0x362>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f003 0310 	and.w	r3, r3, #16
 800a960:	2b00      	cmp	r3, #0
 800a962:	d019      	beq.n	800a998 <HAL_SAI_IRQHandler+0x364>
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f003 0310 	and.w	r3, r3, #16
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d014      	beq.n	800a998 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2210      	movs	r2, #16
 800a974:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a97c:	f043 0210 	orr.w	r2, r3, #16
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f80c 	bl	800a9a4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a98c:	e004      	b.n	800a998 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a98e:	bf00      	nop
 800a990:	e002      	b.n	800a998 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a992:	bf00      	nop
 800a994:	e000      	b.n	800a998 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a996:	bf00      	nop
}
 800a998:	bf00      	nop
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	0800add1 	.word	0x0800add1

0800a9a4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
 800a9c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <SAI_InitI2S+0x2e>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d103      	bne.n	800a9ee <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	651a      	str	r2, [r3, #80]	@ 0x50
 800a9ec:	e002      	b.n	800a9f4 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a9fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa02:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e077      	b.n	800ab0e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d107      	bne.n	800aa34 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800aa30:	665a      	str	r2, [r3, #100]	@ 0x64
 800aa32:	e006      	b.n	800aa42 <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800aa3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	d84f      	bhi.n	800aae8 <SAI_InitI2S+0x130>
 800aa48:	a201      	add	r2, pc, #4	@ (adr r2, 800aa50 <SAI_InitI2S+0x98>)
 800aa4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4e:	bf00      	nop
 800aa50:	0800aa61 	.word	0x0800aa61
 800aa54:	0800aa83 	.word	0x0800aa83
 800aa58:	0800aaa5 	.word	0x0800aaa5
 800aa5c:	0800aac7 	.word	0x0800aac7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2280      	movs	r2, #128	@ 0x80
 800aa64:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	085b      	lsrs	r3, r3, #1
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	085b      	lsrs	r3, r3, #1
 800aa74:	011a      	lsls	r2, r3, #4
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2240      	movs	r2, #64	@ 0x40
 800aa7e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800aa80:	e035      	b.n	800aaee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2280      	movs	r2, #128	@ 0x80
 800aa86:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	085b      	lsrs	r3, r3, #1
 800aa8c:	019a      	lsls	r2, r3, #6
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	085b      	lsrs	r3, r3, #1
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2280      	movs	r2, #128	@ 0x80
 800aaa0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800aaa2:	e024      	b.n	800aaee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	22c0      	movs	r2, #192	@ 0xc0
 800aaa8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	085b      	lsrs	r3, r3, #1
 800aaae:	019a      	lsls	r2, r3, #6
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	085b      	lsrs	r3, r3, #1
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2280      	movs	r2, #128	@ 0x80
 800aac2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800aac4:	e013      	b.n	800aaee <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	22e0      	movs	r2, #224	@ 0xe0
 800aaca:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	085b      	lsrs	r3, r3, #1
 800aad0:	019a      	lsls	r2, r3, #6
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	085b      	lsrs	r3, r3, #1
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2280      	movs	r2, #128	@ 0x80
 800aae4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800aae6:	e002      	b.n	800aaee <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	75fb      	strb	r3, [r7, #23]
      break;
 800aaec:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d10b      	bne.n	800ab0c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d102      	bne.n	800ab00 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2210      	movs	r2, #16
 800aafe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d102      	bne.n	800ab0c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2208      	movs	r2, #8
 800ab0a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop

0800ab1c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <SAI_InitPCM+0x2e>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d103      	bne.n	800ab52 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ab50:	e002      	b.n	800ab58 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ab64:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ab6c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab80:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	d103      	bne.n	800ab90 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ab8e:	e002      	b.n	800ab96 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	220d      	movs	r2, #13
 800ab94:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b03      	cmp	r3, #3
 800ab9a:	d837      	bhi.n	800ac0c <SAI_InitPCM+0xf0>
 800ab9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aba4 <SAI_InitPCM+0x88>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abb5 	.word	0x0800abb5
 800aba8:	0800abcb 	.word	0x0800abcb
 800abac:	0800abe1 	.word	0x0800abe1
 800abb0:	0800abf7 	.word	0x0800abf7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2280      	movs	r2, #128	@ 0x80
 800abb8:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	011a      	lsls	r2, r3, #4
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2240      	movs	r2, #64	@ 0x40
 800abc6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800abc8:	e023      	b.n	800ac12 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2280      	movs	r2, #128	@ 0x80
 800abce:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2280      	movs	r2, #128	@ 0x80
 800abdc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800abde:	e018      	b.n	800ac12 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	22c0      	movs	r2, #192	@ 0xc0
 800abe4:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	015a      	lsls	r2, r3, #5
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2280      	movs	r2, #128	@ 0x80
 800abf2:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800abf4:	e00d      	b.n	800ac12 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	22e0      	movs	r2, #224	@ 0xe0
 800abfa:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2280      	movs	r2, #128	@ 0x80
 800ac08:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800ac0a:	e002      	b.n	800ac12 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ac10:	bf00      	nop
  }

  return status;
 800ac12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	371c      	adds	r7, #28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d103      	bne.n	800ac3e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f043 0308 	orr.w	r3, r3, #8
 800ac3c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac42:	2b08      	cmp	r3, #8
 800ac44:	d10b      	bne.n	800ac5e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d003      	beq.n	800ac56 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d103      	bne.n	800ac5e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f043 0310 	orr.w	r3, r3, #16
 800ac5c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d003      	beq.n	800ac6e <SAI_InterruptFlag+0x4e>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d104      	bne.n	800ac78 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ac74:	60fb      	str	r3, [r7, #12]
 800ac76:	e003      	b.n	800ac80 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f043 0304 	orr.w	r3, r3, #4
 800ac7e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
	...

0800ac90 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ac98:	4b18      	ldr	r3, [pc, #96]	@ (800acfc <SAI_Disable+0x6c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a18      	ldr	r2, [pc, #96]	@ (800ad00 <SAI_Disable+0x70>)
 800ac9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aca2:	0b1b      	lsrs	r3, r3, #12
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800acba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10a      	bne.n	800acd8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	72fb      	strb	r3, [r7, #11]
      break;
 800acd6:	e009      	b.n	800acec <SAI_Disable+0x5c>
    }
    count--;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3b01      	subs	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1e7      	bne.n	800acbc <SAI_Disable+0x2c>

  return status;
 800acec:	7afb      	ldrb	r3, [r7, #11]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20000000 	.word	0x20000000
 800ad00:	95cbec1b 	.word	0x95cbec1b

0800ad04 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad10:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad16:	2b81      	cmp	r3, #129	@ 0x81
 800ad18:	d01c      	beq.n	800ad54 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ad28:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ad32:	2100      	movs	r1, #0
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f7ff ff73 	bl	800ac20 <SAI_InterruptFlag>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	43d9      	mvns	r1, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	691a      	ldr	r2, [r3, #16]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	400a      	ands	r2, r1
 800ad4a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7f7 f9ab 	bl	80020b0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad6e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7f7 f971 	bl	8002058 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ad92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800adaa:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f7ff ff6f 	bl	800ac90 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff fdee 	bl	800a9a4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800adc8:	bf00      	nop
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800addc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800adec:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2200      	movs	r2, #0
 800adf4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f04f 32ff 	mov.w	r2, #4294967295
 800adfe:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d00a      	beq.n	800ae20 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7ff ff40 	bl	800ac90 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f042 0208 	orr.w	r2, r2, #8
 800ae1e:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2201      	movs	r2, #1
 800ae24:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff fdb7 	bl	800a9a4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e049      	b.n	800aee4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f841 	bl	800aeec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	f000 fa57 	bl	800b330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b01      	cmp	r3, #1
 800af12:	d001      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e072      	b.n	800affe <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2202      	movs	r2, #2
 800af1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0201 	orr.w	r2, r2, #1
 800af2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a35      	ldr	r2, [pc, #212]	@ (800b00c <HAL_TIM_Base_Start_IT+0x10c>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d040      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a34      	ldr	r2, [pc, #208]	@ (800b010 <HAL_TIM_Base_Start_IT+0x110>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d03b      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af4c:	d036      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af56:	d031      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a2d      	ldr	r2, [pc, #180]	@ (800b014 <HAL_TIM_Base_Start_IT+0x114>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d02c      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a2c      	ldr	r2, [pc, #176]	@ (800b018 <HAL_TIM_Base_Start_IT+0x118>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d027      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a2a      	ldr	r2, [pc, #168]	@ (800b01c <HAL_TIM_Base_Start_IT+0x11c>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d022      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a29      	ldr	r2, [pc, #164]	@ (800b020 <HAL_TIM_Base_Start_IT+0x120>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d01d      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a27      	ldr	r2, [pc, #156]	@ (800b024 <HAL_TIM_Base_Start_IT+0x124>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d018      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a26      	ldr	r2, [pc, #152]	@ (800b028 <HAL_TIM_Base_Start_IT+0x128>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d013      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a24      	ldr	r2, [pc, #144]	@ (800b02c <HAL_TIM_Base_Start_IT+0x12c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d00e      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a23      	ldr	r2, [pc, #140]	@ (800b030 <HAL_TIM_Base_Start_IT+0x130>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d009      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a21      	ldr	r2, [pc, #132]	@ (800b034 <HAL_TIM_Base_Start_IT+0x134>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d004      	beq.n	800afbc <HAL_TIM_Base_Start_IT+0xbc>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a20      	ldr	r2, [pc, #128]	@ (800b038 <HAL_TIM_Base_Start_IT+0x138>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d115      	bne.n	800afe8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689a      	ldr	r2, [r3, #8]
 800afc2:	4b1e      	ldr	r3, [pc, #120]	@ (800b03c <HAL_TIM_Base_Start_IT+0x13c>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b06      	cmp	r3, #6
 800afcc:	d015      	beq.n	800affa <HAL_TIM_Base_Start_IT+0xfa>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afd4:	d011      	beq.n	800affa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f042 0201 	orr.w	r2, r2, #1
 800afe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afe6:	e008      	b.n	800affa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f042 0201 	orr.w	r2, r2, #1
 800aff6:	601a      	str	r2, [r3, #0]
 800aff8:	e000      	b.n	800affc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800affa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	40012c00 	.word	0x40012c00
 800b010:	50012c00 	.word	0x50012c00
 800b014:	40000400 	.word	0x40000400
 800b018:	50000400 	.word	0x50000400
 800b01c:	40000800 	.word	0x40000800
 800b020:	50000800 	.word	0x50000800
 800b024:	40000c00 	.word	0x40000c00
 800b028:	50000c00 	.word	0x50000c00
 800b02c:	40013400 	.word	0x40013400
 800b030:	50013400 	.word	0x50013400
 800b034:	40014000 	.word	0x40014000
 800b038:	50014000 	.word	0x50014000
 800b03c:	00010007 	.word	0x00010007

0800b040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d020      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d01b      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f06f 0202 	mvn.w	r2, #2
 800b074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d003      	beq.n	800b092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f931 	bl	800b2f2 <HAL_TIM_IC_CaptureCallback>
 800b090:	e005      	b.n	800b09e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f923 	bl	800b2de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f934 	bl	800b306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f003 0304 	and.w	r3, r3, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d020      	beq.n	800b0f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f003 0304 	and.w	r3, r3, #4
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01b      	beq.n	800b0f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f06f 0204 	mvn.w	r2, #4
 800b0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f90b 	bl	800b2f2 <HAL_TIM_IC_CaptureCallback>
 800b0dc:	e005      	b.n	800b0ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f8fd 	bl	800b2de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f90e 	bl	800b306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f003 0308 	and.w	r3, r3, #8
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d020      	beq.n	800b13c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f003 0308 	and.w	r3, r3, #8
 800b100:	2b00      	cmp	r3, #0
 800b102:	d01b      	beq.n	800b13c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f06f 0208 	mvn.w	r2, #8
 800b10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2204      	movs	r2, #4
 800b112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	f003 0303 	and.w	r3, r3, #3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f8e5 	bl	800b2f2 <HAL_TIM_IC_CaptureCallback>
 800b128:	e005      	b.n	800b136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f8d7 	bl	800b2de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f8e8 	bl	800b306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f003 0310 	and.w	r3, r3, #16
 800b142:	2b00      	cmp	r3, #0
 800b144:	d020      	beq.n	800b188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f003 0310 	and.w	r3, r3, #16
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01b      	beq.n	800b188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f06f 0210 	mvn.w	r2, #16
 800b158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2208      	movs	r2, #8
 800b15e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f8bf 	bl	800b2f2 <HAL_TIM_IC_CaptureCallback>
 800b174:	e005      	b.n	800b182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f8b1 	bl	800b2de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f8c2 	bl	800b306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00c      	beq.n	800b1ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d007      	beq.n	800b1ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f06f 0201 	mvn.w	r2, #1
 800b1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7f6 ffb8 	bl	800211c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d104      	bne.n	800b1c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00c      	beq.n	800b1da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d007      	beq.n	800b1da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f9b5 	bl	800b544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00c      	beq.n	800b1fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d007      	beq.n	800b1fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f9ad 	bl	800b558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00c      	beq.n	800b222 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d007      	beq.n	800b222 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b21a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f87c 	bl	800b31a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f003 0320 	and.w	r3, r3, #32
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00c      	beq.n	800b246 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f003 0320 	and.w	r3, r3, #32
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f06f 0220 	mvn.w	r2, #32
 800b23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f975 	bl	800b530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00c      	beq.n	800b26a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d007      	beq.n	800b26a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f981 	bl	800b56c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00c      	beq.n	800b28e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d007      	beq.n	800b28e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f979 	bl	800b580 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00c      	beq.n	800b2b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d007      	beq.n	800b2b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b2aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f971 	bl	800b594 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00c      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d007      	beq.n	800b2d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f969 	bl	800b5a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2d6:	bf00      	nop
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b083      	sub	sp, #12
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b30e:	bf00      	nop
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b322:	bf00      	nop
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
	...

0800b330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a6b      	ldr	r2, [pc, #428]	@ (800b4f0 <TIM_Base_SetConfig+0x1c0>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d02b      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a6a      	ldr	r2, [pc, #424]	@ (800b4f4 <TIM_Base_SetConfig+0x1c4>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d027      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b356:	d023      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b35e:	d01f      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a65      	ldr	r2, [pc, #404]	@ (800b4f8 <TIM_Base_SetConfig+0x1c8>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d01b      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a64      	ldr	r2, [pc, #400]	@ (800b4fc <TIM_Base_SetConfig+0x1cc>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d017      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a63      	ldr	r2, [pc, #396]	@ (800b500 <TIM_Base_SetConfig+0x1d0>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d013      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a62      	ldr	r2, [pc, #392]	@ (800b504 <TIM_Base_SetConfig+0x1d4>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d00f      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a61      	ldr	r2, [pc, #388]	@ (800b508 <TIM_Base_SetConfig+0x1d8>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d00b      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a60      	ldr	r2, [pc, #384]	@ (800b50c <TIM_Base_SetConfig+0x1dc>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d007      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a5f      	ldr	r2, [pc, #380]	@ (800b510 <TIM_Base_SetConfig+0x1e0>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d003      	beq.n	800b3a0 <TIM_Base_SetConfig+0x70>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a5e      	ldr	r2, [pc, #376]	@ (800b514 <TIM_Base_SetConfig+0x1e4>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d108      	bne.n	800b3b2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a4e      	ldr	r2, [pc, #312]	@ (800b4f0 <TIM_Base_SetConfig+0x1c0>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d043      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4a4d      	ldr	r2, [pc, #308]	@ (800b4f4 <TIM_Base_SetConfig+0x1c4>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d03f      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3c8:	d03b      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3d0:	d037      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a48      	ldr	r2, [pc, #288]	@ (800b4f8 <TIM_Base_SetConfig+0x1c8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d033      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a47      	ldr	r2, [pc, #284]	@ (800b4fc <TIM_Base_SetConfig+0x1cc>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d02f      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a46      	ldr	r2, [pc, #280]	@ (800b500 <TIM_Base_SetConfig+0x1d0>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d02b      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a45      	ldr	r2, [pc, #276]	@ (800b504 <TIM_Base_SetConfig+0x1d4>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d027      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a44      	ldr	r2, [pc, #272]	@ (800b508 <TIM_Base_SetConfig+0x1d8>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d023      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a43      	ldr	r2, [pc, #268]	@ (800b50c <TIM_Base_SetConfig+0x1dc>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d01f      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a42      	ldr	r2, [pc, #264]	@ (800b510 <TIM_Base_SetConfig+0x1e0>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d01b      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a41      	ldr	r2, [pc, #260]	@ (800b514 <TIM_Base_SetConfig+0x1e4>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d017      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a40      	ldr	r2, [pc, #256]	@ (800b518 <TIM_Base_SetConfig+0x1e8>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d013      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a3f      	ldr	r2, [pc, #252]	@ (800b51c <TIM_Base_SetConfig+0x1ec>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d00f      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a3e      	ldr	r2, [pc, #248]	@ (800b520 <TIM_Base_SetConfig+0x1f0>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d00b      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a3d      	ldr	r2, [pc, #244]	@ (800b524 <TIM_Base_SetConfig+0x1f4>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d007      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a3c      	ldr	r2, [pc, #240]	@ (800b528 <TIM_Base_SetConfig+0x1f8>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d003      	beq.n	800b442 <TIM_Base_SetConfig+0x112>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a3b      	ldr	r2, [pc, #236]	@ (800b52c <TIM_Base_SetConfig+0x1fc>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d108      	bne.n	800b454 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	4313      	orrs	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	689a      	ldr	r2, [r3, #8]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a1e      	ldr	r2, [pc, #120]	@ (800b4f0 <TIM_Base_SetConfig+0x1c0>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d023      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a1d      	ldr	r2, [pc, #116]	@ (800b4f4 <TIM_Base_SetConfig+0x1c4>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d01f      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a22      	ldr	r2, [pc, #136]	@ (800b510 <TIM_Base_SetConfig+0x1e0>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d01b      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a21      	ldr	r2, [pc, #132]	@ (800b514 <TIM_Base_SetConfig+0x1e4>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d017      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a20      	ldr	r2, [pc, #128]	@ (800b518 <TIM_Base_SetConfig+0x1e8>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d013      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a1f      	ldr	r2, [pc, #124]	@ (800b51c <TIM_Base_SetConfig+0x1ec>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d00f      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a1e      	ldr	r2, [pc, #120]	@ (800b520 <TIM_Base_SetConfig+0x1f0>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d00b      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a1d      	ldr	r2, [pc, #116]	@ (800b524 <TIM_Base_SetConfig+0x1f4>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d007      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b528 <TIM_Base_SetConfig+0x1f8>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d003      	beq.n	800b4c2 <TIM_Base_SetConfig+0x192>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a1b      	ldr	r2, [pc, #108]	@ (800b52c <TIM_Base_SetConfig+0x1fc>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d103      	bne.n	800b4ca <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	691a      	ldr	r2, [r3, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f043 0204 	orr.w	r2, r3, #4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	601a      	str	r2, [r3, #0]
}
 800b4e2:	bf00      	nop
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	40012c00 	.word	0x40012c00
 800b4f4:	50012c00 	.word	0x50012c00
 800b4f8:	40000400 	.word	0x40000400
 800b4fc:	50000400 	.word	0x50000400
 800b500:	40000800 	.word	0x40000800
 800b504:	50000800 	.word	0x50000800
 800b508:	40000c00 	.word	0x40000c00
 800b50c:	50000c00 	.word	0x50000c00
 800b510:	40013400 	.word	0x40013400
 800b514:	50013400 	.word	0x50013400
 800b518:	40014000 	.word	0x40014000
 800b51c:	50014000 	.word	0x50014000
 800b520:	40014400 	.word	0x40014400
 800b524:	50014400 	.word	0x50014400
 800b528:	40014800 	.word	0x40014800
 800b52c:	50014800 	.word	0x50014800

0800b530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e042      	b.n	800b654 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d106      	bne.n	800b5e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7f7 fa03 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2224      	movs	r2, #36	@ 0x24
 800b5ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f022 0201 	bic.w	r2, r2, #1
 800b5fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fd8a 	bl	800c120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fbe5 	bl	800bddc <UART_SetConfig>
 800b612:	4603      	mov	r3, r0
 800b614:	2b01      	cmp	r3, #1
 800b616:	d101      	bne.n	800b61c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e01b      	b.n	800b654 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b62a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b63a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f042 0201 	orr.w	r2, r2, #1
 800b64a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fe09 	bl	800c264 <UART_CheckIdleState>
 800b652:	4603      	mov	r3, r0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08c      	sub	sp, #48	@ 0x30
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4613      	mov	r3, r2
 800b668:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800b66a:	88fb      	ldrh	r3, [r7, #6]
 800b66c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b674:	2b20      	cmp	r3, #32
 800b676:	f040 80ad 	bne.w	800b7d4 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <HAL_UART_Transmit_DMA+0x2a>
 800b680:	88fb      	ldrh	r3, [r7, #6]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d101      	bne.n	800b68a <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	e0a5      	b.n	800b7d6 <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	88fa      	ldrh	r2, [r7, #6]
 800b694:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	88fa      	ldrh	r2, [r7, #6]
 800b69c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2221      	movs	r2, #33	@ 0x21
 800b6ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2240      	movs	r2, #64	@ 0x40
 800b6b6:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d06d      	beq.n	800b79c <HAL_UART_Transmit_DMA+0x140>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6c4:	4a46      	ldr	r2, [pc, #280]	@ (800b7e0 <HAL_UART_Transmit_DMA+0x184>)
 800b6c6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6cc:	4a45      	ldr	r2, [pc, #276]	@ (800b7e4 <HAL_UART_Transmit_DMA+0x188>)
 800b6ce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6d4:	4a44      	ldr	r2, [pc, #272]	@ (800b7e8 <HAL_UART_Transmit_DMA+0x18c>)
 800b6d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6dc:	2200      	movs	r2, #0
 800b6de:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6e8:	d106      	bne.n	800b6f8 <HAL_UART_Transmit_DMA+0x9c>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <HAL_UART_Transmit_DMA+0x9c>
      {
        nbByte = Size * 2U;
 800b6f2:	88fb      	ldrh	r3, [r7, #6]
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b702:	2b00      	cmp	r3, #0
 800b704:	d02d      	beq.n	800b762 <HAL_UART_Transmit_DMA+0x106>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b70a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d024      	beq.n	800b75a <HAL_UART_Transmit_DMA+0xfe>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01e      	beq.n	800b75a <HAL_UART_Transmit_DMA+0xfe>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b726:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7f9 f9d1 	bl	8004af4 <HAL_DMAEx_List_Start_IT>
 800b752:	4603      	mov	r3, r0
 800b754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b758:	e012      	b.n	800b780 <HAL_UART_Transmit_DMA+0x124>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b760:	e00e      	b.n	800b780 <HAL_UART_Transmit_DMA+0x124>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b76a:	4619      	mov	r1, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3328      	adds	r3, #40	@ 0x28
 800b772:	461a      	mov	r2, r3
 800b774:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b776:	f7f8 fb49 	bl	8003e0c <HAL_DMA_Start_IT>
 800b77a:	4603      	mov	r3, r0
 800b77c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800b780:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b784:	2b00      	cmp	r3, #0
 800b786:	d009      	beq.n	800b79c <HAL_UART_Transmit_DMA+0x140>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2210      	movs	r2, #16
 800b78c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2220      	movs	r2, #32
 800b794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	e01c      	b.n	800b7d6 <HAL_UART_Transmit_DMA+0x17a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7bc:	627a      	str	r2, [r7, #36]	@ 0x24
 800b7be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c0:	6a39      	ldr	r1, [r7, #32]
 800b7c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e5      	bne.n	800b79c <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e000      	b.n	800b7d6 <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800b7d4:	2302      	movs	r3, #2
  }
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3730      	adds	r7, #48	@ 0x30
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	0800c5e1 	.word	0x0800c5e1
 800b7e4:	0800c641 	.word	0x0800c641
 800b7e8:	0800c65d 	.word	0x0800c65d

0800b7ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b0ae      	sub	sp, #184	@ 0xb8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b816:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b81a:	4013      	ands	r3, r2
 800b81c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800b820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b824:	2b00      	cmp	r3, #0
 800b826:	d11b      	bne.n	800b860 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b82c:	f003 0320 	and.w	r3, r3, #32
 800b830:	2b00      	cmp	r3, #0
 800b832:	d015      	beq.n	800b860 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b838:	f003 0320 	and.w	r3, r3, #32
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d105      	bne.n	800b84c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d009      	beq.n	800b860 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 8297 	beq.w	800bd84 <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	4798      	blx	r3
      }
      return;
 800b85e:	e291      	b.n	800bd84 <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 80fd 	beq.w	800ba64 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b86a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b86e:	4b7a      	ldr	r3, [pc, #488]	@ (800ba58 <HAL_UART_IRQHandler+0x26c>)
 800b870:	4013      	ands	r3, r2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b87a:	4b78      	ldr	r3, [pc, #480]	@ (800ba5c <HAL_UART_IRQHandler+0x270>)
 800b87c:	4013      	ands	r3, r2
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 80f0 	beq.w	800ba64 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d011      	beq.n	800b8b4 <HAL_UART_IRQHandler+0xc8>
 800b890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00b      	beq.n	800b8b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8aa:	f043 0201 	orr.w	r2, r3, #1
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d011      	beq.n	800b8e4 <HAL_UART_IRQHandler+0xf8>
 800b8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00b      	beq.n	800b8e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8da:	f043 0204 	orr.w	r2, r3, #4
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b8e8:	f003 0304 	and.w	r3, r3, #4
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d011      	beq.n	800b914 <HAL_UART_IRQHandler+0x128>
 800b8f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00b      	beq.n	800b914 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2204      	movs	r2, #4
 800b902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b90a:	f043 0202 	orr.w	r2, r3, #2
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b918:	f003 0308 	and.w	r3, r3, #8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d017      	beq.n	800b950 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b924:	f003 0320 	and.w	r3, r3, #32
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d105      	bne.n	800b938 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b92c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b930:	4b49      	ldr	r3, [pc, #292]	@ (800ba58 <HAL_UART_IRQHandler+0x26c>)
 800b932:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2208      	movs	r2, #8
 800b93e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b946:	f043 0208 	orr.w	r2, r3, #8
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d012      	beq.n	800b982 <HAL_UART_IRQHandler+0x196>
 800b95c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b960:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00c      	beq.n	800b982 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b978:	f043 0220 	orr.w	r2, r3, #32
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 81fd 	beq.w	800bd88 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b98e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b992:	f003 0320 	and.w	r3, r3, #32
 800b996:	2b00      	cmp	r3, #0
 800b998:	d013      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b99a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d105      	bne.n	800b9b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d007      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9d6:	2b40      	cmp	r3, #64	@ 0x40
 800b9d8:	d005      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b9da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b9de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d02e      	beq.n	800ba44 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fd94 	bl	800c514 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f6:	2b40      	cmp	r3, #64	@ 0x40
 800b9f8:	d120      	bne.n	800ba3c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d017      	beq.n	800ba34 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba0a:	4a15      	ldr	r2, [pc, #84]	@ (800ba60 <HAL_UART_IRQHandler+0x274>)
 800ba0c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7f8 fad5 	bl	8003fc4 <HAL_DMA_Abort_IT>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d019      	beq.n	800ba54 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ba2e:	4610      	mov	r0, r2
 800ba30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba32:	e00f      	b.n	800ba54 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f9bb 	bl	800bdb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba3a:	e00b      	b.n	800ba54 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f9b7 	bl	800bdb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba42:	e007      	b.n	800ba54 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f9b3 	bl	800bdb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ba52:	e199      	b.n	800bd88 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba54:	bf00      	nop
    return;
 800ba56:	e197      	b.n	800bd88 <HAL_UART_IRQHandler+0x59c>
 800ba58:	10000001 	.word	0x10000001
 800ba5c:	04000120 	.word	0x04000120
 800ba60:	0800c6dd 	.word	0x0800c6dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	f040 8142 	bne.w	800bcf2 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba72:	f003 0310 	and.w	r3, r3, #16
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 813b 	beq.w	800bcf2 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba80:	f003 0310 	and.w	r3, r3, #16
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8134 	beq.w	800bcf2 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2210      	movs	r2, #16
 800ba90:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba9c:	2b40      	cmp	r3, #64	@ 0x40
 800ba9e:	f040 80aa 	bne.w	800bbf6 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800baac:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800bab0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 8084 	beq.w	800bbc2 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bac0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d27c      	bcs.n	800bbc2 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800bace:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bada:	2b81      	cmp	r3, #129	@ 0x81
 800badc:	d060      	beq.n	800bba0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bae6:	e853 3f00 	ldrex	r3, [r3]
 800baea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800baec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800baee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800baf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb04:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb06:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bb08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bb0c:	e841 2300 	strex	r3, r2, [r1]
 800bb10:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bb12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1e2      	bne.n	800bade <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bb28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb2a:	f023 0301 	bic.w	r3, r3, #1
 800bb2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3308      	adds	r3, #8
 800bb38:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bb3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bb3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bb42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bb44:	e841 2300 	strex	r3, r2, [r1]
 800bb48:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bb4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1e3      	bne.n	800bb18 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2220      	movs	r2, #32
 800bb54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bb6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb6e:	f023 0310 	bic.w	r3, r3, #16
 800bb72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb80:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb82:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bb86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb88:	e841 2300 	strex	r3, r2, [r1]
 800bb8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bb8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e4      	bne.n	800bb5e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f8 f996 	bl	8003ecc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f902 	bl	800bdc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bbc0:	e0e4      	b.n	800bd8c <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bbc8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	f040 80dd 	bne.w	800bd8c <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbda:	2b81      	cmp	r3, #129	@ 0x81
 800bbdc:	f040 80d6 	bne.w	800bd8c <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bbec:	4619      	mov	r1, r3
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 f8e8 	bl	800bdc4 <HAL_UARTEx_RxEventCallback>
      return;
 800bbf4:	e0ca      	b.n	800bd8c <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 80bc 	beq.w	800bd90 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 800bc18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 80b7 	beq.w	800bd90 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2a:	e853 3f00 	ldrex	r3, [r3]
 800bc2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc44:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e4      	bne.n	800bc22 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc62:	e853 3f00 	ldrex	r3, [r3]
 800bc66:	623b      	str	r3, [r7, #32]
   return(result);
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc6e:	f023 0301 	bic.w	r3, r3, #1
 800bc72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bc80:	633a      	str	r2, [r7, #48]	@ 0x30
 800bc82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc88:	e841 2300 	strex	r3, r2, [r1]
 800bc8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e1      	bne.n	800bc58 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2220      	movs	r2, #32
 800bc98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	e853 3f00 	ldrex	r3, [r3]
 800bcb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f023 0310 	bic.w	r3, r3, #16
 800bcbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcce:	69b9      	ldr	r1, [r7, #24]
 800bcd0:	69fa      	ldr	r2, [r7, #28]
 800bcd2:	e841 2300 	strex	r3, r2, [r1]
 800bcd6:	617b      	str	r3, [r7, #20]
   return(result);
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1e4      	bne.n	800bca8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2202      	movs	r2, #2
 800bce2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bce4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f86a 	bl	800bdc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcf0:	e04e      	b.n	800bd90 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bcf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bcf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d014      	beq.n	800bd28 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bcfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d105      	bne.n	800bd16 <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d008      	beq.n	800bd28 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d03a      	beq.n	800bd94 <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4798      	blx	r3
    }
    return;
 800bd26:	e035      	b.n	800bd94 <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d009      	beq.n	800bd48 <HAL_UART_IRQHandler+0x55c>
 800bd34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fcdd 	bl	800c700 <UART_EndTransmit_IT>
    return;
 800bd46:	e026      	b.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d009      	beq.n	800bd68 <HAL_UART_IRQHandler+0x57c>
 800bd54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fd02 	bl	800c76a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd66:	e016      	b.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d010      	beq.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
 800bd74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	da0c      	bge.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fcea 	bl	800c756 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd82:	e008      	b.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
      return;
 800bd84:	bf00      	nop
 800bd86:	e006      	b.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
    return;
 800bd88:	bf00      	nop
 800bd8a:	e004      	b.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
      return;
 800bd8c:	bf00      	nop
 800bd8e:	e002      	b.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
      return;
 800bd90:	bf00      	nop
 800bd92:	e000      	b.n	800bd96 <HAL_UART_IRQHandler+0x5aa>
    return;
 800bd94:	bf00      	nop
  }
}
 800bd96:	37b8      	adds	r7, #184	@ 0xb8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bde0:	b094      	sub	sp, #80	@ 0x50
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	4b7e      	ldr	r3, [pc, #504]	@ (800bfec <UART_SetConfig+0x210>)
 800bdf2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf6:	689a      	ldr	r2, [r3, #8]
 800bdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	431a      	orrs	r2, r3
 800be04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be06:	69db      	ldr	r3, [r3, #28]
 800be08:	4313      	orrs	r3, r2
 800be0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4977      	ldr	r1, [pc, #476]	@ (800bff0 <UART_SetConfig+0x214>)
 800be14:	4019      	ands	r1, r3
 800be16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be1c:	430b      	orrs	r3, r1
 800be1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800be2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2c:	68d9      	ldr	r1, [r3, #12]
 800be2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	ea40 0301 	orr.w	r3, r0, r1
 800be36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b6a      	ldr	r3, [pc, #424]	@ (800bfec <UART_SetConfig+0x210>)
 800be44:	429a      	cmp	r2, r3
 800be46:	d009      	beq.n	800be5c <UART_SetConfig+0x80>
 800be48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	4b69      	ldr	r3, [pc, #420]	@ (800bff4 <UART_SetConfig+0x218>)
 800be4e:	429a      	cmp	r2, r3
 800be50:	d004      	beq.n	800be5c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be54:	6a1a      	ldr	r2, [r3, #32]
 800be56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be58:	4313      	orrs	r3, r2
 800be5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800be66:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800be6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be70:	430b      	orrs	r3, r1
 800be72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7a:	f023 000f 	bic.w	r0, r3, #15
 800be7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be80:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800be82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	ea40 0301 	orr.w	r3, r0, r1
 800be8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	4b59      	ldr	r3, [pc, #356]	@ (800bff8 <UART_SetConfig+0x21c>)
 800be92:	429a      	cmp	r2, r3
 800be94:	d102      	bne.n	800be9c <UART_SetConfig+0xc0>
 800be96:	2301      	movs	r3, #1
 800be98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be9a:	e029      	b.n	800bef0 <UART_SetConfig+0x114>
 800be9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	4b56      	ldr	r3, [pc, #344]	@ (800bffc <UART_SetConfig+0x220>)
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d102      	bne.n	800beac <UART_SetConfig+0xd0>
 800bea6:	2302      	movs	r3, #2
 800bea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beaa:	e021      	b.n	800bef0 <UART_SetConfig+0x114>
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	4b53      	ldr	r3, [pc, #332]	@ (800c000 <UART_SetConfig+0x224>)
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d102      	bne.n	800bebc <UART_SetConfig+0xe0>
 800beb6:	2304      	movs	r3, #4
 800beb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beba:	e019      	b.n	800bef0 <UART_SetConfig+0x114>
 800bebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	4b50      	ldr	r3, [pc, #320]	@ (800c004 <UART_SetConfig+0x228>)
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d102      	bne.n	800becc <UART_SetConfig+0xf0>
 800bec6:	2308      	movs	r3, #8
 800bec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beca:	e011      	b.n	800bef0 <UART_SetConfig+0x114>
 800becc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	4b4d      	ldr	r3, [pc, #308]	@ (800c008 <UART_SetConfig+0x22c>)
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d102      	bne.n	800bedc <UART_SetConfig+0x100>
 800bed6:	2310      	movs	r3, #16
 800bed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beda:	e009      	b.n	800bef0 <UART_SetConfig+0x114>
 800bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	4b42      	ldr	r3, [pc, #264]	@ (800bfec <UART_SetConfig+0x210>)
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d102      	bne.n	800beec <UART_SetConfig+0x110>
 800bee6:	2320      	movs	r3, #32
 800bee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beea:	e001      	b.n	800bef0 <UART_SetConfig+0x114>
 800beec:	2300      	movs	r3, #0
 800beee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	4b3d      	ldr	r3, [pc, #244]	@ (800bfec <UART_SetConfig+0x210>)
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d005      	beq.n	800bf06 <UART_SetConfig+0x12a>
 800befa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	4b3d      	ldr	r3, [pc, #244]	@ (800bff4 <UART_SetConfig+0x218>)
 800bf00:	429a      	cmp	r2, r3
 800bf02:	f040 8085 	bne.w	800c010 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bf06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf08:	2200      	movs	r2, #0
 800bf0a:	623b      	str	r3, [r7, #32]
 800bf0c:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bf12:	f7fc fd23 	bl	800895c <HAL_RCCEx_GetPeriphCLKFreq>
 800bf16:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 80e8 	beq.w	800c0f0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf24:	4a39      	ldr	r2, [pc, #228]	@ (800c00c <UART_SetConfig+0x230>)
 800bf26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf32:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d305      	bcc.n	800bf50 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d903      	bls.n	800bf58 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf56:	e048      	b.n	800bfea <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	61bb      	str	r3, [r7, #24]
 800bf5e:	61fa      	str	r2, [r7, #28]
 800bf60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf64:	4a29      	ldr	r2, [pc, #164]	@ (800c00c <UART_SetConfig+0x230>)
 800bf66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	617a      	str	r2, [r7, #20]
 800bf72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bf7a:	f7f4 fe89 	bl	8000c90 <__aeabi_uldivmod>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4610      	mov	r0, r2
 800bf84:	4619      	mov	r1, r3
 800bf86:	f04f 0200 	mov.w	r2, #0
 800bf8a:	f04f 0300 	mov.w	r3, #0
 800bf8e:	020b      	lsls	r3, r1, #8
 800bf90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf94:	0202      	lsls	r2, r0, #8
 800bf96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf98:	6849      	ldr	r1, [r1, #4]
 800bf9a:	0849      	lsrs	r1, r1, #1
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	eb12 0804 	adds.w	r8, r2, r4
 800bfa6:	eb43 0905 	adc.w	r9, r3, r5
 800bfaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	60bb      	str	r3, [r7, #8]
 800bfb2:	60fa      	str	r2, [r7, #12]
 800bfb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfb8:	4640      	mov	r0, r8
 800bfba:	4649      	mov	r1, r9
 800bfbc:	f7f4 fe68 	bl	8000c90 <__aeabi_uldivmod>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfce:	d308      	bcc.n	800bfe2 <UART_SetConfig+0x206>
 800bfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfd6:	d204      	bcs.n	800bfe2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800bfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfde:	60da      	str	r2, [r3, #12]
 800bfe0:	e003      	b.n	800bfea <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bfe8:	e082      	b.n	800c0f0 <UART_SetConfig+0x314>
 800bfea:	e081      	b.n	800c0f0 <UART_SetConfig+0x314>
 800bfec:	46002400 	.word	0x46002400
 800bff0:	cfff69f3 	.word	0xcfff69f3
 800bff4:	56002400 	.word	0x56002400
 800bff8:	40013800 	.word	0x40013800
 800bffc:	40004400 	.word	0x40004400
 800c000:	40004800 	.word	0x40004800
 800c004:	40004c00 	.word	0x40004c00
 800c008:	40005000 	.word	0x40005000
 800c00c:	08012d84 	.word	0x08012d84
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c018:	d13c      	bne.n	800c094 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c01a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c01c:	2200      	movs	r2, #0
 800c01e:	603b      	str	r3, [r7, #0]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c026:	f7fc fc99 	bl	800895c <HAL_RCCEx_GetPeriphCLKFreq>
 800c02a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c02c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d05e      	beq.n	800c0f0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c036:	4a39      	ldr	r2, [pc, #228]	@ (800c11c <UART_SetConfig+0x340>)
 800c038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c03c:	461a      	mov	r2, r3
 800c03e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c040:	fbb3 f3f2 	udiv	r3, r3, r2
 800c044:	005a      	lsls	r2, r3, #1
 800c046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	085b      	lsrs	r3, r3, #1
 800c04c:	441a      	add	r2, r3
 800c04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	fbb2 f3f3 	udiv	r3, r2, r3
 800c056:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c05a:	2b0f      	cmp	r3, #15
 800c05c:	d916      	bls.n	800c08c <UART_SetConfig+0x2b0>
 800c05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c064:	d212      	bcs.n	800c08c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c068:	b29b      	uxth	r3, r3
 800c06a:	f023 030f 	bic.w	r3, r3, #15
 800c06e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c072:	085b      	lsrs	r3, r3, #1
 800c074:	b29b      	uxth	r3, r3
 800c076:	f003 0307 	and.w	r3, r3, #7
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c07e:	4313      	orrs	r3, r2
 800c080:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c088:	60da      	str	r2, [r3, #12]
 800c08a:	e031      	b.n	800c0f0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c092:	e02d      	b.n	800c0f0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c096:	2200      	movs	r2, #0
 800c098:	469a      	mov	sl, r3
 800c09a:	4693      	mov	fp, r2
 800c09c:	4650      	mov	r0, sl
 800c09e:	4659      	mov	r1, fp
 800c0a0:	f7fc fc5c 	bl	800895c <HAL_RCCEx_GetPeriphCLKFreq>
 800c0a4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c0a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d021      	beq.n	800c0f0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b0:	4a1a      	ldr	r2, [pc, #104]	@ (800c11c <UART_SetConfig+0x340>)
 800c0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	085b      	lsrs	r3, r3, #1
 800c0c4:	441a      	add	r2, r3
 800c0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d2:	2b0f      	cmp	r3, #15
 800c0d4:	d909      	bls.n	800c0ea <UART_SetConfig+0x30e>
 800c0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0dc:	d205      	bcs.n	800c0ea <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	60da      	str	r2, [r3, #12]
 800c0e8:	e002      	b.n	800c0f0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c102:	2200      	movs	r2, #0
 800c104:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c108:	2200      	movs	r2, #0
 800c10a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c10c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c110:	4618      	mov	r0, r3
 800c112:	3750      	adds	r7, #80	@ 0x50
 800c114:	46bd      	mov	sp, r7
 800c116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c11a:	bf00      	nop
 800c11c:	08012d84 	.word	0x08012d84

0800c120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c12c:	f003 0308 	and.w	r3, r3, #8
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00a      	beq.n	800c14a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00a      	beq.n	800c16c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00a      	beq.n	800c18e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c192:	f003 0304 	and.w	r3, r3, #4
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b4:	f003 0310 	and.w	r3, r3, #16
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00a      	beq.n	800c1d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1d6:	f003 0320 	and.w	r3, r3, #32
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00a      	beq.n	800c1f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01a      	beq.n	800c236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c21a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c21e:	d10a      	bne.n	800c236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00a      	beq.n	800c258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	430a      	orrs	r2, r1
 800c256:	605a      	str	r2, [r3, #4]
  }
}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b098      	sub	sp, #96	@ 0x60
 800c268:	af02      	add	r7, sp, #8
 800c26a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c274:	f7f6 fec2 	bl	8002ffc <HAL_GetTick>
 800c278:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 0308 	and.w	r3, r3, #8
 800c284:	2b08      	cmp	r3, #8
 800c286:	d12f      	bne.n	800c2e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c290:	2200      	movs	r2, #0
 800c292:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f88e 	bl	800c3b8 <UART_WaitOnFlagUntilTimeout>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d022      	beq.n	800c2e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2aa:	e853 3f00 	ldrex	r3, [r3]
 800c2ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2c8:	e841 2300 	strex	r3, r2, [r1]
 800c2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e6      	bne.n	800c2a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e063      	b.n	800c3b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f003 0304 	and.w	r3, r3, #4
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	d149      	bne.n	800c38a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2fe:	2200      	movs	r2, #0
 800c300:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f857 	bl	800c3b8 <UART_WaitOnFlagUntilTimeout>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d03c      	beq.n	800c38a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	e853 3f00 	ldrex	r3, [r3]
 800c31c:	623b      	str	r3, [r7, #32]
   return(result);
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c32e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c330:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c336:	e841 2300 	strex	r3, r2, [r1]
 800c33a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1e6      	bne.n	800c310 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	3308      	adds	r3, #8
 800c348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	e853 3f00 	ldrex	r3, [r3]
 800c350:	60fb      	str	r3, [r7, #12]
   return(result);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f023 0301 	bic.w	r3, r3, #1
 800c358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3308      	adds	r3, #8
 800c360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c362:	61fa      	str	r2, [r7, #28]
 800c364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c366:	69b9      	ldr	r1, [r7, #24]
 800c368:	69fa      	ldr	r2, [r7, #28]
 800c36a:	e841 2300 	strex	r3, r2, [r1]
 800c36e:	617b      	str	r3, [r7, #20]
   return(result);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1e5      	bne.n	800c342 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2220      	movs	r2, #32
 800c37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e012      	b.n	800c3b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2220      	movs	r2, #32
 800c38e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2220      	movs	r2, #32
 800c396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3758      	adds	r7, #88	@ 0x58
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3c8:	e04f      	b.n	800c46a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d0:	d04b      	beq.n	800c46a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3d2:	f7f6 fe13 	bl	8002ffc <HAL_GetTick>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	69ba      	ldr	r2, [r7, #24]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d302      	bcc.n	800c3e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e04e      	b.n	800c48a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0304 	and.w	r3, r3, #4
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d037      	beq.n	800c46a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b80      	cmp	r3, #128	@ 0x80
 800c3fe:	d034      	beq.n	800c46a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b40      	cmp	r3, #64	@ 0x40
 800c404:	d031      	beq.n	800c46a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	69db      	ldr	r3, [r3, #28]
 800c40c:	f003 0308 	and.w	r3, r3, #8
 800c410:	2b08      	cmp	r3, #8
 800c412:	d110      	bne.n	800c436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2208      	movs	r2, #8
 800c41a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 f879 	bl	800c514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2208      	movs	r2, #8
 800c426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	e029      	b.n	800c48a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	69db      	ldr	r3, [r3, #28]
 800c43c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c444:	d111      	bne.n	800c46a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c44e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 f85f 	bl	800c514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2220      	movs	r2, #32
 800c45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c466:	2303      	movs	r3, #3
 800c468:	e00f      	b.n	800c48a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	69da      	ldr	r2, [r3, #28]
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	4013      	ands	r3, r2
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	429a      	cmp	r2, r3
 800c478:	bf0c      	ite	eq
 800c47a:	2301      	moveq	r3, #1
 800c47c:	2300      	movne	r3, #0
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	461a      	mov	r2, r3
 800c482:	79fb      	ldrb	r3, [r7, #7]
 800c484:	429a      	cmp	r2, r3
 800c486:	d0a0      	beq.n	800c3ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c492:	b480      	push	{r7}
 800c494:	b08f      	sub	sp, #60	@ 0x3c
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
 800c4a2:	e853 3f00 	ldrex	r3, [r3]
 800c4a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4c0:	e841 2300 	strex	r3, r2, [r1]
 800c4c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1e6      	bne.n	800c49a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3308      	adds	r3, #8
 800c4d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	e853 3f00 	ldrex	r3, [r3]
 800c4da:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c4e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ec:	61ba      	str	r2, [r7, #24]
 800c4ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f0:	6979      	ldr	r1, [r7, #20]
 800c4f2:	69ba      	ldr	r2, [r7, #24]
 800c4f4:	e841 2300 	strex	r3, r2, [r1]
 800c4f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1e5      	bne.n	800c4cc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2220      	movs	r2, #32
 800c504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c508:	bf00      	nop
 800c50a:	373c      	adds	r7, #60	@ 0x3c
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c514:	b480      	push	{r7}
 800c516:	b095      	sub	sp, #84	@ 0x54
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c524:	e853 3f00 	ldrex	r3, [r3]
 800c528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	461a      	mov	r2, r3
 800c538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c53a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c53c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c542:	e841 2300 	strex	r3, r2, [r1]
 800c546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1e6      	bne.n	800c51c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3308      	adds	r3, #8
 800c554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	e853 3f00 	ldrex	r3, [r3]
 800c55c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c564:	f023 0301 	bic.w	r3, r3, #1
 800c568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c574:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c57a:	e841 2300 	strex	r3, r2, [r1]
 800c57e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1e3      	bne.n	800c54e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d118      	bne.n	800c5c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	e853 3f00 	ldrex	r3, [r3]
 800c59a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	f023 0310 	bic.w	r3, r3, #16
 800c5a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5ac:	61bb      	str	r3, [r7, #24]
 800c5ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	6979      	ldr	r1, [r7, #20]
 800c5b2:	69ba      	ldr	r2, [r7, #24]
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e6      	bne.n	800c58e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c5d4:	bf00      	nop
 800c5d6:	3754      	adds	r7, #84	@ 0x54
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08a      	sub	sp, #40	@ 0x28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5f2:	2b81      	cmp	r3, #129	@ 0x81
 800c5f4:	d01d      	beq.n	800c632 <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c612:	623b      	str	r3, [r7, #32]
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	61fb      	str	r3, [r7, #28]
 800c61e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c620:	69b9      	ldr	r1, [r7, #24]
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	e841 2300 	strex	r3, r2, [r1]
 800c628:	617b      	str	r3, [r7, #20]
   return(result);
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1e6      	bne.n	800c5fe <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c630:	e002      	b.n	800c638 <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 800c632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c634:	f7f5 fd68 	bl	8002108 <HAL_UART_TxCpltCallback>
}
 800c638:	bf00      	nop
 800c63a:	3728      	adds	r7, #40	@ 0x28
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c64c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7ff fba4 	bl	800bd9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c654:	bf00      	nop
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c668:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c670:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c678:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c684:	2b80      	cmp	r3, #128	@ 0x80
 800c686:	d109      	bne.n	800c69c <UART_DMAError+0x40>
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b21      	cmp	r3, #33	@ 0x21
 800c68c:	d106      	bne.n	800c69c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2200      	movs	r2, #0
 800c692:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c696:	6978      	ldr	r0, [r7, #20]
 800c698:	f7ff fefb 	bl	800c492 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6a6:	2b40      	cmp	r3, #64	@ 0x40
 800c6a8:	d109      	bne.n	800c6be <UART_DMAError+0x62>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b22      	cmp	r3, #34	@ 0x22
 800c6ae:	d106      	bne.n	800c6be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c6b8:	6978      	ldr	r0, [r7, #20]
 800c6ba:	f7ff ff2b 	bl	800c514 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6c4:	f043 0210 	orr.w	r2, r3, #16
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6ce:	6978      	ldr	r0, [r7, #20]
 800c6d0:	f7ff fb6e 	bl	800bdb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6d4:	bf00      	nop
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f7ff fb5c 	bl	800bdb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6f8:	bf00      	nop
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	e853 3f00 	ldrex	r3, [r3]
 800c714:	60bb      	str	r3, [r7, #8]
   return(result);
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c71c:	61fb      	str	r3, [r7, #28]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	461a      	mov	r2, r3
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	61bb      	str	r3, [r7, #24]
 800c728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72a:	6979      	ldr	r1, [r7, #20]
 800c72c:	69ba      	ldr	r2, [r7, #24]
 800c72e:	e841 2300 	strex	r3, r2, [r1]
 800c732:	613b      	str	r3, [r7, #16]
   return(result);
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1e6      	bne.n	800c708 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7f5 fcdd 	bl	8002108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c74e:	bf00      	nop
 800c750:	3720      	adds	r7, #32
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c756:	b480      	push	{r7}
 800c758:	b083      	sub	sp, #12
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c75e:	bf00      	nop
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c772:	bf00      	nop
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c77e:	b480      	push	{r7}
 800c780:	b085      	sub	sp, #20
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d101      	bne.n	800c794 <HAL_UARTEx_DisableFifoMode+0x16>
 800c790:	2302      	movs	r3, #2
 800c792:	e027      	b.n	800c7e4 <HAL_UARTEx_DisableFifoMode+0x66>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2224      	movs	r2, #36	@ 0x24
 800c7a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f022 0201 	bic.w	r2, r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2220      	movs	r2, #32
 800c7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c800:	2b01      	cmp	r3, #1
 800c802:	d101      	bne.n	800c808 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c804:	2302      	movs	r3, #2
 800c806:	e02d      	b.n	800c864 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2224      	movs	r2, #36	@ 0x24
 800c814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f022 0201 	bic.w	r2, r2, #1
 800c82e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	430a      	orrs	r2, r1
 800c842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f84f 	bl	800c8e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2220      	movs	r2, #32
 800c856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d101      	bne.n	800c884 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c880:	2302      	movs	r3, #2
 800c882:	e02d      	b.n	800c8e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2224      	movs	r2, #36	@ 0x24
 800c890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f022 0201 	bic.w	r2, r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f811 	bl	800c8e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2220      	movs	r2, #32
 800c8d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d108      	bne.n	800c90a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c908:	e031      	b.n	800c96e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c90a:	2308      	movs	r3, #8
 800c90c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c90e:	2308      	movs	r3, #8
 800c910:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	0e5b      	lsrs	r3, r3, #25
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	f003 0307 	and.w	r3, r3, #7
 800c920:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	0f5b      	lsrs	r3, r3, #29
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	f003 0307 	and.w	r3, r3, #7
 800c930:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	7b3a      	ldrb	r2, [r7, #12]
 800c936:	4911      	ldr	r1, [pc, #68]	@ (800c97c <UARTEx_SetNbDataToProcess+0x94>)
 800c938:	5c8a      	ldrb	r2, [r1, r2]
 800c93a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c93e:	7b3a      	ldrb	r2, [r7, #12]
 800c940:	490f      	ldr	r1, [pc, #60]	@ (800c980 <UARTEx_SetNbDataToProcess+0x98>)
 800c942:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c944:	fb93 f3f2 	sdiv	r3, r3, r2
 800c948:	b29a      	uxth	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	7b7a      	ldrb	r2, [r7, #13]
 800c954:	4909      	ldr	r1, [pc, #36]	@ (800c97c <UARTEx_SetNbDataToProcess+0x94>)
 800c956:	5c8a      	ldrb	r2, [r1, r2]
 800c958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c95c:	7b7a      	ldrb	r2, [r7, #13]
 800c95e:	4908      	ldr	r1, [pc, #32]	@ (800c980 <UARTEx_SetNbDataToProcess+0x98>)
 800c960:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c962:	fb93 f3f2 	sdiv	r3, r3, r2
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c96e:	bf00      	nop
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	08012d9c 	.word	0x08012d9c
 800c980:	08012da4 	.word	0x08012da4

0800c984 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c984:	b084      	sub	sp, #16
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	f107 001c 	add.w	r0, r7, #28
 800c992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 f8e6 	bl	800cb74 <USB_CoreReset>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c9ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d106      	bne.n	800c9c2 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	639a      	str	r2, [r3, #56]	@ 0x38
 800c9c0:	e005      	b.n	800c9ce <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9da:	b004      	add	sp, #16
 800c9dc:	4770      	bx	lr

0800c9de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b083      	sub	sp, #12
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	f023 0201 	bic.w	r2, r3, #1
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca1c:	78fb      	ldrb	r3, [r7, #3]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d115      	bne.n	800ca4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca2e:	200a      	movs	r0, #10
 800ca30:	f7f6 faf0 	bl	8003014 <HAL_Delay>
      ms += 10U;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	330a      	adds	r3, #10
 800ca38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f88c 	bl	800cb58 <USB_GetMode>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d01e      	beq.n	800ca84 <USB_SetCurrentMode+0x84>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca4a:	d9f0      	bls.n	800ca2e <USB_SetCurrentMode+0x2e>
 800ca4c:	e01a      	b.n	800ca84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d115      	bne.n	800ca80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca60:	200a      	movs	r0, #10
 800ca62:	f7f6 fad7 	bl	8003014 <HAL_Delay>
      ms += 10U;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	330a      	adds	r3, #10
 800ca6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f873 	bl	800cb58 <USB_GetMode>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d005      	beq.n	800ca84 <USB_SetCurrentMode+0x84>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca7c:	d9f0      	bls.n	800ca60 <USB_SetCurrentMode+0x60>
 800ca7e:	e001      	b.n	800ca84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	e005      	b.n	800ca90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2bc8      	cmp	r3, #200	@ 0xc8
 800ca88:	d101      	bne.n	800ca8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3710      	adds	r7, #16
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3301      	adds	r3, #1
 800caaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cab2:	d901      	bls.n	800cab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cab4:	2303      	movs	r3, #3
 800cab6:	e01b      	b.n	800caf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	daf2      	bge.n	800caa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cac0:	2300      	movs	r3, #0
 800cac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	019b      	lsls	r3, r3, #6
 800cac8:	f043 0220 	orr.w	r2, r3, #32
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3301      	adds	r3, #1
 800cad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cadc:	d901      	bls.n	800cae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cade:	2303      	movs	r3, #3
 800cae0:	e006      	b.n	800caf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	f003 0320 	and.w	r3, r3, #32
 800caea:	2b20      	cmp	r3, #32
 800caec:	d0f0      	beq.n	800cad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb04:	2300      	movs	r3, #0
 800cb06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb14:	d901      	bls.n	800cb1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cb16:	2303      	movs	r3, #3
 800cb18:	e018      	b.n	800cb4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	daf2      	bge.n	800cb08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cb22:	2300      	movs	r3, #0
 800cb24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2210      	movs	r2, #16
 800cb2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb38:	d901      	bls.n	800cb3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e006      	b.n	800cb4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	f003 0310 	and.w	r3, r3, #16
 800cb46:	2b10      	cmp	r3, #16
 800cb48:	d0f0      	beq.n	800cb2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	695b      	ldr	r3, [r3, #20]
 800cb64:	f003 0301 	and.w	r3, r3, #1
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3301      	adds	r3, #1
 800cb84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cb8c:	d901      	bls.n	800cb92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	e01b      	b.n	800cbca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	daf2      	bge.n	800cb80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	f043 0201 	orr.w	r2, r3, #1
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3301      	adds	r3, #1
 800cbae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cbb6:	d901      	bls.n	800cbbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	e006      	b.n	800cbca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d0f0      	beq.n	800cbaa <USB_CoreReset+0x36>

  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
	...

0800cbd8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cbd8:	b084      	sub	sp, #16
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b086      	sub	sp, #24
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
 800cbe2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800cbe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cbea:	2300      	movs	r3, #0
 800cbec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	60fb      	str	r3, [r7, #12]
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6013      	str	r3, [r2, #0]
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc02:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d119      	bne.n	800cc56 <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cc22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d10a      	bne.n	800cc40 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cc38:	f043 0304 	orr.w	r3, r3, #4
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	e014      	b.n	800cc6a <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cc4e:	f023 0304 	bic.w	r3, r3, #4
 800cc52:	6013      	str	r3, [r2, #0]
 800cc54:	e009      	b.n	800cc6a <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cc64:	f023 0304 	bic.w	r3, r3, #4
 800cc68:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cc6a:	2110      	movs	r1, #16
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff ff13 	bl	800ca98 <USB_FlushTxFifo>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff ff3d 	bl	800cafc <USB_FlushRxFifo>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	613b      	str	r3, [r7, #16]
 800cc90:	e015      	b.n	800ccbe <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	015a      	lsls	r2, r3, #5
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	4413      	add	r3, r2
 800cc9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f04f 33ff 	mov.w	r3, #4294967295
 800cca4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	015a      	lsls	r2, r3, #5
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4413      	add	r3, r2
 800ccae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	613b      	str	r3, [r7, #16]
 800ccbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d3e3      	bcc.n	800cc92 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd6:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2280      	movs	r2, #128	@ 0x80
 800ccdc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a0e      	ldr	r2, [pc, #56]	@ (800cd1c <USB_HostInit+0x144>)
 800cce2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a0e      	ldr	r2, [pc, #56]	@ (800cd20 <USB_HostInit+0x148>)
 800cce8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d105      	bne.n	800cd00 <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	f043 0210 	orr.w	r2, r3, #16
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	699a      	ldr	r2, [r3, #24]
 800cd04:	4b07      	ldr	r3, [pc, #28]	@ (800cd24 <USB_HostInit+0x14c>)
 800cd06:	4313      	orrs	r3, r2
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd18:	b004      	add	sp, #16
 800cd1a:	4770      	bx	lr
 800cd1c:	00600080 	.word	0x00600080
 800cd20:	004000e0 	.word	0x004000e0
 800cd24:	a3200008 	.word	0xa3200008

0800cd28 <arm_mean_f32>:
 800cd28:	b430      	push	{r4, r5}
 800cd2a:	088d      	lsrs	r5, r1, #2
 800cd2c:	d037      	beq.n	800cd9e <arm_mean_f32+0x76>
 800cd2e:	f100 0310 	add.w	r3, r0, #16
 800cd32:	462c      	mov	r4, r5
 800cd34:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800cda4 <arm_mean_f32+0x7c>
 800cd38:	ed13 7a04 	vldr	s14, [r3, #-16]
 800cd3c:	3c01      	subs	r4, #1
 800cd3e:	ed13 6a03 	vldr	s12, [r3, #-12]
 800cd42:	f103 0310 	add.w	r3, r3, #16
 800cd46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd4a:	ed53 6a06 	vldr	s13, [r3, #-24]	@ 0xffffffe8
 800cd4e:	ed13 7a05 	vldr	s14, [r3, #-20]	@ 0xffffffec
 800cd52:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd5e:	d1eb      	bne.n	800cd38 <arm_mean_f32+0x10>
 800cd60:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800cd64:	f011 0303 	ands.w	r3, r1, #3
 800cd68:	d00f      	beq.n	800cd8a <arm_mean_f32+0x62>
 800cd6a:	ed90 7a00 	vldr	s14, [r0]
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd74:	d009      	beq.n	800cd8a <arm_mean_f32+0x62>
 800cd76:	ed90 7a01 	vldr	s14, [r0, #4]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd80:	d003      	beq.n	800cd8a <arm_mean_f32+0x62>
 800cd82:	ed90 7a02 	vldr	s14, [r0, #8]
 800cd86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd8a:	ee07 1a10 	vmov	s14, r1
 800cd8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800cd92:	bc30      	pop	{r4, r5}
 800cd94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cd98:	edc2 6a00 	vstr	s13, [r2]
 800cd9c:	4770      	bx	lr
 800cd9e:	eddf 7a01 	vldr	s15, [pc, #4]	@ 800cda4 <arm_mean_f32+0x7c>
 800cda2:	e7df      	b.n	800cd64 <arm_mean_f32+0x3c>
 800cda4:	00000000 	.word	0x00000000

0800cda8 <arm_max_f32>:
 800cda8:	f101 3cff 	add.w	ip, r1, #4294967295
 800cdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdae:	4607      	mov	r7, r0
 800cdb0:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800cdb4:	ecf7 7a01 	vldmia	r7!, {s15}
 800cdb8:	d05d      	beq.n	800ce76 <arm_max_f32+0xce>
 800cdba:	f10e 0601 	add.w	r6, lr, #1
 800cdbe:	3014      	adds	r0, #20
 800cdc0:	2404      	movs	r4, #4
 800cdc2:	2500      	movs	r5, #0
 800cdc4:	00b6      	lsls	r6, r6, #2
 800cdc6:	ed10 7a04 	vldr	s14, [r0, #-16]
 800cdca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd2:	d502      	bpl.n	800cdda <arm_max_f32+0x32>
 800cdd4:	eef0 7a47 	vmov.f32	s15, s14
 800cdd8:	1ee5      	subs	r5, r4, #3
 800cdda:	ed10 7a03 	vldr	s14, [r0, #-12]
 800cdde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde6:	d502      	bpl.n	800cdee <arm_max_f32+0x46>
 800cde8:	eef0 7a47 	vmov.f32	s15, s14
 800cdec:	1ea5      	subs	r5, r4, #2
 800cdee:	ed10 7a02 	vldr	s14, [r0, #-8]
 800cdf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdfa:	d502      	bpl.n	800ce02 <arm_max_f32+0x5a>
 800cdfc:	eef0 7a47 	vmov.f32	s15, s14
 800ce00:	1e65      	subs	r5, r4, #1
 800ce02:	ed10 7a01 	vldr	s14, [r0, #-4]
 800ce06:	3010      	adds	r0, #16
 800ce08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce10:	d502      	bpl.n	800ce18 <arm_max_f32+0x70>
 800ce12:	eef0 7a47 	vmov.f32	s15, s14
 800ce16:	4625      	mov	r5, r4
 800ce18:	3404      	adds	r4, #4
 800ce1a:	42b4      	cmp	r4, r6
 800ce1c:	d1d3      	bne.n	800cdc6 <arm_max_f32+0x1e>
 800ce1e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800ce22:	f01c 0003 	ands.w	r0, ip, #3
 800ce26:	d01e      	beq.n	800ce66 <arm_max_f32+0xbe>
 800ce28:	ed97 7a00 	vldr	s14, [r7]
 800ce2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce34:	dc1b      	bgt.n	800ce6e <arm_max_f32+0xc6>
 800ce36:	3801      	subs	r0, #1
 800ce38:	d015      	beq.n	800ce66 <arm_max_f32+0xbe>
 800ce3a:	ed97 7a01 	vldr	s14, [r7, #4]
 800ce3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce46:	d502      	bpl.n	800ce4e <arm_max_f32+0xa6>
 800ce48:	eef0 7a47 	vmov.f32	s15, s14
 800ce4c:	1a0d      	subs	r5, r1, r0
 800ce4e:	2801      	cmp	r0, #1
 800ce50:	d009      	beq.n	800ce66 <arm_max_f32+0xbe>
 800ce52:	ed97 7a02 	vldr	s14, [r7, #8]
 800ce56:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce5e:	d502      	bpl.n	800ce66 <arm_max_f32+0xbe>
 800ce60:	eef0 7a47 	vmov.f32	s15, s14
 800ce64:	4665      	mov	r5, ip
 800ce66:	edc2 7a00 	vstr	s15, [r2]
 800ce6a:	601d      	str	r5, [r3, #0]
 800ce6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce6e:	eef0 7a47 	vmov.f32	s15, s14
 800ce72:	1a0d      	subs	r5, r1, r0
 800ce74:	e7df      	b.n	800ce36 <arm_max_f32+0x8e>
 800ce76:	4675      	mov	r5, lr
 800ce78:	e7d3      	b.n	800ce22 <arm_max_f32+0x7a>
 800ce7a:	bf00      	nop

0800ce7c <arm_rfft_32_fast_init_f32>:
 800ce7c:	b150      	cbz	r0, 800ce94 <arm_rfft_32_fast_init_f32+0x18>
 800ce7e:	2110      	movs	r1, #16
 800ce80:	b510      	push	{r4, lr}
 800ce82:	4604      	mov	r4, r0
 800ce84:	f000 feb4 	bl	800dbf0 <arm_cfft_init_f32>
 800ce88:	b918      	cbnz	r0, 800ce92 <arm_rfft_32_fast_init_f32+0x16>
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	4b03      	ldr	r3, [pc, #12]	@ (800ce9c <arm_rfft_32_fast_init_f32+0x20>)
 800ce8e:	8222      	strh	r2, [r4, #16]
 800ce90:	6163      	str	r3, [r4, #20]
 800ce92:	bd10      	pop	{r4, pc}
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	0802b804 	.word	0x0802b804

0800cea0 <arm_rfft_64_fast_init_f32>:
 800cea0:	b150      	cbz	r0, 800ceb8 <arm_rfft_64_fast_init_f32+0x18>
 800cea2:	2120      	movs	r1, #32
 800cea4:	b510      	push	{r4, lr}
 800cea6:	4604      	mov	r4, r0
 800cea8:	f000 fea2 	bl	800dbf0 <arm_cfft_init_f32>
 800ceac:	b918      	cbnz	r0, 800ceb6 <arm_rfft_64_fast_init_f32+0x16>
 800ceae:	2240      	movs	r2, #64	@ 0x40
 800ceb0:	4b03      	ldr	r3, [pc, #12]	@ (800cec0 <arm_rfft_64_fast_init_f32+0x20>)
 800ceb2:	8222      	strh	r2, [r4, #16]
 800ceb4:	6163      	str	r3, [r4, #20]
 800ceb6:	bd10      	pop	{r4, pc}
 800ceb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	08030084 	.word	0x08030084

0800cec4 <arm_rfft_128_fast_init_f32>:
 800cec4:	b150      	cbz	r0, 800cedc <arm_rfft_128_fast_init_f32+0x18>
 800cec6:	2140      	movs	r1, #64	@ 0x40
 800cec8:	b510      	push	{r4, lr}
 800ceca:	4604      	mov	r4, r0
 800cecc:	f000 fe90 	bl	800dbf0 <arm_cfft_init_f32>
 800ced0:	b918      	cbnz	r0, 800ceda <arm_rfft_128_fast_init_f32+0x16>
 800ced2:	2280      	movs	r2, #128	@ 0x80
 800ced4:	4b03      	ldr	r3, [pc, #12]	@ (800cee4 <arm_rfft_128_fast_init_f32+0x20>)
 800ced6:	8222      	strh	r2, [r4, #16]
 800ced8:	6163      	str	r3, [r4, #20]
 800ceda:	bd10      	pop	{r4, pc}
 800cedc:	f04f 30ff 	mov.w	r0, #4294967295
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	08029204 	.word	0x08029204

0800cee8 <arm_rfft_256_fast_init_f32>:
 800cee8:	b158      	cbz	r0, 800cf02 <arm_rfft_256_fast_init_f32+0x1a>
 800ceea:	2180      	movs	r1, #128	@ 0x80
 800ceec:	b510      	push	{r4, lr}
 800ceee:	4604      	mov	r4, r0
 800cef0:	f000 fe7e 	bl	800dbf0 <arm_cfft_init_f32>
 800cef4:	b920      	cbnz	r0, 800cf00 <arm_rfft_256_fast_init_f32+0x18>
 800cef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cefa:	4b03      	ldr	r3, [pc, #12]	@ (800cf08 <arm_rfft_256_fast_init_f32+0x20>)
 800cefc:	8222      	strh	r2, [r4, #16]
 800cefe:	6163      	str	r3, [r4, #20]
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	f04f 30ff 	mov.w	r0, #4294967295
 800cf06:	4770      	bx	lr
 800cf08:	0802b404 	.word	0x0802b404

0800cf0c <arm_rfft_512_fast_init_f32>:
 800cf0c:	b160      	cbz	r0, 800cf28 <arm_rfft_512_fast_init_f32+0x1c>
 800cf0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cf12:	b510      	push	{r4, lr}
 800cf14:	4604      	mov	r4, r0
 800cf16:	f000 fe6b 	bl	800dbf0 <arm_cfft_init_f32>
 800cf1a:	b920      	cbnz	r0, 800cf26 <arm_rfft_512_fast_init_f32+0x1a>
 800cf1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf20:	4b03      	ldr	r3, [pc, #12]	@ (800cf30 <arm_rfft_512_fast_init_f32+0x24>)
 800cf22:	8222      	strh	r2, [r4, #16]
 800cf24:	6163      	str	r3, [r4, #20]
 800cf26:	bd10      	pop	{r4, pc}
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	0802f884 	.word	0x0802f884

0800cf34 <arm_rfft_1024_fast_init_f32>:
 800cf34:	b160      	cbz	r0, 800cf50 <arm_rfft_1024_fast_init_f32+0x1c>
 800cf36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cf3a:	b510      	push	{r4, lr}
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	f000 fe57 	bl	800dbf0 <arm_cfft_init_f32>
 800cf42:	b920      	cbnz	r0, 800cf4e <arm_rfft_1024_fast_init_f32+0x1a>
 800cf44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cf48:	4b03      	ldr	r3, [pc, #12]	@ (800cf58 <arm_rfft_1024_fast_init_f32+0x24>)
 800cf4a:	8222      	strh	r2, [r4, #16]
 800cf4c:	6163      	str	r3, [r4, #20]
 800cf4e:	bd10      	pop	{r4, pc}
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	08028204 	.word	0x08028204

0800cf5c <arm_rfft_2048_fast_init_f32>:
 800cf5c:	b160      	cbz	r0, 800cf78 <arm_rfft_2048_fast_init_f32+0x1c>
 800cf5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cf62:	b510      	push	{r4, lr}
 800cf64:	4604      	mov	r4, r0
 800cf66:	f000 fe43 	bl	800dbf0 <arm_cfft_init_f32>
 800cf6a:	b920      	cbnz	r0, 800cf76 <arm_rfft_2048_fast_init_f32+0x1a>
 800cf6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf70:	4b03      	ldr	r3, [pc, #12]	@ (800cf80 <arm_rfft_2048_fast_init_f32+0x24>)
 800cf72:	8222      	strh	r2, [r4, #16]
 800cf74:	6163      	str	r3, [r4, #20]
 800cf76:	bd10      	pop	{r4, pc}
 800cf78:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	08029404 	.word	0x08029404

0800cf84 <arm_rfft_4096_fast_init_f32>:
 800cf84:	b160      	cbz	r0, 800cfa0 <arm_rfft_4096_fast_init_f32+0x1c>
 800cf86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800cf8a:	b510      	push	{r4, lr}
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	f000 fe2f 	bl	800dbf0 <arm_cfft_init_f32>
 800cf92:	b920      	cbnz	r0, 800cf9e <arm_rfft_4096_fast_init_f32+0x1a>
 800cf94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cf98:	4b03      	ldr	r3, [pc, #12]	@ (800cfa8 <arm_rfft_4096_fast_init_f32+0x24>)
 800cf9a:	8222      	strh	r2, [r4, #16]
 800cf9c:	6163      	str	r3, [r4, #20]
 800cf9e:	bd10      	pop	{r4, pc}
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	0802b884 	.word	0x0802b884

0800cfac <arm_rfft_fast_init_f32>:
 800cfac:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cfb0:	d024      	beq.n	800cffc <arm_rfft_fast_init_f32+0x50>
 800cfb2:	d807      	bhi.n	800cfc4 <arm_rfft_fast_init_f32+0x18>
 800cfb4:	2980      	cmp	r1, #128	@ 0x80
 800cfb6:	d01c      	beq.n	800cff2 <arm_rfft_fast_init_f32+0x46>
 800cfb8:	d90c      	bls.n	800cfd4 <arm_rfft_fast_init_f32+0x28>
 800cfba:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800cfbe:	d11a      	bne.n	800cff6 <arm_rfft_fast_init_f32+0x4a>
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	@ (800d000 <arm_rfft_fast_init_f32+0x54>)
 800cfc2:	4718      	bx	r3
 800cfc4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800cfc8:	d011      	beq.n	800cfee <arm_rfft_fast_init_f32+0x42>
 800cfca:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800cfce:	d107      	bne.n	800cfe0 <arm_rfft_fast_init_f32+0x34>
 800cfd0:	4b0c      	ldr	r3, [pc, #48]	@ (800d004 <arm_rfft_fast_init_f32+0x58>)
 800cfd2:	4718      	bx	r3
 800cfd4:	2920      	cmp	r1, #32
 800cfd6:	d008      	beq.n	800cfea <arm_rfft_fast_init_f32+0x3e>
 800cfd8:	2940      	cmp	r1, #64	@ 0x40
 800cfda:	d10c      	bne.n	800cff6 <arm_rfft_fast_init_f32+0x4a>
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	@ (800d008 <arm_rfft_fast_init_f32+0x5c>)
 800cfde:	e7f0      	b.n	800cfc2 <arm_rfft_fast_init_f32+0x16>
 800cfe0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cfe4:	d107      	bne.n	800cff6 <arm_rfft_fast_init_f32+0x4a>
 800cfe6:	4b09      	ldr	r3, [pc, #36]	@ (800d00c <arm_rfft_fast_init_f32+0x60>)
 800cfe8:	e7eb      	b.n	800cfc2 <arm_rfft_fast_init_f32+0x16>
 800cfea:	4b09      	ldr	r3, [pc, #36]	@ (800d010 <arm_rfft_fast_init_f32+0x64>)
 800cfec:	e7e9      	b.n	800cfc2 <arm_rfft_fast_init_f32+0x16>
 800cfee:	4b09      	ldr	r3, [pc, #36]	@ (800d014 <arm_rfft_fast_init_f32+0x68>)
 800cff0:	e7e7      	b.n	800cfc2 <arm_rfft_fast_init_f32+0x16>
 800cff2:	4b09      	ldr	r3, [pc, #36]	@ (800d018 <arm_rfft_fast_init_f32+0x6c>)
 800cff4:	e7e5      	b.n	800cfc2 <arm_rfft_fast_init_f32+0x16>
 800cff6:	f04f 30ff 	mov.w	r0, #4294967295
 800cffa:	4770      	bx	lr
 800cffc:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <arm_rfft_fast_init_f32+0x70>)
 800cffe:	e7e0      	b.n	800cfc2 <arm_rfft_fast_init_f32+0x16>
 800d000:	0800cee9 	.word	0x0800cee9
 800d004:	0800cf85 	.word	0x0800cf85
 800d008:	0800cea1 	.word	0x0800cea1
 800d00c:	0800cf35 	.word	0x0800cf35
 800d010:	0800ce7d 	.word	0x0800ce7d
 800d014:	0800cf5d 	.word	0x0800cf5d
 800d018:	0800cec5 	.word	0x0800cec5
 800d01c:	0800cf0d 	.word	0x0800cf0d

0800d020 <stage_rfft_f32>:
 800d020:	b470      	push	{r4, r5, r6}
 800d022:	edd1 7a00 	vldr	s15, [r1]
 800d026:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d02a:	ed91 7a01 	vldr	s14, [r1, #4]
 800d02e:	f101 0410 	add.w	r4, r1, #16
 800d032:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d036:	8806      	ldrh	r6, [r0, #0]
 800d038:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d03c:	6940      	ldr	r0, [r0, #20]
 800d03e:	3e01      	subs	r6, #1
 800d040:	eeb0 4a46 	vmov.f32	s8, s12
 800d044:	f102 0510 	add.w	r5, r2, #16
 800d048:	3010      	adds	r0, #16
 800d04a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d04e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d056:	f1a1 0308 	sub.w	r3, r1, #8
 800d05a:	ee26 7a86 	vmul.f32	s14, s13, s12
 800d05e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d062:	ed82 7a00 	vstr	s14, [r2]
 800d066:	edc2 7a01 	vstr	s15, [r2, #4]
 800d06a:	ed14 6a02 	vldr	s12, [r4, #-8]
 800d06e:	3e01      	subs	r6, #1
 800d070:	ed93 7a02 	vldr	s14, [r3, #8]
 800d074:	f104 0408 	add.w	r4, r4, #8
 800d078:	ed50 6a02 	vldr	s13, [r0, #-8]
 800d07c:	f1a3 0308 	sub.w	r3, r3, #8
 800d080:	ee77 5a46 	vsub.f32	s11, s14, s12
 800d084:	edd3 4a05 	vldr	s9, [r3, #20]
 800d088:	ed54 7a03 	vldr	s15, [r4, #-12]
 800d08c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d090:	ed10 6a01 	vldr	s12, [r0, #-4]
 800d094:	f105 0508 	add.w	r5, r5, #8
 800d098:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800d09c:	f100 0008 	add.w	r0, r0, #8
 800d0a0:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800d0a4:	ee66 5a25 	vmul.f32	s11, s12, s11
 800d0a8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800d0ac:	ee37 7a23 	vadd.f32	s14, s14, s7
 800d0b0:	ee66 6a85 	vmul.f32	s13, s13, s10
 800d0b4:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d0b8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d0bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d0c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d0c4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d0c8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d0cc:	ed05 7a04 	vstr	s14, [r5, #-16]
 800d0d0:	ed45 7a03 	vstr	s15, [r5, #-12]
 800d0d4:	d1c9      	bne.n	800d06a <stage_rfft_f32+0x4a>
 800d0d6:	bc70      	pop	{r4, r5, r6}
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop

0800d0dc <merge_rfft_f32>:
 800d0dc:	b410      	push	{r4}
 800d0de:	edd1 7a00 	vldr	s15, [r1]
 800d0e2:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800d0e6:	edd1 6a01 	vldr	s13, [r1, #4]
 800d0ea:	8804      	ldrh	r4, [r0, #0]
 800d0ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d0f0:	6940      	ldr	r0, [r0, #20]
 800d0f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d0f6:	3c01      	subs	r4, #1
 800d0f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d0fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d100:	ed82 7a00 	vstr	s14, [r2]
 800d104:	edc2 7a01 	vstr	s15, [r2, #4]
 800d108:	b3dc      	cbz	r4, 800d182 <merge_rfft_f32+0xa6>
 800d10a:	00e3      	lsls	r3, r4, #3
 800d10c:	3010      	adds	r0, #16
 800d10e:	3210      	adds	r2, #16
 800d110:	3b08      	subs	r3, #8
 800d112:	440b      	add	r3, r1
 800d114:	3110      	adds	r1, #16
 800d116:	ed11 6a02 	vldr	s12, [r1, #-8]
 800d11a:	3c01      	subs	r4, #1
 800d11c:	ed93 7a02 	vldr	s14, [r3, #8]
 800d120:	f101 0108 	add.w	r1, r1, #8
 800d124:	ed50 6a02 	vldr	s13, [r0, #-8]
 800d128:	f1a3 0308 	sub.w	r3, r3, #8
 800d12c:	ee76 5a47 	vsub.f32	s11, s12, s14
 800d130:	edd3 4a05 	vldr	s9, [r3, #20]
 800d134:	ed51 7a03 	vldr	s15, [r1, #-12]
 800d138:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d13c:	ed10 6a01 	vldr	s12, [r0, #-4]
 800d140:	f102 0208 	add.w	r2, r2, #8
 800d144:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800d148:	f100 0008 	add.w	r0, r0, #8
 800d14c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800d150:	ee66 5a25 	vmul.f32	s11, s12, s11
 800d154:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800d158:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d15c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800d160:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d164:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d168:	ee37 7a46 	vsub.f32	s14, s14, s12
 800d16c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d170:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d174:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d178:	ed02 7a04 	vstr	s14, [r2, #-16]
 800d17c:	ed42 7a03 	vstr	s15, [r2, #-12]
 800d180:	d1c9      	bne.n	800d116 <merge_rfft_f32+0x3a>
 800d182:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <arm_rfft_fast_f32>:
 800d188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d18c:	461c      	mov	r4, r3
 800d18e:	4605      	mov	r5, r0
 800d190:	4616      	mov	r6, r2
 800d192:	b14b      	cbz	r3, 800d1a8 <arm_rfft_fast_f32+0x20>
 800d194:	f7ff ffa2 	bl	800d0dc <merge_rfft_f32>
 800d198:	4622      	mov	r2, r4
 800d19a:	4631      	mov	r1, r6
 800d19c:	4628      	mov	r0, r5
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a4:	f000 bb38 	b.w	800d818 <arm_cfft_f32>
 800d1a8:	460f      	mov	r7, r1
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	f000 fb33 	bl	800d818 <arm_cfft_f32>
 800d1b2:	4632      	mov	r2, r6
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1bc:	f7ff bf30 	b.w	800d020 <stage_rfft_f32>

0800d1c0 <arm_cfft_radix8by2_f32>:
 800d1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	4608      	mov	r0, r1
 800d1c8:	ed2d 8b06 	vpush	{d8-d10}
 800d1cc:	f8b7 c000 	ldrh.w	ip, [r7]
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800d1d8:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800d1dc:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d1e0:	f000 80ac 	beq.w	800d33c <arm_cfft_radix8by2_f32+0x17c>
 800d1e4:	008c      	lsls	r4, r1, #2
 800d1e6:	f100 0310 	add.w	r3, r0, #16
 800d1ea:	3210      	adds	r2, #16
 800d1ec:	f108 0610 	add.w	r6, r8, #16
 800d1f0:	3410      	adds	r4, #16
 800d1f2:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800d1f6:	1905      	adds	r5, r0, r4
 800d1f8:	4444      	add	r4, r8
 800d1fa:	ed16 7a04 	vldr	s14, [r6, #-16]
 800d1fe:	3310      	adds	r3, #16
 800d200:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 800d204:	3510      	adds	r5, #16
 800d206:	ed56 0a03 	vldr	s1, [r6, #-12]
 800d20a:	3210      	adds	r2, #16
 800d20c:	ee74 9a87 	vadd.f32	s19, s9, s14
 800d210:	ed56 7a02 	vldr	s15, [r6, #-8]
 800d214:	ed56 2a01 	vldr	s5, [r6, #-4]
 800d218:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800d21c:	ed54 5a04 	vldr	s11, [r4, #-16]
 800d220:	3610      	adds	r6, #16
 800d222:	ed14 5a03 	vldr	s10, [r4, #-12]
 800d226:	3410      	adds	r4, #16
 800d228:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 800d22c:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 800d230:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 800d234:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 800d238:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 800d23c:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800d240:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 800d244:	ee33 8a83 	vadd.f32	s16, s7, s6
 800d248:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 800d24c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800d250:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800d254:	ee34 0a06 	vadd.f32	s0, s8, s12
 800d258:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 800d25c:	ee77 aa20 	vadd.f32	s21, s14, s1
 800d260:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 800d264:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800d268:	ee72 9a22 	vadd.f32	s19, s4, s5
 800d26c:	ee71 8a05 	vadd.f32	s17, s2, s10
 800d270:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 800d274:	ee37 7a60 	vsub.f32	s14, s14, s1
 800d278:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 800d27c:	ee35 5a41 	vsub.f32	s10, s10, s2
 800d280:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 800d284:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d288:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 800d28c:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 800d290:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800d294:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 800d298:	ee72 7a62 	vsub.f32	s15, s4, s5
 800d29c:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 800d2a0:	ee73 2a63 	vsub.f32	s5, s6, s7
 800d2a4:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800d2a8:	4563      	cmp	r3, ip
 800d2aa:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800d2ae:	ee24 3a84 	vmul.f32	s6, s9, s8
 800d2b2:	ee27 2a26 	vmul.f32	s4, s14, s13
 800d2b6:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800d2ba:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800d2be:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d2c2:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d2c6:	ee65 6a26 	vmul.f32	s13, s10, s13
 800d2ca:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d2ce:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d2d2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d2d6:	ee33 4a02 	vadd.f32	s8, s6, s4
 800d2da:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800d2de:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 800d2e2:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 800d2e6:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 800d2ea:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 800d2ee:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800d2f2:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800d2f6:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800d2fa:	ee27 4a87 	vmul.f32	s8, s15, s14
 800d2fe:	ee61 5a87 	vmul.f32	s11, s3, s14
 800d302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d306:	ee22 5a87 	vmul.f32	s10, s5, s14
 800d30a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d30e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d312:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800d316:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d31a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d31e:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d322:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d326:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 800d32a:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 800d32e:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 800d332:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 800d336:	f47f af60 	bne.w	800d1fa <arm_cfft_radix8by2_f32+0x3a>
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	b289      	uxth	r1, r1
 800d33e:	2302      	movs	r3, #2
 800d340:	9101      	str	r1, [sp, #4]
 800d342:	f000 fca5 	bl	800dc90 <arm_radix8_butterfly_f32>
 800d346:	9901      	ldr	r1, [sp, #4]
 800d348:	4640      	mov	r0, r8
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	2302      	movs	r3, #2
 800d34e:	b002      	add	sp, #8
 800d350:	ecbd 8b06 	vpop	{d8-d10}
 800d354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d358:	f000 bc9a 	b.w	800dc90 <arm_radix8_butterfly_f32>

0800d35c <arm_cfft_radix8by4_f32>:
 800d35c:	4602      	mov	r2, r0
 800d35e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d362:	ed2d 8b04 	vpush	{d8-d9}
 800d366:	8813      	ldrh	r3, [r2, #0]
 800d368:	b08d      	sub	sp, #52	@ 0x34
 800d36a:	edd1 7a00 	vldr	s15, [r1]
 800d36e:	085b      	lsrs	r3, r3, #1
 800d370:	6852      	ldr	r2, [r2, #4]
 800d372:	edd1 5a01 	vldr	s11, [r1, #4]
 800d376:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 800d37a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d37c:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 800d380:	4608      	mov	r0, r1
 800d382:	ed98 6a00 	vldr	s12, [r8]
 800d386:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 800d38a:	ed96 7a00 	vldr	s14, [r6]
 800d38e:	f102 0108 	add.w	r1, r2, #8
 800d392:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d396:	ed95 5a00 	vldr	s10, [r5]
 800d39a:	edd8 4a01 	vldr	s9, [r8, #4]
 800d39e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d3a2:	9102      	str	r1, [sp, #8]
 800d3a4:	0859      	lsrs	r1, r3, #1
 800d3a6:	ee77 3a26 	vadd.f32	s7, s14, s13
 800d3aa:	ed96 4a01 	vldr	s8, [r6, #4]
 800d3ae:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d3b2:	ed95 3a01 	vldr	s6, [r5, #4]
 800d3b6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d3ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3bc:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d3c0:	0859      	lsrs	r1, r3, #1
 800d3c2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d3cc:	f102 0c10 	add.w	ip, r2, #16
 800d3d0:	edc0 3a00 	vstr	s7, [r0]
 800d3d4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d3d8:	ed96 2a01 	vldr	s4, [r6, #4]
 800d3dc:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d3e6:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d3ea:	edd5 2a01 	vldr	s5, [r5, #4]
 800d3ee:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d3f2:	9303      	str	r3, [sp, #12]
 800d3f4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d3f8:	4637      	mov	r7, r6
 800d3fa:	462c      	mov	r4, r5
 800d3fc:	3902      	subs	r1, #2
 800d3fe:	4643      	mov	r3, r8
 800d400:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d404:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d408:	f8cd c000 	str.w	ip, [sp]
 800d40c:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d410:	f102 0c18 	add.w	ip, r2, #24
 800d414:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d418:	3708      	adds	r7, #8
 800d41a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d41e:	3308      	adds	r3, #8
 800d420:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d424:	3408      	adds	r4, #8
 800d426:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d42a:	0849      	lsrs	r1, r1, #1
 800d42c:	ed80 6a01 	vstr	s12, [r0, #4]
 800d430:	9508      	str	r5, [sp, #32]
 800d432:	edc6 3a00 	vstr	s7, [r6]
 800d436:	edc6 4a01 	vstr	s9, [r6, #4]
 800d43a:	9607      	str	r6, [sp, #28]
 800d43c:	edc8 6a00 	vstr	s13, [r8]
 800d440:	edc8 5a01 	vstr	s11, [r8, #4]
 800d444:	f8cd c004 	str.w	ip, [sp, #4]
 800d448:	9706      	str	r7, [sp, #24]
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	edc5 7a00 	vstr	s15, [r5]
 800d450:	9404      	str	r4, [sp, #16]
 800d452:	ed85 7a01 	vstr	s14, [r5, #4]
 800d456:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d458:	f000 813a 	beq.w	800d6d0 <arm_cfft_radix8by4_f32+0x374>
 800d45c:	4637      	mov	r7, r6
 800d45e:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d462:	462e      	mov	r6, r5
 800d464:	f1aa 030c 	sub.w	r3, sl, #12
 800d468:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800d46c:	f102 0a20 	add.w	sl, r2, #32
 800d470:	4632      	mov	r2, r6
 800d472:	442b      	add	r3, r5
 800d474:	f100 0e10 	add.w	lr, r0, #16
 800d478:	f107 0510 	add.w	r5, r7, #16
 800d47c:	f8dd b000 	ldr.w	fp, [sp]
 800d480:	f1a8 040c 	sub.w	r4, r8, #12
 800d484:	f108 0710 	add.w	r7, r8, #16
 800d488:	3e0c      	subs	r6, #12
 800d48a:	3210      	adds	r2, #16
 800d48c:	ed17 7a02 	vldr	s14, [r7, #-8]
 800d490:	3901      	subs	r1, #1
 800d492:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d496:	f1ac 0c08 	sub.w	ip, ip, #8
 800d49a:	ed55 6a02 	vldr	s13, [r5, #-8]
 800d49e:	f10e 0e08 	add.w	lr, lr, #8
 800d4a2:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d4a6:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d4aa:	ed57 5a01 	vldr	s11, [r7, #-4]
 800d4ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4b2:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d4b6:	f10b 0b08 	add.w	fp, fp, #8
 800d4ba:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d4be:	ed15 3a01 	vldr	s6, [r5, #-4]
 800d4c2:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d4c6:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d4ca:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d4ce:	f105 0508 	add.w	r5, r5, #8
 800d4d2:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d4d6:	f1a4 0408 	sub.w	r4, r4, #8
 800d4da:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d4de:	f10a 0a10 	add.w	sl, sl, #16
 800d4e2:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d4e6:	f107 0708 	add.w	r7, r7, #8
 800d4ea:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800d4ee:	ee37 5a66 	vsub.f32	s10, s14, s13
 800d4f2:	ed55 5a03 	vldr	s11, [r5, #-12]
 800d4f6:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800d4fa:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d4fe:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d502:	ee74 5a25 	vadd.f32	s11, s8, s11
 800d506:	f1a6 0608 	sub.w	r6, r6, #8
 800d50a:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d50e:	f109 0918 	add.w	r9, r9, #24
 800d512:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800d516:	f102 0208 	add.w	r2, r2, #8
 800d51a:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d51e:	f1a3 0308 	sub.w	r3, r3, #8
 800d522:	ee34 6a63 	vsub.f32	s12, s8, s7
 800d526:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800d52a:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800d52e:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d532:	ed96 4a04 	vldr	s8, [r6, #16]
 800d536:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800d53a:	ed9c 3a04 	vldr	s6, [ip, #16]
 800d53e:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d542:	edd4 7a04 	vldr	s15, [r4, #16]
 800d546:	ee73 6a04 	vadd.f32	s13, s6, s8
 800d54a:	ed93 8a04 	vldr	s16, [r3, #16]
 800d54e:	edd6 5a03 	vldr	s11, [r6, #12]
 800d552:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d556:	ed9c 2a03 	vldr	s4, [ip, #12]
 800d55a:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800d55e:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800d562:	ed94 1a03 	vldr	s2, [r4, #12]
 800d566:	ee32 4a25 	vadd.f32	s8, s4, s11
 800d56a:	edd3 2a03 	vldr	s5, [r3, #12]
 800d56e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d572:	ee70 0a88 	vadd.f32	s1, s1, s16
 800d576:	ee73 4a41 	vsub.f32	s9, s6, s2
 800d57a:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d57e:	edcc 0a04 	vstr	s1, [ip, #16]
 800d582:	ee74 0a41 	vsub.f32	s1, s8, s2
 800d586:	edd4 6a03 	vldr	s13, [r4, #12]
 800d58a:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800d58e:	ed93 9a03 	vldr	s18, [r3, #12]
 800d592:	ee78 5a82 	vadd.f32	s11, s17, s4
 800d596:	ee34 4a26 	vadd.f32	s8, s8, s13
 800d59a:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800d59e:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d5a2:	ee34 4a09 	vadd.f32	s8, s8, s18
 800d5a6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d5aa:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d5ae:	ed8c 4a03 	vstr	s8, [ip, #12]
 800d5b2:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800d5b6:	ed1b 1a03 	vldr	s2, [fp, #-12]
 800d5ba:	ed1b 4a04 	vldr	s8, [fp, #-16]
 800d5be:	ee60 2a01 	vmul.f32	s5, s0, s2
 800d5c2:	ee64 6a81 	vmul.f32	s13, s9, s2
 800d5c6:	ee20 8a04 	vmul.f32	s16, s0, s8
 800d5ca:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d5ce:	ee25 0a01 	vmul.f32	s0, s10, s2
 800d5d2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d5d6:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d5da:	ee65 5a81 	vmul.f32	s11, s11, s2
 800d5de:	ee35 5a62 	vsub.f32	s10, s10, s5
 800d5e2:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800d5e6:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800d5ea:	ee38 1a00 	vadd.f32	s2, s16, s0
 800d5ee:	ed05 5a03 	vstr	s10, [r5, #-12]
 800d5f2:	ed05 1a04 	vstr	s2, [r5, #-16]
 800d5f6:	ed84 4a04 	vstr	s8, [r4, #16]
 800d5fa:	edc4 5a03 	vstr	s11, [r4, #12]
 800d5fe:	ed1a 5a08 	vldr	s10, [sl, #-32]	@ 0xffffffe0
 800d602:	ed5a 5a07 	vldr	s11, [sl, #-28]	@ 0xffffffe4
 800d606:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800d60a:	ee66 2a25 	vmul.f32	s5, s12, s11
 800d60e:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d612:	ee21 4a85 	vmul.f32	s8, s3, s10
 800d616:	ee60 7a85 	vmul.f32	s15, s1, s10
 800d61a:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800d61e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d622:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800d626:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d62a:	ee34 5a22 	vadd.f32	s10, s8, s5
 800d62e:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d632:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800d636:	ed07 5a04 	vstr	s10, [r7, #-16]
 800d63a:	ed07 6a03 	vstr	s12, [r7, #-12]
 800d63e:	edc6 5a04 	vstr	s11, [r6, #16]
 800d642:	edc6 6a03 	vstr	s13, [r6, #12]
 800d646:	ed59 2a0c 	vldr	s5, [r9, #-48]	@ 0xffffffd0
 800d64a:	ed59 7a0b 	vldr	s15, [r9, #-44]	@ 0xffffffd4
 800d64e:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800d652:	ee67 5a27 	vmul.f32	s11, s14, s15
 800d656:	ee63 6a27 	vmul.f32	s13, s6, s15
 800d65a:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800d65e:	ee27 7a22 	vmul.f32	s14, s14, s5
 800d662:	ee62 7a27 	vmul.f32	s15, s4, s15
 800d666:	ee23 3a22 	vmul.f32	s6, s6, s5
 800d66a:	ee22 2a22 	vmul.f32	s4, s4, s5
 800d66e:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d672:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d676:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800d67a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d67e:	ed02 6a04 	vstr	s12, [r2, #-16]
 800d682:	ed02 7a03 	vstr	s14, [r2, #-12]
 800d686:	ed83 2a04 	vstr	s4, [r3, #16]
 800d68a:	edc3 7a03 	vstr	s15, [r3, #12]
 800d68e:	f47f aefd 	bne.w	800d48c <arm_cfft_radix8by4_f32+0x130>
 800d692:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d694:	9903      	ldr	r1, [sp, #12]
 800d696:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d69a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d69e:	9103      	str	r1, [sp, #12]
 800d6a0:	9902      	ldr	r1, [sp, #8]
 800d6a2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d6a6:	9102      	str	r1, [sp, #8]
 800d6a8:	9906      	ldr	r1, [sp, #24]
 800d6aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d6ae:	9106      	str	r1, [sp, #24]
 800d6b0:	9900      	ldr	r1, [sp, #0]
 800d6b2:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d6b6:	9100      	str	r1, [sp, #0]
 800d6b8:	9905      	ldr	r1, [sp, #20]
 800d6ba:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d6be:	9105      	str	r1, [sp, #20]
 800d6c0:	9904      	ldr	r1, [sp, #16]
 800d6c2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d6c6:	9204      	str	r2, [sp, #16]
 800d6c8:	9a01      	ldr	r2, [sp, #4]
 800d6ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	9c03      	ldr	r4, [sp, #12]
 800d6d2:	2304      	movs	r3, #4
 800d6d4:	9e05      	ldr	r6, [sp, #20]
 800d6d6:	ed94 7a00 	vldr	s14, [r4]
 800d6da:	edd6 7a00 	vldr	s15, [r6]
 800d6de:	9a06      	ldr	r2, [sp, #24]
 800d6e0:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d6e4:	9d04      	ldr	r5, [sp, #16]
 800d6e6:	edd2 6a00 	vldr	s13, [r2]
 800d6ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6ee:	ed95 3a00 	vldr	s6, [r5]
 800d6f2:	ee76 3a86 	vadd.f32	s7, s13, s12
 800d6f6:	ed96 5a01 	vldr	s10, [r6, #4]
 800d6fa:	ed94 4a01 	vldr	s8, [r4, #4]
 800d6fe:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d702:	edd5 2a01 	vldr	s5, [r5, #4]
 800d706:	ee73 3a83 	vadd.f32	s7, s7, s6
 800d70a:	edd2 7a01 	vldr	s15, [r2, #4]
 800d70e:	ee74 5a05 	vadd.f32	s11, s8, s10
 800d712:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800d716:	ee34 4a45 	vsub.f32	s8, s8, s10
 800d71a:	edc4 3a00 	vstr	s7, [r4]
 800d71e:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d722:	edd2 3a01 	vldr	s7, [r2, #4]
 800d726:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d72a:	ed95 2a01 	vldr	s4, [r5, #4]
 800d72e:	ee34 5a66 	vsub.f32	s10, s8, s13
 800d732:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800d736:	9103      	str	r1, [sp, #12]
 800d738:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800d73c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d740:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d744:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d74c:	edc4 3a01 	vstr	s7, [r4, #4]
 800d750:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d754:	9c02      	ldr	r4, [sp, #8]
 800d756:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800d75a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800d75e:	edd4 3a00 	vldr	s7, [r4]
 800d762:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d766:	ed94 7a01 	vldr	s14, [r4, #4]
 800d76a:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800d76e:	ee64 4a87 	vmul.f32	s9, s9, s14
 800d772:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d776:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d77a:	ee34 7a07 	vadd.f32	s14, s8, s14
 800d77e:	ee35 5a64 	vsub.f32	s10, s10, s9
 800d782:	ed82 7a00 	vstr	s14, [r2]
 800d786:	ed82 5a01 	vstr	s10, [r2, #4]
 800d78a:	9a00      	ldr	r2, [sp, #0]
 800d78c:	edd2 4a01 	vldr	s9, [r2, #4]
 800d790:	ed92 7a00 	vldr	s14, [r2]
 800d794:	9a01      	ldr	r2, [sp, #4]
 800d796:	ee26 5a07 	vmul.f32	s10, s12, s14
 800d79a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d79e:	ee25 7a87 	vmul.f32	s14, s11, s14
 800d7a2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800d7a6:	ee37 6a46 	vsub.f32	s12, s14, s12
 800d7aa:	ee75 5a25 	vadd.f32	s11, s10, s11
 800d7ae:	ed86 6a01 	vstr	s12, [r6, #4]
 800d7b2:	edc6 5a00 	vstr	s11, [r6]
 800d7b6:	edd2 5a01 	vldr	s11, [r2, #4]
 800d7ba:	ed92 7a00 	vldr	s14, [r2]
 800d7be:	ee27 6a87 	vmul.f32	s12, s15, s14
 800d7c2:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d7c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d7ca:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d7ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d7d6:	edc5 6a00 	vstr	s13, [r5]
 800d7da:	edc5 7a01 	vstr	s15, [r5, #4]
 800d7de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d7e0:	6862      	ldr	r2, [r4, #4]
 800d7e2:	f000 fa55 	bl	800dc90 <arm_radix8_butterfly_f32>
 800d7e6:	9903      	ldr	r1, [sp, #12]
 800d7e8:	9807      	ldr	r0, [sp, #28]
 800d7ea:	2304      	movs	r3, #4
 800d7ec:	6862      	ldr	r2, [r4, #4]
 800d7ee:	9100      	str	r1, [sp, #0]
 800d7f0:	f000 fa4e 	bl	800dc90 <arm_radix8_butterfly_f32>
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	9900      	ldr	r1, [sp, #0]
 800d7f8:	6862      	ldr	r2, [r4, #4]
 800d7fa:	2304      	movs	r3, #4
 800d7fc:	f000 fa48 	bl	800dc90 <arm_radix8_butterfly_f32>
 800d800:	9900      	ldr	r1, [sp, #0]
 800d802:	6862      	ldr	r2, [r4, #4]
 800d804:	2304      	movs	r3, #4
 800d806:	9808      	ldr	r0, [sp, #32]
 800d808:	b00d      	add	sp, #52	@ 0x34
 800d80a:	ecbd 8b04 	vpop	{d8-d9}
 800d80e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d812:	f000 ba3d 	b.w	800dc90 <arm_radix8_butterfly_f32>
 800d816:	bf00      	nop

0800d818 <arm_cfft_f32>:
 800d818:	2a01      	cmp	r2, #1
 800d81a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d81e:	4607      	mov	r7, r0
 800d820:	4690      	mov	r8, r2
 800d822:	460c      	mov	r4, r1
 800d824:	4699      	mov	r9, r3
 800d826:	8805      	ldrh	r5, [r0, #0]
 800d828:	d05b      	beq.n	800d8e2 <arm_cfft_f32+0xca>
 800d82a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800d82e:	d053      	beq.n	800d8d8 <arm_cfft_f32+0xc0>
 800d830:	d810      	bhi.n	800d854 <arm_cfft_f32+0x3c>
 800d832:	2d40      	cmp	r5, #64	@ 0x40
 800d834:	d015      	beq.n	800d862 <arm_cfft_f32+0x4a>
 800d836:	d94b      	bls.n	800d8d0 <arm_cfft_f32+0xb8>
 800d838:	2d80      	cmp	r5, #128	@ 0x80
 800d83a:	d103      	bne.n	800d844 <arm_cfft_f32+0x2c>
 800d83c:	4621      	mov	r1, r4
 800d83e:	4638      	mov	r0, r7
 800d840:	f7ff fcbe 	bl	800d1c0 <arm_cfft_radix8by2_f32>
 800d844:	f1b9 0f00 	cmp.w	r9, #0
 800d848:	d114      	bne.n	800d874 <arm_cfft_f32+0x5c>
 800d84a:	f1b8 0f01 	cmp.w	r8, #1
 800d84e:	d019      	beq.n	800d884 <arm_cfft_f32+0x6c>
 800d850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d854:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800d858:	d03e      	beq.n	800d8d8 <arm_cfft_f32+0xc0>
 800d85a:	d932      	bls.n	800d8c2 <arm_cfft_f32+0xaa>
 800d85c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800d860:	d1f0      	bne.n	800d844 <arm_cfft_f32+0x2c>
 800d862:	2301      	movs	r3, #1
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	4629      	mov	r1, r5
 800d868:	4620      	mov	r0, r4
 800d86a:	f000 fa11 	bl	800dc90 <arm_radix8_butterfly_f32>
 800d86e:	f1b9 0f00 	cmp.w	r9, #0
 800d872:	d0ea      	beq.n	800d84a <arm_cfft_f32+0x32>
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	4620      	mov	r0, r4
 800d878:	89b9      	ldrh	r1, [r7, #12]
 800d87a:	f000 f843 	bl	800d904 <arm_bitreversal_32>
 800d87e:	f1b8 0f01 	cmp.w	r8, #1
 800d882:	d1e5      	bne.n	800d850 <arm_cfft_f32+0x38>
 800d884:	ee07 5a90 	vmov	s15, r5
 800d888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d890:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d894:	2d00      	cmp	r5, #0
 800d896:	d0db      	beq.n	800d850 <arm_cfft_f32+0x38>
 800d898:	f104 0108 	add.w	r1, r4, #8
 800d89c:	2300      	movs	r3, #0
 800d89e:	ed11 7a02 	vldr	s14, [r1, #-8]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d8a8:	3108      	adds	r1, #8
 800d8aa:	429d      	cmp	r5, r3
 800d8ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d8b0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d8b4:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d8b8:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d8bc:	d1ef      	bne.n	800d89e <arm_cfft_f32+0x86>
 800d8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c2:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800d8c6:	d0cc      	beq.n	800d862 <arm_cfft_f32+0x4a>
 800d8c8:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800d8cc:	d0b6      	beq.n	800d83c <arm_cfft_f32+0x24>
 800d8ce:	e7b9      	b.n	800d844 <arm_cfft_f32+0x2c>
 800d8d0:	2d10      	cmp	r5, #16
 800d8d2:	d0b3      	beq.n	800d83c <arm_cfft_f32+0x24>
 800d8d4:	2d20      	cmp	r5, #32
 800d8d6:	d1b5      	bne.n	800d844 <arm_cfft_f32+0x2c>
 800d8d8:	4621      	mov	r1, r4
 800d8da:	4638      	mov	r0, r7
 800d8dc:	f7ff fd3e 	bl	800d35c <arm_cfft_radix8by4_f32>
 800d8e0:	e7b0      	b.n	800d844 <arm_cfft_f32+0x2c>
 800d8e2:	b165      	cbz	r5, 800d8fe <arm_cfft_f32+0xe6>
 800d8e4:	310c      	adds	r1, #12
 800d8e6:	2600      	movs	r6, #0
 800d8e8:	ed51 7a02 	vldr	s15, [r1, #-8]
 800d8ec:	3601      	adds	r6, #1
 800d8ee:	3108      	adds	r1, #8
 800d8f0:	eef1 7a67 	vneg.f32	s15, s15
 800d8f4:	42b5      	cmp	r5, r6
 800d8f6:	ed41 7a04 	vstr	s15, [r1, #-16]
 800d8fa:	d1f5      	bne.n	800d8e8 <arm_cfft_f32+0xd0>
 800d8fc:	e795      	b.n	800d82a <arm_cfft_f32+0x12>
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d0a6      	beq.n	800d850 <arm_cfft_f32+0x38>
 800d902:	e7b7      	b.n	800d874 <arm_cfft_f32+0x5c>

0800d904 <arm_bitreversal_32>:
 800d904:	b321      	cbz	r1, 800d950 <arm_bitreversal_32+0x4c>
 800d906:	f102 0c02 	add.w	ip, r2, #2
 800d90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90e:	4690      	mov	r8, r2
 800d910:	2500      	movs	r5, #0
 800d912:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800d916:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800d91a:	3502      	adds	r5, #2
 800d91c:	08a4      	lsrs	r4, r4, #2
 800d91e:	089b      	lsrs	r3, r3, #2
 800d920:	428d      	cmp	r5, r1
 800d922:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800d926:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800d92a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800d92e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800d932:	f107 0704 	add.w	r7, r7, #4
 800d936:	f106 0604 	add.w	r6, r6, #4
 800d93a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800d93e:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800d942:	59c4      	ldr	r4, [r0, r7]
 800d944:	5983      	ldr	r3, [r0, r6]
 800d946:	51c3      	str	r3, [r0, r7]
 800d948:	5184      	str	r4, [r0, r6]
 800d94a:	d3e2      	bcc.n	800d912 <arm_bitreversal_32+0xe>
 800d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop

0800d954 <arm_biquad_cascade_df1_init_f32>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4615      	mov	r5, r2
 800d958:	460a      	mov	r2, r1
 800d95a:	4604      	mov	r4, r0
 800d95c:	2100      	movs	r1, #0
 800d95e:	6002      	str	r2, [r0, #0]
 800d960:	0112      	lsls	r2, r2, #4
 800d962:	6085      	str	r5, [r0, #8]
 800d964:	4618      	mov	r0, r3
 800d966:	f001 fbe0 	bl	800f12a <memset>
 800d96a:	6060      	str	r0, [r4, #4]
 800d96c:	bd38      	pop	{r3, r4, r5, pc}
 800d96e:	bf00      	nop

0800d970 <arm_biquad_cascade_df1_f32>:
 800d970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d974:	4694      	mov	ip, r2
 800d976:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800d97a:	f003 0203 	and.w	r2, r3, #3
 800d97e:	6807      	ldr	r7, [r0, #0]
 800d980:	ea4f 190e 	mov.w	r9, lr, lsl #4
 800d984:	eb0c 180e 	add.w	r8, ip, lr, lsl #4
 800d988:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 800d98c:	3614      	adds	r6, #20
 800d98e:	3510      	adds	r5, #16
 800d990:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 800d994:	ed56 1a04 	vldr	s3, [r6, #-16]
 800d998:	ed16 2a03 	vldr	s4, [r6, #-12]
 800d99c:	ed56 2a02 	vldr	s5, [r6, #-8]
 800d9a0:	ed16 3a01 	vldr	s6, [r6, #-4]
 800d9a4:	ed15 4a04 	vldr	s8, [r5, #-16]
 800d9a8:	ed15 5a03 	vldr	s10, [r5, #-12]
 800d9ac:	ed15 7a02 	vldr	s14, [r5, #-8]
 800d9b0:	ed55 7a01 	vldr	s15, [r5, #-4]
 800d9b4:	f1be 0f00 	cmp.w	lr, #0
 800d9b8:	f000 80cf 	beq.w	800db5a <arm_biquad_cascade_df1_f32+0x1ea>
 800d9bc:	f101 0010 	add.w	r0, r1, #16
 800d9c0:	f10c 0310 	add.w	r3, ip, #16
 800d9c4:	4674      	mov	r4, lr
 800d9c6:	ed50 5a04 	vldr	s11, [r0, #-16]
 800d9ca:	ee61 4a84 	vmul.f32	s9, s3, s8
 800d9ce:	ee22 5a05 	vmul.f32	s10, s4, s10
 800d9d2:	3c01      	subs	r4, #1
 800d9d4:	ee63 6aa5 	vmul.f32	s13, s7, s11
 800d9d8:	f100 0010 	add.w	r0, r0, #16
 800d9dc:	ee22 6a87 	vmul.f32	s12, s5, s14
 800d9e0:	f103 0310 	add.w	r3, r3, #16
 800d9e4:	ee63 7a27 	vmul.f32	s15, s6, s15
 800d9e8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d9ec:	ee21 0aa5 	vmul.f32	s0, s3, s11
 800d9f0:	ee22 1a04 	vmul.f32	s2, s4, s8
 800d9f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d9f8:	ee23 5a07 	vmul.f32	s10, s6, s14
 800d9fc:	ee22 4a25 	vmul.f32	s8, s4, s11
 800da00:	ee76 6a86 	vadd.f32	s13, s13, s12
 800da04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da08:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800da0c:	ee62 5aa7 	vmul.f32	s11, s5, s15
 800da10:	ed10 6a07 	vldr	s12, [r0, #-28]	@ 0xffffffe4
 800da14:	ee63 7a27 	vmul.f32	s15, s6, s15
 800da18:	ee63 6a86 	vmul.f32	s13, s7, s12
 800da1c:	ee61 0a86 	vmul.f32	s1, s3, s12
 800da20:	ee62 4a06 	vmul.f32	s9, s4, s12
 800da24:	ee36 7a80 	vadd.f32	s14, s13, s0
 800da28:	ee37 7a01 	vadd.f32	s14, s14, s2
 800da2c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800da30:	ee37 7a05 	vadd.f32	s14, s14, s10
 800da34:	ed03 7a07 	vstr	s14, [r3, #-28]	@ 0xffffffe4
 800da38:	ee62 6a87 	vmul.f32	s13, s5, s14
 800da3c:	ed10 5a06 	vldr	s10, [r0, #-24]	@ 0xffffffe8
 800da40:	ee23 7a07 	vmul.f32	s14, s6, s14
 800da44:	ee63 5a85 	vmul.f32	s11, s7, s10
 800da48:	ee21 1a85 	vmul.f32	s2, s3, s10
 800da4c:	ee75 5aa0 	vadd.f32	s11, s11, s1
 800da50:	ee75 5a84 	vadd.f32	s11, s11, s8
 800da54:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800da58:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800da5c:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800da60:	ee62 6aa7 	vmul.f32	s13, s5, s15
 800da64:	ed10 4a05 	vldr	s8, [r0, #-20]	@ 0xffffffec
 800da68:	ee23 6a84 	vmul.f32	s12, s7, s8
 800da6c:	ee36 6a01 	vadd.f32	s12, s12, s2
 800da70:	ee36 6a24 	vadd.f32	s12, s12, s9
 800da74:	ee36 6a26 	vadd.f32	s12, s12, s13
 800da78:	ee36 7a07 	vadd.f32	s14, s12, s14
 800da7c:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800da80:	d1a1      	bne.n	800d9c6 <arm_biquad_cascade_df1_f32+0x56>
 800da82:	4449      	add	r1, r9
 800da84:	4643      	mov	r3, r8
 800da86:	2a00      	cmp	r2, #0
 800da88:	d045      	beq.n	800db16 <arm_biquad_cascade_df1_f32+0x1a6>
 800da8a:	edd1 6a00 	vldr	s13, [r1]
 800da8e:	ee61 5a84 	vmul.f32	s11, s3, s8
 800da92:	ee22 5a05 	vmul.f32	s10, s4, s10
 800da96:	2a01      	cmp	r2, #1
 800da98:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800da9c:	ee22 6a87 	vmul.f32	s12, s5, s14
 800daa0:	ee63 7a27 	vmul.f32	s15, s6, s15
 800daa4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800daa8:	ee35 5a85 	vadd.f32	s10, s11, s10
 800daac:	ee35 6a06 	vadd.f32	s12, s10, s12
 800dab0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800dab4:	ed83 6a00 	vstr	s12, [r3]
 800dab8:	d03d      	beq.n	800db36 <arm_biquad_cascade_df1_f32+0x1c6>
 800daba:	ed91 5a01 	vldr	s10, [r1, #4]
 800dabe:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800dac2:	ee22 4a04 	vmul.f32	s8, s4, s8
 800dac6:	2a02      	cmp	r2, #2
 800dac8:	ee65 4a23 	vmul.f32	s9, s10, s7
 800dacc:	ee62 7a86 	vmul.f32	s15, s5, s12
 800dad0:	ee23 7a07 	vmul.f32	s14, s6, s14
 800dad4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800dad8:	ee35 4a84 	vadd.f32	s8, s11, s8
 800dadc:	ee74 7a27 	vadd.f32	s15, s8, s15
 800dae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dae4:	edc3 7a01 	vstr	s15, [r3, #4]
 800dae8:	d02e      	beq.n	800db48 <arm_biquad_cascade_df1_f32+0x1d8>
 800daea:	ed91 4a02 	vldr	s8, [r1, #8]
 800daee:	ee22 2a26 	vmul.f32	s4, s4, s13
 800daf2:	ee65 1a21 	vmul.f32	s3, s10, s3
 800daf6:	ee63 6a84 	vmul.f32	s13, s7, s8
 800dafa:	ee67 2aa2 	vmul.f32	s5, s15, s5
 800dafe:	ee23 3a06 	vmul.f32	s6, s6, s12
 800db02:	ee76 6aa1 	vadd.f32	s13, s13, s3
 800db06:	ee76 6a82 	vadd.f32	s13, s13, s4
 800db0a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800db0e:	ee36 7a83 	vadd.f32	s14, s13, s6
 800db12:	ed83 7a02 	vstr	s14, [r3, #8]
 800db16:	3f01      	subs	r7, #1
 800db18:	ed05 4a04 	vstr	s8, [r5, #-16]
 800db1c:	ed05 5a03 	vstr	s10, [r5, #-12]
 800db20:	f106 0614 	add.w	r6, r6, #20
 800db24:	ed05 7a02 	vstr	s14, [r5, #-8]
 800db28:	f105 0510 	add.w	r5, r5, #16
 800db2c:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800db30:	d015      	beq.n	800db5e <arm_biquad_cascade_df1_f32+0x1ee>
 800db32:	4661      	mov	r1, ip
 800db34:	e72c      	b.n	800d990 <arm_biquad_cascade_df1_f32+0x20>
 800db36:	eef0 7a47 	vmov.f32	s15, s14
 800db3a:	eeb0 5a44 	vmov.f32	s10, s8
 800db3e:	eeb0 7a46 	vmov.f32	s14, s12
 800db42:	eeb0 4a66 	vmov.f32	s8, s13
 800db46:	e7e6      	b.n	800db16 <arm_biquad_cascade_df1_f32+0x1a6>
 800db48:	eeb0 7a67 	vmov.f32	s14, s15
 800db4c:	eeb0 4a45 	vmov.f32	s8, s10
 800db50:	eef0 7a46 	vmov.f32	s15, s12
 800db54:	eeb0 5a66 	vmov.f32	s10, s13
 800db58:	e7dd      	b.n	800db16 <arm_biquad_cascade_df1_f32+0x1a6>
 800db5a:	4663      	mov	r3, ip
 800db5c:	e793      	b.n	800da86 <arm_biquad_cascade_df1_f32+0x116>
 800db5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db62:	bf00      	nop

0800db64 <arm_offset_f32>:
 800db64:	b470      	push	{r4, r5, r6}
 800db66:	0896      	lsrs	r6, r2, #2
 800db68:	d026      	beq.n	800dbb8 <arm_offset_f32+0x54>
 800db6a:	f100 0410 	add.w	r4, r0, #16
 800db6e:	f101 0310 	add.w	r3, r1, #16
 800db72:	4635      	mov	r5, r6
 800db74:	ed54 7a04 	vldr	s15, [r4, #-16]
 800db78:	3d01      	subs	r5, #1
 800db7a:	f104 0410 	add.w	r4, r4, #16
 800db7e:	f103 0310 	add.w	r3, r3, #16
 800db82:	ee77 7a80 	vadd.f32	s15, s15, s0
 800db86:	ed43 7a08 	vstr	s15, [r3, #-32]	@ 0xffffffe0
 800db8a:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800db8e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800db92:	ed43 7a07 	vstr	s15, [r3, #-28]	@ 0xffffffe4
 800db96:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800db9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800db9e:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800dba2:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800dba6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dbaa:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800dbae:	d1e1      	bne.n	800db74 <arm_offset_f32+0x10>
 800dbb0:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800dbb4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800dbb8:	f012 0203 	ands.w	r2, r2, #3
 800dbbc:	d015      	beq.n	800dbea <arm_offset_f32+0x86>
 800dbbe:	edd0 7a00 	vldr	s15, [r0]
 800dbc2:	3a01      	subs	r2, #1
 800dbc4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dbc8:	edc1 7a00 	vstr	s15, [r1]
 800dbcc:	d00d      	beq.n	800dbea <arm_offset_f32+0x86>
 800dbce:	edd0 7a01 	vldr	s15, [r0, #4]
 800dbd2:	2a01      	cmp	r2, #1
 800dbd4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dbd8:	edc1 7a01 	vstr	s15, [r1, #4]
 800dbdc:	d005      	beq.n	800dbea <arm_offset_f32+0x86>
 800dbde:	edd0 7a02 	vldr	s15, [r0, #8]
 800dbe2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dbe6:	ed81 0a02 	vstr	s0, [r1, #8]
 800dbea:	bc70      	pop	{r4, r5, r6}
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop

0800dbf0 <arm_cfft_init_f32>:
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	b430      	push	{r4, r5}
 800dbfa:	6042      	str	r2, [r0, #4]
 800dbfc:	8001      	strh	r1, [r0, #0]
 800dbfe:	d032      	beq.n	800dc66 <arm_cfft_init_f32+0x76>
 800dc00:	d918      	bls.n	800dc34 <arm_cfft_init_f32+0x44>
 800dc02:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800dc06:	d026      	beq.n	800dc56 <arm_cfft_init_f32+0x66>
 800dc08:	d90c      	bls.n	800dc24 <arm_cfft_init_f32+0x34>
 800dc0a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800dc0e:	d11e      	bne.n	800dc4e <arm_cfft_init_f32+0x5e>
 800dc10:	4916      	ldr	r1, [pc, #88]	@ (800dc6c <arm_cfft_init_f32+0x7c>)
 800dc12:	4610      	mov	r0, r2
 800dc14:	898d      	ldrh	r5, [r1, #12]
 800dc16:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 800dc1a:	819d      	strh	r5, [r3, #12]
 800dc1c:	e9c3 2401 	strd	r2, r4, [r3, #4]
 800dc20:	bc30      	pop	{r4, r5}
 800dc22:	4770      	bx	lr
 800dc24:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800dc28:	d017      	beq.n	800dc5a <arm_cfft_init_f32+0x6a>
 800dc2a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dc2e:	d10e      	bne.n	800dc4e <arm_cfft_init_f32+0x5e>
 800dc30:	490f      	ldr	r1, [pc, #60]	@ (800dc70 <arm_cfft_init_f32+0x80>)
 800dc32:	e7ee      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc34:	2940      	cmp	r1, #64	@ 0x40
 800dc36:	d012      	beq.n	800dc5e <arm_cfft_init_f32+0x6e>
 800dc38:	d903      	bls.n	800dc42 <arm_cfft_init_f32+0x52>
 800dc3a:	2980      	cmp	r1, #128	@ 0x80
 800dc3c:	d107      	bne.n	800dc4e <arm_cfft_init_f32+0x5e>
 800dc3e:	490d      	ldr	r1, [pc, #52]	@ (800dc74 <arm_cfft_init_f32+0x84>)
 800dc40:	e7e7      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc42:	2910      	cmp	r1, #16
 800dc44:	d00d      	beq.n	800dc62 <arm_cfft_init_f32+0x72>
 800dc46:	2920      	cmp	r1, #32
 800dc48:	d101      	bne.n	800dc4e <arm_cfft_init_f32+0x5e>
 800dc4a:	490b      	ldr	r1, [pc, #44]	@ (800dc78 <arm_cfft_init_f32+0x88>)
 800dc4c:	e7e1      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc52:	bc30      	pop	{r4, r5}
 800dc54:	4770      	bx	lr
 800dc56:	4909      	ldr	r1, [pc, #36]	@ (800dc7c <arm_cfft_init_f32+0x8c>)
 800dc58:	e7db      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc5a:	4909      	ldr	r1, [pc, #36]	@ (800dc80 <arm_cfft_init_f32+0x90>)
 800dc5c:	e7d9      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc5e:	4909      	ldr	r1, [pc, #36]	@ (800dc84 <arm_cfft_init_f32+0x94>)
 800dc60:	e7d7      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc62:	4909      	ldr	r1, [pc, #36]	@ (800dc88 <arm_cfft_init_f32+0x98>)
 800dc64:	e7d5      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc66:	4909      	ldr	r1, [pc, #36]	@ (800dc8c <arm_cfft_init_f32+0x9c>)
 800dc68:	e7d3      	b.n	800dc12 <arm_cfft_init_f32+0x22>
 800dc6a:	bf00      	nop
 800dc6c:	080301e4 	.word	0x080301e4
 800dc70:	08030184 	.word	0x08030184
 800dc74:	08030194 	.word	0x08030194
 800dc78:	080301d4 	.word	0x080301d4
 800dc7c:	080301b4 	.word	0x080301b4
 800dc80:	080301f4 	.word	0x080301f4
 800dc84:	08030204 	.word	0x08030204
 800dc88:	080301a4 	.word	0x080301a4
 800dc8c:	080301c4 	.word	0x080301c4

0800dc90 <arm_radix8_butterfly_f32>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	ed2d 8b10 	vpush	{d8-d15}
 800dc98:	b093      	sub	sp, #76	@ 0x4c
 800dc9a:	468a      	mov	sl, r1
 800dc9c:	eddf 8aba 	vldr	s17, [pc, #744]	@ 800df88 <arm_radix8_butterfly_f32+0x2f8>
 800dca0:	468b      	mov	fp, r1
 800dca2:	9010      	str	r0, [sp, #64]	@ 0x40
 800dca4:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800dca8:	4603      	mov	r3, r0
 800dcaa:	3304      	adds	r3, #4
 800dcac:	9311      	str	r3, [sp, #68]	@ 0x44
 800dcae:	ea4f 06da 	mov.w	r6, sl, lsr #3
 800dcb2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800dcb4:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 800dcb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800dcbc:	eb05 1146 	add.w	r1, r5, r6, lsl #5
 800dcc0:	960d      	str	r6, [sp, #52]	@ 0x34
 800dcc2:	00f0      	lsls	r0, r6, #3
 800dcc4:	f04f 0e00 	mov.w	lr, #0
 800dcc8:	eb01 1406 	add.w	r4, r1, r6, lsl #4
 800dccc:	0137      	lsls	r7, r6, #4
 800dcce:	9003      	str	r0, [sp, #12]
 800dcd0:	eba6 0286 	sub.w	r2, r6, r6, lsl #2
 800dcd4:	9400      	str	r4, [sp, #0]
 800dcd6:	9702      	str	r7, [sp, #8]
 800dcd8:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800dcdc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800dce0:	1d04      	adds	r4, r0, #4
 800dce2:	1d38      	adds	r0, r7, #4
 800dce4:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800dce8:	442c      	add	r4, r5
 800dcea:	ebc6 09c6 	rsb	r9, r6, r6, lsl #3
 800dcee:	9701      	str	r7, [sp, #4]
 800dcf0:	4428      	add	r0, r5
 800dcf2:	9d01      	ldr	r5, [sp, #4]
 800dcf4:	eb02 1746 	add.w	r7, r2, r6, lsl #5
 800dcf8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800dcfc:	00ed      	lsls	r5, r5, #3
 800dcfe:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800dd02:	9501      	str	r5, [sp, #4]
 800dd04:	ea4f 1508 	mov.w	r5, r8, lsl #4
 800dd08:	9504      	str	r5, [sp, #16]
 800dd0a:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 800dd0e:	9505      	str	r5, [sp, #20]
 800dd10:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800dd12:	ea4f 1845 	mov.w	r8, r5, lsl #5
 800dd16:	9d00      	ldr	r5, [sp, #0]
 800dd18:	edd1 6a00 	vldr	s13, [r1]
 800dd1c:	44d6      	add	lr, sl
 800dd1e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800dd22:	ed95 7a00 	vldr	s14, [r5]
 800dd26:	45f3      	cmp	fp, lr
 800dd28:	ed14 6a01 	vldr	s12, [r4, #-4]
 800dd2c:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800dd30:	edd6 2a00 	vldr	s5, [r6]
 800dd34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dd38:	edd7 3a00 	vldr	s7, [r7]
 800dd3c:	ed10 5a01 	vldr	s10, [r0, #-4]
 800dd40:	ee36 3a22 	vadd.f32	s6, s12, s5
 800dd44:	edd2 6a00 	vldr	s13, [r2]
 800dd48:	ee75 5a07 	vadd.f32	s11, s10, s14
 800dd4c:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800dd50:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800dd54:	ee72 4a25 	vadd.f32	s9, s4, s11
 800dd58:	ee73 3a04 	vadd.f32	s7, s6, s8
 800dd5c:	ee35 5a47 	vsub.f32	s10, s10, s14
 800dd60:	ee36 7a62 	vsub.f32	s14, s12, s5
 800dd64:	ee32 2a65 	vsub.f32	s4, s4, s11
 800dd68:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800dd6c:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800dd70:	ee37 6a66 	vsub.f32	s12, s14, s13
 800dd74:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800dd78:	ee33 3a44 	vsub.f32	s6, s6, s8
 800dd7c:	edc1 4a00 	vstr	s9, [r1]
 800dd80:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dd84:	ed97 4a01 	vldr	s8, [r7, #4]
 800dd88:	ee66 6a28 	vmul.f32	s13, s12, s17
 800dd8c:	edd4 5a00 	vldr	s11, [r4]
 800dd90:	ed96 6a01 	vldr	s12, [r6, #4]
 800dd94:	ee27 7a28 	vmul.f32	s14, s14, s17
 800dd98:	edd2 3a01 	vldr	s7, [r2, #4]
 800dd9c:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800dda0:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800dda4:	ed91 1a01 	vldr	s2, [r1, #4]
 800dda8:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800ddac:	edd5 0a01 	vldr	s1, [r5, #4]
 800ddb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ddb4:	eddc 6a00 	vldr	s13, [ip]
 800ddb8:	ee75 5a86 	vadd.f32	s11, s11, s12
 800ddbc:	ed90 6a00 	vldr	s12, [r0]
 800ddc0:	ee73 3a84 	vadd.f32	s7, s7, s8
 800ddc4:	ee74 1a80 	vadd.f32	s3, s9, s0
 800ddc8:	ee36 4a81 	vadd.f32	s8, s13, s2
 800ddcc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800ddd0:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800ddd4:	ee36 1a20 	vadd.f32	s2, s12, s1
 800ddd8:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800dddc:	ee36 6a60 	vsub.f32	s12, s12, s1
 800dde0:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800dde4:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800dde8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800ddec:	ee74 3a01 	vadd.f32	s7, s8, s2
 800ddf0:	ee34 4a41 	vsub.f32	s8, s8, s2
 800ddf4:	ee36 1a21 	vadd.f32	s2, s12, s3
 800ddf8:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800ddfc:	ee36 6a61 	vsub.f32	s12, s12, s3
 800de00:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800de04:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800de08:	ed8c 0a00 	vstr	s0, [ip]
 800de0c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800de10:	449c      	add	ip, r3
 800de12:	ee75 4a07 	vadd.f32	s9, s10, s14
 800de16:	edc1 3a01 	vstr	s7, [r1, #4]
 800de1a:	ee35 7a47 	vsub.f32	s14, s10, s14
 800de1e:	4419      	add	r1, r3
 800de20:	ee32 5a25 	vadd.f32	s10, s4, s11
 800de24:	ee72 5a65 	vsub.f32	s11, s4, s11
 800de28:	ee72 3a81 	vadd.f32	s7, s5, s2
 800de2c:	ed00 5a01 	vstr	s10, [r0, #-4]
 800de30:	ee34 2a43 	vsub.f32	s4, s8, s6
 800de34:	edc5 5a00 	vstr	s11, [r5]
 800de38:	ee37 5a86 	vadd.f32	s10, s15, s12
 800de3c:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800de40:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800de44:	ed80 2a00 	vstr	s4, [r0]
 800de48:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800de4c:	4418      	add	r0, r3
 800de4e:	ee33 4a04 	vadd.f32	s8, s6, s8
 800de52:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800de56:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800de5a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800de5e:	ed85 4a01 	vstr	s8, [r5, #4]
 800de62:	ed44 3a01 	vstr	s7, [r4, #-4]
 800de66:	441d      	add	r5, r3
 800de68:	edc7 2a00 	vstr	s5, [r7]
 800de6c:	ed86 5a00 	vstr	s10, [r6]
 800de70:	edc2 7a00 	vstr	s15, [r2]
 800de74:	edc4 5a00 	vstr	s11, [r4]
 800de78:	441c      	add	r4, r3
 800de7a:	edc7 4a01 	vstr	s9, [r7, #4]
 800de7e:	441f      	add	r7, r3
 800de80:	ed86 6a01 	vstr	s12, [r6, #4]
 800de84:	441e      	add	r6, r3
 800de86:	ed82 7a01 	vstr	s14, [r2, #4]
 800de8a:	441a      	add	r2, r3
 800de8c:	f63f af44 	bhi.w	800dd18 <arm_radix8_butterfly_f32+0x88>
 800de90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de92:	2a07      	cmp	r2, #7
 800de94:	f240 81b7 	bls.w	800e206 <arm_radix8_butterfly_f32+0x576>
 800de98:	9a03      	ldr	r2, [sp, #12]
 800de9a:	f108 0808 	add.w	r8, r8, #8
 800de9e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800dea0:	f109 0008 	add.w	r0, r9, #8
 800dea4:	3208      	adds	r2, #8
 800dea6:	9e01      	ldr	r6, [sp, #4]
 800dea8:	9d04      	ldr	r5, [sp, #16]
 800deaa:	4694      	mov	ip, r2
 800deac:	463a      	mov	r2, r7
 800deae:	3608      	adds	r6, #8
 800deb0:	9c05      	ldr	r4, [sp, #20]
 800deb2:	4442      	add	r2, r8
 800deb4:	3508      	adds	r5, #8
 800deb6:	3408      	adds	r4, #8
 800deb8:	9902      	ldr	r1, [sp, #8]
 800deba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800debc:	eb07 020c 	add.w	r2, r7, ip
 800dec0:	310c      	adds	r1, #12
 800dec2:	f04f 0800 	mov.w	r8, #0
 800dec6:	920a      	str	r2, [sp, #40]	@ 0x28
 800dec8:	19ba      	adds	r2, r7, r6
 800deca:	9209      	str	r2, [sp, #36]	@ 0x24
 800decc:	197a      	adds	r2, r7, r5
 800dece:	9208      	str	r2, [sp, #32]
 800ded0:	193a      	adds	r2, r7, r4
 800ded2:	9207      	str	r2, [sp, #28]
 800ded4:	183a      	adds	r2, r7, r0
 800ded6:	9206      	str	r2, [sp, #24]
 800ded8:	187a      	adds	r2, r7, r1
 800deda:	9204      	str	r2, [sp, #16]
 800dedc:	f107 020c 	add.w	r2, r7, #12
 800dee0:	9205      	str	r2, [sp, #20]
 800dee2:	2201      	movs	r2, #1
 800dee4:	9203      	str	r2, [sp, #12]
 800dee6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dee8:	f8dd c010 	ldr.w	ip, [sp, #16]
 800deec:	4490      	add	r8, r2
 800deee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800def0:	9f05      	ldr	r7, [sp, #20]
 800def2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800def6:	9e06      	ldr	r6, [sp, #24]
 800def8:	eba8 0e88 	sub.w	lr, r8, r8, lsl #2
 800defc:	9d07      	ldr	r5, [sp, #28]
 800defe:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800df02:	ed92 ea00 	vldr	s28, [r2]
 800df06:	9c08      	ldr	r4, [sp, #32]
 800df08:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800df0c:	edd1 da00 	vldr	s27, [r1]
 800df10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df12:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800df16:	ed92 da00 	vldr	s26, [r2]
 800df1a:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800df1e:	edd1 ca00 	vldr	s25, [r1]
 800df22:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800df26:	ed92 ca00 	vldr	s24, [r2]
 800df2a:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800df2e:	edd1 ba00 	vldr	s23, [r1]
 800df32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df34:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800df38:	ed92 ba00 	vldr	s22, [r2]
 800df3c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800df3e:	eb0e 09c8 	add.w	r9, lr, r8, lsl #3
 800df42:	910c      	str	r1, [sp, #48]	@ 0x30
 800df44:	9200      	str	r2, [sp, #0]
 800df46:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800df4a:	ed99 aa01 	vldr	s20, [r9, #4]
 800df4e:	edde aa01 	vldr	s21, [lr, #4]
 800df52:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800df56:	edd2 9a01 	vldr	s19, [r2, #4]
 800df5a:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800df5e:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800df62:	ed99 9a01 	vldr	s18, [r9, #4]
 800df66:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800df68:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800df6c:	ed92 8a01 	vldr	s16, [r2, #4]
 800df70:	edd9 7a01 	vldr	s15, [r9, #4]
 800df74:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800df78:	edcd 7a01 	vstr	s15, [sp, #4]
 800df7c:	edd2 7a01 	vldr	s15, [r2, #4]
 800df80:	9a00      	ldr	r2, [sp, #0]
 800df82:	edcd 7a02 	vstr	s15, [sp, #8]
 800df86:	e001      	b.n	800df8c <arm_radix8_butterfly_f32+0x2fc>
 800df88:	3f3504f3 	.word	0x3f3504f3
 800df8c:	ed92 7a00 	vldr	s14, [r2]
 800df90:	44d6      	add	lr, sl
 800df92:	ed17 1a01 	vldr	s2, [r7, #-4]
 800df96:	ed90 5a00 	vldr	s10, [r0]
 800df9a:	45f3      	cmp	fp, lr
 800df9c:	ed1c fa01 	vldr	s30, [ip, #-4]
 800dfa0:	ee31 3a07 	vadd.f32	s6, s2, s14
 800dfa4:	edd6 5a00 	vldr	s11, [r6]
 800dfa8:	ee31 1a47 	vsub.f32	s2, s2, s14
 800dfac:	edd4 7a00 	vldr	s15, [r4]
 800dfb0:	ed95 7a00 	vldr	s14, [r5]
 800dfb4:	ed91 4a00 	vldr	s8, [r1]
 800dfb8:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800dfbc:	ee77 6a25 	vadd.f32	s13, s14, s11
 800dfc0:	edd7 ea00 	vldr	s29, [r7]
 800dfc4:	ee74 fa05 	vadd.f32	s31, s8, s10
 800dfc8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800dfcc:	ee34 4a45 	vsub.f32	s8, s8, s10
 800dfd0:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800dfd4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800dfd8:	ee33 3a46 	vsub.f32	s6, s6, s12
 800dfdc:	ee31 6a85 	vadd.f32	s12, s3, s10
 800dfe0:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800dfe4:	ee34 fa07 	vadd.f32	s30, s8, s14
 800dfe8:	ed07 6a01 	vstr	s12, [r7, #-4]
 800dfec:	ee34 4a47 	vsub.f32	s8, s8, s14
 800dff0:	edd5 3a01 	vldr	s7, [r5, #4]
 800dff4:	ee7f fae6 	vsub.f32	s31, s31, s13
 800dff8:	ed90 7a01 	vldr	s14, [r0, #4]
 800dffc:	ee2f fa28 	vmul.f32	s30, s30, s17
 800e000:	edd1 5a01 	vldr	s11, [r1, #4]
 800e004:	ee24 4a28 	vmul.f32	s8, s8, s17
 800e008:	ed96 6a01 	vldr	s12, [r6, #4]
 800e00c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800e010:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800e014:	edd2 6a01 	vldr	s13, [r2, #4]
 800e018:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800e01c:	edd4 4a01 	vldr	s9, [r4, #4]
 800e020:	ee75 5a87 	vadd.f32	s11, s11, s14
 800e024:	ed9c 7a00 	vldr	s14, [ip]
 800e028:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800e02c:	ee33 6a86 	vadd.f32	s12, s7, s12
 800e030:	ee37 facf 	vsub.f32	s30, s15, s30
 800e034:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800e038:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800e03c:	ee7e eae6 	vsub.f32	s29, s29, s13
 800e040:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800e044:	ee77 6a24 	vadd.f32	s13, s14, s9
 800e048:	ee75 0a86 	vadd.f32	s1, s11, s12
 800e04c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e050:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800e054:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800e058:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800e05c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800e060:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800e064:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800e068:	ee77 4a22 	vadd.f32	s9, s14, s5
 800e06c:	ee7e eae7 	vsub.f32	s29, s29, s15
 800e070:	ee77 7a62 	vsub.f32	s15, s14, s5
 800e074:	ee71 2a04 	vadd.f32	s5, s2, s8
 800e078:	ee31 7a44 	vsub.f32	s14, s2, s8
 800e07c:	ee30 1a60 	vsub.f32	s2, s0, s1
 800e080:	ee73 1a06 	vadd.f32	s3, s6, s12
 800e084:	ee33 6a46 	vsub.f32	s12, s6, s12
 800e088:	ee33 3aef 	vsub.f32	s6, s7, s31
 800e08c:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800e090:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800e094:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800e098:	ee72 5a25 	vadd.f32	s11, s4, s11
 800e09c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800e0a0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800e0a4:	ee77 2a27 	vadd.f32	s5, s14, s15
 800e0a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0ac:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800e0b0:	ee2c fa85 	vmul.f32	s30, s25, s10
 800e0b4:	ee69 ea01 	vmul.f32	s29, s18, s2
 800e0b8:	ee29 5a05 	vmul.f32	s10, s18, s10
 800e0bc:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800e0c0:	ee6d faa1 	vmul.f32	s31, s27, s3
 800e0c4:	ee70 0a20 	vadd.f32	s1, s0, s1
 800e0c8:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800e0cc:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800e0d0:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800e0d4:	edc7 0a00 	vstr	s1, [r7]
 800e0d8:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800e0dc:	441f      	add	r7, r3
 800e0de:	ee2a faa3 	vmul.f32	s30, s21, s7
 800e0e2:	ee31 5a45 	vsub.f32	s10, s2, s10
 800e0e6:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800e0ea:	edc2 ea00 	vstr	s29, [r2]
 800e0ee:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800e0f2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e0f6:	ed82 5a01 	vstr	s10, [r2, #4]
 800e0fa:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800e0fe:	ed9d 5a02 	vldr	s10, [sp, #8]
 800e102:	edcd 3a00 	vstr	s7, [sp]
 800e106:	ee6b ea86 	vmul.f32	s29, s23, s12
 800e10a:	eddd 3a01 	vldr	s7, [sp, #4]
 800e10e:	ee6b fa24 	vmul.f32	s31, s22, s9
 800e112:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800e116:	ee65 4a24 	vmul.f32	s9, s10, s9
 800e11a:	ed8c 3a00 	vstr	s6, [ip]
 800e11e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800e122:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e126:	eddd 3a00 	vldr	s7, [sp]
 800e12a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800e12e:	441a      	add	r2, r3
 800e130:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800e134:	449c      	add	ip, r3
 800e136:	ee68 1a04 	vmul.f32	s3, s16, s8
 800e13a:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800e13e:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800e142:	ee29 faa7 	vmul.f32	s30, s19, s15
 800e146:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800e14a:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800e14e:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800e152:	ee68 2a22 	vmul.f32	s5, s16, s5
 800e156:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800e15a:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e15e:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e162:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800e166:	ee7e ea81 	vadd.f32	s29, s29, s2
 800e16a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800e16e:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800e172:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800e176:	edc4 ea00 	vstr	s29, [r4]
 800e17a:	ee30 0a21 	vadd.f32	s0, s0, s3
 800e17e:	ed84 6a01 	vstr	s12, [r4, #4]
 800e182:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e186:	edc1 0a00 	vstr	s1, [r1]
 800e18a:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800e18e:	edc1 3a01 	vstr	s7, [r1, #4]
 800e192:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e196:	ed86 5a00 	vstr	s10, [r6]
 800e19a:	edc6 4a01 	vstr	s9, [r6, #4]
 800e19e:	4419      	add	r1, r3
 800e1a0:	ed80 0a00 	vstr	s0, [r0]
 800e1a4:	441c      	add	r4, r3
 800e1a6:	edc0 2a01 	vstr	s5, [r0, #4]
 800e1aa:	441e      	add	r6, r3
 800e1ac:	ed85 3a00 	vstr	s6, [r5]
 800e1b0:	4418      	add	r0, r3
 800e1b2:	ed85 7a01 	vstr	s14, [r5, #4]
 800e1b6:	441d      	add	r5, r3
 800e1b8:	f63f aee8 	bhi.w	800df8c <arm_radix8_butterfly_f32+0x2fc>
 800e1bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1be:	9a03      	ldr	r2, [sp, #12]
 800e1c0:	3108      	adds	r1, #8
 800e1c2:	3201      	adds	r2, #1
 800e1c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e1c8:	9203      	str	r2, [sp, #12]
 800e1ca:	3108      	adds	r1, #8
 800e1cc:	910a      	str	r1, [sp, #40]	@ 0x28
 800e1ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e1d0:	3108      	adds	r1, #8
 800e1d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1d4:	9908      	ldr	r1, [sp, #32]
 800e1d6:	3108      	adds	r1, #8
 800e1d8:	9108      	str	r1, [sp, #32]
 800e1da:	9907      	ldr	r1, [sp, #28]
 800e1dc:	3108      	adds	r1, #8
 800e1de:	9107      	str	r1, [sp, #28]
 800e1e0:	9906      	ldr	r1, [sp, #24]
 800e1e2:	3108      	adds	r1, #8
 800e1e4:	9106      	str	r1, [sp, #24]
 800e1e6:	9905      	ldr	r1, [sp, #20]
 800e1e8:	3108      	adds	r1, #8
 800e1ea:	9105      	str	r1, [sp, #20]
 800e1ec:	9904      	ldr	r1, [sp, #16]
 800e1ee:	3108      	adds	r1, #8
 800e1f0:	9104      	str	r1, [sp, #16]
 800e1f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e1f4:	4291      	cmp	r1, r2
 800e1f6:	f47f ae76 	bne.w	800dee6 <arm_radix8_butterfly_f32+0x256>
 800e1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1fc:	468a      	mov	sl, r1
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	b29b      	uxth	r3, r3
 800e202:	930e      	str	r3, [sp, #56]	@ 0x38
 800e204:	e553      	b.n	800dcae <arm_radix8_butterfly_f32+0x1e>
 800e206:	b013      	add	sp, #76	@ 0x4c
 800e208:	ecbd 8b10 	vpop	{d8-d15}
 800e20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e210 <__cvt>:
 800e210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e214:	ec57 6b10 	vmov	r6, r7, d0
 800e218:	2f00      	cmp	r7, #0
 800e21a:	460c      	mov	r4, r1
 800e21c:	4619      	mov	r1, r3
 800e21e:	463b      	mov	r3, r7
 800e220:	bfb4      	ite	lt
 800e222:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e226:	2300      	movge	r3, #0
 800e228:	4691      	mov	r9, r2
 800e22a:	bfbf      	itttt	lt
 800e22c:	4632      	movlt	r2, r6
 800e22e:	461f      	movlt	r7, r3
 800e230:	232d      	movlt	r3, #45	@ 0x2d
 800e232:	4616      	movlt	r6, r2
 800e234:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e238:	700b      	strb	r3, [r1, #0]
 800e23a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e23c:	f023 0820 	bic.w	r8, r3, #32
 800e240:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e244:	d005      	beq.n	800e252 <__cvt+0x42>
 800e246:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e24a:	d100      	bne.n	800e24e <__cvt+0x3e>
 800e24c:	3401      	adds	r4, #1
 800e24e:	2102      	movs	r1, #2
 800e250:	e000      	b.n	800e254 <__cvt+0x44>
 800e252:	2103      	movs	r1, #3
 800e254:	ab03      	add	r3, sp, #12
 800e256:	4622      	mov	r2, r4
 800e258:	9301      	str	r3, [sp, #4]
 800e25a:	ab02      	add	r3, sp, #8
 800e25c:	ec47 6b10 	vmov	d0, r6, r7
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4653      	mov	r3, sl
 800e264:	f001 f890 	bl	800f388 <_dtoa_r>
 800e268:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e26c:	4605      	mov	r5, r0
 800e26e:	d119      	bne.n	800e2a4 <__cvt+0x94>
 800e270:	f019 0f01 	tst.w	r9, #1
 800e274:	d00e      	beq.n	800e294 <__cvt+0x84>
 800e276:	eb00 0904 	add.w	r9, r0, r4
 800e27a:	2200      	movs	r2, #0
 800e27c:	2300      	movs	r3, #0
 800e27e:	4630      	mov	r0, r6
 800e280:	4639      	mov	r1, r7
 800e282:	f7f2 fc25 	bl	8000ad0 <__aeabi_dcmpeq>
 800e286:	b108      	cbz	r0, 800e28c <__cvt+0x7c>
 800e288:	f8cd 900c 	str.w	r9, [sp, #12]
 800e28c:	2230      	movs	r2, #48	@ 0x30
 800e28e:	9b03      	ldr	r3, [sp, #12]
 800e290:	454b      	cmp	r3, r9
 800e292:	d31e      	bcc.n	800e2d2 <__cvt+0xc2>
 800e294:	9b03      	ldr	r3, [sp, #12]
 800e296:	4628      	mov	r0, r5
 800e298:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e29a:	1b5b      	subs	r3, r3, r5
 800e29c:	6013      	str	r3, [r2, #0]
 800e29e:	b004      	add	sp, #16
 800e2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e2a8:	eb00 0904 	add.w	r9, r0, r4
 800e2ac:	d1e5      	bne.n	800e27a <__cvt+0x6a>
 800e2ae:	7803      	ldrb	r3, [r0, #0]
 800e2b0:	2b30      	cmp	r3, #48	@ 0x30
 800e2b2:	d10a      	bne.n	800e2ca <__cvt+0xba>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	f7f2 fc08 	bl	8000ad0 <__aeabi_dcmpeq>
 800e2c0:	b918      	cbnz	r0, 800e2ca <__cvt+0xba>
 800e2c2:	f1c4 0401 	rsb	r4, r4, #1
 800e2c6:	f8ca 4000 	str.w	r4, [sl]
 800e2ca:	f8da 3000 	ldr.w	r3, [sl]
 800e2ce:	4499      	add	r9, r3
 800e2d0:	e7d3      	b.n	800e27a <__cvt+0x6a>
 800e2d2:	1c59      	adds	r1, r3, #1
 800e2d4:	9103      	str	r1, [sp, #12]
 800e2d6:	701a      	strb	r2, [r3, #0]
 800e2d8:	e7d9      	b.n	800e28e <__cvt+0x7e>

0800e2da <__exponent>:
 800e2da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2dc:	2900      	cmp	r1, #0
 800e2de:	7002      	strb	r2, [r0, #0]
 800e2e0:	bfba      	itte	lt
 800e2e2:	4249      	neglt	r1, r1
 800e2e4:	232d      	movlt	r3, #45	@ 0x2d
 800e2e6:	232b      	movge	r3, #43	@ 0x2b
 800e2e8:	2909      	cmp	r1, #9
 800e2ea:	7043      	strb	r3, [r0, #1]
 800e2ec:	dd28      	ble.n	800e340 <__exponent+0x66>
 800e2ee:	f10d 0307 	add.w	r3, sp, #7
 800e2f2:	270a      	movs	r7, #10
 800e2f4:	461d      	mov	r5, r3
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	fbb1 f6f7 	udiv	r6, r1, r7
 800e2fe:	fb07 1416 	mls	r4, r7, r6, r1
 800e302:	3430      	adds	r4, #48	@ 0x30
 800e304:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e308:	460c      	mov	r4, r1
 800e30a:	4631      	mov	r1, r6
 800e30c:	2c63      	cmp	r4, #99	@ 0x63
 800e30e:	dcf2      	bgt.n	800e2f6 <__exponent+0x1c>
 800e310:	3130      	adds	r1, #48	@ 0x30
 800e312:	1e94      	subs	r4, r2, #2
 800e314:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e318:	1c41      	adds	r1, r0, #1
 800e31a:	4623      	mov	r3, r4
 800e31c:	42ab      	cmp	r3, r5
 800e31e:	d30a      	bcc.n	800e336 <__exponent+0x5c>
 800e320:	f10d 0309 	add.w	r3, sp, #9
 800e324:	1a9b      	subs	r3, r3, r2
 800e326:	42ac      	cmp	r4, r5
 800e328:	bf88      	it	hi
 800e32a:	2300      	movhi	r3, #0
 800e32c:	3302      	adds	r3, #2
 800e32e:	4403      	add	r3, r0
 800e330:	1a18      	subs	r0, r3, r0
 800e332:	b003      	add	sp, #12
 800e334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e336:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e33a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e33e:	e7ed      	b.n	800e31c <__exponent+0x42>
 800e340:	2330      	movs	r3, #48	@ 0x30
 800e342:	3130      	adds	r1, #48	@ 0x30
 800e344:	7083      	strb	r3, [r0, #2]
 800e346:	1d03      	adds	r3, r0, #4
 800e348:	70c1      	strb	r1, [r0, #3]
 800e34a:	e7f1      	b.n	800e330 <__exponent+0x56>

0800e34c <_printf_float>:
 800e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e350:	b08d      	sub	sp, #52	@ 0x34
 800e352:	460c      	mov	r4, r1
 800e354:	4616      	mov	r6, r2
 800e356:	461f      	mov	r7, r3
 800e358:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e35c:	4605      	mov	r5, r0
 800e35e:	f000 feed 	bl	800f13c <_localeconv_r>
 800e362:	6803      	ldr	r3, [r0, #0]
 800e364:	4618      	mov	r0, r3
 800e366:	9304      	str	r3, [sp, #16]
 800e368:	f7f1 ff86 	bl	8000278 <strlen>
 800e36c:	2300      	movs	r3, #0
 800e36e:	9005      	str	r0, [sp, #20]
 800e370:	930a      	str	r3, [sp, #40]	@ 0x28
 800e372:	f8d8 3000 	ldr.w	r3, [r8]
 800e376:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e37a:	3307      	adds	r3, #7
 800e37c:	f8d4 b000 	ldr.w	fp, [r4]
 800e380:	f023 0307 	bic.w	r3, r3, #7
 800e384:	f103 0208 	add.w	r2, r3, #8
 800e388:	f8c8 2000 	str.w	r2, [r8]
 800e38c:	f04f 32ff 	mov.w	r2, #4294967295
 800e390:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e394:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e398:	f8cd 8018 	str.w	r8, [sp, #24]
 800e39c:	9307      	str	r3, [sp, #28]
 800e39e:	4b9d      	ldr	r3, [pc, #628]	@ (800e614 <_printf_float+0x2c8>)
 800e3a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e3a8:	f7f2 fbc4 	bl	8000b34 <__aeabi_dcmpun>
 800e3ac:	bb70      	cbnz	r0, 800e40c <_printf_float+0xc0>
 800e3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b2:	4b98      	ldr	r3, [pc, #608]	@ (800e614 <_printf_float+0x2c8>)
 800e3b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3b8:	f7f2 fb9e 	bl	8000af8 <__aeabi_dcmple>
 800e3bc:	bb30      	cbnz	r0, 800e40c <_printf_float+0xc0>
 800e3be:	2200      	movs	r2, #0
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	f7f2 fb8d 	bl	8000ae4 <__aeabi_dcmplt>
 800e3ca:	b110      	cbz	r0, 800e3d2 <_printf_float+0x86>
 800e3cc:	232d      	movs	r3, #45	@ 0x2d
 800e3ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3d2:	4a91      	ldr	r2, [pc, #580]	@ (800e618 <_printf_float+0x2cc>)
 800e3d4:	4b91      	ldr	r3, [pc, #580]	@ (800e61c <_printf_float+0x2d0>)
 800e3d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e3da:	bf8c      	ite	hi
 800e3dc:	4690      	movhi	r8, r2
 800e3de:	4698      	movls	r8, r3
 800e3e0:	2303      	movs	r3, #3
 800e3e2:	f04f 0900 	mov.w	r9, #0
 800e3e6:	6123      	str	r3, [r4, #16]
 800e3e8:	f02b 0304 	bic.w	r3, fp, #4
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	4633      	mov	r3, r6
 800e3f0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	9700      	str	r7, [sp, #0]
 800e3f8:	f000 f9d2 	bl	800e7a0 <_printf_common>
 800e3fc:	3001      	adds	r0, #1
 800e3fe:	f040 808d 	bne.w	800e51c <_printf_float+0x1d0>
 800e402:	f04f 30ff 	mov.w	r0, #4294967295
 800e406:	b00d      	add	sp, #52	@ 0x34
 800e408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40c:	4642      	mov	r2, r8
 800e40e:	464b      	mov	r3, r9
 800e410:	4640      	mov	r0, r8
 800e412:	4649      	mov	r1, r9
 800e414:	f7f2 fb8e 	bl	8000b34 <__aeabi_dcmpun>
 800e418:	b140      	cbz	r0, 800e42c <_printf_float+0xe0>
 800e41a:	464b      	mov	r3, r9
 800e41c:	4a80      	ldr	r2, [pc, #512]	@ (800e620 <_printf_float+0x2d4>)
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bfbc      	itt	lt
 800e422:	232d      	movlt	r3, #45	@ 0x2d
 800e424:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e428:	4b7e      	ldr	r3, [pc, #504]	@ (800e624 <_printf_float+0x2d8>)
 800e42a:	e7d4      	b.n	800e3d6 <_printf_float+0x8a>
 800e42c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e430:	6863      	ldr	r3, [r4, #4]
 800e432:	9206      	str	r2, [sp, #24]
 800e434:	1c5a      	adds	r2, r3, #1
 800e436:	d13b      	bne.n	800e4b0 <_printf_float+0x164>
 800e438:	2306      	movs	r3, #6
 800e43a:	6063      	str	r3, [r4, #4]
 800e43c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e440:	2300      	movs	r3, #0
 800e442:	4628      	mov	r0, r5
 800e444:	6022      	str	r2, [r4, #0]
 800e446:	9303      	str	r3, [sp, #12]
 800e448:	ab0a      	add	r3, sp, #40	@ 0x28
 800e44a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e44e:	ab09      	add	r3, sp, #36	@ 0x24
 800e450:	ec49 8b10 	vmov	d0, r8, r9
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e45a:	6861      	ldr	r1, [r4, #4]
 800e45c:	f7ff fed8 	bl	800e210 <__cvt>
 800e460:	9b06      	ldr	r3, [sp, #24]
 800e462:	4680      	mov	r8, r0
 800e464:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e466:	2b47      	cmp	r3, #71	@ 0x47
 800e468:	d129      	bne.n	800e4be <_printf_float+0x172>
 800e46a:	1cc8      	adds	r0, r1, #3
 800e46c:	db02      	blt.n	800e474 <_printf_float+0x128>
 800e46e:	6863      	ldr	r3, [r4, #4]
 800e470:	4299      	cmp	r1, r3
 800e472:	dd41      	ble.n	800e4f8 <_printf_float+0x1ac>
 800e474:	f1aa 0a02 	sub.w	sl, sl, #2
 800e478:	fa5f fa8a 	uxtb.w	sl, sl
 800e47c:	3901      	subs	r1, #1
 800e47e:	4652      	mov	r2, sl
 800e480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e484:	9109      	str	r1, [sp, #36]	@ 0x24
 800e486:	f7ff ff28 	bl	800e2da <__exponent>
 800e48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e48c:	4681      	mov	r9, r0
 800e48e:	1813      	adds	r3, r2, r0
 800e490:	2a01      	cmp	r2, #1
 800e492:	6123      	str	r3, [r4, #16]
 800e494:	dc02      	bgt.n	800e49c <_printf_float+0x150>
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	07d2      	lsls	r2, r2, #31
 800e49a:	d501      	bpl.n	800e4a0 <_printf_float+0x154>
 800e49c:	3301      	adds	r3, #1
 800e49e:	6123      	str	r3, [r4, #16]
 800e4a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d0a2      	beq.n	800e3ee <_printf_float+0xa2>
 800e4a8:	232d      	movs	r3, #45	@ 0x2d
 800e4aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4ae:	e79e      	b.n	800e3ee <_printf_float+0xa2>
 800e4b0:	9a06      	ldr	r2, [sp, #24]
 800e4b2:	2a47      	cmp	r2, #71	@ 0x47
 800e4b4:	d1c2      	bne.n	800e43c <_printf_float+0xf0>
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1c0      	bne.n	800e43c <_printf_float+0xf0>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e7bd      	b.n	800e43a <_printf_float+0xee>
 800e4be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4c2:	d9db      	bls.n	800e47c <_printf_float+0x130>
 800e4c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e4c8:	d118      	bne.n	800e4fc <_printf_float+0x1b0>
 800e4ca:	2900      	cmp	r1, #0
 800e4cc:	6863      	ldr	r3, [r4, #4]
 800e4ce:	dd0b      	ble.n	800e4e8 <_printf_float+0x19c>
 800e4d0:	6121      	str	r1, [r4, #16]
 800e4d2:	b913      	cbnz	r3, 800e4da <_printf_float+0x18e>
 800e4d4:	6822      	ldr	r2, [r4, #0]
 800e4d6:	07d0      	lsls	r0, r2, #31
 800e4d8:	d502      	bpl.n	800e4e0 <_printf_float+0x194>
 800e4da:	3301      	adds	r3, #1
 800e4dc:	440b      	add	r3, r1
 800e4de:	6123      	str	r3, [r4, #16]
 800e4e0:	f04f 0900 	mov.w	r9, #0
 800e4e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e4e6:	e7db      	b.n	800e4a0 <_printf_float+0x154>
 800e4e8:	b913      	cbnz	r3, 800e4f0 <_printf_float+0x1a4>
 800e4ea:	6822      	ldr	r2, [r4, #0]
 800e4ec:	07d2      	lsls	r2, r2, #31
 800e4ee:	d501      	bpl.n	800e4f4 <_printf_float+0x1a8>
 800e4f0:	3302      	adds	r3, #2
 800e4f2:	e7f4      	b.n	800e4de <_printf_float+0x192>
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e7f2      	b.n	800e4de <_printf_float+0x192>
 800e4f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4fe:	4299      	cmp	r1, r3
 800e500:	db05      	blt.n	800e50e <_printf_float+0x1c2>
 800e502:	6823      	ldr	r3, [r4, #0]
 800e504:	6121      	str	r1, [r4, #16]
 800e506:	07d8      	lsls	r0, r3, #31
 800e508:	d5ea      	bpl.n	800e4e0 <_printf_float+0x194>
 800e50a:	1c4b      	adds	r3, r1, #1
 800e50c:	e7e7      	b.n	800e4de <_printf_float+0x192>
 800e50e:	2900      	cmp	r1, #0
 800e510:	bfd4      	ite	le
 800e512:	f1c1 0202 	rsble	r2, r1, #2
 800e516:	2201      	movgt	r2, #1
 800e518:	4413      	add	r3, r2
 800e51a:	e7e0      	b.n	800e4de <_printf_float+0x192>
 800e51c:	6823      	ldr	r3, [r4, #0]
 800e51e:	055a      	lsls	r2, r3, #21
 800e520:	d407      	bmi.n	800e532 <_printf_float+0x1e6>
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	4642      	mov	r2, r8
 800e526:	4631      	mov	r1, r6
 800e528:	4628      	mov	r0, r5
 800e52a:	47b8      	blx	r7
 800e52c:	3001      	adds	r0, #1
 800e52e:	d12b      	bne.n	800e588 <_printf_float+0x23c>
 800e530:	e767      	b.n	800e402 <_printf_float+0xb6>
 800e532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e536:	f240 80dd 	bls.w	800e6f4 <_printf_float+0x3a8>
 800e53a:	2200      	movs	r2, #0
 800e53c:	2300      	movs	r3, #0
 800e53e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e542:	f7f2 fac5 	bl	8000ad0 <__aeabi_dcmpeq>
 800e546:	2800      	cmp	r0, #0
 800e548:	d033      	beq.n	800e5b2 <_printf_float+0x266>
 800e54a:	2301      	movs	r3, #1
 800e54c:	4a36      	ldr	r2, [pc, #216]	@ (800e628 <_printf_float+0x2dc>)
 800e54e:	4631      	mov	r1, r6
 800e550:	4628      	mov	r0, r5
 800e552:	47b8      	blx	r7
 800e554:	3001      	adds	r0, #1
 800e556:	f43f af54 	beq.w	800e402 <_printf_float+0xb6>
 800e55a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e55e:	4543      	cmp	r3, r8
 800e560:	db02      	blt.n	800e568 <_printf_float+0x21c>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	07d8      	lsls	r0, r3, #31
 800e566:	d50f      	bpl.n	800e588 <_printf_float+0x23c>
 800e568:	4631      	mov	r1, r6
 800e56a:	4628      	mov	r0, r5
 800e56c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e570:	47b8      	blx	r7
 800e572:	3001      	adds	r0, #1
 800e574:	f43f af45 	beq.w	800e402 <_printf_float+0xb6>
 800e578:	f04f 0900 	mov.w	r9, #0
 800e57c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e580:	f104 0a1a 	add.w	sl, r4, #26
 800e584:	45c8      	cmp	r8, r9
 800e586:	dc09      	bgt.n	800e59c <_printf_float+0x250>
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	079b      	lsls	r3, r3, #30
 800e58c:	f100 8103 	bmi.w	800e796 <_printf_float+0x44a>
 800e590:	68e0      	ldr	r0, [r4, #12]
 800e592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e594:	4298      	cmp	r0, r3
 800e596:	bfb8      	it	lt
 800e598:	4618      	movlt	r0, r3
 800e59a:	e734      	b.n	800e406 <_printf_float+0xba>
 800e59c:	2301      	movs	r3, #1
 800e59e:	4652      	mov	r2, sl
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	f43f af2b 	beq.w	800e402 <_printf_float+0xb6>
 800e5ac:	f109 0901 	add.w	r9, r9, #1
 800e5b0:	e7e8      	b.n	800e584 <_printf_float+0x238>
 800e5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dc39      	bgt.n	800e62c <_printf_float+0x2e0>
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e628 <_printf_float+0x2dc>)
 800e5bc:	4631      	mov	r1, r6
 800e5be:	4628      	mov	r0, r5
 800e5c0:	47b8      	blx	r7
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	f43f af1d 	beq.w	800e402 <_printf_float+0xb6>
 800e5c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e5cc:	ea59 0303 	orrs.w	r3, r9, r3
 800e5d0:	d102      	bne.n	800e5d8 <_printf_float+0x28c>
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	07d9      	lsls	r1, r3, #31
 800e5d6:	d5d7      	bpl.n	800e588 <_printf_float+0x23c>
 800e5d8:	4631      	mov	r1, r6
 800e5da:	4628      	mov	r0, r5
 800e5dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5e0:	47b8      	blx	r7
 800e5e2:	3001      	adds	r0, #1
 800e5e4:	f43f af0d 	beq.w	800e402 <_printf_float+0xb6>
 800e5e8:	f04f 0a00 	mov.w	sl, #0
 800e5ec:	f104 0b1a 	add.w	fp, r4, #26
 800e5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f2:	425b      	negs	r3, r3
 800e5f4:	4553      	cmp	r3, sl
 800e5f6:	dc01      	bgt.n	800e5fc <_printf_float+0x2b0>
 800e5f8:	464b      	mov	r3, r9
 800e5fa:	e793      	b.n	800e524 <_printf_float+0x1d8>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	465a      	mov	r2, fp
 800e600:	4631      	mov	r1, r6
 800e602:	4628      	mov	r0, r5
 800e604:	47b8      	blx	r7
 800e606:	3001      	adds	r0, #1
 800e608:	f43f aefb 	beq.w	800e402 <_printf_float+0xb6>
 800e60c:	f10a 0a01 	add.w	sl, sl, #1
 800e610:	e7ee      	b.n	800e5f0 <_printf_float+0x2a4>
 800e612:	bf00      	nop
 800e614:	7fefffff 	.word	0x7fefffff
 800e618:	08030218 	.word	0x08030218
 800e61c:	08030214 	.word	0x08030214
 800e620:	08030220 	.word	0x08030220
 800e624:	0803021c 	.word	0x0803021c
 800e628:	08030224 	.word	0x08030224
 800e62c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e62e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e632:	4553      	cmp	r3, sl
 800e634:	bfa8      	it	ge
 800e636:	4653      	movge	r3, sl
 800e638:	2b00      	cmp	r3, #0
 800e63a:	4699      	mov	r9, r3
 800e63c:	dc36      	bgt.n	800e6ac <_printf_float+0x360>
 800e63e:	f04f 0b00 	mov.w	fp, #0
 800e642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e646:	f104 021a 	add.w	r2, r4, #26
 800e64a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e64c:	9306      	str	r3, [sp, #24]
 800e64e:	eba3 0309 	sub.w	r3, r3, r9
 800e652:	455b      	cmp	r3, fp
 800e654:	dc31      	bgt.n	800e6ba <_printf_float+0x36e>
 800e656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e658:	459a      	cmp	sl, r3
 800e65a:	dc3a      	bgt.n	800e6d2 <_printf_float+0x386>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	07da      	lsls	r2, r3, #31
 800e660:	d437      	bmi.n	800e6d2 <_printf_float+0x386>
 800e662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e664:	ebaa 0903 	sub.w	r9, sl, r3
 800e668:	9b06      	ldr	r3, [sp, #24]
 800e66a:	ebaa 0303 	sub.w	r3, sl, r3
 800e66e:	4599      	cmp	r9, r3
 800e670:	bfa8      	it	ge
 800e672:	4699      	movge	r9, r3
 800e674:	f1b9 0f00 	cmp.w	r9, #0
 800e678:	dc33      	bgt.n	800e6e2 <_printf_float+0x396>
 800e67a:	f04f 0800 	mov.w	r8, #0
 800e67e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e682:	f104 0b1a 	add.w	fp, r4, #26
 800e686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e688:	ebaa 0303 	sub.w	r3, sl, r3
 800e68c:	eba3 0309 	sub.w	r3, r3, r9
 800e690:	4543      	cmp	r3, r8
 800e692:	f77f af79 	ble.w	800e588 <_printf_float+0x23c>
 800e696:	2301      	movs	r3, #1
 800e698:	465a      	mov	r2, fp
 800e69a:	4631      	mov	r1, r6
 800e69c:	4628      	mov	r0, r5
 800e69e:	47b8      	blx	r7
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	f43f aeae 	beq.w	800e402 <_printf_float+0xb6>
 800e6a6:	f108 0801 	add.w	r8, r8, #1
 800e6aa:	e7ec      	b.n	800e686 <_printf_float+0x33a>
 800e6ac:	4642      	mov	r2, r8
 800e6ae:	4631      	mov	r1, r6
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	47b8      	blx	r7
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	d1c2      	bne.n	800e63e <_printf_float+0x2f2>
 800e6b8:	e6a3      	b.n	800e402 <_printf_float+0xb6>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	4631      	mov	r1, r6
 800e6be:	4628      	mov	r0, r5
 800e6c0:	9206      	str	r2, [sp, #24]
 800e6c2:	47b8      	blx	r7
 800e6c4:	3001      	adds	r0, #1
 800e6c6:	f43f ae9c 	beq.w	800e402 <_printf_float+0xb6>
 800e6ca:	f10b 0b01 	add.w	fp, fp, #1
 800e6ce:	9a06      	ldr	r2, [sp, #24]
 800e6d0:	e7bb      	b.n	800e64a <_printf_float+0x2fe>
 800e6d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6d6:	4631      	mov	r1, r6
 800e6d8:	4628      	mov	r0, r5
 800e6da:	47b8      	blx	r7
 800e6dc:	3001      	adds	r0, #1
 800e6de:	d1c0      	bne.n	800e662 <_printf_float+0x316>
 800e6e0:	e68f      	b.n	800e402 <_printf_float+0xb6>
 800e6e2:	9a06      	ldr	r2, [sp, #24]
 800e6e4:	464b      	mov	r3, r9
 800e6e6:	4631      	mov	r1, r6
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	4442      	add	r2, r8
 800e6ec:	47b8      	blx	r7
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	d1c3      	bne.n	800e67a <_printf_float+0x32e>
 800e6f2:	e686      	b.n	800e402 <_printf_float+0xb6>
 800e6f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e6f8:	f1ba 0f01 	cmp.w	sl, #1
 800e6fc:	dc01      	bgt.n	800e702 <_printf_float+0x3b6>
 800e6fe:	07db      	lsls	r3, r3, #31
 800e700:	d536      	bpl.n	800e770 <_printf_float+0x424>
 800e702:	2301      	movs	r3, #1
 800e704:	4642      	mov	r2, r8
 800e706:	4631      	mov	r1, r6
 800e708:	4628      	mov	r0, r5
 800e70a:	47b8      	blx	r7
 800e70c:	3001      	adds	r0, #1
 800e70e:	f43f ae78 	beq.w	800e402 <_printf_float+0xb6>
 800e712:	4631      	mov	r1, r6
 800e714:	4628      	mov	r0, r5
 800e716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e71a:	47b8      	blx	r7
 800e71c:	3001      	adds	r0, #1
 800e71e:	f43f ae70 	beq.w	800e402 <_printf_float+0xb6>
 800e722:	2200      	movs	r2, #0
 800e724:	2300      	movs	r3, #0
 800e726:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e72a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e72e:	f7f2 f9cf 	bl	8000ad0 <__aeabi_dcmpeq>
 800e732:	b9c0      	cbnz	r0, 800e766 <_printf_float+0x41a>
 800e734:	4653      	mov	r3, sl
 800e736:	f108 0201 	add.w	r2, r8, #1
 800e73a:	4631      	mov	r1, r6
 800e73c:	4628      	mov	r0, r5
 800e73e:	47b8      	blx	r7
 800e740:	3001      	adds	r0, #1
 800e742:	d10c      	bne.n	800e75e <_printf_float+0x412>
 800e744:	e65d      	b.n	800e402 <_printf_float+0xb6>
 800e746:	2301      	movs	r3, #1
 800e748:	465a      	mov	r2, fp
 800e74a:	4631      	mov	r1, r6
 800e74c:	4628      	mov	r0, r5
 800e74e:	47b8      	blx	r7
 800e750:	3001      	adds	r0, #1
 800e752:	f43f ae56 	beq.w	800e402 <_printf_float+0xb6>
 800e756:	f108 0801 	add.w	r8, r8, #1
 800e75a:	45d0      	cmp	r8, sl
 800e75c:	dbf3      	blt.n	800e746 <_printf_float+0x3fa>
 800e75e:	464b      	mov	r3, r9
 800e760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e764:	e6df      	b.n	800e526 <_printf_float+0x1da>
 800e766:	f04f 0800 	mov.w	r8, #0
 800e76a:	f104 0b1a 	add.w	fp, r4, #26
 800e76e:	e7f4      	b.n	800e75a <_printf_float+0x40e>
 800e770:	2301      	movs	r3, #1
 800e772:	4642      	mov	r2, r8
 800e774:	e7e1      	b.n	800e73a <_printf_float+0x3ee>
 800e776:	2301      	movs	r3, #1
 800e778:	464a      	mov	r2, r9
 800e77a:	4631      	mov	r1, r6
 800e77c:	4628      	mov	r0, r5
 800e77e:	47b8      	blx	r7
 800e780:	3001      	adds	r0, #1
 800e782:	f43f ae3e 	beq.w	800e402 <_printf_float+0xb6>
 800e786:	f108 0801 	add.w	r8, r8, #1
 800e78a:	68e3      	ldr	r3, [r4, #12]
 800e78c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e78e:	1a5b      	subs	r3, r3, r1
 800e790:	4543      	cmp	r3, r8
 800e792:	dcf0      	bgt.n	800e776 <_printf_float+0x42a>
 800e794:	e6fc      	b.n	800e590 <_printf_float+0x244>
 800e796:	f04f 0800 	mov.w	r8, #0
 800e79a:	f104 0919 	add.w	r9, r4, #25
 800e79e:	e7f4      	b.n	800e78a <_printf_float+0x43e>

0800e7a0 <_printf_common>:
 800e7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a4:	4616      	mov	r6, r2
 800e7a6:	4698      	mov	r8, r3
 800e7a8:	688a      	ldr	r2, [r1, #8]
 800e7aa:	4607      	mov	r7, r0
 800e7ac:	690b      	ldr	r3, [r1, #16]
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	bfb8      	it	lt
 800e7b8:	4613      	movlt	r3, r2
 800e7ba:	6033      	str	r3, [r6, #0]
 800e7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7c0:	b10a      	cbz	r2, 800e7c6 <_printf_common+0x26>
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	6033      	str	r3, [r6, #0]
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	0699      	lsls	r1, r3, #26
 800e7ca:	bf42      	ittt	mi
 800e7cc:	6833      	ldrmi	r3, [r6, #0]
 800e7ce:	3302      	addmi	r3, #2
 800e7d0:	6033      	strmi	r3, [r6, #0]
 800e7d2:	6825      	ldr	r5, [r4, #0]
 800e7d4:	f015 0506 	ands.w	r5, r5, #6
 800e7d8:	d106      	bne.n	800e7e8 <_printf_common+0x48>
 800e7da:	f104 0a19 	add.w	sl, r4, #25
 800e7de:	68e3      	ldr	r3, [r4, #12]
 800e7e0:	6832      	ldr	r2, [r6, #0]
 800e7e2:	1a9b      	subs	r3, r3, r2
 800e7e4:	42ab      	cmp	r3, r5
 800e7e6:	dc2b      	bgt.n	800e840 <_printf_common+0xa0>
 800e7e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e7ec:	6822      	ldr	r2, [r4, #0]
 800e7ee:	3b00      	subs	r3, #0
 800e7f0:	bf18      	it	ne
 800e7f2:	2301      	movne	r3, #1
 800e7f4:	0692      	lsls	r2, r2, #26
 800e7f6:	d430      	bmi.n	800e85a <_printf_common+0xba>
 800e7f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7fc:	4641      	mov	r1, r8
 800e7fe:	4638      	mov	r0, r7
 800e800:	47c8      	blx	r9
 800e802:	3001      	adds	r0, #1
 800e804:	d023      	beq.n	800e84e <_printf_common+0xae>
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	341a      	adds	r4, #26
 800e80a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e80e:	f003 0306 	and.w	r3, r3, #6
 800e812:	2b04      	cmp	r3, #4
 800e814:	bf0a      	itet	eq
 800e816:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e81a:	2500      	movne	r5, #0
 800e81c:	6833      	ldreq	r3, [r6, #0]
 800e81e:	f04f 0600 	mov.w	r6, #0
 800e822:	bf08      	it	eq
 800e824:	1aed      	subeq	r5, r5, r3
 800e826:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e82a:	bf08      	it	eq
 800e82c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e830:	4293      	cmp	r3, r2
 800e832:	bfc4      	itt	gt
 800e834:	1a9b      	subgt	r3, r3, r2
 800e836:	18ed      	addgt	r5, r5, r3
 800e838:	42b5      	cmp	r5, r6
 800e83a:	d11a      	bne.n	800e872 <_printf_common+0xd2>
 800e83c:	2000      	movs	r0, #0
 800e83e:	e008      	b.n	800e852 <_printf_common+0xb2>
 800e840:	2301      	movs	r3, #1
 800e842:	4652      	mov	r2, sl
 800e844:	4641      	mov	r1, r8
 800e846:	4638      	mov	r0, r7
 800e848:	47c8      	blx	r9
 800e84a:	3001      	adds	r0, #1
 800e84c:	d103      	bne.n	800e856 <_printf_common+0xb6>
 800e84e:	f04f 30ff 	mov.w	r0, #4294967295
 800e852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e856:	3501      	adds	r5, #1
 800e858:	e7c1      	b.n	800e7de <_printf_common+0x3e>
 800e85a:	18e1      	adds	r1, r4, r3
 800e85c:	1c5a      	adds	r2, r3, #1
 800e85e:	2030      	movs	r0, #48	@ 0x30
 800e860:	3302      	adds	r3, #2
 800e862:	4422      	add	r2, r4
 800e864:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e868:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e86c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e870:	e7c2      	b.n	800e7f8 <_printf_common+0x58>
 800e872:	2301      	movs	r3, #1
 800e874:	4622      	mov	r2, r4
 800e876:	4641      	mov	r1, r8
 800e878:	4638      	mov	r0, r7
 800e87a:	47c8      	blx	r9
 800e87c:	3001      	adds	r0, #1
 800e87e:	d0e6      	beq.n	800e84e <_printf_common+0xae>
 800e880:	3601      	adds	r6, #1
 800e882:	e7d9      	b.n	800e838 <_printf_common+0x98>

0800e884 <_printf_i>:
 800e884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e888:	7e0f      	ldrb	r7, [r1, #24]
 800e88a:	4691      	mov	r9, r2
 800e88c:	4680      	mov	r8, r0
 800e88e:	460c      	mov	r4, r1
 800e890:	2f78      	cmp	r7, #120	@ 0x78
 800e892:	469a      	mov	sl, r3
 800e894:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e89a:	d807      	bhi.n	800e8ac <_printf_i+0x28>
 800e89c:	2f62      	cmp	r7, #98	@ 0x62
 800e89e:	d80a      	bhi.n	800e8b6 <_printf_i+0x32>
 800e8a0:	2f00      	cmp	r7, #0
 800e8a2:	f000 80d1 	beq.w	800ea48 <_printf_i+0x1c4>
 800e8a6:	2f58      	cmp	r7, #88	@ 0x58
 800e8a8:	f000 80b8 	beq.w	800ea1c <_printf_i+0x198>
 800e8ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8b4:	e03a      	b.n	800e92c <_printf_i+0xa8>
 800e8b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8ba:	2b15      	cmp	r3, #21
 800e8bc:	d8f6      	bhi.n	800e8ac <_printf_i+0x28>
 800e8be:	a101      	add	r1, pc, #4	@ (adr r1, 800e8c4 <_printf_i+0x40>)
 800e8c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8c4:	0800e91d 	.word	0x0800e91d
 800e8c8:	0800e931 	.word	0x0800e931
 800e8cc:	0800e8ad 	.word	0x0800e8ad
 800e8d0:	0800e8ad 	.word	0x0800e8ad
 800e8d4:	0800e8ad 	.word	0x0800e8ad
 800e8d8:	0800e8ad 	.word	0x0800e8ad
 800e8dc:	0800e931 	.word	0x0800e931
 800e8e0:	0800e8ad 	.word	0x0800e8ad
 800e8e4:	0800e8ad 	.word	0x0800e8ad
 800e8e8:	0800e8ad 	.word	0x0800e8ad
 800e8ec:	0800e8ad 	.word	0x0800e8ad
 800e8f0:	0800ea2f 	.word	0x0800ea2f
 800e8f4:	0800e95b 	.word	0x0800e95b
 800e8f8:	0800e9e9 	.word	0x0800e9e9
 800e8fc:	0800e8ad 	.word	0x0800e8ad
 800e900:	0800e8ad 	.word	0x0800e8ad
 800e904:	0800ea51 	.word	0x0800ea51
 800e908:	0800e8ad 	.word	0x0800e8ad
 800e90c:	0800e95b 	.word	0x0800e95b
 800e910:	0800e8ad 	.word	0x0800e8ad
 800e914:	0800e8ad 	.word	0x0800e8ad
 800e918:	0800e9f1 	.word	0x0800e9f1
 800e91c:	6833      	ldr	r3, [r6, #0]
 800e91e:	1d1a      	adds	r2, r3, #4
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6032      	str	r2, [r6, #0]
 800e924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e92c:	2301      	movs	r3, #1
 800e92e:	e09c      	b.n	800ea6a <_printf_i+0x1e6>
 800e930:	6833      	ldr	r3, [r6, #0]
 800e932:	6820      	ldr	r0, [r4, #0]
 800e934:	1d19      	adds	r1, r3, #4
 800e936:	6031      	str	r1, [r6, #0]
 800e938:	0606      	lsls	r6, r0, #24
 800e93a:	d501      	bpl.n	800e940 <_printf_i+0xbc>
 800e93c:	681d      	ldr	r5, [r3, #0]
 800e93e:	e003      	b.n	800e948 <_printf_i+0xc4>
 800e940:	0645      	lsls	r5, r0, #25
 800e942:	d5fb      	bpl.n	800e93c <_printf_i+0xb8>
 800e944:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e948:	2d00      	cmp	r5, #0
 800e94a:	da03      	bge.n	800e954 <_printf_i+0xd0>
 800e94c:	232d      	movs	r3, #45	@ 0x2d
 800e94e:	426d      	negs	r5, r5
 800e950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e954:	4858      	ldr	r0, [pc, #352]	@ (800eab8 <_printf_i+0x234>)
 800e956:	230a      	movs	r3, #10
 800e958:	e011      	b.n	800e97e <_printf_i+0xfa>
 800e95a:	6821      	ldr	r1, [r4, #0]
 800e95c:	6833      	ldr	r3, [r6, #0]
 800e95e:	0608      	lsls	r0, r1, #24
 800e960:	f853 5b04 	ldr.w	r5, [r3], #4
 800e964:	d402      	bmi.n	800e96c <_printf_i+0xe8>
 800e966:	0649      	lsls	r1, r1, #25
 800e968:	bf48      	it	mi
 800e96a:	b2ad      	uxthmi	r5, r5
 800e96c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e96e:	6033      	str	r3, [r6, #0]
 800e970:	4851      	ldr	r0, [pc, #324]	@ (800eab8 <_printf_i+0x234>)
 800e972:	bf14      	ite	ne
 800e974:	230a      	movne	r3, #10
 800e976:	2308      	moveq	r3, #8
 800e978:	2100      	movs	r1, #0
 800e97a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e97e:	6866      	ldr	r6, [r4, #4]
 800e980:	2e00      	cmp	r6, #0
 800e982:	60a6      	str	r6, [r4, #8]
 800e984:	db05      	blt.n	800e992 <_printf_i+0x10e>
 800e986:	6821      	ldr	r1, [r4, #0]
 800e988:	432e      	orrs	r6, r5
 800e98a:	f021 0104 	bic.w	r1, r1, #4
 800e98e:	6021      	str	r1, [r4, #0]
 800e990:	d04b      	beq.n	800ea2a <_printf_i+0x1a6>
 800e992:	4616      	mov	r6, r2
 800e994:	fbb5 f1f3 	udiv	r1, r5, r3
 800e998:	fb03 5711 	mls	r7, r3, r1, r5
 800e99c:	5dc7      	ldrb	r7, [r0, r7]
 800e99e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9a2:	462f      	mov	r7, r5
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	42bb      	cmp	r3, r7
 800e9a8:	d9f4      	bls.n	800e994 <_printf_i+0x110>
 800e9aa:	2b08      	cmp	r3, #8
 800e9ac:	d10b      	bne.n	800e9c6 <_printf_i+0x142>
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	07df      	lsls	r7, r3, #31
 800e9b2:	d508      	bpl.n	800e9c6 <_printf_i+0x142>
 800e9b4:	6923      	ldr	r3, [r4, #16]
 800e9b6:	6861      	ldr	r1, [r4, #4]
 800e9b8:	4299      	cmp	r1, r3
 800e9ba:	bfde      	ittt	le
 800e9bc:	2330      	movle	r3, #48	@ 0x30
 800e9be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9c6:	1b92      	subs	r2, r2, r6
 800e9c8:	6122      	str	r2, [r4, #16]
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	aa03      	add	r2, sp, #12
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	f8cd a000 	str.w	sl, [sp]
 800e9d6:	f7ff fee3 	bl	800e7a0 <_printf_common>
 800e9da:	3001      	adds	r0, #1
 800e9dc:	d14a      	bne.n	800ea74 <_printf_i+0x1f0>
 800e9de:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e2:	b004      	add	sp, #16
 800e9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e8:	6823      	ldr	r3, [r4, #0]
 800e9ea:	f043 0320 	orr.w	r3, r3, #32
 800e9ee:	6023      	str	r3, [r4, #0]
 800e9f0:	2778      	movs	r7, #120	@ 0x78
 800e9f2:	4832      	ldr	r0, [pc, #200]	@ (800eabc <_printf_i+0x238>)
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e9fa:	061f      	lsls	r7, r3, #24
 800e9fc:	6831      	ldr	r1, [r6, #0]
 800e9fe:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea02:	d402      	bmi.n	800ea0a <_printf_i+0x186>
 800ea04:	065f      	lsls	r7, r3, #25
 800ea06:	bf48      	it	mi
 800ea08:	b2ad      	uxthmi	r5, r5
 800ea0a:	6031      	str	r1, [r6, #0]
 800ea0c:	07d9      	lsls	r1, r3, #31
 800ea0e:	bf44      	itt	mi
 800ea10:	f043 0320 	orrmi.w	r3, r3, #32
 800ea14:	6023      	strmi	r3, [r4, #0]
 800ea16:	b11d      	cbz	r5, 800ea20 <_printf_i+0x19c>
 800ea18:	2310      	movs	r3, #16
 800ea1a:	e7ad      	b.n	800e978 <_printf_i+0xf4>
 800ea1c:	4826      	ldr	r0, [pc, #152]	@ (800eab8 <_printf_i+0x234>)
 800ea1e:	e7e9      	b.n	800e9f4 <_printf_i+0x170>
 800ea20:	6823      	ldr	r3, [r4, #0]
 800ea22:	f023 0320 	bic.w	r3, r3, #32
 800ea26:	6023      	str	r3, [r4, #0]
 800ea28:	e7f6      	b.n	800ea18 <_printf_i+0x194>
 800ea2a:	4616      	mov	r6, r2
 800ea2c:	e7bd      	b.n	800e9aa <_printf_i+0x126>
 800ea2e:	6833      	ldr	r3, [r6, #0]
 800ea30:	6825      	ldr	r5, [r4, #0]
 800ea32:	1d18      	adds	r0, r3, #4
 800ea34:	6961      	ldr	r1, [r4, #20]
 800ea36:	6030      	str	r0, [r6, #0]
 800ea38:	062e      	lsls	r6, r5, #24
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	d501      	bpl.n	800ea42 <_printf_i+0x1be>
 800ea3e:	6019      	str	r1, [r3, #0]
 800ea40:	e002      	b.n	800ea48 <_printf_i+0x1c4>
 800ea42:	0668      	lsls	r0, r5, #25
 800ea44:	d5fb      	bpl.n	800ea3e <_printf_i+0x1ba>
 800ea46:	8019      	strh	r1, [r3, #0]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	4616      	mov	r6, r2
 800ea4c:	6123      	str	r3, [r4, #16]
 800ea4e:	e7bc      	b.n	800e9ca <_printf_i+0x146>
 800ea50:	6833      	ldr	r3, [r6, #0]
 800ea52:	2100      	movs	r1, #0
 800ea54:	1d1a      	adds	r2, r3, #4
 800ea56:	6032      	str	r2, [r6, #0]
 800ea58:	681e      	ldr	r6, [r3, #0]
 800ea5a:	6862      	ldr	r2, [r4, #4]
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f000 fbe4 	bl	800f22a <memchr>
 800ea62:	b108      	cbz	r0, 800ea68 <_printf_i+0x1e4>
 800ea64:	1b80      	subs	r0, r0, r6
 800ea66:	6060      	str	r0, [r4, #4]
 800ea68:	6863      	ldr	r3, [r4, #4]
 800ea6a:	6123      	str	r3, [r4, #16]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea72:	e7aa      	b.n	800e9ca <_printf_i+0x146>
 800ea74:	6923      	ldr	r3, [r4, #16]
 800ea76:	4632      	mov	r2, r6
 800ea78:	4649      	mov	r1, r9
 800ea7a:	4640      	mov	r0, r8
 800ea7c:	47d0      	blx	sl
 800ea7e:	3001      	adds	r0, #1
 800ea80:	d0ad      	beq.n	800e9de <_printf_i+0x15a>
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	079b      	lsls	r3, r3, #30
 800ea86:	d413      	bmi.n	800eab0 <_printf_i+0x22c>
 800ea88:	68e0      	ldr	r0, [r4, #12]
 800ea8a:	9b03      	ldr	r3, [sp, #12]
 800ea8c:	4298      	cmp	r0, r3
 800ea8e:	bfb8      	it	lt
 800ea90:	4618      	movlt	r0, r3
 800ea92:	e7a6      	b.n	800e9e2 <_printf_i+0x15e>
 800ea94:	2301      	movs	r3, #1
 800ea96:	4632      	mov	r2, r6
 800ea98:	4649      	mov	r1, r9
 800ea9a:	4640      	mov	r0, r8
 800ea9c:	47d0      	blx	sl
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	d09d      	beq.n	800e9de <_printf_i+0x15a>
 800eaa2:	3501      	adds	r5, #1
 800eaa4:	68e3      	ldr	r3, [r4, #12]
 800eaa6:	9903      	ldr	r1, [sp, #12]
 800eaa8:	1a5b      	subs	r3, r3, r1
 800eaaa:	42ab      	cmp	r3, r5
 800eaac:	dcf2      	bgt.n	800ea94 <_printf_i+0x210>
 800eaae:	e7eb      	b.n	800ea88 <_printf_i+0x204>
 800eab0:	2500      	movs	r5, #0
 800eab2:	f104 0619 	add.w	r6, r4, #25
 800eab6:	e7f5      	b.n	800eaa4 <_printf_i+0x220>
 800eab8:	08030226 	.word	0x08030226
 800eabc:	08030237 	.word	0x08030237

0800eac0 <_scanf_float>:
 800eac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	b087      	sub	sp, #28
 800eac6:	4691      	mov	r9, r2
 800eac8:	4680      	mov	r8, r0
 800eaca:	460c      	mov	r4, r1
 800eacc:	9303      	str	r3, [sp, #12]
 800eace:	688b      	ldr	r3, [r1, #8]
 800ead0:	1e5a      	subs	r2, r3, #1
 800ead2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ead6:	460a      	mov	r2, r1
 800ead8:	bf89      	itett	hi
 800eada:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800eade:	f04f 0b00 	movls.w	fp, #0
 800eae2:	eb03 0b05 	addhi.w	fp, r3, r5
 800eae6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800eaea:	f04f 0500 	mov.w	r5, #0
 800eaee:	bf88      	it	hi
 800eaf0:	608b      	strhi	r3, [r1, #8]
 800eaf2:	680b      	ldr	r3, [r1, #0]
 800eaf4:	46aa      	mov	sl, r5
 800eaf6:	462f      	mov	r7, r5
 800eaf8:	9502      	str	r5, [sp, #8]
 800eafa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800eafe:	f842 3b1c 	str.w	r3, [r2], #28
 800eb02:	4616      	mov	r6, r2
 800eb04:	9201      	str	r2, [sp, #4]
 800eb06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eb0a:	68a2      	ldr	r2, [r4, #8]
 800eb0c:	b15a      	cbz	r2, 800eb26 <_scanf_float+0x66>
 800eb0e:	f8d9 3000 	ldr.w	r3, [r9]
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2b4e      	cmp	r3, #78	@ 0x4e
 800eb16:	d863      	bhi.n	800ebe0 <_scanf_float+0x120>
 800eb18:	2b40      	cmp	r3, #64	@ 0x40
 800eb1a:	d83b      	bhi.n	800eb94 <_scanf_float+0xd4>
 800eb1c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800eb20:	b2c8      	uxtb	r0, r1
 800eb22:	280e      	cmp	r0, #14
 800eb24:	d939      	bls.n	800eb9a <_scanf_float+0xda>
 800eb26:	b11f      	cbz	r7, 800eb30 <_scanf_float+0x70>
 800eb28:	6823      	ldr	r3, [r4, #0]
 800eb2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb2e:	6023      	str	r3, [r4, #0]
 800eb30:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb34:	f1ba 0f01 	cmp.w	sl, #1
 800eb38:	f200 8115 	bhi.w	800ed66 <_scanf_float+0x2a6>
 800eb3c:	9b01      	ldr	r3, [sp, #4]
 800eb3e:	429e      	cmp	r6, r3
 800eb40:	f200 8106 	bhi.w	800ed50 <_scanf_float+0x290>
 800eb44:	2001      	movs	r0, #1
 800eb46:	b007      	add	sp, #28
 800eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eb50:	2a0d      	cmp	r2, #13
 800eb52:	d8e8      	bhi.n	800eb26 <_scanf_float+0x66>
 800eb54:	a101      	add	r1, pc, #4	@ (adr r1, 800eb5c <_scanf_float+0x9c>)
 800eb56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eb5a:	bf00      	nop
 800eb5c:	0800eca5 	.word	0x0800eca5
 800eb60:	0800eb27 	.word	0x0800eb27
 800eb64:	0800eb27 	.word	0x0800eb27
 800eb68:	0800eb27 	.word	0x0800eb27
 800eb6c:	0800ed01 	.word	0x0800ed01
 800eb70:	0800ecdb 	.word	0x0800ecdb
 800eb74:	0800eb27 	.word	0x0800eb27
 800eb78:	0800eb27 	.word	0x0800eb27
 800eb7c:	0800ecb3 	.word	0x0800ecb3
 800eb80:	0800eb27 	.word	0x0800eb27
 800eb84:	0800eb27 	.word	0x0800eb27
 800eb88:	0800eb27 	.word	0x0800eb27
 800eb8c:	0800eb27 	.word	0x0800eb27
 800eb90:	0800ec6f 	.word	0x0800ec6f
 800eb94:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eb98:	e7da      	b.n	800eb50 <_scanf_float+0x90>
 800eb9a:	290e      	cmp	r1, #14
 800eb9c:	d8c3      	bhi.n	800eb26 <_scanf_float+0x66>
 800eb9e:	a001      	add	r0, pc, #4	@ (adr r0, 800eba4 <_scanf_float+0xe4>)
 800eba0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eba4:	0800ec5f 	.word	0x0800ec5f
 800eba8:	0800eb27 	.word	0x0800eb27
 800ebac:	0800ec5f 	.word	0x0800ec5f
 800ebb0:	0800ecef 	.word	0x0800ecef
 800ebb4:	0800eb27 	.word	0x0800eb27
 800ebb8:	0800ec01 	.word	0x0800ec01
 800ebbc:	0800ec45 	.word	0x0800ec45
 800ebc0:	0800ec45 	.word	0x0800ec45
 800ebc4:	0800ec45 	.word	0x0800ec45
 800ebc8:	0800ec45 	.word	0x0800ec45
 800ebcc:	0800ec45 	.word	0x0800ec45
 800ebd0:	0800ec45 	.word	0x0800ec45
 800ebd4:	0800ec45 	.word	0x0800ec45
 800ebd8:	0800ec45 	.word	0x0800ec45
 800ebdc:	0800ec45 	.word	0x0800ec45
 800ebe0:	2b6e      	cmp	r3, #110	@ 0x6e
 800ebe2:	d809      	bhi.n	800ebf8 <_scanf_float+0x138>
 800ebe4:	2b60      	cmp	r3, #96	@ 0x60
 800ebe6:	d8b1      	bhi.n	800eb4c <_scanf_float+0x8c>
 800ebe8:	2b54      	cmp	r3, #84	@ 0x54
 800ebea:	d07b      	beq.n	800ece4 <_scanf_float+0x224>
 800ebec:	2b59      	cmp	r3, #89	@ 0x59
 800ebee:	d19a      	bne.n	800eb26 <_scanf_float+0x66>
 800ebf0:	2d07      	cmp	r5, #7
 800ebf2:	d198      	bne.n	800eb26 <_scanf_float+0x66>
 800ebf4:	2508      	movs	r5, #8
 800ebf6:	e02f      	b.n	800ec58 <_scanf_float+0x198>
 800ebf8:	2b74      	cmp	r3, #116	@ 0x74
 800ebfa:	d073      	beq.n	800ece4 <_scanf_float+0x224>
 800ebfc:	2b79      	cmp	r3, #121	@ 0x79
 800ebfe:	e7f6      	b.n	800ebee <_scanf_float+0x12e>
 800ec00:	6821      	ldr	r1, [r4, #0]
 800ec02:	05c8      	lsls	r0, r1, #23
 800ec04:	d51e      	bpl.n	800ec44 <_scanf_float+0x184>
 800ec06:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ec0a:	3701      	adds	r7, #1
 800ec0c:	6021      	str	r1, [r4, #0]
 800ec0e:	f1bb 0f00 	cmp.w	fp, #0
 800ec12:	d003      	beq.n	800ec1c <_scanf_float+0x15c>
 800ec14:	3201      	adds	r2, #1
 800ec16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec1a:	60a2      	str	r2, [r4, #8]
 800ec1c:	68a3      	ldr	r3, [r4, #8]
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	60a3      	str	r3, [r4, #8]
 800ec22:	6923      	ldr	r3, [r4, #16]
 800ec24:	3301      	adds	r3, #1
 800ec26:	6123      	str	r3, [r4, #16]
 800ec28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f8c9 3004 	str.w	r3, [r9, #4]
 800ec34:	f340 8083 	ble.w	800ed3e <_scanf_float+0x27e>
 800ec38:	f8d9 3000 	ldr.w	r3, [r9]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	f8c9 3000 	str.w	r3, [r9]
 800ec42:	e762      	b.n	800eb0a <_scanf_float+0x4a>
 800ec44:	eb1a 0105 	adds.w	r1, sl, r5
 800ec48:	f47f af6d 	bne.w	800eb26 <_scanf_float+0x66>
 800ec4c:	6822      	ldr	r2, [r4, #0]
 800ec4e:	460d      	mov	r5, r1
 800ec50:	468a      	mov	sl, r1
 800ec52:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ec56:	6022      	str	r2, [r4, #0]
 800ec58:	f806 3b01 	strb.w	r3, [r6], #1
 800ec5c:	e7de      	b.n	800ec1c <_scanf_float+0x15c>
 800ec5e:	6822      	ldr	r2, [r4, #0]
 800ec60:	0610      	lsls	r0, r2, #24
 800ec62:	f57f af60 	bpl.w	800eb26 <_scanf_float+0x66>
 800ec66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ec6a:	6022      	str	r2, [r4, #0]
 800ec6c:	e7f4      	b.n	800ec58 <_scanf_float+0x198>
 800ec6e:	f1ba 0f00 	cmp.w	sl, #0
 800ec72:	d10c      	bne.n	800ec8e <_scanf_float+0x1ce>
 800ec74:	b977      	cbnz	r7, 800ec94 <_scanf_float+0x1d4>
 800ec76:	6822      	ldr	r2, [r4, #0]
 800ec78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ec7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ec80:	d108      	bne.n	800ec94 <_scanf_float+0x1d4>
 800ec82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ec86:	f04f 0a01 	mov.w	sl, #1
 800ec8a:	6022      	str	r2, [r4, #0]
 800ec8c:	e7e4      	b.n	800ec58 <_scanf_float+0x198>
 800ec8e:	f1ba 0f02 	cmp.w	sl, #2
 800ec92:	d051      	beq.n	800ed38 <_scanf_float+0x278>
 800ec94:	2d01      	cmp	r5, #1
 800ec96:	d002      	beq.n	800ec9e <_scanf_float+0x1de>
 800ec98:	2d04      	cmp	r5, #4
 800ec9a:	f47f af44 	bne.w	800eb26 <_scanf_float+0x66>
 800ec9e:	3501      	adds	r5, #1
 800eca0:	b2ed      	uxtb	r5, r5
 800eca2:	e7d9      	b.n	800ec58 <_scanf_float+0x198>
 800eca4:	f1ba 0f01 	cmp.w	sl, #1
 800eca8:	f47f af3d 	bne.w	800eb26 <_scanf_float+0x66>
 800ecac:	f04f 0a02 	mov.w	sl, #2
 800ecb0:	e7d2      	b.n	800ec58 <_scanf_float+0x198>
 800ecb2:	b975      	cbnz	r5, 800ecd2 <_scanf_float+0x212>
 800ecb4:	2f00      	cmp	r7, #0
 800ecb6:	f47f af37 	bne.w	800eb28 <_scanf_float+0x68>
 800ecba:	6822      	ldr	r2, [r4, #0]
 800ecbc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ecc0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ecc4:	f040 8103 	bne.w	800eece <_scanf_float+0x40e>
 800ecc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eccc:	2501      	movs	r5, #1
 800ecce:	6022      	str	r2, [r4, #0]
 800ecd0:	e7c2      	b.n	800ec58 <_scanf_float+0x198>
 800ecd2:	2d03      	cmp	r5, #3
 800ecd4:	d0e3      	beq.n	800ec9e <_scanf_float+0x1de>
 800ecd6:	2d05      	cmp	r5, #5
 800ecd8:	e7df      	b.n	800ec9a <_scanf_float+0x1da>
 800ecda:	2d02      	cmp	r5, #2
 800ecdc:	f47f af23 	bne.w	800eb26 <_scanf_float+0x66>
 800ece0:	2503      	movs	r5, #3
 800ece2:	e7b9      	b.n	800ec58 <_scanf_float+0x198>
 800ece4:	2d06      	cmp	r5, #6
 800ece6:	f47f af1e 	bne.w	800eb26 <_scanf_float+0x66>
 800ecea:	2507      	movs	r5, #7
 800ecec:	e7b4      	b.n	800ec58 <_scanf_float+0x198>
 800ecee:	6822      	ldr	r2, [r4, #0]
 800ecf0:	0591      	lsls	r1, r2, #22
 800ecf2:	f57f af18 	bpl.w	800eb26 <_scanf_float+0x66>
 800ecf6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ecfa:	9702      	str	r7, [sp, #8]
 800ecfc:	6022      	str	r2, [r4, #0]
 800ecfe:	e7ab      	b.n	800ec58 <_scanf_float+0x198>
 800ed00:	6822      	ldr	r2, [r4, #0]
 800ed02:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ed06:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ed0a:	d005      	beq.n	800ed18 <_scanf_float+0x258>
 800ed0c:	0550      	lsls	r0, r2, #21
 800ed0e:	f57f af0a 	bpl.w	800eb26 <_scanf_float+0x66>
 800ed12:	2f00      	cmp	r7, #0
 800ed14:	f000 80db 	beq.w	800eece <_scanf_float+0x40e>
 800ed18:	0591      	lsls	r1, r2, #22
 800ed1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ed1e:	bf58      	it	pl
 800ed20:	9902      	ldrpl	r1, [sp, #8]
 800ed22:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ed26:	bf58      	it	pl
 800ed28:	1a79      	subpl	r1, r7, r1
 800ed2a:	6022      	str	r2, [r4, #0]
 800ed2c:	f04f 0700 	mov.w	r7, #0
 800ed30:	bf58      	it	pl
 800ed32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ed36:	e78f      	b.n	800ec58 <_scanf_float+0x198>
 800ed38:	f04f 0a03 	mov.w	sl, #3
 800ed3c:	e78c      	b.n	800ec58 <_scanf_float+0x198>
 800ed3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ed42:	4649      	mov	r1, r9
 800ed44:	4640      	mov	r0, r8
 800ed46:	4798      	blx	r3
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	f43f aede 	beq.w	800eb0a <_scanf_float+0x4a>
 800ed4e:	e6ea      	b.n	800eb26 <_scanf_float+0x66>
 800ed50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed54:	464a      	mov	r2, r9
 800ed56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed5a:	4640      	mov	r0, r8
 800ed5c:	4798      	blx	r3
 800ed5e:	6923      	ldr	r3, [r4, #16]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	6123      	str	r3, [r4, #16]
 800ed64:	e6ea      	b.n	800eb3c <_scanf_float+0x7c>
 800ed66:	1e6b      	subs	r3, r5, #1
 800ed68:	2b06      	cmp	r3, #6
 800ed6a:	d824      	bhi.n	800edb6 <_scanf_float+0x2f6>
 800ed6c:	2d02      	cmp	r5, #2
 800ed6e:	d836      	bhi.n	800edde <_scanf_float+0x31e>
 800ed70:	9b01      	ldr	r3, [sp, #4]
 800ed72:	429e      	cmp	r6, r3
 800ed74:	f67f aee6 	bls.w	800eb44 <_scanf_float+0x84>
 800ed78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed7c:	464a      	mov	r2, r9
 800ed7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed82:	4640      	mov	r0, r8
 800ed84:	4798      	blx	r3
 800ed86:	6923      	ldr	r3, [r4, #16]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	6123      	str	r3, [r4, #16]
 800ed8c:	e7f0      	b.n	800ed70 <_scanf_float+0x2b0>
 800ed8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed92:	464a      	mov	r2, r9
 800ed94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ed98:	4640      	mov	r0, r8
 800ed9a:	4798      	blx	r3
 800ed9c:	6923      	ldr	r3, [r4, #16]
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	6123      	str	r3, [r4, #16]
 800eda2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eda6:	fa5f fa8a 	uxtb.w	sl, sl
 800edaa:	f1ba 0f02 	cmp.w	sl, #2
 800edae:	d1ee      	bne.n	800ed8e <_scanf_float+0x2ce>
 800edb0:	3d03      	subs	r5, #3
 800edb2:	b2ed      	uxtb	r5, r5
 800edb4:	1b76      	subs	r6, r6, r5
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	05da      	lsls	r2, r3, #23
 800edba:	d52f      	bpl.n	800ee1c <_scanf_float+0x35c>
 800edbc:	055b      	lsls	r3, r3, #21
 800edbe:	d511      	bpl.n	800ede4 <_scanf_float+0x324>
 800edc0:	9b01      	ldr	r3, [sp, #4]
 800edc2:	429e      	cmp	r6, r3
 800edc4:	f67f aebe 	bls.w	800eb44 <_scanf_float+0x84>
 800edc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800edcc:	464a      	mov	r2, r9
 800edce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800edd2:	4640      	mov	r0, r8
 800edd4:	4798      	blx	r3
 800edd6:	6923      	ldr	r3, [r4, #16]
 800edd8:	3b01      	subs	r3, #1
 800edda:	6123      	str	r3, [r4, #16]
 800eddc:	e7f0      	b.n	800edc0 <_scanf_float+0x300>
 800edde:	46aa      	mov	sl, r5
 800ede0:	46b3      	mov	fp, r6
 800ede2:	e7de      	b.n	800eda2 <_scanf_float+0x2e2>
 800ede4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ede8:	1e75      	subs	r5, r6, #1
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	2965      	cmp	r1, #101	@ 0x65
 800edee:	f103 33ff 	add.w	r3, r3, #4294967295
 800edf2:	6123      	str	r3, [r4, #16]
 800edf4:	d00c      	beq.n	800ee10 <_scanf_float+0x350>
 800edf6:	2945      	cmp	r1, #69	@ 0x45
 800edf8:	d00a      	beq.n	800ee10 <_scanf_float+0x350>
 800edfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800edfe:	464a      	mov	r2, r9
 800ee00:	4640      	mov	r0, r8
 800ee02:	1eb5      	subs	r5, r6, #2
 800ee04:	4798      	blx	r3
 800ee06:	6923      	ldr	r3, [r4, #16]
 800ee08:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	6123      	str	r3, [r4, #16]
 800ee10:	462e      	mov	r6, r5
 800ee12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ee16:	464a      	mov	r2, r9
 800ee18:	4640      	mov	r0, r8
 800ee1a:	4798      	blx	r3
 800ee1c:	6822      	ldr	r2, [r4, #0]
 800ee1e:	f012 0210 	ands.w	r2, r2, #16
 800ee22:	d001      	beq.n	800ee28 <_scanf_float+0x368>
 800ee24:	2000      	movs	r0, #0
 800ee26:	e68e      	b.n	800eb46 <_scanf_float+0x86>
 800ee28:	7032      	strb	r2, [r6, #0]
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ee30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee34:	d125      	bne.n	800ee82 <_scanf_float+0x3c2>
 800ee36:	9b02      	ldr	r3, [sp, #8]
 800ee38:	429f      	cmp	r7, r3
 800ee3a:	d00a      	beq.n	800ee52 <_scanf_float+0x392>
 800ee3c:	1bda      	subs	r2, r3, r7
 800ee3e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ee42:	4924      	ldr	r1, [pc, #144]	@ (800eed4 <_scanf_float+0x414>)
 800ee44:	429e      	cmp	r6, r3
 800ee46:	bf28      	it	cs
 800ee48:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f000 f907 	bl	800f060 <siprintf>
 800ee52:	2200      	movs	r2, #0
 800ee54:	9901      	ldr	r1, [sp, #4]
 800ee56:	4640      	mov	r0, r8
 800ee58:	f002 fc22 	bl	80116a0 <_strtod_r>
 800ee5c:	6821      	ldr	r1, [r4, #0]
 800ee5e:	9b03      	ldr	r3, [sp, #12]
 800ee60:	f011 0f02 	tst.w	r1, #2
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	ec57 6b10 	vmov	r6, r7, d0
 800ee6a:	f103 0204 	add.w	r2, r3, #4
 800ee6e:	d015      	beq.n	800ee9c <_scanf_float+0x3dc>
 800ee70:	9903      	ldr	r1, [sp, #12]
 800ee72:	600a      	str	r2, [r1, #0]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	e9c3 6700 	strd	r6, r7, [r3]
 800ee7a:	68e3      	ldr	r3, [r4, #12]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	60e3      	str	r3, [r4, #12]
 800ee80:	e7d0      	b.n	800ee24 <_scanf_float+0x364>
 800ee82:	9b04      	ldr	r3, [sp, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d0e4      	beq.n	800ee52 <_scanf_float+0x392>
 800ee88:	9905      	ldr	r1, [sp, #20]
 800ee8a:	230a      	movs	r3, #10
 800ee8c:	4640      	mov	r0, r8
 800ee8e:	3101      	adds	r1, #1
 800ee90:	f002 fc86 	bl	80117a0 <_strtol_r>
 800ee94:	9b04      	ldr	r3, [sp, #16]
 800ee96:	9e05      	ldr	r6, [sp, #20]
 800ee98:	1ac2      	subs	r2, r0, r3
 800ee9a:	e7d0      	b.n	800ee3e <_scanf_float+0x37e>
 800ee9c:	f011 0f04 	tst.w	r1, #4
 800eea0:	9903      	ldr	r1, [sp, #12]
 800eea2:	600a      	str	r2, [r1, #0]
 800eea4:	d1e6      	bne.n	800ee74 <_scanf_float+0x3b4>
 800eea6:	681d      	ldr	r5, [r3, #0]
 800eea8:	4632      	mov	r2, r6
 800eeaa:	463b      	mov	r3, r7
 800eeac:	4630      	mov	r0, r6
 800eeae:	4639      	mov	r1, r7
 800eeb0:	f7f1 fe40 	bl	8000b34 <__aeabi_dcmpun>
 800eeb4:	b128      	cbz	r0, 800eec2 <_scanf_float+0x402>
 800eeb6:	4808      	ldr	r0, [pc, #32]	@ (800eed8 <_scanf_float+0x418>)
 800eeb8:	f000 f9d2 	bl	800f260 <nanf>
 800eebc:	ed85 0a00 	vstr	s0, [r5]
 800eec0:	e7db      	b.n	800ee7a <_scanf_float+0x3ba>
 800eec2:	4630      	mov	r0, r6
 800eec4:	4639      	mov	r1, r7
 800eec6:	f7f1 fe93 	bl	8000bf0 <__aeabi_d2f>
 800eeca:	6028      	str	r0, [r5, #0]
 800eecc:	e7d5      	b.n	800ee7a <_scanf_float+0x3ba>
 800eece:	2700      	movs	r7, #0
 800eed0:	e62e      	b.n	800eb30 <_scanf_float+0x70>
 800eed2:	bf00      	nop
 800eed4:	08030248 	.word	0x08030248
 800eed8:	08030389 	.word	0x08030389

0800eedc <std>:
 800eedc:	2300      	movs	r3, #0
 800eede:	b510      	push	{r4, lr}
 800eee0:	4604      	mov	r4, r0
 800eee2:	6083      	str	r3, [r0, #8]
 800eee4:	8181      	strh	r1, [r0, #12]
 800eee6:	4619      	mov	r1, r3
 800eee8:	6643      	str	r3, [r0, #100]	@ 0x64
 800eeea:	81c2      	strh	r2, [r0, #14]
 800eeec:	2208      	movs	r2, #8
 800eeee:	6183      	str	r3, [r0, #24]
 800eef0:	e9c0 3300 	strd	r3, r3, [r0]
 800eef4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eef8:	305c      	adds	r0, #92	@ 0x5c
 800eefa:	f000 f916 	bl	800f12a <memset>
 800eefe:	4b0d      	ldr	r3, [pc, #52]	@ (800ef34 <std+0x58>)
 800ef00:	6224      	str	r4, [r4, #32]
 800ef02:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef04:	4b0c      	ldr	r3, [pc, #48]	@ (800ef38 <std+0x5c>)
 800ef06:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef08:	4b0c      	ldr	r3, [pc, #48]	@ (800ef3c <std+0x60>)
 800ef0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ef40 <std+0x64>)
 800ef0e:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef10:	4b0c      	ldr	r3, [pc, #48]	@ (800ef44 <std+0x68>)
 800ef12:	429c      	cmp	r4, r3
 800ef14:	d006      	beq.n	800ef24 <std+0x48>
 800ef16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ef1a:	4294      	cmp	r4, r2
 800ef1c:	d002      	beq.n	800ef24 <std+0x48>
 800ef1e:	33d0      	adds	r3, #208	@ 0xd0
 800ef20:	429c      	cmp	r4, r3
 800ef22:	d105      	bne.n	800ef30 <std+0x54>
 800ef24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ef28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef2c:	f000 b97a 	b.w	800f224 <__retarget_lock_init_recursive>
 800ef30:	bd10      	pop	{r4, pc}
 800ef32:	bf00      	nop
 800ef34:	0800f0a5 	.word	0x0800f0a5
 800ef38:	0800f0c7 	.word	0x0800f0c7
 800ef3c:	0800f0ff 	.word	0x0800f0ff
 800ef40:	0800f123 	.word	0x0800f123
 800ef44:	20013b54 	.word	0x20013b54

0800ef48 <stdio_exit_handler>:
 800ef48:	4a02      	ldr	r2, [pc, #8]	@ (800ef54 <stdio_exit_handler+0xc>)
 800ef4a:	4903      	ldr	r1, [pc, #12]	@ (800ef58 <stdio_exit_handler+0x10>)
 800ef4c:	4803      	ldr	r0, [pc, #12]	@ (800ef5c <stdio_exit_handler+0x14>)
 800ef4e:	f000 b869 	b.w	800f024 <_fwalk_sglue>
 800ef52:	bf00      	nop
 800ef54:	20000024 	.word	0x20000024
 800ef58:	08011b5d 	.word	0x08011b5d
 800ef5c:	20000034 	.word	0x20000034

0800ef60 <cleanup_stdio>:
 800ef60:	6841      	ldr	r1, [r0, #4]
 800ef62:	4b0c      	ldr	r3, [pc, #48]	@ (800ef94 <cleanup_stdio+0x34>)
 800ef64:	4299      	cmp	r1, r3
 800ef66:	b510      	push	{r4, lr}
 800ef68:	4604      	mov	r4, r0
 800ef6a:	d001      	beq.n	800ef70 <cleanup_stdio+0x10>
 800ef6c:	f002 fdf6 	bl	8011b5c <_fflush_r>
 800ef70:	68a1      	ldr	r1, [r4, #8]
 800ef72:	4b09      	ldr	r3, [pc, #36]	@ (800ef98 <cleanup_stdio+0x38>)
 800ef74:	4299      	cmp	r1, r3
 800ef76:	d002      	beq.n	800ef7e <cleanup_stdio+0x1e>
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f002 fdef 	bl	8011b5c <_fflush_r>
 800ef7e:	68e1      	ldr	r1, [r4, #12]
 800ef80:	4b06      	ldr	r3, [pc, #24]	@ (800ef9c <cleanup_stdio+0x3c>)
 800ef82:	4299      	cmp	r1, r3
 800ef84:	d004      	beq.n	800ef90 <cleanup_stdio+0x30>
 800ef86:	4620      	mov	r0, r4
 800ef88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef8c:	f002 bde6 	b.w	8011b5c <_fflush_r>
 800ef90:	bd10      	pop	{r4, pc}
 800ef92:	bf00      	nop
 800ef94:	20013b54 	.word	0x20013b54
 800ef98:	20013bbc 	.word	0x20013bbc
 800ef9c:	20013c24 	.word	0x20013c24

0800efa0 <global_stdio_init.part.0>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	4b0b      	ldr	r3, [pc, #44]	@ (800efd0 <global_stdio_init.part.0+0x30>)
 800efa4:	2104      	movs	r1, #4
 800efa6:	4c0b      	ldr	r4, [pc, #44]	@ (800efd4 <global_stdio_init.part.0+0x34>)
 800efa8:	4a0b      	ldr	r2, [pc, #44]	@ (800efd8 <global_stdio_init.part.0+0x38>)
 800efaa:	4620      	mov	r0, r4
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	2200      	movs	r2, #0
 800efb0:	f7ff ff94 	bl	800eedc <std>
 800efb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800efb8:	2201      	movs	r2, #1
 800efba:	2109      	movs	r1, #9
 800efbc:	f7ff ff8e 	bl	800eedc <std>
 800efc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800efc4:	2202      	movs	r2, #2
 800efc6:	2112      	movs	r1, #18
 800efc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efcc:	f7ff bf86 	b.w	800eedc <std>
 800efd0:	20013c8c 	.word	0x20013c8c
 800efd4:	20013b54 	.word	0x20013b54
 800efd8:	0800ef49 	.word	0x0800ef49

0800efdc <__sfp_lock_acquire>:
 800efdc:	4801      	ldr	r0, [pc, #4]	@ (800efe4 <__sfp_lock_acquire+0x8>)
 800efde:	f000 b922 	b.w	800f226 <__retarget_lock_acquire_recursive>
 800efe2:	bf00      	nop
 800efe4:	20013c95 	.word	0x20013c95

0800efe8 <__sfp_lock_release>:
 800efe8:	4801      	ldr	r0, [pc, #4]	@ (800eff0 <__sfp_lock_release+0x8>)
 800efea:	f000 b91d 	b.w	800f228 <__retarget_lock_release_recursive>
 800efee:	bf00      	nop
 800eff0:	20013c95 	.word	0x20013c95

0800eff4 <__sinit>:
 800eff4:	b510      	push	{r4, lr}
 800eff6:	4604      	mov	r4, r0
 800eff8:	f7ff fff0 	bl	800efdc <__sfp_lock_acquire>
 800effc:	6a23      	ldr	r3, [r4, #32]
 800effe:	b11b      	cbz	r3, 800f008 <__sinit+0x14>
 800f000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f004:	f7ff bff0 	b.w	800efe8 <__sfp_lock_release>
 800f008:	4b04      	ldr	r3, [pc, #16]	@ (800f01c <__sinit+0x28>)
 800f00a:	6223      	str	r3, [r4, #32]
 800f00c:	4b04      	ldr	r3, [pc, #16]	@ (800f020 <__sinit+0x2c>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1f5      	bne.n	800f000 <__sinit+0xc>
 800f014:	f7ff ffc4 	bl	800efa0 <global_stdio_init.part.0>
 800f018:	e7f2      	b.n	800f000 <__sinit+0xc>
 800f01a:	bf00      	nop
 800f01c:	0800ef61 	.word	0x0800ef61
 800f020:	20013c8c 	.word	0x20013c8c

0800f024 <_fwalk_sglue>:
 800f024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f028:	4607      	mov	r7, r0
 800f02a:	4688      	mov	r8, r1
 800f02c:	4614      	mov	r4, r2
 800f02e:	2600      	movs	r6, #0
 800f030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f034:	f1b9 0901 	subs.w	r9, r9, #1
 800f038:	d505      	bpl.n	800f046 <_fwalk_sglue+0x22>
 800f03a:	6824      	ldr	r4, [r4, #0]
 800f03c:	2c00      	cmp	r4, #0
 800f03e:	d1f7      	bne.n	800f030 <_fwalk_sglue+0xc>
 800f040:	4630      	mov	r0, r6
 800f042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f046:	89ab      	ldrh	r3, [r5, #12]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d907      	bls.n	800f05c <_fwalk_sglue+0x38>
 800f04c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f050:	3301      	adds	r3, #1
 800f052:	d003      	beq.n	800f05c <_fwalk_sglue+0x38>
 800f054:	4629      	mov	r1, r5
 800f056:	4638      	mov	r0, r7
 800f058:	47c0      	blx	r8
 800f05a:	4306      	orrs	r6, r0
 800f05c:	3568      	adds	r5, #104	@ 0x68
 800f05e:	e7e9      	b.n	800f034 <_fwalk_sglue+0x10>

0800f060 <siprintf>:
 800f060:	b40e      	push	{r1, r2, r3}
 800f062:	b510      	push	{r4, lr}
 800f064:	b09d      	sub	sp, #116	@ 0x74
 800f066:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f06a:	2400      	movs	r4, #0
 800f06c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f06e:	9002      	str	r0, [sp, #8]
 800f070:	9006      	str	r0, [sp, #24]
 800f072:	9107      	str	r1, [sp, #28]
 800f074:	9104      	str	r1, [sp, #16]
 800f076:	4809      	ldr	r0, [pc, #36]	@ (800f09c <siprintf+0x3c>)
 800f078:	4909      	ldr	r1, [pc, #36]	@ (800f0a0 <siprintf+0x40>)
 800f07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f07e:	9105      	str	r1, [sp, #20]
 800f080:	a902      	add	r1, sp, #8
 800f082:	6800      	ldr	r0, [r0, #0]
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f088:	f002 fbe8 	bl	801185c <_svfiprintf_r>
 800f08c:	9b02      	ldr	r3, [sp, #8]
 800f08e:	701c      	strb	r4, [r3, #0]
 800f090:	b01d      	add	sp, #116	@ 0x74
 800f092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f096:	b003      	add	sp, #12
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	20000030 	.word	0x20000030
 800f0a0:	ffff0208 	.word	0xffff0208

0800f0a4 <__sread>:
 800f0a4:	b510      	push	{r4, lr}
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ac:	f000 f86c 	bl	800f188 <_read_r>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	bfab      	itete	ge
 800f0b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f0b6:	89a3      	ldrhlt	r3, [r4, #12]
 800f0b8:	181b      	addge	r3, r3, r0
 800f0ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f0be:	bfac      	ite	ge
 800f0c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f0c2:	81a3      	strhlt	r3, [r4, #12]
 800f0c4:	bd10      	pop	{r4, pc}

0800f0c6 <__swrite>:
 800f0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ca:	461f      	mov	r7, r3
 800f0cc:	898b      	ldrh	r3, [r1, #12]
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	05db      	lsls	r3, r3, #23
 800f0d4:	4616      	mov	r6, r2
 800f0d6:	d505      	bpl.n	800f0e4 <__swrite+0x1e>
 800f0d8:	2302      	movs	r3, #2
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0e0:	f000 f840 	bl	800f164 <_lseek_r>
 800f0e4:	89a3      	ldrh	r3, [r4, #12]
 800f0e6:	4632      	mov	r2, r6
 800f0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0f2:	81a3      	strh	r3, [r4, #12]
 800f0f4:	463b      	mov	r3, r7
 800f0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fa:	f000 b857 	b.w	800f1ac <_write_r>

0800f0fe <__sseek>:
 800f0fe:	b510      	push	{r4, lr}
 800f100:	460c      	mov	r4, r1
 800f102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f106:	f000 f82d 	bl	800f164 <_lseek_r>
 800f10a:	1c43      	adds	r3, r0, #1
 800f10c:	89a3      	ldrh	r3, [r4, #12]
 800f10e:	bf15      	itete	ne
 800f110:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f112:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f116:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f11a:	81a3      	strheq	r3, [r4, #12]
 800f11c:	bf18      	it	ne
 800f11e:	81a3      	strhne	r3, [r4, #12]
 800f120:	bd10      	pop	{r4, pc}

0800f122 <__sclose>:
 800f122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f126:	f000 b80d 	b.w	800f144 <_close_r>

0800f12a <memset>:
 800f12a:	4402      	add	r2, r0
 800f12c:	4603      	mov	r3, r0
 800f12e:	4293      	cmp	r3, r2
 800f130:	d100      	bne.n	800f134 <memset+0xa>
 800f132:	4770      	bx	lr
 800f134:	f803 1b01 	strb.w	r1, [r3], #1
 800f138:	e7f9      	b.n	800f12e <memset+0x4>
	...

0800f13c <_localeconv_r>:
 800f13c:	4800      	ldr	r0, [pc, #0]	@ (800f140 <_localeconv_r+0x4>)
 800f13e:	4770      	bx	lr
 800f140:	20000170 	.word	0x20000170

0800f144 <_close_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	2300      	movs	r3, #0
 800f148:	4d05      	ldr	r5, [pc, #20]	@ (800f160 <_close_r+0x1c>)
 800f14a:	4604      	mov	r4, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	602b      	str	r3, [r5, #0]
 800f150:	f7f3 fb5c 	bl	800280c <_close>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_close_r+0x1a>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_close_r+0x1a>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	20013c90 	.word	0x20013c90

0800f164 <_lseek_r>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	4604      	mov	r4, r0
 800f168:	4d06      	ldr	r5, [pc, #24]	@ (800f184 <_lseek_r+0x20>)
 800f16a:	4608      	mov	r0, r1
 800f16c:	4611      	mov	r1, r2
 800f16e:	2200      	movs	r2, #0
 800f170:	602a      	str	r2, [r5, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	f7f3 fb71 	bl	800285a <_lseek>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d102      	bne.n	800f182 <_lseek_r+0x1e>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	b103      	cbz	r3, 800f182 <_lseek_r+0x1e>
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	20013c90 	.word	0x20013c90

0800f188 <_read_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4604      	mov	r4, r0
 800f18c:	4d06      	ldr	r5, [pc, #24]	@ (800f1a8 <_read_r+0x20>)
 800f18e:	4608      	mov	r0, r1
 800f190:	4611      	mov	r1, r2
 800f192:	2200      	movs	r2, #0
 800f194:	602a      	str	r2, [r5, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	f7f3 faff 	bl	800279a <_read>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_read_r+0x1e>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_read_r+0x1e>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	20013c90 	.word	0x20013c90

0800f1ac <_write_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	4d06      	ldr	r5, [pc, #24]	@ (800f1cc <_write_r+0x20>)
 800f1b2:	4608      	mov	r0, r1
 800f1b4:	4611      	mov	r1, r2
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	602a      	str	r2, [r5, #0]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	f7f3 fb0a 	bl	80027d4 <_write>
 800f1c0:	1c43      	adds	r3, r0, #1
 800f1c2:	d102      	bne.n	800f1ca <_write_r+0x1e>
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	b103      	cbz	r3, 800f1ca <_write_r+0x1e>
 800f1c8:	6023      	str	r3, [r4, #0]
 800f1ca:	bd38      	pop	{r3, r4, r5, pc}
 800f1cc:	20013c90 	.word	0x20013c90

0800f1d0 <__errno>:
 800f1d0:	4b01      	ldr	r3, [pc, #4]	@ (800f1d8 <__errno+0x8>)
 800f1d2:	6818      	ldr	r0, [r3, #0]
 800f1d4:	4770      	bx	lr
 800f1d6:	bf00      	nop
 800f1d8:	20000030 	.word	0x20000030

0800f1dc <__libc_init_array>:
 800f1dc:	b570      	push	{r4, r5, r6, lr}
 800f1de:	4d0d      	ldr	r5, [pc, #52]	@ (800f214 <__libc_init_array+0x38>)
 800f1e0:	2600      	movs	r6, #0
 800f1e2:	4c0d      	ldr	r4, [pc, #52]	@ (800f218 <__libc_init_array+0x3c>)
 800f1e4:	1b64      	subs	r4, r4, r5
 800f1e6:	10a4      	asrs	r4, r4, #2
 800f1e8:	42a6      	cmp	r6, r4
 800f1ea:	d109      	bne.n	800f200 <__libc_init_array+0x24>
 800f1ec:	4d0b      	ldr	r5, [pc, #44]	@ (800f21c <__libc_init_array+0x40>)
 800f1ee:	2600      	movs	r6, #0
 800f1f0:	4c0b      	ldr	r4, [pc, #44]	@ (800f220 <__libc_init_array+0x44>)
 800f1f2:	f003 fd35 	bl	8012c60 <_init>
 800f1f6:	1b64      	subs	r4, r4, r5
 800f1f8:	10a4      	asrs	r4, r4, #2
 800f1fa:	42a6      	cmp	r6, r4
 800f1fc:	d105      	bne.n	800f20a <__libc_init_array+0x2e>
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}
 800f200:	f855 3b04 	ldr.w	r3, [r5], #4
 800f204:	3601      	adds	r6, #1
 800f206:	4798      	blx	r3
 800f208:	e7ee      	b.n	800f1e8 <__libc_init_array+0xc>
 800f20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f20e:	3601      	adds	r6, #1
 800f210:	4798      	blx	r3
 800f212:	e7f2      	b.n	800f1fa <__libc_init_array+0x1e>
 800f214:	08030644 	.word	0x08030644
 800f218:	08030644 	.word	0x08030644
 800f21c:	08030644 	.word	0x08030644
 800f220:	08030648 	.word	0x08030648

0800f224 <__retarget_lock_init_recursive>:
 800f224:	4770      	bx	lr

0800f226 <__retarget_lock_acquire_recursive>:
 800f226:	4770      	bx	lr

0800f228 <__retarget_lock_release_recursive>:
 800f228:	4770      	bx	lr

0800f22a <memchr>:
 800f22a:	b2c9      	uxtb	r1, r1
 800f22c:	4603      	mov	r3, r0
 800f22e:	4402      	add	r2, r0
 800f230:	b510      	push	{r4, lr}
 800f232:	4293      	cmp	r3, r2
 800f234:	4618      	mov	r0, r3
 800f236:	d101      	bne.n	800f23c <memchr+0x12>
 800f238:	2000      	movs	r0, #0
 800f23a:	e003      	b.n	800f244 <memchr+0x1a>
 800f23c:	7804      	ldrb	r4, [r0, #0]
 800f23e:	3301      	adds	r3, #1
 800f240:	428c      	cmp	r4, r1
 800f242:	d1f6      	bne.n	800f232 <memchr+0x8>
 800f244:	bd10      	pop	{r4, pc}

0800f246 <memcpy>:
 800f246:	440a      	add	r2, r1
 800f248:	1e43      	subs	r3, r0, #1
 800f24a:	4291      	cmp	r1, r2
 800f24c:	d100      	bne.n	800f250 <memcpy+0xa>
 800f24e:	4770      	bx	lr
 800f250:	b510      	push	{r4, lr}
 800f252:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f256:	4291      	cmp	r1, r2
 800f258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f25c:	d1f9      	bne.n	800f252 <memcpy+0xc>
 800f25e:	bd10      	pop	{r4, pc}

0800f260 <nanf>:
 800f260:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f268 <nanf+0x8>
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	7fc00000 	.word	0x7fc00000

0800f26c <quorem>:
 800f26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f270:	6903      	ldr	r3, [r0, #16]
 800f272:	4607      	mov	r7, r0
 800f274:	690c      	ldr	r4, [r1, #16]
 800f276:	42a3      	cmp	r3, r4
 800f278:	f2c0 8083 	blt.w	800f382 <quorem+0x116>
 800f27c:	3c01      	subs	r4, #1
 800f27e:	f100 0514 	add.w	r5, r0, #20
 800f282:	f101 0814 	add.w	r8, r1, #20
 800f286:	00a3      	lsls	r3, r4, #2
 800f288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f28c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f29c:	3301      	adds	r3, #1
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f2a4:	d331      	bcc.n	800f30a <quorem+0x9e>
 800f2a6:	f04f 0a00 	mov.w	sl, #0
 800f2aa:	46c4      	mov	ip, r8
 800f2ac:	46ae      	mov	lr, r5
 800f2ae:	46d3      	mov	fp, sl
 800f2b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f2b4:	b298      	uxth	r0, r3
 800f2b6:	45e1      	cmp	r9, ip
 800f2b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800f2bc:	fb06 a000 	mla	r0, r6, r0, sl
 800f2c0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800f2c4:	b280      	uxth	r0, r0
 800f2c6:	fb06 2303 	mla	r3, r6, r3, r2
 800f2ca:	f8de 2000 	ldr.w	r2, [lr]
 800f2ce:	b292      	uxth	r2, r2
 800f2d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f2d4:	eba2 0200 	sub.w	r2, r2, r0
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	f8de 0000 	ldr.w	r0, [lr]
 800f2de:	445a      	add	r2, fp
 800f2e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f2e4:	b292      	uxth	r2, r2
 800f2e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f2ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f2ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f2f2:	f84e 2b04 	str.w	r2, [lr], #4
 800f2f6:	d2db      	bcs.n	800f2b0 <quorem+0x44>
 800f2f8:	9b00      	ldr	r3, [sp, #0]
 800f2fa:	58eb      	ldr	r3, [r5, r3]
 800f2fc:	b92b      	cbnz	r3, 800f30a <quorem+0x9e>
 800f2fe:	9b01      	ldr	r3, [sp, #4]
 800f300:	3b04      	subs	r3, #4
 800f302:	429d      	cmp	r5, r3
 800f304:	461a      	mov	r2, r3
 800f306:	d330      	bcc.n	800f36a <quorem+0xfe>
 800f308:	613c      	str	r4, [r7, #16]
 800f30a:	4638      	mov	r0, r7
 800f30c:	f001 f9ce 	bl	80106ac <__mcmp>
 800f310:	2800      	cmp	r0, #0
 800f312:	db26      	blt.n	800f362 <quorem+0xf6>
 800f314:	4629      	mov	r1, r5
 800f316:	2000      	movs	r0, #0
 800f318:	f858 2b04 	ldr.w	r2, [r8], #4
 800f31c:	f8d1 c000 	ldr.w	ip, [r1]
 800f320:	fa1f fe82 	uxth.w	lr, r2
 800f324:	45c1      	cmp	r9, r8
 800f326:	fa1f f38c 	uxth.w	r3, ip
 800f32a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800f32e:	eba3 030e 	sub.w	r3, r3, lr
 800f332:	4403      	add	r3, r0
 800f334:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f338:	b29b      	uxth	r3, r3
 800f33a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f342:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f346:	f841 3b04 	str.w	r3, [r1], #4
 800f34a:	d2e5      	bcs.n	800f318 <quorem+0xac>
 800f34c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f350:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f354:	b922      	cbnz	r2, 800f360 <quorem+0xf4>
 800f356:	3b04      	subs	r3, #4
 800f358:	429d      	cmp	r5, r3
 800f35a:	461a      	mov	r2, r3
 800f35c:	d30b      	bcc.n	800f376 <quorem+0x10a>
 800f35e:	613c      	str	r4, [r7, #16]
 800f360:	3601      	adds	r6, #1
 800f362:	4630      	mov	r0, r6
 800f364:	b003      	add	sp, #12
 800f366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36a:	6812      	ldr	r2, [r2, #0]
 800f36c:	3b04      	subs	r3, #4
 800f36e:	2a00      	cmp	r2, #0
 800f370:	d1ca      	bne.n	800f308 <quorem+0x9c>
 800f372:	3c01      	subs	r4, #1
 800f374:	e7c5      	b.n	800f302 <quorem+0x96>
 800f376:	6812      	ldr	r2, [r2, #0]
 800f378:	3b04      	subs	r3, #4
 800f37a:	2a00      	cmp	r2, #0
 800f37c:	d1ef      	bne.n	800f35e <quorem+0xf2>
 800f37e:	3c01      	subs	r4, #1
 800f380:	e7ea      	b.n	800f358 <quorem+0xec>
 800f382:	2000      	movs	r0, #0
 800f384:	e7ee      	b.n	800f364 <quorem+0xf8>
	...

0800f388 <_dtoa_r>:
 800f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38c:	69c7      	ldr	r7, [r0, #28]
 800f38e:	b097      	sub	sp, #92	@ 0x5c
 800f390:	4681      	mov	r9, r0
 800f392:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f394:	9107      	str	r1, [sp, #28]
 800f396:	920c      	str	r2, [sp, #48]	@ 0x30
 800f398:	9311      	str	r3, [sp, #68]	@ 0x44
 800f39a:	ec55 4b10 	vmov	r4, r5, d0
 800f39e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f3a2:	b97f      	cbnz	r7, 800f3c4 <_dtoa_r+0x3c>
 800f3a4:	2010      	movs	r0, #16
 800f3a6:	f000 fe0b 	bl	800ffc0 <malloc>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	f8c9 001c 	str.w	r0, [r9, #28]
 800f3b0:	b920      	cbnz	r0, 800f3bc <_dtoa_r+0x34>
 800f3b2:	4ba9      	ldr	r3, [pc, #676]	@ (800f658 <_dtoa_r+0x2d0>)
 800f3b4:	21ef      	movs	r1, #239	@ 0xef
 800f3b6:	48a9      	ldr	r0, [pc, #676]	@ (800f65c <_dtoa_r+0x2d4>)
 800f3b8:	f002 fc3e 	bl	8011c38 <__assert_func>
 800f3bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f3c0:	6007      	str	r7, [r0, #0]
 800f3c2:	60c7      	str	r7, [r0, #12]
 800f3c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f3c8:	6819      	ldr	r1, [r3, #0]
 800f3ca:	b159      	cbz	r1, 800f3e4 <_dtoa_r+0x5c>
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	4648      	mov	r0, r9
 800f3d2:	4093      	lsls	r3, r2
 800f3d4:	604a      	str	r2, [r1, #4]
 800f3d6:	608b      	str	r3, [r1, #8]
 800f3d8:	f000 fee8 	bl	80101ac <_Bfree>
 800f3dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	1e2b      	subs	r3, r5, #0
 800f3e6:	bfb7      	itett	lt
 800f3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f3ec:	2300      	movge	r3, #0
 800f3ee:	2201      	movlt	r2, #1
 800f3f0:	9305      	strlt	r3, [sp, #20]
 800f3f2:	bfa8      	it	ge
 800f3f4:	6033      	strge	r3, [r6, #0]
 800f3f6:	9f05      	ldr	r7, [sp, #20]
 800f3f8:	4b99      	ldr	r3, [pc, #612]	@ (800f660 <_dtoa_r+0x2d8>)
 800f3fa:	bfb8      	it	lt
 800f3fc:	6032      	strlt	r2, [r6, #0]
 800f3fe:	43bb      	bics	r3, r7
 800f400:	d112      	bne.n	800f428 <_dtoa_r+0xa0>
 800f402:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f406:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f408:	6013      	str	r3, [r2, #0]
 800f40a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f40e:	4323      	orrs	r3, r4
 800f410:	f000 855a 	beq.w	800fec8 <_dtoa_r+0xb40>
 800f414:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f416:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f674 <_dtoa_r+0x2ec>
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f000 855c 	beq.w	800fed8 <_dtoa_r+0xb50>
 800f420:	f10a 0303 	add.w	r3, sl, #3
 800f424:	f000 bd56 	b.w	800fed4 <_dtoa_r+0xb4c>
 800f428:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f42c:	2200      	movs	r2, #0
 800f42e:	2300      	movs	r3, #0
 800f430:	ec51 0b17 	vmov	r0, r1, d7
 800f434:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f438:	f7f1 fb4a 	bl	8000ad0 <__aeabi_dcmpeq>
 800f43c:	4680      	mov	r8, r0
 800f43e:	b158      	cbz	r0, 800f458 <_dtoa_r+0xd0>
 800f440:	2301      	movs	r3, #1
 800f442:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f444:	6013      	str	r3, [r2, #0]
 800f446:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f448:	b113      	cbz	r3, 800f450 <_dtoa_r+0xc8>
 800f44a:	4b86      	ldr	r3, [pc, #536]	@ (800f664 <_dtoa_r+0x2dc>)
 800f44c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f44e:	6013      	str	r3, [r2, #0]
 800f450:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800f678 <_dtoa_r+0x2f0>
 800f454:	f000 bd40 	b.w	800fed8 <_dtoa_r+0xb50>
 800f458:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f45c:	aa14      	add	r2, sp, #80	@ 0x50
 800f45e:	a915      	add	r1, sp, #84	@ 0x54
 800f460:	4648      	mov	r0, r9
 800f462:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f466:	f001 fa49 	bl	80108fc <__d2b>
 800f46a:	9002      	str	r0, [sp, #8]
 800f46c:	2e00      	cmp	r6, #0
 800f46e:	d076      	beq.n	800f55e <_dtoa_r+0x1d6>
 800f470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f472:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f476:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f47a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f47e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f486:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f48a:	4619      	mov	r1, r3
 800f48c:	2200      	movs	r2, #0
 800f48e:	4b76      	ldr	r3, [pc, #472]	@ (800f668 <_dtoa_r+0x2e0>)
 800f490:	f7f0 fefe 	bl	8000290 <__aeabi_dsub>
 800f494:	a36a      	add	r3, pc, #424	@ (adr r3, 800f640 <_dtoa_r+0x2b8>)
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	f7f1 f8b1 	bl	8000600 <__aeabi_dmul>
 800f49e:	a36a      	add	r3, pc, #424	@ (adr r3, 800f648 <_dtoa_r+0x2c0>)
 800f4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a4:	f7f0 fef6 	bl	8000294 <__adddf3>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f7f1 f83d 	bl	800052c <__aeabi_i2d>
 800f4b2:	a367      	add	r3, pc, #412	@ (adr r3, 800f650 <_dtoa_r+0x2c8>)
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	f7f1 f8a2 	bl	8000600 <__aeabi_dmul>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	4629      	mov	r1, r5
 800f4c4:	f7f0 fee6 	bl	8000294 <__adddf3>
 800f4c8:	4604      	mov	r4, r0
 800f4ca:	460d      	mov	r5, r1
 800f4cc:	f7f1 fb48 	bl	8000b60 <__aeabi_d2iz>
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	4607      	mov	r7, r0
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7f1 fb03 	bl	8000ae4 <__aeabi_dcmplt>
 800f4de:	b140      	cbz	r0, 800f4f2 <_dtoa_r+0x16a>
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	f7f1 f823 	bl	800052c <__aeabi_i2d>
 800f4e6:	4622      	mov	r2, r4
 800f4e8:	462b      	mov	r3, r5
 800f4ea:	f7f1 faf1 	bl	8000ad0 <__aeabi_dcmpeq>
 800f4ee:	b900      	cbnz	r0, 800f4f2 <_dtoa_r+0x16a>
 800f4f0:	3f01      	subs	r7, #1
 800f4f2:	2f16      	cmp	r7, #22
 800f4f4:	d852      	bhi.n	800f59c <_dtoa_r+0x214>
 800f4f6:	4b5d      	ldr	r3, [pc, #372]	@ (800f66c <_dtoa_r+0x2e4>)
 800f4f8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	f7f1 faee 	bl	8000ae4 <__aeabi_dcmplt>
 800f508:	2800      	cmp	r0, #0
 800f50a:	d049      	beq.n	800f5a0 <_dtoa_r+0x218>
 800f50c:	3f01      	subs	r7, #1
 800f50e:	2300      	movs	r3, #0
 800f510:	9310      	str	r3, [sp, #64]	@ 0x40
 800f512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f514:	1b9b      	subs	r3, r3, r6
 800f516:	1e5a      	subs	r2, r3, #1
 800f518:	bf4c      	ite	mi
 800f51a:	f1c3 0301 	rsbmi	r3, r3, #1
 800f51e:	2300      	movpl	r3, #0
 800f520:	9206      	str	r2, [sp, #24]
 800f522:	bf45      	ittet	mi
 800f524:	9300      	strmi	r3, [sp, #0]
 800f526:	2300      	movmi	r3, #0
 800f528:	9300      	strpl	r3, [sp, #0]
 800f52a:	9306      	strmi	r3, [sp, #24]
 800f52c:	2f00      	cmp	r7, #0
 800f52e:	db39      	blt.n	800f5a4 <_dtoa_r+0x21c>
 800f530:	9b06      	ldr	r3, [sp, #24]
 800f532:	970d      	str	r7, [sp, #52]	@ 0x34
 800f534:	443b      	add	r3, r7
 800f536:	9306      	str	r3, [sp, #24]
 800f538:	2300      	movs	r3, #0
 800f53a:	9308      	str	r3, [sp, #32]
 800f53c:	9b07      	ldr	r3, [sp, #28]
 800f53e:	2b09      	cmp	r3, #9
 800f540:	d863      	bhi.n	800f60a <_dtoa_r+0x282>
 800f542:	2b05      	cmp	r3, #5
 800f544:	bfc5      	ittet	gt
 800f546:	3b04      	subgt	r3, #4
 800f548:	2400      	movgt	r4, #0
 800f54a:	2401      	movle	r4, #1
 800f54c:	9307      	strgt	r3, [sp, #28]
 800f54e:	9b07      	ldr	r3, [sp, #28]
 800f550:	3b02      	subs	r3, #2
 800f552:	2b03      	cmp	r3, #3
 800f554:	d865      	bhi.n	800f622 <_dtoa_r+0x29a>
 800f556:	e8df f003 	tbb	[pc, r3]
 800f55a:	5654      	.short	0x5654
 800f55c:	2d39      	.short	0x2d39
 800f55e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f562:	441e      	add	r6, r3
 800f564:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f568:	2b20      	cmp	r3, #32
 800f56a:	bfc9      	itett	gt
 800f56c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f570:	f1c3 0320 	rsble	r3, r3, #32
 800f574:	409f      	lslgt	r7, r3
 800f576:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f57a:	bfd8      	it	le
 800f57c:	fa04 f003 	lslle.w	r0, r4, r3
 800f580:	f106 36ff 	add.w	r6, r6, #4294967295
 800f584:	bfc4      	itt	gt
 800f586:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f58a:	ea47 0003 	orrgt.w	r0, r7, r3
 800f58e:	f7f0 ffbd 	bl	800050c <__aeabi_ui2d>
 800f592:	2201      	movs	r2, #1
 800f594:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f598:	9212      	str	r2, [sp, #72]	@ 0x48
 800f59a:	e776      	b.n	800f48a <_dtoa_r+0x102>
 800f59c:	2301      	movs	r3, #1
 800f59e:	e7b7      	b.n	800f510 <_dtoa_r+0x188>
 800f5a0:	9010      	str	r0, [sp, #64]	@ 0x40
 800f5a2:	e7b6      	b.n	800f512 <_dtoa_r+0x18a>
 800f5a4:	9b00      	ldr	r3, [sp, #0]
 800f5a6:	1bdb      	subs	r3, r3, r7
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	427b      	negs	r3, r7
 800f5ac:	9308      	str	r3, [sp, #32]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	930d      	str	r3, [sp, #52]	@ 0x34
 800f5b2:	e7c3      	b.n	800f53c <_dtoa_r+0x1b4>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5ba:	eb07 0b03 	add.w	fp, r7, r3
 800f5be:	f10b 0301 	add.w	r3, fp, #1
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	bfb8      	it	lt
 800f5c8:	2301      	movlt	r3, #1
 800f5ca:	e006      	b.n	800f5da <_dtoa_r+0x252>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	dd28      	ble.n	800f628 <_dtoa_r+0x2a0>
 800f5d6:	469b      	mov	fp, r3
 800f5d8:	9303      	str	r3, [sp, #12]
 800f5da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f5de:	2100      	movs	r1, #0
 800f5e0:	2204      	movs	r2, #4
 800f5e2:	f102 0514 	add.w	r5, r2, #20
 800f5e6:	429d      	cmp	r5, r3
 800f5e8:	d926      	bls.n	800f638 <_dtoa_r+0x2b0>
 800f5ea:	6041      	str	r1, [r0, #4]
 800f5ec:	4648      	mov	r0, r9
 800f5ee:	f000 fd9d 	bl	801012c <_Balloc>
 800f5f2:	4682      	mov	sl, r0
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d141      	bne.n	800f67c <_dtoa_r+0x2f4>
 800f5f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f670 <_dtoa_r+0x2e8>)
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	f240 11af 	movw	r1, #431	@ 0x1af
 800f600:	e6d9      	b.n	800f3b6 <_dtoa_r+0x2e>
 800f602:	2300      	movs	r3, #0
 800f604:	e7e3      	b.n	800f5ce <_dtoa_r+0x246>
 800f606:	2300      	movs	r3, #0
 800f608:	e7d5      	b.n	800f5b6 <_dtoa_r+0x22e>
 800f60a:	2401      	movs	r4, #1
 800f60c:	2300      	movs	r3, #0
 800f60e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f610:	9307      	str	r3, [sp, #28]
 800f612:	f04f 3bff 	mov.w	fp, #4294967295
 800f616:	2200      	movs	r2, #0
 800f618:	2312      	movs	r3, #18
 800f61a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f61e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f620:	e7db      	b.n	800f5da <_dtoa_r+0x252>
 800f622:	2301      	movs	r3, #1
 800f624:	9309      	str	r3, [sp, #36]	@ 0x24
 800f626:	e7f4      	b.n	800f612 <_dtoa_r+0x28a>
 800f628:	f04f 0b01 	mov.w	fp, #1
 800f62c:	465b      	mov	r3, fp
 800f62e:	f8cd b00c 	str.w	fp, [sp, #12]
 800f632:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f636:	e7d0      	b.n	800f5da <_dtoa_r+0x252>
 800f638:	3101      	adds	r1, #1
 800f63a:	0052      	lsls	r2, r2, #1
 800f63c:	e7d1      	b.n	800f5e2 <_dtoa_r+0x25a>
 800f63e:	bf00      	nop
 800f640:	636f4361 	.word	0x636f4361
 800f644:	3fd287a7 	.word	0x3fd287a7
 800f648:	8b60c8b3 	.word	0x8b60c8b3
 800f64c:	3fc68a28 	.word	0x3fc68a28
 800f650:	509f79fb 	.word	0x509f79fb
 800f654:	3fd34413 	.word	0x3fd34413
 800f658:	0803025a 	.word	0x0803025a
 800f65c:	08030271 	.word	0x08030271
 800f660:	7ff00000 	.word	0x7ff00000
 800f664:	08030225 	.word	0x08030225
 800f668:	3ff80000 	.word	0x3ff80000
 800f66c:	08030420 	.word	0x08030420
 800f670:	080302c9 	.word	0x080302c9
 800f674:	08030256 	.word	0x08030256
 800f678:	08030224 	.word	0x08030224
 800f67c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f680:	6018      	str	r0, [r3, #0]
 800f682:	9b03      	ldr	r3, [sp, #12]
 800f684:	2b0e      	cmp	r3, #14
 800f686:	f200 80a1 	bhi.w	800f7cc <_dtoa_r+0x444>
 800f68a:	2c00      	cmp	r4, #0
 800f68c:	f000 809e 	beq.w	800f7cc <_dtoa_r+0x444>
 800f690:	2f00      	cmp	r7, #0
 800f692:	dd33      	ble.n	800f6fc <_dtoa_r+0x374>
 800f694:	f007 020f 	and.w	r2, r7, #15
 800f698:	4b9b      	ldr	r3, [pc, #620]	@ (800f908 <_dtoa_r+0x580>)
 800f69a:	05f8      	lsls	r0, r7, #23
 800f69c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f6a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6a4:	ed93 7b00 	vldr	d7, [r3]
 800f6a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f6ac:	d516      	bpl.n	800f6dc <_dtoa_r+0x354>
 800f6ae:	4b97      	ldr	r3, [pc, #604]	@ (800f90c <_dtoa_r+0x584>)
 800f6b0:	f004 040f 	and.w	r4, r4, #15
 800f6b4:	2603      	movs	r6, #3
 800f6b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f6ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f6be:	f7f1 f8c9 	bl	8000854 <__aeabi_ddiv>
 800f6c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6c6:	4d91      	ldr	r5, [pc, #580]	@ (800f90c <_dtoa_r+0x584>)
 800f6c8:	b954      	cbnz	r4, 800f6e0 <_dtoa_r+0x358>
 800f6ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6d2:	f7f1 f8bf 	bl	8000854 <__aeabi_ddiv>
 800f6d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6da:	e028      	b.n	800f72e <_dtoa_r+0x3a6>
 800f6dc:	2602      	movs	r6, #2
 800f6de:	e7f2      	b.n	800f6c6 <_dtoa_r+0x33e>
 800f6e0:	07e1      	lsls	r1, r4, #31
 800f6e2:	d508      	bpl.n	800f6f6 <_dtoa_r+0x36e>
 800f6e4:	3601      	adds	r6, #1
 800f6e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f6ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f6ee:	f7f0 ff87 	bl	8000600 <__aeabi_dmul>
 800f6f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f6f6:	1064      	asrs	r4, r4, #1
 800f6f8:	3508      	adds	r5, #8
 800f6fa:	e7e5      	b.n	800f6c8 <_dtoa_r+0x340>
 800f6fc:	f000 80af 	beq.w	800f85e <_dtoa_r+0x4d6>
 800f700:	427c      	negs	r4, r7
 800f702:	4b81      	ldr	r3, [pc, #516]	@ (800f908 <_dtoa_r+0x580>)
 800f704:	4d81      	ldr	r5, [pc, #516]	@ (800f90c <_dtoa_r+0x584>)
 800f706:	2602      	movs	r6, #2
 800f708:	f004 020f 	and.w	r2, r4, #15
 800f70c:	1124      	asrs	r4, r4, #4
 800f70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f712:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	f7f0 ff71 	bl	8000600 <__aeabi_dmul>
 800f71e:	2300      	movs	r3, #0
 800f720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f724:	2c00      	cmp	r4, #0
 800f726:	f040 808f 	bne.w	800f848 <_dtoa_r+0x4c0>
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1d3      	bne.n	800f6d6 <_dtoa_r+0x34e>
 800f72e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f730:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f734:	2b00      	cmp	r3, #0
 800f736:	f000 8094 	beq.w	800f862 <_dtoa_r+0x4da>
 800f73a:	2200      	movs	r2, #0
 800f73c:	4b74      	ldr	r3, [pc, #464]	@ (800f910 <_dtoa_r+0x588>)
 800f73e:	4620      	mov	r0, r4
 800f740:	4629      	mov	r1, r5
 800f742:	f7f1 f9cf 	bl	8000ae4 <__aeabi_dcmplt>
 800f746:	2800      	cmp	r0, #0
 800f748:	f000 808b 	beq.w	800f862 <_dtoa_r+0x4da>
 800f74c:	9b03      	ldr	r3, [sp, #12]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f000 8087 	beq.w	800f862 <_dtoa_r+0x4da>
 800f754:	f1bb 0f00 	cmp.w	fp, #0
 800f758:	dd34      	ble.n	800f7c4 <_dtoa_r+0x43c>
 800f75a:	4620      	mov	r0, r4
 800f75c:	f107 38ff 	add.w	r8, r7, #4294967295
 800f760:	3601      	adds	r6, #1
 800f762:	465c      	mov	r4, fp
 800f764:	2200      	movs	r2, #0
 800f766:	4b6b      	ldr	r3, [pc, #428]	@ (800f914 <_dtoa_r+0x58c>)
 800f768:	4629      	mov	r1, r5
 800f76a:	f7f0 ff49 	bl	8000600 <__aeabi_dmul>
 800f76e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f772:	4630      	mov	r0, r6
 800f774:	f7f0 feda 	bl	800052c <__aeabi_i2d>
 800f778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f77c:	f7f0 ff40 	bl	8000600 <__aeabi_dmul>
 800f780:	2200      	movs	r2, #0
 800f782:	4b65      	ldr	r3, [pc, #404]	@ (800f918 <_dtoa_r+0x590>)
 800f784:	f7f0 fd86 	bl	8000294 <__adddf3>
 800f788:	4605      	mov	r5, r0
 800f78a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f78e:	2c00      	cmp	r4, #0
 800f790:	d16a      	bne.n	800f868 <_dtoa_r+0x4e0>
 800f792:	2200      	movs	r2, #0
 800f794:	4b61      	ldr	r3, [pc, #388]	@ (800f91c <_dtoa_r+0x594>)
 800f796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f79a:	f7f0 fd79 	bl	8000290 <__aeabi_dsub>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f7a6:	462a      	mov	r2, r5
 800f7a8:	4633      	mov	r3, r6
 800f7aa:	f7f1 f9b9 	bl	8000b20 <__aeabi_dcmpgt>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f040 8298 	bne.w	800fce4 <_dtoa_r+0x95c>
 800f7b4:	462a      	mov	r2, r5
 800f7b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f7ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7be:	f7f1 f991 	bl	8000ae4 <__aeabi_dcmplt>
 800f7c2:	bb38      	cbnz	r0, 800f814 <_dtoa_r+0x48c>
 800f7c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f7c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f7cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f2c0 8157 	blt.w	800fa82 <_dtoa_r+0x6fa>
 800f7d4:	2f0e      	cmp	r7, #14
 800f7d6:	f300 8154 	bgt.w	800fa82 <_dtoa_r+0x6fa>
 800f7da:	4b4b      	ldr	r3, [pc, #300]	@ (800f908 <_dtoa_r+0x580>)
 800f7dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f7e0:	ed93 7b00 	vldr	d7, [r3]
 800f7e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	ed8d 7b00 	vstr	d7, [sp]
 800f7ec:	f280 80e5 	bge.w	800f9ba <_dtoa_r+0x632>
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	f300 80e1 	bgt.w	800f9ba <_dtoa_r+0x632>
 800f7f8:	d10c      	bne.n	800f814 <_dtoa_r+0x48c>
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	4b47      	ldr	r3, [pc, #284]	@ (800f91c <_dtoa_r+0x594>)
 800f7fe:	ec51 0b17 	vmov	r0, r1, d7
 800f802:	f7f0 fefd 	bl	8000600 <__aeabi_dmul>
 800f806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f80a:	f7f1 f97f 	bl	8000b0c <__aeabi_dcmpge>
 800f80e:	2800      	cmp	r0, #0
 800f810:	f000 8266 	beq.w	800fce0 <_dtoa_r+0x958>
 800f814:	2400      	movs	r4, #0
 800f816:	4625      	mov	r5, r4
 800f818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f81a:	4656      	mov	r6, sl
 800f81c:	ea6f 0803 	mvn.w	r8, r3
 800f820:	2700      	movs	r7, #0
 800f822:	4621      	mov	r1, r4
 800f824:	4648      	mov	r0, r9
 800f826:	f000 fcc1 	bl	80101ac <_Bfree>
 800f82a:	2d00      	cmp	r5, #0
 800f82c:	f000 80bd 	beq.w	800f9aa <_dtoa_r+0x622>
 800f830:	b12f      	cbz	r7, 800f83e <_dtoa_r+0x4b6>
 800f832:	42af      	cmp	r7, r5
 800f834:	d003      	beq.n	800f83e <_dtoa_r+0x4b6>
 800f836:	4639      	mov	r1, r7
 800f838:	4648      	mov	r0, r9
 800f83a:	f000 fcb7 	bl	80101ac <_Bfree>
 800f83e:	4629      	mov	r1, r5
 800f840:	4648      	mov	r0, r9
 800f842:	f000 fcb3 	bl	80101ac <_Bfree>
 800f846:	e0b0      	b.n	800f9aa <_dtoa_r+0x622>
 800f848:	07e2      	lsls	r2, r4, #31
 800f84a:	d505      	bpl.n	800f858 <_dtoa_r+0x4d0>
 800f84c:	3601      	adds	r6, #1
 800f84e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f852:	f7f0 fed5 	bl	8000600 <__aeabi_dmul>
 800f856:	2301      	movs	r3, #1
 800f858:	1064      	asrs	r4, r4, #1
 800f85a:	3508      	adds	r5, #8
 800f85c:	e762      	b.n	800f724 <_dtoa_r+0x39c>
 800f85e:	2602      	movs	r6, #2
 800f860:	e765      	b.n	800f72e <_dtoa_r+0x3a6>
 800f862:	46b8      	mov	r8, r7
 800f864:	9c03      	ldr	r4, [sp, #12]
 800f866:	e784      	b.n	800f772 <_dtoa_r+0x3ea>
 800f868:	4b27      	ldr	r3, [pc, #156]	@ (800f908 <_dtoa_r+0x580>)
 800f86a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f86c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f870:	4454      	add	r4, sl
 800f872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f876:	2900      	cmp	r1, #0
 800f878:	d054      	beq.n	800f924 <_dtoa_r+0x59c>
 800f87a:	2000      	movs	r0, #0
 800f87c:	4928      	ldr	r1, [pc, #160]	@ (800f920 <_dtoa_r+0x598>)
 800f87e:	f7f0 ffe9 	bl	8000854 <__aeabi_ddiv>
 800f882:	4633      	mov	r3, r6
 800f884:	4656      	mov	r6, sl
 800f886:	462a      	mov	r2, r5
 800f888:	f7f0 fd02 	bl	8000290 <__aeabi_dsub>
 800f88c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f894:	f7f1 f964 	bl	8000b60 <__aeabi_d2iz>
 800f898:	4605      	mov	r5, r0
 800f89a:	f7f0 fe47 	bl	800052c <__aeabi_i2d>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	3530      	adds	r5, #48	@ 0x30
 800f8a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8a8:	f7f0 fcf2 	bl	8000290 <__aeabi_dsub>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	f806 5b01 	strb.w	r5, [r6], #1
 800f8b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f8b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f8bc:	f7f1 f912 	bl	8000ae4 <__aeabi_dcmplt>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d172      	bne.n	800f9aa <_dtoa_r+0x622>
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	4912      	ldr	r1, [pc, #72]	@ (800f910 <_dtoa_r+0x588>)
 800f8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8cc:	f7f0 fce0 	bl	8000290 <__aeabi_dsub>
 800f8d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f8d4:	f7f1 f906 	bl	8000ae4 <__aeabi_dcmplt>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	f040 80b4 	bne.w	800fa46 <_dtoa_r+0x6be>
 800f8de:	42a6      	cmp	r6, r4
 800f8e0:	f43f af70 	beq.w	800f7c4 <_dtoa_r+0x43c>
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f914 <_dtoa_r+0x58c>)
 800f8e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f8ec:	f7f0 fe88 	bl	8000600 <__aeabi_dmul>
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4b08      	ldr	r3, [pc, #32]	@ (800f914 <_dtoa_r+0x58c>)
 800f8f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f8f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8fc:	f7f0 fe80 	bl	8000600 <__aeabi_dmul>
 800f900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f904:	e7c4      	b.n	800f890 <_dtoa_r+0x508>
 800f906:	bf00      	nop
 800f908:	08030420 	.word	0x08030420
 800f90c:	080303f8 	.word	0x080303f8
 800f910:	3ff00000 	.word	0x3ff00000
 800f914:	40240000 	.word	0x40240000
 800f918:	401c0000 	.word	0x401c0000
 800f91c:	40140000 	.word	0x40140000
 800f920:	3fe00000 	.word	0x3fe00000
 800f924:	4631      	mov	r1, r6
 800f926:	4656      	mov	r6, sl
 800f928:	4628      	mov	r0, r5
 800f92a:	f7f0 fe69 	bl	8000600 <__aeabi_dmul>
 800f92e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f930:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f938:	f7f1 f912 	bl	8000b60 <__aeabi_d2iz>
 800f93c:	4605      	mov	r5, r0
 800f93e:	f7f0 fdf5 	bl	800052c <__aeabi_i2d>
 800f942:	4602      	mov	r2, r0
 800f944:	3530      	adds	r5, #48	@ 0x30
 800f946:	460b      	mov	r3, r1
 800f948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f94c:	f7f0 fca0 	bl	8000290 <__aeabi_dsub>
 800f950:	f806 5b01 	strb.w	r5, [r6], #1
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	42a6      	cmp	r6, r4
 800f95a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f95e:	f04f 0200 	mov.w	r2, #0
 800f962:	d124      	bne.n	800f9ae <_dtoa_r+0x626>
 800f964:	4baf      	ldr	r3, [pc, #700]	@ (800fc24 <_dtoa_r+0x89c>)
 800f966:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f96a:	f7f0 fc93 	bl	8000294 <__adddf3>
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f976:	f7f1 f8d3 	bl	8000b20 <__aeabi_dcmpgt>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d163      	bne.n	800fa46 <_dtoa_r+0x6be>
 800f97e:	2000      	movs	r0, #0
 800f980:	49a8      	ldr	r1, [pc, #672]	@ (800fc24 <_dtoa_r+0x89c>)
 800f982:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f986:	f7f0 fc83 	bl	8000290 <__aeabi_dsub>
 800f98a:	4602      	mov	r2, r0
 800f98c:	460b      	mov	r3, r1
 800f98e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f992:	f7f1 f8a7 	bl	8000ae4 <__aeabi_dcmplt>
 800f996:	2800      	cmp	r0, #0
 800f998:	f43f af14 	beq.w	800f7c4 <_dtoa_r+0x43c>
 800f99c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f99e:	1e73      	subs	r3, r6, #1
 800f9a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f9a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f9a6:	2b30      	cmp	r3, #48	@ 0x30
 800f9a8:	d0f8      	beq.n	800f99c <_dtoa_r+0x614>
 800f9aa:	4647      	mov	r7, r8
 800f9ac:	e03b      	b.n	800fa26 <_dtoa_r+0x69e>
 800f9ae:	4b9e      	ldr	r3, [pc, #632]	@ (800fc28 <_dtoa_r+0x8a0>)
 800f9b0:	f7f0 fe26 	bl	8000600 <__aeabi_dmul>
 800f9b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9b8:	e7bc      	b.n	800f934 <_dtoa_r+0x5ac>
 800f9ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f9be:	4656      	mov	r6, sl
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9c8:	f7f0 ff44 	bl	8000854 <__aeabi_ddiv>
 800f9cc:	f7f1 f8c8 	bl	8000b60 <__aeabi_d2iz>
 800f9d0:	4680      	mov	r8, r0
 800f9d2:	f7f0 fdab 	bl	800052c <__aeabi_i2d>
 800f9d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9da:	f7f0 fe11 	bl	8000600 <__aeabi_dmul>
 800f9de:	4602      	mov	r2, r0
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	f7f0 fc51 	bl	8000290 <__aeabi_dsub>
 800f9ee:	9d03      	ldr	r5, [sp, #12]
 800f9f0:	f806 4b01 	strb.w	r4, [r6], #1
 800f9f4:	eba6 040a 	sub.w	r4, r6, sl
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	42a5      	cmp	r5, r4
 800f9fe:	d133      	bne.n	800fa68 <_dtoa_r+0x6e0>
 800fa00:	f7f0 fc48 	bl	8000294 <__adddf3>
 800fa04:	4604      	mov	r4, r0
 800fa06:	460d      	mov	r5, r1
 800fa08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa0c:	f7f1 f888 	bl	8000b20 <__aeabi_dcmpgt>
 800fa10:	b9c0      	cbnz	r0, 800fa44 <_dtoa_r+0x6bc>
 800fa12:	4620      	mov	r0, r4
 800fa14:	4629      	mov	r1, r5
 800fa16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa1a:	f7f1 f859 	bl	8000ad0 <__aeabi_dcmpeq>
 800fa1e:	b110      	cbz	r0, 800fa26 <_dtoa_r+0x69e>
 800fa20:	f018 0f01 	tst.w	r8, #1
 800fa24:	d10e      	bne.n	800fa44 <_dtoa_r+0x6bc>
 800fa26:	9902      	ldr	r1, [sp, #8]
 800fa28:	4648      	mov	r0, r9
 800fa2a:	f000 fbbf 	bl	80101ac <_Bfree>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	3701      	adds	r7, #1
 800fa32:	7033      	strb	r3, [r6, #0]
 800fa34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fa36:	601f      	str	r7, [r3, #0]
 800fa38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f000 824c 	beq.w	800fed8 <_dtoa_r+0xb50>
 800fa40:	601e      	str	r6, [r3, #0]
 800fa42:	e249      	b.n	800fed8 <_dtoa_r+0xb50>
 800fa44:	46b8      	mov	r8, r7
 800fa46:	4633      	mov	r3, r6
 800fa48:	461e      	mov	r6, r3
 800fa4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa4e:	2a39      	cmp	r2, #57	@ 0x39
 800fa50:	d106      	bne.n	800fa60 <_dtoa_r+0x6d8>
 800fa52:	459a      	cmp	sl, r3
 800fa54:	d1f8      	bne.n	800fa48 <_dtoa_r+0x6c0>
 800fa56:	2230      	movs	r2, #48	@ 0x30
 800fa58:	f108 0801 	add.w	r8, r8, #1
 800fa5c:	f88a 2000 	strb.w	r2, [sl]
 800fa60:	781a      	ldrb	r2, [r3, #0]
 800fa62:	3201      	adds	r2, #1
 800fa64:	701a      	strb	r2, [r3, #0]
 800fa66:	e7a0      	b.n	800f9aa <_dtoa_r+0x622>
 800fa68:	2200      	movs	r2, #0
 800fa6a:	4b6f      	ldr	r3, [pc, #444]	@ (800fc28 <_dtoa_r+0x8a0>)
 800fa6c:	f7f0 fdc8 	bl	8000600 <__aeabi_dmul>
 800fa70:	2200      	movs	r2, #0
 800fa72:	2300      	movs	r3, #0
 800fa74:	4604      	mov	r4, r0
 800fa76:	460d      	mov	r5, r1
 800fa78:	f7f1 f82a 	bl	8000ad0 <__aeabi_dcmpeq>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d09f      	beq.n	800f9c0 <_dtoa_r+0x638>
 800fa80:	e7d1      	b.n	800fa26 <_dtoa_r+0x69e>
 800fa82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa84:	2a00      	cmp	r2, #0
 800fa86:	f000 80ea 	beq.w	800fc5e <_dtoa_r+0x8d6>
 800fa8a:	9a07      	ldr	r2, [sp, #28]
 800fa8c:	2a01      	cmp	r2, #1
 800fa8e:	f300 80cd 	bgt.w	800fc2c <_dtoa_r+0x8a4>
 800fa92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	f000 80c1 	beq.w	800fc1c <_dtoa_r+0x894>
 800fa9a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fa9e:	9c08      	ldr	r4, [sp, #32]
 800faa0:	9e00      	ldr	r6, [sp, #0]
 800faa2:	9a00      	ldr	r2, [sp, #0]
 800faa4:	2101      	movs	r1, #1
 800faa6:	4648      	mov	r0, r9
 800faa8:	441a      	add	r2, r3
 800faaa:	9200      	str	r2, [sp, #0]
 800faac:	9a06      	ldr	r2, [sp, #24]
 800faae:	441a      	add	r2, r3
 800fab0:	9206      	str	r2, [sp, #24]
 800fab2:	f000 fc7b 	bl	80103ac <__i2b>
 800fab6:	4605      	mov	r5, r0
 800fab8:	b166      	cbz	r6, 800fad4 <_dtoa_r+0x74c>
 800faba:	9b06      	ldr	r3, [sp, #24]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	dd09      	ble.n	800fad4 <_dtoa_r+0x74c>
 800fac0:	42b3      	cmp	r3, r6
 800fac2:	9a00      	ldr	r2, [sp, #0]
 800fac4:	bfa8      	it	ge
 800fac6:	4633      	movge	r3, r6
 800fac8:	1ad2      	subs	r2, r2, r3
 800faca:	1af6      	subs	r6, r6, r3
 800facc:	9200      	str	r2, [sp, #0]
 800face:	9a06      	ldr	r2, [sp, #24]
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	9306      	str	r3, [sp, #24]
 800fad4:	9b08      	ldr	r3, [sp, #32]
 800fad6:	b30b      	cbz	r3, 800fb1c <_dtoa_r+0x794>
 800fad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f000 80c6 	beq.w	800fc6c <_dtoa_r+0x8e4>
 800fae0:	2c00      	cmp	r4, #0
 800fae2:	f000 80c0 	beq.w	800fc66 <_dtoa_r+0x8de>
 800fae6:	4629      	mov	r1, r5
 800fae8:	4622      	mov	r2, r4
 800faea:	4648      	mov	r0, r9
 800faec:	f000 fd18 	bl	8010520 <__pow5mult>
 800faf0:	9a02      	ldr	r2, [sp, #8]
 800faf2:	4601      	mov	r1, r0
 800faf4:	4605      	mov	r5, r0
 800faf6:	4648      	mov	r0, r9
 800faf8:	f000 fc6e 	bl	80103d8 <__multiply>
 800fafc:	9902      	ldr	r1, [sp, #8]
 800fafe:	4680      	mov	r8, r0
 800fb00:	4648      	mov	r0, r9
 800fb02:	f000 fb53 	bl	80101ac <_Bfree>
 800fb06:	9b08      	ldr	r3, [sp, #32]
 800fb08:	1b1b      	subs	r3, r3, r4
 800fb0a:	9308      	str	r3, [sp, #32]
 800fb0c:	f000 80b1 	beq.w	800fc72 <_dtoa_r+0x8ea>
 800fb10:	9a08      	ldr	r2, [sp, #32]
 800fb12:	4641      	mov	r1, r8
 800fb14:	4648      	mov	r0, r9
 800fb16:	f000 fd03 	bl	8010520 <__pow5mult>
 800fb1a:	9002      	str	r0, [sp, #8]
 800fb1c:	2101      	movs	r1, #1
 800fb1e:	4648      	mov	r0, r9
 800fb20:	f000 fc44 	bl	80103ac <__i2b>
 800fb24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb26:	4604      	mov	r4, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f000 81d9 	beq.w	800fee0 <_dtoa_r+0xb58>
 800fb2e:	461a      	mov	r2, r3
 800fb30:	4601      	mov	r1, r0
 800fb32:	4648      	mov	r0, r9
 800fb34:	f000 fcf4 	bl	8010520 <__pow5mult>
 800fb38:	9b07      	ldr	r3, [sp, #28]
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	f300 809f 	bgt.w	800fc80 <_dtoa_r+0x8f8>
 800fb42:	9b04      	ldr	r3, [sp, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f040 8097 	bne.w	800fc78 <_dtoa_r+0x8f0>
 800fb4a:	9b05      	ldr	r3, [sp, #20]
 800fb4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f040 8093 	bne.w	800fc7c <_dtoa_r+0x8f4>
 800fb56:	9b05      	ldr	r3, [sp, #20]
 800fb58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb5c:	0d1b      	lsrs	r3, r3, #20
 800fb5e:	051b      	lsls	r3, r3, #20
 800fb60:	b133      	cbz	r3, 800fb70 <_dtoa_r+0x7e8>
 800fb62:	9b00      	ldr	r3, [sp, #0]
 800fb64:	3301      	adds	r3, #1
 800fb66:	9300      	str	r3, [sp, #0]
 800fb68:	9b06      	ldr	r3, [sp, #24]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	9306      	str	r3, [sp, #24]
 800fb6e:	2301      	movs	r3, #1
 800fb70:	9308      	str	r3, [sp, #32]
 800fb72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f000 81b9 	beq.w	800feec <_dtoa_r+0xb64>
 800fb7a:	6923      	ldr	r3, [r4, #16]
 800fb7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb80:	6918      	ldr	r0, [r3, #16]
 800fb82:	f000 fbc7 	bl	8010314 <__hi0bits>
 800fb86:	f1c0 0020 	rsb	r0, r0, #32
 800fb8a:	9b06      	ldr	r3, [sp, #24]
 800fb8c:	4418      	add	r0, r3
 800fb8e:	f010 001f 	ands.w	r0, r0, #31
 800fb92:	f000 8082 	beq.w	800fc9a <_dtoa_r+0x912>
 800fb96:	f1c0 0320 	rsb	r3, r0, #32
 800fb9a:	2b04      	cmp	r3, #4
 800fb9c:	dd73      	ble.n	800fc86 <_dtoa_r+0x8fe>
 800fb9e:	f1c0 001c 	rsb	r0, r0, #28
 800fba2:	9b00      	ldr	r3, [sp, #0]
 800fba4:	4403      	add	r3, r0
 800fba6:	4406      	add	r6, r0
 800fba8:	9300      	str	r3, [sp, #0]
 800fbaa:	9b06      	ldr	r3, [sp, #24]
 800fbac:	4403      	add	r3, r0
 800fbae:	9306      	str	r3, [sp, #24]
 800fbb0:	9b00      	ldr	r3, [sp, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	dd05      	ble.n	800fbc2 <_dtoa_r+0x83a>
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	9902      	ldr	r1, [sp, #8]
 800fbba:	4648      	mov	r0, r9
 800fbbc:	f000 fd0a 	bl	80105d4 <__lshift>
 800fbc0:	9002      	str	r0, [sp, #8]
 800fbc2:	9b06      	ldr	r3, [sp, #24]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	dd05      	ble.n	800fbd4 <_dtoa_r+0x84c>
 800fbc8:	4621      	mov	r1, r4
 800fbca:	461a      	mov	r2, r3
 800fbcc:	4648      	mov	r0, r9
 800fbce:	f000 fd01 	bl	80105d4 <__lshift>
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d061      	beq.n	800fc9e <_dtoa_r+0x916>
 800fbda:	4621      	mov	r1, r4
 800fbdc:	9802      	ldr	r0, [sp, #8]
 800fbde:	f000 fd65 	bl	80106ac <__mcmp>
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	da5b      	bge.n	800fc9e <_dtoa_r+0x916>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	220a      	movs	r2, #10
 800fbea:	9902      	ldr	r1, [sp, #8]
 800fbec:	4648      	mov	r0, r9
 800fbee:	f000 faff 	bl	80101f0 <__multadd>
 800fbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf4:	f107 38ff 	add.w	r8, r7, #4294967295
 800fbf8:	9002      	str	r0, [sp, #8]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f000 8178 	beq.w	800fef0 <_dtoa_r+0xb68>
 800fc00:	4629      	mov	r1, r5
 800fc02:	2300      	movs	r3, #0
 800fc04:	220a      	movs	r2, #10
 800fc06:	4648      	mov	r0, r9
 800fc08:	f000 faf2 	bl	80101f0 <__multadd>
 800fc0c:	f1bb 0f00 	cmp.w	fp, #0
 800fc10:	4605      	mov	r5, r0
 800fc12:	dc6f      	bgt.n	800fcf4 <_dtoa_r+0x96c>
 800fc14:	9b07      	ldr	r3, [sp, #28]
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	dc49      	bgt.n	800fcae <_dtoa_r+0x926>
 800fc1a:	e06b      	b.n	800fcf4 <_dtoa_r+0x96c>
 800fc1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fc1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fc22:	e73c      	b.n	800fa9e <_dtoa_r+0x716>
 800fc24:	3fe00000 	.word	0x3fe00000
 800fc28:	40240000 	.word	0x40240000
 800fc2c:	9b03      	ldr	r3, [sp, #12]
 800fc2e:	1e5c      	subs	r4, r3, #1
 800fc30:	9b08      	ldr	r3, [sp, #32]
 800fc32:	42a3      	cmp	r3, r4
 800fc34:	db09      	blt.n	800fc4a <_dtoa_r+0x8c2>
 800fc36:	1b1c      	subs	r4, r3, r4
 800fc38:	9b03      	ldr	r3, [sp, #12]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f6bf af30 	bge.w	800faa0 <_dtoa_r+0x718>
 800fc40:	9b00      	ldr	r3, [sp, #0]
 800fc42:	9a03      	ldr	r2, [sp, #12]
 800fc44:	1a9e      	subs	r6, r3, r2
 800fc46:	2300      	movs	r3, #0
 800fc48:	e72b      	b.n	800faa2 <_dtoa_r+0x71a>
 800fc4a:	9b08      	ldr	r3, [sp, #32]
 800fc4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc4e:	1ae3      	subs	r3, r4, r3
 800fc50:	9408      	str	r4, [sp, #32]
 800fc52:	9e00      	ldr	r6, [sp, #0]
 800fc54:	2400      	movs	r4, #0
 800fc56:	441a      	add	r2, r3
 800fc58:	9b03      	ldr	r3, [sp, #12]
 800fc5a:	920d      	str	r2, [sp, #52]	@ 0x34
 800fc5c:	e721      	b.n	800faa2 <_dtoa_r+0x71a>
 800fc5e:	9c08      	ldr	r4, [sp, #32]
 800fc60:	9e00      	ldr	r6, [sp, #0]
 800fc62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fc64:	e728      	b.n	800fab8 <_dtoa_r+0x730>
 800fc66:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fc6a:	e751      	b.n	800fb10 <_dtoa_r+0x788>
 800fc6c:	9a08      	ldr	r2, [sp, #32]
 800fc6e:	9902      	ldr	r1, [sp, #8]
 800fc70:	e750      	b.n	800fb14 <_dtoa_r+0x78c>
 800fc72:	f8cd 8008 	str.w	r8, [sp, #8]
 800fc76:	e751      	b.n	800fb1c <_dtoa_r+0x794>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	e779      	b.n	800fb70 <_dtoa_r+0x7e8>
 800fc7c:	9b04      	ldr	r3, [sp, #16]
 800fc7e:	e777      	b.n	800fb70 <_dtoa_r+0x7e8>
 800fc80:	2300      	movs	r3, #0
 800fc82:	9308      	str	r3, [sp, #32]
 800fc84:	e779      	b.n	800fb7a <_dtoa_r+0x7f2>
 800fc86:	d093      	beq.n	800fbb0 <_dtoa_r+0x828>
 800fc88:	331c      	adds	r3, #28
 800fc8a:	9a00      	ldr	r2, [sp, #0]
 800fc8c:	441a      	add	r2, r3
 800fc8e:	441e      	add	r6, r3
 800fc90:	9200      	str	r2, [sp, #0]
 800fc92:	9a06      	ldr	r2, [sp, #24]
 800fc94:	441a      	add	r2, r3
 800fc96:	9206      	str	r2, [sp, #24]
 800fc98:	e78a      	b.n	800fbb0 <_dtoa_r+0x828>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	e7f4      	b.n	800fc88 <_dtoa_r+0x900>
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	46b8      	mov	r8, r7
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	dc20      	bgt.n	800fce8 <_dtoa_r+0x960>
 800fca6:	469b      	mov	fp, r3
 800fca8:	9b07      	ldr	r3, [sp, #28]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	dd1e      	ble.n	800fcec <_dtoa_r+0x964>
 800fcae:	f1bb 0f00 	cmp.w	fp, #0
 800fcb2:	f47f adb1 	bne.w	800f818 <_dtoa_r+0x490>
 800fcb6:	4621      	mov	r1, r4
 800fcb8:	465b      	mov	r3, fp
 800fcba:	2205      	movs	r2, #5
 800fcbc:	4648      	mov	r0, r9
 800fcbe:	f000 fa97 	bl	80101f0 <__multadd>
 800fcc2:	4601      	mov	r1, r0
 800fcc4:	4604      	mov	r4, r0
 800fcc6:	9802      	ldr	r0, [sp, #8]
 800fcc8:	f000 fcf0 	bl	80106ac <__mcmp>
 800fccc:	2800      	cmp	r0, #0
 800fcce:	f77f ada3 	ble.w	800f818 <_dtoa_r+0x490>
 800fcd2:	4656      	mov	r6, sl
 800fcd4:	2331      	movs	r3, #49	@ 0x31
 800fcd6:	f108 0801 	add.w	r8, r8, #1
 800fcda:	f806 3b01 	strb.w	r3, [r6], #1
 800fcde:	e59f      	b.n	800f820 <_dtoa_r+0x498>
 800fce0:	46b8      	mov	r8, r7
 800fce2:	9c03      	ldr	r4, [sp, #12]
 800fce4:	4625      	mov	r5, r4
 800fce6:	e7f4      	b.n	800fcd2 <_dtoa_r+0x94a>
 800fce8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 8102 	beq.w	800fef8 <_dtoa_r+0xb70>
 800fcf4:	2e00      	cmp	r6, #0
 800fcf6:	dd05      	ble.n	800fd04 <_dtoa_r+0x97c>
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	4632      	mov	r2, r6
 800fcfc:	4648      	mov	r0, r9
 800fcfe:	f000 fc69 	bl	80105d4 <__lshift>
 800fd02:	4605      	mov	r5, r0
 800fd04:	9b08      	ldr	r3, [sp, #32]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d05c      	beq.n	800fdc4 <_dtoa_r+0xa3c>
 800fd0a:	6869      	ldr	r1, [r5, #4]
 800fd0c:	4648      	mov	r0, r9
 800fd0e:	f000 fa0d 	bl	801012c <_Balloc>
 800fd12:	4606      	mov	r6, r0
 800fd14:	b928      	cbnz	r0, 800fd22 <_dtoa_r+0x99a>
 800fd16:	4b83      	ldr	r3, [pc, #524]	@ (800ff24 <_dtoa_r+0xb9c>)
 800fd18:	4602      	mov	r2, r0
 800fd1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fd1e:	f7ff bb4a 	b.w	800f3b6 <_dtoa_r+0x2e>
 800fd22:	692a      	ldr	r2, [r5, #16]
 800fd24:	f105 010c 	add.w	r1, r5, #12
 800fd28:	300c      	adds	r0, #12
 800fd2a:	3202      	adds	r2, #2
 800fd2c:	0092      	lsls	r2, r2, #2
 800fd2e:	f7ff fa8a 	bl	800f246 <memcpy>
 800fd32:	2201      	movs	r2, #1
 800fd34:	4631      	mov	r1, r6
 800fd36:	4648      	mov	r0, r9
 800fd38:	f000 fc4c 	bl	80105d4 <__lshift>
 800fd3c:	f10a 0301 	add.w	r3, sl, #1
 800fd40:	462f      	mov	r7, r5
 800fd42:	4605      	mov	r5, r0
 800fd44:	9300      	str	r3, [sp, #0]
 800fd46:	eb0a 030b 	add.w	r3, sl, fp
 800fd4a:	9308      	str	r3, [sp, #32]
 800fd4c:	9b04      	ldr	r3, [sp, #16]
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	9306      	str	r3, [sp, #24]
 800fd54:	9b00      	ldr	r3, [sp, #0]
 800fd56:	4621      	mov	r1, r4
 800fd58:	9802      	ldr	r0, [sp, #8]
 800fd5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800fd5e:	f7ff fa85 	bl	800f26c <quorem>
 800fd62:	4603      	mov	r3, r0
 800fd64:	4639      	mov	r1, r7
 800fd66:	9003      	str	r0, [sp, #12]
 800fd68:	3330      	adds	r3, #48	@ 0x30
 800fd6a:	9802      	ldr	r0, [sp, #8]
 800fd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd6e:	f000 fc9d 	bl	80106ac <__mcmp>
 800fd72:	462a      	mov	r2, r5
 800fd74:	9004      	str	r0, [sp, #16]
 800fd76:	4621      	mov	r1, r4
 800fd78:	4648      	mov	r0, r9
 800fd7a:	f000 fcb3 	bl	80106e4 <__mdiff>
 800fd7e:	68c2      	ldr	r2, [r0, #12]
 800fd80:	4606      	mov	r6, r0
 800fd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd84:	bb02      	cbnz	r2, 800fdc8 <_dtoa_r+0xa40>
 800fd86:	4601      	mov	r1, r0
 800fd88:	9802      	ldr	r0, [sp, #8]
 800fd8a:	f000 fc8f 	bl	80106ac <__mcmp>
 800fd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd90:	4602      	mov	r2, r0
 800fd92:	4631      	mov	r1, r6
 800fd94:	4648      	mov	r0, r9
 800fd96:	920c      	str	r2, [sp, #48]	@ 0x30
 800fd98:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd9a:	f000 fa07 	bl	80101ac <_Bfree>
 800fd9e:	9b07      	ldr	r3, [sp, #28]
 800fda0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fda2:	9e00      	ldr	r6, [sp, #0]
 800fda4:	ea42 0103 	orr.w	r1, r2, r3
 800fda8:	9b06      	ldr	r3, [sp, #24]
 800fdaa:	4319      	orrs	r1, r3
 800fdac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdae:	d10d      	bne.n	800fdcc <_dtoa_r+0xa44>
 800fdb0:	2b39      	cmp	r3, #57	@ 0x39
 800fdb2:	d027      	beq.n	800fe04 <_dtoa_r+0xa7c>
 800fdb4:	9a04      	ldr	r2, [sp, #16]
 800fdb6:	2a00      	cmp	r2, #0
 800fdb8:	dd01      	ble.n	800fdbe <_dtoa_r+0xa36>
 800fdba:	9b03      	ldr	r3, [sp, #12]
 800fdbc:	3331      	adds	r3, #49	@ 0x31
 800fdbe:	f88b 3000 	strb.w	r3, [fp]
 800fdc2:	e52e      	b.n	800f822 <_dtoa_r+0x49a>
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	e7b9      	b.n	800fd3c <_dtoa_r+0x9b4>
 800fdc8:	2201      	movs	r2, #1
 800fdca:	e7e2      	b.n	800fd92 <_dtoa_r+0xa0a>
 800fdcc:	9904      	ldr	r1, [sp, #16]
 800fdce:	2900      	cmp	r1, #0
 800fdd0:	db04      	blt.n	800fddc <_dtoa_r+0xa54>
 800fdd2:	9807      	ldr	r0, [sp, #28]
 800fdd4:	4301      	orrs	r1, r0
 800fdd6:	9806      	ldr	r0, [sp, #24]
 800fdd8:	4301      	orrs	r1, r0
 800fdda:	d120      	bne.n	800fe1e <_dtoa_r+0xa96>
 800fddc:	2a00      	cmp	r2, #0
 800fdde:	ddee      	ble.n	800fdbe <_dtoa_r+0xa36>
 800fde0:	2201      	movs	r2, #1
 800fde2:	9902      	ldr	r1, [sp, #8]
 800fde4:	4648      	mov	r0, r9
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	f000 fbf4 	bl	80105d4 <__lshift>
 800fdec:	4621      	mov	r1, r4
 800fdee:	9002      	str	r0, [sp, #8]
 800fdf0:	f000 fc5c 	bl	80106ac <__mcmp>
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	9b00      	ldr	r3, [sp, #0]
 800fdf8:	dc02      	bgt.n	800fe00 <_dtoa_r+0xa78>
 800fdfa:	d1e0      	bne.n	800fdbe <_dtoa_r+0xa36>
 800fdfc:	07da      	lsls	r2, r3, #31
 800fdfe:	d5de      	bpl.n	800fdbe <_dtoa_r+0xa36>
 800fe00:	2b39      	cmp	r3, #57	@ 0x39
 800fe02:	d1da      	bne.n	800fdba <_dtoa_r+0xa32>
 800fe04:	2339      	movs	r3, #57	@ 0x39
 800fe06:	f88b 3000 	strb.w	r3, [fp]
 800fe0a:	4633      	mov	r3, r6
 800fe0c:	461e      	mov	r6, r3
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fe14:	2a39      	cmp	r2, #57	@ 0x39
 800fe16:	d04f      	beq.n	800feb8 <_dtoa_r+0xb30>
 800fe18:	3201      	adds	r2, #1
 800fe1a:	701a      	strb	r2, [r3, #0]
 800fe1c:	e501      	b.n	800f822 <_dtoa_r+0x49a>
 800fe1e:	2a00      	cmp	r2, #0
 800fe20:	dd03      	ble.n	800fe2a <_dtoa_r+0xaa2>
 800fe22:	2b39      	cmp	r3, #57	@ 0x39
 800fe24:	d0ee      	beq.n	800fe04 <_dtoa_r+0xa7c>
 800fe26:	3301      	adds	r3, #1
 800fe28:	e7c9      	b.n	800fdbe <_dtoa_r+0xa36>
 800fe2a:	9a00      	ldr	r2, [sp, #0]
 800fe2c:	9908      	ldr	r1, [sp, #32]
 800fe2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fe32:	428a      	cmp	r2, r1
 800fe34:	d029      	beq.n	800fe8a <_dtoa_r+0xb02>
 800fe36:	2300      	movs	r3, #0
 800fe38:	220a      	movs	r2, #10
 800fe3a:	9902      	ldr	r1, [sp, #8]
 800fe3c:	4648      	mov	r0, r9
 800fe3e:	f000 f9d7 	bl	80101f0 <__multadd>
 800fe42:	42af      	cmp	r7, r5
 800fe44:	9002      	str	r0, [sp, #8]
 800fe46:	f04f 0300 	mov.w	r3, #0
 800fe4a:	f04f 020a 	mov.w	r2, #10
 800fe4e:	4639      	mov	r1, r7
 800fe50:	4648      	mov	r0, r9
 800fe52:	d107      	bne.n	800fe64 <_dtoa_r+0xadc>
 800fe54:	f000 f9cc 	bl	80101f0 <__multadd>
 800fe58:	4607      	mov	r7, r0
 800fe5a:	4605      	mov	r5, r0
 800fe5c:	9b00      	ldr	r3, [sp, #0]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	e777      	b.n	800fd54 <_dtoa_r+0x9cc>
 800fe64:	f000 f9c4 	bl	80101f0 <__multadd>
 800fe68:	4629      	mov	r1, r5
 800fe6a:	4607      	mov	r7, r0
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	220a      	movs	r2, #10
 800fe70:	4648      	mov	r0, r9
 800fe72:	f000 f9bd 	bl	80101f0 <__multadd>
 800fe76:	4605      	mov	r5, r0
 800fe78:	e7f0      	b.n	800fe5c <_dtoa_r+0xad4>
 800fe7a:	f1bb 0f00 	cmp.w	fp, #0
 800fe7e:	f04f 0700 	mov.w	r7, #0
 800fe82:	bfcc      	ite	gt
 800fe84:	465e      	movgt	r6, fp
 800fe86:	2601      	movle	r6, #1
 800fe88:	4456      	add	r6, sl
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	9902      	ldr	r1, [sp, #8]
 800fe8e:	4648      	mov	r0, r9
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	f000 fb9f 	bl	80105d4 <__lshift>
 800fe96:	4621      	mov	r1, r4
 800fe98:	9002      	str	r0, [sp, #8]
 800fe9a:	f000 fc07 	bl	80106ac <__mcmp>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	dcb3      	bgt.n	800fe0a <_dtoa_r+0xa82>
 800fea2:	d102      	bne.n	800feaa <_dtoa_r+0xb22>
 800fea4:	9b00      	ldr	r3, [sp, #0]
 800fea6:	07db      	lsls	r3, r3, #31
 800fea8:	d4af      	bmi.n	800fe0a <_dtoa_r+0xa82>
 800feaa:	4633      	mov	r3, r6
 800feac:	461e      	mov	r6, r3
 800feae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800feb2:	2a30      	cmp	r2, #48	@ 0x30
 800feb4:	d0fa      	beq.n	800feac <_dtoa_r+0xb24>
 800feb6:	e4b4      	b.n	800f822 <_dtoa_r+0x49a>
 800feb8:	459a      	cmp	sl, r3
 800feba:	d1a7      	bne.n	800fe0c <_dtoa_r+0xa84>
 800febc:	2331      	movs	r3, #49	@ 0x31
 800febe:	f108 0801 	add.w	r8, r8, #1
 800fec2:	f88a 3000 	strb.w	r3, [sl]
 800fec6:	e4ac      	b.n	800f822 <_dtoa_r+0x49a>
 800fec8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800feca:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ff28 <_dtoa_r+0xba0>
 800fece:	b11b      	cbz	r3, 800fed8 <_dtoa_r+0xb50>
 800fed0:	f10a 0308 	add.w	r3, sl, #8
 800fed4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fed6:	6013      	str	r3, [r2, #0]
 800fed8:	4650      	mov	r0, sl
 800feda:	b017      	add	sp, #92	@ 0x5c
 800fedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee0:	9b07      	ldr	r3, [sp, #28]
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	f77f ae2d 	ble.w	800fb42 <_dtoa_r+0x7ba>
 800fee8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800feea:	9308      	str	r3, [sp, #32]
 800feec:	2001      	movs	r0, #1
 800feee:	e64c      	b.n	800fb8a <_dtoa_r+0x802>
 800fef0:	f1bb 0f00 	cmp.w	fp, #0
 800fef4:	f77f aed8 	ble.w	800fca8 <_dtoa_r+0x920>
 800fef8:	4656      	mov	r6, sl
 800fefa:	4621      	mov	r1, r4
 800fefc:	9802      	ldr	r0, [sp, #8]
 800fefe:	f7ff f9b5 	bl	800f26c <quorem>
 800ff02:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ff06:	f806 3b01 	strb.w	r3, [r6], #1
 800ff0a:	eba6 020a 	sub.w	r2, r6, sl
 800ff0e:	4593      	cmp	fp, r2
 800ff10:	ddb3      	ble.n	800fe7a <_dtoa_r+0xaf2>
 800ff12:	2300      	movs	r3, #0
 800ff14:	220a      	movs	r2, #10
 800ff16:	9902      	ldr	r1, [sp, #8]
 800ff18:	4648      	mov	r0, r9
 800ff1a:	f000 f969 	bl	80101f0 <__multadd>
 800ff1e:	9002      	str	r0, [sp, #8]
 800ff20:	e7eb      	b.n	800fefa <_dtoa_r+0xb72>
 800ff22:	bf00      	nop
 800ff24:	080302c9 	.word	0x080302c9
 800ff28:	0803024d 	.word	0x0803024d

0800ff2c <_free_r>:
 800ff2c:	b538      	push	{r3, r4, r5, lr}
 800ff2e:	4605      	mov	r5, r0
 800ff30:	2900      	cmp	r1, #0
 800ff32:	d041      	beq.n	800ffb8 <_free_r+0x8c>
 800ff34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff38:	1f0c      	subs	r4, r1, #4
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	bfb8      	it	lt
 800ff3e:	18e4      	addlt	r4, r4, r3
 800ff40:	f000 f8e8 	bl	8010114 <__malloc_lock>
 800ff44:	4a1d      	ldr	r2, [pc, #116]	@ (800ffbc <_free_r+0x90>)
 800ff46:	6813      	ldr	r3, [r2, #0]
 800ff48:	b933      	cbnz	r3, 800ff58 <_free_r+0x2c>
 800ff4a:	6063      	str	r3, [r4, #4]
 800ff4c:	6014      	str	r4, [r2, #0]
 800ff4e:	4628      	mov	r0, r5
 800ff50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff54:	f000 b8e4 	b.w	8010120 <__malloc_unlock>
 800ff58:	42a3      	cmp	r3, r4
 800ff5a:	d908      	bls.n	800ff6e <_free_r+0x42>
 800ff5c:	6820      	ldr	r0, [r4, #0]
 800ff5e:	1821      	adds	r1, r4, r0
 800ff60:	428b      	cmp	r3, r1
 800ff62:	bf01      	itttt	eq
 800ff64:	6819      	ldreq	r1, [r3, #0]
 800ff66:	685b      	ldreq	r3, [r3, #4]
 800ff68:	1809      	addeq	r1, r1, r0
 800ff6a:	6021      	streq	r1, [r4, #0]
 800ff6c:	e7ed      	b.n	800ff4a <_free_r+0x1e>
 800ff6e:	461a      	mov	r2, r3
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	b10b      	cbz	r3, 800ff78 <_free_r+0x4c>
 800ff74:	42a3      	cmp	r3, r4
 800ff76:	d9fa      	bls.n	800ff6e <_free_r+0x42>
 800ff78:	6811      	ldr	r1, [r2, #0]
 800ff7a:	1850      	adds	r0, r2, r1
 800ff7c:	42a0      	cmp	r0, r4
 800ff7e:	d10b      	bne.n	800ff98 <_free_r+0x6c>
 800ff80:	6820      	ldr	r0, [r4, #0]
 800ff82:	4401      	add	r1, r0
 800ff84:	1850      	adds	r0, r2, r1
 800ff86:	6011      	str	r1, [r2, #0]
 800ff88:	4283      	cmp	r3, r0
 800ff8a:	d1e0      	bne.n	800ff4e <_free_r+0x22>
 800ff8c:	6818      	ldr	r0, [r3, #0]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	4408      	add	r0, r1
 800ff92:	6053      	str	r3, [r2, #4]
 800ff94:	6010      	str	r0, [r2, #0]
 800ff96:	e7da      	b.n	800ff4e <_free_r+0x22>
 800ff98:	d902      	bls.n	800ffa0 <_free_r+0x74>
 800ff9a:	230c      	movs	r3, #12
 800ff9c:	602b      	str	r3, [r5, #0]
 800ff9e:	e7d6      	b.n	800ff4e <_free_r+0x22>
 800ffa0:	6820      	ldr	r0, [r4, #0]
 800ffa2:	1821      	adds	r1, r4, r0
 800ffa4:	428b      	cmp	r3, r1
 800ffa6:	bf02      	ittt	eq
 800ffa8:	6819      	ldreq	r1, [r3, #0]
 800ffaa:	685b      	ldreq	r3, [r3, #4]
 800ffac:	1809      	addeq	r1, r1, r0
 800ffae:	6063      	str	r3, [r4, #4]
 800ffb0:	bf08      	it	eq
 800ffb2:	6021      	streq	r1, [r4, #0]
 800ffb4:	6054      	str	r4, [r2, #4]
 800ffb6:	e7ca      	b.n	800ff4e <_free_r+0x22>
 800ffb8:	bd38      	pop	{r3, r4, r5, pc}
 800ffba:	bf00      	nop
 800ffbc:	20013c9c 	.word	0x20013c9c

0800ffc0 <malloc>:
 800ffc0:	4b02      	ldr	r3, [pc, #8]	@ (800ffcc <malloc+0xc>)
 800ffc2:	4601      	mov	r1, r0
 800ffc4:	6818      	ldr	r0, [r3, #0]
 800ffc6:	f000 b825 	b.w	8010014 <_malloc_r>
 800ffca:	bf00      	nop
 800ffcc:	20000030 	.word	0x20000030

0800ffd0 <sbrk_aligned>:
 800ffd0:	b570      	push	{r4, r5, r6, lr}
 800ffd2:	4e0f      	ldr	r6, [pc, #60]	@ (8010010 <sbrk_aligned+0x40>)
 800ffd4:	460c      	mov	r4, r1
 800ffd6:	4605      	mov	r5, r0
 800ffd8:	6831      	ldr	r1, [r6, #0]
 800ffda:	b911      	cbnz	r1, 800ffe2 <sbrk_aligned+0x12>
 800ffdc:	f001 fe12 	bl	8011c04 <_sbrk_r>
 800ffe0:	6030      	str	r0, [r6, #0]
 800ffe2:	4621      	mov	r1, r4
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f001 fe0d 	bl	8011c04 <_sbrk_r>
 800ffea:	1c43      	adds	r3, r0, #1
 800ffec:	d103      	bne.n	800fff6 <sbrk_aligned+0x26>
 800ffee:	f04f 34ff 	mov.w	r4, #4294967295
 800fff2:	4620      	mov	r0, r4
 800fff4:	bd70      	pop	{r4, r5, r6, pc}
 800fff6:	1cc4      	adds	r4, r0, #3
 800fff8:	f024 0403 	bic.w	r4, r4, #3
 800fffc:	42a0      	cmp	r0, r4
 800fffe:	d0f8      	beq.n	800fff2 <sbrk_aligned+0x22>
 8010000:	1a21      	subs	r1, r4, r0
 8010002:	4628      	mov	r0, r5
 8010004:	f001 fdfe 	bl	8011c04 <_sbrk_r>
 8010008:	3001      	adds	r0, #1
 801000a:	d1f2      	bne.n	800fff2 <sbrk_aligned+0x22>
 801000c:	e7ef      	b.n	800ffee <sbrk_aligned+0x1e>
 801000e:	bf00      	nop
 8010010:	20013c98 	.word	0x20013c98

08010014 <_malloc_r>:
 8010014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010018:	1ccd      	adds	r5, r1, #3
 801001a:	4606      	mov	r6, r0
 801001c:	f025 0503 	bic.w	r5, r5, #3
 8010020:	3508      	adds	r5, #8
 8010022:	2d0c      	cmp	r5, #12
 8010024:	bf38      	it	cc
 8010026:	250c      	movcc	r5, #12
 8010028:	2d00      	cmp	r5, #0
 801002a:	db01      	blt.n	8010030 <_malloc_r+0x1c>
 801002c:	42a9      	cmp	r1, r5
 801002e:	d904      	bls.n	801003a <_malloc_r+0x26>
 8010030:	230c      	movs	r3, #12
 8010032:	6033      	str	r3, [r6, #0]
 8010034:	2000      	movs	r0, #0
 8010036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010110 <_malloc_r+0xfc>
 801003e:	f000 f869 	bl	8010114 <__malloc_lock>
 8010042:	f8d8 3000 	ldr.w	r3, [r8]
 8010046:	461c      	mov	r4, r3
 8010048:	bb44      	cbnz	r4, 801009c <_malloc_r+0x88>
 801004a:	4629      	mov	r1, r5
 801004c:	4630      	mov	r0, r6
 801004e:	f7ff ffbf 	bl	800ffd0 <sbrk_aligned>
 8010052:	1c43      	adds	r3, r0, #1
 8010054:	4604      	mov	r4, r0
 8010056:	d158      	bne.n	801010a <_malloc_r+0xf6>
 8010058:	f8d8 4000 	ldr.w	r4, [r8]
 801005c:	4627      	mov	r7, r4
 801005e:	2f00      	cmp	r7, #0
 8010060:	d143      	bne.n	80100ea <_malloc_r+0xd6>
 8010062:	2c00      	cmp	r4, #0
 8010064:	d04b      	beq.n	80100fe <_malloc_r+0xea>
 8010066:	6823      	ldr	r3, [r4, #0]
 8010068:	4639      	mov	r1, r7
 801006a:	4630      	mov	r0, r6
 801006c:	eb04 0903 	add.w	r9, r4, r3
 8010070:	f001 fdc8 	bl	8011c04 <_sbrk_r>
 8010074:	4581      	cmp	r9, r0
 8010076:	d142      	bne.n	80100fe <_malloc_r+0xea>
 8010078:	6821      	ldr	r1, [r4, #0]
 801007a:	4630      	mov	r0, r6
 801007c:	1a6d      	subs	r5, r5, r1
 801007e:	4629      	mov	r1, r5
 8010080:	f7ff ffa6 	bl	800ffd0 <sbrk_aligned>
 8010084:	3001      	adds	r0, #1
 8010086:	d03a      	beq.n	80100fe <_malloc_r+0xea>
 8010088:	6823      	ldr	r3, [r4, #0]
 801008a:	442b      	add	r3, r5
 801008c:	6023      	str	r3, [r4, #0]
 801008e:	f8d8 3000 	ldr.w	r3, [r8]
 8010092:	685a      	ldr	r2, [r3, #4]
 8010094:	bb62      	cbnz	r2, 80100f0 <_malloc_r+0xdc>
 8010096:	f8c8 7000 	str.w	r7, [r8]
 801009a:	e00f      	b.n	80100bc <_malloc_r+0xa8>
 801009c:	6822      	ldr	r2, [r4, #0]
 801009e:	1b52      	subs	r2, r2, r5
 80100a0:	d420      	bmi.n	80100e4 <_malloc_r+0xd0>
 80100a2:	2a0b      	cmp	r2, #11
 80100a4:	d917      	bls.n	80100d6 <_malloc_r+0xc2>
 80100a6:	1961      	adds	r1, r4, r5
 80100a8:	42a3      	cmp	r3, r4
 80100aa:	6025      	str	r5, [r4, #0]
 80100ac:	bf18      	it	ne
 80100ae:	6059      	strne	r1, [r3, #4]
 80100b0:	6863      	ldr	r3, [r4, #4]
 80100b2:	bf08      	it	eq
 80100b4:	f8c8 1000 	streq.w	r1, [r8]
 80100b8:	5162      	str	r2, [r4, r5]
 80100ba:	604b      	str	r3, [r1, #4]
 80100bc:	4630      	mov	r0, r6
 80100be:	f000 f82f 	bl	8010120 <__malloc_unlock>
 80100c2:	f104 000b 	add.w	r0, r4, #11
 80100c6:	1d23      	adds	r3, r4, #4
 80100c8:	f020 0007 	bic.w	r0, r0, #7
 80100cc:	1ac2      	subs	r2, r0, r3
 80100ce:	bf1c      	itt	ne
 80100d0:	1a1b      	subne	r3, r3, r0
 80100d2:	50a3      	strne	r3, [r4, r2]
 80100d4:	e7af      	b.n	8010036 <_malloc_r+0x22>
 80100d6:	6862      	ldr	r2, [r4, #4]
 80100d8:	42a3      	cmp	r3, r4
 80100da:	bf0c      	ite	eq
 80100dc:	f8c8 2000 	streq.w	r2, [r8]
 80100e0:	605a      	strne	r2, [r3, #4]
 80100e2:	e7eb      	b.n	80100bc <_malloc_r+0xa8>
 80100e4:	4623      	mov	r3, r4
 80100e6:	6864      	ldr	r4, [r4, #4]
 80100e8:	e7ae      	b.n	8010048 <_malloc_r+0x34>
 80100ea:	463c      	mov	r4, r7
 80100ec:	687f      	ldr	r7, [r7, #4]
 80100ee:	e7b6      	b.n	801005e <_malloc_r+0x4a>
 80100f0:	461a      	mov	r2, r3
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	42a3      	cmp	r3, r4
 80100f6:	d1fb      	bne.n	80100f0 <_malloc_r+0xdc>
 80100f8:	2300      	movs	r3, #0
 80100fa:	6053      	str	r3, [r2, #4]
 80100fc:	e7de      	b.n	80100bc <_malloc_r+0xa8>
 80100fe:	230c      	movs	r3, #12
 8010100:	4630      	mov	r0, r6
 8010102:	6033      	str	r3, [r6, #0]
 8010104:	f000 f80c 	bl	8010120 <__malloc_unlock>
 8010108:	e794      	b.n	8010034 <_malloc_r+0x20>
 801010a:	6005      	str	r5, [r0, #0]
 801010c:	e7d6      	b.n	80100bc <_malloc_r+0xa8>
 801010e:	bf00      	nop
 8010110:	20013c9c 	.word	0x20013c9c

08010114 <__malloc_lock>:
 8010114:	4801      	ldr	r0, [pc, #4]	@ (801011c <__malloc_lock+0x8>)
 8010116:	f7ff b886 	b.w	800f226 <__retarget_lock_acquire_recursive>
 801011a:	bf00      	nop
 801011c:	20013c94 	.word	0x20013c94

08010120 <__malloc_unlock>:
 8010120:	4801      	ldr	r0, [pc, #4]	@ (8010128 <__malloc_unlock+0x8>)
 8010122:	f7ff b881 	b.w	800f228 <__retarget_lock_release_recursive>
 8010126:	bf00      	nop
 8010128:	20013c94 	.word	0x20013c94

0801012c <_Balloc>:
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	69c6      	ldr	r6, [r0, #28]
 8010130:	4604      	mov	r4, r0
 8010132:	460d      	mov	r5, r1
 8010134:	b976      	cbnz	r6, 8010154 <_Balloc+0x28>
 8010136:	2010      	movs	r0, #16
 8010138:	f7ff ff42 	bl	800ffc0 <malloc>
 801013c:	4602      	mov	r2, r0
 801013e:	61e0      	str	r0, [r4, #28]
 8010140:	b920      	cbnz	r0, 801014c <_Balloc+0x20>
 8010142:	4b18      	ldr	r3, [pc, #96]	@ (80101a4 <_Balloc+0x78>)
 8010144:	216b      	movs	r1, #107	@ 0x6b
 8010146:	4818      	ldr	r0, [pc, #96]	@ (80101a8 <_Balloc+0x7c>)
 8010148:	f001 fd76 	bl	8011c38 <__assert_func>
 801014c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010150:	6006      	str	r6, [r0, #0]
 8010152:	60c6      	str	r6, [r0, #12]
 8010154:	69e6      	ldr	r6, [r4, #28]
 8010156:	68f3      	ldr	r3, [r6, #12]
 8010158:	b183      	cbz	r3, 801017c <_Balloc+0x50>
 801015a:	69e3      	ldr	r3, [r4, #28]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010162:	b9b8      	cbnz	r0, 8010194 <_Balloc+0x68>
 8010164:	2101      	movs	r1, #1
 8010166:	4620      	mov	r0, r4
 8010168:	fa01 f605 	lsl.w	r6, r1, r5
 801016c:	1d72      	adds	r2, r6, #5
 801016e:	0092      	lsls	r2, r2, #2
 8010170:	f001 fd80 	bl	8011c74 <_calloc_r>
 8010174:	b160      	cbz	r0, 8010190 <_Balloc+0x64>
 8010176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801017a:	e00e      	b.n	801019a <_Balloc+0x6e>
 801017c:	2221      	movs	r2, #33	@ 0x21
 801017e:	2104      	movs	r1, #4
 8010180:	4620      	mov	r0, r4
 8010182:	f001 fd77 	bl	8011c74 <_calloc_r>
 8010186:	69e3      	ldr	r3, [r4, #28]
 8010188:	60f0      	str	r0, [r6, #12]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1e4      	bne.n	801015a <_Balloc+0x2e>
 8010190:	2000      	movs	r0, #0
 8010192:	bd70      	pop	{r4, r5, r6, pc}
 8010194:	6802      	ldr	r2, [r0, #0]
 8010196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801019a:	2300      	movs	r3, #0
 801019c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101a0:	e7f7      	b.n	8010192 <_Balloc+0x66>
 80101a2:	bf00      	nop
 80101a4:	0803025a 	.word	0x0803025a
 80101a8:	080302da 	.word	0x080302da

080101ac <_Bfree>:
 80101ac:	b570      	push	{r4, r5, r6, lr}
 80101ae:	69c6      	ldr	r6, [r0, #28]
 80101b0:	4605      	mov	r5, r0
 80101b2:	460c      	mov	r4, r1
 80101b4:	b976      	cbnz	r6, 80101d4 <_Bfree+0x28>
 80101b6:	2010      	movs	r0, #16
 80101b8:	f7ff ff02 	bl	800ffc0 <malloc>
 80101bc:	4602      	mov	r2, r0
 80101be:	61e8      	str	r0, [r5, #28]
 80101c0:	b920      	cbnz	r0, 80101cc <_Bfree+0x20>
 80101c2:	4b09      	ldr	r3, [pc, #36]	@ (80101e8 <_Bfree+0x3c>)
 80101c4:	218f      	movs	r1, #143	@ 0x8f
 80101c6:	4809      	ldr	r0, [pc, #36]	@ (80101ec <_Bfree+0x40>)
 80101c8:	f001 fd36 	bl	8011c38 <__assert_func>
 80101cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101d0:	6006      	str	r6, [r0, #0]
 80101d2:	60c6      	str	r6, [r0, #12]
 80101d4:	b13c      	cbz	r4, 80101e6 <_Bfree+0x3a>
 80101d6:	69eb      	ldr	r3, [r5, #28]
 80101d8:	6862      	ldr	r2, [r4, #4]
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101e0:	6021      	str	r1, [r4, #0]
 80101e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101e6:	bd70      	pop	{r4, r5, r6, pc}
 80101e8:	0803025a 	.word	0x0803025a
 80101ec:	080302da 	.word	0x080302da

080101f0 <__multadd>:
 80101f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	f101 0c14 	add.w	ip, r1, #20
 80101f8:	4607      	mov	r7, r0
 80101fa:	460c      	mov	r4, r1
 80101fc:	461e      	mov	r6, r3
 80101fe:	690d      	ldr	r5, [r1, #16]
 8010200:	2000      	movs	r0, #0
 8010202:	f8dc 3000 	ldr.w	r3, [ip]
 8010206:	3001      	adds	r0, #1
 8010208:	b299      	uxth	r1, r3
 801020a:	4285      	cmp	r5, r0
 801020c:	fb02 6101 	mla	r1, r2, r1, r6
 8010210:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010214:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8010218:	b289      	uxth	r1, r1
 801021a:	fb02 3306 	mla	r3, r2, r6, r3
 801021e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010226:	f84c 1b04 	str.w	r1, [ip], #4
 801022a:	dcea      	bgt.n	8010202 <__multadd+0x12>
 801022c:	b30e      	cbz	r6, 8010272 <__multadd+0x82>
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	42ab      	cmp	r3, r5
 8010232:	dc19      	bgt.n	8010268 <__multadd+0x78>
 8010234:	6861      	ldr	r1, [r4, #4]
 8010236:	4638      	mov	r0, r7
 8010238:	3101      	adds	r1, #1
 801023a:	f7ff ff77 	bl	801012c <_Balloc>
 801023e:	4680      	mov	r8, r0
 8010240:	b928      	cbnz	r0, 801024e <__multadd+0x5e>
 8010242:	4602      	mov	r2, r0
 8010244:	4b0c      	ldr	r3, [pc, #48]	@ (8010278 <__multadd+0x88>)
 8010246:	21ba      	movs	r1, #186	@ 0xba
 8010248:	480c      	ldr	r0, [pc, #48]	@ (801027c <__multadd+0x8c>)
 801024a:	f001 fcf5 	bl	8011c38 <__assert_func>
 801024e:	6922      	ldr	r2, [r4, #16]
 8010250:	f104 010c 	add.w	r1, r4, #12
 8010254:	300c      	adds	r0, #12
 8010256:	3202      	adds	r2, #2
 8010258:	0092      	lsls	r2, r2, #2
 801025a:	f7fe fff4 	bl	800f246 <memcpy>
 801025e:	4621      	mov	r1, r4
 8010260:	4644      	mov	r4, r8
 8010262:	4638      	mov	r0, r7
 8010264:	f7ff ffa2 	bl	80101ac <_Bfree>
 8010268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801026c:	3501      	adds	r5, #1
 801026e:	615e      	str	r6, [r3, #20]
 8010270:	6125      	str	r5, [r4, #16]
 8010272:	4620      	mov	r0, r4
 8010274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010278:	080302c9 	.word	0x080302c9
 801027c:	080302da 	.word	0x080302da

08010280 <__s2b>:
 8010280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010284:	4615      	mov	r5, r2
 8010286:	461f      	mov	r7, r3
 8010288:	2209      	movs	r2, #9
 801028a:	3308      	adds	r3, #8
 801028c:	460c      	mov	r4, r1
 801028e:	4606      	mov	r6, r0
 8010290:	2100      	movs	r1, #0
 8010292:	fb93 f3f2 	sdiv	r3, r3, r2
 8010296:	2201      	movs	r2, #1
 8010298:	429a      	cmp	r2, r3
 801029a:	db09      	blt.n	80102b0 <__s2b+0x30>
 801029c:	4630      	mov	r0, r6
 801029e:	f7ff ff45 	bl	801012c <_Balloc>
 80102a2:	b940      	cbnz	r0, 80102b6 <__s2b+0x36>
 80102a4:	4602      	mov	r2, r0
 80102a6:	4b19      	ldr	r3, [pc, #100]	@ (801030c <__s2b+0x8c>)
 80102a8:	21d3      	movs	r1, #211	@ 0xd3
 80102aa:	4819      	ldr	r0, [pc, #100]	@ (8010310 <__s2b+0x90>)
 80102ac:	f001 fcc4 	bl	8011c38 <__assert_func>
 80102b0:	0052      	lsls	r2, r2, #1
 80102b2:	3101      	adds	r1, #1
 80102b4:	e7f0      	b.n	8010298 <__s2b+0x18>
 80102b6:	9b08      	ldr	r3, [sp, #32]
 80102b8:	2d09      	cmp	r5, #9
 80102ba:	6143      	str	r3, [r0, #20]
 80102bc:	f04f 0301 	mov.w	r3, #1
 80102c0:	6103      	str	r3, [r0, #16]
 80102c2:	dd16      	ble.n	80102f2 <__s2b+0x72>
 80102c4:	f104 0909 	add.w	r9, r4, #9
 80102c8:	442c      	add	r4, r5
 80102ca:	46c8      	mov	r8, r9
 80102cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80102d0:	4601      	mov	r1, r0
 80102d2:	220a      	movs	r2, #10
 80102d4:	4630      	mov	r0, r6
 80102d6:	3b30      	subs	r3, #48	@ 0x30
 80102d8:	f7ff ff8a 	bl	80101f0 <__multadd>
 80102dc:	45a0      	cmp	r8, r4
 80102de:	d1f5      	bne.n	80102cc <__s2b+0x4c>
 80102e0:	f1a5 0408 	sub.w	r4, r5, #8
 80102e4:	444c      	add	r4, r9
 80102e6:	1b2d      	subs	r5, r5, r4
 80102e8:	1963      	adds	r3, r4, r5
 80102ea:	42bb      	cmp	r3, r7
 80102ec:	db04      	blt.n	80102f8 <__s2b+0x78>
 80102ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102f2:	340a      	adds	r4, #10
 80102f4:	2509      	movs	r5, #9
 80102f6:	e7f6      	b.n	80102e6 <__s2b+0x66>
 80102f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80102fc:	4601      	mov	r1, r0
 80102fe:	220a      	movs	r2, #10
 8010300:	4630      	mov	r0, r6
 8010302:	3b30      	subs	r3, #48	@ 0x30
 8010304:	f7ff ff74 	bl	80101f0 <__multadd>
 8010308:	e7ee      	b.n	80102e8 <__s2b+0x68>
 801030a:	bf00      	nop
 801030c:	080302c9 	.word	0x080302c9
 8010310:	080302da 	.word	0x080302da

08010314 <__hi0bits>:
 8010314:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010318:	4603      	mov	r3, r0
 801031a:	bf36      	itet	cc
 801031c:	0403      	lslcc	r3, r0, #16
 801031e:	2000      	movcs	r0, #0
 8010320:	2010      	movcc	r0, #16
 8010322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010326:	bf3c      	itt	cc
 8010328:	021b      	lslcc	r3, r3, #8
 801032a:	3008      	addcc	r0, #8
 801032c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010330:	bf3c      	itt	cc
 8010332:	011b      	lslcc	r3, r3, #4
 8010334:	3004      	addcc	r0, #4
 8010336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801033a:	bf3c      	itt	cc
 801033c:	009b      	lslcc	r3, r3, #2
 801033e:	3002      	addcc	r0, #2
 8010340:	2b00      	cmp	r3, #0
 8010342:	db05      	blt.n	8010350 <__hi0bits+0x3c>
 8010344:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010348:	f100 0001 	add.w	r0, r0, #1
 801034c:	bf08      	it	eq
 801034e:	2020      	moveq	r0, #32
 8010350:	4770      	bx	lr

08010352 <__lo0bits>:
 8010352:	6803      	ldr	r3, [r0, #0]
 8010354:	4602      	mov	r2, r0
 8010356:	f013 0007 	ands.w	r0, r3, #7
 801035a:	d00b      	beq.n	8010374 <__lo0bits+0x22>
 801035c:	07d9      	lsls	r1, r3, #31
 801035e:	d421      	bmi.n	80103a4 <__lo0bits+0x52>
 8010360:	0798      	lsls	r0, r3, #30
 8010362:	bf47      	ittee	mi
 8010364:	085b      	lsrmi	r3, r3, #1
 8010366:	2001      	movmi	r0, #1
 8010368:	089b      	lsrpl	r3, r3, #2
 801036a:	2002      	movpl	r0, #2
 801036c:	bf4c      	ite	mi
 801036e:	6013      	strmi	r3, [r2, #0]
 8010370:	6013      	strpl	r3, [r2, #0]
 8010372:	4770      	bx	lr
 8010374:	b299      	uxth	r1, r3
 8010376:	b909      	cbnz	r1, 801037c <__lo0bits+0x2a>
 8010378:	0c1b      	lsrs	r3, r3, #16
 801037a:	2010      	movs	r0, #16
 801037c:	b2d9      	uxtb	r1, r3
 801037e:	b909      	cbnz	r1, 8010384 <__lo0bits+0x32>
 8010380:	3008      	adds	r0, #8
 8010382:	0a1b      	lsrs	r3, r3, #8
 8010384:	0719      	lsls	r1, r3, #28
 8010386:	bf04      	itt	eq
 8010388:	091b      	lsreq	r3, r3, #4
 801038a:	3004      	addeq	r0, #4
 801038c:	0799      	lsls	r1, r3, #30
 801038e:	bf04      	itt	eq
 8010390:	089b      	lsreq	r3, r3, #2
 8010392:	3002      	addeq	r0, #2
 8010394:	07d9      	lsls	r1, r3, #31
 8010396:	d403      	bmi.n	80103a0 <__lo0bits+0x4e>
 8010398:	085b      	lsrs	r3, r3, #1
 801039a:	f100 0001 	add.w	r0, r0, #1
 801039e:	d003      	beq.n	80103a8 <__lo0bits+0x56>
 80103a0:	6013      	str	r3, [r2, #0]
 80103a2:	4770      	bx	lr
 80103a4:	2000      	movs	r0, #0
 80103a6:	4770      	bx	lr
 80103a8:	2020      	movs	r0, #32
 80103aa:	4770      	bx	lr

080103ac <__i2b>:
 80103ac:	b510      	push	{r4, lr}
 80103ae:	460c      	mov	r4, r1
 80103b0:	2101      	movs	r1, #1
 80103b2:	f7ff febb 	bl	801012c <_Balloc>
 80103b6:	4602      	mov	r2, r0
 80103b8:	b928      	cbnz	r0, 80103c6 <__i2b+0x1a>
 80103ba:	4b05      	ldr	r3, [pc, #20]	@ (80103d0 <__i2b+0x24>)
 80103bc:	f240 1145 	movw	r1, #325	@ 0x145
 80103c0:	4804      	ldr	r0, [pc, #16]	@ (80103d4 <__i2b+0x28>)
 80103c2:	f001 fc39 	bl	8011c38 <__assert_func>
 80103c6:	2301      	movs	r3, #1
 80103c8:	6144      	str	r4, [r0, #20]
 80103ca:	6103      	str	r3, [r0, #16]
 80103cc:	bd10      	pop	{r4, pc}
 80103ce:	bf00      	nop
 80103d0:	080302c9 	.word	0x080302c9
 80103d4:	080302da 	.word	0x080302da

080103d8 <__multiply>:
 80103d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103dc:	4617      	mov	r7, r2
 80103de:	690a      	ldr	r2, [r1, #16]
 80103e0:	4689      	mov	r9, r1
 80103e2:	b085      	sub	sp, #20
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	bfa2      	ittt	ge
 80103ea:	463b      	movge	r3, r7
 80103ec:	460f      	movge	r7, r1
 80103ee:	4699      	movge	r9, r3
 80103f0:	693d      	ldr	r5, [r7, #16]
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80103f8:	6879      	ldr	r1, [r7, #4]
 80103fa:	eb05 060a 	add.w	r6, r5, sl
 80103fe:	42b3      	cmp	r3, r6
 8010400:	bfb8      	it	lt
 8010402:	3101      	addlt	r1, #1
 8010404:	f7ff fe92 	bl	801012c <_Balloc>
 8010408:	b930      	cbnz	r0, 8010418 <__multiply+0x40>
 801040a:	4602      	mov	r2, r0
 801040c:	4b42      	ldr	r3, [pc, #264]	@ (8010518 <__multiply+0x140>)
 801040e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010412:	4842      	ldr	r0, [pc, #264]	@ (801051c <__multiply+0x144>)
 8010414:	f001 fc10 	bl	8011c38 <__assert_func>
 8010418:	f100 0414 	add.w	r4, r0, #20
 801041c:	2200      	movs	r2, #0
 801041e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010422:	4623      	mov	r3, r4
 8010424:	4573      	cmp	r3, lr
 8010426:	d320      	bcc.n	801046a <__multiply+0x92>
 8010428:	f107 0814 	add.w	r8, r7, #20
 801042c:	f109 0114 	add.w	r1, r9, #20
 8010430:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010434:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010438:	9302      	str	r3, [sp, #8]
 801043a:	1beb      	subs	r3, r5, r7
 801043c:	3715      	adds	r7, #21
 801043e:	3b15      	subs	r3, #21
 8010440:	f023 0303 	bic.w	r3, r3, #3
 8010444:	3304      	adds	r3, #4
 8010446:	42bd      	cmp	r5, r7
 8010448:	bf38      	it	cc
 801044a:	2304      	movcc	r3, #4
 801044c:	9301      	str	r3, [sp, #4]
 801044e:	9b02      	ldr	r3, [sp, #8]
 8010450:	9103      	str	r1, [sp, #12]
 8010452:	428b      	cmp	r3, r1
 8010454:	d80c      	bhi.n	8010470 <__multiply+0x98>
 8010456:	2e00      	cmp	r6, #0
 8010458:	dd03      	ble.n	8010462 <__multiply+0x8a>
 801045a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801045e:	2b00      	cmp	r3, #0
 8010460:	d057      	beq.n	8010512 <__multiply+0x13a>
 8010462:	6106      	str	r6, [r0, #16]
 8010464:	b005      	add	sp, #20
 8010466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046a:	f843 2b04 	str.w	r2, [r3], #4
 801046e:	e7d9      	b.n	8010424 <__multiply+0x4c>
 8010470:	f8b1 a000 	ldrh.w	sl, [r1]
 8010474:	f1ba 0f00 	cmp.w	sl, #0
 8010478:	d021      	beq.n	80104be <__multiply+0xe6>
 801047a:	46c4      	mov	ip, r8
 801047c:	46a1      	mov	r9, r4
 801047e:	2700      	movs	r7, #0
 8010480:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010484:	f8d9 3000 	ldr.w	r3, [r9]
 8010488:	fa1f fb82 	uxth.w	fp, r2
 801048c:	4565      	cmp	r5, ip
 801048e:	b29b      	uxth	r3, r3
 8010490:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8010494:	fb0a 330b 	mla	r3, sl, fp, r3
 8010498:	443b      	add	r3, r7
 801049a:	f8d9 7000 	ldr.w	r7, [r9]
 801049e:	ea4f 4717 	mov.w	r7, r7, lsr #16
 80104a2:	fb0a 7202 	mla	r2, sl, r2, r7
 80104a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80104b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104b4:	f849 3b04 	str.w	r3, [r9], #4
 80104b8:	d8e2      	bhi.n	8010480 <__multiply+0xa8>
 80104ba:	9b01      	ldr	r3, [sp, #4]
 80104bc:	50e7      	str	r7, [r4, r3]
 80104be:	9b03      	ldr	r3, [sp, #12]
 80104c0:	3104      	adds	r1, #4
 80104c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104c6:	f1b9 0f00 	cmp.w	r9, #0
 80104ca:	d020      	beq.n	801050e <__multiply+0x136>
 80104cc:	6823      	ldr	r3, [r4, #0]
 80104ce:	4647      	mov	r7, r8
 80104d0:	46a4      	mov	ip, r4
 80104d2:	f04f 0a00 	mov.w	sl, #0
 80104d6:	f8b7 b000 	ldrh.w	fp, [r7]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80104e0:	fb09 220b 	mla	r2, r9, fp, r2
 80104e4:	4452      	add	r2, sl
 80104e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104ea:	f84c 3b04 	str.w	r3, [ip], #4
 80104ee:	f857 3b04 	ldr.w	r3, [r7], #4
 80104f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104f6:	f8bc 3000 	ldrh.w	r3, [ip]
 80104fa:	42bd      	cmp	r5, r7
 80104fc:	fb09 330a 	mla	r3, r9, sl, r3
 8010500:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010508:	d8e5      	bhi.n	80104d6 <__multiply+0xfe>
 801050a:	9a01      	ldr	r2, [sp, #4]
 801050c:	50a3      	str	r3, [r4, r2]
 801050e:	3404      	adds	r4, #4
 8010510:	e79d      	b.n	801044e <__multiply+0x76>
 8010512:	3e01      	subs	r6, #1
 8010514:	e79f      	b.n	8010456 <__multiply+0x7e>
 8010516:	bf00      	nop
 8010518:	080302c9 	.word	0x080302c9
 801051c:	080302da 	.word	0x080302da

08010520 <__pow5mult>:
 8010520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010524:	4615      	mov	r5, r2
 8010526:	f012 0203 	ands.w	r2, r2, #3
 801052a:	4607      	mov	r7, r0
 801052c:	460e      	mov	r6, r1
 801052e:	d007      	beq.n	8010540 <__pow5mult+0x20>
 8010530:	3a01      	subs	r2, #1
 8010532:	4c25      	ldr	r4, [pc, #148]	@ (80105c8 <__pow5mult+0xa8>)
 8010534:	2300      	movs	r3, #0
 8010536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801053a:	f7ff fe59 	bl	80101f0 <__multadd>
 801053e:	4606      	mov	r6, r0
 8010540:	10ad      	asrs	r5, r5, #2
 8010542:	d03d      	beq.n	80105c0 <__pow5mult+0xa0>
 8010544:	69fc      	ldr	r4, [r7, #28]
 8010546:	b97c      	cbnz	r4, 8010568 <__pow5mult+0x48>
 8010548:	2010      	movs	r0, #16
 801054a:	f7ff fd39 	bl	800ffc0 <malloc>
 801054e:	4602      	mov	r2, r0
 8010550:	61f8      	str	r0, [r7, #28]
 8010552:	b928      	cbnz	r0, 8010560 <__pow5mult+0x40>
 8010554:	4b1d      	ldr	r3, [pc, #116]	@ (80105cc <__pow5mult+0xac>)
 8010556:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801055a:	481d      	ldr	r0, [pc, #116]	@ (80105d0 <__pow5mult+0xb0>)
 801055c:	f001 fb6c 	bl	8011c38 <__assert_func>
 8010560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010564:	6004      	str	r4, [r0, #0]
 8010566:	60c4      	str	r4, [r0, #12]
 8010568:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801056c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010570:	b94c      	cbnz	r4, 8010586 <__pow5mult+0x66>
 8010572:	f240 2171 	movw	r1, #625	@ 0x271
 8010576:	4638      	mov	r0, r7
 8010578:	f7ff ff18 	bl	80103ac <__i2b>
 801057c:	2300      	movs	r3, #0
 801057e:	4604      	mov	r4, r0
 8010580:	f8c8 0008 	str.w	r0, [r8, #8]
 8010584:	6003      	str	r3, [r0, #0]
 8010586:	f04f 0900 	mov.w	r9, #0
 801058a:	07eb      	lsls	r3, r5, #31
 801058c:	d50a      	bpl.n	80105a4 <__pow5mult+0x84>
 801058e:	4631      	mov	r1, r6
 8010590:	4622      	mov	r2, r4
 8010592:	4638      	mov	r0, r7
 8010594:	f7ff ff20 	bl	80103d8 <__multiply>
 8010598:	4680      	mov	r8, r0
 801059a:	4631      	mov	r1, r6
 801059c:	4638      	mov	r0, r7
 801059e:	4646      	mov	r6, r8
 80105a0:	f7ff fe04 	bl	80101ac <_Bfree>
 80105a4:	106d      	asrs	r5, r5, #1
 80105a6:	d00b      	beq.n	80105c0 <__pow5mult+0xa0>
 80105a8:	6820      	ldr	r0, [r4, #0]
 80105aa:	b938      	cbnz	r0, 80105bc <__pow5mult+0x9c>
 80105ac:	4622      	mov	r2, r4
 80105ae:	4621      	mov	r1, r4
 80105b0:	4638      	mov	r0, r7
 80105b2:	f7ff ff11 	bl	80103d8 <__multiply>
 80105b6:	6020      	str	r0, [r4, #0]
 80105b8:	f8c0 9000 	str.w	r9, [r0]
 80105bc:	4604      	mov	r4, r0
 80105be:	e7e4      	b.n	801058a <__pow5mult+0x6a>
 80105c0:	4630      	mov	r0, r6
 80105c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c6:	bf00      	nop
 80105c8:	080303ec 	.word	0x080303ec
 80105cc:	0803025a 	.word	0x0803025a
 80105d0:	080302da 	.word	0x080302da

080105d4 <__lshift>:
 80105d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105d8:	460c      	mov	r4, r1
 80105da:	4607      	mov	r7, r0
 80105dc:	4691      	mov	r9, r2
 80105de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105e2:	6923      	ldr	r3, [r4, #16]
 80105e4:	6849      	ldr	r1, [r1, #4]
 80105e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	f108 0601 	add.w	r6, r8, #1
 80105f0:	42b3      	cmp	r3, r6
 80105f2:	db0b      	blt.n	801060c <__lshift+0x38>
 80105f4:	4638      	mov	r0, r7
 80105f6:	f7ff fd99 	bl	801012c <_Balloc>
 80105fa:	4605      	mov	r5, r0
 80105fc:	b948      	cbnz	r0, 8010612 <__lshift+0x3e>
 80105fe:	4602      	mov	r2, r0
 8010600:	4b28      	ldr	r3, [pc, #160]	@ (80106a4 <__lshift+0xd0>)
 8010602:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010606:	4828      	ldr	r0, [pc, #160]	@ (80106a8 <__lshift+0xd4>)
 8010608:	f001 fb16 	bl	8011c38 <__assert_func>
 801060c:	3101      	adds	r1, #1
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	e7ee      	b.n	80105f0 <__lshift+0x1c>
 8010612:	2300      	movs	r3, #0
 8010614:	f100 0114 	add.w	r1, r0, #20
 8010618:	f100 0210 	add.w	r2, r0, #16
 801061c:	4618      	mov	r0, r3
 801061e:	4553      	cmp	r3, sl
 8010620:	db33      	blt.n	801068a <__lshift+0xb6>
 8010622:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010626:	f104 0314 	add.w	r3, r4, #20
 801062a:	6920      	ldr	r0, [r4, #16]
 801062c:	f019 091f 	ands.w	r9, r9, #31
 8010630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010638:	d02b      	beq.n	8010692 <__lshift+0xbe>
 801063a:	f1c9 0e20 	rsb	lr, r9, #32
 801063e:	468a      	mov	sl, r1
 8010640:	2200      	movs	r2, #0
 8010642:	6818      	ldr	r0, [r3, #0]
 8010644:	fa00 f009 	lsl.w	r0, r0, r9
 8010648:	4310      	orrs	r0, r2
 801064a:	f84a 0b04 	str.w	r0, [sl], #4
 801064e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010652:	459c      	cmp	ip, r3
 8010654:	fa22 f20e 	lsr.w	r2, r2, lr
 8010658:	d8f3      	bhi.n	8010642 <__lshift+0x6e>
 801065a:	ebac 0304 	sub.w	r3, ip, r4
 801065e:	f104 0015 	add.w	r0, r4, #21
 8010662:	3b15      	subs	r3, #21
 8010664:	f023 0303 	bic.w	r3, r3, #3
 8010668:	3304      	adds	r3, #4
 801066a:	4560      	cmp	r0, ip
 801066c:	bf88      	it	hi
 801066e:	2304      	movhi	r3, #4
 8010670:	50ca      	str	r2, [r1, r3]
 8010672:	b10a      	cbz	r2, 8010678 <__lshift+0xa4>
 8010674:	f108 0602 	add.w	r6, r8, #2
 8010678:	3e01      	subs	r6, #1
 801067a:	4638      	mov	r0, r7
 801067c:	4621      	mov	r1, r4
 801067e:	612e      	str	r6, [r5, #16]
 8010680:	f7ff fd94 	bl	80101ac <_Bfree>
 8010684:	4628      	mov	r0, r5
 8010686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801068a:	3301      	adds	r3, #1
 801068c:	f842 0f04 	str.w	r0, [r2, #4]!
 8010690:	e7c5      	b.n	801061e <__lshift+0x4a>
 8010692:	3904      	subs	r1, #4
 8010694:	f853 2b04 	ldr.w	r2, [r3], #4
 8010698:	459c      	cmp	ip, r3
 801069a:	f841 2f04 	str.w	r2, [r1, #4]!
 801069e:	d8f9      	bhi.n	8010694 <__lshift+0xc0>
 80106a0:	e7ea      	b.n	8010678 <__lshift+0xa4>
 80106a2:	bf00      	nop
 80106a4:	080302c9 	.word	0x080302c9
 80106a8:	080302da 	.word	0x080302da

080106ac <__mcmp>:
 80106ac:	4603      	mov	r3, r0
 80106ae:	690a      	ldr	r2, [r1, #16]
 80106b0:	6900      	ldr	r0, [r0, #16]
 80106b2:	1a80      	subs	r0, r0, r2
 80106b4:	b530      	push	{r4, r5, lr}
 80106b6:	d10e      	bne.n	80106d6 <__mcmp+0x2a>
 80106b8:	3314      	adds	r3, #20
 80106ba:	3114      	adds	r1, #20
 80106bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106cc:	4295      	cmp	r5, r2
 80106ce:	d003      	beq.n	80106d8 <__mcmp+0x2c>
 80106d0:	d205      	bcs.n	80106de <__mcmp+0x32>
 80106d2:	f04f 30ff 	mov.w	r0, #4294967295
 80106d6:	bd30      	pop	{r4, r5, pc}
 80106d8:	42a3      	cmp	r3, r4
 80106da:	d3f3      	bcc.n	80106c4 <__mcmp+0x18>
 80106dc:	e7fb      	b.n	80106d6 <__mcmp+0x2a>
 80106de:	2001      	movs	r0, #1
 80106e0:	e7f9      	b.n	80106d6 <__mcmp+0x2a>
	...

080106e4 <__mdiff>:
 80106e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e8:	4689      	mov	r9, r1
 80106ea:	4606      	mov	r6, r0
 80106ec:	4611      	mov	r1, r2
 80106ee:	4614      	mov	r4, r2
 80106f0:	4648      	mov	r0, r9
 80106f2:	f7ff ffdb 	bl	80106ac <__mcmp>
 80106f6:	1e05      	subs	r5, r0, #0
 80106f8:	d112      	bne.n	8010720 <__mdiff+0x3c>
 80106fa:	4629      	mov	r1, r5
 80106fc:	4630      	mov	r0, r6
 80106fe:	f7ff fd15 	bl	801012c <_Balloc>
 8010702:	4602      	mov	r2, r0
 8010704:	b928      	cbnz	r0, 8010712 <__mdiff+0x2e>
 8010706:	4b41      	ldr	r3, [pc, #260]	@ (801080c <__mdiff+0x128>)
 8010708:	f240 2137 	movw	r1, #567	@ 0x237
 801070c:	4840      	ldr	r0, [pc, #256]	@ (8010810 <__mdiff+0x12c>)
 801070e:	f001 fa93 	bl	8011c38 <__assert_func>
 8010712:	2301      	movs	r3, #1
 8010714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010718:	4610      	mov	r0, r2
 801071a:	b003      	add	sp, #12
 801071c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010720:	bfbc      	itt	lt
 8010722:	464b      	movlt	r3, r9
 8010724:	46a1      	movlt	r9, r4
 8010726:	4630      	mov	r0, r6
 8010728:	bfb8      	it	lt
 801072a:	2501      	movlt	r5, #1
 801072c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010730:	bfb4      	ite	lt
 8010732:	461c      	movlt	r4, r3
 8010734:	2500      	movge	r5, #0
 8010736:	f7ff fcf9 	bl	801012c <_Balloc>
 801073a:	4602      	mov	r2, r0
 801073c:	b918      	cbnz	r0, 8010746 <__mdiff+0x62>
 801073e:	4b33      	ldr	r3, [pc, #204]	@ (801080c <__mdiff+0x128>)
 8010740:	f240 2145 	movw	r1, #581	@ 0x245
 8010744:	e7e2      	b.n	801070c <__mdiff+0x28>
 8010746:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801074a:	f104 0e14 	add.w	lr, r4, #20
 801074e:	6926      	ldr	r6, [r4, #16]
 8010750:	f100 0b14 	add.w	fp, r0, #20
 8010754:	60c5      	str	r5, [r0, #12]
 8010756:	f109 0514 	add.w	r5, r9, #20
 801075a:	f109 0310 	add.w	r3, r9, #16
 801075e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010762:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010766:	46d9      	mov	r9, fp
 8010768:	f04f 0c00 	mov.w	ip, #0
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	9b01      	ldr	r3, [sp, #4]
 8010770:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010774:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010778:	4576      	cmp	r6, lr
 801077a:	9301      	str	r3, [sp, #4]
 801077c:	fa1f f38a 	uxth.w	r3, sl
 8010780:	4619      	mov	r1, r3
 8010782:	b283      	uxth	r3, r0
 8010784:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8010788:	eba1 0303 	sub.w	r3, r1, r3
 801078c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010790:	4463      	add	r3, ip
 8010792:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010796:	b29b      	uxth	r3, r3
 8010798:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801079c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80107a0:	f849 3b04 	str.w	r3, [r9], #4
 80107a4:	d8e3      	bhi.n	801076e <__mdiff+0x8a>
 80107a6:	1b33      	subs	r3, r6, r4
 80107a8:	3415      	adds	r4, #21
 80107aa:	3b15      	subs	r3, #21
 80107ac:	f023 0303 	bic.w	r3, r3, #3
 80107b0:	3304      	adds	r3, #4
 80107b2:	42a6      	cmp	r6, r4
 80107b4:	bf38      	it	cc
 80107b6:	2304      	movcc	r3, #4
 80107b8:	441d      	add	r5, r3
 80107ba:	445b      	add	r3, fp
 80107bc:	462c      	mov	r4, r5
 80107be:	461e      	mov	r6, r3
 80107c0:	4544      	cmp	r4, r8
 80107c2:	d30e      	bcc.n	80107e2 <__mdiff+0xfe>
 80107c4:	f108 0103 	add.w	r1, r8, #3
 80107c8:	1b49      	subs	r1, r1, r5
 80107ca:	3d03      	subs	r5, #3
 80107cc:	f021 0103 	bic.w	r1, r1, #3
 80107d0:	45a8      	cmp	r8, r5
 80107d2:	bf38      	it	cc
 80107d4:	2100      	movcc	r1, #0
 80107d6:	440b      	add	r3, r1
 80107d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107dc:	b199      	cbz	r1, 8010806 <__mdiff+0x122>
 80107de:	6117      	str	r7, [r2, #16]
 80107e0:	e79a      	b.n	8010718 <__mdiff+0x34>
 80107e2:	f854 1b04 	ldr.w	r1, [r4], #4
 80107e6:	46e6      	mov	lr, ip
 80107e8:	fa1f fc81 	uxth.w	ip, r1
 80107ec:	0c08      	lsrs	r0, r1, #16
 80107ee:	4471      	add	r1, lr
 80107f0:	44f4      	add	ip, lr
 80107f2:	b289      	uxth	r1, r1
 80107f4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80107f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80107fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010800:	f846 1b04 	str.w	r1, [r6], #4
 8010804:	e7dc      	b.n	80107c0 <__mdiff+0xdc>
 8010806:	3f01      	subs	r7, #1
 8010808:	e7e6      	b.n	80107d8 <__mdiff+0xf4>
 801080a:	bf00      	nop
 801080c:	080302c9 	.word	0x080302c9
 8010810:	080302da 	.word	0x080302da

08010814 <__ulp>:
 8010814:	b082      	sub	sp, #8
 8010816:	4b11      	ldr	r3, [pc, #68]	@ (801085c <__ulp+0x48>)
 8010818:	ed8d 0b00 	vstr	d0, [sp]
 801081c:	9a01      	ldr	r2, [sp, #4]
 801081e:	4013      	ands	r3, r2
 8010820:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010824:	2b00      	cmp	r3, #0
 8010826:	dc08      	bgt.n	801083a <__ulp+0x26>
 8010828:	425b      	negs	r3, r3
 801082a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801082e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010832:	da04      	bge.n	801083e <__ulp+0x2a>
 8010834:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010838:	4113      	asrs	r3, r2
 801083a:	2200      	movs	r2, #0
 801083c:	e008      	b.n	8010850 <__ulp+0x3c>
 801083e:	f1a2 0314 	sub.w	r3, r2, #20
 8010842:	2b1e      	cmp	r3, #30
 8010844:	bfd6      	itet	le
 8010846:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801084a:	2201      	movgt	r2, #1
 801084c:	40da      	lsrle	r2, r3
 801084e:	2300      	movs	r3, #0
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	ec41 0b10 	vmov	d0, r0, r1
 8010858:	b002      	add	sp, #8
 801085a:	4770      	bx	lr
 801085c:	7ff00000 	.word	0x7ff00000

08010860 <__b2d>:
 8010860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010864:	6906      	ldr	r6, [r0, #16]
 8010866:	f100 0814 	add.w	r8, r0, #20
 801086a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801086e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010872:	1f37      	subs	r7, r6, #4
 8010874:	4610      	mov	r0, r2
 8010876:	f7ff fd4d 	bl	8010314 <__hi0bits>
 801087a:	f1c0 0320 	rsb	r3, r0, #32
 801087e:	280a      	cmp	r0, #10
 8010880:	600b      	str	r3, [r1, #0]
 8010882:	491d      	ldr	r1, [pc, #116]	@ (80108f8 <__b2d+0x98>)
 8010884:	dc16      	bgt.n	80108b4 <__b2d+0x54>
 8010886:	f1c0 0c0b 	rsb	ip, r0, #11
 801088a:	45b8      	cmp	r8, r7
 801088c:	f100 0015 	add.w	r0, r0, #21
 8010890:	fa22 f30c 	lsr.w	r3, r2, ip
 8010894:	fa02 f000 	lsl.w	r0, r2, r0
 8010898:	ea43 0501 	orr.w	r5, r3, r1
 801089c:	bf34      	ite	cc
 801089e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80108a2:	2300      	movcs	r3, #0
 80108a4:	fa23 f30c 	lsr.w	r3, r3, ip
 80108a8:	4303      	orrs	r3, r0
 80108aa:	461c      	mov	r4, r3
 80108ac:	ec45 4b10 	vmov	d0, r4, r5
 80108b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b4:	45b8      	cmp	r8, r7
 80108b6:	bf3a      	itte	cc
 80108b8:	f1a6 0708 	subcc.w	r7, r6, #8
 80108bc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80108c0:	2300      	movcs	r3, #0
 80108c2:	380b      	subs	r0, #11
 80108c4:	d014      	beq.n	80108f0 <__b2d+0x90>
 80108c6:	f1c0 0120 	rsb	r1, r0, #32
 80108ca:	4082      	lsls	r2, r0
 80108cc:	4547      	cmp	r7, r8
 80108ce:	fa23 f401 	lsr.w	r4, r3, r1
 80108d2:	fa03 f300 	lsl.w	r3, r3, r0
 80108d6:	ea42 0204 	orr.w	r2, r2, r4
 80108da:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80108de:	bf8c      	ite	hi
 80108e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80108e4:	2200      	movls	r2, #0
 80108e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80108ea:	40ca      	lsrs	r2, r1
 80108ec:	4313      	orrs	r3, r2
 80108ee:	e7dc      	b.n	80108aa <__b2d+0x4a>
 80108f0:	ea42 0501 	orr.w	r5, r2, r1
 80108f4:	e7d9      	b.n	80108aa <__b2d+0x4a>
 80108f6:	bf00      	nop
 80108f8:	3ff00000 	.word	0x3ff00000

080108fc <__d2b>:
 80108fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010900:	460f      	mov	r7, r1
 8010902:	2101      	movs	r1, #1
 8010904:	4616      	mov	r6, r2
 8010906:	ec59 8b10 	vmov	r8, r9, d0
 801090a:	f7ff fc0f 	bl	801012c <_Balloc>
 801090e:	4604      	mov	r4, r0
 8010910:	b930      	cbnz	r0, 8010920 <__d2b+0x24>
 8010912:	4602      	mov	r2, r0
 8010914:	4b23      	ldr	r3, [pc, #140]	@ (80109a4 <__d2b+0xa8>)
 8010916:	f240 310f 	movw	r1, #783	@ 0x30f
 801091a:	4823      	ldr	r0, [pc, #140]	@ (80109a8 <__d2b+0xac>)
 801091c:	f001 f98c 	bl	8011c38 <__assert_func>
 8010920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010928:	b10d      	cbz	r5, 801092e <__d2b+0x32>
 801092a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801092e:	9301      	str	r3, [sp, #4]
 8010930:	f1b8 0300 	subs.w	r3, r8, #0
 8010934:	d023      	beq.n	801097e <__d2b+0x82>
 8010936:	4668      	mov	r0, sp
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	f7ff fd0a 	bl	8010352 <__lo0bits>
 801093e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010942:	b1d0      	cbz	r0, 801097a <__d2b+0x7e>
 8010944:	f1c0 0320 	rsb	r3, r0, #32
 8010948:	fa02 f303 	lsl.w	r3, r2, r3
 801094c:	40c2      	lsrs	r2, r0
 801094e:	430b      	orrs	r3, r1
 8010950:	9201      	str	r2, [sp, #4]
 8010952:	6163      	str	r3, [r4, #20]
 8010954:	9b01      	ldr	r3, [sp, #4]
 8010956:	2b00      	cmp	r3, #0
 8010958:	61a3      	str	r3, [r4, #24]
 801095a:	bf0c      	ite	eq
 801095c:	2201      	moveq	r2, #1
 801095e:	2202      	movne	r2, #2
 8010960:	6122      	str	r2, [r4, #16]
 8010962:	b1a5      	cbz	r5, 801098e <__d2b+0x92>
 8010964:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010968:	4405      	add	r5, r0
 801096a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801096e:	603d      	str	r5, [r7, #0]
 8010970:	6030      	str	r0, [r6, #0]
 8010972:	4620      	mov	r0, r4
 8010974:	b003      	add	sp, #12
 8010976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801097a:	6161      	str	r1, [r4, #20]
 801097c:	e7ea      	b.n	8010954 <__d2b+0x58>
 801097e:	a801      	add	r0, sp, #4
 8010980:	f7ff fce7 	bl	8010352 <__lo0bits>
 8010984:	9b01      	ldr	r3, [sp, #4]
 8010986:	3020      	adds	r0, #32
 8010988:	2201      	movs	r2, #1
 801098a:	6163      	str	r3, [r4, #20]
 801098c:	e7e8      	b.n	8010960 <__d2b+0x64>
 801098e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010992:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010996:	6038      	str	r0, [r7, #0]
 8010998:	6918      	ldr	r0, [r3, #16]
 801099a:	f7ff fcbb 	bl	8010314 <__hi0bits>
 801099e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80109a2:	e7e5      	b.n	8010970 <__d2b+0x74>
 80109a4:	080302c9 	.word	0x080302c9
 80109a8:	080302da 	.word	0x080302da

080109ac <__ratio>:
 80109ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b0:	b085      	sub	sp, #20
 80109b2:	e9cd 1000 	strd	r1, r0, [sp]
 80109b6:	a902      	add	r1, sp, #8
 80109b8:	f7ff ff52 	bl	8010860 <__b2d>
 80109bc:	a903      	add	r1, sp, #12
 80109be:	9800      	ldr	r0, [sp, #0]
 80109c0:	ec55 4b10 	vmov	r4, r5, d0
 80109c4:	f7ff ff4c 	bl	8010860 <__b2d>
 80109c8:	9b01      	ldr	r3, [sp, #4]
 80109ca:	462f      	mov	r7, r5
 80109cc:	4620      	mov	r0, r4
 80109ce:	6919      	ldr	r1, [r3, #16]
 80109d0:	9b00      	ldr	r3, [sp, #0]
 80109d2:	691b      	ldr	r3, [r3, #16]
 80109d4:	1ac9      	subs	r1, r1, r3
 80109d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80109da:	ec5b ab10 	vmov	sl, fp, d0
 80109de:	1a9b      	subs	r3, r3, r2
 80109e0:	46d9      	mov	r9, fp
 80109e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	bfcd      	iteet	gt
 80109ea:	462a      	movgt	r2, r5
 80109ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80109f0:	465a      	movle	r2, fp
 80109f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80109f6:	bfd8      	it	le
 80109f8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80109fc:	4652      	mov	r2, sl
 80109fe:	4639      	mov	r1, r7
 8010a00:	464b      	mov	r3, r9
 8010a02:	f7ef ff27 	bl	8000854 <__aeabi_ddiv>
 8010a06:	ec41 0b10 	vmov	d0, r0, r1
 8010a0a:	b005      	add	sp, #20
 8010a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a10 <__copybits>:
 8010a10:	3901      	subs	r1, #1
 8010a12:	f102 0314 	add.w	r3, r2, #20
 8010a16:	1149      	asrs	r1, r1, #5
 8010a18:	b570      	push	{r4, r5, r6, lr}
 8010a1a:	3101      	adds	r1, #1
 8010a1c:	6914      	ldr	r4, [r2, #16]
 8010a1e:	1f05      	subs	r5, r0, #4
 8010a20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010a24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a28:	42a3      	cmp	r3, r4
 8010a2a:	d30c      	bcc.n	8010a46 <__copybits+0x36>
 8010a2c:	1aa3      	subs	r3, r4, r2
 8010a2e:	3211      	adds	r2, #17
 8010a30:	3b11      	subs	r3, #17
 8010a32:	f023 0303 	bic.w	r3, r3, #3
 8010a36:	42a2      	cmp	r2, r4
 8010a38:	bf88      	it	hi
 8010a3a:	2300      	movhi	r3, #0
 8010a3c:	4418      	add	r0, r3
 8010a3e:	2300      	movs	r3, #0
 8010a40:	4288      	cmp	r0, r1
 8010a42:	d305      	bcc.n	8010a50 <__copybits+0x40>
 8010a44:	bd70      	pop	{r4, r5, r6, pc}
 8010a46:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8010a4e:	e7eb      	b.n	8010a28 <__copybits+0x18>
 8010a50:	f840 3b04 	str.w	r3, [r0], #4
 8010a54:	e7f4      	b.n	8010a40 <__copybits+0x30>

08010a56 <__any_on>:
 8010a56:	f100 0214 	add.w	r2, r0, #20
 8010a5a:	114b      	asrs	r3, r1, #5
 8010a5c:	6900      	ldr	r0, [r0, #16]
 8010a5e:	4298      	cmp	r0, r3
 8010a60:	b510      	push	{r4, lr}
 8010a62:	db11      	blt.n	8010a88 <__any_on+0x32>
 8010a64:	dd0a      	ble.n	8010a7c <__any_on+0x26>
 8010a66:	f011 011f 	ands.w	r1, r1, #31
 8010a6a:	d007      	beq.n	8010a7c <__any_on+0x26>
 8010a6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010a70:	fa24 f001 	lsr.w	r0, r4, r1
 8010a74:	fa00 f101 	lsl.w	r1, r0, r1
 8010a78:	428c      	cmp	r4, r1
 8010a7a:	d10b      	bne.n	8010a94 <__any_on+0x3e>
 8010a7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d803      	bhi.n	8010a8c <__any_on+0x36>
 8010a84:	2000      	movs	r0, #0
 8010a86:	bd10      	pop	{r4, pc}
 8010a88:	4603      	mov	r3, r0
 8010a8a:	e7f7      	b.n	8010a7c <__any_on+0x26>
 8010a8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a90:	2900      	cmp	r1, #0
 8010a92:	d0f5      	beq.n	8010a80 <__any_on+0x2a>
 8010a94:	2001      	movs	r0, #1
 8010a96:	e7f6      	b.n	8010a86 <__any_on+0x30>

08010a98 <sulp>:
 8010a98:	b570      	push	{r4, r5, r6, lr}
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	460d      	mov	r5, r1
 8010a9e:	4616      	mov	r6, r2
 8010aa0:	ec45 4b10 	vmov	d0, r4, r5
 8010aa4:	f7ff feb6 	bl	8010814 <__ulp>
 8010aa8:	ec51 0b10 	vmov	r0, r1, d0
 8010aac:	b17e      	cbz	r6, 8010ace <sulp+0x36>
 8010aae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ab2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dd09      	ble.n	8010ace <sulp+0x36>
 8010aba:	051b      	lsls	r3, r3, #20
 8010abc:	2400      	movs	r4, #0
 8010abe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010ac2:	4622      	mov	r2, r4
 8010ac4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010ac8:	462b      	mov	r3, r5
 8010aca:	f7ef fd99 	bl	8000600 <__aeabi_dmul>
 8010ace:	ec41 0b10 	vmov	d0, r0, r1
 8010ad2:	bd70      	pop	{r4, r5, r6, pc}
 8010ad4:	0000      	movs	r0, r0
	...

08010ad8 <_strtod_l>:
 8010ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010adc:	b09f      	sub	sp, #124	@ 0x7c
 8010ade:	460c      	mov	r4, r1
 8010ae0:	f04f 0a00 	mov.w	sl, #0
 8010ae4:	f04f 0b00 	mov.w	fp, #0
 8010ae8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010aea:	2200      	movs	r2, #0
 8010aec:	9005      	str	r0, [sp, #20]
 8010aee:	921a      	str	r2, [sp, #104]	@ 0x68
 8010af0:	460a      	mov	r2, r1
 8010af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010af4:	7811      	ldrb	r1, [r2, #0]
 8010af6:	292b      	cmp	r1, #43	@ 0x2b
 8010af8:	d04a      	beq.n	8010b90 <_strtod_l+0xb8>
 8010afa:	d838      	bhi.n	8010b6e <_strtod_l+0x96>
 8010afc:	290d      	cmp	r1, #13
 8010afe:	d832      	bhi.n	8010b66 <_strtod_l+0x8e>
 8010b00:	2908      	cmp	r1, #8
 8010b02:	d832      	bhi.n	8010b6a <_strtod_l+0x92>
 8010b04:	2900      	cmp	r1, #0
 8010b06:	d03b      	beq.n	8010b80 <_strtod_l+0xa8>
 8010b08:	2200      	movs	r2, #0
 8010b0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010b0e:	782a      	ldrb	r2, [r5, #0]
 8010b10:	2a30      	cmp	r2, #48	@ 0x30
 8010b12:	f040 80b2 	bne.w	8010c7a <_strtod_l+0x1a2>
 8010b16:	786a      	ldrb	r2, [r5, #1]
 8010b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b1c:	2a58      	cmp	r2, #88	@ 0x58
 8010b1e:	d16e      	bne.n	8010bfe <_strtod_l+0x126>
 8010b20:	9302      	str	r3, [sp, #8]
 8010b22:	a919      	add	r1, sp, #100	@ 0x64
 8010b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b26:	4a90      	ldr	r2, [pc, #576]	@ (8010d68 <_strtod_l+0x290>)
 8010b28:	9301      	str	r3, [sp, #4]
 8010b2a:	ab1a      	add	r3, sp, #104	@ 0x68
 8010b2c:	9805      	ldr	r0, [sp, #20]
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010b32:	f001 f919 	bl	8011d68 <__gethex>
 8010b36:	f010 060f 	ands.w	r6, r0, #15
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	d005      	beq.n	8010b4a <_strtod_l+0x72>
 8010b3e:	2e06      	cmp	r6, #6
 8010b40:	d128      	bne.n	8010b94 <_strtod_l+0xbc>
 8010b42:	3501      	adds	r5, #1
 8010b44:	2300      	movs	r3, #0
 8010b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8010b48:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f040 858e 	bne.w	801166e <_strtod_l+0xb96>
 8010b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b54:	b1cb      	cbz	r3, 8010b8a <_strtod_l+0xb2>
 8010b56:	4652      	mov	r2, sl
 8010b58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010b5c:	ec43 2b10 	vmov	d0, r2, r3
 8010b60:	b01f      	add	sp, #124	@ 0x7c
 8010b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b66:	2920      	cmp	r1, #32
 8010b68:	d1ce      	bne.n	8010b08 <_strtod_l+0x30>
 8010b6a:	3201      	adds	r2, #1
 8010b6c:	e7c1      	b.n	8010af2 <_strtod_l+0x1a>
 8010b6e:	292d      	cmp	r1, #45	@ 0x2d
 8010b70:	d1ca      	bne.n	8010b08 <_strtod_l+0x30>
 8010b72:	2101      	movs	r1, #1
 8010b74:	910e      	str	r1, [sp, #56]	@ 0x38
 8010b76:	1c51      	adds	r1, r2, #1
 8010b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8010b7a:	7852      	ldrb	r2, [r2, #1]
 8010b7c:	2a00      	cmp	r2, #0
 8010b7e:	d1c5      	bne.n	8010b0c <_strtod_l+0x34>
 8010b80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f040 8570 	bne.w	801166a <_strtod_l+0xb92>
 8010b8a:	4652      	mov	r2, sl
 8010b8c:	465b      	mov	r3, fp
 8010b8e:	e7e5      	b.n	8010b5c <_strtod_l+0x84>
 8010b90:	2100      	movs	r1, #0
 8010b92:	e7ef      	b.n	8010b74 <_strtod_l+0x9c>
 8010b94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010b96:	b13a      	cbz	r2, 8010ba8 <_strtod_l+0xd0>
 8010b98:	2135      	movs	r1, #53	@ 0x35
 8010b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8010b9c:	f7ff ff38 	bl	8010a10 <__copybits>
 8010ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ba2:	9805      	ldr	r0, [sp, #20]
 8010ba4:	f7ff fb02 	bl	80101ac <_Bfree>
 8010ba8:	3e01      	subs	r6, #1
 8010baa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010bac:	2e04      	cmp	r6, #4
 8010bae:	d806      	bhi.n	8010bbe <_strtod_l+0xe6>
 8010bb0:	e8df f006 	tbb	[pc, r6]
 8010bb4:	201d0314 	.word	0x201d0314
 8010bb8:	14          	.byte	0x14
 8010bb9:	00          	.byte	0x00
 8010bba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010bbe:	05e1      	lsls	r1, r4, #23
 8010bc0:	bf48      	it	mi
 8010bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010bca:	0d1b      	lsrs	r3, r3, #20
 8010bcc:	051b      	lsls	r3, r3, #20
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d1bb      	bne.n	8010b4a <_strtod_l+0x72>
 8010bd2:	f7fe fafd 	bl	800f1d0 <__errno>
 8010bd6:	2322      	movs	r3, #34	@ 0x22
 8010bd8:	6003      	str	r3, [r0, #0]
 8010bda:	e7b6      	b.n	8010b4a <_strtod_l+0x72>
 8010bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010bec:	e7e7      	b.n	8010bbe <_strtod_l+0xe6>
 8010bee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010d70 <_strtod_l+0x298>
 8010bf2:	e7e4      	b.n	8010bbe <_strtod_l+0xe6>
 8010bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010bf8:	f04f 3aff 	mov.w	sl, #4294967295
 8010bfc:	e7df      	b.n	8010bbe <_strtod_l+0xe6>
 8010bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c00:	1c5a      	adds	r2, r3, #1
 8010c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c04:	785b      	ldrb	r3, [r3, #1]
 8010c06:	2b30      	cmp	r3, #48	@ 0x30
 8010c08:	d0f9      	beq.n	8010bfe <_strtod_l+0x126>
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d09d      	beq.n	8010b4a <_strtod_l+0x72>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	2700      	movs	r7, #0
 8010c12:	9308      	str	r3, [sp, #32]
 8010c14:	220a      	movs	r2, #10
 8010c16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c18:	46b9      	mov	r9, r7
 8010c1a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010c1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c1e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010c20:	7805      	ldrb	r5, [r0, #0]
 8010c22:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010c26:	b2d9      	uxtb	r1, r3
 8010c28:	2909      	cmp	r1, #9
 8010c2a:	d928      	bls.n	8010c7e <_strtod_l+0x1a6>
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	494f      	ldr	r1, [pc, #316]	@ (8010d6c <_strtod_l+0x294>)
 8010c30:	f000 ffd6 	bl	8011be0 <strncmp>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d032      	beq.n	8010c9e <_strtod_l+0x1c6>
 8010c38:	2000      	movs	r0, #0
 8010c3a:	462a      	mov	r2, r5
 8010c3c:	464d      	mov	r5, r9
 8010c3e:	4603      	mov	r3, r0
 8010c40:	900a      	str	r0, [sp, #40]	@ 0x28
 8010c42:	2a65      	cmp	r2, #101	@ 0x65
 8010c44:	d001      	beq.n	8010c4a <_strtod_l+0x172>
 8010c46:	2a45      	cmp	r2, #69	@ 0x45
 8010c48:	d114      	bne.n	8010c74 <_strtod_l+0x19c>
 8010c4a:	b91d      	cbnz	r5, 8010c54 <_strtod_l+0x17c>
 8010c4c:	9a08      	ldr	r2, [sp, #32]
 8010c4e:	4302      	orrs	r2, r0
 8010c50:	d096      	beq.n	8010b80 <_strtod_l+0xa8>
 8010c52:	2500      	movs	r5, #0
 8010c54:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010c56:	1c62      	adds	r2, r4, #1
 8010c58:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c5a:	7862      	ldrb	r2, [r4, #1]
 8010c5c:	2a2b      	cmp	r2, #43	@ 0x2b
 8010c5e:	d079      	beq.n	8010d54 <_strtod_l+0x27c>
 8010c60:	2a2d      	cmp	r2, #45	@ 0x2d
 8010c62:	d07d      	beq.n	8010d60 <_strtod_l+0x288>
 8010c64:	f04f 0c00 	mov.w	ip, #0
 8010c68:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010c6c:	2909      	cmp	r1, #9
 8010c6e:	f240 8085 	bls.w	8010d7c <_strtod_l+0x2a4>
 8010c72:	9419      	str	r4, [sp, #100]	@ 0x64
 8010c74:	f04f 0800 	mov.w	r8, #0
 8010c78:	e0a5      	b.n	8010dc6 <_strtod_l+0x2ee>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	e7c8      	b.n	8010c10 <_strtod_l+0x138>
 8010c7e:	f1b9 0f08 	cmp.w	r9, #8
 8010c82:	f100 0001 	add.w	r0, r0, #1
 8010c86:	f109 0901 	add.w	r9, r9, #1
 8010c8a:	bfd4      	ite	le
 8010c8c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010c8e:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010c92:	9019      	str	r0, [sp, #100]	@ 0x64
 8010c94:	bfdc      	itt	le
 8010c96:	fb02 3301 	mlale	r3, r2, r1, r3
 8010c9a:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010c9c:	e7bf      	b.n	8010c1e <_strtod_l+0x146>
 8010c9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ca0:	1c5a      	adds	r2, r3, #1
 8010ca2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ca4:	785a      	ldrb	r2, [r3, #1]
 8010ca6:	f1b9 0f00 	cmp.w	r9, #0
 8010caa:	d03a      	beq.n	8010d22 <_strtod_l+0x24a>
 8010cac:	464d      	mov	r5, r9
 8010cae:	900a      	str	r0, [sp, #40]	@ 0x28
 8010cb0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010cb4:	2b09      	cmp	r3, #9
 8010cb6:	d912      	bls.n	8010cde <_strtod_l+0x206>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e7c2      	b.n	8010c42 <_strtod_l+0x16a>
 8010cbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cbe:	3001      	adds	r0, #1
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010cc4:	785a      	ldrb	r2, [r3, #1]
 8010cc6:	2a30      	cmp	r2, #48	@ 0x30
 8010cc8:	d0f8      	beq.n	8010cbc <_strtod_l+0x1e4>
 8010cca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010cce:	2b08      	cmp	r3, #8
 8010cd0:	f200 84d2 	bhi.w	8011678 <_strtod_l+0xba0>
 8010cd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010cda:	4605      	mov	r5, r0
 8010cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010cde:	3a30      	subs	r2, #48	@ 0x30
 8010ce0:	f100 0301 	add.w	r3, r0, #1
 8010ce4:	d017      	beq.n	8010d16 <_strtod_l+0x23e>
 8010ce6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ce8:	462e      	mov	r6, r5
 8010cea:	f04f 0e0a 	mov.w	lr, #10
 8010cee:	4419      	add	r1, r3
 8010cf0:	910a      	str	r1, [sp, #40]	@ 0x28
 8010cf2:	1c71      	adds	r1, r6, #1
 8010cf4:	eba1 0c05 	sub.w	ip, r1, r5
 8010cf8:	4563      	cmp	r3, ip
 8010cfa:	dc14      	bgt.n	8010d26 <_strtod_l+0x24e>
 8010cfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010d00:	182b      	adds	r3, r5, r0
 8010d02:	3501      	adds	r5, #1
 8010d04:	2b08      	cmp	r3, #8
 8010d06:	4405      	add	r5, r0
 8010d08:	dc1a      	bgt.n	8010d40 <_strtod_l+0x268>
 8010d0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d0c:	230a      	movs	r3, #10
 8010d0e:	fb03 2301 	mla	r3, r3, r1, r2
 8010d12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d14:	2300      	movs	r3, #0
 8010d16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d18:	4618      	mov	r0, r3
 8010d1a:	1c51      	adds	r1, r2, #1
 8010d1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010d1e:	7852      	ldrb	r2, [r2, #1]
 8010d20:	e7c6      	b.n	8010cb0 <_strtod_l+0x1d8>
 8010d22:	4648      	mov	r0, r9
 8010d24:	e7cf      	b.n	8010cc6 <_strtod_l+0x1ee>
 8010d26:	2e08      	cmp	r6, #8
 8010d28:	dc05      	bgt.n	8010d36 <_strtod_l+0x25e>
 8010d2a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010d2c:	fb0e f606 	mul.w	r6, lr, r6
 8010d30:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010d32:	460e      	mov	r6, r1
 8010d34:	e7dd      	b.n	8010cf2 <_strtod_l+0x21a>
 8010d36:	2910      	cmp	r1, #16
 8010d38:	bfd8      	it	le
 8010d3a:	fb0e f707 	mulle.w	r7, lr, r7
 8010d3e:	e7f8      	b.n	8010d32 <_strtod_l+0x25a>
 8010d40:	2b0f      	cmp	r3, #15
 8010d42:	bfdc      	itt	le
 8010d44:	230a      	movle	r3, #10
 8010d46:	fb03 2707 	mlale	r7, r3, r7, r2
 8010d4a:	e7e3      	b.n	8010d14 <_strtod_l+0x23c>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d50:	2301      	movs	r3, #1
 8010d52:	e77b      	b.n	8010c4c <_strtod_l+0x174>
 8010d54:	f04f 0c00 	mov.w	ip, #0
 8010d58:	1ca2      	adds	r2, r4, #2
 8010d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d5c:	78a2      	ldrb	r2, [r4, #2]
 8010d5e:	e783      	b.n	8010c68 <_strtod_l+0x190>
 8010d60:	f04f 0c01 	mov.w	ip, #1
 8010d64:	e7f8      	b.n	8010d58 <_strtod_l+0x280>
 8010d66:	bf00      	nop
 8010d68:	080304fc 	.word	0x080304fc
 8010d6c:	08030333 	.word	0x08030333
 8010d70:	7ff00000 	.word	0x7ff00000
 8010d74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d76:	1c51      	adds	r1, r2, #1
 8010d78:	9119      	str	r1, [sp, #100]	@ 0x64
 8010d7a:	7852      	ldrb	r2, [r2, #1]
 8010d7c:	2a30      	cmp	r2, #48	@ 0x30
 8010d7e:	d0f9      	beq.n	8010d74 <_strtod_l+0x29c>
 8010d80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010d84:	2908      	cmp	r1, #8
 8010d86:	f63f af75 	bhi.w	8010c74 <_strtod_l+0x19c>
 8010d8a:	3a30      	subs	r2, #48	@ 0x30
 8010d8c:	f04f 080a 	mov.w	r8, #10
 8010d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010d96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010d98:	1c56      	adds	r6, r2, #1
 8010d9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8010d9c:	7852      	ldrb	r2, [r2, #1]
 8010d9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010da2:	f1be 0f09 	cmp.w	lr, #9
 8010da6:	d939      	bls.n	8010e1c <_strtod_l+0x344>
 8010da8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010daa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010dae:	1a76      	subs	r6, r6, r1
 8010db0:	2e08      	cmp	r6, #8
 8010db2:	dc03      	bgt.n	8010dbc <_strtod_l+0x2e4>
 8010db4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010db6:	4588      	cmp	r8, r1
 8010db8:	bfa8      	it	ge
 8010dba:	4688      	movge	r8, r1
 8010dbc:	f1bc 0f00 	cmp.w	ip, #0
 8010dc0:	d001      	beq.n	8010dc6 <_strtod_l+0x2ee>
 8010dc2:	f1c8 0800 	rsb	r8, r8, #0
 8010dc6:	2d00      	cmp	r5, #0
 8010dc8:	d14e      	bne.n	8010e68 <_strtod_l+0x390>
 8010dca:	9908      	ldr	r1, [sp, #32]
 8010dcc:	4308      	orrs	r0, r1
 8010dce:	f47f aebc 	bne.w	8010b4a <_strtod_l+0x72>
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f47f aed4 	bne.w	8010b80 <_strtod_l+0xa8>
 8010dd8:	2a69      	cmp	r2, #105	@ 0x69
 8010dda:	d028      	beq.n	8010e2e <_strtod_l+0x356>
 8010ddc:	dc25      	bgt.n	8010e2a <_strtod_l+0x352>
 8010dde:	2a49      	cmp	r2, #73	@ 0x49
 8010de0:	d025      	beq.n	8010e2e <_strtod_l+0x356>
 8010de2:	2a4e      	cmp	r2, #78	@ 0x4e
 8010de4:	f47f aecc 	bne.w	8010b80 <_strtod_l+0xa8>
 8010de8:	499a      	ldr	r1, [pc, #616]	@ (8011054 <_strtod_l+0x57c>)
 8010dea:	a819      	add	r0, sp, #100	@ 0x64
 8010dec:	f001 f9dc 	bl	80121a8 <__match>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	f43f aec5 	beq.w	8010b80 <_strtod_l+0xa8>
 8010df6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	2b28      	cmp	r3, #40	@ 0x28
 8010dfc:	d12e      	bne.n	8010e5c <_strtod_l+0x384>
 8010dfe:	aa1c      	add	r2, sp, #112	@ 0x70
 8010e00:	4995      	ldr	r1, [pc, #596]	@ (8011058 <_strtod_l+0x580>)
 8010e02:	a819      	add	r0, sp, #100	@ 0x64
 8010e04:	f001 f9e4 	bl	80121d0 <__hexnan>
 8010e08:	2805      	cmp	r0, #5
 8010e0a:	d127      	bne.n	8010e5c <_strtod_l+0x384>
 8010e0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010e12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010e16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010e1a:	e696      	b.n	8010b4a <_strtod_l+0x72>
 8010e1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e1e:	fb08 2101 	mla	r1, r8, r1, r2
 8010e22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010e26:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e28:	e7b5      	b.n	8010d96 <_strtod_l+0x2be>
 8010e2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8010e2c:	e7da      	b.n	8010de4 <_strtod_l+0x30c>
 8010e2e:	498b      	ldr	r1, [pc, #556]	@ (801105c <_strtod_l+0x584>)
 8010e30:	a819      	add	r0, sp, #100	@ 0x64
 8010e32:	f001 f9b9 	bl	80121a8 <__match>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	f43f aea2 	beq.w	8010b80 <_strtod_l+0xa8>
 8010e3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e3e:	a819      	add	r0, sp, #100	@ 0x64
 8010e40:	4987      	ldr	r1, [pc, #540]	@ (8011060 <_strtod_l+0x588>)
 8010e42:	3b01      	subs	r3, #1
 8010e44:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e46:	f001 f9af 	bl	80121a8 <__match>
 8010e4a:	b910      	cbnz	r0, 8010e52 <_strtod_l+0x37a>
 8010e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e4e:	3301      	adds	r3, #1
 8010e50:	9319      	str	r3, [sp, #100]	@ 0x64
 8010e52:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011070 <_strtod_l+0x598>
 8010e56:	f04f 0a00 	mov.w	sl, #0
 8010e5a:	e676      	b.n	8010b4a <_strtod_l+0x72>
 8010e5c:	4881      	ldr	r0, [pc, #516]	@ (8011064 <_strtod_l+0x58c>)
 8010e5e:	f000 fee3 	bl	8011c28 <nan>
 8010e62:	ec5b ab10 	vmov	sl, fp, d0
 8010e66:	e670      	b.n	8010b4a <_strtod_l+0x72>
 8010e68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e6a:	f1b9 0f00 	cmp.w	r9, #0
 8010e6e:	bf08      	it	eq
 8010e70:	46a9      	moveq	r9, r5
 8010e72:	2d10      	cmp	r5, #16
 8010e74:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010e76:	eba8 0303 	sub.w	r3, r8, r3
 8010e7a:	462c      	mov	r4, r5
 8010e7c:	bfa8      	it	ge
 8010e7e:	2410      	movge	r4, #16
 8010e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e82:	f7ef fb43 	bl	800050c <__aeabi_ui2d>
 8010e86:	2d09      	cmp	r5, #9
 8010e88:	4682      	mov	sl, r0
 8010e8a:	468b      	mov	fp, r1
 8010e8c:	dc13      	bgt.n	8010eb6 <_strtod_l+0x3de>
 8010e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f43f ae5a 	beq.w	8010b4a <_strtod_l+0x72>
 8010e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e98:	dd78      	ble.n	8010f8c <_strtod_l+0x4b4>
 8010e9a:	2b16      	cmp	r3, #22
 8010e9c:	dc5f      	bgt.n	8010f5e <_strtod_l+0x486>
 8010e9e:	4972      	ldr	r1, [pc, #456]	@ (8011068 <_strtod_l+0x590>)
 8010ea0:	4652      	mov	r2, sl
 8010ea2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ea6:	465b      	mov	r3, fp
 8010ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010eac:	f7ef fba8 	bl	8000600 <__aeabi_dmul>
 8010eb0:	4682      	mov	sl, r0
 8010eb2:	468b      	mov	fp, r1
 8010eb4:	e649      	b.n	8010b4a <_strtod_l+0x72>
 8010eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8011068 <_strtod_l+0x590>)
 8010eb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ebc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010ec0:	f7ef fb9e 	bl	8000600 <__aeabi_dmul>
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	468b      	mov	fp, r1
 8010ec8:	4638      	mov	r0, r7
 8010eca:	f7ef fb1f 	bl	800050c <__aeabi_ui2d>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	4650      	mov	r0, sl
 8010ed4:	4659      	mov	r1, fp
 8010ed6:	f7ef f9dd 	bl	8000294 <__adddf3>
 8010eda:	2d0f      	cmp	r5, #15
 8010edc:	4682      	mov	sl, r0
 8010ede:	468b      	mov	fp, r1
 8010ee0:	ddd5      	ble.n	8010e8e <_strtod_l+0x3b6>
 8010ee2:	1b2c      	subs	r4, r5, r4
 8010ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ee6:	441c      	add	r4, r3
 8010ee8:	2c00      	cmp	r4, #0
 8010eea:	f340 8093 	ble.w	8011014 <_strtod_l+0x53c>
 8010eee:	f014 030f 	ands.w	r3, r4, #15
 8010ef2:	d00a      	beq.n	8010f0a <_strtod_l+0x432>
 8010ef4:	495c      	ldr	r1, [pc, #368]	@ (8011068 <_strtod_l+0x590>)
 8010ef6:	4652      	mov	r2, sl
 8010ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010efc:	465b      	mov	r3, fp
 8010efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f02:	f7ef fb7d 	bl	8000600 <__aeabi_dmul>
 8010f06:	4682      	mov	sl, r0
 8010f08:	468b      	mov	fp, r1
 8010f0a:	f034 040f 	bics.w	r4, r4, #15
 8010f0e:	d073      	beq.n	8010ff8 <_strtod_l+0x520>
 8010f10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010f14:	dd49      	ble.n	8010faa <_strtod_l+0x4d2>
 8010f16:	2400      	movs	r4, #0
 8010f18:	46a0      	mov	r8, r4
 8010f1a:	46a1      	mov	r9, r4
 8010f1c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010f1e:	2322      	movs	r3, #34	@ 0x22
 8010f20:	9a05      	ldr	r2, [sp, #20]
 8010f22:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011070 <_strtod_l+0x598>
 8010f26:	f04f 0a00 	mov.w	sl, #0
 8010f2a:	6013      	str	r3, [r2, #0]
 8010f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f43f ae0b 	beq.w	8010b4a <_strtod_l+0x72>
 8010f34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f36:	9805      	ldr	r0, [sp, #20]
 8010f38:	f7ff f938 	bl	80101ac <_Bfree>
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	9805      	ldr	r0, [sp, #20]
 8010f40:	f7ff f934 	bl	80101ac <_Bfree>
 8010f44:	4641      	mov	r1, r8
 8010f46:	9805      	ldr	r0, [sp, #20]
 8010f48:	f7ff f930 	bl	80101ac <_Bfree>
 8010f4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010f4e:	9805      	ldr	r0, [sp, #20]
 8010f50:	f7ff f92c 	bl	80101ac <_Bfree>
 8010f54:	4621      	mov	r1, r4
 8010f56:	9805      	ldr	r0, [sp, #20]
 8010f58:	f7ff f928 	bl	80101ac <_Bfree>
 8010f5c:	e5f5      	b.n	8010b4a <_strtod_l+0x72>
 8010f5e:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010f62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f64:	4293      	cmp	r3, r2
 8010f66:	dbbc      	blt.n	8010ee2 <_strtod_l+0x40a>
 8010f68:	f1c5 050f 	rsb	r5, r5, #15
 8010f6c:	4c3e      	ldr	r4, [pc, #248]	@ (8011068 <_strtod_l+0x590>)
 8010f6e:	4652      	mov	r2, sl
 8010f70:	465b      	mov	r3, fp
 8010f72:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f7a:	f7ef fb41 	bl	8000600 <__aeabi_dmul>
 8010f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f80:	1b5d      	subs	r5, r3, r5
 8010f82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010f86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010f8a:	e78f      	b.n	8010eac <_strtod_l+0x3d4>
 8010f8c:	3316      	adds	r3, #22
 8010f8e:	dba8      	blt.n	8010ee2 <_strtod_l+0x40a>
 8010f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f92:	4650      	mov	r0, sl
 8010f94:	4659      	mov	r1, fp
 8010f96:	eba3 0808 	sub.w	r8, r3, r8
 8010f9a:	4b33      	ldr	r3, [pc, #204]	@ (8011068 <_strtod_l+0x590>)
 8010f9c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010fa0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010fa4:	f7ef fc56 	bl	8000854 <__aeabi_ddiv>
 8010fa8:	e782      	b.n	8010eb0 <_strtod_l+0x3d8>
 8010faa:	2300      	movs	r3, #0
 8010fac:	1124      	asrs	r4, r4, #4
 8010fae:	4650      	mov	r0, sl
 8010fb0:	4659      	mov	r1, fp
 8010fb2:	4f2e      	ldr	r7, [pc, #184]	@ (801106c <_strtod_l+0x594>)
 8010fb4:	461e      	mov	r6, r3
 8010fb6:	2c01      	cmp	r4, #1
 8010fb8:	dc21      	bgt.n	8010ffe <_strtod_l+0x526>
 8010fba:	b10b      	cbz	r3, 8010fc0 <_strtod_l+0x4e8>
 8010fbc:	4682      	mov	sl, r0
 8010fbe:	468b      	mov	fp, r1
 8010fc0:	492a      	ldr	r1, [pc, #168]	@ (801106c <_strtod_l+0x594>)
 8010fc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010fc6:	4652      	mov	r2, sl
 8010fc8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010fcc:	465b      	mov	r3, fp
 8010fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fd2:	f7ef fb15 	bl	8000600 <__aeabi_dmul>
 8010fd6:	4b26      	ldr	r3, [pc, #152]	@ (8011070 <_strtod_l+0x598>)
 8010fd8:	460a      	mov	r2, r1
 8010fda:	4682      	mov	sl, r0
 8010fdc:	400b      	ands	r3, r1
 8010fde:	4925      	ldr	r1, [pc, #148]	@ (8011074 <_strtod_l+0x59c>)
 8010fe0:	428b      	cmp	r3, r1
 8010fe2:	d898      	bhi.n	8010f16 <_strtod_l+0x43e>
 8010fe4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010fe8:	428b      	cmp	r3, r1
 8010fea:	bf86      	itte	hi
 8010fec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011078 <_strtod_l+0x5a0>
 8010ff0:	f04f 3aff 	movhi.w	sl, #4294967295
 8010ff4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	9308      	str	r3, [sp, #32]
 8010ffc:	e076      	b.n	80110ec <_strtod_l+0x614>
 8010ffe:	07e2      	lsls	r2, r4, #31
 8011000:	d504      	bpl.n	801100c <_strtod_l+0x534>
 8011002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011006:	f7ef fafb 	bl	8000600 <__aeabi_dmul>
 801100a:	2301      	movs	r3, #1
 801100c:	3601      	adds	r6, #1
 801100e:	1064      	asrs	r4, r4, #1
 8011010:	3708      	adds	r7, #8
 8011012:	e7d0      	b.n	8010fb6 <_strtod_l+0x4de>
 8011014:	d0f0      	beq.n	8010ff8 <_strtod_l+0x520>
 8011016:	4264      	negs	r4, r4
 8011018:	f014 020f 	ands.w	r2, r4, #15
 801101c:	d00a      	beq.n	8011034 <_strtod_l+0x55c>
 801101e:	4b12      	ldr	r3, [pc, #72]	@ (8011068 <_strtod_l+0x590>)
 8011020:	4650      	mov	r0, sl
 8011022:	4659      	mov	r1, fp
 8011024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102c:	f7ef fc12 	bl	8000854 <__aeabi_ddiv>
 8011030:	4682      	mov	sl, r0
 8011032:	468b      	mov	fp, r1
 8011034:	1124      	asrs	r4, r4, #4
 8011036:	d0df      	beq.n	8010ff8 <_strtod_l+0x520>
 8011038:	2c1f      	cmp	r4, #31
 801103a:	dd1f      	ble.n	801107c <_strtod_l+0x5a4>
 801103c:	2400      	movs	r4, #0
 801103e:	46a0      	mov	r8, r4
 8011040:	46a1      	mov	r9, r4
 8011042:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011044:	2322      	movs	r3, #34	@ 0x22
 8011046:	9a05      	ldr	r2, [sp, #20]
 8011048:	f04f 0a00 	mov.w	sl, #0
 801104c:	f04f 0b00 	mov.w	fp, #0
 8011050:	6013      	str	r3, [r2, #0]
 8011052:	e76b      	b.n	8010f2c <_strtod_l+0x454>
 8011054:	08030221 	.word	0x08030221
 8011058:	080304e8 	.word	0x080304e8
 801105c:	08030219 	.word	0x08030219
 8011060:	08030250 	.word	0x08030250
 8011064:	08030389 	.word	0x08030389
 8011068:	08030420 	.word	0x08030420
 801106c:	080303f8 	.word	0x080303f8
 8011070:	7ff00000 	.word	0x7ff00000
 8011074:	7ca00000 	.word	0x7ca00000
 8011078:	7fefffff 	.word	0x7fefffff
 801107c:	f014 0310 	ands.w	r3, r4, #16
 8011080:	4650      	mov	r0, sl
 8011082:	4659      	mov	r1, fp
 8011084:	4ea9      	ldr	r6, [pc, #676]	@ (801132c <_strtod_l+0x854>)
 8011086:	bf18      	it	ne
 8011088:	236a      	movne	r3, #106	@ 0x6a
 801108a:	9308      	str	r3, [sp, #32]
 801108c:	2300      	movs	r3, #0
 801108e:	07e7      	lsls	r7, r4, #31
 8011090:	d504      	bpl.n	801109c <_strtod_l+0x5c4>
 8011092:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011096:	f7ef fab3 	bl	8000600 <__aeabi_dmul>
 801109a:	2301      	movs	r3, #1
 801109c:	1064      	asrs	r4, r4, #1
 801109e:	f106 0608 	add.w	r6, r6, #8
 80110a2:	d1f4      	bne.n	801108e <_strtod_l+0x5b6>
 80110a4:	b10b      	cbz	r3, 80110aa <_strtod_l+0x5d2>
 80110a6:	4682      	mov	sl, r0
 80110a8:	468b      	mov	fp, r1
 80110aa:	9b08      	ldr	r3, [sp, #32]
 80110ac:	b1b3      	cbz	r3, 80110dc <_strtod_l+0x604>
 80110ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80110b2:	4659      	mov	r1, fp
 80110b4:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	dd0f      	ble.n	80110dc <_strtod_l+0x604>
 80110bc:	2b1f      	cmp	r3, #31
 80110be:	dd56      	ble.n	801116e <_strtod_l+0x696>
 80110c0:	2b34      	cmp	r3, #52	@ 0x34
 80110c2:	f04f 0a00 	mov.w	sl, #0
 80110c6:	bfdb      	ittet	le
 80110c8:	f04f 33ff 	movle.w	r3, #4294967295
 80110cc:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80110d0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80110d4:	4093      	lslle	r3, r2
 80110d6:	bfd8      	it	le
 80110d8:	ea03 0b01 	andle.w	fp, r3, r1
 80110dc:	2200      	movs	r2, #0
 80110de:	2300      	movs	r3, #0
 80110e0:	4650      	mov	r0, sl
 80110e2:	4659      	mov	r1, fp
 80110e4:	f7ef fcf4 	bl	8000ad0 <__aeabi_dcmpeq>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d1a7      	bne.n	801103c <_strtod_l+0x564>
 80110ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110ee:	464a      	mov	r2, r9
 80110f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	462b      	mov	r3, r5
 80110f6:	9805      	ldr	r0, [sp, #20]
 80110f8:	f7ff f8c2 	bl	8010280 <__s2b>
 80110fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80110fe:	2800      	cmp	r0, #0
 8011100:	f43f af09 	beq.w	8010f16 <_strtod_l+0x43e>
 8011104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011106:	2400      	movs	r4, #0
 8011108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801110a:	2a00      	cmp	r2, #0
 801110c:	eba3 0308 	sub.w	r3, r3, r8
 8011110:	46a0      	mov	r8, r4
 8011112:	bfa8      	it	ge
 8011114:	2300      	movge	r3, #0
 8011116:	9312      	str	r3, [sp, #72]	@ 0x48
 8011118:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801111c:	9316      	str	r3, [sp, #88]	@ 0x58
 801111e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011120:	9805      	ldr	r0, [sp, #20]
 8011122:	6859      	ldr	r1, [r3, #4]
 8011124:	f7ff f802 	bl	801012c <_Balloc>
 8011128:	4681      	mov	r9, r0
 801112a:	2800      	cmp	r0, #0
 801112c:	f43f aef7 	beq.w	8010f1e <_strtod_l+0x446>
 8011130:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011132:	300c      	adds	r0, #12
 8011134:	691a      	ldr	r2, [r3, #16]
 8011136:	f103 010c 	add.w	r1, r3, #12
 801113a:	3202      	adds	r2, #2
 801113c:	0092      	lsls	r2, r2, #2
 801113e:	f7fe f882 	bl	800f246 <memcpy>
 8011142:	aa1c      	add	r2, sp, #112	@ 0x70
 8011144:	a91b      	add	r1, sp, #108	@ 0x6c
 8011146:	9805      	ldr	r0, [sp, #20]
 8011148:	ec4b ab10 	vmov	d0, sl, fp
 801114c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011150:	f7ff fbd4 	bl	80108fc <__d2b>
 8011154:	901a      	str	r0, [sp, #104]	@ 0x68
 8011156:	2800      	cmp	r0, #0
 8011158:	f43f aee1 	beq.w	8010f1e <_strtod_l+0x446>
 801115c:	2101      	movs	r1, #1
 801115e:	9805      	ldr	r0, [sp, #20]
 8011160:	f7ff f924 	bl	80103ac <__i2b>
 8011164:	4680      	mov	r8, r0
 8011166:	b948      	cbnz	r0, 801117c <_strtod_l+0x6a4>
 8011168:	f04f 0800 	mov.w	r8, #0
 801116c:	e6d7      	b.n	8010f1e <_strtod_l+0x446>
 801116e:	f04f 32ff 	mov.w	r2, #4294967295
 8011172:	fa02 f303 	lsl.w	r3, r2, r3
 8011176:	ea03 0a0a 	and.w	sl, r3, sl
 801117a:	e7af      	b.n	80110dc <_strtod_l+0x604>
 801117c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801117e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011180:	2d00      	cmp	r5, #0
 8011182:	bfa9      	itett	ge
 8011184:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011186:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011188:	18ef      	addge	r7, r5, r3
 801118a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801118c:	bfb8      	it	lt
 801118e:	1b5e      	sublt	r6, r3, r5
 8011190:	9b08      	ldr	r3, [sp, #32]
 8011192:	bfb8      	it	lt
 8011194:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011196:	1aed      	subs	r5, r5, r3
 8011198:	4b65      	ldr	r3, [pc, #404]	@ (8011330 <_strtod_l+0x858>)
 801119a:	4415      	add	r5, r2
 801119c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80111a0:	3d01      	subs	r5, #1
 80111a2:	429d      	cmp	r5, r3
 80111a4:	da4f      	bge.n	8011246 <_strtod_l+0x76e>
 80111a6:	1b5b      	subs	r3, r3, r5
 80111a8:	2101      	movs	r1, #1
 80111aa:	2b1f      	cmp	r3, #31
 80111ac:	eba2 0203 	sub.w	r2, r2, r3
 80111b0:	dc3d      	bgt.n	801122e <_strtod_l+0x756>
 80111b2:	fa01 f303 	lsl.w	r3, r1, r3
 80111b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80111b8:	2300      	movs	r3, #0
 80111ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80111bc:	18bd      	adds	r5, r7, r2
 80111be:	9b08      	ldr	r3, [sp, #32]
 80111c0:	4416      	add	r6, r2
 80111c2:	42af      	cmp	r7, r5
 80111c4:	441e      	add	r6, r3
 80111c6:	463b      	mov	r3, r7
 80111c8:	bfa8      	it	ge
 80111ca:	462b      	movge	r3, r5
 80111cc:	42b3      	cmp	r3, r6
 80111ce:	bfa8      	it	ge
 80111d0:	4633      	movge	r3, r6
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	bfc2      	ittt	gt
 80111d6:	1aed      	subgt	r5, r5, r3
 80111d8:	1af6      	subgt	r6, r6, r3
 80111da:	1aff      	subgt	r7, r7, r3
 80111dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111de:	2b00      	cmp	r3, #0
 80111e0:	dd16      	ble.n	8011210 <_strtod_l+0x738>
 80111e2:	4641      	mov	r1, r8
 80111e4:	461a      	mov	r2, r3
 80111e6:	9805      	ldr	r0, [sp, #20]
 80111e8:	f7ff f99a 	bl	8010520 <__pow5mult>
 80111ec:	4680      	mov	r8, r0
 80111ee:	2800      	cmp	r0, #0
 80111f0:	d0ba      	beq.n	8011168 <_strtod_l+0x690>
 80111f2:	4601      	mov	r1, r0
 80111f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80111f6:	9805      	ldr	r0, [sp, #20]
 80111f8:	f7ff f8ee 	bl	80103d8 <__multiply>
 80111fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80111fe:	2800      	cmp	r0, #0
 8011200:	f43f ae8d 	beq.w	8010f1e <_strtod_l+0x446>
 8011204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011206:	9805      	ldr	r0, [sp, #20]
 8011208:	f7fe ffd0 	bl	80101ac <_Bfree>
 801120c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801120e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011210:	2d00      	cmp	r5, #0
 8011212:	dc1d      	bgt.n	8011250 <_strtod_l+0x778>
 8011214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011216:	2b00      	cmp	r3, #0
 8011218:	dd23      	ble.n	8011262 <_strtod_l+0x78a>
 801121a:	4649      	mov	r1, r9
 801121c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801121e:	9805      	ldr	r0, [sp, #20]
 8011220:	f7ff f97e 	bl	8010520 <__pow5mult>
 8011224:	4681      	mov	r9, r0
 8011226:	b9e0      	cbnz	r0, 8011262 <_strtod_l+0x78a>
 8011228:	f04f 0900 	mov.w	r9, #0
 801122c:	e677      	b.n	8010f1e <_strtod_l+0x446>
 801122e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011232:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011234:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011238:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801123c:	35e2      	adds	r5, #226	@ 0xe2
 801123e:	fa01 f305 	lsl.w	r3, r1, r5
 8011242:	9310      	str	r3, [sp, #64]	@ 0x40
 8011244:	e7ba      	b.n	80111bc <_strtod_l+0x6e4>
 8011246:	2300      	movs	r3, #0
 8011248:	9310      	str	r3, [sp, #64]	@ 0x40
 801124a:	2301      	movs	r3, #1
 801124c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801124e:	e7b5      	b.n	80111bc <_strtod_l+0x6e4>
 8011250:	462a      	mov	r2, r5
 8011252:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011254:	9805      	ldr	r0, [sp, #20]
 8011256:	f7ff f9bd 	bl	80105d4 <__lshift>
 801125a:	901a      	str	r0, [sp, #104]	@ 0x68
 801125c:	2800      	cmp	r0, #0
 801125e:	d1d9      	bne.n	8011214 <_strtod_l+0x73c>
 8011260:	e65d      	b.n	8010f1e <_strtod_l+0x446>
 8011262:	2e00      	cmp	r6, #0
 8011264:	dd07      	ble.n	8011276 <_strtod_l+0x79e>
 8011266:	4649      	mov	r1, r9
 8011268:	4632      	mov	r2, r6
 801126a:	9805      	ldr	r0, [sp, #20]
 801126c:	f7ff f9b2 	bl	80105d4 <__lshift>
 8011270:	4681      	mov	r9, r0
 8011272:	2800      	cmp	r0, #0
 8011274:	d0d8      	beq.n	8011228 <_strtod_l+0x750>
 8011276:	2f00      	cmp	r7, #0
 8011278:	dd08      	ble.n	801128c <_strtod_l+0x7b4>
 801127a:	4641      	mov	r1, r8
 801127c:	463a      	mov	r2, r7
 801127e:	9805      	ldr	r0, [sp, #20]
 8011280:	f7ff f9a8 	bl	80105d4 <__lshift>
 8011284:	4680      	mov	r8, r0
 8011286:	2800      	cmp	r0, #0
 8011288:	f43f ae49 	beq.w	8010f1e <_strtod_l+0x446>
 801128c:	464a      	mov	r2, r9
 801128e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011290:	9805      	ldr	r0, [sp, #20]
 8011292:	f7ff fa27 	bl	80106e4 <__mdiff>
 8011296:	4604      	mov	r4, r0
 8011298:	2800      	cmp	r0, #0
 801129a:	f43f ae40 	beq.w	8010f1e <_strtod_l+0x446>
 801129e:	68c3      	ldr	r3, [r0, #12]
 80112a0:	4641      	mov	r1, r8
 80112a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80112a4:	2300      	movs	r3, #0
 80112a6:	60c3      	str	r3, [r0, #12]
 80112a8:	f7ff fa00 	bl	80106ac <__mcmp>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	da45      	bge.n	801133c <_strtod_l+0x864>
 80112b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112b2:	ea53 030a 	orrs.w	r3, r3, sl
 80112b6:	d16b      	bne.n	8011390 <_strtod_l+0x8b8>
 80112b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d167      	bne.n	8011390 <_strtod_l+0x8b8>
 80112c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112c4:	0d1b      	lsrs	r3, r3, #20
 80112c6:	051b      	lsls	r3, r3, #20
 80112c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80112cc:	d960      	bls.n	8011390 <_strtod_l+0x8b8>
 80112ce:	6963      	ldr	r3, [r4, #20]
 80112d0:	b913      	cbnz	r3, 80112d8 <_strtod_l+0x800>
 80112d2:	6923      	ldr	r3, [r4, #16]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	dd5b      	ble.n	8011390 <_strtod_l+0x8b8>
 80112d8:	4621      	mov	r1, r4
 80112da:	2201      	movs	r2, #1
 80112dc:	9805      	ldr	r0, [sp, #20]
 80112de:	f7ff f979 	bl	80105d4 <__lshift>
 80112e2:	4641      	mov	r1, r8
 80112e4:	4604      	mov	r4, r0
 80112e6:	f7ff f9e1 	bl	80106ac <__mcmp>
 80112ea:	2800      	cmp	r0, #0
 80112ec:	dd50      	ble.n	8011390 <_strtod_l+0x8b8>
 80112ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80112f2:	9a08      	ldr	r2, [sp, #32]
 80112f4:	0d1b      	lsrs	r3, r3, #20
 80112f6:	051b      	lsls	r3, r3, #20
 80112f8:	2a00      	cmp	r2, #0
 80112fa:	d06a      	beq.n	80113d2 <_strtod_l+0x8fa>
 80112fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011300:	d867      	bhi.n	80113d2 <_strtod_l+0x8fa>
 8011302:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011306:	f67f ae9d 	bls.w	8011044 <_strtod_l+0x56c>
 801130a:	4b0a      	ldr	r3, [pc, #40]	@ (8011334 <_strtod_l+0x85c>)
 801130c:	4650      	mov	r0, sl
 801130e:	4659      	mov	r1, fp
 8011310:	2200      	movs	r2, #0
 8011312:	f7ef f975 	bl	8000600 <__aeabi_dmul>
 8011316:	4b08      	ldr	r3, [pc, #32]	@ (8011338 <_strtod_l+0x860>)
 8011318:	4682      	mov	sl, r0
 801131a:	468b      	mov	fp, r1
 801131c:	400b      	ands	r3, r1
 801131e:	2b00      	cmp	r3, #0
 8011320:	f47f ae08 	bne.w	8010f34 <_strtod_l+0x45c>
 8011324:	2322      	movs	r3, #34	@ 0x22
 8011326:	9a05      	ldr	r2, [sp, #20]
 8011328:	6013      	str	r3, [r2, #0]
 801132a:	e603      	b.n	8010f34 <_strtod_l+0x45c>
 801132c:	08030510 	.word	0x08030510
 8011330:	fffffc02 	.word	0xfffffc02
 8011334:	39500000 	.word	0x39500000
 8011338:	7ff00000 	.word	0x7ff00000
 801133c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011340:	d165      	bne.n	801140e <_strtod_l+0x936>
 8011342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011348:	b35a      	cbz	r2, 80113a2 <_strtod_l+0x8ca>
 801134a:	4a9f      	ldr	r2, [pc, #636]	@ (80115c8 <_strtod_l+0xaf0>)
 801134c:	4293      	cmp	r3, r2
 801134e:	d12b      	bne.n	80113a8 <_strtod_l+0x8d0>
 8011350:	9b08      	ldr	r3, [sp, #32]
 8011352:	4651      	mov	r1, sl
 8011354:	b303      	cbz	r3, 8011398 <_strtod_l+0x8c0>
 8011356:	465a      	mov	r2, fp
 8011358:	4b9c      	ldr	r3, [pc, #624]	@ (80115cc <_strtod_l+0xaf4>)
 801135a:	4013      	ands	r3, r2
 801135c:	f04f 32ff 	mov.w	r2, #4294967295
 8011360:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011364:	d81b      	bhi.n	801139e <_strtod_l+0x8c6>
 8011366:	0d1b      	lsrs	r3, r3, #20
 8011368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801136c:	fa02 f303 	lsl.w	r3, r2, r3
 8011370:	4299      	cmp	r1, r3
 8011372:	d119      	bne.n	80113a8 <_strtod_l+0x8d0>
 8011374:	4b96      	ldr	r3, [pc, #600]	@ (80115d0 <_strtod_l+0xaf8>)
 8011376:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011378:	429a      	cmp	r2, r3
 801137a:	d102      	bne.n	8011382 <_strtod_l+0x8aa>
 801137c:	3101      	adds	r1, #1
 801137e:	f43f adce 	beq.w	8010f1e <_strtod_l+0x446>
 8011382:	4b92      	ldr	r3, [pc, #584]	@ (80115cc <_strtod_l+0xaf4>)
 8011384:	f04f 0a00 	mov.w	sl, #0
 8011388:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801138a:	401a      	ands	r2, r3
 801138c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011390:	9b08      	ldr	r3, [sp, #32]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1b9      	bne.n	801130a <_strtod_l+0x832>
 8011396:	e5cd      	b.n	8010f34 <_strtod_l+0x45c>
 8011398:	f04f 33ff 	mov.w	r3, #4294967295
 801139c:	e7e8      	b.n	8011370 <_strtod_l+0x898>
 801139e:	4613      	mov	r3, r2
 80113a0:	e7e6      	b.n	8011370 <_strtod_l+0x898>
 80113a2:	ea53 030a 	orrs.w	r3, r3, sl
 80113a6:	d0a2      	beq.n	80112ee <_strtod_l+0x816>
 80113a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80113aa:	b1db      	cbz	r3, 80113e4 <_strtod_l+0x90c>
 80113ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113ae:	4213      	tst	r3, r2
 80113b0:	d0ee      	beq.n	8011390 <_strtod_l+0x8b8>
 80113b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113b4:	4650      	mov	r0, sl
 80113b6:	9a08      	ldr	r2, [sp, #32]
 80113b8:	4659      	mov	r1, fp
 80113ba:	b1bb      	cbz	r3, 80113ec <_strtod_l+0x914>
 80113bc:	f7ff fb6c 	bl	8010a98 <sulp>
 80113c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113c4:	ec53 2b10 	vmov	r2, r3, d0
 80113c8:	f7ee ff64 	bl	8000294 <__adddf3>
 80113cc:	4682      	mov	sl, r0
 80113ce:	468b      	mov	fp, r1
 80113d0:	e7de      	b.n	8011390 <_strtod_l+0x8b8>
 80113d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80113d6:	f04f 3aff 	mov.w	sl, #4294967295
 80113da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80113de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80113e2:	e7d5      	b.n	8011390 <_strtod_l+0x8b8>
 80113e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80113e6:	ea13 0f0a 	tst.w	r3, sl
 80113ea:	e7e1      	b.n	80113b0 <_strtod_l+0x8d8>
 80113ec:	f7ff fb54 	bl	8010a98 <sulp>
 80113f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80113f4:	ec53 2b10 	vmov	r2, r3, d0
 80113f8:	f7ee ff4a 	bl	8000290 <__aeabi_dsub>
 80113fc:	2200      	movs	r2, #0
 80113fe:	2300      	movs	r3, #0
 8011400:	4682      	mov	sl, r0
 8011402:	468b      	mov	fp, r1
 8011404:	f7ef fb64 	bl	8000ad0 <__aeabi_dcmpeq>
 8011408:	2800      	cmp	r0, #0
 801140a:	d0c1      	beq.n	8011390 <_strtod_l+0x8b8>
 801140c:	e61a      	b.n	8011044 <_strtod_l+0x56c>
 801140e:	4641      	mov	r1, r8
 8011410:	4620      	mov	r0, r4
 8011412:	f7ff facb 	bl	80109ac <__ratio>
 8011416:	2200      	movs	r2, #0
 8011418:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801141c:	ec57 6b10 	vmov	r6, r7, d0
 8011420:	4630      	mov	r0, r6
 8011422:	4639      	mov	r1, r7
 8011424:	f7ef fb68 	bl	8000af8 <__aeabi_dcmple>
 8011428:	2800      	cmp	r0, #0
 801142a:	d06f      	beq.n	801150c <_strtod_l+0xa34>
 801142c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801142e:	2b00      	cmp	r3, #0
 8011430:	d17a      	bne.n	8011528 <_strtod_l+0xa50>
 8011432:	f1ba 0f00 	cmp.w	sl, #0
 8011436:	d158      	bne.n	80114ea <_strtod_l+0xa12>
 8011438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801143a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801143e:	2b00      	cmp	r3, #0
 8011440:	d15a      	bne.n	80114f8 <_strtod_l+0xa20>
 8011442:	2200      	movs	r2, #0
 8011444:	4b63      	ldr	r3, [pc, #396]	@ (80115d4 <_strtod_l+0xafc>)
 8011446:	4630      	mov	r0, r6
 8011448:	4639      	mov	r1, r7
 801144a:	f7ef fb4b 	bl	8000ae4 <__aeabi_dcmplt>
 801144e:	2800      	cmp	r0, #0
 8011450:	d159      	bne.n	8011506 <_strtod_l+0xa2e>
 8011452:	4630      	mov	r0, r6
 8011454:	4639      	mov	r1, r7
 8011456:	2200      	movs	r2, #0
 8011458:	4b5f      	ldr	r3, [pc, #380]	@ (80115d8 <_strtod_l+0xb00>)
 801145a:	f7ef f8d1 	bl	8000600 <__aeabi_dmul>
 801145e:	4606      	mov	r6, r0
 8011460:	460f      	mov	r7, r1
 8011462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011466:	9606      	str	r6, [sp, #24]
 8011468:	9307      	str	r3, [sp, #28]
 801146a:	4d58      	ldr	r5, [pc, #352]	@ (80115cc <_strtod_l+0xaf4>)
 801146c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011476:	401d      	ands	r5, r3
 8011478:	4b58      	ldr	r3, [pc, #352]	@ (80115dc <_strtod_l+0xb04>)
 801147a:	429d      	cmp	r5, r3
 801147c:	f040 80b2 	bne.w	80115e4 <_strtod_l+0xb0c>
 8011480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011486:	ec4b ab10 	vmov	d0, sl, fp
 801148a:	f7ff f9c3 	bl	8010814 <__ulp>
 801148e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011492:	ec51 0b10 	vmov	r0, r1, d0
 8011496:	f7ef f8b3 	bl	8000600 <__aeabi_dmul>
 801149a:	4652      	mov	r2, sl
 801149c:	465b      	mov	r3, fp
 801149e:	f7ee fef9 	bl	8000294 <__adddf3>
 80114a2:	460b      	mov	r3, r1
 80114a4:	4949      	ldr	r1, [pc, #292]	@ (80115cc <_strtod_l+0xaf4>)
 80114a6:	4682      	mov	sl, r0
 80114a8:	4a4d      	ldr	r2, [pc, #308]	@ (80115e0 <_strtod_l+0xb08>)
 80114aa:	4019      	ands	r1, r3
 80114ac:	4291      	cmp	r1, r2
 80114ae:	d942      	bls.n	8011536 <_strtod_l+0xa5e>
 80114b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80114b2:	4b47      	ldr	r3, [pc, #284]	@ (80115d0 <_strtod_l+0xaf8>)
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d103      	bne.n	80114c0 <_strtod_l+0x9e8>
 80114b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114ba:	3301      	adds	r3, #1
 80114bc:	f43f ad2f 	beq.w	8010f1e <_strtod_l+0x446>
 80114c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80115d0 <_strtod_l+0xaf8>
 80114c4:	f04f 3aff 	mov.w	sl, #4294967295
 80114c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80114ca:	9805      	ldr	r0, [sp, #20]
 80114cc:	f7fe fe6e 	bl	80101ac <_Bfree>
 80114d0:	4649      	mov	r1, r9
 80114d2:	9805      	ldr	r0, [sp, #20]
 80114d4:	f7fe fe6a 	bl	80101ac <_Bfree>
 80114d8:	4641      	mov	r1, r8
 80114da:	9805      	ldr	r0, [sp, #20]
 80114dc:	f7fe fe66 	bl	80101ac <_Bfree>
 80114e0:	4621      	mov	r1, r4
 80114e2:	9805      	ldr	r0, [sp, #20]
 80114e4:	f7fe fe62 	bl	80101ac <_Bfree>
 80114e8:	e619      	b.n	801111e <_strtod_l+0x646>
 80114ea:	f1ba 0f01 	cmp.w	sl, #1
 80114ee:	d103      	bne.n	80114f8 <_strtod_l+0xa20>
 80114f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f43f ada6 	beq.w	8011044 <_strtod_l+0x56c>
 80114f8:	2600      	movs	r6, #0
 80114fa:	4f36      	ldr	r7, [pc, #216]	@ (80115d4 <_strtod_l+0xafc>)
 80114fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80115a8 <_strtod_l+0xad0>
 8011500:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011504:	e7b1      	b.n	801146a <_strtod_l+0x992>
 8011506:	2600      	movs	r6, #0
 8011508:	4f33      	ldr	r7, [pc, #204]	@ (80115d8 <_strtod_l+0xb00>)
 801150a:	e7aa      	b.n	8011462 <_strtod_l+0x98a>
 801150c:	4b32      	ldr	r3, [pc, #200]	@ (80115d8 <_strtod_l+0xb00>)
 801150e:	4630      	mov	r0, r6
 8011510:	4639      	mov	r1, r7
 8011512:	2200      	movs	r2, #0
 8011514:	f7ef f874 	bl	8000600 <__aeabi_dmul>
 8011518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801151a:	4606      	mov	r6, r0
 801151c:	460f      	mov	r7, r1
 801151e:	2b00      	cmp	r3, #0
 8011520:	d09f      	beq.n	8011462 <_strtod_l+0x98a>
 8011522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011526:	e7a0      	b.n	801146a <_strtod_l+0x992>
 8011528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80115b0 <_strtod_l+0xad8>
 801152c:	ec57 6b17 	vmov	r6, r7, d7
 8011530:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011534:	e799      	b.n	801146a <_strtod_l+0x992>
 8011536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801153a:	9b08      	ldr	r3, [sp, #32]
 801153c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011540:	2b00      	cmp	r3, #0
 8011542:	d1c1      	bne.n	80114c8 <_strtod_l+0x9f0>
 8011544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011548:	0d1b      	lsrs	r3, r3, #20
 801154a:	051b      	lsls	r3, r3, #20
 801154c:	429d      	cmp	r5, r3
 801154e:	d1bb      	bne.n	80114c8 <_strtod_l+0x9f0>
 8011550:	4630      	mov	r0, r6
 8011552:	4639      	mov	r1, r7
 8011554:	f7ef fbb4 	bl	8000cc0 <__aeabi_d2lz>
 8011558:	f7ef f824 	bl	80005a4 <__aeabi_l2d>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	4630      	mov	r0, r6
 8011562:	4639      	mov	r1, r7
 8011564:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011568:	f7ee fe92 	bl	8000290 <__aeabi_dsub>
 801156c:	460b      	mov	r3, r1
 801156e:	4602      	mov	r2, r0
 8011570:	ea46 060a 	orr.w	r6, r6, sl
 8011574:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801157a:	431e      	orrs	r6, r3
 801157c:	d06f      	beq.n	801165e <_strtod_l+0xb86>
 801157e:	a30e      	add	r3, pc, #56	@ (adr r3, 80115b8 <_strtod_l+0xae0>)
 8011580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011584:	f7ef faae 	bl	8000ae4 <__aeabi_dcmplt>
 8011588:	2800      	cmp	r0, #0
 801158a:	f47f acd3 	bne.w	8010f34 <_strtod_l+0x45c>
 801158e:	a30c      	add	r3, pc, #48	@ (adr r3, 80115c0 <_strtod_l+0xae8>)
 8011590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011598:	f7ef fac2 	bl	8000b20 <__aeabi_dcmpgt>
 801159c:	2800      	cmp	r0, #0
 801159e:	d093      	beq.n	80114c8 <_strtod_l+0x9f0>
 80115a0:	e4c8      	b.n	8010f34 <_strtod_l+0x45c>
 80115a2:	bf00      	nop
 80115a4:	f3af 8000 	nop.w
 80115a8:	00000000 	.word	0x00000000
 80115ac:	bff00000 	.word	0xbff00000
 80115b0:	00000000 	.word	0x00000000
 80115b4:	3ff00000 	.word	0x3ff00000
 80115b8:	94a03595 	.word	0x94a03595
 80115bc:	3fdfffff 	.word	0x3fdfffff
 80115c0:	35afe535 	.word	0x35afe535
 80115c4:	3fe00000 	.word	0x3fe00000
 80115c8:	000fffff 	.word	0x000fffff
 80115cc:	7ff00000 	.word	0x7ff00000
 80115d0:	7fefffff 	.word	0x7fefffff
 80115d4:	3ff00000 	.word	0x3ff00000
 80115d8:	3fe00000 	.word	0x3fe00000
 80115dc:	7fe00000 	.word	0x7fe00000
 80115e0:	7c9fffff 	.word	0x7c9fffff
 80115e4:	9b08      	ldr	r3, [sp, #32]
 80115e6:	b323      	cbz	r3, 8011632 <_strtod_l+0xb5a>
 80115e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80115ec:	d821      	bhi.n	8011632 <_strtod_l+0xb5a>
 80115ee:	4630      	mov	r0, r6
 80115f0:	4639      	mov	r1, r7
 80115f2:	a327      	add	r3, pc, #156	@ (adr r3, 8011690 <_strtod_l+0xbb8>)
 80115f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f8:	f7ef fa7e 	bl	8000af8 <__aeabi_dcmple>
 80115fc:	b1a0      	cbz	r0, 8011628 <_strtod_l+0xb50>
 80115fe:	4639      	mov	r1, r7
 8011600:	4630      	mov	r0, r6
 8011602:	f7ef fad5 	bl	8000bb0 <__aeabi_d2uiz>
 8011606:	2801      	cmp	r0, #1
 8011608:	bf38      	it	cc
 801160a:	2001      	movcc	r0, #1
 801160c:	f7ee ff7e 	bl	800050c <__aeabi_ui2d>
 8011610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011612:	4606      	mov	r6, r0
 8011614:	460f      	mov	r7, r1
 8011616:	b9fb      	cbnz	r3, 8011658 <_strtod_l+0xb80>
 8011618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801161c:	9014      	str	r0, [sp, #80]	@ 0x50
 801161e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801162a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801162e:	1b5b      	subs	r3, r3, r5
 8011630:	9311      	str	r3, [sp, #68]	@ 0x44
 8011632:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011636:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801163a:	f7ff f8eb 	bl	8010814 <__ulp>
 801163e:	4650      	mov	r0, sl
 8011640:	4659      	mov	r1, fp
 8011642:	ec53 2b10 	vmov	r2, r3, d0
 8011646:	f7ee ffdb 	bl	8000600 <__aeabi_dmul>
 801164a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801164e:	f7ee fe21 	bl	8000294 <__adddf3>
 8011652:	4682      	mov	sl, r0
 8011654:	468b      	mov	fp, r1
 8011656:	e770      	b.n	801153a <_strtod_l+0xa62>
 8011658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801165c:	e7e0      	b.n	8011620 <_strtod_l+0xb48>
 801165e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011698 <_strtod_l+0xbc0>)
 8011660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011664:	f7ef fa3e 	bl	8000ae4 <__aeabi_dcmplt>
 8011668:	e798      	b.n	801159c <_strtod_l+0xac4>
 801166a:	2300      	movs	r3, #0
 801166c:	930e      	str	r3, [sp, #56]	@ 0x38
 801166e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011670:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011672:	6013      	str	r3, [r2, #0]
 8011674:	f7ff ba6d 	b.w	8010b52 <_strtod_l+0x7a>
 8011678:	2a65      	cmp	r2, #101	@ 0x65
 801167a:	f43f ab67 	beq.w	8010d4c <_strtod_l+0x274>
 801167e:	2a45      	cmp	r2, #69	@ 0x45
 8011680:	f43f ab64 	beq.w	8010d4c <_strtod_l+0x274>
 8011684:	2301      	movs	r3, #1
 8011686:	f7ff bba0 	b.w	8010dca <_strtod_l+0x2f2>
 801168a:	bf00      	nop
 801168c:	f3af 8000 	nop.w
 8011690:	ffc00000 	.word	0xffc00000
 8011694:	41dfffff 	.word	0x41dfffff
 8011698:	94a03595 	.word	0x94a03595
 801169c:	3fcfffff 	.word	0x3fcfffff

080116a0 <_strtod_r>:
 80116a0:	4b01      	ldr	r3, [pc, #4]	@ (80116a8 <_strtod_r+0x8>)
 80116a2:	f7ff ba19 	b.w	8010ad8 <_strtod_l>
 80116a6:	bf00      	nop
 80116a8:	20000080 	.word	0x20000080

080116ac <_strtol_l.isra.0>:
 80116ac:	2b24      	cmp	r3, #36	@ 0x24
 80116ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b2:	4686      	mov	lr, r0
 80116b4:	4690      	mov	r8, r2
 80116b6:	d801      	bhi.n	80116bc <_strtol_l.isra.0+0x10>
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d106      	bne.n	80116ca <_strtol_l.isra.0+0x1e>
 80116bc:	f7fd fd88 	bl	800f1d0 <__errno>
 80116c0:	2316      	movs	r3, #22
 80116c2:	6003      	str	r3, [r0, #0]
 80116c4:	2000      	movs	r0, #0
 80116c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ca:	460d      	mov	r5, r1
 80116cc:	4833      	ldr	r0, [pc, #204]	@ (801179c <_strtol_l.isra.0+0xf0>)
 80116ce:	462a      	mov	r2, r5
 80116d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116d4:	5d06      	ldrb	r6, [r0, r4]
 80116d6:	f016 0608 	ands.w	r6, r6, #8
 80116da:	d1f8      	bne.n	80116ce <_strtol_l.isra.0+0x22>
 80116dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80116de:	d110      	bne.n	8011702 <_strtol_l.isra.0+0x56>
 80116e0:	782c      	ldrb	r4, [r5, #0]
 80116e2:	2601      	movs	r6, #1
 80116e4:	1c95      	adds	r5, r2, #2
 80116e6:	f033 0210 	bics.w	r2, r3, #16
 80116ea:	d115      	bne.n	8011718 <_strtol_l.isra.0+0x6c>
 80116ec:	2c30      	cmp	r4, #48	@ 0x30
 80116ee:	d10d      	bne.n	801170c <_strtol_l.isra.0+0x60>
 80116f0:	782a      	ldrb	r2, [r5, #0]
 80116f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80116f6:	2a58      	cmp	r2, #88	@ 0x58
 80116f8:	d108      	bne.n	801170c <_strtol_l.isra.0+0x60>
 80116fa:	786c      	ldrb	r4, [r5, #1]
 80116fc:	3502      	adds	r5, #2
 80116fe:	2310      	movs	r3, #16
 8011700:	e00a      	b.n	8011718 <_strtol_l.isra.0+0x6c>
 8011702:	2c2b      	cmp	r4, #43	@ 0x2b
 8011704:	bf04      	itt	eq
 8011706:	782c      	ldrbeq	r4, [r5, #0]
 8011708:	1c95      	addeq	r5, r2, #2
 801170a:	e7ec      	b.n	80116e6 <_strtol_l.isra.0+0x3a>
 801170c:	2b00      	cmp	r3, #0
 801170e:	d1f6      	bne.n	80116fe <_strtol_l.isra.0+0x52>
 8011710:	2c30      	cmp	r4, #48	@ 0x30
 8011712:	bf14      	ite	ne
 8011714:	230a      	movne	r3, #10
 8011716:	2308      	moveq	r3, #8
 8011718:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801171c:	2200      	movs	r2, #0
 801171e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011722:	4610      	mov	r0, r2
 8011724:	fbbc f9f3 	udiv	r9, ip, r3
 8011728:	fb03 ca19 	mls	sl, r3, r9, ip
 801172c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011730:	2f09      	cmp	r7, #9
 8011732:	d80f      	bhi.n	8011754 <_strtol_l.isra.0+0xa8>
 8011734:	463c      	mov	r4, r7
 8011736:	42a3      	cmp	r3, r4
 8011738:	dd1b      	ble.n	8011772 <_strtol_l.isra.0+0xc6>
 801173a:	1c57      	adds	r7, r2, #1
 801173c:	d007      	beq.n	801174e <_strtol_l.isra.0+0xa2>
 801173e:	4581      	cmp	r9, r0
 8011740:	d314      	bcc.n	801176c <_strtol_l.isra.0+0xc0>
 8011742:	d101      	bne.n	8011748 <_strtol_l.isra.0+0x9c>
 8011744:	45a2      	cmp	sl, r4
 8011746:	db11      	blt.n	801176c <_strtol_l.isra.0+0xc0>
 8011748:	fb00 4003 	mla	r0, r0, r3, r4
 801174c:	2201      	movs	r2, #1
 801174e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011752:	e7eb      	b.n	801172c <_strtol_l.isra.0+0x80>
 8011754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011758:	2f19      	cmp	r7, #25
 801175a:	d801      	bhi.n	8011760 <_strtol_l.isra.0+0xb4>
 801175c:	3c37      	subs	r4, #55	@ 0x37
 801175e:	e7ea      	b.n	8011736 <_strtol_l.isra.0+0x8a>
 8011760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011764:	2f19      	cmp	r7, #25
 8011766:	d804      	bhi.n	8011772 <_strtol_l.isra.0+0xc6>
 8011768:	3c57      	subs	r4, #87	@ 0x57
 801176a:	e7e4      	b.n	8011736 <_strtol_l.isra.0+0x8a>
 801176c:	f04f 32ff 	mov.w	r2, #4294967295
 8011770:	e7ed      	b.n	801174e <_strtol_l.isra.0+0xa2>
 8011772:	1c53      	adds	r3, r2, #1
 8011774:	d108      	bne.n	8011788 <_strtol_l.isra.0+0xdc>
 8011776:	2322      	movs	r3, #34	@ 0x22
 8011778:	4660      	mov	r0, ip
 801177a:	f8ce 3000 	str.w	r3, [lr]
 801177e:	f1b8 0f00 	cmp.w	r8, #0
 8011782:	d0a0      	beq.n	80116c6 <_strtol_l.isra.0+0x1a>
 8011784:	1e69      	subs	r1, r5, #1
 8011786:	e006      	b.n	8011796 <_strtol_l.isra.0+0xea>
 8011788:	b106      	cbz	r6, 801178c <_strtol_l.isra.0+0xe0>
 801178a:	4240      	negs	r0, r0
 801178c:	f1b8 0f00 	cmp.w	r8, #0
 8011790:	d099      	beq.n	80116c6 <_strtol_l.isra.0+0x1a>
 8011792:	2a00      	cmp	r2, #0
 8011794:	d1f6      	bne.n	8011784 <_strtol_l.isra.0+0xd8>
 8011796:	f8c8 1000 	str.w	r1, [r8]
 801179a:	e794      	b.n	80116c6 <_strtol_l.isra.0+0x1a>
 801179c:	08030539 	.word	0x08030539

080117a0 <_strtol_r>:
 80117a0:	f7ff bf84 	b.w	80116ac <_strtol_l.isra.0>

080117a4 <__ssputs_r>:
 80117a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a8:	461f      	mov	r7, r3
 80117aa:	688e      	ldr	r6, [r1, #8]
 80117ac:	4682      	mov	sl, r0
 80117ae:	460c      	mov	r4, r1
 80117b0:	42be      	cmp	r6, r7
 80117b2:	4690      	mov	r8, r2
 80117b4:	680b      	ldr	r3, [r1, #0]
 80117b6:	d82d      	bhi.n	8011814 <__ssputs_r+0x70>
 80117b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80117c0:	d026      	beq.n	8011810 <__ssputs_r+0x6c>
 80117c2:	6965      	ldr	r5, [r4, #20]
 80117c4:	6909      	ldr	r1, [r1, #16]
 80117c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80117ca:	eba3 0901 	sub.w	r9, r3, r1
 80117ce:	1c7b      	adds	r3, r7, #1
 80117d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80117d4:	444b      	add	r3, r9
 80117d6:	106d      	asrs	r5, r5, #1
 80117d8:	429d      	cmp	r5, r3
 80117da:	bf38      	it	cc
 80117dc:	461d      	movcc	r5, r3
 80117de:	0553      	lsls	r3, r2, #21
 80117e0:	d527      	bpl.n	8011832 <__ssputs_r+0x8e>
 80117e2:	4629      	mov	r1, r5
 80117e4:	f7fe fc16 	bl	8010014 <_malloc_r>
 80117e8:	4606      	mov	r6, r0
 80117ea:	b360      	cbz	r0, 8011846 <__ssputs_r+0xa2>
 80117ec:	464a      	mov	r2, r9
 80117ee:	6921      	ldr	r1, [r4, #16]
 80117f0:	f7fd fd29 	bl	800f246 <memcpy>
 80117f4:	89a3      	ldrh	r3, [r4, #12]
 80117f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80117fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117fe:	81a3      	strh	r3, [r4, #12]
 8011800:	6126      	str	r6, [r4, #16]
 8011802:	444e      	add	r6, r9
 8011804:	6165      	str	r5, [r4, #20]
 8011806:	eba5 0509 	sub.w	r5, r5, r9
 801180a:	6026      	str	r6, [r4, #0]
 801180c:	463e      	mov	r6, r7
 801180e:	60a5      	str	r5, [r4, #8]
 8011810:	42be      	cmp	r6, r7
 8011812:	d900      	bls.n	8011816 <__ssputs_r+0x72>
 8011814:	463e      	mov	r6, r7
 8011816:	4632      	mov	r2, r6
 8011818:	4641      	mov	r1, r8
 801181a:	6820      	ldr	r0, [r4, #0]
 801181c:	f000 f9c6 	bl	8011bac <memmove>
 8011820:	68a3      	ldr	r3, [r4, #8]
 8011822:	2000      	movs	r0, #0
 8011824:	1b9b      	subs	r3, r3, r6
 8011826:	60a3      	str	r3, [r4, #8]
 8011828:	6823      	ldr	r3, [r4, #0]
 801182a:	4433      	add	r3, r6
 801182c:	6023      	str	r3, [r4, #0]
 801182e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011832:	462a      	mov	r2, r5
 8011834:	f000 fd79 	bl	801232a <_realloc_r>
 8011838:	4606      	mov	r6, r0
 801183a:	2800      	cmp	r0, #0
 801183c:	d1e0      	bne.n	8011800 <__ssputs_r+0x5c>
 801183e:	6921      	ldr	r1, [r4, #16]
 8011840:	4650      	mov	r0, sl
 8011842:	f7fe fb73 	bl	800ff2c <_free_r>
 8011846:	230c      	movs	r3, #12
 8011848:	f04f 30ff 	mov.w	r0, #4294967295
 801184c:	f8ca 3000 	str.w	r3, [sl]
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011856:	81a3      	strh	r3, [r4, #12]
 8011858:	e7e9      	b.n	801182e <__ssputs_r+0x8a>
	...

0801185c <_svfiprintf_r>:
 801185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011860:	4698      	mov	r8, r3
 8011862:	898b      	ldrh	r3, [r1, #12]
 8011864:	b09d      	sub	sp, #116	@ 0x74
 8011866:	4607      	mov	r7, r0
 8011868:	061b      	lsls	r3, r3, #24
 801186a:	460d      	mov	r5, r1
 801186c:	4614      	mov	r4, r2
 801186e:	d510      	bpl.n	8011892 <_svfiprintf_r+0x36>
 8011870:	690b      	ldr	r3, [r1, #16]
 8011872:	b973      	cbnz	r3, 8011892 <_svfiprintf_r+0x36>
 8011874:	2140      	movs	r1, #64	@ 0x40
 8011876:	f7fe fbcd 	bl	8010014 <_malloc_r>
 801187a:	6028      	str	r0, [r5, #0]
 801187c:	6128      	str	r0, [r5, #16]
 801187e:	b930      	cbnz	r0, 801188e <_svfiprintf_r+0x32>
 8011880:	230c      	movs	r3, #12
 8011882:	603b      	str	r3, [r7, #0]
 8011884:	f04f 30ff 	mov.w	r0, #4294967295
 8011888:	b01d      	add	sp, #116	@ 0x74
 801188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188e:	2340      	movs	r3, #64	@ 0x40
 8011890:	616b      	str	r3, [r5, #20]
 8011892:	2300      	movs	r3, #0
 8011894:	f8cd 800c 	str.w	r8, [sp, #12]
 8011898:	f04f 0901 	mov.w	r9, #1
 801189c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8011a40 <_svfiprintf_r+0x1e4>
 80118a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80118a2:	2320      	movs	r3, #32
 80118a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80118a8:	2330      	movs	r3, #48	@ 0x30
 80118aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80118ae:	4623      	mov	r3, r4
 80118b0:	469a      	mov	sl, r3
 80118b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118b6:	b10a      	cbz	r2, 80118bc <_svfiprintf_r+0x60>
 80118b8:	2a25      	cmp	r2, #37	@ 0x25
 80118ba:	d1f9      	bne.n	80118b0 <_svfiprintf_r+0x54>
 80118bc:	ebba 0b04 	subs.w	fp, sl, r4
 80118c0:	d00b      	beq.n	80118da <_svfiprintf_r+0x7e>
 80118c2:	465b      	mov	r3, fp
 80118c4:	4622      	mov	r2, r4
 80118c6:	4629      	mov	r1, r5
 80118c8:	4638      	mov	r0, r7
 80118ca:	f7ff ff6b 	bl	80117a4 <__ssputs_r>
 80118ce:	3001      	adds	r0, #1
 80118d0:	f000 80a7 	beq.w	8011a22 <_svfiprintf_r+0x1c6>
 80118d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80118d6:	445a      	add	r2, fp
 80118d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80118da:	f89a 3000 	ldrb.w	r3, [sl]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f000 809f 	beq.w	8011a22 <_svfiprintf_r+0x1c6>
 80118e4:	2300      	movs	r3, #0
 80118e6:	f04f 32ff 	mov.w	r2, #4294967295
 80118ea:	f10a 0a01 	add.w	sl, sl, #1
 80118ee:	9304      	str	r3, [sp, #16]
 80118f0:	9307      	str	r3, [sp, #28]
 80118f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80118f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80118f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80118fc:	4654      	mov	r4, sl
 80118fe:	2205      	movs	r2, #5
 8011900:	484f      	ldr	r0, [pc, #316]	@ (8011a40 <_svfiprintf_r+0x1e4>)
 8011902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011906:	f7fd fc90 	bl	800f22a <memchr>
 801190a:	9a04      	ldr	r2, [sp, #16]
 801190c:	b9d8      	cbnz	r0, 8011946 <_svfiprintf_r+0xea>
 801190e:	06d0      	lsls	r0, r2, #27
 8011910:	bf44      	itt	mi
 8011912:	2320      	movmi	r3, #32
 8011914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011918:	0711      	lsls	r1, r2, #28
 801191a:	bf44      	itt	mi
 801191c:	232b      	movmi	r3, #43	@ 0x2b
 801191e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011922:	f89a 3000 	ldrb.w	r3, [sl]
 8011926:	2b2a      	cmp	r3, #42	@ 0x2a
 8011928:	d015      	beq.n	8011956 <_svfiprintf_r+0xfa>
 801192a:	9a07      	ldr	r2, [sp, #28]
 801192c:	4654      	mov	r4, sl
 801192e:	2000      	movs	r0, #0
 8011930:	f04f 0c0a 	mov.w	ip, #10
 8011934:	4621      	mov	r1, r4
 8011936:	f811 3b01 	ldrb.w	r3, [r1], #1
 801193a:	3b30      	subs	r3, #48	@ 0x30
 801193c:	2b09      	cmp	r3, #9
 801193e:	d94b      	bls.n	80119d8 <_svfiprintf_r+0x17c>
 8011940:	b1b0      	cbz	r0, 8011970 <_svfiprintf_r+0x114>
 8011942:	9207      	str	r2, [sp, #28]
 8011944:	e014      	b.n	8011970 <_svfiprintf_r+0x114>
 8011946:	eba0 0308 	sub.w	r3, r0, r8
 801194a:	46a2      	mov	sl, r4
 801194c:	fa09 f303 	lsl.w	r3, r9, r3
 8011950:	4313      	orrs	r3, r2
 8011952:	9304      	str	r3, [sp, #16]
 8011954:	e7d2      	b.n	80118fc <_svfiprintf_r+0xa0>
 8011956:	9b03      	ldr	r3, [sp, #12]
 8011958:	1d19      	adds	r1, r3, #4
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	9103      	str	r1, [sp, #12]
 8011960:	bfbb      	ittet	lt
 8011962:	425b      	neglt	r3, r3
 8011964:	f042 0202 	orrlt.w	r2, r2, #2
 8011968:	9307      	strge	r3, [sp, #28]
 801196a:	9307      	strlt	r3, [sp, #28]
 801196c:	bfb8      	it	lt
 801196e:	9204      	strlt	r2, [sp, #16]
 8011970:	7823      	ldrb	r3, [r4, #0]
 8011972:	2b2e      	cmp	r3, #46	@ 0x2e
 8011974:	d10a      	bne.n	801198c <_svfiprintf_r+0x130>
 8011976:	7863      	ldrb	r3, [r4, #1]
 8011978:	2b2a      	cmp	r3, #42	@ 0x2a
 801197a:	d132      	bne.n	80119e2 <_svfiprintf_r+0x186>
 801197c:	9b03      	ldr	r3, [sp, #12]
 801197e:	3402      	adds	r4, #2
 8011980:	1d1a      	adds	r2, r3, #4
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011988:	9203      	str	r2, [sp, #12]
 801198a:	9305      	str	r3, [sp, #20]
 801198c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011a50 <_svfiprintf_r+0x1f4>
 8011990:	2203      	movs	r2, #3
 8011992:	7821      	ldrb	r1, [r4, #0]
 8011994:	4650      	mov	r0, sl
 8011996:	f7fd fc48 	bl	800f22a <memchr>
 801199a:	b138      	cbz	r0, 80119ac <_svfiprintf_r+0x150>
 801199c:	eba0 000a 	sub.w	r0, r0, sl
 80119a0:	2240      	movs	r2, #64	@ 0x40
 80119a2:	9b04      	ldr	r3, [sp, #16]
 80119a4:	3401      	adds	r4, #1
 80119a6:	4082      	lsls	r2, r0
 80119a8:	4313      	orrs	r3, r2
 80119aa:	9304      	str	r3, [sp, #16]
 80119ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119b0:	2206      	movs	r2, #6
 80119b2:	4824      	ldr	r0, [pc, #144]	@ (8011a44 <_svfiprintf_r+0x1e8>)
 80119b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80119b8:	f7fd fc37 	bl	800f22a <memchr>
 80119bc:	2800      	cmp	r0, #0
 80119be:	d036      	beq.n	8011a2e <_svfiprintf_r+0x1d2>
 80119c0:	4b21      	ldr	r3, [pc, #132]	@ (8011a48 <_svfiprintf_r+0x1ec>)
 80119c2:	bb1b      	cbnz	r3, 8011a0c <_svfiprintf_r+0x1b0>
 80119c4:	9b03      	ldr	r3, [sp, #12]
 80119c6:	3307      	adds	r3, #7
 80119c8:	f023 0307 	bic.w	r3, r3, #7
 80119cc:	3308      	adds	r3, #8
 80119ce:	9303      	str	r3, [sp, #12]
 80119d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119d2:	4433      	add	r3, r6
 80119d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80119d6:	e76a      	b.n	80118ae <_svfiprintf_r+0x52>
 80119d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80119dc:	460c      	mov	r4, r1
 80119de:	2001      	movs	r0, #1
 80119e0:	e7a8      	b.n	8011934 <_svfiprintf_r+0xd8>
 80119e2:	2300      	movs	r3, #0
 80119e4:	3401      	adds	r4, #1
 80119e6:	f04f 0c0a 	mov.w	ip, #10
 80119ea:	4619      	mov	r1, r3
 80119ec:	9305      	str	r3, [sp, #20]
 80119ee:	4620      	mov	r0, r4
 80119f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80119f4:	3a30      	subs	r2, #48	@ 0x30
 80119f6:	2a09      	cmp	r2, #9
 80119f8:	d903      	bls.n	8011a02 <_svfiprintf_r+0x1a6>
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d0c6      	beq.n	801198c <_svfiprintf_r+0x130>
 80119fe:	9105      	str	r1, [sp, #20]
 8011a00:	e7c4      	b.n	801198c <_svfiprintf_r+0x130>
 8011a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a06:	4604      	mov	r4, r0
 8011a08:	2301      	movs	r3, #1
 8011a0a:	e7f0      	b.n	80119ee <_svfiprintf_r+0x192>
 8011a0c:	ab03      	add	r3, sp, #12
 8011a0e:	462a      	mov	r2, r5
 8011a10:	a904      	add	r1, sp, #16
 8011a12:	4638      	mov	r0, r7
 8011a14:	9300      	str	r3, [sp, #0]
 8011a16:	4b0d      	ldr	r3, [pc, #52]	@ (8011a4c <_svfiprintf_r+0x1f0>)
 8011a18:	f7fc fc98 	bl	800e34c <_printf_float>
 8011a1c:	1c42      	adds	r2, r0, #1
 8011a1e:	4606      	mov	r6, r0
 8011a20:	d1d6      	bne.n	80119d0 <_svfiprintf_r+0x174>
 8011a22:	89ab      	ldrh	r3, [r5, #12]
 8011a24:	065b      	lsls	r3, r3, #25
 8011a26:	f53f af2d 	bmi.w	8011884 <_svfiprintf_r+0x28>
 8011a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a2c:	e72c      	b.n	8011888 <_svfiprintf_r+0x2c>
 8011a2e:	ab03      	add	r3, sp, #12
 8011a30:	462a      	mov	r2, r5
 8011a32:	a904      	add	r1, sp, #16
 8011a34:	4638      	mov	r0, r7
 8011a36:	9300      	str	r3, [sp, #0]
 8011a38:	4b04      	ldr	r3, [pc, #16]	@ (8011a4c <_svfiprintf_r+0x1f0>)
 8011a3a:	f7fc ff23 	bl	800e884 <_printf_i>
 8011a3e:	e7ed      	b.n	8011a1c <_svfiprintf_r+0x1c0>
 8011a40:	08030335 	.word	0x08030335
 8011a44:	0803033f 	.word	0x0803033f
 8011a48:	0800e34d 	.word	0x0800e34d
 8011a4c:	080117a5 	.word	0x080117a5
 8011a50:	0803033b 	.word	0x0803033b

08011a54 <__sflush_r>:
 8011a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a5c:	0716      	lsls	r6, r2, #28
 8011a5e:	4605      	mov	r5, r0
 8011a60:	460c      	mov	r4, r1
 8011a62:	d454      	bmi.n	8011b0e <__sflush_r+0xba>
 8011a64:	684b      	ldr	r3, [r1, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	dc02      	bgt.n	8011a70 <__sflush_r+0x1c>
 8011a6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	dd48      	ble.n	8011b02 <__sflush_r+0xae>
 8011a70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a72:	2e00      	cmp	r6, #0
 8011a74:	d045      	beq.n	8011b02 <__sflush_r+0xae>
 8011a76:	2300      	movs	r3, #0
 8011a78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011a7c:	682f      	ldr	r7, [r5, #0]
 8011a7e:	6a21      	ldr	r1, [r4, #32]
 8011a80:	602b      	str	r3, [r5, #0]
 8011a82:	d030      	beq.n	8011ae6 <__sflush_r+0x92>
 8011a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011a86:	89a3      	ldrh	r3, [r4, #12]
 8011a88:	0759      	lsls	r1, r3, #29
 8011a8a:	d505      	bpl.n	8011a98 <__sflush_r+0x44>
 8011a8c:	6863      	ldr	r3, [r4, #4]
 8011a8e:	1ad2      	subs	r2, r2, r3
 8011a90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011a92:	b10b      	cbz	r3, 8011a98 <__sflush_r+0x44>
 8011a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011a96:	1ad2      	subs	r2, r2, r3
 8011a98:	2300      	movs	r3, #0
 8011a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011a9c:	6a21      	ldr	r1, [r4, #32]
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	47b0      	blx	r6
 8011aa2:	1c43      	adds	r3, r0, #1
 8011aa4:	89a3      	ldrh	r3, [r4, #12]
 8011aa6:	d106      	bne.n	8011ab6 <__sflush_r+0x62>
 8011aa8:	6829      	ldr	r1, [r5, #0]
 8011aaa:	291d      	cmp	r1, #29
 8011aac:	d82b      	bhi.n	8011b06 <__sflush_r+0xb2>
 8011aae:	4a2a      	ldr	r2, [pc, #168]	@ (8011b58 <__sflush_r+0x104>)
 8011ab0:	40ca      	lsrs	r2, r1
 8011ab2:	07d6      	lsls	r6, r2, #31
 8011ab4:	d527      	bpl.n	8011b06 <__sflush_r+0xb2>
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	04d9      	lsls	r1, r3, #19
 8011aba:	6062      	str	r2, [r4, #4]
 8011abc:	6922      	ldr	r2, [r4, #16]
 8011abe:	6022      	str	r2, [r4, #0]
 8011ac0:	d504      	bpl.n	8011acc <__sflush_r+0x78>
 8011ac2:	1c42      	adds	r2, r0, #1
 8011ac4:	d101      	bne.n	8011aca <__sflush_r+0x76>
 8011ac6:	682b      	ldr	r3, [r5, #0]
 8011ac8:	b903      	cbnz	r3, 8011acc <__sflush_r+0x78>
 8011aca:	6560      	str	r0, [r4, #84]	@ 0x54
 8011acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ace:	602f      	str	r7, [r5, #0]
 8011ad0:	b1b9      	cbz	r1, 8011b02 <__sflush_r+0xae>
 8011ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ad6:	4299      	cmp	r1, r3
 8011ad8:	d002      	beq.n	8011ae0 <__sflush_r+0x8c>
 8011ada:	4628      	mov	r0, r5
 8011adc:	f7fe fa26 	bl	800ff2c <_free_r>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ae4:	e00d      	b.n	8011b02 <__sflush_r+0xae>
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	4628      	mov	r0, r5
 8011aea:	47b0      	blx	r6
 8011aec:	4602      	mov	r2, r0
 8011aee:	1c50      	adds	r0, r2, #1
 8011af0:	d1c9      	bne.n	8011a86 <__sflush_r+0x32>
 8011af2:	682b      	ldr	r3, [r5, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d0c6      	beq.n	8011a86 <__sflush_r+0x32>
 8011af8:	2b1d      	cmp	r3, #29
 8011afa:	d001      	beq.n	8011b00 <__sflush_r+0xac>
 8011afc:	2b16      	cmp	r3, #22
 8011afe:	d11d      	bne.n	8011b3c <__sflush_r+0xe8>
 8011b00:	602f      	str	r7, [r5, #0]
 8011b02:	2000      	movs	r0, #0
 8011b04:	e021      	b.n	8011b4a <__sflush_r+0xf6>
 8011b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b0a:	b21b      	sxth	r3, r3
 8011b0c:	e01a      	b.n	8011b44 <__sflush_r+0xf0>
 8011b0e:	690f      	ldr	r7, [r1, #16]
 8011b10:	2f00      	cmp	r7, #0
 8011b12:	d0f6      	beq.n	8011b02 <__sflush_r+0xae>
 8011b14:	0793      	lsls	r3, r2, #30
 8011b16:	680e      	ldr	r6, [r1, #0]
 8011b18:	600f      	str	r7, [r1, #0]
 8011b1a:	bf0c      	ite	eq
 8011b1c:	694b      	ldreq	r3, [r1, #20]
 8011b1e:	2300      	movne	r3, #0
 8011b20:	eba6 0807 	sub.w	r8, r6, r7
 8011b24:	608b      	str	r3, [r1, #8]
 8011b26:	f1b8 0f00 	cmp.w	r8, #0
 8011b2a:	ddea      	ble.n	8011b02 <__sflush_r+0xae>
 8011b2c:	4643      	mov	r3, r8
 8011b2e:	463a      	mov	r2, r7
 8011b30:	6a21      	ldr	r1, [r4, #32]
 8011b32:	4628      	mov	r0, r5
 8011b34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b36:	47b0      	blx	r6
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	dc08      	bgt.n	8011b4e <__sflush_r+0xfa>
 8011b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b44:	f04f 30ff 	mov.w	r0, #4294967295
 8011b48:	81a3      	strh	r3, [r4, #12]
 8011b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b4e:	4407      	add	r7, r0
 8011b50:	eba8 0800 	sub.w	r8, r8, r0
 8011b54:	e7e7      	b.n	8011b26 <__sflush_r+0xd2>
 8011b56:	bf00      	nop
 8011b58:	20400001 	.word	0x20400001

08011b5c <_fflush_r>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	690b      	ldr	r3, [r1, #16]
 8011b60:	4605      	mov	r5, r0
 8011b62:	460c      	mov	r4, r1
 8011b64:	b913      	cbnz	r3, 8011b6c <_fflush_r+0x10>
 8011b66:	2500      	movs	r5, #0
 8011b68:	4628      	mov	r0, r5
 8011b6a:	bd38      	pop	{r3, r4, r5, pc}
 8011b6c:	b118      	cbz	r0, 8011b76 <_fflush_r+0x1a>
 8011b6e:	6a03      	ldr	r3, [r0, #32]
 8011b70:	b90b      	cbnz	r3, 8011b76 <_fflush_r+0x1a>
 8011b72:	f7fd fa3f 	bl	800eff4 <__sinit>
 8011b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d0f3      	beq.n	8011b66 <_fflush_r+0xa>
 8011b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b80:	07d0      	lsls	r0, r2, #31
 8011b82:	d404      	bmi.n	8011b8e <_fflush_r+0x32>
 8011b84:	0599      	lsls	r1, r3, #22
 8011b86:	d402      	bmi.n	8011b8e <_fflush_r+0x32>
 8011b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b8a:	f7fd fb4c 	bl	800f226 <__retarget_lock_acquire_recursive>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	4621      	mov	r1, r4
 8011b92:	f7ff ff5f 	bl	8011a54 <__sflush_r>
 8011b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b98:	4605      	mov	r5, r0
 8011b9a:	07da      	lsls	r2, r3, #31
 8011b9c:	d4e4      	bmi.n	8011b68 <_fflush_r+0xc>
 8011b9e:	89a3      	ldrh	r3, [r4, #12]
 8011ba0:	059b      	lsls	r3, r3, #22
 8011ba2:	d4e1      	bmi.n	8011b68 <_fflush_r+0xc>
 8011ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ba6:	f7fd fb3f 	bl	800f228 <__retarget_lock_release_recursive>
 8011baa:	e7dd      	b.n	8011b68 <_fflush_r+0xc>

08011bac <memmove>:
 8011bac:	4288      	cmp	r0, r1
 8011bae:	b510      	push	{r4, lr}
 8011bb0:	eb01 0402 	add.w	r4, r1, r2
 8011bb4:	d902      	bls.n	8011bbc <memmove+0x10>
 8011bb6:	4284      	cmp	r4, r0
 8011bb8:	4623      	mov	r3, r4
 8011bba:	d807      	bhi.n	8011bcc <memmove+0x20>
 8011bbc:	1e43      	subs	r3, r0, #1
 8011bbe:	42a1      	cmp	r1, r4
 8011bc0:	d008      	beq.n	8011bd4 <memmove+0x28>
 8011bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bca:	e7f8      	b.n	8011bbe <memmove+0x12>
 8011bcc:	4402      	add	r2, r0
 8011bce:	4601      	mov	r1, r0
 8011bd0:	428a      	cmp	r2, r1
 8011bd2:	d100      	bne.n	8011bd6 <memmove+0x2a>
 8011bd4:	bd10      	pop	{r4, pc}
 8011bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bde:	e7f7      	b.n	8011bd0 <memmove+0x24>

08011be0 <strncmp>:
 8011be0:	b510      	push	{r4, lr}
 8011be2:	b16a      	cbz	r2, 8011c00 <strncmp+0x20>
 8011be4:	3901      	subs	r1, #1
 8011be6:	1884      	adds	r4, r0, r2
 8011be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d103      	bne.n	8011bfc <strncmp+0x1c>
 8011bf4:	42a0      	cmp	r0, r4
 8011bf6:	d001      	beq.n	8011bfc <strncmp+0x1c>
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	d1f5      	bne.n	8011be8 <strncmp+0x8>
 8011bfc:	1ad0      	subs	r0, r2, r3
 8011bfe:	bd10      	pop	{r4, pc}
 8011c00:	4610      	mov	r0, r2
 8011c02:	e7fc      	b.n	8011bfe <strncmp+0x1e>

08011c04 <_sbrk_r>:
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	2300      	movs	r3, #0
 8011c08:	4d05      	ldr	r5, [pc, #20]	@ (8011c20 <_sbrk_r+0x1c>)
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	4608      	mov	r0, r1
 8011c0e:	602b      	str	r3, [r5, #0]
 8011c10:	f7f0 fe30 	bl	8002874 <_sbrk>
 8011c14:	1c43      	adds	r3, r0, #1
 8011c16:	d102      	bne.n	8011c1e <_sbrk_r+0x1a>
 8011c18:	682b      	ldr	r3, [r5, #0]
 8011c1a:	b103      	cbz	r3, 8011c1e <_sbrk_r+0x1a>
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	bd38      	pop	{r3, r4, r5, pc}
 8011c20:	20013c90 	.word	0x20013c90
 8011c24:	00000000 	.word	0x00000000

08011c28 <nan>:
 8011c28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011c30 <nan+0x8>
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop
 8011c30:	00000000 	.word	0x00000000
 8011c34:	7ff80000 	.word	0x7ff80000

08011c38 <__assert_func>:
 8011c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c3a:	4614      	mov	r4, r2
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	4b09      	ldr	r3, [pc, #36]	@ (8011c64 <__assert_func+0x2c>)
 8011c40:	4605      	mov	r5, r0
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	68d8      	ldr	r0, [r3, #12]
 8011c46:	b14c      	cbz	r4, 8011c5c <__assert_func+0x24>
 8011c48:	4b07      	ldr	r3, [pc, #28]	@ (8011c68 <__assert_func+0x30>)
 8011c4a:	9100      	str	r1, [sp, #0]
 8011c4c:	4907      	ldr	r1, [pc, #28]	@ (8011c6c <__assert_func+0x34>)
 8011c4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c52:	462b      	mov	r3, r5
 8011c54:	f000 fba4 	bl	80123a0 <fiprintf>
 8011c58:	f000 fbb4 	bl	80123c4 <abort>
 8011c5c:	4b04      	ldr	r3, [pc, #16]	@ (8011c70 <__assert_func+0x38>)
 8011c5e:	461c      	mov	r4, r3
 8011c60:	e7f3      	b.n	8011c4a <__assert_func+0x12>
 8011c62:	bf00      	nop
 8011c64:	20000030 	.word	0x20000030
 8011c68:	0803034e 	.word	0x0803034e
 8011c6c:	0803035b 	.word	0x0803035b
 8011c70:	08030389 	.word	0x08030389

08011c74 <_calloc_r>:
 8011c74:	b570      	push	{r4, r5, r6, lr}
 8011c76:	fba1 5402 	umull	r5, r4, r1, r2
 8011c7a:	b934      	cbnz	r4, 8011c8a <_calloc_r+0x16>
 8011c7c:	4629      	mov	r1, r5
 8011c7e:	f7fe f9c9 	bl	8010014 <_malloc_r>
 8011c82:	4606      	mov	r6, r0
 8011c84:	b928      	cbnz	r0, 8011c92 <_calloc_r+0x1e>
 8011c86:	4630      	mov	r0, r6
 8011c88:	bd70      	pop	{r4, r5, r6, pc}
 8011c8a:	220c      	movs	r2, #12
 8011c8c:	2600      	movs	r6, #0
 8011c8e:	6002      	str	r2, [r0, #0]
 8011c90:	e7f9      	b.n	8011c86 <_calloc_r+0x12>
 8011c92:	462a      	mov	r2, r5
 8011c94:	4621      	mov	r1, r4
 8011c96:	f7fd fa48 	bl	800f12a <memset>
 8011c9a:	e7f4      	b.n	8011c86 <_calloc_r+0x12>

08011c9c <rshift>:
 8011c9c:	6903      	ldr	r3, [r0, #16]
 8011c9e:	114a      	asrs	r2, r1, #5
 8011ca0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ca8:	f100 0414 	add.w	r4, r0, #20
 8011cac:	dd45      	ble.n	8011d3a <rshift+0x9e>
 8011cae:	f011 011f 	ands.w	r1, r1, #31
 8011cb2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011cb6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011cba:	d10c      	bne.n	8011cd6 <rshift+0x3a>
 8011cbc:	f100 0710 	add.w	r7, r0, #16
 8011cc0:	4629      	mov	r1, r5
 8011cc2:	42b1      	cmp	r1, r6
 8011cc4:	d334      	bcc.n	8011d30 <rshift+0x94>
 8011cc6:	1a9b      	subs	r3, r3, r2
 8011cc8:	1eea      	subs	r2, r5, #3
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	4296      	cmp	r6, r2
 8011cce:	bf38      	it	cc
 8011cd0:	2300      	movcc	r3, #0
 8011cd2:	4423      	add	r3, r4
 8011cd4:	e015      	b.n	8011d02 <rshift+0x66>
 8011cd6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011cda:	f1c1 0820 	rsb	r8, r1, #32
 8011cde:	f105 0e04 	add.w	lr, r5, #4
 8011ce2:	46a1      	mov	r9, r4
 8011ce4:	40cf      	lsrs	r7, r1
 8011ce6:	4576      	cmp	r6, lr
 8011ce8:	46f4      	mov	ip, lr
 8011cea:	d815      	bhi.n	8011d18 <rshift+0x7c>
 8011cec:	1a9a      	subs	r2, r3, r2
 8011cee:	3501      	adds	r5, #1
 8011cf0:	0092      	lsls	r2, r2, #2
 8011cf2:	3a04      	subs	r2, #4
 8011cf4:	42ae      	cmp	r6, r5
 8011cf6:	bf38      	it	cc
 8011cf8:	2200      	movcc	r2, #0
 8011cfa:	18a3      	adds	r3, r4, r2
 8011cfc:	50a7      	str	r7, [r4, r2]
 8011cfe:	b107      	cbz	r7, 8011d02 <rshift+0x66>
 8011d00:	3304      	adds	r3, #4
 8011d02:	1b1a      	subs	r2, r3, r4
 8011d04:	42a3      	cmp	r3, r4
 8011d06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d0a:	bf08      	it	eq
 8011d0c:	2300      	moveq	r3, #0
 8011d0e:	6102      	str	r2, [r0, #16]
 8011d10:	bf08      	it	eq
 8011d12:	6143      	streq	r3, [r0, #20]
 8011d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d18:	f8dc c000 	ldr.w	ip, [ip]
 8011d1c:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d20:	ea4c 0707 	orr.w	r7, ip, r7
 8011d24:	f849 7b04 	str.w	r7, [r9], #4
 8011d28:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d2c:	40cf      	lsrs	r7, r1
 8011d2e:	e7da      	b.n	8011ce6 <rshift+0x4a>
 8011d30:	f851 cb04 	ldr.w	ip, [r1], #4
 8011d34:	f847 cf04 	str.w	ip, [r7, #4]!
 8011d38:	e7c3      	b.n	8011cc2 <rshift+0x26>
 8011d3a:	4623      	mov	r3, r4
 8011d3c:	e7e1      	b.n	8011d02 <rshift+0x66>

08011d3e <__hexdig_fun>:
 8011d3e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011d42:	2b09      	cmp	r3, #9
 8011d44:	d802      	bhi.n	8011d4c <__hexdig_fun+0xe>
 8011d46:	3820      	subs	r0, #32
 8011d48:	b2c0      	uxtb	r0, r0
 8011d4a:	4770      	bx	lr
 8011d4c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011d50:	2b05      	cmp	r3, #5
 8011d52:	d801      	bhi.n	8011d58 <__hexdig_fun+0x1a>
 8011d54:	3847      	subs	r0, #71	@ 0x47
 8011d56:	e7f7      	b.n	8011d48 <__hexdig_fun+0xa>
 8011d58:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011d5c:	2b05      	cmp	r3, #5
 8011d5e:	d801      	bhi.n	8011d64 <__hexdig_fun+0x26>
 8011d60:	3827      	subs	r0, #39	@ 0x27
 8011d62:	e7f1      	b.n	8011d48 <__hexdig_fun+0xa>
 8011d64:	2000      	movs	r0, #0
 8011d66:	4770      	bx	lr

08011d68 <__gethex>:
 8011d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6c:	b085      	sub	sp, #20
 8011d6e:	468a      	mov	sl, r1
 8011d70:	4690      	mov	r8, r2
 8011d72:	9302      	str	r3, [sp, #8]
 8011d74:	680b      	ldr	r3, [r1, #0]
 8011d76:	9001      	str	r0, [sp, #4]
 8011d78:	1c9c      	adds	r4, r3, #2
 8011d7a:	46a1      	mov	r9, r4
 8011d7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011d80:	2830      	cmp	r0, #48	@ 0x30
 8011d82:	d0fa      	beq.n	8011d7a <__gethex+0x12>
 8011d84:	eba9 0303 	sub.w	r3, r9, r3
 8011d88:	f1a3 0b02 	sub.w	fp, r3, #2
 8011d8c:	f7ff ffd7 	bl	8011d3e <__hexdig_fun>
 8011d90:	4605      	mov	r5, r0
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d166      	bne.n	8011e64 <__gethex+0xfc>
 8011d96:	2201      	movs	r2, #1
 8011d98:	499e      	ldr	r1, [pc, #632]	@ (8012014 <__gethex+0x2ac>)
 8011d9a:	4648      	mov	r0, r9
 8011d9c:	f7ff ff20 	bl	8011be0 <strncmp>
 8011da0:	4607      	mov	r7, r0
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d165      	bne.n	8011e72 <__gethex+0x10a>
 8011da6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011daa:	4626      	mov	r6, r4
 8011dac:	f7ff ffc7 	bl	8011d3e <__hexdig_fun>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d060      	beq.n	8011e76 <__gethex+0x10e>
 8011db4:	4623      	mov	r3, r4
 8011db6:	7818      	ldrb	r0, [r3, #0]
 8011db8:	4699      	mov	r9, r3
 8011dba:	3301      	adds	r3, #1
 8011dbc:	2830      	cmp	r0, #48	@ 0x30
 8011dbe:	d0fa      	beq.n	8011db6 <__gethex+0x4e>
 8011dc0:	f7ff ffbd 	bl	8011d3e <__hexdig_fun>
 8011dc4:	fab0 f580 	clz	r5, r0
 8011dc8:	f04f 0b01 	mov.w	fp, #1
 8011dcc:	096d      	lsrs	r5, r5, #5
 8011dce:	464a      	mov	r2, r9
 8011dd0:	4616      	mov	r6, r2
 8011dd2:	3201      	adds	r2, #1
 8011dd4:	7830      	ldrb	r0, [r6, #0]
 8011dd6:	f7ff ffb2 	bl	8011d3e <__hexdig_fun>
 8011dda:	2800      	cmp	r0, #0
 8011ddc:	d1f8      	bne.n	8011dd0 <__gethex+0x68>
 8011dde:	2201      	movs	r2, #1
 8011de0:	498c      	ldr	r1, [pc, #560]	@ (8012014 <__gethex+0x2ac>)
 8011de2:	4630      	mov	r0, r6
 8011de4:	f7ff fefc 	bl	8011be0 <strncmp>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d13e      	bne.n	8011e6a <__gethex+0x102>
 8011dec:	b944      	cbnz	r4, 8011e00 <__gethex+0x98>
 8011dee:	1c74      	adds	r4, r6, #1
 8011df0:	4622      	mov	r2, r4
 8011df2:	4616      	mov	r6, r2
 8011df4:	3201      	adds	r2, #1
 8011df6:	7830      	ldrb	r0, [r6, #0]
 8011df8:	f7ff ffa1 	bl	8011d3e <__hexdig_fun>
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	d1f8      	bne.n	8011df2 <__gethex+0x8a>
 8011e00:	1ba4      	subs	r4, r4, r6
 8011e02:	00a7      	lsls	r7, r4, #2
 8011e04:	7833      	ldrb	r3, [r6, #0]
 8011e06:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011e0a:	2b50      	cmp	r3, #80	@ 0x50
 8011e0c:	d13d      	bne.n	8011e8a <__gethex+0x122>
 8011e0e:	7873      	ldrb	r3, [r6, #1]
 8011e10:	2b2b      	cmp	r3, #43	@ 0x2b
 8011e12:	d032      	beq.n	8011e7a <__gethex+0x112>
 8011e14:	2b2d      	cmp	r3, #45	@ 0x2d
 8011e16:	d033      	beq.n	8011e80 <__gethex+0x118>
 8011e18:	1c71      	adds	r1, r6, #1
 8011e1a:	2400      	movs	r4, #0
 8011e1c:	7808      	ldrb	r0, [r1, #0]
 8011e1e:	f7ff ff8e 	bl	8011d3e <__hexdig_fun>
 8011e22:	1e43      	subs	r3, r0, #1
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	2b18      	cmp	r3, #24
 8011e28:	d82f      	bhi.n	8011e8a <__gethex+0x122>
 8011e2a:	f1a0 0210 	sub.w	r2, r0, #16
 8011e2e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011e32:	f7ff ff84 	bl	8011d3e <__hexdig_fun>
 8011e36:	f100 3cff 	add.w	ip, r0, #4294967295
 8011e3a:	230a      	movs	r3, #10
 8011e3c:	fa5f fc8c 	uxtb.w	ip, ip
 8011e40:	f1bc 0f18 	cmp.w	ip, #24
 8011e44:	d91e      	bls.n	8011e84 <__gethex+0x11c>
 8011e46:	b104      	cbz	r4, 8011e4a <__gethex+0xe2>
 8011e48:	4252      	negs	r2, r2
 8011e4a:	4417      	add	r7, r2
 8011e4c:	f8ca 1000 	str.w	r1, [sl]
 8011e50:	b1ed      	cbz	r5, 8011e8e <__gethex+0x126>
 8011e52:	f1bb 0f00 	cmp.w	fp, #0
 8011e56:	bf0c      	ite	eq
 8011e58:	2506      	moveq	r5, #6
 8011e5a:	2500      	movne	r5, #0
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	b005      	add	sp, #20
 8011e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e64:	2500      	movs	r5, #0
 8011e66:	462c      	mov	r4, r5
 8011e68:	e7b1      	b.n	8011dce <__gethex+0x66>
 8011e6a:	2c00      	cmp	r4, #0
 8011e6c:	d1c8      	bne.n	8011e00 <__gethex+0x98>
 8011e6e:	4627      	mov	r7, r4
 8011e70:	e7c8      	b.n	8011e04 <__gethex+0x9c>
 8011e72:	464e      	mov	r6, r9
 8011e74:	462f      	mov	r7, r5
 8011e76:	2501      	movs	r5, #1
 8011e78:	e7c4      	b.n	8011e04 <__gethex+0x9c>
 8011e7a:	2400      	movs	r4, #0
 8011e7c:	1cb1      	adds	r1, r6, #2
 8011e7e:	e7cd      	b.n	8011e1c <__gethex+0xb4>
 8011e80:	2401      	movs	r4, #1
 8011e82:	e7fb      	b.n	8011e7c <__gethex+0x114>
 8011e84:	fb03 0002 	mla	r0, r3, r2, r0
 8011e88:	e7cf      	b.n	8011e2a <__gethex+0xc2>
 8011e8a:	4631      	mov	r1, r6
 8011e8c:	e7de      	b.n	8011e4c <__gethex+0xe4>
 8011e8e:	eba6 0309 	sub.w	r3, r6, r9
 8011e92:	4629      	mov	r1, r5
 8011e94:	3b01      	subs	r3, #1
 8011e96:	2b07      	cmp	r3, #7
 8011e98:	dc0a      	bgt.n	8011eb0 <__gethex+0x148>
 8011e9a:	9801      	ldr	r0, [sp, #4]
 8011e9c:	f7fe f946 	bl	801012c <_Balloc>
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	b940      	cbnz	r0, 8011eb6 <__gethex+0x14e>
 8011ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8012018 <__gethex+0x2b0>)
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	21e4      	movs	r1, #228	@ 0xe4
 8011eaa:	485c      	ldr	r0, [pc, #368]	@ (801201c <__gethex+0x2b4>)
 8011eac:	f7ff fec4 	bl	8011c38 <__assert_func>
 8011eb0:	3101      	adds	r1, #1
 8011eb2:	105b      	asrs	r3, r3, #1
 8011eb4:	e7ef      	b.n	8011e96 <__gethex+0x12e>
 8011eb6:	f100 0a14 	add.w	sl, r0, #20
 8011eba:	2300      	movs	r3, #0
 8011ebc:	4655      	mov	r5, sl
 8011ebe:	469b      	mov	fp, r3
 8011ec0:	45b1      	cmp	r9, r6
 8011ec2:	d337      	bcc.n	8011f34 <__gethex+0x1cc>
 8011ec4:	f845 bb04 	str.w	fp, [r5], #4
 8011ec8:	eba5 050a 	sub.w	r5, r5, sl
 8011ecc:	4658      	mov	r0, fp
 8011ece:	10ad      	asrs	r5, r5, #2
 8011ed0:	6125      	str	r5, [r4, #16]
 8011ed2:	016d      	lsls	r5, r5, #5
 8011ed4:	f7fe fa1e 	bl	8010314 <__hi0bits>
 8011ed8:	f8d8 6000 	ldr.w	r6, [r8]
 8011edc:	1a2d      	subs	r5, r5, r0
 8011ede:	42b5      	cmp	r5, r6
 8011ee0:	dd54      	ble.n	8011f8c <__gethex+0x224>
 8011ee2:	1bad      	subs	r5, r5, r6
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	f7fe fdb5 	bl	8010a56 <__any_on>
 8011eec:	4681      	mov	r9, r0
 8011eee:	b178      	cbz	r0, 8011f10 <__gethex+0x1a8>
 8011ef0:	1e6b      	subs	r3, r5, #1
 8011ef2:	f04f 0901 	mov.w	r9, #1
 8011ef6:	1159      	asrs	r1, r3, #5
 8011ef8:	f003 021f 	and.w	r2, r3, #31
 8011efc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011f00:	fa09 f202 	lsl.w	r2, r9, r2
 8011f04:	420a      	tst	r2, r1
 8011f06:	d003      	beq.n	8011f10 <__gethex+0x1a8>
 8011f08:	454b      	cmp	r3, r9
 8011f0a:	dc36      	bgt.n	8011f7a <__gethex+0x212>
 8011f0c:	f04f 0902 	mov.w	r9, #2
 8011f10:	442f      	add	r7, r5
 8011f12:	4629      	mov	r1, r5
 8011f14:	4620      	mov	r0, r4
 8011f16:	f7ff fec1 	bl	8011c9c <rshift>
 8011f1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f1e:	42bb      	cmp	r3, r7
 8011f20:	da42      	bge.n	8011fa8 <__gethex+0x240>
 8011f22:	4621      	mov	r1, r4
 8011f24:	9801      	ldr	r0, [sp, #4]
 8011f26:	f7fe f941 	bl	80101ac <_Bfree>
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f2e:	25a3      	movs	r5, #163	@ 0xa3
 8011f30:	6013      	str	r3, [r2, #0]
 8011f32:	e793      	b.n	8011e5c <__gethex+0xf4>
 8011f34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011f38:	2a2e      	cmp	r2, #46	@ 0x2e
 8011f3a:	d012      	beq.n	8011f62 <__gethex+0x1fa>
 8011f3c:	2b20      	cmp	r3, #32
 8011f3e:	d104      	bne.n	8011f4a <__gethex+0x1e2>
 8011f40:	f845 bb04 	str.w	fp, [r5], #4
 8011f44:	f04f 0b00 	mov.w	fp, #0
 8011f48:	465b      	mov	r3, fp
 8011f4a:	7830      	ldrb	r0, [r6, #0]
 8011f4c:	9303      	str	r3, [sp, #12]
 8011f4e:	f7ff fef6 	bl	8011d3e <__hexdig_fun>
 8011f52:	9b03      	ldr	r3, [sp, #12]
 8011f54:	f000 000f 	and.w	r0, r0, #15
 8011f58:	4098      	lsls	r0, r3
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	ea4b 0b00 	orr.w	fp, fp, r0
 8011f60:	e7ae      	b.n	8011ec0 <__gethex+0x158>
 8011f62:	45b1      	cmp	r9, r6
 8011f64:	d8ea      	bhi.n	8011f3c <__gethex+0x1d4>
 8011f66:	2201      	movs	r2, #1
 8011f68:	492a      	ldr	r1, [pc, #168]	@ (8012014 <__gethex+0x2ac>)
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	9303      	str	r3, [sp, #12]
 8011f6e:	f7ff fe37 	bl	8011be0 <strncmp>
 8011f72:	9b03      	ldr	r3, [sp, #12]
 8011f74:	2800      	cmp	r0, #0
 8011f76:	d1e1      	bne.n	8011f3c <__gethex+0x1d4>
 8011f78:	e7a2      	b.n	8011ec0 <__gethex+0x158>
 8011f7a:	1ea9      	subs	r1, r5, #2
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f7fe fd6a 	bl	8010a56 <__any_on>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	d0c2      	beq.n	8011f0c <__gethex+0x1a4>
 8011f86:	f04f 0903 	mov.w	r9, #3
 8011f8a:	e7c1      	b.n	8011f10 <__gethex+0x1a8>
 8011f8c:	da09      	bge.n	8011fa2 <__gethex+0x23a>
 8011f8e:	1b75      	subs	r5, r6, r5
 8011f90:	4621      	mov	r1, r4
 8011f92:	9801      	ldr	r0, [sp, #4]
 8011f94:	462a      	mov	r2, r5
 8011f96:	1b7f      	subs	r7, r7, r5
 8011f98:	f7fe fb1c 	bl	80105d4 <__lshift>
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	f100 0a14 	add.w	sl, r0, #20
 8011fa2:	f04f 0900 	mov.w	r9, #0
 8011fa6:	e7b8      	b.n	8011f1a <__gethex+0x1b2>
 8011fa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011fac:	42bd      	cmp	r5, r7
 8011fae:	dd6f      	ble.n	8012090 <__gethex+0x328>
 8011fb0:	1bed      	subs	r5, r5, r7
 8011fb2:	42ae      	cmp	r6, r5
 8011fb4:	dc34      	bgt.n	8012020 <__gethex+0x2b8>
 8011fb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	d022      	beq.n	8012004 <__gethex+0x29c>
 8011fbe:	2b03      	cmp	r3, #3
 8011fc0:	d024      	beq.n	801200c <__gethex+0x2a4>
 8011fc2:	2b01      	cmp	r3, #1
 8011fc4:	d115      	bne.n	8011ff2 <__gethex+0x28a>
 8011fc6:	42ae      	cmp	r6, r5
 8011fc8:	d113      	bne.n	8011ff2 <__gethex+0x28a>
 8011fca:	2e01      	cmp	r6, #1
 8011fcc:	d10b      	bne.n	8011fe6 <__gethex+0x27e>
 8011fce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011fd2:	2562      	movs	r5, #98	@ 0x62
 8011fd4:	9a02      	ldr	r2, [sp, #8]
 8011fd6:	6013      	str	r3, [r2, #0]
 8011fd8:	2301      	movs	r3, #1
 8011fda:	6123      	str	r3, [r4, #16]
 8011fdc:	f8ca 3000 	str.w	r3, [sl]
 8011fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011fe2:	601c      	str	r4, [r3, #0]
 8011fe4:	e73a      	b.n	8011e5c <__gethex+0xf4>
 8011fe6:	1e71      	subs	r1, r6, #1
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f7fe fd34 	bl	8010a56 <__any_on>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d1ed      	bne.n	8011fce <__gethex+0x266>
 8011ff2:	4621      	mov	r1, r4
 8011ff4:	9801      	ldr	r0, [sp, #4]
 8011ff6:	f7fe f8d9 	bl	80101ac <_Bfree>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ffe:	2550      	movs	r5, #80	@ 0x50
 8012000:	6013      	str	r3, [r2, #0]
 8012002:	e72b      	b.n	8011e5c <__gethex+0xf4>
 8012004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1f3      	bne.n	8011ff2 <__gethex+0x28a>
 801200a:	e7e0      	b.n	8011fce <__gethex+0x266>
 801200c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801200e:	2b00      	cmp	r3, #0
 8012010:	d1dd      	bne.n	8011fce <__gethex+0x266>
 8012012:	e7ee      	b.n	8011ff2 <__gethex+0x28a>
 8012014:	08030333 	.word	0x08030333
 8012018:	080302c9 	.word	0x080302c9
 801201c:	0803038a 	.word	0x0803038a
 8012020:	1e6f      	subs	r7, r5, #1
 8012022:	f1b9 0f00 	cmp.w	r9, #0
 8012026:	d130      	bne.n	801208a <__gethex+0x322>
 8012028:	b127      	cbz	r7, 8012034 <__gethex+0x2cc>
 801202a:	4639      	mov	r1, r7
 801202c:	4620      	mov	r0, r4
 801202e:	f7fe fd12 	bl	8010a56 <__any_on>
 8012032:	4681      	mov	r9, r0
 8012034:	117a      	asrs	r2, r7, #5
 8012036:	2301      	movs	r3, #1
 8012038:	f007 071f 	and.w	r7, r7, #31
 801203c:	4629      	mov	r1, r5
 801203e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012042:	4620      	mov	r0, r4
 8012044:	40bb      	lsls	r3, r7
 8012046:	1b76      	subs	r6, r6, r5
 8012048:	2502      	movs	r5, #2
 801204a:	4213      	tst	r3, r2
 801204c:	bf18      	it	ne
 801204e:	f049 0902 	orrne.w	r9, r9, #2
 8012052:	f7ff fe23 	bl	8011c9c <rshift>
 8012056:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801205a:	f1b9 0f00 	cmp.w	r9, #0
 801205e:	d047      	beq.n	80120f0 <__gethex+0x388>
 8012060:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012064:	2b02      	cmp	r3, #2
 8012066:	d015      	beq.n	8012094 <__gethex+0x32c>
 8012068:	2b03      	cmp	r3, #3
 801206a:	d017      	beq.n	801209c <__gethex+0x334>
 801206c:	2b01      	cmp	r3, #1
 801206e:	d109      	bne.n	8012084 <__gethex+0x31c>
 8012070:	f019 0f02 	tst.w	r9, #2
 8012074:	d006      	beq.n	8012084 <__gethex+0x31c>
 8012076:	f8da 3000 	ldr.w	r3, [sl]
 801207a:	ea49 0903 	orr.w	r9, r9, r3
 801207e:	f019 0f01 	tst.w	r9, #1
 8012082:	d10e      	bne.n	80120a2 <__gethex+0x33a>
 8012084:	f045 0510 	orr.w	r5, r5, #16
 8012088:	e032      	b.n	80120f0 <__gethex+0x388>
 801208a:	f04f 0901 	mov.w	r9, #1
 801208e:	e7d1      	b.n	8012034 <__gethex+0x2cc>
 8012090:	2501      	movs	r5, #1
 8012092:	e7e2      	b.n	801205a <__gethex+0x2f2>
 8012094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012096:	f1c3 0301 	rsb	r3, r3, #1
 801209a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801209c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d0f0      	beq.n	8012084 <__gethex+0x31c>
 80120a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80120a6:	f104 0314 	add.w	r3, r4, #20
 80120aa:	f04f 0c00 	mov.w	ip, #0
 80120ae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80120b2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80120b6:	4618      	mov	r0, r3
 80120b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80120bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80120c0:	d01b      	beq.n	80120fa <__gethex+0x392>
 80120c2:	3201      	adds	r2, #1
 80120c4:	6002      	str	r2, [r0, #0]
 80120c6:	2d02      	cmp	r5, #2
 80120c8:	f104 0314 	add.w	r3, r4, #20
 80120cc:	d13c      	bne.n	8012148 <__gethex+0x3e0>
 80120ce:	f8d8 2000 	ldr.w	r2, [r8]
 80120d2:	3a01      	subs	r2, #1
 80120d4:	42b2      	cmp	r2, r6
 80120d6:	d109      	bne.n	80120ec <__gethex+0x384>
 80120d8:	1171      	asrs	r1, r6, #5
 80120da:	2201      	movs	r2, #1
 80120dc:	f006 061f 	and.w	r6, r6, #31
 80120e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80120e4:	fa02 f606 	lsl.w	r6, r2, r6
 80120e8:	421e      	tst	r6, r3
 80120ea:	d13a      	bne.n	8012162 <__gethex+0x3fa>
 80120ec:	f045 0520 	orr.w	r5, r5, #32
 80120f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120f2:	601c      	str	r4, [r3, #0]
 80120f4:	9b02      	ldr	r3, [sp, #8]
 80120f6:	601f      	str	r7, [r3, #0]
 80120f8:	e6b0      	b.n	8011e5c <__gethex+0xf4>
 80120fa:	4299      	cmp	r1, r3
 80120fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8012100:	d8d9      	bhi.n	80120b6 <__gethex+0x34e>
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	459b      	cmp	fp, r3
 8012106:	db17      	blt.n	8012138 <__gethex+0x3d0>
 8012108:	6861      	ldr	r1, [r4, #4]
 801210a:	9801      	ldr	r0, [sp, #4]
 801210c:	3101      	adds	r1, #1
 801210e:	f7fe f80d 	bl	801012c <_Balloc>
 8012112:	4681      	mov	r9, r0
 8012114:	b918      	cbnz	r0, 801211e <__gethex+0x3b6>
 8012116:	4b1a      	ldr	r3, [pc, #104]	@ (8012180 <__gethex+0x418>)
 8012118:	4602      	mov	r2, r0
 801211a:	2184      	movs	r1, #132	@ 0x84
 801211c:	e6c5      	b.n	8011eaa <__gethex+0x142>
 801211e:	6922      	ldr	r2, [r4, #16]
 8012120:	f104 010c 	add.w	r1, r4, #12
 8012124:	300c      	adds	r0, #12
 8012126:	3202      	adds	r2, #2
 8012128:	0092      	lsls	r2, r2, #2
 801212a:	f7fd f88c 	bl	800f246 <memcpy>
 801212e:	4621      	mov	r1, r4
 8012130:	464c      	mov	r4, r9
 8012132:	9801      	ldr	r0, [sp, #4]
 8012134:	f7fe f83a 	bl	80101ac <_Bfree>
 8012138:	6923      	ldr	r3, [r4, #16]
 801213a:	1c5a      	adds	r2, r3, #1
 801213c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012140:	6122      	str	r2, [r4, #16]
 8012142:	2201      	movs	r2, #1
 8012144:	615a      	str	r2, [r3, #20]
 8012146:	e7be      	b.n	80120c6 <__gethex+0x35e>
 8012148:	6922      	ldr	r2, [r4, #16]
 801214a:	455a      	cmp	r2, fp
 801214c:	dd0b      	ble.n	8012166 <__gethex+0x3fe>
 801214e:	2101      	movs	r1, #1
 8012150:	4620      	mov	r0, r4
 8012152:	f7ff fda3 	bl	8011c9c <rshift>
 8012156:	3701      	adds	r7, #1
 8012158:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801215c:	42bb      	cmp	r3, r7
 801215e:	f6ff aee0 	blt.w	8011f22 <__gethex+0x1ba>
 8012162:	2501      	movs	r5, #1
 8012164:	e7c2      	b.n	80120ec <__gethex+0x384>
 8012166:	f016 061f 	ands.w	r6, r6, #31
 801216a:	d0fa      	beq.n	8012162 <__gethex+0x3fa>
 801216c:	4453      	add	r3, sl
 801216e:	f1c6 0620 	rsb	r6, r6, #32
 8012172:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012176:	f7fe f8cd 	bl	8010314 <__hi0bits>
 801217a:	42b0      	cmp	r0, r6
 801217c:	dbe7      	blt.n	801214e <__gethex+0x3e6>
 801217e:	e7f0      	b.n	8012162 <__gethex+0x3fa>
 8012180:	080302c9 	.word	0x080302c9

08012184 <L_shift>:
 8012184:	f1c2 0208 	rsb	r2, r2, #8
 8012188:	0092      	lsls	r2, r2, #2
 801218a:	b570      	push	{r4, r5, r6, lr}
 801218c:	f1c2 0620 	rsb	r6, r2, #32
 8012190:	6843      	ldr	r3, [r0, #4]
 8012192:	6804      	ldr	r4, [r0, #0]
 8012194:	fa03 f506 	lsl.w	r5, r3, r6
 8012198:	40d3      	lsrs	r3, r2
 801219a:	432c      	orrs	r4, r5
 801219c:	6004      	str	r4, [r0, #0]
 801219e:	f840 3f04 	str.w	r3, [r0, #4]!
 80121a2:	4288      	cmp	r0, r1
 80121a4:	d3f4      	bcc.n	8012190 <L_shift+0xc>
 80121a6:	bd70      	pop	{r4, r5, r6, pc}

080121a8 <__match>:
 80121a8:	6803      	ldr	r3, [r0, #0]
 80121aa:	3301      	adds	r3, #1
 80121ac:	b530      	push	{r4, r5, lr}
 80121ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121b2:	b914      	cbnz	r4, 80121ba <__match+0x12>
 80121b4:	6003      	str	r3, [r0, #0]
 80121b6:	2001      	movs	r0, #1
 80121b8:	bd30      	pop	{r4, r5, pc}
 80121ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80121c2:	2d19      	cmp	r5, #25
 80121c4:	bf98      	it	ls
 80121c6:	3220      	addls	r2, #32
 80121c8:	42a2      	cmp	r2, r4
 80121ca:	d0f0      	beq.n	80121ae <__match+0x6>
 80121cc:	2000      	movs	r0, #0
 80121ce:	e7f3      	b.n	80121b8 <__match+0x10>

080121d0 <__hexnan>:
 80121d0:	680b      	ldr	r3, [r1, #0]
 80121d2:	6801      	ldr	r1, [r0, #0]
 80121d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d8:	115e      	asrs	r6, r3, #5
 80121da:	f013 031f 	ands.w	r3, r3, #31
 80121de:	f04f 0500 	mov.w	r5, #0
 80121e2:	b087      	sub	sp, #28
 80121e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80121e8:	4682      	mov	sl, r0
 80121ea:	4690      	mov	r8, r2
 80121ec:	46ab      	mov	fp, r5
 80121ee:	bf18      	it	ne
 80121f0:	3604      	addne	r6, #4
 80121f2:	9301      	str	r3, [sp, #4]
 80121f4:	9502      	str	r5, [sp, #8]
 80121f6:	1f37      	subs	r7, r6, #4
 80121f8:	f846 5c04 	str.w	r5, [r6, #-4]
 80121fc:	46b9      	mov	r9, r7
 80121fe:	463c      	mov	r4, r7
 8012200:	1c4b      	adds	r3, r1, #1
 8012202:	784a      	ldrb	r2, [r1, #1]
 8012204:	9303      	str	r3, [sp, #12]
 8012206:	b342      	cbz	r2, 801225a <__hexnan+0x8a>
 8012208:	4610      	mov	r0, r2
 801220a:	9105      	str	r1, [sp, #20]
 801220c:	9204      	str	r2, [sp, #16]
 801220e:	f7ff fd96 	bl	8011d3e <__hexdig_fun>
 8012212:	2800      	cmp	r0, #0
 8012214:	d151      	bne.n	80122ba <__hexnan+0xea>
 8012216:	9a04      	ldr	r2, [sp, #16]
 8012218:	9905      	ldr	r1, [sp, #20]
 801221a:	2a20      	cmp	r2, #32
 801221c:	d818      	bhi.n	8012250 <__hexnan+0x80>
 801221e:	9b02      	ldr	r3, [sp, #8]
 8012220:	459b      	cmp	fp, r3
 8012222:	dd13      	ble.n	801224c <__hexnan+0x7c>
 8012224:	454c      	cmp	r4, r9
 8012226:	d206      	bcs.n	8012236 <__hexnan+0x66>
 8012228:	2d07      	cmp	r5, #7
 801222a:	dc04      	bgt.n	8012236 <__hexnan+0x66>
 801222c:	462a      	mov	r2, r5
 801222e:	4649      	mov	r1, r9
 8012230:	4620      	mov	r0, r4
 8012232:	f7ff ffa7 	bl	8012184 <L_shift>
 8012236:	4544      	cmp	r4, r8
 8012238:	d951      	bls.n	80122de <__hexnan+0x10e>
 801223a:	2300      	movs	r3, #0
 801223c:	f1a4 0904 	sub.w	r9, r4, #4
 8012240:	f8cd b008 	str.w	fp, [sp, #8]
 8012244:	f844 3c04 	str.w	r3, [r4, #-4]
 8012248:	461d      	mov	r5, r3
 801224a:	464c      	mov	r4, r9
 801224c:	9903      	ldr	r1, [sp, #12]
 801224e:	e7d7      	b.n	8012200 <__hexnan+0x30>
 8012250:	2a29      	cmp	r2, #41	@ 0x29
 8012252:	d156      	bne.n	8012302 <__hexnan+0x132>
 8012254:	3102      	adds	r1, #2
 8012256:	f8ca 1000 	str.w	r1, [sl]
 801225a:	f1bb 0f00 	cmp.w	fp, #0
 801225e:	d050      	beq.n	8012302 <__hexnan+0x132>
 8012260:	454c      	cmp	r4, r9
 8012262:	d206      	bcs.n	8012272 <__hexnan+0xa2>
 8012264:	2d07      	cmp	r5, #7
 8012266:	dc04      	bgt.n	8012272 <__hexnan+0xa2>
 8012268:	462a      	mov	r2, r5
 801226a:	4649      	mov	r1, r9
 801226c:	4620      	mov	r0, r4
 801226e:	f7ff ff89 	bl	8012184 <L_shift>
 8012272:	4544      	cmp	r4, r8
 8012274:	d935      	bls.n	80122e2 <__hexnan+0x112>
 8012276:	f1a8 0204 	sub.w	r2, r8, #4
 801227a:	4623      	mov	r3, r4
 801227c:	f853 1b04 	ldr.w	r1, [r3], #4
 8012280:	429f      	cmp	r7, r3
 8012282:	f842 1f04 	str.w	r1, [r2, #4]!
 8012286:	d2f9      	bcs.n	801227c <__hexnan+0xac>
 8012288:	1b3b      	subs	r3, r7, r4
 801228a:	3e03      	subs	r6, #3
 801228c:	3401      	adds	r4, #1
 801228e:	2200      	movs	r2, #0
 8012290:	f023 0303 	bic.w	r3, r3, #3
 8012294:	3304      	adds	r3, #4
 8012296:	42b4      	cmp	r4, r6
 8012298:	bf88      	it	hi
 801229a:	2304      	movhi	r3, #4
 801229c:	4443      	add	r3, r8
 801229e:	f843 2b04 	str.w	r2, [r3], #4
 80122a2:	429f      	cmp	r7, r3
 80122a4:	d2fb      	bcs.n	801229e <__hexnan+0xce>
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	b91b      	cbnz	r3, 80122b2 <__hexnan+0xe2>
 80122aa:	4547      	cmp	r7, r8
 80122ac:	d127      	bne.n	80122fe <__hexnan+0x12e>
 80122ae:	2301      	movs	r3, #1
 80122b0:	603b      	str	r3, [r7, #0]
 80122b2:	2005      	movs	r0, #5
 80122b4:	b007      	add	sp, #28
 80122b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ba:	3501      	adds	r5, #1
 80122bc:	f10b 0b01 	add.w	fp, fp, #1
 80122c0:	2d08      	cmp	r5, #8
 80122c2:	dd05      	ble.n	80122d0 <__hexnan+0x100>
 80122c4:	4544      	cmp	r4, r8
 80122c6:	d9c1      	bls.n	801224c <__hexnan+0x7c>
 80122c8:	2300      	movs	r3, #0
 80122ca:	3c04      	subs	r4, #4
 80122cc:	2501      	movs	r5, #1
 80122ce:	6023      	str	r3, [r4, #0]
 80122d0:	6822      	ldr	r2, [r4, #0]
 80122d2:	f000 000f 	and.w	r0, r0, #15
 80122d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80122da:	6020      	str	r0, [r4, #0]
 80122dc:	e7b6      	b.n	801224c <__hexnan+0x7c>
 80122de:	2508      	movs	r5, #8
 80122e0:	e7b4      	b.n	801224c <__hexnan+0x7c>
 80122e2:	9b01      	ldr	r3, [sp, #4]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d0de      	beq.n	80122a6 <__hexnan+0xd6>
 80122e8:	f1c3 0320 	rsb	r3, r3, #32
 80122ec:	f04f 32ff 	mov.w	r2, #4294967295
 80122f0:	40da      	lsrs	r2, r3
 80122f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80122f6:	4013      	ands	r3, r2
 80122f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80122fc:	e7d3      	b.n	80122a6 <__hexnan+0xd6>
 80122fe:	3f04      	subs	r7, #4
 8012300:	e7d1      	b.n	80122a6 <__hexnan+0xd6>
 8012302:	2004      	movs	r0, #4
 8012304:	e7d6      	b.n	80122b4 <__hexnan+0xe4>

08012306 <__ascii_mbtowc>:
 8012306:	b082      	sub	sp, #8
 8012308:	b901      	cbnz	r1, 801230c <__ascii_mbtowc+0x6>
 801230a:	a901      	add	r1, sp, #4
 801230c:	b142      	cbz	r2, 8012320 <__ascii_mbtowc+0x1a>
 801230e:	b14b      	cbz	r3, 8012324 <__ascii_mbtowc+0x1e>
 8012310:	7813      	ldrb	r3, [r2, #0]
 8012312:	600b      	str	r3, [r1, #0]
 8012314:	7812      	ldrb	r2, [r2, #0]
 8012316:	1e10      	subs	r0, r2, #0
 8012318:	bf18      	it	ne
 801231a:	2001      	movne	r0, #1
 801231c:	b002      	add	sp, #8
 801231e:	4770      	bx	lr
 8012320:	4610      	mov	r0, r2
 8012322:	e7fb      	b.n	801231c <__ascii_mbtowc+0x16>
 8012324:	f06f 0001 	mvn.w	r0, #1
 8012328:	e7f8      	b.n	801231c <__ascii_mbtowc+0x16>

0801232a <_realloc_r>:
 801232a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801232e:	4607      	mov	r7, r0
 8012330:	4614      	mov	r4, r2
 8012332:	460d      	mov	r5, r1
 8012334:	b921      	cbnz	r1, 8012340 <_realloc_r+0x16>
 8012336:	4611      	mov	r1, r2
 8012338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801233c:	f7fd be6a 	b.w	8010014 <_malloc_r>
 8012340:	b92a      	cbnz	r2, 801234e <_realloc_r+0x24>
 8012342:	4625      	mov	r5, r4
 8012344:	f7fd fdf2 	bl	800ff2c <_free_r>
 8012348:	4628      	mov	r0, r5
 801234a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801234e:	f000 f840 	bl	80123d2 <_malloc_usable_size_r>
 8012352:	4284      	cmp	r4, r0
 8012354:	4606      	mov	r6, r0
 8012356:	d802      	bhi.n	801235e <_realloc_r+0x34>
 8012358:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801235c:	d8f4      	bhi.n	8012348 <_realloc_r+0x1e>
 801235e:	4621      	mov	r1, r4
 8012360:	4638      	mov	r0, r7
 8012362:	f7fd fe57 	bl	8010014 <_malloc_r>
 8012366:	4680      	mov	r8, r0
 8012368:	b908      	cbnz	r0, 801236e <_realloc_r+0x44>
 801236a:	4645      	mov	r5, r8
 801236c:	e7ec      	b.n	8012348 <_realloc_r+0x1e>
 801236e:	42b4      	cmp	r4, r6
 8012370:	4622      	mov	r2, r4
 8012372:	4629      	mov	r1, r5
 8012374:	bf28      	it	cs
 8012376:	4632      	movcs	r2, r6
 8012378:	f7fc ff65 	bl	800f246 <memcpy>
 801237c:	4629      	mov	r1, r5
 801237e:	4638      	mov	r0, r7
 8012380:	f7fd fdd4 	bl	800ff2c <_free_r>
 8012384:	e7f1      	b.n	801236a <_realloc_r+0x40>

08012386 <__ascii_wctomb>:
 8012386:	4603      	mov	r3, r0
 8012388:	4608      	mov	r0, r1
 801238a:	b141      	cbz	r1, 801239e <__ascii_wctomb+0x18>
 801238c:	2aff      	cmp	r2, #255	@ 0xff
 801238e:	d904      	bls.n	801239a <__ascii_wctomb+0x14>
 8012390:	228a      	movs	r2, #138	@ 0x8a
 8012392:	f04f 30ff 	mov.w	r0, #4294967295
 8012396:	601a      	str	r2, [r3, #0]
 8012398:	4770      	bx	lr
 801239a:	2001      	movs	r0, #1
 801239c:	700a      	strb	r2, [r1, #0]
 801239e:	4770      	bx	lr

080123a0 <fiprintf>:
 80123a0:	b40e      	push	{r1, r2, r3}
 80123a2:	b503      	push	{r0, r1, lr}
 80123a4:	ab03      	add	r3, sp, #12
 80123a6:	4601      	mov	r1, r0
 80123a8:	4805      	ldr	r0, [pc, #20]	@ (80123c0 <fiprintf+0x20>)
 80123aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80123ae:	6800      	ldr	r0, [r0, #0]
 80123b0:	9301      	str	r3, [sp, #4]
 80123b2:	f000 f83f 	bl	8012434 <_vfiprintf_r>
 80123b6:	b002      	add	sp, #8
 80123b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80123bc:	b003      	add	sp, #12
 80123be:	4770      	bx	lr
 80123c0:	20000030 	.word	0x20000030

080123c4 <abort>:
 80123c4:	2006      	movs	r0, #6
 80123c6:	b508      	push	{r3, lr}
 80123c8:	f000 fa08 	bl	80127dc <raise>
 80123cc:	2001      	movs	r0, #1
 80123ce:	f7f0 f9d9 	bl	8002784 <_exit>

080123d2 <_malloc_usable_size_r>:
 80123d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123d6:	1f18      	subs	r0, r3, #4
 80123d8:	2b00      	cmp	r3, #0
 80123da:	bfbc      	itt	lt
 80123dc:	580b      	ldrlt	r3, [r1, r0]
 80123de:	18c0      	addlt	r0, r0, r3
 80123e0:	4770      	bx	lr

080123e2 <__sfputc_r>:
 80123e2:	6893      	ldr	r3, [r2, #8]
 80123e4:	3b01      	subs	r3, #1
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	b410      	push	{r4}
 80123ea:	6093      	str	r3, [r2, #8]
 80123ec:	da08      	bge.n	8012400 <__sfputc_r+0x1e>
 80123ee:	6994      	ldr	r4, [r2, #24]
 80123f0:	42a3      	cmp	r3, r4
 80123f2:	db01      	blt.n	80123f8 <__sfputc_r+0x16>
 80123f4:	290a      	cmp	r1, #10
 80123f6:	d103      	bne.n	8012400 <__sfputc_r+0x1e>
 80123f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123fc:	f000 b932 	b.w	8012664 <__swbuf_r>
 8012400:	6813      	ldr	r3, [r2, #0]
 8012402:	1c58      	adds	r0, r3, #1
 8012404:	6010      	str	r0, [r2, #0]
 8012406:	4608      	mov	r0, r1
 8012408:	7019      	strb	r1, [r3, #0]
 801240a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801240e:	4770      	bx	lr

08012410 <__sfputs_r>:
 8012410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012412:	4606      	mov	r6, r0
 8012414:	460f      	mov	r7, r1
 8012416:	4614      	mov	r4, r2
 8012418:	18d5      	adds	r5, r2, r3
 801241a:	42ac      	cmp	r4, r5
 801241c:	d101      	bne.n	8012422 <__sfputs_r+0x12>
 801241e:	2000      	movs	r0, #0
 8012420:	e007      	b.n	8012432 <__sfputs_r+0x22>
 8012422:	463a      	mov	r2, r7
 8012424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012428:	4630      	mov	r0, r6
 801242a:	f7ff ffda 	bl	80123e2 <__sfputc_r>
 801242e:	1c43      	adds	r3, r0, #1
 8012430:	d1f3      	bne.n	801241a <__sfputs_r+0xa>
 8012432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012434 <_vfiprintf_r>:
 8012434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012438:	460d      	mov	r5, r1
 801243a:	b09d      	sub	sp, #116	@ 0x74
 801243c:	4614      	mov	r4, r2
 801243e:	4698      	mov	r8, r3
 8012440:	4606      	mov	r6, r0
 8012442:	b118      	cbz	r0, 801244c <_vfiprintf_r+0x18>
 8012444:	6a03      	ldr	r3, [r0, #32]
 8012446:	b90b      	cbnz	r3, 801244c <_vfiprintf_r+0x18>
 8012448:	f7fc fdd4 	bl	800eff4 <__sinit>
 801244c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801244e:	07d9      	lsls	r1, r3, #31
 8012450:	d405      	bmi.n	801245e <_vfiprintf_r+0x2a>
 8012452:	89ab      	ldrh	r3, [r5, #12]
 8012454:	059a      	lsls	r2, r3, #22
 8012456:	d402      	bmi.n	801245e <_vfiprintf_r+0x2a>
 8012458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801245a:	f7fc fee4 	bl	800f226 <__retarget_lock_acquire_recursive>
 801245e:	89ab      	ldrh	r3, [r5, #12]
 8012460:	071b      	lsls	r3, r3, #28
 8012462:	d501      	bpl.n	8012468 <_vfiprintf_r+0x34>
 8012464:	692b      	ldr	r3, [r5, #16]
 8012466:	b99b      	cbnz	r3, 8012490 <_vfiprintf_r+0x5c>
 8012468:	4629      	mov	r1, r5
 801246a:	4630      	mov	r0, r6
 801246c:	f000 f938 	bl	80126e0 <__swsetup_r>
 8012470:	b170      	cbz	r0, 8012490 <_vfiprintf_r+0x5c>
 8012472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012474:	07dc      	lsls	r4, r3, #31
 8012476:	d504      	bpl.n	8012482 <_vfiprintf_r+0x4e>
 8012478:	f04f 30ff 	mov.w	r0, #4294967295
 801247c:	b01d      	add	sp, #116	@ 0x74
 801247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012482:	89ab      	ldrh	r3, [r5, #12]
 8012484:	0598      	lsls	r0, r3, #22
 8012486:	d4f7      	bmi.n	8012478 <_vfiprintf_r+0x44>
 8012488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801248a:	f7fc fecd 	bl	800f228 <__retarget_lock_release_recursive>
 801248e:	e7f3      	b.n	8012478 <_vfiprintf_r+0x44>
 8012490:	2300      	movs	r3, #0
 8012492:	f8cd 800c 	str.w	r8, [sp, #12]
 8012496:	f04f 0901 	mov.w	r9, #1
 801249a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012650 <_vfiprintf_r+0x21c>
 801249e:	9309      	str	r3, [sp, #36]	@ 0x24
 80124a0:	2320      	movs	r3, #32
 80124a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124a6:	2330      	movs	r3, #48	@ 0x30
 80124a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124ac:	4623      	mov	r3, r4
 80124ae:	469a      	mov	sl, r3
 80124b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124b4:	b10a      	cbz	r2, 80124ba <_vfiprintf_r+0x86>
 80124b6:	2a25      	cmp	r2, #37	@ 0x25
 80124b8:	d1f9      	bne.n	80124ae <_vfiprintf_r+0x7a>
 80124ba:	ebba 0b04 	subs.w	fp, sl, r4
 80124be:	d00b      	beq.n	80124d8 <_vfiprintf_r+0xa4>
 80124c0:	465b      	mov	r3, fp
 80124c2:	4622      	mov	r2, r4
 80124c4:	4629      	mov	r1, r5
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7ff ffa2 	bl	8012410 <__sfputs_r>
 80124cc:	3001      	adds	r0, #1
 80124ce:	f000 80a7 	beq.w	8012620 <_vfiprintf_r+0x1ec>
 80124d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80124d4:	445a      	add	r2, fp
 80124d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80124d8:	f89a 3000 	ldrb.w	r3, [sl]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f000 809f 	beq.w	8012620 <_vfiprintf_r+0x1ec>
 80124e2:	2300      	movs	r3, #0
 80124e4:	f04f 32ff 	mov.w	r2, #4294967295
 80124e8:	f10a 0a01 	add.w	sl, sl, #1
 80124ec:	9304      	str	r3, [sp, #16]
 80124ee:	9307      	str	r3, [sp, #28]
 80124f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80124f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80124f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124fa:	4654      	mov	r4, sl
 80124fc:	2205      	movs	r2, #5
 80124fe:	4854      	ldr	r0, [pc, #336]	@ (8012650 <_vfiprintf_r+0x21c>)
 8012500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012504:	f7fc fe91 	bl	800f22a <memchr>
 8012508:	9a04      	ldr	r2, [sp, #16]
 801250a:	b9d8      	cbnz	r0, 8012544 <_vfiprintf_r+0x110>
 801250c:	06d1      	lsls	r1, r2, #27
 801250e:	bf44      	itt	mi
 8012510:	2320      	movmi	r3, #32
 8012512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012516:	0713      	lsls	r3, r2, #28
 8012518:	bf44      	itt	mi
 801251a:	232b      	movmi	r3, #43	@ 0x2b
 801251c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012520:	f89a 3000 	ldrb.w	r3, [sl]
 8012524:	2b2a      	cmp	r3, #42	@ 0x2a
 8012526:	d015      	beq.n	8012554 <_vfiprintf_r+0x120>
 8012528:	9a07      	ldr	r2, [sp, #28]
 801252a:	4654      	mov	r4, sl
 801252c:	2000      	movs	r0, #0
 801252e:	f04f 0c0a 	mov.w	ip, #10
 8012532:	4621      	mov	r1, r4
 8012534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012538:	3b30      	subs	r3, #48	@ 0x30
 801253a:	2b09      	cmp	r3, #9
 801253c:	d94b      	bls.n	80125d6 <_vfiprintf_r+0x1a2>
 801253e:	b1b0      	cbz	r0, 801256e <_vfiprintf_r+0x13a>
 8012540:	9207      	str	r2, [sp, #28]
 8012542:	e014      	b.n	801256e <_vfiprintf_r+0x13a>
 8012544:	eba0 0308 	sub.w	r3, r0, r8
 8012548:	46a2      	mov	sl, r4
 801254a:	fa09 f303 	lsl.w	r3, r9, r3
 801254e:	4313      	orrs	r3, r2
 8012550:	9304      	str	r3, [sp, #16]
 8012552:	e7d2      	b.n	80124fa <_vfiprintf_r+0xc6>
 8012554:	9b03      	ldr	r3, [sp, #12]
 8012556:	1d19      	adds	r1, r3, #4
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	9103      	str	r1, [sp, #12]
 801255e:	bfbb      	ittet	lt
 8012560:	425b      	neglt	r3, r3
 8012562:	f042 0202 	orrlt.w	r2, r2, #2
 8012566:	9307      	strge	r3, [sp, #28]
 8012568:	9307      	strlt	r3, [sp, #28]
 801256a:	bfb8      	it	lt
 801256c:	9204      	strlt	r2, [sp, #16]
 801256e:	7823      	ldrb	r3, [r4, #0]
 8012570:	2b2e      	cmp	r3, #46	@ 0x2e
 8012572:	d10a      	bne.n	801258a <_vfiprintf_r+0x156>
 8012574:	7863      	ldrb	r3, [r4, #1]
 8012576:	2b2a      	cmp	r3, #42	@ 0x2a
 8012578:	d132      	bne.n	80125e0 <_vfiprintf_r+0x1ac>
 801257a:	9b03      	ldr	r3, [sp, #12]
 801257c:	3402      	adds	r4, #2
 801257e:	1d1a      	adds	r2, r3, #4
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012586:	9203      	str	r2, [sp, #12]
 8012588:	9305      	str	r3, [sp, #20]
 801258a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012660 <_vfiprintf_r+0x22c>
 801258e:	2203      	movs	r2, #3
 8012590:	7821      	ldrb	r1, [r4, #0]
 8012592:	4650      	mov	r0, sl
 8012594:	f7fc fe49 	bl	800f22a <memchr>
 8012598:	b138      	cbz	r0, 80125aa <_vfiprintf_r+0x176>
 801259a:	eba0 000a 	sub.w	r0, r0, sl
 801259e:	2240      	movs	r2, #64	@ 0x40
 80125a0:	9b04      	ldr	r3, [sp, #16]
 80125a2:	3401      	adds	r4, #1
 80125a4:	4082      	lsls	r2, r0
 80125a6:	4313      	orrs	r3, r2
 80125a8:	9304      	str	r3, [sp, #16]
 80125aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125ae:	2206      	movs	r2, #6
 80125b0:	4828      	ldr	r0, [pc, #160]	@ (8012654 <_vfiprintf_r+0x220>)
 80125b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80125b6:	f7fc fe38 	bl	800f22a <memchr>
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d03f      	beq.n	801263e <_vfiprintf_r+0x20a>
 80125be:	4b26      	ldr	r3, [pc, #152]	@ (8012658 <_vfiprintf_r+0x224>)
 80125c0:	bb1b      	cbnz	r3, 801260a <_vfiprintf_r+0x1d6>
 80125c2:	9b03      	ldr	r3, [sp, #12]
 80125c4:	3307      	adds	r3, #7
 80125c6:	f023 0307 	bic.w	r3, r3, #7
 80125ca:	3308      	adds	r3, #8
 80125cc:	9303      	str	r3, [sp, #12]
 80125ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125d0:	443b      	add	r3, r7
 80125d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80125d4:	e76a      	b.n	80124ac <_vfiprintf_r+0x78>
 80125d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80125da:	460c      	mov	r4, r1
 80125dc:	2001      	movs	r0, #1
 80125de:	e7a8      	b.n	8012532 <_vfiprintf_r+0xfe>
 80125e0:	2300      	movs	r3, #0
 80125e2:	3401      	adds	r4, #1
 80125e4:	f04f 0c0a 	mov.w	ip, #10
 80125e8:	4619      	mov	r1, r3
 80125ea:	9305      	str	r3, [sp, #20]
 80125ec:	4620      	mov	r0, r4
 80125ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125f2:	3a30      	subs	r2, #48	@ 0x30
 80125f4:	2a09      	cmp	r2, #9
 80125f6:	d903      	bls.n	8012600 <_vfiprintf_r+0x1cc>
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d0c6      	beq.n	801258a <_vfiprintf_r+0x156>
 80125fc:	9105      	str	r1, [sp, #20]
 80125fe:	e7c4      	b.n	801258a <_vfiprintf_r+0x156>
 8012600:	fb0c 2101 	mla	r1, ip, r1, r2
 8012604:	4604      	mov	r4, r0
 8012606:	2301      	movs	r3, #1
 8012608:	e7f0      	b.n	80125ec <_vfiprintf_r+0x1b8>
 801260a:	ab03      	add	r3, sp, #12
 801260c:	462a      	mov	r2, r5
 801260e:	a904      	add	r1, sp, #16
 8012610:	4630      	mov	r0, r6
 8012612:	9300      	str	r3, [sp, #0]
 8012614:	4b11      	ldr	r3, [pc, #68]	@ (801265c <_vfiprintf_r+0x228>)
 8012616:	f7fb fe99 	bl	800e34c <_printf_float>
 801261a:	4607      	mov	r7, r0
 801261c:	1c78      	adds	r0, r7, #1
 801261e:	d1d6      	bne.n	80125ce <_vfiprintf_r+0x19a>
 8012620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012622:	07d9      	lsls	r1, r3, #31
 8012624:	d405      	bmi.n	8012632 <_vfiprintf_r+0x1fe>
 8012626:	89ab      	ldrh	r3, [r5, #12]
 8012628:	059a      	lsls	r2, r3, #22
 801262a:	d402      	bmi.n	8012632 <_vfiprintf_r+0x1fe>
 801262c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801262e:	f7fc fdfb 	bl	800f228 <__retarget_lock_release_recursive>
 8012632:	89ab      	ldrh	r3, [r5, #12]
 8012634:	065b      	lsls	r3, r3, #25
 8012636:	f53f af1f 	bmi.w	8012478 <_vfiprintf_r+0x44>
 801263a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801263c:	e71e      	b.n	801247c <_vfiprintf_r+0x48>
 801263e:	ab03      	add	r3, sp, #12
 8012640:	462a      	mov	r2, r5
 8012642:	a904      	add	r1, sp, #16
 8012644:	4630      	mov	r0, r6
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	4b04      	ldr	r3, [pc, #16]	@ (801265c <_vfiprintf_r+0x228>)
 801264a:	f7fc f91b 	bl	800e884 <_printf_i>
 801264e:	e7e4      	b.n	801261a <_vfiprintf_r+0x1e6>
 8012650:	08030335 	.word	0x08030335
 8012654:	0803033f 	.word	0x0803033f
 8012658:	0800e34d 	.word	0x0800e34d
 801265c:	08012411 	.word	0x08012411
 8012660:	0803033b 	.word	0x0803033b

08012664 <__swbuf_r>:
 8012664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012666:	460e      	mov	r6, r1
 8012668:	4614      	mov	r4, r2
 801266a:	4605      	mov	r5, r0
 801266c:	b118      	cbz	r0, 8012676 <__swbuf_r+0x12>
 801266e:	6a03      	ldr	r3, [r0, #32]
 8012670:	b90b      	cbnz	r3, 8012676 <__swbuf_r+0x12>
 8012672:	f7fc fcbf 	bl	800eff4 <__sinit>
 8012676:	69a3      	ldr	r3, [r4, #24]
 8012678:	60a3      	str	r3, [r4, #8]
 801267a:	89a3      	ldrh	r3, [r4, #12]
 801267c:	071a      	lsls	r2, r3, #28
 801267e:	d501      	bpl.n	8012684 <__swbuf_r+0x20>
 8012680:	6923      	ldr	r3, [r4, #16]
 8012682:	b943      	cbnz	r3, 8012696 <__swbuf_r+0x32>
 8012684:	4621      	mov	r1, r4
 8012686:	4628      	mov	r0, r5
 8012688:	f000 f82a 	bl	80126e0 <__swsetup_r>
 801268c:	b118      	cbz	r0, 8012696 <__swbuf_r+0x32>
 801268e:	f04f 37ff 	mov.w	r7, #4294967295
 8012692:	4638      	mov	r0, r7
 8012694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	b2f6      	uxtb	r6, r6
 801269a:	6922      	ldr	r2, [r4, #16]
 801269c:	4637      	mov	r7, r6
 801269e:	1a98      	subs	r0, r3, r2
 80126a0:	6963      	ldr	r3, [r4, #20]
 80126a2:	4283      	cmp	r3, r0
 80126a4:	dc05      	bgt.n	80126b2 <__swbuf_r+0x4e>
 80126a6:	4621      	mov	r1, r4
 80126a8:	4628      	mov	r0, r5
 80126aa:	f7ff fa57 	bl	8011b5c <_fflush_r>
 80126ae:	2800      	cmp	r0, #0
 80126b0:	d1ed      	bne.n	801268e <__swbuf_r+0x2a>
 80126b2:	68a3      	ldr	r3, [r4, #8]
 80126b4:	3b01      	subs	r3, #1
 80126b6:	60a3      	str	r3, [r4, #8]
 80126b8:	6823      	ldr	r3, [r4, #0]
 80126ba:	1c5a      	adds	r2, r3, #1
 80126bc:	6022      	str	r2, [r4, #0]
 80126be:	701e      	strb	r6, [r3, #0]
 80126c0:	1c43      	adds	r3, r0, #1
 80126c2:	6962      	ldr	r2, [r4, #20]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d004      	beq.n	80126d2 <__swbuf_r+0x6e>
 80126c8:	89a3      	ldrh	r3, [r4, #12]
 80126ca:	07db      	lsls	r3, r3, #31
 80126cc:	d5e1      	bpl.n	8012692 <__swbuf_r+0x2e>
 80126ce:	2e0a      	cmp	r6, #10
 80126d0:	d1df      	bne.n	8012692 <__swbuf_r+0x2e>
 80126d2:	4621      	mov	r1, r4
 80126d4:	4628      	mov	r0, r5
 80126d6:	f7ff fa41 	bl	8011b5c <_fflush_r>
 80126da:	2800      	cmp	r0, #0
 80126dc:	d0d9      	beq.n	8012692 <__swbuf_r+0x2e>
 80126de:	e7d6      	b.n	801268e <__swbuf_r+0x2a>

080126e0 <__swsetup_r>:
 80126e0:	b538      	push	{r3, r4, r5, lr}
 80126e2:	4b29      	ldr	r3, [pc, #164]	@ (8012788 <__swsetup_r+0xa8>)
 80126e4:	4605      	mov	r5, r0
 80126e6:	460c      	mov	r4, r1
 80126e8:	6818      	ldr	r0, [r3, #0]
 80126ea:	b118      	cbz	r0, 80126f4 <__swsetup_r+0x14>
 80126ec:	6a03      	ldr	r3, [r0, #32]
 80126ee:	b90b      	cbnz	r3, 80126f4 <__swsetup_r+0x14>
 80126f0:	f7fc fc80 	bl	800eff4 <__sinit>
 80126f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126f8:	0719      	lsls	r1, r3, #28
 80126fa:	d422      	bmi.n	8012742 <__swsetup_r+0x62>
 80126fc:	06da      	lsls	r2, r3, #27
 80126fe:	d407      	bmi.n	8012710 <__swsetup_r+0x30>
 8012700:	2209      	movs	r2, #9
 8012702:	602a      	str	r2, [r5, #0]
 8012704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012708:	f04f 30ff 	mov.w	r0, #4294967295
 801270c:	81a3      	strh	r3, [r4, #12]
 801270e:	e033      	b.n	8012778 <__swsetup_r+0x98>
 8012710:	0758      	lsls	r0, r3, #29
 8012712:	d512      	bpl.n	801273a <__swsetup_r+0x5a>
 8012714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012716:	b141      	cbz	r1, 801272a <__swsetup_r+0x4a>
 8012718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801271c:	4299      	cmp	r1, r3
 801271e:	d002      	beq.n	8012726 <__swsetup_r+0x46>
 8012720:	4628      	mov	r0, r5
 8012722:	f7fd fc03 	bl	800ff2c <_free_r>
 8012726:	2300      	movs	r3, #0
 8012728:	6363      	str	r3, [r4, #52]	@ 0x34
 801272a:	89a3      	ldrh	r3, [r4, #12]
 801272c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012730:	81a3      	strh	r3, [r4, #12]
 8012732:	2300      	movs	r3, #0
 8012734:	6063      	str	r3, [r4, #4]
 8012736:	6923      	ldr	r3, [r4, #16]
 8012738:	6023      	str	r3, [r4, #0]
 801273a:	89a3      	ldrh	r3, [r4, #12]
 801273c:	f043 0308 	orr.w	r3, r3, #8
 8012740:	81a3      	strh	r3, [r4, #12]
 8012742:	6923      	ldr	r3, [r4, #16]
 8012744:	b94b      	cbnz	r3, 801275a <__swsetup_r+0x7a>
 8012746:	89a3      	ldrh	r3, [r4, #12]
 8012748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801274c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012750:	d003      	beq.n	801275a <__swsetup_r+0x7a>
 8012752:	4621      	mov	r1, r4
 8012754:	4628      	mov	r0, r5
 8012756:	f000 f882 	bl	801285e <__smakebuf_r>
 801275a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801275e:	f013 0201 	ands.w	r2, r3, #1
 8012762:	d00a      	beq.n	801277a <__swsetup_r+0x9a>
 8012764:	2200      	movs	r2, #0
 8012766:	60a2      	str	r2, [r4, #8]
 8012768:	6962      	ldr	r2, [r4, #20]
 801276a:	4252      	negs	r2, r2
 801276c:	61a2      	str	r2, [r4, #24]
 801276e:	6922      	ldr	r2, [r4, #16]
 8012770:	b942      	cbnz	r2, 8012784 <__swsetup_r+0xa4>
 8012772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012776:	d1c5      	bne.n	8012704 <__swsetup_r+0x24>
 8012778:	bd38      	pop	{r3, r4, r5, pc}
 801277a:	0799      	lsls	r1, r3, #30
 801277c:	bf58      	it	pl
 801277e:	6962      	ldrpl	r2, [r4, #20]
 8012780:	60a2      	str	r2, [r4, #8]
 8012782:	e7f4      	b.n	801276e <__swsetup_r+0x8e>
 8012784:	2000      	movs	r0, #0
 8012786:	e7f7      	b.n	8012778 <__swsetup_r+0x98>
 8012788:	20000030 	.word	0x20000030

0801278c <_raise_r>:
 801278c:	291f      	cmp	r1, #31
 801278e:	b538      	push	{r3, r4, r5, lr}
 8012790:	4605      	mov	r5, r0
 8012792:	460c      	mov	r4, r1
 8012794:	d904      	bls.n	80127a0 <_raise_r+0x14>
 8012796:	2316      	movs	r3, #22
 8012798:	6003      	str	r3, [r0, #0]
 801279a:	f04f 30ff 	mov.w	r0, #4294967295
 801279e:	bd38      	pop	{r3, r4, r5, pc}
 80127a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80127a2:	b112      	cbz	r2, 80127aa <_raise_r+0x1e>
 80127a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127a8:	b94b      	cbnz	r3, 80127be <_raise_r+0x32>
 80127aa:	4628      	mov	r0, r5
 80127ac:	f000 f830 	bl	8012810 <_getpid_r>
 80127b0:	4622      	mov	r2, r4
 80127b2:	4601      	mov	r1, r0
 80127b4:	4628      	mov	r0, r5
 80127b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ba:	f000 b817 	b.w	80127ec <_kill_r>
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d00a      	beq.n	80127d8 <_raise_r+0x4c>
 80127c2:	1c59      	adds	r1, r3, #1
 80127c4:	d103      	bne.n	80127ce <_raise_r+0x42>
 80127c6:	2316      	movs	r3, #22
 80127c8:	6003      	str	r3, [r0, #0]
 80127ca:	2001      	movs	r0, #1
 80127cc:	e7e7      	b.n	801279e <_raise_r+0x12>
 80127ce:	2100      	movs	r1, #0
 80127d0:	4620      	mov	r0, r4
 80127d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80127d6:	4798      	blx	r3
 80127d8:	2000      	movs	r0, #0
 80127da:	e7e0      	b.n	801279e <_raise_r+0x12>

080127dc <raise>:
 80127dc:	4b02      	ldr	r3, [pc, #8]	@ (80127e8 <raise+0xc>)
 80127de:	4601      	mov	r1, r0
 80127e0:	6818      	ldr	r0, [r3, #0]
 80127e2:	f7ff bfd3 	b.w	801278c <_raise_r>
 80127e6:	bf00      	nop
 80127e8:	20000030 	.word	0x20000030

080127ec <_kill_r>:
 80127ec:	b538      	push	{r3, r4, r5, lr}
 80127ee:	2300      	movs	r3, #0
 80127f0:	4d06      	ldr	r5, [pc, #24]	@ (801280c <_kill_r+0x20>)
 80127f2:	4604      	mov	r4, r0
 80127f4:	4608      	mov	r0, r1
 80127f6:	4611      	mov	r1, r2
 80127f8:	602b      	str	r3, [r5, #0]
 80127fa:	f7ef ffb3 	bl	8002764 <_kill>
 80127fe:	1c43      	adds	r3, r0, #1
 8012800:	d102      	bne.n	8012808 <_kill_r+0x1c>
 8012802:	682b      	ldr	r3, [r5, #0]
 8012804:	b103      	cbz	r3, 8012808 <_kill_r+0x1c>
 8012806:	6023      	str	r3, [r4, #0]
 8012808:	bd38      	pop	{r3, r4, r5, pc}
 801280a:	bf00      	nop
 801280c:	20013c90 	.word	0x20013c90

08012810 <_getpid_r>:
 8012810:	f7ef bfa0 	b.w	8002754 <_getpid>

08012814 <__swhatbuf_r>:
 8012814:	b570      	push	{r4, r5, r6, lr}
 8012816:	460c      	mov	r4, r1
 8012818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801281c:	b096      	sub	sp, #88	@ 0x58
 801281e:	4615      	mov	r5, r2
 8012820:	2900      	cmp	r1, #0
 8012822:	461e      	mov	r6, r3
 8012824:	da0c      	bge.n	8012840 <__swhatbuf_r+0x2c>
 8012826:	89a3      	ldrh	r3, [r4, #12]
 8012828:	2100      	movs	r1, #0
 801282a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801282e:	bf14      	ite	ne
 8012830:	2340      	movne	r3, #64	@ 0x40
 8012832:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012836:	2000      	movs	r0, #0
 8012838:	6031      	str	r1, [r6, #0]
 801283a:	602b      	str	r3, [r5, #0]
 801283c:	b016      	add	sp, #88	@ 0x58
 801283e:	bd70      	pop	{r4, r5, r6, pc}
 8012840:	466a      	mov	r2, sp
 8012842:	f000 f849 	bl	80128d8 <_fstat_r>
 8012846:	2800      	cmp	r0, #0
 8012848:	dbed      	blt.n	8012826 <__swhatbuf_r+0x12>
 801284a:	9901      	ldr	r1, [sp, #4]
 801284c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012850:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012854:	4259      	negs	r1, r3
 8012856:	4159      	adcs	r1, r3
 8012858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801285c:	e7eb      	b.n	8012836 <__swhatbuf_r+0x22>

0801285e <__smakebuf_r>:
 801285e:	898b      	ldrh	r3, [r1, #12]
 8012860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012862:	079d      	lsls	r5, r3, #30
 8012864:	4606      	mov	r6, r0
 8012866:	460c      	mov	r4, r1
 8012868:	d507      	bpl.n	801287a <__smakebuf_r+0x1c>
 801286a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801286e:	6023      	str	r3, [r4, #0]
 8012870:	6123      	str	r3, [r4, #16]
 8012872:	2301      	movs	r3, #1
 8012874:	6163      	str	r3, [r4, #20]
 8012876:	b003      	add	sp, #12
 8012878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801287a:	ab01      	add	r3, sp, #4
 801287c:	466a      	mov	r2, sp
 801287e:	f7ff ffc9 	bl	8012814 <__swhatbuf_r>
 8012882:	9f00      	ldr	r7, [sp, #0]
 8012884:	4605      	mov	r5, r0
 8012886:	4630      	mov	r0, r6
 8012888:	4639      	mov	r1, r7
 801288a:	f7fd fbc3 	bl	8010014 <_malloc_r>
 801288e:	b948      	cbnz	r0, 80128a4 <__smakebuf_r+0x46>
 8012890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012894:	059a      	lsls	r2, r3, #22
 8012896:	d4ee      	bmi.n	8012876 <__smakebuf_r+0x18>
 8012898:	f023 0303 	bic.w	r3, r3, #3
 801289c:	f043 0302 	orr.w	r3, r3, #2
 80128a0:	81a3      	strh	r3, [r4, #12]
 80128a2:	e7e2      	b.n	801286a <__smakebuf_r+0xc>
 80128a4:	89a3      	ldrh	r3, [r4, #12]
 80128a6:	6020      	str	r0, [r4, #0]
 80128a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128ac:	81a3      	strh	r3, [r4, #12]
 80128ae:	9b01      	ldr	r3, [sp, #4]
 80128b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80128b4:	b15b      	cbz	r3, 80128ce <__smakebuf_r+0x70>
 80128b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128ba:	4630      	mov	r0, r6
 80128bc:	f000 f81e 	bl	80128fc <_isatty_r>
 80128c0:	b128      	cbz	r0, 80128ce <__smakebuf_r+0x70>
 80128c2:	89a3      	ldrh	r3, [r4, #12]
 80128c4:	f023 0303 	bic.w	r3, r3, #3
 80128c8:	f043 0301 	orr.w	r3, r3, #1
 80128cc:	81a3      	strh	r3, [r4, #12]
 80128ce:	89a3      	ldrh	r3, [r4, #12]
 80128d0:	431d      	orrs	r5, r3
 80128d2:	81a5      	strh	r5, [r4, #12]
 80128d4:	e7cf      	b.n	8012876 <__smakebuf_r+0x18>
	...

080128d8 <_fstat_r>:
 80128d8:	b538      	push	{r3, r4, r5, lr}
 80128da:	2300      	movs	r3, #0
 80128dc:	4d06      	ldr	r5, [pc, #24]	@ (80128f8 <_fstat_r+0x20>)
 80128de:	4604      	mov	r4, r0
 80128e0:	4608      	mov	r0, r1
 80128e2:	4611      	mov	r1, r2
 80128e4:	602b      	str	r3, [r5, #0]
 80128e6:	f7ef ff9d 	bl	8002824 <_fstat>
 80128ea:	1c43      	adds	r3, r0, #1
 80128ec:	d102      	bne.n	80128f4 <_fstat_r+0x1c>
 80128ee:	682b      	ldr	r3, [r5, #0]
 80128f0:	b103      	cbz	r3, 80128f4 <_fstat_r+0x1c>
 80128f2:	6023      	str	r3, [r4, #0]
 80128f4:	bd38      	pop	{r3, r4, r5, pc}
 80128f6:	bf00      	nop
 80128f8:	20013c90 	.word	0x20013c90

080128fc <_isatty_r>:
 80128fc:	b538      	push	{r3, r4, r5, lr}
 80128fe:	2300      	movs	r3, #0
 8012900:	4d05      	ldr	r5, [pc, #20]	@ (8012918 <_isatty_r+0x1c>)
 8012902:	4604      	mov	r4, r0
 8012904:	4608      	mov	r0, r1
 8012906:	602b      	str	r3, [r5, #0]
 8012908:	f7ef ff9c 	bl	8002844 <_isatty>
 801290c:	1c43      	adds	r3, r0, #1
 801290e:	d102      	bne.n	8012916 <_isatty_r+0x1a>
 8012910:	682b      	ldr	r3, [r5, #0]
 8012912:	b103      	cbz	r3, 8012916 <_isatty_r+0x1a>
 8012914:	6023      	str	r3, [r4, #0]
 8012916:	bd38      	pop	{r3, r4, r5, pc}
 8012918:	20013c90 	.word	0x20013c90

0801291c <acosf>:
 801291c:	b508      	push	{r3, lr}
 801291e:	ed2d 8b02 	vpush	{d8}
 8012922:	eeb0 8a40 	vmov.f32	s16, s0
 8012926:	f000 f8a5 	bl	8012a74 <__ieee754_acosf>
 801292a:	eef0 8a40 	vmov.f32	s17, s0
 801292e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012936:	d615      	bvs.n	8012964 <acosf+0x48>
 8012938:	eeb0 0a48 	vmov.f32	s0, s16
 801293c:	f000 f838 	bl	80129b0 <fabsf>
 8012940:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012944:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294c:	dd0a      	ble.n	8012964 <acosf+0x48>
 801294e:	f7fc fc3f 	bl	800f1d0 <__errno>
 8012952:	2321      	movs	r3, #33	@ 0x21
 8012954:	ecbd 8b02 	vpop	{d8}
 8012958:	6003      	str	r3, [r0, #0]
 801295a:	4805      	ldr	r0, [pc, #20]	@ (8012970 <acosf+0x54>)
 801295c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012960:	f7fc bc7e 	b.w	800f260 <nanf>
 8012964:	eeb0 0a68 	vmov.f32	s0, s17
 8012968:	ecbd 8b02 	vpop	{d8}
 801296c:	bd08      	pop	{r3, pc}
 801296e:	bf00      	nop
 8012970:	08030389 	.word	0x08030389

08012974 <sqrtf>:
 8012974:	b508      	push	{r3, lr}
 8012976:	ed2d 8b02 	vpush	{d8}
 801297a:	eeb0 8a40 	vmov.f32	s16, s0
 801297e:	f000 f875 	bl	8012a6c <__ieee754_sqrtf>
 8012982:	eeb4 8a48 	vcmp.f32	s16, s16
 8012986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298a:	d60c      	bvs.n	80129a6 <sqrtf+0x32>
 801298c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80129ac <sqrtf+0x38>
 8012990:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012998:	d505      	bpl.n	80129a6 <sqrtf+0x32>
 801299a:	f7fc fc19 	bl	800f1d0 <__errno>
 801299e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80129a2:	2321      	movs	r3, #33	@ 0x21
 80129a4:	6003      	str	r3, [r0, #0]
 80129a6:	ecbd 8b02 	vpop	{d8}
 80129aa:	bd08      	pop	{r3, pc}
 80129ac:	00000000 	.word	0x00000000

080129b0 <fabsf>:
 80129b0:	ee10 3a10 	vmov	r3, s0
 80129b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80129b8:	ee00 3a10 	vmov	s0, r3
 80129bc:	4770      	bx	lr

080129be <fmaxf>:
 80129be:	b508      	push	{r3, lr}
 80129c0:	ed2d 8b02 	vpush	{d8}
 80129c4:	eeb0 8a40 	vmov.f32	s16, s0
 80129c8:	eef0 8a60 	vmov.f32	s17, s1
 80129cc:	f000 f832 	bl	8012a34 <__fpclassifyf>
 80129d0:	b930      	cbnz	r0, 80129e0 <fmaxf+0x22>
 80129d2:	eeb0 8a68 	vmov.f32	s16, s17
 80129d6:	eeb0 0a48 	vmov.f32	s0, s16
 80129da:	ecbd 8b02 	vpop	{d8}
 80129de:	bd08      	pop	{r3, pc}
 80129e0:	eeb0 0a68 	vmov.f32	s0, s17
 80129e4:	f000 f826 	bl	8012a34 <__fpclassifyf>
 80129e8:	2800      	cmp	r0, #0
 80129ea:	d0f4      	beq.n	80129d6 <fmaxf+0x18>
 80129ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80129f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f4:	dded      	ble.n	80129d2 <fmaxf+0x14>
 80129f6:	e7ee      	b.n	80129d6 <fmaxf+0x18>

080129f8 <fminf>:
 80129f8:	b508      	push	{r3, lr}
 80129fa:	ed2d 8b02 	vpush	{d8}
 80129fe:	eeb0 8a40 	vmov.f32	s16, s0
 8012a02:	eef0 8a60 	vmov.f32	s17, s1
 8012a06:	f000 f815 	bl	8012a34 <__fpclassifyf>
 8012a0a:	b930      	cbnz	r0, 8012a1a <fminf+0x22>
 8012a0c:	eeb0 8a68 	vmov.f32	s16, s17
 8012a10:	eeb0 0a48 	vmov.f32	s0, s16
 8012a14:	ecbd 8b02 	vpop	{d8}
 8012a18:	bd08      	pop	{r3, pc}
 8012a1a:	eeb0 0a68 	vmov.f32	s0, s17
 8012a1e:	f000 f809 	bl	8012a34 <__fpclassifyf>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	d0f4      	beq.n	8012a10 <fminf+0x18>
 8012a26:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2e:	d5ed      	bpl.n	8012a0c <fminf+0x14>
 8012a30:	e7ee      	b.n	8012a10 <fminf+0x18>
	...

08012a34 <__fpclassifyf>:
 8012a34:	ee10 3a10 	vmov	r3, s0
 8012a38:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8012a3c:	d00d      	beq.n	8012a5a <__fpclassifyf+0x26>
 8012a3e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012a42:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012a46:	d30a      	bcc.n	8012a5e <__fpclassifyf+0x2a>
 8012a48:	1e42      	subs	r2, r0, #1
 8012a4a:	4b07      	ldr	r3, [pc, #28]	@ (8012a68 <__fpclassifyf+0x34>)
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d908      	bls.n	8012a62 <__fpclassifyf+0x2e>
 8012a50:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012a54:	4258      	negs	r0, r3
 8012a56:	4158      	adcs	r0, r3
 8012a58:	4770      	bx	lr
 8012a5a:	2002      	movs	r0, #2
 8012a5c:	4770      	bx	lr
 8012a5e:	2004      	movs	r0, #4
 8012a60:	4770      	bx	lr
 8012a62:	2003      	movs	r0, #3
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop
 8012a68:	007ffffe 	.word	0x007ffffe

08012a6c <__ieee754_sqrtf>:
 8012a6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012a70:	4770      	bx	lr
	...

08012a74 <__ieee754_acosf>:
 8012a74:	b508      	push	{r3, lr}
 8012a76:	ee10 3a10 	vmov	r3, s0
 8012a7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012a7e:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012a82:	ed2d 8b0c 	vpush	{d8-d13}
 8012a86:	d109      	bne.n	8012a9c <__ieee754_acosf+0x28>
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8012c1c <__ieee754_acosf+0x1a8>
 8012a8e:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8012c20 <__ieee754_acosf+0x1ac>
 8012a92:	fe37 0a80 	vselgt.f32	s0, s15, s0
 8012a96:	ecbd 8b0c 	vpop	{d8-d13}
 8012a9a:	bd08      	pop	{r3, pc}
 8012a9c:	d904      	bls.n	8012aa8 <__ieee754_acosf+0x34>
 8012a9e:	ee30 8a40 	vsub.f32	s16, s0, s0
 8012aa2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012aa6:	e7f6      	b.n	8012a96 <__ieee754_acosf+0x22>
 8012aa8:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8012aac:	d23c      	bcs.n	8012b28 <__ieee754_acosf+0xb4>
 8012aae:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8012ab2:	f240 80af 	bls.w	8012c14 <__ieee754_acosf+0x1a0>
 8012ab6:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012aba:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8012c24 <__ieee754_acosf+0x1b0>
 8012abe:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8012c28 <__ieee754_acosf+0x1b4>
 8012ac2:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8012c2c <__ieee754_acosf+0x1b8>
 8012ac6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012aca:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8012c30 <__ieee754_acosf+0x1bc>
 8012ace:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012ad2:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8012c34 <__ieee754_acosf+0x1c0>
 8012ad6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ada:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8012c38 <__ieee754_acosf+0x1c4>
 8012ade:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012ae2:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8012c3c <__ieee754_acosf+0x1c8>
 8012ae6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012aea:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8012c40 <__ieee754_acosf+0x1cc>
 8012aee:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8012af2:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8012c44 <__ieee754_acosf+0x1d0>
 8012af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012afa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012afe:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8012c48 <__ieee754_acosf+0x1d4>
 8012b02:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012b0a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012b0e:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8012c4c <__ieee754_acosf+0x1d8>
 8012b12:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8012b16:	eee0 7a46 	vfms.f32	s15, s0, s12
 8012b1a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012b1e:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8012c50 <__ieee754_acosf+0x1dc>
 8012b22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b26:	e7b6      	b.n	8012a96 <__ieee754_acosf+0x22>
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8012b2e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012b32:	eddf da3c 	vldr	s27, [pc, #240]	@ 8012c24 <__ieee754_acosf+0x1b0>
 8012b36:	eddf ca3c 	vldr	s25, [pc, #240]	@ 8012c28 <__ieee754_acosf+0x1b4>
 8012b3a:	ed9f ca3d 	vldr	s24, [pc, #244]	@ 8012c30 <__ieee754_acosf+0x1bc>
 8012b3e:	eddf ba3d 	vldr	s23, [pc, #244]	@ 8012c34 <__ieee754_acosf+0x1c0>
 8012b42:	ed9f ba3d 	vldr	s22, [pc, #244]	@ 8012c38 <__ieee754_acosf+0x1c4>
 8012b46:	eddf 8a3d 	vldr	s17, [pc, #244]	@ 8012c3c <__ieee754_acosf+0x1c8>
 8012b4a:	ed9f da3d 	vldr	s26, [pc, #244]	@ 8012c40 <__ieee754_acosf+0x1cc>
 8012b4e:	eddf aa37 	vldr	s21, [pc, #220]	@ 8012c2c <__ieee754_acosf+0x1b8>
 8012b52:	ed9f aa3c 	vldr	s20, [pc, #240]	@ 8012c44 <__ieee754_acosf+0x1d0>
 8012b56:	eddf 9a3c 	vldr	s19, [pc, #240]	@ 8012c48 <__ieee754_acosf+0x1d4>
 8012b5a:	da28      	bge.n	8012bae <__ieee754_acosf+0x13a>
 8012b5c:	ee30 8a09 	vadd.f32	s16, s0, s18
 8012b60:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012b64:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8012b68:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8012b6c:	eeac ca80 	vfma.f32	s24, s25, s0
 8012b70:	eeaa aa80 	vfma.f32	s20, s21, s0
 8012b74:	eeec ba00 	vfma.f32	s23, s24, s0
 8012b78:	eeea 9a00 	vfma.f32	s19, s20, s0
 8012b7c:	eeab ba80 	vfma.f32	s22, s23, s0
 8012b80:	eea9 9a80 	vfma.f32	s18, s19, s0
 8012b84:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8012b88:	ee68 8a80 	vmul.f32	s17, s17, s0
 8012b8c:	f7ff ff6e 	bl	8012a6c <__ieee754_sqrtf>
 8012b90:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8012c54 <__ieee754_acosf+0x1e0>
 8012b94:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8012b98:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012b9c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8012ba0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012ba4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8012c58 <__ieee754_acosf+0x1e4>
 8012ba8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012bac:	e773      	b.n	8012a96 <__ieee754_acosf+0x22>
 8012bae:	ee39 8a40 	vsub.f32	s16, s18, s0
 8012bb2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8012bba:	f7ff ff57 	bl	8012a6c <__ieee754_sqrtf>
 8012bbe:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8012bc2:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8012bc6:	ee10 3a10 	vmov	r3, s0
 8012bca:	eeb0 6a48 	vmov.f32	s12, s16
 8012bce:	f36f 030b 	bfc	r3, #0, #12
 8012bd2:	ee07 3a90 	vmov	s15, r3
 8012bd6:	eeac ca88 	vfma.f32	s24, s25, s16
 8012bda:	eeaa aa88 	vfma.f32	s20, s21, s16
 8012bde:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8012be2:	ee70 6a27 	vadd.f32	s13, s0, s15
 8012be6:	eeec ba08 	vfma.f32	s23, s24, s16
 8012bea:	eeea 9a08 	vfma.f32	s19, s20, s16
 8012bee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012bf2:	eeab ba88 	vfma.f32	s22, s23, s16
 8012bf6:	eea9 9a88 	vfma.f32	s18, s19, s16
 8012bfa:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8012bfe:	ee68 8a88 	vmul.f32	s17, s17, s16
 8012c02:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8012c06:	eea0 7a26 	vfma.f32	s14, s0, s13
 8012c0a:	ee37 0a87 	vadd.f32	s0, s15, s14
 8012c0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c12:	e740      	b.n	8012a96 <__ieee754_acosf+0x22>
 8012c14:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8012c5c <__ieee754_acosf+0x1e8>
 8012c18:	e73d      	b.n	8012a96 <__ieee754_acosf+0x22>
 8012c1a:	bf00      	nop
 8012c1c:	40490fdb 	.word	0x40490fdb
 8012c20:	00000000 	.word	0x00000000
 8012c24:	3811ef08 	.word	0x3811ef08
 8012c28:	3a4f7f04 	.word	0x3a4f7f04
 8012c2c:	bf303361 	.word	0xbf303361
 8012c30:	bd241146 	.word	0xbd241146
 8012c34:	3e4e0aa8 	.word	0x3e4e0aa8
 8012c38:	bea6b090 	.word	0xbea6b090
 8012c3c:	3e2aaaab 	.word	0x3e2aaaab
 8012c40:	3d9dc62e 	.word	0x3d9dc62e
 8012c44:	4001572d 	.word	0x4001572d
 8012c48:	c019d139 	.word	0xc019d139
 8012c4c:	33a22168 	.word	0x33a22168
 8012c50:	3fc90fda 	.word	0x3fc90fda
 8012c54:	b3a22168 	.word	0xb3a22168
 8012c58:	40490fda 	.word	0x40490fda
 8012c5c:	3fc90fdb 	.word	0x3fc90fdb

08012c60 <_init>:
 8012c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c62:	bf00      	nop
 8012c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c66:	bc08      	pop	{r3}
 8012c68:	469e      	mov	lr, r3
 8012c6a:	4770      	bx	lr

08012c6c <_fini>:
 8012c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c6e:	bf00      	nop
 8012c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c72:	bc08      	pop	{r3}
 8012c74:	469e      	mov	lr, r3
 8012c76:	4770      	bx	lr
