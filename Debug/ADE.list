
ADE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012480  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d999  080126b8  080126b8  000136b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08030054  08030054  00031054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803005c  0803005c  0003105c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08030060  08030060  00031060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  08030064  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00013a14  200001ec  08030250  000321ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20013c00  08030250  00032c00  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000321ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003422f  00000000  00000000  00032222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005cde  00000000  00000000  00066451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fd8  00000000  00000000  0006c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000178d  00000000  00000000  0006e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003968d  00000000  00000000  0006f895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002cbf7  00000000  00000000  000a8f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016589b  00000000  00000000  000d5b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000bc  00000000  00000000  0023b3b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009c58  00000000  00000000  0023b470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  002450c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00003a0c  00000000  00000000  00245128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000000e0  00000000  00000000  00248b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001ec 	.word	0x200001ec
 8000254:	00000000 	.word	0x00000000
 8000258:	080126a0 	.word	0x080126a0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f0 	.word	0x200001f0
 8000274:	080126a0 	.word	0x080126a0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800107e:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <MX_ADC1_Init+0x84>)
 8001080:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010e6:	f002 f80f 	bl	8003108 <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f000 ff7e 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000208 	.word	0x20000208
 80010fc:	42028000 	.word	0x42028000

08001100 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ba      	sub	sp, #232	@ 0xe8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	22c0      	movs	r2, #192	@ 0xc0
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f00d fd20 	bl	800eb66 <memset>
  if(adcHandle->Instance==ADC1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_ADC_MspInit+0xbc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d140      	bne.n	80011b2 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001130:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800113c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f006 f901 	bl	8007350 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001154:	f000 ff4c 	bl	8001ff0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800115a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001160:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001164:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800116a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800116e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800117c:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_ADC_MspInit+0xc4>)
 80011ae:	f004 fa2b 	bl	8005608 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	37e8      	adds	r7, #232	@ 0xe8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	42028000 	.word	0x42028000
 80011c0:	46020c00 	.word	0x46020c00
 80011c4:	42020800 	.word	0x42020800

080011c8 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_GPDMA1_Init+0x5c>)
 80011d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d4:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_GPDMA1_Init+0x5c>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_GPDMA1_Init+0x5c>)
 80011e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2055      	movs	r0, #85	@ 0x55
 80011f2:	f002 fb0b 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 80011f6:	2055      	movs	r0, #85	@ 0x55
 80011f8:	f002 fb22 	bl	8003840 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel14_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2056      	movs	r0, #86	@ 0x56
 8001202:	f002 fb03 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel14_IRQn);
 8001206:	2056      	movs	r0, #86	@ 0x56
 8001208:	f002 fb1a 	bl	8003840 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel15_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2057      	movs	r0, #87	@ 0x57
 8001212:	f002 fafb 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel15_IRQn);
 8001216:	2057      	movs	r0, #87	@ 0x57
 8001218:	f002 fb12 	bl	8003840 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	46020c00 	.word	0x46020c00

08001228 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	@ 0x30
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	4b5e      	ldr	r3, [pc, #376]	@ (80013b8 <MX_GPIO_Init+0x190>)
 8001240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001244:	4a5c      	ldr	r2, [pc, #368]	@ (80013b8 <MX_GPIO_Init+0x190>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800124e:	4b5a      	ldr	r3, [pc, #360]	@ (80013b8 <MX_GPIO_Init+0x190>)
 8001250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125c:	4b56      	ldr	r3, [pc, #344]	@ (80013b8 <MX_GPIO_Init+0x190>)
 800125e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001262:	4a55      	ldr	r2, [pc, #340]	@ (80013b8 <MX_GPIO_Init+0x190>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800126c:	4b52      	ldr	r3, [pc, #328]	@ (80013b8 <MX_GPIO_Init+0x190>)
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127a:	4b4f      	ldr	r3, [pc, #316]	@ (80013b8 <MX_GPIO_Init+0x190>)
 800127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001280:	4a4d      	ldr	r2, [pc, #308]	@ (80013b8 <MX_GPIO_Init+0x190>)
 8001282:	f043 0320 	orr.w	r3, r3, #32
 8001286:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800128a:	4b4b      	ldr	r3, [pc, #300]	@ (80013b8 <MX_GPIO_Init+0x190>)
 800128c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001298:	4b47      	ldr	r3, [pc, #284]	@ (80013b8 <MX_GPIO_Init+0x190>)
 800129a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129e:	4a46      	ldr	r2, [pc, #280]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a8:	4b43      	ldr	r3, [pc, #268]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b40      	ldr	r3, [pc, #256]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012bc:	4a3e      	ldr	r2, [pc, #248]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012c6:	4b3c      	ldr	r3, [pc, #240]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d4:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012da:	4a37      	ldr	r2, [pc, #220]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012e4:	4b34      	ldr	r3, [pc, #208]	@ (80013b8 <MX_GPIO_Init+0x190>)
 80012e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2104      	movs	r1, #4
 80012f6:	4831      	ldr	r0, [pc, #196]	@ (80013bc <MX_GPIO_Init+0x194>)
 80012f8:	f004 fb5e 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m3_lr_sel_GPIO_Port, m3_lr_sel_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2101      	movs	r1, #1
 8001300:	482f      	ldr	r0, [pc, #188]	@ (80013c0 <MX_GPIO_Init+0x198>)
 8001302:	f004 fb59 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m2_lr_sel_Pin|led_blue_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2184      	movs	r1, #132	@ 0x84
 800130a:	482e      	ldr	r0, [pc, #184]	@ (80013c4 <MX_GPIO_Init+0x19c>)
 800130c:	f004 fb54 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2180      	movs	r1, #128	@ 0x80
 8001314:	482c      	ldr	r0, [pc, #176]	@ (80013c8 <MX_GPIO_Init+0x1a0>)
 8001316:	f004 fb4f 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m4_lr_sel_GPIO_Port, m4_lr_sel_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	482b      	ldr	r0, [pc, #172]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 8001320:	f004 fb4a 	bl	80059b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : m1_lr_sel_Pin */
  GPIO_InitStruct.Pin = m1_lr_sel_Pin;
 8001324:	2304      	movs	r3, #4
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(m1_lr_sel_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4820      	ldr	r0, [pc, #128]	@ (80013bc <MX_GPIO_Init+0x194>)
 800133c:	f004 f964 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : m3_lr_sel_Pin */
  GPIO_InitStruct.Pin = m3_lr_sel_Pin;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(m3_lr_sel_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	481a      	ldr	r0, [pc, #104]	@ (80013c0 <MX_GPIO_Init+0x198>)
 8001358:	f004 f956 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pins : m2_lr_sel_Pin led_blue_Pin */
  GPIO_InitStruct.Pin = m2_lr_sel_Pin|led_blue_Pin;
 800135c:	2384      	movs	r3, #132	@ 0x84
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4814      	ldr	r0, [pc, #80]	@ (80013c4 <MX_GPIO_Init+0x19c>)
 8001374:	f004 f948 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_green_Pin */
  GPIO_InitStruct.Pin = led_green_Pin;
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(led_green_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	480e      	ldr	r0, [pc, #56]	@ (80013c8 <MX_GPIO_Init+0x1a0>)
 8001390:	f004 f93a 	bl	8005608 <HAL_GPIO_Init>

  /*Configure GPIO pin : m4_lr_sel_Pin */
  GPIO_InitStruct.Pin = m4_lr_sel_Pin;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(m4_lr_sel_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4808      	ldr	r0, [pc, #32]	@ (80013cc <MX_GPIO_Init+0x1a4>)
 80013ac:	f004 f92c 	bl	8005608 <HAL_GPIO_Init>

}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	@ 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	46020c00 	.word	0x46020c00
 80013bc:	42021000 	.word	0x42021000
 80013c0:	42021400 	.word	0x42021400
 80013c4:	42020400 	.word	0x42020400
 80013c8:	42020800 	.word	0x42020800
 80013cc:	42020c00 	.word	0x42020c00

080013d0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80013d4:	2000      	movs	r0, #0
 80013d6:	f004 fb8b 	bl	8005af0 <HAL_ICACHE_ConfigAssociativityMode>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80013e0:	f000 fe06 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80013e4:	f004 fba4 	bl	8005b30 <HAL_ICACHE_Enable>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80013ee:	f000 fdff 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f001 fd12 	bl	8002e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001400:	f000 f919 	bl	8001636 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001404:	f000 f880 	bl	8001508 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001408:	f000 f8e2 	bl	80015d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140c:	f7ff ff0c 	bl	8001228 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001410:	f7ff feda 	bl	80011c8 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8001414:	f7ff ffdc 	bl	80013d0 <MX_ICACHE_Init>
  MX_SAI1_Init();
 8001418:	f000 fdf0 	bl	8001ffc <MX_SAI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 800141c:	f001 faf6 	bl	8002a0c <MX_USB_OTG_FS_HCD_Init>
  MX_USART1_UART_Init();
 8001420:	f001 f9ee 	bl	8002800 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001424:	f7ff fe28 	bl	8001078 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  if (arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001428:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800142c:	482b      	ldr	r0, [pc, #172]	@ (80014dc <main+0xe4>)
 800142e:	f00b fc29 	bl	800cc84 <arm_rfft_fast_init_f32>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <main+0x4a>
    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);  
 8001438:	2201      	movs	r2, #1
 800143a:	2180      	movs	r1, #128	@ 0x80
 800143c:	4828      	ldr	r0, [pc, #160]	@ (80014e0 <main+0xe8>)
 800143e:	f004 fabb 	bl	80059b8 <HAL_GPIO_WritePin>
  }

    // Start SAI audio capture for BOTH blocks

  if (HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)sai_a_dma_buffer, SAI_RX_BUFFER_SIZE * 2) != HAL_OK) {
 8001442:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001446:	4927      	ldr	r1, [pc, #156]	@ (80014e4 <main+0xec>)
 8001448:	4827      	ldr	r0, [pc, #156]	@ (80014e8 <main+0xf0>)
 800144a:	f008 febf 	bl	800a1cc <HAL_SAI_Receive_DMA>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <main+0x66>
      HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_SET);  
 8001454:	2201      	movs	r2, #1
 8001456:	2180      	movs	r1, #128	@ 0x80
 8001458:	4824      	ldr	r0, [pc, #144]	@ (80014ec <main+0xf4>)
 800145a:	f004 faad 	bl	80059b8 <HAL_GPIO_WritePin>
  }


   if (HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t*)sai_b_dma_buffer, SAI_RX_BUFFER_SIZE * 2) != HAL_OK) {
 800145e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001462:	4923      	ldr	r1, [pc, #140]	@ (80014f0 <main+0xf8>)
 8001464:	4823      	ldr	r0, [pc, #140]	@ (80014f4 <main+0xfc>)
 8001466:	f008 feb1 	bl	800a1cc <HAL_SAI_Receive_DMA>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d004      	beq.n	800147a <main+0x82>
       HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	481d      	ldr	r0, [pc, #116]	@ (80014ec <main+0xf4>)
 8001476:	f004 fa9f 	bl	80059b8 <HAL_GPIO_WritePin>
   }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800147a:	2000      	movs	r0, #0
 800147c:	f001 fba2 	bl	8002bc4 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8001480:	2001      	movs	r0, #1
 8001482:	f001 fb9f 	bl	8002bc4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001486:	2002      	movs	r0, #2
 8001488:	f001 fb9c 	bl	8002bc4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800148c:	2101      	movs	r1, #1
 800148e:	2000      	movs	r0, #0
 8001490:	f001 fc28 	bl	8002ce4 <BSP_PB_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Set Mics SAI1 A Left and Right
  // TODO: add m3 and m4
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, MIC_1);
 8001494:	2200      	movs	r2, #0
 8001496:	2104      	movs	r1, #4
 8001498:	4817      	ldr	r0, [pc, #92]	@ (80014f8 <main+0x100>)
 800149a:	f004 fa8d 	bl	80059b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m2_lr_sel_GPIO_Port, m2_lr_sel_Pin, MIC_2);
 800149e:	2201      	movs	r2, #1
 80014a0:	2104      	movs	r1, #4
 80014a2:	480f      	ldr	r0, [pc, #60]	@ (80014e0 <main+0xe8>)
 80014a4:	f004 fa88 	bl	80059b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m3_lr_sel_GPIO_Port, m3_lr_sel_Pin, MIC_3);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2101      	movs	r1, #1
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <main+0x104>)
 80014ae:	f004 fa83 	bl	80059b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m4_lr_sel_GPIO_Port, m4_lr_sel_Pin, MIC_4);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2101      	movs	r1, #1
 80014b6:	4812      	ldr	r0, [pc, #72]	@ (8001500 <main+0x108>)
 80014b8:	f004 fa7e 	bl	80059b8 <HAL_GPIO_WritePin>
  
  while (1)
  {

    if (data_ready_flags) {
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <main+0x10c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0fa      	beq.n	80014bc <main+0xc4>

    	// Taking 18 ms to process
        process_audio_data();
 80014c6:	f000 f8c5 	bl	8001654 <process_audio_data>
        HAL_GPIO_TogglePin(led_green_GPIO_Port, led_green_Pin); // Indicate processing done
 80014ca:	2180      	movs	r1, #128	@ 0x80
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <main+0xf4>)
 80014ce:	f004 fa8b 	bl	80059e8 <HAL_GPIO_TogglePin>
        
        // Reset flag after processing
        data_ready_flags = 0;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <main+0x10c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
    if (data_ready_flags) {
 80014d8:	e7f0      	b.n	80014bc <main+0xc4>
 80014da:	bf00      	nop
 80014dc:	20010294 	.word	0x20010294
 80014e0:	42020400 	.word	0x42020400
 80014e4:	20000294 	.word	0x20000294
 80014e8:	200132cc 	.word	0x200132cc
 80014ec:	42020800 	.word	0x42020800
 80014f0:	20004294 	.word	0x20004294
 80014f4:	20013364 	.word	0x20013364
 80014f8:	42021000 	.word	0x42021000
 80014fc:	42021400 	.word	0x42021400
 8001500:	42020c00 	.word	0x42020c00
 8001504:	200102ac 	.word	0x200102ac

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b09e      	sub	sp, #120	@ 0x78
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2260      	movs	r2, #96	@ 0x60
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00d fb25 	bl	800eb66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800152c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001530:	f004 fb0e 	bl	8005b50 <HAL_PWREx_ControlVoltageScaling>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800153a:	f000 fd59 	bl	8001ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800153e:	2332      	movs	r3, #50	@ 0x32
 8001540:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154e:	2310      	movs	r3, #16
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001552:	2301      	movs	r3, #1
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001556:	2310      	movs	r3, #16
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800155a:	2300      	movs	r3, #0
 800155c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001562:	2301      	movs	r3, #1
 8001564:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800156c:	2303      	movs	r3, #3
 800156e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001570:	2308      	movs	r3, #8
 8001572:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001574:	2302      	movs	r3, #2
 8001576:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001578:	2302      	movs	r3, #2
 800157a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001580:	230c      	movs	r3, #12
 8001582:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	4618      	mov	r0, r3
 800158e:	f004 fbfb 	bl	8005d88 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001598:	f000 fd2a 	bl	8001ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	231f      	movs	r3, #31
 800159e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2303      	movs	r3, #3
 80015a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	2103      	movs	r1, #3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f005 fac1 	bl	8006b40 <HAL_RCC_ClockConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015c4:	f000 fd14 	bl	8001ff0 <Error_Handler>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3778      	adds	r7, #120	@ 0x78
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b0      	sub	sp, #192	@ 0xc0
 80015d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d6:	463b      	mov	r3, r7
 80015d8:	22c0      	movs	r2, #192	@ 0xc0
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00d fac2 	bl	800eb66 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80015e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 80015f4:	2301      	movs	r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 3;
 80015f8:	2303      	movs	r3, #3
 80015fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 15;
 80015fc:	230f      	movs	r3, #15
 80015fe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8001600:	2302      	movs	r3, #2
 8001602:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 2;
 8001604:	2302      	movs	r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 800160c:	230c      	movs	r3, #12
 800160e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 2048;
 8001610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 8001616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4618      	mov	r0, r3
 8001620:	f005 fe96 	bl	8007350 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800162a:	f000 fce1 	bl	8001ff0 <Error_Handler>
  }
}
 800162e:	bf00      	nop
 8001630:	37c0      	adds	r7, #192	@ 0xc0
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800163a:	f004 fb95 	bl	8005d68 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800163e:	2002      	movs	r0, #2
 8001640:	f004 fb12 	bl	8005c68 <HAL_PWREx_ConfigSupply>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800164a:	f000 fcd1 	bl	8001ff0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <process_audio_data>:
/**
  * @brief  Processes a block of audio data to calculate sound direction.
  * @retval None
  */
void process_audio_data(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	f5ad 5d40 	sub.w	sp, sp, #12288	@ 0x3000
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
    float32_t all_correlation_outputs[NUM_PAIRS][FFT_SIZE];

//    SCB_InvalidateDCache_by_Addr((uint32_t*)processing_ptr_a, SAI_RX_BUFFER_SIZE * sizeof(int32_t));
//    SCB_InvalidateDCache_by_Addr((uint32_t*)processing_ptr_b, SAI_RX_BUFFER_SIZE * sizeof(int32_t));

    for (int i = 0; i < FFT_SIZE; i++) {
 800165e:	2300      	movs	r3, #0
 8001660:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001664:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e076      	b.n	800175a <process_audio_data+0x106>
        mic_buffers[0][i] = (float32_t)(processing_ptr_a[i * 2] >> 8);
 800166c:	4bc1      	ldr	r3, [pc, #772]	@ (8001974 <process_audio_data+0x320>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001674:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	121b      	asrs	r3, r3, #8
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168a:	4abb      	ldr	r2, [pc, #748]	@ (8001978 <process_audio_data+0x324>)
 800168c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001690:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	edc3 7a00 	vstr	s15, [r3]
        mic_buffers[1][i] = (float32_t)(processing_ptr_a[i * 2 + 1] >> 8);
 800169e:	4bb5      	ldr	r3, [pc, #724]	@ (8001974 <process_audio_data+0x320>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80016a6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	3304      	adds	r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	121b      	asrs	r3, r3, #8
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016be:	4aae      	ldr	r2, [pc, #696]	@ (8001978 <process_audio_data+0x324>)
 80016c0:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80016c4:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	edc3 7a00 	vstr	s15, [r3]
        mic_buffers[2][i] = (float32_t)(processing_ptr_b[i * 2] >> 8);
 80016d6:	4ba9      	ldr	r3, [pc, #676]	@ (800197c <process_audio_data+0x328>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80016de:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	121b      	asrs	r3, r3, #8
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f4:	4aa0      	ldr	r2, [pc, #640]	@ (8001978 <process_audio_data+0x324>)
 80016f6:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80016fa:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	edc3 7a00 	vstr	s15, [r3]
        mic_buffers[3][i] = (float32_t)(processing_ptr_b[i * 2 + 1] >> 8);
 800170c:	4b9b      	ldr	r3, [pc, #620]	@ (800197c <process_audio_data+0x328>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001714:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	3304      	adds	r3, #4
 800171e:	4413      	add	r3, r2
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	121b      	asrs	r3, r3, #8
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172c:	4a92      	ldr	r2, [pc, #584]	@ (8001978 <process_audio_data+0x324>)
 800172e:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001732:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < FFT_SIZE; i++) {
 8001744:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001748:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001754:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800175e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001768:	db80      	blt.n	800166c <process_audio_data+0x18>
    }

    int16_t lags[NUM_PAIRS];
    lags[0] = calculate_tdoa_lag(mic_buffers[0], mic_buffers[1], all_correlation_outputs[0]);
 800176a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800176e:	3b14      	subs	r3, #20
 8001770:	461a      	mov	r2, r3
 8001772:	4983      	ldr	r1, [pc, #524]	@ (8001980 <process_audio_data+0x32c>)
 8001774:	4880      	ldr	r0, [pc, #512]	@ (8001978 <process_audio_data+0x324>)
 8001776:	f000 f9cf 	bl	8001b18 <calculate_tdoa_lag>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001782:	f823 2c1c 	strh.w	r2, [r3, #-28]
    lags[1] = calculate_tdoa_lag(mic_buffers[1], mic_buffers[2], all_correlation_outputs[1]);
 8001786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178a:	3b14      	subs	r3, #20
 800178c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001790:	461a      	mov	r2, r3
 8001792:	497c      	ldr	r1, [pc, #496]	@ (8001984 <process_audio_data+0x330>)
 8001794:	487a      	ldr	r0, [pc, #488]	@ (8001980 <process_audio_data+0x32c>)
 8001796:	f000 f9bf 	bl	8001b18 <calculate_tdoa_lag>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a2:	f823 2c1a 	strh.w	r2, [r3, #-26]
    lags[2] = calculate_tdoa_lag(mic_buffers[2], mic_buffers[3], all_correlation_outputs[2]);
 80017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017aa:	3b14      	subs	r3, #20
 80017ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80017b0:	461a      	mov	r2, r3
 80017b2:	4975      	ldr	r1, [pc, #468]	@ (8001988 <process_audio_data+0x334>)
 80017b4:	4873      	ldr	r0, [pc, #460]	@ (8001984 <process_audio_data+0x330>)
 80017b6:	f000 f9af 	bl	8001b18 <calculate_tdoa_lag>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	f823 2c18 	strh.w	r2, [r3, #-24]

    float32_t angles[NUM_PAIRS];
    float32_t angle_sum = 0.0f;
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80017ce:	f102 0220 	add.w	r2, r2, #32
 80017d2:	6013      	str	r3, [r2, #0]
    uint8_t valid_pairs = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80017da:	f102 021f 	add.w	r2, r2, #31
 80017de:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < NUM_PAIRS; i++) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80017e6:	f102 0218 	add.w	r2, r2, #24
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e076      	b.n	80018dc <process_audio_data+0x288>
        angles[i] = calculate_angle_from_lag(lags[i], MIC_ADJACENT_DISTANCE);
 80017ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017f2:	461a      	mov	r2, r3
 80017f4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80017f8:	f103 0318 	add.w	r3, r3, #24
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8001806:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 800198c <process_audio_data+0x338>
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f924 	bl	8001a58 <calculate_angle_from_lag>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
 8001814:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001818:	461a      	mov	r2, r3
 800181a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800181e:	f103 0318 	add.w	r3, r3, #24
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b28      	subs	r3, #40	@ 0x28
 800182a:	edc3 7a00 	vstr	s15, [r3]
        if (angles[i] > 0.0f && angles[i] < 180.0f) {
 800182e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001832:	461a      	mov	r2, r3
 8001834:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001838:	f103 0318 	add.w	r3, r3, #24
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b28      	subs	r3, #40	@ 0x28
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	dd39      	ble.n	80018c6 <process_audio_data+0x272>
 8001852:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001856:	461a      	mov	r2, r3
 8001858:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800185c:	f103 0318 	add.w	r3, r3, #24
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	3b28      	subs	r3, #40	@ 0x28
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001990 <process_audio_data+0x33c>
 8001870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	d525      	bpl.n	80018c6 <process_audio_data+0x272>
             angle_sum += angles[i];
 800187a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800187e:	461a      	mov	r2, r3
 8001880:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001884:	f103 0318 	add.w	r3, r3, #24
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	3b28      	subs	r3, #40	@ 0x28
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001898:	f103 0320 	add.w	r3, r3, #32
 800189c:	ed93 7a00 	vldr	s14, [r3]
 80018a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018a8:	f103 0320 	add.w	r3, r3, #32
 80018ac:	edc3 7a00 	vstr	s15, [r3]
             valid_pairs++;
 80018b0:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018b4:	f103 031f 	add.w	r3, r3, #31
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80018c0:	f102 021f 	add.w	r2, r2, #31
 80018c4:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < NUM_PAIRS; i++) {
 80018c6:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018ca:	f103 0318 	add.w	r3, r3, #24
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80018d6:	f102 0218 	add.w	r2, r2, #24
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018e0:	f103 0318 	add.w	r3, r3, #24
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	dd81      	ble.n	80017ee <process_audio_data+0x19a>
        }
    }
    
    float32_t average_angle = (valid_pairs > 0) ? (angle_sum / valid_pairs) : 0.0f;
 80018ea:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018ee:	f103 031f 	add.w	r3, r3, #31
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d011      	beq.n	800191c <process_audio_data+0x2c8>
 80018f8:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80018fc:	f103 031f 	add.w	r3, r3, #31
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800190e:	f103 0320 	add.w	r3, r3, #32
 8001912:	edd3 6a00 	vldr	s13, [r3]
 8001916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800191a:	e001      	b.n	8001920 <process_audio_data+0x2cc>
 800191c:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8001994 <process_audio_data+0x340>
 8001920:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001924:	f103 0314 	add.w	r3, r3, #20
 8001928:	edc3 7a00 	vstr	s15, [r3]
    
    // Check if it's time to transmit
    tx_cycle_counter++;
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <process_audio_data+0x344>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <process_audio_data+0x344>)
 8001936:	701a      	strb	r2, [r3, #0]
    if (tx_cycle_counter >= UART_TX_CYCLE_INTERVAL) {
 8001938:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <process_audio_data+0x344>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b04      	cmp	r3, #4
 800193e:	d912      	bls.n	8001966 <process_audio_data+0x312>
        transmit_uart_data(average_angle, lags, all_correlation_outputs);
 8001940:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001944:	3a14      	subs	r2, #20
 8001946:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800194a:	3b1c      	subs	r3, #28
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001954:	f103 0314 	add.w	r3, r3, #20
 8001958:	ed93 0a00 	vldr	s0, [r3]
 800195c:	f000 f81e 	bl	800199c <transmit_uart_data>
        tx_cycle_counter = 0; // Reset counter
 8001960:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <process_audio_data+0x344>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    }
}
 8001966:	bf00      	nop
 8001968:	f507 5740 	add.w	r7, r7, #12288	@ 0x3000
 800196c:	3728      	adds	r7, #40	@ 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200102b0 	.word	0x200102b0
 8001978:	20008294 	.word	0x20008294
 800197c:	200102b4 	.word	0x200102b4
 8001980:	20009294 	.word	0x20009294
 8001984:	2000a294 	.word	0x2000a294
 8001988:	2000b294 	.word	0x2000b294
 800198c:	3d0f5c29 	.word	0x3d0f5c29
 8001990:	43340000 	.word	0x43340000
 8001994:	00000000 	.word	0x00000000
 8001998:	200132c9 	.word	0x200132c9

0800199c <transmit_uart_data>:
 * @brief Fills and transmits a data packet over UART using DMA.
 * @param angle The final averaged angle in degrees.
 * @param lags  Pointer to an array of the 3 individual lag values.
 * @param correlation_results 2D array containing the full correlation output for each pair.
 */
void transmit_uart_data(float32_t angle, int16_t* lags, float32_t correlation_results[NUM_PAIRS][FFT_SIZE]) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80019a6:	60b8      	str	r0, [r7, #8]
 80019a8:	6079      	str	r1, [r7, #4]
    if (huart1.gState != HAL_UART_STATE_READY) {
 80019aa:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <transmit_uart_data+0x9c>)
 80019ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d13c      	bne.n	8001a2e <transmit_uart_data+0x92>
        return; 
    }

    uart_tx_packet.header = UART_PACKET_HEADER;
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <transmit_uart_data+0xa0>)
 80019b6:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80019ba:	801a      	strh	r2, [r3, #0]
    uart_tx_packet.angle_q10 = (uint16_t)(angle * 1024.0f);
 80019bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001a40 <transmit_uart_data+0xa4>
 80019c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019cc:	ee17 3a90 	vmov	r3, s15
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <transmit_uart_data+0xa0>)
 80019d4:	805a      	strh	r2, [r3, #2]
    uart_tx_packet.timestamp = HAL_GetTick();
 80019d6:	f001 fa69 	bl	8002eac <HAL_GetTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <transmit_uart_data+0xa0>)
 80019de:	6053      	str	r3, [r2, #4]
    memcpy(uart_tx_packet.lags, lags, sizeof(uart_tx_packet.lags));
 80019e0:	2206      	movs	r2, #6
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	4817      	ldr	r0, [pc, #92]	@ (8001a44 <transmit_uart_data+0xa8>)
 80019e6:	f00d f94c 	bl	800ec82 <memcpy>
    uart_tx_packet.reserved = 0;
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <transmit_uart_data+0xa0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	81da      	strh	r2, [r3, #14]

    // Copy all three full correlation results into the packet
    memcpy(uart_tx_packet.correlation_pair1, correlation_results[0], FFT_SIZE * sizeof(float32_t));
 80019f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4814      	ldr	r0, [pc, #80]	@ (8001a48 <transmit_uart_data+0xac>)
 80019f8:	f00d f943 	bl	800ec82 <memcpy>
    memcpy(uart_tx_packet.correlation_pair2, correlation_results[1], FFT_SIZE * sizeof(float32_t));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a06:	4619      	mov	r1, r3
 8001a08:	4810      	ldr	r0, [pc, #64]	@ (8001a4c <transmit_uart_data+0xb0>)
 8001a0a:	f00d f93a 	bl	800ec82 <memcpy>
    memcpy(uart_tx_packet.correlation_pair3, correlation_results[2], FFT_SIZE * sizeof(float32_t));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <transmit_uart_data+0xb4>)
 8001a1c:	f00d f931 	bl	800ec82 <memcpy>

    // Start the non-blocking DMA transfer
    HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&uart_tx_packet, sizeof(UART_DataPacket));
 8001a20:	f243 0210 	movw	r2, #12304	@ 0x3010
 8001a24:	4905      	ldr	r1, [pc, #20]	@ (8001a3c <transmit_uart_data+0xa0>)
 8001a26:	4804      	ldr	r0, [pc, #16]	@ (8001a38 <transmit_uart_data+0x9c>)
 8001a28:	f009 fcc4 	bl	800b3b4 <HAL_UART_Transmit_DMA>
 8001a2c:	e000      	b.n	8001a30 <transmit_uart_data+0x94>
        return; 
 8001a2e:	bf00      	nop
}
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200135b8 	.word	0x200135b8
 8001a3c:	200102b8 	.word	0x200102b8
 8001a40:	44800000 	.word	0x44800000
 8001a44:	200102c0 	.word	0x200102c0
 8001a48:	200102c8 	.word	0x200102c8
 8001a4c:	200112c8 	.word	0x200112c8
 8001a50:	200122c8 	.word	0x200122c8
 8001a54:	00000000 	.word	0x00000000

08001a58 <calculate_angle_from_lag>:
/**
  * @brief  Calculates the direction angle from a TDOA lag and pair distance.
  * @retval Angle in degrees (0-180).
  */
float32_t calculate_angle_from_lag(int16_t lag, float32_t distance)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	ed87 0a00 	vstr	s0, [r7]
 8001a64:	80fb      	strh	r3, [r7, #6]
    float32_t dt = (float32_t)lag / SAMPLE_RATE;
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a72:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001b08 <calculate_angle_from_lag+0xb0>
 8001a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7a:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t cos_theta = (dt * SPEED_OF_SOUND) / distance;
 8001a7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a82:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001b0c <calculate_angle_from_lag+0xb4>
 8001a86:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a8a:	ed97 7a00 	vldr	s14, [r7]
 8001a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a92:	edc7 7a04 	vstr	s15, [r7, #16]
    cos_theta = fmaxf(-1.0f, fminf(1.0f, cos_theta));
 8001a96:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001a9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a9e:	f010 fccb 	bl	8012438 <fminf>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	f010 fca6 	bl	80123fe <fmaxf>
 8001ab2:	ed87 0a04 	vstr	s0, [r7, #16]
    float32_t angle_rad = acosf(cos_theta);
 8001ab6:	ed97 0a04 	vldr	s0, [r7, #16]
 8001aba:	f010 fc4f 	bl	801235c <acosf>
 8001abe:	ed87 0a03 	vstr	s0, [r7, #12]
    return angle_rad * 180.0f / M_PI;
 8001ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001b10 <calculate_angle_from_lag+0xb8>
 8001aca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ace:	ee17 0a90 	vmov	r0, s15
 8001ad2:	f7fe fd3d 	bl	8000550 <__aeabi_f2d>
 8001ad6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001b00 <calculate_angle_from_lag+0xa8>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe feba 	bl	8000854 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f882 	bl	8000bf0 <__aeabi_d2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	ee07 3a90 	vmov	s15, r3
}
 8001af2:	eeb0 0a67 	vmov.f32	s0, s15
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	f3af 8000 	nop.w
 8001b00:	54442d18 	.word	0x54442d18
 8001b04:	400921fb 	.word	0x400921fb
 8001b08:	473b8000 	.word	0x473b8000
 8001b0c:	43ab8000 	.word	0x43ab8000
 8001b10:	43340000 	.word	0x43340000
 8001b14:	00000000 	.word	0x00000000

08001b18 <calculate_tdoa_lag>:
  * @param  mic1_data, mic2_data: Pointers to input audio buffers.
  * @param  correlation_result: Pointer to a buffer to store the IFFT output.
  * @retval The lag in samples.
  */
int16_t calculate_tdoa_lag(float32_t* mic1_data, float32_t* mic2_data, float32_t* correlation_result)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	f5ad 5d01 	sub.w	sp, sp, #8256	@ 0x2040
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b26:	f843 0c3c 	str.w	r0, [r3, #-60]
 8001b2a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b2e:	f843 1c40 	str.w	r1, [r3, #-64]
 8001b32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b36:	f843 2c44 	str.w	r2, [r3, #-68]
    float32_t temp_corr_buffer[FFT_SIZE * 2];
    memcpy(fft_buffer1, mic1_data, FFT_SIZE * sizeof(float32_t));
 8001b3a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b42:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8001b46:	48d2      	ldr	r0, [pc, #840]	@ (8001e90 <calculate_tdoa_lag+0x378>)
 8001b48:	f00d f89b 	bl	800ec82 <memcpy>
    memcpy(fft_buffer2, mic2_data, FFT_SIZE * sizeof(float32_t));
 8001b4c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b54:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8001b58:	48ce      	ldr	r0, [pc, #824]	@ (8001e94 <calculate_tdoa_lag+0x37c>)
 8001b5a:	f00d f892 	bl	800ec82 <memcpy>
    arm_rfft_fast_f32(&fft_instance, fft_buffer1, fft_buffer1, 0);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	4acb      	ldr	r2, [pc, #812]	@ (8001e90 <calculate_tdoa_lag+0x378>)
 8001b62:	49cb      	ldr	r1, [pc, #812]	@ (8001e90 <calculate_tdoa_lag+0x378>)
 8001b64:	48cc      	ldr	r0, [pc, #816]	@ (8001e98 <calculate_tdoa_lag+0x380>)
 8001b66:	f00b f97b 	bl	800ce60 <arm_rfft_fast_f32>
    arm_rfft_fast_f32(&fft_instance, fft_buffer2, fft_buffer2, 0);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	4ac9      	ldr	r2, [pc, #804]	@ (8001e94 <calculate_tdoa_lag+0x37c>)
 8001b6e:	49c9      	ldr	r1, [pc, #804]	@ (8001e94 <calculate_tdoa_lag+0x37c>)
 8001b70:	48c9      	ldr	r0, [pc, #804]	@ (8001e98 <calculate_tdoa_lag+0x380>)
 8001b72:	f00b f975 	bl	800ce60 <arm_rfft_fast_f32>

    for (int i = 0; i < FFT_SIZE * 2; i += 2) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001b7c:	f102 0204 	add.w	r2, r2, #4
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e130      	b.n	8001de6 <calculate_tdoa_lag+0x2ce>
        float32_t X_re = fft_buffer1[i], X_im = fft_buffer1[i+1];
 8001b84:	4ac2      	ldr	r2, [pc, #776]	@ (8001e90 <calculate_tdoa_lag+0x378>)
 8001b86:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001b8a:	f103 0304 	add.w	r3, r3, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001b9a:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001ba4:	f103 0304 	add.w	r3, r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4ab8      	ldr	r2, [pc, #736]	@ (8001e90 <calculate_tdoa_lag+0x378>)
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001bb8:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001bbc:	6013      	str	r3, [r2, #0]
        float32_t Y_re = fft_buffer2[i], Y_im = fft_buffer2[i+1];
 8001bbe:	4ab5      	ldr	r2, [pc, #724]	@ (8001e94 <calculate_tdoa_lag+0x37c>)
 8001bc0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001bc4:	f103 0304 	add.w	r3, r3, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001bd4:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001bde:	f103 0304 	add.w	r3, r3, #4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4aab      	ldr	r2, [pc, #684]	@ (8001e94 <calculate_tdoa_lag+0x37c>)
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001bf2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001bf6:	6013      	str	r3, [r2, #0]
        float32_t R_re = X_re * Y_re + X_im * Y_im;
 8001bf8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001bfc:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001c00:	ed93 7a00 	vldr	s14, [r3]
 8001c04:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c08:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c14:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c18:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001c1c:	edd3 6a00 	vldr	s13, [r3]
 8001c20:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c24:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c38:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
        float32_t R_im = X_im * Y_re - X_re * Y_im;
 8001c40:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c44:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c50:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c60:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001c64:	edd3 6a00 	vldr	s13, [r3]
 8001c68:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c6c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c80:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001c84:	edc3 7a00 	vstr	s15, [r3]
        float32_t R_mag;
        arm_sqrt_f32(R_re * R_re + R_im * R_im, &R_mag);
 8001c88:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c8c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c98:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001c9c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001cb0:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
 8001cb8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cbc:	3b34      	subs	r3, #52	@ 0x34
 8001cbe:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001cc2:	f102 0220 	add.w	r2, r2, #32
 8001cc6:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001cc8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001ccc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cdc:	db11      	blt.n	8001d02 <calculate_tdoa_lag+0x1ea>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001cde:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001ce2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001ce6:	ed93 0a00 	vldr	s0, [r3]
 8001cea:	f010 fb63 	bl	80123b4 <sqrtf>
 8001cee:	eef0 7a40 	vmov.f32	s15, s0
 8001cf2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001cf6:	f103 0320 	add.w	r3, r3, #32
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001d00:	e008      	b.n	8001d14 <calculate_tdoa_lag+0x1fc>
    }
    else
    {
      *pOut = 0.0f;
 8001d02:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d06:	f103 0320 	add.w	r3, r3, #32
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d12:	bf00      	nop
        if (R_mag > 1e-9) {
 8001d14:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d18:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc17 	bl	8000550 <__aeabi_f2d>
 8001d22:	a359      	add	r3, pc, #356	@ (adr r3, 8001e88 <calculate_tdoa_lag+0x370>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fefa 	bl	8000b20 <__aeabi_dcmpgt>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d032      	beq.n	8001d98 <calculate_tdoa_lag+0x280>
            temp_corr_buffer[i]   = R_re / R_mag;
 8001d32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d36:	ed13 7a0d 	vldr	s14, [r3, #-52]	@ 0xffffffcc
 8001d3a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001d3e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001d42:	edd3 6a00 	vldr	s13, [r3]
 8001d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001d54:	f103 0304 	add.w	r3, r3, #4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b28      	subs	r3, #40	@ 0x28
 8001d60:	edc3 7a00 	vstr	s15, [r3]
            temp_corr_buffer[i+1] = R_im / R_mag;
 8001d64:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d68:	ed13 7a0d 	vldr	s14, [r3, #-52]	@ 0xffffffcc
 8001d6c:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001d70:	f103 0304 	add.w	r3, r3, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001d7c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001d80:	edd2 6a00 	vldr	s13, [r2]
 8001d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d88:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b28      	subs	r3, #40	@ 0x28
 8001d92:	edc3 7a00 	vstr	s15, [r3]
 8001d96:	e01b      	b.n	8001dd0 <calculate_tdoa_lag+0x2b8>
        } else {
            temp_corr_buffer[i]   = 0.0f;
 8001d98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001da2:	f103 0304 	add.w	r3, r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	3b28      	subs	r3, #40	@ 0x28
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
            temp_corr_buffer[i+1] = 0.0f;
 8001db4:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001db8:	f103 0304 	add.w	r3, r3, #4
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3b28      	subs	r3, #40	@ 0x28
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FFT_SIZE * 2; i += 2) {
 8001dd0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001dd4:	f103 0304 	add.w	r3, r3, #4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001de0:	f102 0204 	add.w	r2, r2, #4
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001dea:	f103 0304 	add.w	r3, r3, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001df4:	f6ff aec6 	blt.w	8001b84 <calculate_tdoa_lag+0x6c>
        }
    }
    
    arm_rfft_fast_f32(&fft_instance, temp_corr_buffer, correlation_result, 1);
 8001df8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001e02:	3928      	subs	r1, #40	@ 0x28
 8001e04:	2301      	movs	r3, #1
 8001e06:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8001e0a:	4823      	ldr	r0, [pc, #140]	@ (8001e98 <calculate_tdoa_lag+0x380>)
 8001e0c:	f00b f828 	bl	800ce60 <arm_rfft_fast_f32>
    
    float32_t max_val;
    uint32_t max_idx;
    arm_max_f32(correlation_result, FFT_SIZE, &max_val, &max_idx);
 8001e10:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e14:	3b30      	subs	r3, #48	@ 0x30
 8001e16:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001e1a:	3a2c      	subs	r2, #44	@ 0x2c
 8001e1c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001e20:	4608      	mov	r0, r1
 8001e22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e26:	f850 0c44 	ldr.w	r0, [r0, #-68]
 8001e2a:	f00a fe29 	bl	800ca80 <arm_max_f32>
    int16_t lag_val = max_idx;
 8001e2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001e32:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e36:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001e3a:	f102 0202 	add.w	r2, r2, #2
 8001e3e:	8013      	strh	r3, [r2, #0]
    if (lag_val >= FFT_SIZE / 2) {
 8001e40:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001e44:	f103 0302 	add.w	r3, r3, #2
 8001e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e50:	db0c      	blt.n	8001e6c <calculate_tdoa_lag+0x354>
        lag_val -= FFT_SIZE;
 8001e52:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001e56:	f103 0302 	add.w	r3, r3, #2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001e66:	f102 0202 	add.w	r2, r2, #2
 8001e6a:	8013      	strh	r3, [r2, #0]
    }
    return lag_val;
 8001e6c:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001e70:	f103 0302 	add.w	r3, r3, #2
 8001e74:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f507 5701 	add.w	r7, r7, #8256	@ 0x2040
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	f3af 8000 	nop.w
 8001e88:	e826d695 	.word	0xe826d695
 8001e8c:	3e112e0b 	.word	0x3e112e0b
 8001e90:	2000c294 	.word	0x2000c294
 8001e94:	2000e294 	.word	0x2000e294
 8001e98:	20010294 	.word	0x20010294

08001e9c <trigger_processing>:

// --- DMA Transfer Complete Callbacks ---
volatile uint8_t dma_sync_flags = 0;
void trigger_processing(uint8_t half) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
    if (dma_sync_flags == 0x03) {
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <trigger_processing+0x4c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d115      	bne.n	8001edc <trigger_processing+0x40>
        if(half == 0) {
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <trigger_processing+0x28>
            processing_ptr_a = &sai_a_dma_buffer[0];
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <trigger_processing+0x50>)
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <trigger_processing+0x54>)
 8001eba:	601a      	str	r2, [r3, #0]
            processing_ptr_b = &sai_b_dma_buffer[0];
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <trigger_processing+0x58>)
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <trigger_processing+0x5c>)
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e005      	b.n	8001ed0 <trigger_processing+0x34>
        } else {
            processing_ptr_a = &sai_a_dma_buffer[SAI_RX_BUFFER_SIZE];
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <trigger_processing+0x50>)
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <trigger_processing+0x60>)
 8001ec8:	601a      	str	r2, [r3, #0]
            processing_ptr_b = &sai_b_dma_buffer[SAI_RX_BUFFER_SIZE];
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <trigger_processing+0x58>)
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f00 <trigger_processing+0x64>)
 8001ece:	601a      	str	r2, [r3, #0]
        }
        data_ready_flags = 1;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <trigger_processing+0x68>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
        dma_sync_flags = 0;
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <trigger_processing+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
    }
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	200132c8 	.word	0x200132c8
 8001eec:	200102b0 	.word	0x200102b0
 8001ef0:	20000294 	.word	0x20000294
 8001ef4:	200102b4 	.word	0x200102b4
 8001ef8:	20004294 	.word	0x20004294
 8001efc:	20002294 	.word	0x20002294
 8001f00:	20006294 	.word	0x20006294
 8001f04:	200102ac 	.word	0x200102ac

08001f08 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if (hsai->Instance == SAI1_Block_A) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0f      	ldr	r2, [pc, #60]	@ (8001f54 <HAL_SAI_RxHalfCpltCallback+0x4c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d108      	bne.n	8001f2c <HAL_SAI_RxHalfCpltCallback+0x24>
      dma_sync_flags |= (1 << 0);
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e00c      	b.n	8001f46 <HAL_SAI_RxHalfCpltCallback+0x3e>
  } else if (hsai->Instance == SAI1_Block_B) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <HAL_SAI_RxHalfCpltCallback+0x54>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d107      	bne.n	8001f46 <HAL_SAI_RxHalfCpltCallback+0x3e>
      dma_sync_flags |= (1 << 1);
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8001f44:	701a      	strb	r2, [r3, #0]
  }
  trigger_processing(0);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff ffa8 	bl	8001e9c <trigger_processing>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40015404 	.word	0x40015404
 8001f58:	200132c8 	.word	0x200132c8
 8001f5c:	40015424 	.word	0x40015424

08001f60 <HAL_SAI_RxCpltCallback>:
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if (hsai->Instance == SAI1_Block_A) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <HAL_SAI_RxCpltCallback+0x4c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d108      	bne.n	8001f84 <HAL_SAI_RxCpltCallback+0x24>
      dma_sync_flags |= (1 << 0);
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_SAI_RxCpltCallback+0x50>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <HAL_SAI_RxCpltCallback+0x50>)
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e00c      	b.n	8001f9e <HAL_SAI_RxCpltCallback+0x3e>
  } else if (hsai->Instance == SAI1_Block_B) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <HAL_SAI_RxCpltCallback+0x54>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d107      	bne.n	8001f9e <HAL_SAI_RxCpltCallback+0x3e>
      dma_sync_flags |= (1 << 1);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_SAI_RxCpltCallback+0x50>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_SAI_RxCpltCallback+0x50>)
 8001f9c:	701a      	strb	r2, [r3, #0]
  }
  trigger_processing(1);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff ff7c 	bl	8001e9c <trigger_processing>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40015404 	.word	0x40015404
 8001fb0:	200132c8 	.word	0x200132c8
 8001fb4:	40015424 	.word	0x40015424

08001fb8 <HAL_UART_TxCpltCallback>:
  * @brief  UART Transmit Complete Callback.
  * @param  huart: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  // the huart->gState back to HAL_UART_STATE_READY, allowing the next transfer to start.
  if (huart->Instance == USART1)
  {
      // You could add code here if you needed to, e.g., to toggle an LED.
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fde:	f000 ff51 	bl	8002e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40014800 	.word	0x40014800

08001ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
}
 8001ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <Error_Handler+0x8>

08001ffc <MX_SAI1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel13;
DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002000:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002002:	4a2f      	ldr	r2, [pc, #188]	@ (80020c0 <MX_SAI1_Init+0xc4>)
 8002004:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8002006:	4b2d      	ldr	r3, [pc, #180]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002008:	2201      	movs	r2, #1
 800200a:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800200c:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <MX_SAI1_Init+0xc0>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8002012:	4b2a      	ldr	r3, [pc, #168]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002014:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002018:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800201a:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <MX_SAI1_Init+0xc0>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002020:	4b26      	ldr	r3, [pc, #152]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002026:	4b25      	ldr	r3, [pc, #148]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002028:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800202c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800202e:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 8002034:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800203a:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <MX_SAI1_Init+0xc0>)
 800203c:	2200      	movs	r2, #0
 800203e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002040:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <MX_SAI1_Init+0xc0>)
 8002042:	2200      	movs	r2, #0
 8002044:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002046:	2302      	movs	r3, #2
 8002048:	2202      	movs	r2, #2
 800204a:	2100      	movs	r1, #0
 800204c:	481b      	ldr	r0, [pc, #108]	@ (80020bc <MX_SAI1_Init+0xc0>)
 800204e:	f007 fe17 	bl	8009c80 <HAL_SAI_InitProtocol>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8002058:	f7ff ffca 	bl	8001ff0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800205c:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 800205e:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <MX_SAI1_Init+0xcc>)
 8002060:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 8002064:	2203      	movs	r2, #3
 8002066:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002068:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 800206a:	2201      	movs	r2, #1
 800206c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002074:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800207a:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002080:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8002086:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 8002088:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800208c:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 8002090:	2200      	movs	r2, #0
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 800209c:	2200      	movs	r2, #0
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80020a0:	2302      	movs	r3, #2
 80020a2:	2202      	movs	r2, #2
 80020a4:	2100      	movs	r1, #0
 80020a6:	4807      	ldr	r0, [pc, #28]	@ (80020c4 <MX_SAI1_Init+0xc8>)
 80020a8:	f007 fdea 	bl	8009c80 <HAL_SAI_InitProtocol>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 80020b2:	f7ff ff9d 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200132cc 	.word	0x200132cc
 80020c0:	40015404 	.word	0x40015404
 80020c4:	20013364 	.word	0x20013364
 80020c8:	40015424 	.word	0x40015424

080020cc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b0a4      	sub	sp, #144	@ 0x90
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4ab2      	ldr	r2, [pc, #712]	@ (80023a4 <HAL_SAI_MspInit+0x2d8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	f040 80b1 	bne.w	8002242 <HAL_SAI_MspInit+0x176>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80020e0:	4bb1      	ldr	r3, [pc, #708]	@ (80023a8 <HAL_SAI_MspInit+0x2dc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d116      	bne.n	8002116 <HAL_SAI_MspInit+0x4a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020e8:	4bb0      	ldr	r3, [pc, #704]	@ (80023ac <HAL_SAI_MspInit+0x2e0>)
 80020ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020ee:	4aaf      	ldr	r2, [pc, #700]	@ (80023ac <HAL_SAI_MspInit+0x2e0>)
 80020f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020f4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80020f8:	4bac      	ldr	r3, [pc, #688]	@ (80023ac <HAL_SAI_MspInit+0x2e0>)
 80020fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	205a      	movs	r0, #90	@ 0x5a
 800210c:	f001 fb7e 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8002110:	205a      	movs	r0, #90	@ 0x5a
 8002112:	f001 fb95 	bl	8003840 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8002116:	4ba4      	ldr	r3, [pc, #656]	@ (80023a8 <HAL_SAI_MspInit+0x2dc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	4aa2      	ldr	r2, [pc, #648]	@ (80023a8 <HAL_SAI_MspInit+0x2dc>)
 800211e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002120:	2370      	movs	r3, #112	@ 0x70
 8002122:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002136:	230d      	movs	r3, #13
 8002138:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002140:	4619      	mov	r1, r3
 8002142:	489b      	ldr	r0, [pc, #620]	@ (80023b0 <HAL_SAI_MspInit+0x2e4>)
 8002144:	f003 fa60 	bl	8005608 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8002148:	2322      	movs	r3, #34	@ 0x22
 800214a:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI1_A;
 800214c:	2324      	movs	r3, #36	@ 0x24
 800214e:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 800215c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002162:	2302      	movs	r3, #2
 8002164:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002166:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 800216c:	2301      	movs	r3, #1
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 8002170:	2301      	movs	r3, #1
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002178:	2300      	movs	r3, #0
 800217a:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 800217c:	2300      	movs	r3, #0
 800217e:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8002180:	2301      	movs	r3, #1
 8002182:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002194:	2300      	movs	r3, #0
 8002196:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002198:	2300      	movs	r3, #0
 800219a:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800219c:	2300      	movs	r3, #0
 800219e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel14) != HAL_OK)
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4983      	ldr	r1, [pc, #524]	@ (80023b4 <HAL_SAI_MspInit+0x2e8>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fbe4 	bl	8004974 <HAL_DMAEx_List_BuildNode>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 80021b2:	f7ff ff1d 	bl	8001ff0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel14, NULL, &Node_GPDMA1_Channel14) != HAL_OK)
 80021b6:	4a7f      	ldr	r2, [pc, #508]	@ (80023b4 <HAL_SAI_MspInit+0x2e8>)
 80021b8:	2100      	movs	r1, #0
 80021ba:	487f      	ldr	r0, [pc, #508]	@ (80023b8 <HAL_SAI_MspInit+0x2ec>)
 80021bc:	f002 fbf0 	bl	80049a0 <HAL_DMAEx_List_InsertNode>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_SAI_MspInit+0xfe>
    {
      Error_Handler();
 80021c6:	f7ff ff13 	bl	8001ff0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel14) != HAL_OK)
 80021ca:	487b      	ldr	r0, [pc, #492]	@ (80023b8 <HAL_SAI_MspInit+0x2ec>)
 80021cc:	f002 fcb1 	bl	8004b32 <HAL_DMAEx_List_SetCircularMode>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 80021d6:	f7ff ff0b 	bl	8001ff0 <Error_Handler>
    }

    handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 80021da:	4b78      	ldr	r3, [pc, #480]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 80021dc:	4a78      	ldr	r2, [pc, #480]	@ (80023c0 <HAL_SAI_MspInit+0x2f4>)
 80021de:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel14.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 80021e0:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 80021e2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80021e6:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel14.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80021e8:	4b74      	ldr	r3, [pc, #464]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel14.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80021ee:	4b73      	ldr	r3, [pc, #460]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel14.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80021f4:	4b71      	ldr	r3, [pc, #452]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel14.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80021fa:	4b70      	ldr	r3, [pc, #448]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 80021fc:	2281      	movs	r2, #129	@ 0x81
 80021fe:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8002200:	486e      	ldr	r0, [pc, #440]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 8002202:	f002 f9f7 	bl	80045f4 <HAL_DMAEx_List_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_SAI_MspInit+0x144>
    {
      Error_Handler();
 800220c:	f7ff fef0 	bl	8001ff0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel14, &List_GPDMA1_Channel14) != HAL_OK)
 8002210:	4969      	ldr	r1, [pc, #420]	@ (80023b8 <HAL_SAI_MspInit+0x2ec>)
 8002212:	486a      	ldr	r0, [pc, #424]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 8002214:	f002 fcee 	bl	8004bf4 <HAL_DMAEx_List_LinkQ>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_SAI_MspInit+0x156>
    {
      Error_Handler();
 800221e:	f7ff fee7 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel14);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 8002226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800222a:	4a64      	ldr	r2, [pc, #400]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002230:	2110      	movs	r1, #16
 8002232:	4862      	ldr	r0, [pc, #392]	@ (80023bc <HAL_SAI_MspInit+0x2f0>)
 8002234:	f001 fefc 	bl	8004030 <HAL_DMA_ConfigChannelAttributes>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_SAI_MspInit+0x176>
    {
      Error_Handler();
 800223e:	f7ff fed7 	bl	8001ff0 <Error_Handler>
    }

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5f      	ldr	r2, [pc, #380]	@ (80023c4 <HAL_SAI_MspInit+0x2f8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	f040 80cd 	bne.w	80023e8 <HAL_SAI_MspInit+0x31c>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 800224e:	4b56      	ldr	r3, [pc, #344]	@ (80023a8 <HAL_SAI_MspInit+0x2dc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d116      	bne.n	8002284 <HAL_SAI_MspInit+0x1b8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002256:	4b55      	ldr	r3, [pc, #340]	@ (80023ac <HAL_SAI_MspInit+0x2e0>)
 8002258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800225c:	4a53      	ldr	r2, [pc, #332]	@ (80023ac <HAL_SAI_MspInit+0x2e0>)
 800225e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002262:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002266:	4b51      	ldr	r3, [pc, #324]	@ (80023ac <HAL_SAI_MspInit+0x2e0>)
 8002268:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800226c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	205a      	movs	r0, #90	@ 0x5a
 800227a:	f001 fac7 	bl	800380c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800227e:	205a      	movs	r0, #90	@ 0x5a
 8002280:	f001 fade 	bl	8003840 <HAL_NVIC_EnableIRQ>
      }
    SAI1_client ++;
 8002284:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <HAL_SAI_MspInit+0x2dc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	4a47      	ldr	r2, [pc, #284]	@ (80023a8 <HAL_SAI_MspInit+0x2dc>)
 800228c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800228e:	2308      	movs	r3, #8
 8002290:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80022a4:	230d      	movs	r3, #13
 80022a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022aa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80022ae:	4619      	mov	r1, r3
 80022b0:	483f      	ldr	r0, [pc, #252]	@ (80023b0 <HAL_SAI_MspInit+0x2e4>)
 80022b2:	f003 f9a9 	bl	8005608 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 80022b6:	2322      	movs	r3, #34	@ 0x22
 80022b8:	613b      	str	r3, [r7, #16]
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI1_B;
 80022ba:	2325      	movs	r3, #37	@ 0x25
 80022bc:	617b      	str	r3, [r7, #20]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80022ca:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80022d0:	2302      	movs	r3, #2
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80022d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NodeConfig.Init.SrcBurstLength = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	637b      	str	r3, [r7, #52]	@ 0x34
    NodeConfig.Init.DestBurstLength = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80022e6:	2300      	movs	r3, #0
 80022e8:	643b      	str	r3, [r7, #64]	@ 0x40
    NodeConfig.Init.Mode = DMA_NORMAL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	647b      	str	r3, [r7, #68]	@ 0x44
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	663b      	str	r3, [r7, #96]	@ 0x60
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	667b      	str	r3, [r7, #100]	@ 0x64
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	66fb      	str	r3, [r7, #108]	@ 0x6c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002302:	2300      	movs	r3, #0
 8002304:	657b      	str	r3, [r7, #84]	@ 0x54
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	64bb      	str	r3, [r7, #72]	@ 0x48
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800230a:	2300      	movs	r3, #0
 800230c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel13) != HAL_OK)
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	492d      	ldr	r1, [pc, #180]	@ (80023c8 <HAL_SAI_MspInit+0x2fc>)
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fb2d 	bl	8004974 <HAL_DMAEx_List_BuildNode>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 8002320:	f7ff fe66 	bl	8001ff0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel13, NULL, &Node_GPDMA1_Channel13) != HAL_OK)
 8002324:	4a28      	ldr	r2, [pc, #160]	@ (80023c8 <HAL_SAI_MspInit+0x2fc>)
 8002326:	2100      	movs	r1, #0
 8002328:	4828      	ldr	r0, [pc, #160]	@ (80023cc <HAL_SAI_MspInit+0x300>)
 800232a:	f002 fb39 	bl	80049a0 <HAL_DMAEx_List_InsertNode>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_SAI_MspInit+0x26c>
    {
      Error_Handler();
 8002334:	f7ff fe5c 	bl	8001ff0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel13) != HAL_OK)
 8002338:	4824      	ldr	r0, [pc, #144]	@ (80023cc <HAL_SAI_MspInit+0x300>)
 800233a:	f002 fbfa 	bl	8004b32 <HAL_DMAEx_List_SetCircularMode>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_SAI_MspInit+0x27c>
    {
      Error_Handler();
 8002344:	f7ff fe54 	bl	8001ff0 <Error_Handler>
    }

    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 8002348:	4b21      	ldr	r3, [pc, #132]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 800234a:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <HAL_SAI_MspInit+0x308>)
 800234c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 8002350:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel13.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002356:	4b1e      	ldr	r3, [pc, #120]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 8002358:	2200      	movs	r2, #0
 800235a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel13.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800235c:	4b1c      	ldr	r3, [pc, #112]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 800235e:	2200      	movs	r2, #0
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel13.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002362:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel13.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002368:	4b19      	ldr	r3, [pc, #100]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 800236a:	2281      	movs	r2, #129	@ 0x81
 800236c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 800236e:	4818      	ldr	r0, [pc, #96]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 8002370:	f002 f940 	bl	80045f4 <HAL_DMAEx_List_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_SAI_MspInit+0x2b2>
    {
      Error_Handler();
 800237a:	f7ff fe39 	bl	8001ff0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel13, &List_GPDMA1_Channel13) != HAL_OK)
 800237e:	4913      	ldr	r1, [pc, #76]	@ (80023cc <HAL_SAI_MspInit+0x300>)
 8002380:	4813      	ldr	r0, [pc, #76]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 8002382:	f002 fc37 	bl	8004bf4 <HAL_DMAEx_List_LinkQ>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_SAI_MspInit+0x2c4>
    {
      Error_Handler();
 800238c:	f7ff fe30 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel13);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 8002394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <HAL_SAI_MspInit+0x304>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 800239e:	2110      	movs	r1, #16
 80023a0:	e01a      	b.n	80023d8 <HAL_SAI_MspInit+0x30c>
 80023a2:	bf00      	nop
 80023a4:	40015404 	.word	0x40015404
 80023a8:	20013564 	.word	0x20013564
 80023ac:	46020c00 	.word	0x46020c00
 80023b0:	42021000 	.word	0x42021000
 80023b4:	200133fc 	.word	0x200133fc
 80023b8:	20013420 	.word	0x20013420
 80023bc:	20013438 	.word	0x20013438
 80023c0:	40020750 	.word	0x40020750
 80023c4:	40015424 	.word	0x40015424
 80023c8:	200134b0 	.word	0x200134b0
 80023cc:	200134d4 	.word	0x200134d4
 80023d0:	200134ec 	.word	0x200134ec
 80023d4:	400206d0 	.word	0x400206d0
 80023d8:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <HAL_SAI_MspInit+0x324>)
 80023da:	f001 fe29 	bl	8004030 <HAL_DMA_ConfigChannelAttributes>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_SAI_MspInit+0x31c>
    {
      Error_Handler();
 80023e4:	f7ff fe04 	bl	8001ff0 <Error_Handler>
    }

    }
}
 80023e8:	bf00      	nop
 80023ea:	3790      	adds	r7, #144	@ 0x90
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200134ec 	.word	0x200134ec

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_MspInit+0x3c>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002400:	4a0b      	ldr	r2, [pc, #44]	@ (8002430 <HAL_MspInit+0x3c>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_MspInit+0x3c>)
 800240c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8002418:	f003 fc76 	bl	8005d08 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddA();
 800241c:	f003 fc94 	bl	8005d48 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002420:	2004      	movs	r0, #4
 8002422:	f001 f9e8 	bl	80037f6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	46020c00 	.word	0x46020c00

08002434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	@ 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002444:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <HAL_InitTick+0xcc>)
 8002446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800244a:	4a2d      	ldr	r2, [pc, #180]	@ (8002500 <HAL_InitTick+0xcc>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002450:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_InitTick+0xcc>)
 8002456:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800245a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002462:	f107 0210 	add.w	r2, r7, #16
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f004 feb1 	bl	80071d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002472:	f004 fe87 	bl	8007184 <HAL_RCC_GetPCLK2Freq>
 8002476:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <HAL_InitTick+0xd0>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	0c9b      	lsrs	r3, r3, #18
 8002482:	3b01      	subs	r3, #1
 8002484:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002486:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_InitTick+0xd4>)
 8002488:	4a20      	ldr	r2, [pc, #128]	@ (800250c <HAL_InitTick+0xd8>)
 800248a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800248c:	4b1e      	ldr	r3, [pc, #120]	@ (8002508 <HAL_InitTick+0xd4>)
 800248e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002492:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002494:	4a1c      	ldr	r2, [pc, #112]	@ (8002508 <HAL_InitTick+0xd4>)
 8002496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002498:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_InitTick+0xd4>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_InitTick+0xd4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80024a6:	4818      	ldr	r0, [pc, #96]	@ (8002508 <HAL_InitTick+0xd4>)
 80024a8:	f008 fb75 	bl	800ab96 <HAL_TIM_Base_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80024b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80024ba:	4813      	ldr	r0, [pc, #76]	@ (8002508 <HAL_InitTick+0xd4>)
 80024bc:	f008 fbcc 	bl	800ac58 <HAL_TIM_Base_Start_IT>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80024c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10e      	bne.n	80024ec <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0f      	cmp	r3, #15
 80024d2:	d808      	bhi.n	80024e6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80024d4:	2200      	movs	r2, #0
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	2047      	movs	r0, #71	@ 0x47
 80024da:	f001 f997 	bl	800380c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024de:	4a0c      	ldr	r2, [pc, #48]	@ (8002510 <HAL_InitTick+0xdc>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e002      	b.n	80024ec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80024ec:	2047      	movs	r0, #71	@ 0x47
 80024ee:	f001 f9a7 	bl	8003840 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80024f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3738      	adds	r7, #56	@ 0x38
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	46020c00 	.word	0x46020c00
 8002504:	431bde83 	.word	0x431bde83
 8002508:	20013568 	.word	0x20013568
 800250c:	40014800 	.word	0x40014800
 8002510:	2000001c 	.word	0x2000001c

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <NMI_Handler+0x4>

0800251c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <HardFault_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <MemManage_Handler+0x4>

0800252c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <UsageFault_Handler+0x4>

0800253c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 fc2b 	bl	8002dd4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <USART1_IRQHandler+0x10>)
 800258a:	f008 ffdb 	bl	800b544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200135b8 	.word	0x200135b8

08002598 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <TIM17_IRQHandler+0x10>)
 800259e:	f008 fbfb 	bl	800ad98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20013568 	.word	0x20013568

080025ac <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <GPDMA1_Channel13_IRQHandler+0x10>)
 80025b2:	f001 fbdc 	bl	8003d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200134ec 	.word	0x200134ec

080025c0 <GPDMA1_Channel14_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 14 global interrupt.
  */
void GPDMA1_Channel14_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 0 */

  /* USER CODE END GPDMA1_Channel14_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel14);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <GPDMA1_Channel14_IRQHandler+0x10>)
 80025c6:	f001 fbd2 	bl	8003d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 1 */

  /* USER CODE END GPDMA1_Channel14_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20013438 	.word	0x20013438

080025d4 <GPDMA1_Channel15_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 15 global interrupt.
  */
void GPDMA1_Channel15_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 0 */

  /* USER CODE END GPDMA1_Channel15_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel15);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <GPDMA1_Channel15_IRQHandler+0x10>)
 80025da:	f001 fbc8 	bl	8003d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 1 */

  /* USER CODE END GPDMA1_Channel15_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2001364c 	.word	0x2001364c

080025e8 <SAI1_IRQHandler>:

/**
  * @brief This function handles Serial Audio Interface 1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 80025ec:	4803      	ldr	r0, [pc, #12]	@ (80025fc <SAI1_IRQHandler+0x14>)
 80025ee:	f007 fecd 	bl	800a38c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 80025f2:	4803      	ldr	r0, [pc, #12]	@ (8002600 <SAI1_IRQHandler+0x18>)
 80025f4:	f007 feca 	bl	800a38c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200132cc 	.word	0x200132cc
 8002600:	20013364 	.word	0x20013364

08002604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_kill>:

int _kill(int pid, int sig)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800261e:	f00c faf5 	bl	800ec0c <__errno>
 8002622:	4603      	mov	r3, r0
 8002624:	2216      	movs	r2, #22
 8002626:	601a      	str	r2, [r3, #0]
  return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_exit>:

void _exit (int status)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffe7 	bl	8002614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002646:	bf00      	nop
 8002648:	e7fd      	b.n	8002646 <_exit+0x12>

0800264a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00a      	b.n	8002672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800265c:	f3af 8000 	nop.w
 8002660:	4601      	mov	r1, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60ba      	str	r2, [r7, #8]
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbf0      	blt.n	800265c <_read+0x12>
  }

  return len;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e009      	b.n	80026aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dbf1      	blt.n	8002696 <_write+0x12>
  }
  return len;
 80026b2:	687b      	ldr	r3, [r7, #4]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_close>:

int _close(int file)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e4:	605a      	str	r2, [r3, #4]
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_isatty>:

int _isatty(int file)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <_sbrk+0x5c>)
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <_sbrk+0x60>)
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	@ (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002754:	f00c fa5a 	bl	800ec0c <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002764:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200c0000 	.word	0x200c0000
 8002784:	00000400 	.word	0x00000400
 8002788:	200135b4 	.word	0x200135b4
 800278c:	20013c00 	.word	0x20013c00

08002790 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <SystemInit+0x68>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <SystemInit+0x68>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80027a4:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <SystemInit+0x6c>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80027aa:	4b14      	ldr	r3, [pc, #80]	@ (80027fc <SystemInit+0x6c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80027b0:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <SystemInit+0x6c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <SystemInit+0x6c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80027bc:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <SystemInit+0x6c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0e      	ldr	r2, [pc, #56]	@ (80027fc <SystemInit+0x6c>)
 80027c2:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80027c6:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80027ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <SystemInit+0x6c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <SystemInit+0x6c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <SystemInit+0x6c>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <SystemInit+0x6c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <SystemInit+0x68>)
 80027e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027ea:	609a      	str	r2, [r3, #8]
  #endif
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00
 80027fc:	46020c00 	.word	0x46020c00

08002800 <MX_USART1_UART_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel15;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002804:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002806:	4a23      	ldr	r2, [pc, #140]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800280a:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 800280c:	4a22      	ldr	r2, [pc, #136]	@ (8002898 <MX_USART1_UART_Init+0x98>)
 800280e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002810:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002816:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800281c:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002822:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002824:	220c      	movs	r2, #12
 8002826:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002828:	4b19      	ldr	r3, [pc, #100]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002834:	4b16      	ldr	r3, [pc, #88]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002846:	4812      	ldr	r0, [pc, #72]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 8002848:	f008 fd64 	bl	800b314 <HAL_UART_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8002852:	f7ff fbcd 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002856:	2100      	movs	r1, #0
 8002858:	480d      	ldr	r0, [pc, #52]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 800285a:	f009 fe75 	bl	800c548 <HAL_UARTEx_SetTxFifoThreshold>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8002864:	f7ff fbc4 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002868:	2100      	movs	r1, #0
 800286a:	4809      	ldr	r0, [pc, #36]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 800286c:	f009 feaa 	bl	800c5c4 <HAL_UARTEx_SetRxFifoThreshold>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002876:	f7ff fbbb 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800287a:	4805      	ldr	r0, [pc, #20]	@ (8002890 <MX_USART1_UART_Init+0x90>)
 800287c:	f009 fe2b 	bl	800c4d6 <HAL_UARTEx_DisableFifoMode>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002886:	f7ff fbb3 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200135b8 	.word	0x200135b8
 8002894:	40013800 	.word	0x40013800
 8002898:	001e8480 	.word	0x001e8480

0800289c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b0ba      	sub	sp, #232	@ 0xe8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	22c0      	movs	r2, #192	@ 0xc0
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f00c f952 	bl	800eb66 <memset>
  if(uartHandle->Instance==USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a4c      	ldr	r2, [pc, #304]	@ (80029f8 <HAL_UART_MspInit+0x15c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	f040 8091 	bne.w	80029f0 <HAL_UART_MspInit+0x154>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028ce:	f04f 0201 	mov.w	r2, #1
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028da:	2300      	movs	r3, #0
 80028dc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	4618      	mov	r0, r3
 80028e4:	f004 fd34 	bl	8007350 <HAL_RCCEx_PeriphCLKConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80028ee:	f7ff fb7f 	bl	8001ff0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f2:	4b42      	ldr	r3, [pc, #264]	@ (80029fc <HAL_UART_MspInit+0x160>)
 80028f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028f8:	4a40      	ldr	r2, [pc, #256]	@ (80029fc <HAL_UART_MspInit+0x160>)
 80028fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028fe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002902:	4b3e      	ldr	r3, [pc, #248]	@ (80029fc <HAL_UART_MspInit+0x160>)
 8002904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b3a      	ldr	r3, [pc, #232]	@ (80029fc <HAL_UART_MspInit+0x160>)
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002916:	4a39      	ldr	r2, [pc, #228]	@ (80029fc <HAL_UART_MspInit+0x160>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002920:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_UART_MspInit+0x160>)
 8002922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800292e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002948:	2307      	movs	r3, #7
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002952:	4619      	mov	r1, r3
 8002954:	482a      	ldr	r0, [pc, #168]	@ (8002a00 <HAL_UART_MspInit+0x164>)
 8002956:	f002 fe57 	bl	8005608 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel15.Instance = GPDMA1_Channel15;
 800295a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 800295c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a08 <HAL_UART_MspInit+0x16c>)
 800295e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel15.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8002960:	4b28      	ldr	r3, [pc, #160]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 8002962:	2219      	movs	r2, #25
 8002964:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel15.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002966:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel15.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 800296e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002972:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel15.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002974:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 8002976:	2208      	movs	r2, #8
 8002978:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel15.Init.DestInc = DMA_DINC_FIXED;
 800297a:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel15.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002980:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel15.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002986:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel15.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 800298c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 800298e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002992:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel15.Init.SrcBurstLength = 1;
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 8002996:	2201      	movs	r2, #1
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel15.Init.DestBurstLength = 1;
 800299a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 800299c:	2201      	movs	r2, #1
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel15.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80029a0:	4b18      	ldr	r3, [pc, #96]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel15.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel15.Init.Mode = DMA_NORMAL;
 80029ac:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel15) != HAL_OK)
 80029b2:	4814      	ldr	r0, [pc, #80]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 80029b4:	f000 ffaa 	bl	800390c <HAL_DMA_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 80029be:	f7ff fb17 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel15);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 80029c6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel15, DMA_CHANNEL_NPRIV) != HAL_OK)
 80029ce:	2110      	movs	r1, #16
 80029d0:	480c      	ldr	r0, [pc, #48]	@ (8002a04 <HAL_UART_MspInit+0x168>)
 80029d2:	f001 fb2d 	bl	8004030 <HAL_DMA_ConfigChannelAttributes>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 80029dc:	f7ff fb08 	bl	8001ff0 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	203d      	movs	r0, #61	@ 0x3d
 80029e6:	f000 ff11 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029ea:	203d      	movs	r0, #61	@ 0x3d
 80029ec:	f000 ff28 	bl	8003840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80029f0:	bf00      	nop
 80029f2:	37e8      	adds	r7, #232	@ 0xe8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40013800 	.word	0x40013800
 80029fc:	46020c00 	.word	0x46020c00
 8002a00:	42020000 	.word	0x42020000
 8002a04:	2001364c 	.word	0x2001364c
 8002a08:	400207d0 	.word	0x400207d0

08002a0c <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a12:	4a10      	ldr	r2, [pc, #64]	@ (8002a54 <MX_USB_OTG_FS_HCD_Init+0x48>)
 8002a14:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a18:	220c      	movs	r2, #12
 8002a1a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a2e:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	739a      	strb	r2, [r3, #14]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002a3a:	4805      	ldr	r0, [pc, #20]	@ (8002a50 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002a3c:	f002 ffee 	bl	8005a1c <HAL_HCD_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_USB_OTG_FS_HCD_Init+0x3e>
  {
    Error_Handler();
 8002a46:	f7ff fad3 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200136c4 	.word	0x200136c4
 8002a54:	42040000 	.word	0x42040000

08002a58 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b0bc      	sub	sp, #240	@ 0xf0
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a70:	f107 0318 	add.w	r3, r7, #24
 8002a74:	22c0      	movs	r2, #192	@ 0xc0
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f00c f874 	bl	800eb66 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a38      	ldr	r2, [pc, #224]	@ (8002b64 <HAL_HCD_MspInit+0x10c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d169      	bne.n	8002b5c <HAL_HCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002a88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9a:	f107 0318 	add.w	r3, r7, #24
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fc56 	bl	8007350 <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 8002aaa:	f7ff faa1 	bl	8001ff0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002abe:	4b2a      	ldr	r3, [pc, #168]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002acc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ad0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002af0:	4619      	mov	r1, r3
 8002af2:	481e      	ldr	r0, [pc, #120]	@ (8002b6c <HAL_HCD_MspInit+0x114>)
 8002af4:	f002 fd88 	bl	8005608 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002afe:	4a1a      	ldr	r2, [pc, #104]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b08:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d119      	bne.n	8002b58 <HAL_HCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b24:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002b42:	f003 f8e1 	bl	8005d08 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4c:	4a06      	ldr	r2, [pc, #24]	@ (8002b68 <HAL_HCD_MspInit+0x110>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002b56:	e001      	b.n	8002b5c <HAL_HCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8002b58:	f003 f8d6 	bl	8005d08 <HAL_PWREx_EnableVddUSB>
}
 8002b5c:	bf00      	nop
 8002b5e:	37f0      	adds	r7, #240	@ 0xf0
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	42040000 	.word	0x42040000
 8002b68:	46020c00 	.word	0x46020c00
 8002b6c:	42020000 	.word	0x42020000

08002b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002b70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ba8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b74:	f7ff fe0c 	bl	8002790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b7a:	e003      	b.n	8002b84 <LoopCopyDataInit>

08002b7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b82:	3104      	adds	r1, #4

08002b84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b84:	480a      	ldr	r0, [pc, #40]	@ (8002bb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b86:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b8c:	d3f6      	bcc.n	8002b7c <CopyDataInit>
	ldr	r2, =_sbss
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b90:	e002      	b.n	8002b98 <LoopFillZerobss>

08002b92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b94:	f842 3b04 	str.w	r3, [r2], #4

08002b98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b98:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <LoopForever+0x16>)
	cmp	r2, r3
 8002b9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b9c:	d3f9      	bcc.n	8002b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b9e:	f00c f83b 	bl	800ec18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ba2:	f7fe fc29 	bl	80013f8 <main>

08002ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ba6:	e7fe      	b.n	8002ba6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002ba8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002bac:	08030064 	.word	0x08030064
	ldr	r0, =_sdata
 8002bb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bb4:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8002bb8:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8002bbc:	20013c00 	.word	0x20013c00

08002bc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bc0:	e7fe      	b.n	8002bc0 <ADC1_IRQHandler>
	...

08002bc4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	@ 0x38
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d009      	beq.n	8002bf0 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <BSP_LED_Init+0x2c>
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d003      	beq.n	8002bf0 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002be8:	f06f 0301 	mvn.w	r3, #1
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bee:	e06e      	b.n	8002cce <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10f      	bne.n	8002c16 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8002bf6:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bfc:	4a36      	ldr	r2, [pc, #216]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c06:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	e046      	b.n	8002ca4 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10f      	bne.n	8002c3c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c22:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	e033      	b.n	8002ca4 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3c:	4b26      	ldr	r3, [pc, #152]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d110      	bne.n	8002c6c <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c50:	4a21      	ldr	r2, [pc, #132]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8002c6c:	f003 f85c 	bl	8005d28 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c76:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7c:	4a16      	ldr	r2, [pc, #88]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8002c86:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c8c:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <BSP_LED_Init+0x114>)
 8002c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <BSP_LED_Init+0x118>)
 8002ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <BSP_LED_Init+0x11c>)
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	f107 021c 	add.w	r2, r7, #28
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 fc9d 	bl	8005608 <HAL_GPIO_Init>
  }

  return ret;
 8002cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3738      	adds	r7, #56	@ 0x38
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	46020c00 	.word	0x46020c00
 8002cdc:	08012710 	.word	0x08012710
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	460a      	mov	r2, r1
 8002cee:	71fb      	strb	r3, [r7, #7]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002cf4:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <BSP_PB_Init+0xd4>)
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8002db8 <BSP_PB_Init+0xd4>)
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d04:	4b2c      	ldr	r3, [pc, #176]	@ (8002db8 <BSP_PB_Init+0xd4>)
 8002d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d16:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002d20:	79bb      	ldrb	r3, [r7, #6]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <BSP_PB_Init+0xd8>)
 8002d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d32:	f107 020c 	add.w	r2, r7, #12
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f002 fc65 	bl	8005608 <HAL_GPIO_Init>
 8002d3e:	e036      	b.n	8002dae <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <BSP_PB_Init+0xdc>)
 8002d42:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <BSP_PB_Init+0xd8>)
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	f107 020c 	add.w	r2, r7, #12
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 fc58 	bl	8005608 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <BSP_PB_Init+0xe0>)
 8002d64:	441a      	add	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	4917      	ldr	r1, [pc, #92]	@ (8002dc8 <BSP_PB_Init+0xe4>)
 8002d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f002 fbec 	bl	800554e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002d76:	79fa      	ldrb	r2, [r7, #7]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4a10      	ldr	r2, [pc, #64]	@ (8002dc4 <BSP_PB_Init+0xe0>)
 8002d82:	1898      	adds	r0, r3, r2
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <BSP_PB_Init+0xe8>)
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f002 fbb1 	bl	80054f6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002d94:	2018      	movs	r0, #24
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <BSP_PB_Init+0xec>)
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4619      	mov	r1, r3
 8002da2:	f000 fd33 	bl	800380c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002da6:	2318      	movs	r3, #24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fd49 	bl	8003840 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	46020c00 	.word	0x46020c00
 8002dbc:	20000010 	.word	0x20000010
 8002dc0:	10110000 	.word	0x10110000
 8002dc4:	20013aa4 	.word	0x20013aa4
 8002dc8:	08012718 	.word	0x08012718
 8002dcc:	20000014 	.word	0x20000014
 8002dd0:	20000018 	.word	0x20000018

08002dd4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002dde:	79fa      	ldrb	r2, [r7, #7]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4a04      	ldr	r2, [pc, #16]	@ (8002dfc <BSP_PB_IRQHandler+0x28>)
 8002dea:	4413      	add	r3, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 fbc3 	bl	8005578 <HAL_EXTI_IRQHandler>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20013aa4 	.word	0x20013aa4

08002e00 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff fff0 	bl	8002e00 <BSP_PB_Callback>
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e28:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <HAL_Init+0x50>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a11      	ldr	r2, [pc, #68]	@ (8002e74 <HAL_Init+0x50>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e34:	2003      	movs	r0, #3
 8002e36:	f000 fcde 	bl	80037f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e3a:	f004 f873 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4b0d      	ldr	r3, [pc, #52]	@ (8002e78 <HAL_Init+0x54>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <HAL_Init+0x58>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e50:	4a0b      	ldr	r2, [pc, #44]	@ (8002e80 <HAL_Init+0x5c>)
 8002e52:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e54:	2004      	movs	r0, #4
 8002e56:	f000 fd01 	bl	800385c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7ff faea 	bl	8002434 <HAL_InitTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e002      	b.n	8002e70 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e6a:	f7ff fac3 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40022000 	.word	0x40022000
 8002e78:	46020c00 	.word	0x46020c00
 8002e7c:	080126b8 	.word	0x080126b8
 8002e80:	20000000 	.word	0x20000000

08002e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_IncTick+0x20>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_IncTick+0x24>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <HAL_IncTick+0x24>)
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000020 	.word	0x20000020
 8002ea8:	20013ab0 	.word	0x20013ab0

08002eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_GetTick+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20013ab0 	.word	0x20013ab0

08002ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff ffee 	bl	8002eac <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d005      	beq.n	8002eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_Delay+0x44>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eea:	bf00      	nop
 8002eec:	f7ff ffde 	bl	8002eac <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d8f7      	bhi.n	8002eec <HAL_Delay+0x28>
  {
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000020 	.word	0x20000020

08002f0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <LL_ADC_SetResolution+0x3c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d104      	bne.n	8002f54 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f023 020c 	bic.w	r2, r3, #12
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	46021000 	.word	0x46021000

08002f74 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	2a00      	cmp	r2, #0
 8002f9e:	d002      	beq.n	8002fa6 <LL_ADC_SetGainCompensation+0x32>
 8002fa0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_SetGainCompensation+0x34>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2107      	movs	r1, #7
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	401a      	ands	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003008:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6093      	str	r3, [r2, #8]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800302c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003030:	d101      	bne.n	8003036 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003058:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003080:	d101      	bne.n	8003086 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <LL_ADC_IsEnabled+0x18>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <LL_ADC_IsEnabled+0x1a>
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d101      	bne.n	80030d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d101      	bne.n	80030f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e2b3      	b.n	8003690 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a8b      	ldr	r2, [pc, #556]	@ (8003364 <HAL_ADC_Init+0x25c>)
 8003136:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fd ffdd 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5f 	bl	800301c <LL_ADC_IsDeepPowerDownEnabled>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff45 	bl	8002ff8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff7a 	bl	800306c <LL_ADC_IsInternalRegulatorEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d115      	bne.n	80031aa <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff5e 	bl	8003044 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003188:	4b77      	ldr	r3, [pc, #476]	@ (8003368 <HAL_ADC_Init+0x260>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	099b      	lsrs	r3, r3, #6
 800318e:	4a77      	ldr	r2, [pc, #476]	@ (800336c <HAL_ADC_Init+0x264>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	099b      	lsrs	r3, r3, #6
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800319c:	e002      	b.n	80031a4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f9      	bne.n	800319e <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff5c 	bl	800306c <LL_ADC_IsInternalRegulatorEnabled>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031be:	f043 0210 	orr.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff6c 	bl	80030ba <LL_ADC_REG_IsConversionOngoing>
 80031e2:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 8244 	bne.w	800367a <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 8240 	bne.w	800367a <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003202:	f043 0202 	orr.w	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff40 	bl	8003094 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d140      	bne.n	800329c <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a51      	ldr	r2, [pc, #324]	@ (8003364 <HAL_ADC_Init+0x25c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d028      	beq.n	8003276 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a51      	ldr	r2, [pc, #324]	@ (8003370 <HAL_ADC_Init+0x268>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d109      	bne.n	8003242 <HAL_ADC_Init+0x13a>
 800322e:	4850      	ldr	r0, [pc, #320]	@ (8003370 <HAL_ADC_Init+0x268>)
 8003230:	f7ff ff30 	bl	8003094 <LL_ADC_IsEnabled>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e008      	b.n	8003254 <HAL_ADC_Init+0x14c>
 8003242:	4848      	ldr	r0, [pc, #288]	@ (8003364 <HAL_ADC_Init+0x25c>)
 8003244:	f7ff ff26 	bl	8003094 <LL_ADC_IsEnabled>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a44      	ldr	r2, [pc, #272]	@ (8003370 <HAL_ADC_Init+0x268>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_ADC_Init+0x15e>
 8003262:	4a44      	ldr	r2, [pc, #272]	@ (8003374 <HAL_ADC_Init+0x26c>)
 8003264:	e000      	b.n	8003268 <HAL_ADC_Init+0x160>
 8003266:	4a44      	ldr	r2, [pc, #272]	@ (8003378 <HAL_ADC_Init+0x270>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f7ff fe4c 	bl	8002f0c <LL_ADC_SetCommonClock>
 8003274:	e012      	b.n	800329c <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7ff fe57 	bl	8002f34 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003286:	4b3c      	ldr	r3, [pc, #240]	@ (8003378 <HAL_ADC_Init+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003296:	4938      	ldr	r1, [pc, #224]	@ (8003378 <HAL_ADC_Init+0x270>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_ADC_Init+0x25c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d010      	beq.n	80032c8 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032ac:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032b2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80032b8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80032c0:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80032c2:	4313      	orrs	r3, r2
 80032c4:	623b      	str	r3, [r7, #32]
 80032c6:	e030      	b.n	800332a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7f1b      	ldrb	r3, [r3, #28]
 80032cc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032d4:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032d6:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032dc:	2a00      	cmp	r2, #0
 80032de:	d002      	beq.n	80032e6 <HAL_ADC_Init+0x1de>
 80032e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032e4:	e000      	b.n	80032e8 <HAL_ADC_Init+0x1e0>
 80032e6:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032e8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80032ee:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	da04      	bge.n	8003302 <HAL_ADC_Init+0x1fa>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003300:	e001      	b.n	8003306 <HAL_ADC_Init+0x1fe>
 8003302:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003306:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4918      	ldr	r1, [pc, #96]	@ (8003370 <HAL_ADC_Init+0x268>)
 800330e:	428b      	cmp	r3, r1
 8003310:	d103      	bne.n	800331a <HAL_ADC_Init+0x212>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003318:	e003      	b.n	8003322 <HAL_ADC_Init+0x21a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003320:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003322:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	4313      	orrs	r3, r2
 8003328:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d12f      	bne.n	8003394 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	@ (8003364 <HAL_ADC_Init+0x25c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	3b01      	subs	r3, #1
 8003344:	045b      	lsls	r3, r3, #17
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	4313      	orrs	r3, r2
 800334a:	623b      	str	r3, [r7, #32]
 800334c:	e022      	b.n	8003394 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d111      	bne.n	800337c <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	e018      	b.n	8003394 <HAL_ADC_Init+0x28c>
 8003362:	bf00      	nop
 8003364:	46021000 	.word	0x46021000
 8003368:	20000000 	.word	0x20000000
 800336c:	053e2d63 	.word	0x053e2d63
 8003370:	42028000 	.word	0x42028000
 8003374:	42028308 	.word	0x42028308
 8003378:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a92      	ldr	r2, [pc, #584]	@ (80035e4 <HAL_ADC_Init+0x4dc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033aa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	4313      	orrs	r3, r2
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4b89      	ldr	r3, [pc, #548]	@ (80035e8 <HAL_ADC_Init+0x4e0>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	6a39      	ldr	r1, [r7, #32]
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
 80033ce:	e031      	b.n	8003434 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033dc:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	4313      	orrs	r3, r2
 80033e6:	6a3a      	ldr	r2, [r7, #32]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b7e      	ldr	r3, [pc, #504]	@ (80035ec <HAL_ADC_Init+0x4e4>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	6a39      	ldr	r1, [r7, #32]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6a      	ldr	r2, [pc, #424]	@ (80035e4 <HAL_ADC_Init+0x4dc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	f000 8093 	beq.w	8003566 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fe38 	bl	80030ba <LL_ADC_REG_IsConversionOngoing>
 800344a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fe45 	bl	80030e0 <LL_ADC_INJ_IsConversionOngoing>
 8003456:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d161      	bne.n	8003522 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d15e      	bne.n	8003522 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7f1b      	ldrb	r3, [r3, #28]
 8003468:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4960      	ldr	r1, [pc, #384]	@ (80035f0 <HAL_ADC_Init+0x4e8>)
 8003470:	428b      	cmp	r3, r1
 8003472:	d102      	bne.n	800347a <HAL_ADC_Init+0x372>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	e002      	b.n	8003480 <HAL_ADC_Init+0x378>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003480:	4313      	orrs	r3, r2
 8003482:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	6a39      	ldr	r1, [r7, #32]
 8003498:	430b      	orrs	r3, r1
 800349a:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7ff fd60 	bl	8002f74 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d11e      	bne.n	80034fc <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c2:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	4b4a      	ldr	r3, [pc, #296]	@ (80035f4 <HAL_ADC_Init+0x4ec>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034d2:	0411      	lsls	r1, r2, #16
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80034e4:	4311      	orrs	r1, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034ea:	0892      	lsrs	r2, r2, #2
 80034ec:	430a      	orrs	r2, r1
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
 80034fa:	e007      	b.n	800350c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10c      	bne.n	8003544 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	f023 010f 	bic.w	r1, r3, #15
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
 8003542:	e007      	b.n	8003554 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 020f 	bic.w	r2, r2, #15
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003558:	f023 0303 	bic.w	r3, r3, #3
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003564:	e092      	b.n	800368c <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800356c:	2b01      	cmp	r3, #1
 800356e:	d111      	bne.n	8003594 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003578:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800357e:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003584:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	4313      	orrs	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	4b17      	ldr	r3, [pc, #92]	@ (80035f8 <HAL_ADC_Init+0x4f0>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	69f9      	ldr	r1, [r7, #28]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b0:	461a      	mov	r2, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	f7ff fd01 	bl	8002fba <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c0:	461a      	mov	r2, r3
 80035c2:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80035c6:	f7ff fcf8 	bl	8002fba <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d114      	bne.n	80035fc <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f062 020f 	orn	r2, r2, #15
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e2:	e024      	b.n	800362e <HAL_ADC_Init+0x526>
 80035e4:	46021000 	.word	0x46021000
 80035e8:	fff0c013 	.word	0xfff0c013
 80035ec:	ffde800d 	.word	0xffde800d
 80035f0:	42028000 	.word	0x42028000
 80035f4:	fc00f81e 	.word	0xfc00f81e
 80035f8:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003604:	d113      	bne.n	800362e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	f003 031c 	and.w	r3, r3, #28
 8003618:	f06f 020f 	mvn.w	r2, #15
 800361c:	fa02 f103 	lsl.w	r1, r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <HAL_ADC_Init+0x590>)
 8003636:	4013      	ands	r3, r2
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	429a      	cmp	r2, r3
 800363c:	d10b      	bne.n	8003656 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003648:	f023 0303 	bic.w	r3, r3, #3
 800364c:	f043 0201 	orr.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003654:	e01a      	b.n	800368c <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800365a:	f023 0312 	bic.w	r3, r3, #18
 800365e:	f043 0210 	orr.w	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003678:	e008      	b.n	800368c <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800368c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	@ 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	833ffff3 	.word	0x833ffff3

0800369c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <__NVIC_SetPriorityGrouping+0x44>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036b8:	4013      	ands	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ce:	4a04      	ldr	r2, [pc, #16]	@ (80036e0 <__NVIC_SetPriorityGrouping+0x44>)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	60d3      	str	r3, [r2, #12]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <__NVIC_GetPriorityGrouping+0x18>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	f003 0307 	and.w	r3, r3, #7
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	2b00      	cmp	r3, #0
 8003710:	db0b      	blt.n	800372a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	4907      	ldr	r1, [pc, #28]	@ (8003738 <__NVIC_EnableIRQ+0x38>)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2001      	movs	r0, #1
 8003722:	fa00 f202 	lsl.w	r2, r0, r2
 8003726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	e000e100 	.word	0xe000e100

0800373c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	6039      	str	r1, [r7, #0]
 8003746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	2b00      	cmp	r3, #0
 800374e:	db0a      	blt.n	8003766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	490c      	ldr	r1, [pc, #48]	@ (8003788 <__NVIC_SetPriority+0x4c>)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	0112      	lsls	r2, r2, #4
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	440b      	add	r3, r1
 8003760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003764:	e00a      	b.n	800377c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4908      	ldr	r1, [pc, #32]	@ (800378c <__NVIC_SetPriority+0x50>)
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	3b04      	subs	r3, #4
 8003774:	0112      	lsls	r2, r2, #4
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	440b      	add	r3, r1
 800377a:	761a      	strb	r2, [r3, #24]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000e100 	.word	0xe000e100
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	@ 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f1c3 0307 	rsb	r3, r3, #7
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	bf28      	it	cs
 80037ae:	2304      	movcs	r3, #4
 80037b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d902      	bls.n	80037c0 <NVIC_EncodePriority+0x30>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3b03      	subs	r3, #3
 80037be:	e000      	b.n	80037c2 <NVIC_EncodePriority+0x32>
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43da      	mvns	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	401a      	ands	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d8:	f04f 31ff 	mov.w	r1, #4294967295
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	43d9      	mvns	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e8:	4313      	orrs	r3, r2
         );
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3724      	adds	r7, #36	@ 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff4c 	bl	800369c <__NVIC_SetPriorityGrouping>
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800381a:	f7ff ff63 	bl	80036e4 <__NVIC_GetPriorityGrouping>
 800381e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	6978      	ldr	r0, [r7, #20]
 8003826:	f7ff ffb3 	bl	8003790 <NVIC_EncodePriority>
 800382a:	4602      	mov	r2, r0
 800382c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff82 	bl	800373c <__NVIC_SetPriority>
}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff56 	bl	8003700 <__NVIC_EnableIRQ>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b04      	cmp	r3, #4
 8003868:	d844      	bhi.n	80038f4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800386a:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003893 	.word	0x08003893
 8003874:	080038b1 	.word	0x080038b1
 8003878:	080038d3 	.word	0x080038d3
 800387c:	080038f5 	.word	0x080038f5
 8003880:	08003885 	.word	0x08003885
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003884:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	6013      	str	r3, [r2, #0]
      break;
 8003890:	e031      	b.n	80038f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003892:	4b1c      	ldr	r3, [pc, #112]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1b      	ldr	r2, [pc, #108]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800389e:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a4:	4a18      	ldr	r2, [pc, #96]	@ (8003908 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80038ae:	e022      	b.n	80038f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80038b0:	4b14      	ldr	r3, [pc, #80]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a13      	ldr	r2, [pc, #76]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80038bc:	4b12      	ldr	r3, [pc, #72]	@ (8003908 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038c2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038c6:	4a10      	ldr	r2, [pc, #64]	@ (8003908 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80038d0:	e011      	b.n	80038f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80038de:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038e4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038e8:	4a07      	ldr	r2, [pc, #28]	@ (8003908 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80038ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80038f2:	e000      	b.n	80038f6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80038f4:	bf00      	nop
  }
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000e010 	.word	0xe000e010
 8003908:	46020c00 	.word	0x46020c00

0800390c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7ff faca 	bl	8002eac <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0db      	b.n	8003adc <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae4 <HAL_DMA_Init+0x1d8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	f000 809f 	beq.w	8003a6e <HAL_DMA_Init+0x162>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6c      	ldr	r2, [pc, #432]	@ (8003ae8 <HAL_DMA_Init+0x1dc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	f000 8099 	beq.w	8003a6e <HAL_DMA_Init+0x162>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6a      	ldr	r2, [pc, #424]	@ (8003aec <HAL_DMA_Init+0x1e0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	f000 8093 	beq.w	8003a6e <HAL_DMA_Init+0x162>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a68      	ldr	r2, [pc, #416]	@ (8003af0 <HAL_DMA_Init+0x1e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	f000 808d 	beq.w	8003a6e <HAL_DMA_Init+0x162>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a66      	ldr	r2, [pc, #408]	@ (8003af4 <HAL_DMA_Init+0x1e8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	f000 8087 	beq.w	8003a6e <HAL_DMA_Init+0x162>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a64      	ldr	r2, [pc, #400]	@ (8003af8 <HAL_DMA_Init+0x1ec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	f000 8081 	beq.w	8003a6e <HAL_DMA_Init+0x162>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a62      	ldr	r2, [pc, #392]	@ (8003afc <HAL_DMA_Init+0x1f0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d07b      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a61      	ldr	r2, [pc, #388]	@ (8003b00 <HAL_DMA_Init+0x1f4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d076      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a5f      	ldr	r2, [pc, #380]	@ (8003b04 <HAL_DMA_Init+0x1f8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d071      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a5e      	ldr	r2, [pc, #376]	@ (8003b08 <HAL_DMA_Init+0x1fc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d06c      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a5c      	ldr	r2, [pc, #368]	@ (8003b0c <HAL_DMA_Init+0x200>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d067      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b10 <HAL_DMA_Init+0x204>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d062      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a59      	ldr	r2, [pc, #356]	@ (8003b14 <HAL_DMA_Init+0x208>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d05d      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a58      	ldr	r2, [pc, #352]	@ (8003b18 <HAL_DMA_Init+0x20c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d058      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_DMA_Init+0x210>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d053      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a55      	ldr	r2, [pc, #340]	@ (8003b20 <HAL_DMA_Init+0x214>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04e      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a53      	ldr	r2, [pc, #332]	@ (8003b24 <HAL_DMA_Init+0x218>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d049      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a52      	ldr	r2, [pc, #328]	@ (8003b28 <HAL_DMA_Init+0x21c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d044      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a50      	ldr	r2, [pc, #320]	@ (8003b2c <HAL_DMA_Init+0x220>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03f      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003b30 <HAL_DMA_Init+0x224>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d03a      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003b34 <HAL_DMA_Init+0x228>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d035      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a4c      	ldr	r2, [pc, #304]	@ (8003b38 <HAL_DMA_Init+0x22c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d030      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a4a      	ldr	r2, [pc, #296]	@ (8003b3c <HAL_DMA_Init+0x230>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02b      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a49      	ldr	r2, [pc, #292]	@ (8003b40 <HAL_DMA_Init+0x234>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d026      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a47      	ldr	r2, [pc, #284]	@ (8003b44 <HAL_DMA_Init+0x238>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d021      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a46      	ldr	r2, [pc, #280]	@ (8003b48 <HAL_DMA_Init+0x23c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01c      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a44      	ldr	r2, [pc, #272]	@ (8003b4c <HAL_DMA_Init+0x240>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d017      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a43      	ldr	r2, [pc, #268]	@ (8003b50 <HAL_DMA_Init+0x244>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d012      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a41      	ldr	r2, [pc, #260]	@ (8003b54 <HAL_DMA_Init+0x248>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00d      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a40      	ldr	r2, [pc, #256]	@ (8003b58 <HAL_DMA_Init+0x24c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d008      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a3e      	ldr	r2, [pc, #248]	@ (8003b5c <HAL_DMA_Init+0x250>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <HAL_DMA_Init+0x162>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b60 <HAL_DMA_Init+0x254>)
 8003a6c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0206 	orr.w	r2, r2, #6
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003a8e:	e00f      	b.n	8003ab0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003a90:	f7ff fa0c 	bl	8002eac <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d908      	bls.n	8003ab0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e015      	b.n	8003adc <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e8      	bne.n	8003a90 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fb18 	bl	80040f4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40020050 	.word	0x40020050
 8003ae8:	50020050 	.word	0x50020050
 8003aec:	400200d0 	.word	0x400200d0
 8003af0:	500200d0 	.word	0x500200d0
 8003af4:	40020150 	.word	0x40020150
 8003af8:	50020150 	.word	0x50020150
 8003afc:	400201d0 	.word	0x400201d0
 8003b00:	500201d0 	.word	0x500201d0
 8003b04:	40020250 	.word	0x40020250
 8003b08:	50020250 	.word	0x50020250
 8003b0c:	400202d0 	.word	0x400202d0
 8003b10:	500202d0 	.word	0x500202d0
 8003b14:	40020350 	.word	0x40020350
 8003b18:	50020350 	.word	0x50020350
 8003b1c:	400203d0 	.word	0x400203d0
 8003b20:	500203d0 	.word	0x500203d0
 8003b24:	40020450 	.word	0x40020450
 8003b28:	50020450 	.word	0x50020450
 8003b2c:	400204d0 	.word	0x400204d0
 8003b30:	500204d0 	.word	0x500204d0
 8003b34:	40020550 	.word	0x40020550
 8003b38:	50020550 	.word	0x50020550
 8003b3c:	400205d0 	.word	0x400205d0
 8003b40:	500205d0 	.word	0x500205d0
 8003b44:	40020650 	.word	0x40020650
 8003b48:	50020650 	.word	0x50020650
 8003b4c:	400206d0 	.word	0x400206d0
 8003b50:	500206d0 	.word	0x500206d0
 8003b54:	40020750 	.word	0x40020750
 8003b58:	50020750 	.word	0x50020750
 8003b5c:	400207d0 	.word	0x400207d0
 8003b60:	500207d0 	.word	0x500207d0

08003b64 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e04f      	b.n	8003c1c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_DMA_Start_IT+0x26>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e048      	b.n	8003c1c <HAL_DMA_Start_IT+0xb8>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d136      	bne.n	8003c0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fa78 	bl	80040a8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003bc6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bde:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bf6:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e007      	b.n	8003c1c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2240      	movs	r2, #64	@ 0x40
 8003c10:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003c2c:	f7ff f93e 	bl	8002eac <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e06b      	b.n	8003d14 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d008      	beq.n	8003c5a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e05c      	b.n	8003d14 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0204 	orr.w	r2, r2, #4
 8003c68:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003c72:	e020      	b.n	8003cb6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003c74:	f7ff f91a 	bl	8002eac <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d919      	bls.n	8003cb6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2203      	movs	r2, #3
 8003c92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e02e      	b.n	8003d14 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0d7      	beq.n	8003c74 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0202 	orr.w	r2, r2, #2
 8003cd2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003ce4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfe:	2201      	movs	r2, #1
 8003d00:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e019      	b.n	8003d62 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d004      	beq.n	8003d44 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e00e      	b.n	8003d62 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2204      	movs	r2, #4
 8003d48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d5a:	f043 0304 	orr.w	r3, r3, #4
 8003d5e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003d7e:	f023 030f 	bic.w	r3, r3, #15
 8003d82:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	3b50      	subs	r3, #80	@ 0x50
 8003d8e:	09db      	lsrs	r3, r3, #7
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2201      	movs	r2, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 813b 	beq.w	8004024 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dd2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d011      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e04:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d011      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e36:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d011      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e68:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	f043 0208 	orr.w	r2, r3, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00c      	beq.n	8003eac <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e9a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04c      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d045      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ed0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d12e      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eec:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0202 	orr.w	r2, r2, #2
 8003efc:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f16:	2201      	movs	r2, #1
 8003f18:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d07a      	beq.n	8004028 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
        }

        return;
 8003f3a:	e075      	b.n	8004028 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2205      	movs	r2, #5
 8003f40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d039      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d032      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d116      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d111      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	731a      	strb	r2, [r3, #12]
 8003fa0:	e008      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003fbc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d025      	beq.n	800402a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0202 	orr.w	r2, r2, #2
 8003fec:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004006:	2201      	movs	r2, #1
 8004008:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e002      	b.n	800402a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004028:	bf00      	nop
    }
  }
}
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e02b      	b.n	800409c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800404c:	f023 030f 	bic.w	r3, r3, #15
 8004050:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405a:	3b50      	subs	r3, #80	@ 0x50
 800405c:	09db      	lsrs	r3, r3, #7
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2201      	movs	r2, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f003 0311 	and.w	r3, r3, #17
 800407a:	2b11      	cmp	r3, #17
 800407c:	d106      	bne.n	800408c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	e006      	b.n	800409a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	43db      	mvns	r3, r3
 8004094:	401a      	ands	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	b291      	uxth	r1, r2
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80040d4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	430a      	orrs	r2, r1
 8004114:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a53      	ldr	r2, [pc, #332]	@ (8004280 <DMA_Init+0x18c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	f000 80a0 	beq.w	800427a <DMA_Init+0x186>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a51      	ldr	r2, [pc, #324]	@ (8004284 <DMA_Init+0x190>)
 8004140:	4293      	cmp	r3, r2
 8004142:	f000 809a 	beq.w	800427a <DMA_Init+0x186>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4f      	ldr	r2, [pc, #316]	@ (8004288 <DMA_Init+0x194>)
 800414c:	4293      	cmp	r3, r2
 800414e:	f000 8094 	beq.w	800427a <DMA_Init+0x186>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a4d      	ldr	r2, [pc, #308]	@ (800428c <DMA_Init+0x198>)
 8004158:	4293      	cmp	r3, r2
 800415a:	f000 808e 	beq.w	800427a <DMA_Init+0x186>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4b      	ldr	r2, [pc, #300]	@ (8004290 <DMA_Init+0x19c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	f000 8088 	beq.w	800427a <DMA_Init+0x186>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a49      	ldr	r2, [pc, #292]	@ (8004294 <DMA_Init+0x1a0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f000 8082 	beq.w	800427a <DMA_Init+0x186>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a47      	ldr	r2, [pc, #284]	@ (8004298 <DMA_Init+0x1a4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d07c      	beq.n	800427a <DMA_Init+0x186>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a45      	ldr	r2, [pc, #276]	@ (800429c <DMA_Init+0x1a8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d077      	beq.n	800427a <DMA_Init+0x186>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a44      	ldr	r2, [pc, #272]	@ (80042a0 <DMA_Init+0x1ac>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d072      	beq.n	800427a <DMA_Init+0x186>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a42      	ldr	r2, [pc, #264]	@ (80042a4 <DMA_Init+0x1b0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d06d      	beq.n	800427a <DMA_Init+0x186>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a41      	ldr	r2, [pc, #260]	@ (80042a8 <DMA_Init+0x1b4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d068      	beq.n	800427a <DMA_Init+0x186>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3f      	ldr	r2, [pc, #252]	@ (80042ac <DMA_Init+0x1b8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d063      	beq.n	800427a <DMA_Init+0x186>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3e      	ldr	r2, [pc, #248]	@ (80042b0 <DMA_Init+0x1bc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d05e      	beq.n	800427a <DMA_Init+0x186>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3c      	ldr	r2, [pc, #240]	@ (80042b4 <DMA_Init+0x1c0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d059      	beq.n	800427a <DMA_Init+0x186>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3b      	ldr	r2, [pc, #236]	@ (80042b8 <DMA_Init+0x1c4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d054      	beq.n	800427a <DMA_Init+0x186>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a39      	ldr	r2, [pc, #228]	@ (80042bc <DMA_Init+0x1c8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d04f      	beq.n	800427a <DMA_Init+0x186>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <DMA_Init+0x1cc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d04a      	beq.n	800427a <DMA_Init+0x186>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a36      	ldr	r2, [pc, #216]	@ (80042c4 <DMA_Init+0x1d0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d045      	beq.n	800427a <DMA_Init+0x186>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a35      	ldr	r2, [pc, #212]	@ (80042c8 <DMA_Init+0x1d4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d040      	beq.n	800427a <DMA_Init+0x186>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a33      	ldr	r2, [pc, #204]	@ (80042cc <DMA_Init+0x1d8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d03b      	beq.n	800427a <DMA_Init+0x186>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a32      	ldr	r2, [pc, #200]	@ (80042d0 <DMA_Init+0x1dc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d036      	beq.n	800427a <DMA_Init+0x186>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <DMA_Init+0x1e0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d031      	beq.n	800427a <DMA_Init+0x186>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2f      	ldr	r2, [pc, #188]	@ (80042d8 <DMA_Init+0x1e4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d02c      	beq.n	800427a <DMA_Init+0x186>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <DMA_Init+0x1e8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d027      	beq.n	800427a <DMA_Init+0x186>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2c      	ldr	r2, [pc, #176]	@ (80042e0 <DMA_Init+0x1ec>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d022      	beq.n	800427a <DMA_Init+0x186>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2a      	ldr	r2, [pc, #168]	@ (80042e4 <DMA_Init+0x1f0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01d      	beq.n	800427a <DMA_Init+0x186>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a29      	ldr	r2, [pc, #164]	@ (80042e8 <DMA_Init+0x1f4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d018      	beq.n	800427a <DMA_Init+0x186>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a27      	ldr	r2, [pc, #156]	@ (80042ec <DMA_Init+0x1f8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <DMA_Init+0x186>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a26      	ldr	r2, [pc, #152]	@ (80042f0 <DMA_Init+0x1fc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00e      	beq.n	800427a <DMA_Init+0x186>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a24      	ldr	r2, [pc, #144]	@ (80042f4 <DMA_Init+0x200>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d009      	beq.n	800427a <DMA_Init+0x186>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a23      	ldr	r2, [pc, #140]	@ (80042f8 <DMA_Init+0x204>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <DMA_Init+0x186>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a21      	ldr	r2, [pc, #132]	@ (80042fc <DMA_Init+0x208>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d142      	bne.n	8004300 <DMA_Init+0x20c>
 800427a:	2301      	movs	r3, #1
 800427c:	e041      	b.n	8004302 <DMA_Init+0x20e>
 800427e:	bf00      	nop
 8004280:	40020050 	.word	0x40020050
 8004284:	50020050 	.word	0x50020050
 8004288:	400200d0 	.word	0x400200d0
 800428c:	500200d0 	.word	0x500200d0
 8004290:	40020150 	.word	0x40020150
 8004294:	50020150 	.word	0x50020150
 8004298:	400201d0 	.word	0x400201d0
 800429c:	500201d0 	.word	0x500201d0
 80042a0:	40020250 	.word	0x40020250
 80042a4:	50020250 	.word	0x50020250
 80042a8:	400202d0 	.word	0x400202d0
 80042ac:	500202d0 	.word	0x500202d0
 80042b0:	40020350 	.word	0x40020350
 80042b4:	50020350 	.word	0x50020350
 80042b8:	400203d0 	.word	0x400203d0
 80042bc:	500203d0 	.word	0x500203d0
 80042c0:	40020450 	.word	0x40020450
 80042c4:	50020450 	.word	0x50020450
 80042c8:	400204d0 	.word	0x400204d0
 80042cc:	500204d0 	.word	0x500204d0
 80042d0:	40020550 	.word	0x40020550
 80042d4:	50020550 	.word	0x50020550
 80042d8:	400205d0 	.word	0x400205d0
 80042dc:	500205d0 	.word	0x500205d0
 80042e0:	40020650 	.word	0x40020650
 80042e4:	50020650 	.word	0x50020650
 80042e8:	400206d0 	.word	0x400206d0
 80042ec:	500206d0 	.word	0x500206d0
 80042f0:	40020750 	.word	0x40020750
 80042f4:	50020750 	.word	0x50020750
 80042f8:	400207d0 	.word	0x400207d0
 80042fc:	500207d0 	.word	0x500207d0
 8004300:	2300      	movs	r3, #0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	051b      	lsls	r3, r3, #20
 8004312:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004316:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	3b01      	subs	r3, #1
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004324:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	430a      	orrs	r2, r1
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800435e:	f040 80b0 	bne.w	80044c2 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a82      	ldr	r2, [pc, #520]	@ (8004570 <DMA_Init+0x47c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	f000 80a0 	beq.w	80044ae <DMA_Init+0x3ba>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a80      	ldr	r2, [pc, #512]	@ (8004574 <DMA_Init+0x480>)
 8004374:	4293      	cmp	r3, r2
 8004376:	f000 809a 	beq.w	80044ae <DMA_Init+0x3ba>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7e      	ldr	r2, [pc, #504]	@ (8004578 <DMA_Init+0x484>)
 8004380:	4293      	cmp	r3, r2
 8004382:	f000 8094 	beq.w	80044ae <DMA_Init+0x3ba>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a7c      	ldr	r2, [pc, #496]	@ (800457c <DMA_Init+0x488>)
 800438c:	4293      	cmp	r3, r2
 800438e:	f000 808e 	beq.w	80044ae <DMA_Init+0x3ba>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a7a      	ldr	r2, [pc, #488]	@ (8004580 <DMA_Init+0x48c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	f000 8088 	beq.w	80044ae <DMA_Init+0x3ba>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a78      	ldr	r2, [pc, #480]	@ (8004584 <DMA_Init+0x490>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	f000 8082 	beq.w	80044ae <DMA_Init+0x3ba>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a76      	ldr	r2, [pc, #472]	@ (8004588 <DMA_Init+0x494>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d07c      	beq.n	80044ae <DMA_Init+0x3ba>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a74      	ldr	r2, [pc, #464]	@ (800458c <DMA_Init+0x498>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d077      	beq.n	80044ae <DMA_Init+0x3ba>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a73      	ldr	r2, [pc, #460]	@ (8004590 <DMA_Init+0x49c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d072      	beq.n	80044ae <DMA_Init+0x3ba>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a71      	ldr	r2, [pc, #452]	@ (8004594 <DMA_Init+0x4a0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d06d      	beq.n	80044ae <DMA_Init+0x3ba>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a70      	ldr	r2, [pc, #448]	@ (8004598 <DMA_Init+0x4a4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d068      	beq.n	80044ae <DMA_Init+0x3ba>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6e      	ldr	r2, [pc, #440]	@ (800459c <DMA_Init+0x4a8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d063      	beq.n	80044ae <DMA_Init+0x3ba>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6d      	ldr	r2, [pc, #436]	@ (80045a0 <DMA_Init+0x4ac>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d05e      	beq.n	80044ae <DMA_Init+0x3ba>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6b      	ldr	r2, [pc, #428]	@ (80045a4 <DMA_Init+0x4b0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d059      	beq.n	80044ae <DMA_Init+0x3ba>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6a      	ldr	r2, [pc, #424]	@ (80045a8 <DMA_Init+0x4b4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d054      	beq.n	80044ae <DMA_Init+0x3ba>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	@ (80045ac <DMA_Init+0x4b8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d04f      	beq.n	80044ae <DMA_Init+0x3ba>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a67      	ldr	r2, [pc, #412]	@ (80045b0 <DMA_Init+0x4bc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d04a      	beq.n	80044ae <DMA_Init+0x3ba>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	@ (80045b4 <DMA_Init+0x4c0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d045      	beq.n	80044ae <DMA_Init+0x3ba>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a64      	ldr	r2, [pc, #400]	@ (80045b8 <DMA_Init+0x4c4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d040      	beq.n	80044ae <DMA_Init+0x3ba>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a62      	ldr	r2, [pc, #392]	@ (80045bc <DMA_Init+0x4c8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d03b      	beq.n	80044ae <DMA_Init+0x3ba>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a61      	ldr	r2, [pc, #388]	@ (80045c0 <DMA_Init+0x4cc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d036      	beq.n	80044ae <DMA_Init+0x3ba>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a5f      	ldr	r2, [pc, #380]	@ (80045c4 <DMA_Init+0x4d0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d031      	beq.n	80044ae <DMA_Init+0x3ba>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5e      	ldr	r2, [pc, #376]	@ (80045c8 <DMA_Init+0x4d4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d02c      	beq.n	80044ae <DMA_Init+0x3ba>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5c      	ldr	r2, [pc, #368]	@ (80045cc <DMA_Init+0x4d8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d027      	beq.n	80044ae <DMA_Init+0x3ba>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a5b      	ldr	r2, [pc, #364]	@ (80045d0 <DMA_Init+0x4dc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d022      	beq.n	80044ae <DMA_Init+0x3ba>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a59      	ldr	r2, [pc, #356]	@ (80045d4 <DMA_Init+0x4e0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01d      	beq.n	80044ae <DMA_Init+0x3ba>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a58      	ldr	r2, [pc, #352]	@ (80045d8 <DMA_Init+0x4e4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d018      	beq.n	80044ae <DMA_Init+0x3ba>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a56      	ldr	r2, [pc, #344]	@ (80045dc <DMA_Init+0x4e8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <DMA_Init+0x3ba>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a55      	ldr	r2, [pc, #340]	@ (80045e0 <DMA_Init+0x4ec>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <DMA_Init+0x3ba>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a53      	ldr	r2, [pc, #332]	@ (80045e4 <DMA_Init+0x4f0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d009      	beq.n	80044ae <DMA_Init+0x3ba>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a52      	ldr	r2, [pc, #328]	@ (80045e8 <DMA_Init+0x4f4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <DMA_Init+0x3ba>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a50      	ldr	r2, [pc, #320]	@ (80045ec <DMA_Init+0x4f8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <DMA_Init+0x3be>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <DMA_Init+0x3c0>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e008      	b.n	80044d4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ca:	d103      	bne.n	80044d4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044d2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044da:	4b45      	ldr	r3, [pc, #276]	@ (80045f0 <DMA_Init+0x4fc>)
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2200      	movs	r2, #0
 80044ee:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a36      	ldr	r2, [pc, #216]	@ (80045d0 <DMA_Init+0x4dc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d022      	beq.n	8004540 <DMA_Init+0x44c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a35      	ldr	r2, [pc, #212]	@ (80045d4 <DMA_Init+0x4e0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d01d      	beq.n	8004540 <DMA_Init+0x44c>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a33      	ldr	r2, [pc, #204]	@ (80045d8 <DMA_Init+0x4e4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d018      	beq.n	8004540 <DMA_Init+0x44c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a32      	ldr	r2, [pc, #200]	@ (80045dc <DMA_Init+0x4e8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <DMA_Init+0x44c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a30      	ldr	r2, [pc, #192]	@ (80045e0 <DMA_Init+0x4ec>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <DMA_Init+0x44c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2f      	ldr	r2, [pc, #188]	@ (80045e4 <DMA_Init+0x4f0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <DMA_Init+0x44c>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2d      	ldr	r2, [pc, #180]	@ (80045e8 <DMA_Init+0x4f4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <DMA_Init+0x44c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2c      	ldr	r2, [pc, #176]	@ (80045ec <DMA_Init+0x4f8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <DMA_Init+0x450>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <DMA_Init+0x452>
 8004544:	2300      	movs	r3, #0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40020050 	.word	0x40020050
 8004574:	50020050 	.word	0x50020050
 8004578:	400200d0 	.word	0x400200d0
 800457c:	500200d0 	.word	0x500200d0
 8004580:	40020150 	.word	0x40020150
 8004584:	50020150 	.word	0x50020150
 8004588:	400201d0 	.word	0x400201d0
 800458c:	500201d0 	.word	0x500201d0
 8004590:	40020250 	.word	0x40020250
 8004594:	50020250 	.word	0x50020250
 8004598:	400202d0 	.word	0x400202d0
 800459c:	500202d0 	.word	0x500202d0
 80045a0:	40020350 	.word	0x40020350
 80045a4:	50020350 	.word	0x50020350
 80045a8:	400203d0 	.word	0x400203d0
 80045ac:	500203d0 	.word	0x500203d0
 80045b0:	40020450 	.word	0x40020450
 80045b4:	50020450 	.word	0x50020450
 80045b8:	400204d0 	.word	0x400204d0
 80045bc:	500204d0 	.word	0x500204d0
 80045c0:	40020550 	.word	0x40020550
 80045c4:	50020550 	.word	0x50020550
 80045c8:	400205d0 	.word	0x400205d0
 80045cc:	500205d0 	.word	0x500205d0
 80045d0:	40020650 	.word	0x40020650
 80045d4:	50020650 	.word	0x50020650
 80045d8:	400206d0 	.word	0x400206d0
 80045dc:	500206d0 	.word	0x500206d0
 80045e0:	40020750 	.word	0x40020750
 80045e4:	50020750 	.word	0x50020750
 80045e8:	400207d0 	.word	0x400207d0
 80045ec:	500207d0 	.word	0x500207d0
 80045f0:	3cc03180 	.word	0x3cc03180

080045f4 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80045fc:	f7fe fc56 	bl	8002eac <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0db      	b.n	80047c4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6e      	ldr	r2, [pc, #440]	@ (80047cc <HAL_DMAEx_List_Init+0x1d8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	f000 809f 	beq.w	8004756 <HAL_DMAEx_List_Init+0x162>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a6c      	ldr	r2, [pc, #432]	@ (80047d0 <HAL_DMAEx_List_Init+0x1dc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f000 8099 	beq.w	8004756 <HAL_DMAEx_List_Init+0x162>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6a      	ldr	r2, [pc, #424]	@ (80047d4 <HAL_DMAEx_List_Init+0x1e0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	f000 8093 	beq.w	8004756 <HAL_DMAEx_List_Init+0x162>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a68      	ldr	r2, [pc, #416]	@ (80047d8 <HAL_DMAEx_List_Init+0x1e4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	f000 808d 	beq.w	8004756 <HAL_DMAEx_List_Init+0x162>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a66      	ldr	r2, [pc, #408]	@ (80047dc <HAL_DMAEx_List_Init+0x1e8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f000 8087 	beq.w	8004756 <HAL_DMAEx_List_Init+0x162>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a64      	ldr	r2, [pc, #400]	@ (80047e0 <HAL_DMAEx_List_Init+0x1ec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	f000 8081 	beq.w	8004756 <HAL_DMAEx_List_Init+0x162>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a62      	ldr	r2, [pc, #392]	@ (80047e4 <HAL_DMAEx_List_Init+0x1f0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d07b      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a61      	ldr	r2, [pc, #388]	@ (80047e8 <HAL_DMAEx_List_Init+0x1f4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d076      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a5f      	ldr	r2, [pc, #380]	@ (80047ec <HAL_DMAEx_List_Init+0x1f8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d071      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a5e      	ldr	r2, [pc, #376]	@ (80047f0 <HAL_DMAEx_List_Init+0x1fc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d06c      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a5c      	ldr	r2, [pc, #368]	@ (80047f4 <HAL_DMAEx_List_Init+0x200>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d067      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a5b      	ldr	r2, [pc, #364]	@ (80047f8 <HAL_DMAEx_List_Init+0x204>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d062      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a59      	ldr	r2, [pc, #356]	@ (80047fc <HAL_DMAEx_List_Init+0x208>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d05d      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a58      	ldr	r2, [pc, #352]	@ (8004800 <HAL_DMAEx_List_Init+0x20c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d058      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a56      	ldr	r2, [pc, #344]	@ (8004804 <HAL_DMAEx_List_Init+0x210>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d053      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a55      	ldr	r2, [pc, #340]	@ (8004808 <HAL_DMAEx_List_Init+0x214>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d04e      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a53      	ldr	r2, [pc, #332]	@ (800480c <HAL_DMAEx_List_Init+0x218>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d049      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a52      	ldr	r2, [pc, #328]	@ (8004810 <HAL_DMAEx_List_Init+0x21c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d044      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a50      	ldr	r2, [pc, #320]	@ (8004814 <HAL_DMAEx_List_Init+0x220>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d03f      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4f      	ldr	r2, [pc, #316]	@ (8004818 <HAL_DMAEx_List_Init+0x224>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d03a      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a4d      	ldr	r2, [pc, #308]	@ (800481c <HAL_DMAEx_List_Init+0x228>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d035      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a4c      	ldr	r2, [pc, #304]	@ (8004820 <HAL_DMAEx_List_Init+0x22c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d030      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004824 <HAL_DMAEx_List_Init+0x230>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02b      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a49      	ldr	r2, [pc, #292]	@ (8004828 <HAL_DMAEx_List_Init+0x234>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d026      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a47      	ldr	r2, [pc, #284]	@ (800482c <HAL_DMAEx_List_Init+0x238>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d021      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a46      	ldr	r2, [pc, #280]	@ (8004830 <HAL_DMAEx_List_Init+0x23c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01c      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a44      	ldr	r2, [pc, #272]	@ (8004834 <HAL_DMAEx_List_Init+0x240>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d017      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a43      	ldr	r2, [pc, #268]	@ (8004838 <HAL_DMAEx_List_Init+0x244>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d012      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a41      	ldr	r2, [pc, #260]	@ (800483c <HAL_DMAEx_List_Init+0x248>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00d      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a40      	ldr	r2, [pc, #256]	@ (8004840 <HAL_DMAEx_List_Init+0x24c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d008      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a3e      	ldr	r2, [pc, #248]	@ (8004844 <HAL_DMAEx_List_Init+0x250>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <HAL_DMAEx_List_Init+0x162>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3d      	ldr	r2, [pc, #244]	@ (8004848 <HAL_DMAEx_List_Init+0x254>)
 8004754:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0206 	orr.w	r2, r2, #6
 8004774:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004776:	e00f      	b.n	8004798 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004778:	f7fe fb98 	bl	8002eac <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b05      	cmp	r3, #5
 8004784:	d908      	bls.n	8004798 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2210      	movs	r2, #16
 800478a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2203      	movs	r2, #3
 8004790:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e015      	b.n	80047c4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e8      	bne.n	8004778 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 faba 	bl	8004d20 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40020050 	.word	0x40020050
 80047d0:	50020050 	.word	0x50020050
 80047d4:	400200d0 	.word	0x400200d0
 80047d8:	500200d0 	.word	0x500200d0
 80047dc:	40020150 	.word	0x40020150
 80047e0:	50020150 	.word	0x50020150
 80047e4:	400201d0 	.word	0x400201d0
 80047e8:	500201d0 	.word	0x500201d0
 80047ec:	40020250 	.word	0x40020250
 80047f0:	50020250 	.word	0x50020250
 80047f4:	400202d0 	.word	0x400202d0
 80047f8:	500202d0 	.word	0x500202d0
 80047fc:	40020350 	.word	0x40020350
 8004800:	50020350 	.word	0x50020350
 8004804:	400203d0 	.word	0x400203d0
 8004808:	500203d0 	.word	0x500203d0
 800480c:	40020450 	.word	0x40020450
 8004810:	50020450 	.word	0x50020450
 8004814:	400204d0 	.word	0x400204d0
 8004818:	500204d0 	.word	0x500204d0
 800481c:	40020550 	.word	0x40020550
 8004820:	50020550 	.word	0x50020550
 8004824:	400205d0 	.word	0x400205d0
 8004828:	500205d0 	.word	0x500205d0
 800482c:	40020650 	.word	0x40020650
 8004830:	50020650 	.word	0x50020650
 8004834:	400206d0 	.word	0x400206d0
 8004838:	500206d0 	.word	0x500206d0
 800483c:	40020750 	.word	0x40020750
 8004840:	50020750 	.word	0x50020750
 8004844:	400207d0 	.word	0x400207d0
 8004848:	500207d0 	.word	0x500207d0

0800484c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_DMAEx_List_Start_IT+0x16>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e082      	b.n	800496c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800486c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004878:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d005      	beq.n	800488c <HAL_DMAEx_List_Start_IT+0x40>
 8004880:	7dfb      	ldrb	r3, [r7, #23]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d16a      	bne.n	800495c <HAL_DMAEx_List_Start_IT+0x110>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d067      	beq.n	800495c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d157      	bne.n	8004948 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_DMAEx_List_Start_IT+0x5a>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e062      	b.n	800496c <HAL_DMAEx_List_Start_IT+0x120>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	2202      	movs	r2, #2
 80048bc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80048da:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800490a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f107 010c 	add.w	r1, r7, #12
 8004916:	2200      	movs	r2, #0
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fd1d 	bl	8005358 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4619      	mov	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	0c0b      	lsrs	r3, r1, #16
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800493c:	4013      	ands	r3, r2
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	430b      	orrs	r3, r1
 8004946:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e007      	b.n	800496c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2240      	movs	r2, #64	@ 0x40
 8004960:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_DMAEx_List_BuildNode+0x16>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e004      	b.n	8004998 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb1d 	bl	8004fd0 <DMA_List_BuildNode>

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	@ 0x30
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_DMAEx_List_InsertNode+0x18>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0b6      	b.n	8004b2a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d104      	bne.n	80049ce <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2204      	movs	r2, #4
 80049c8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0ad      	b.n	8004b2a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fc52 	bl	8005280 <DMA_List_CheckNodesBaseAddresses>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2205      	movs	r2, #5
 80049e6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e09e      	b.n	8004b2a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fc73 	bl	80052e0 <DMA_List_CheckNodesTypes>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2204      	movs	r2, #4
 8004a04:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e08f      	b.n	8004b2a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8004a16:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fc99 	bl	8005358 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11a      	bne.n	8004a64 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	e06c      	b.n	8004b1c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004a4e:	4013      	ands	r3, r2
 8004a50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a54:	4319      	orrs	r1, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	e05b      	b.n	8004b1c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004a74:	4013      	ands	r3, r2
 8004a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a7a:	4319      	orrs	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e043      	b.n	8004b12 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	461a      	mov	r2, r3
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fc8e 	bl	80053b8 <DMA_List_FindNode>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d132      	bne.n	8004b08 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d11a      	bne.n	8004ae2 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004abe:	4013      	ands	r3, r2
 8004ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ac4:	4319      	orrs	r1, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ad6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad8:	4319      	orrs	r1, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004ae0:	e017      	b.n	8004b12 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8004ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004af8:	4013      	ands	r3, r2
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004afe:	4319      	orrs	r1, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b06:	e004      	b.n	8004b12 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2206      	movs	r2, #6
 8004b0c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00b      	b.n	8004b2a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3730      	adds	r7, #48	@ 0x30
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b08a      	sub	sp, #40	@ 0x28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e052      	b.n	8004bea <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e049      	b.n	8004bea <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d101      	bne.n	8004b6e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e03d      	b.n	8004bea <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2204      	movs	r2, #4
 8004b72:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e038      	b.n	8004bea <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d104      	bne.n	8004b8a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2204      	movs	r2, #4
 8004b84:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e02f      	b.n	8004bea <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f107 0220 	add.w	r2, r7, #32
 8004b9e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fbd8 	bl	8005358 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fbff 	bl	80053b8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4610      	mov	r0, r2
 8004bcc:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004bce:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004bd0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3728      	adds	r7, #40	@ 0x28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_DMAEx_List_LinkQ+0x16>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e072      	b.n	8004cf4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004c14:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d002      	beq.n	8004c28 <HAL_DMAEx_List_LinkQ+0x34>
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d108      	bne.n	8004c3a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2240      	movs	r2, #64	@ 0x40
 8004c2c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e05c      	b.n	8004cf4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	7b1b      	ldrb	r3, [r3, #12]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d104      	bne.n	8004c4e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e052      	b.n	8004cf4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2b      	ldr	r2, [pc, #172]	@ (8004d00 <HAL_DMAEx_List_LinkQ+0x10c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_DMAEx_List_LinkQ+0xaa>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a29      	ldr	r2, [pc, #164]	@ (8004d04 <HAL_DMAEx_List_LinkQ+0x110>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d01d      	beq.n	8004c9e <HAL_DMAEx_List_LinkQ+0xaa>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a28      	ldr	r2, [pc, #160]	@ (8004d08 <HAL_DMAEx_List_LinkQ+0x114>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_DMAEx_List_LinkQ+0xaa>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a26      	ldr	r2, [pc, #152]	@ (8004d0c <HAL_DMAEx_List_LinkQ+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_DMAEx_List_LinkQ+0xaa>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a25      	ldr	r2, [pc, #148]	@ (8004d10 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_DMAEx_List_LinkQ+0xaa>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a23      	ldr	r2, [pc, #140]	@ (8004d14 <HAL_DMAEx_List_LinkQ+0x120>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_DMAEx_List_LinkQ+0xaa>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a22      	ldr	r2, [pc, #136]	@ (8004d18 <HAL_DMAEx_List_LinkQ+0x124>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_DMAEx_List_LinkQ+0xaa>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a20      	ldr	r2, [pc, #128]	@ (8004d1c <HAL_DMAEx_List_LinkQ+0x128>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_DMAEx_List_LinkQ+0xae>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_DMAEx_List_LinkQ+0xb0>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e019      	b.n	8004cf4 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc4:	2b81      	cmp	r3, #129	@ 0x81
 8004cc6:	d108      	bne.n	8004cda <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00c      	b.n	8004cf4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e003      	b.n	8004cf4 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40020650 	.word	0x40020650
 8004d04:	50020650 	.word	0x50020650
 8004d08:	400206d0 	.word	0x400206d0
 8004d0c:	500206d0 	.word	0x500206d0
 8004d10:	40020750 	.word	0x40020750
 8004d14:	50020750 	.word	0x50020750
 8004d18:	400207d0 	.word	0x400207d0
 8004d1c:	500207d0 	.word	0x500207d0

08004d20 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a85      	ldr	r2, [pc, #532]	@ (8004f50 <DMA_List_Init+0x230>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	f000 80a0 	beq.w	8004e80 <DMA_List_Init+0x160>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a83      	ldr	r2, [pc, #524]	@ (8004f54 <DMA_List_Init+0x234>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	f000 809a 	beq.w	8004e80 <DMA_List_Init+0x160>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a81      	ldr	r2, [pc, #516]	@ (8004f58 <DMA_List_Init+0x238>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f000 8094 	beq.w	8004e80 <DMA_List_Init+0x160>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a7f      	ldr	r2, [pc, #508]	@ (8004f5c <DMA_List_Init+0x23c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	f000 808e 	beq.w	8004e80 <DMA_List_Init+0x160>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a7d      	ldr	r2, [pc, #500]	@ (8004f60 <DMA_List_Init+0x240>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f000 8088 	beq.w	8004e80 <DMA_List_Init+0x160>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a7b      	ldr	r2, [pc, #492]	@ (8004f64 <DMA_List_Init+0x244>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	f000 8082 	beq.w	8004e80 <DMA_List_Init+0x160>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a79      	ldr	r2, [pc, #484]	@ (8004f68 <DMA_List_Init+0x248>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d07c      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a78      	ldr	r2, [pc, #480]	@ (8004f6c <DMA_List_Init+0x24c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d077      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a76      	ldr	r2, [pc, #472]	@ (8004f70 <DMA_List_Init+0x250>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d072      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a75      	ldr	r2, [pc, #468]	@ (8004f74 <DMA_List_Init+0x254>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d06d      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a73      	ldr	r2, [pc, #460]	@ (8004f78 <DMA_List_Init+0x258>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d068      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a72      	ldr	r2, [pc, #456]	@ (8004f7c <DMA_List_Init+0x25c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d063      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a70      	ldr	r2, [pc, #448]	@ (8004f80 <DMA_List_Init+0x260>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d05e      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8004f84 <DMA_List_Init+0x264>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d059      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6d      	ldr	r2, [pc, #436]	@ (8004f88 <DMA_List_Init+0x268>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d054      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6c      	ldr	r2, [pc, #432]	@ (8004f8c <DMA_List_Init+0x26c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d04f      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a6a      	ldr	r2, [pc, #424]	@ (8004f90 <DMA_List_Init+0x270>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d04a      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a69      	ldr	r2, [pc, #420]	@ (8004f94 <DMA_List_Init+0x274>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d045      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a67      	ldr	r2, [pc, #412]	@ (8004f98 <DMA_List_Init+0x278>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d040      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a66      	ldr	r2, [pc, #408]	@ (8004f9c <DMA_List_Init+0x27c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d03b      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a64      	ldr	r2, [pc, #400]	@ (8004fa0 <DMA_List_Init+0x280>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d036      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a63      	ldr	r2, [pc, #396]	@ (8004fa4 <DMA_List_Init+0x284>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d031      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a61      	ldr	r2, [pc, #388]	@ (8004fa8 <DMA_List_Init+0x288>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d02c      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a60      	ldr	r2, [pc, #384]	@ (8004fac <DMA_List_Init+0x28c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d027      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb0 <DMA_List_Init+0x290>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d022      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a5d      	ldr	r2, [pc, #372]	@ (8004fb4 <DMA_List_Init+0x294>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01d      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb8 <DMA_List_Init+0x298>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d018      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5a      	ldr	r2, [pc, #360]	@ (8004fbc <DMA_List_Init+0x29c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a58      	ldr	r2, [pc, #352]	@ (8004fc0 <DMA_List_Init+0x2a0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a57      	ldr	r2, [pc, #348]	@ (8004fc4 <DMA_List_Init+0x2a4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a55      	ldr	r2, [pc, #340]	@ (8004fc8 <DMA_List_Init+0x2a8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <DMA_List_Init+0x160>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a54      	ldr	r2, [pc, #336]	@ (8004fcc <DMA_List_Init+0x2ac>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d101      	bne.n	8004e84 <DMA_List_Init+0x164>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <DMA_List_Init+0x166>
 8004e84:	2300      	movs	r3, #0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004eb8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a36      	ldr	r2, [pc, #216]	@ (8004fb0 <DMA_List_Init+0x290>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d022      	beq.n	8004f22 <DMA_List_Init+0x202>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a34      	ldr	r2, [pc, #208]	@ (8004fb4 <DMA_List_Init+0x294>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01d      	beq.n	8004f22 <DMA_List_Init+0x202>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a33      	ldr	r2, [pc, #204]	@ (8004fb8 <DMA_List_Init+0x298>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d018      	beq.n	8004f22 <DMA_List_Init+0x202>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a31      	ldr	r2, [pc, #196]	@ (8004fbc <DMA_List_Init+0x29c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <DMA_List_Init+0x202>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a30      	ldr	r2, [pc, #192]	@ (8004fc0 <DMA_List_Init+0x2a0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <DMA_List_Init+0x202>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc4 <DMA_List_Init+0x2a4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <DMA_List_Init+0x202>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc8 <DMA_List_Init+0x2a8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <DMA_List_Init+0x202>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <DMA_List_Init+0x2ac>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <DMA_List_Init+0x206>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <DMA_List_Init+0x208>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2200      	movs	r2, #0
 8004f42:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40020050 	.word	0x40020050
 8004f54:	50020050 	.word	0x50020050
 8004f58:	400200d0 	.word	0x400200d0
 8004f5c:	500200d0 	.word	0x500200d0
 8004f60:	40020150 	.word	0x40020150
 8004f64:	50020150 	.word	0x50020150
 8004f68:	400201d0 	.word	0x400201d0
 8004f6c:	500201d0 	.word	0x500201d0
 8004f70:	40020250 	.word	0x40020250
 8004f74:	50020250 	.word	0x50020250
 8004f78:	400202d0 	.word	0x400202d0
 8004f7c:	500202d0 	.word	0x500202d0
 8004f80:	40020350 	.word	0x40020350
 8004f84:	50020350 	.word	0x50020350
 8004f88:	400203d0 	.word	0x400203d0
 8004f8c:	500203d0 	.word	0x500203d0
 8004f90:	40020450 	.word	0x40020450
 8004f94:	50020450 	.word	0x50020450
 8004f98:	400204d0 	.word	0x400204d0
 8004f9c:	500204d0 	.word	0x500204d0
 8004fa0:	40020550 	.word	0x40020550
 8004fa4:	50020550 	.word	0x50020550
 8004fa8:	400205d0 	.word	0x400205d0
 8004fac:	500205d0 	.word	0x500205d0
 8004fb0:	40020650 	.word	0x40020650
 8004fb4:	50020650 	.word	0x50020650
 8004fb8:	400206d0 	.word	0x400206d0
 8004fbc:	500206d0 	.word	0x500206d0
 8004fc0:	40020750 	.word	0x40020750
 8004fc4:	50020750 	.word	0x50020750
 8004fc8:	400207d0 	.word	0x400207d0
 8004fcc:	500207d0 	.word	0x500207d0

08004fd0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004fe2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8004fe8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004fee:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004ff4:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d017      	beq.n	8005036 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	051b      	lsls	r3, r3, #20
 800501c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005020:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	3b01      	subs	r3, #1
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800502e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005030:	431a      	orrs	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	f240 237f 	movw	r3, #639	@ 0x27f
 8005042:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005044:	431a      	orrs	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005052:	d10c      	bne.n	800506e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d011      	beq.n	8005084 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	e00a      	b.n	8005084 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005076:	d105      	bne.n	8005084 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00f      	beq.n	80050ac <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005098:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80050a4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80050a6:	431a      	orrs	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d04e      	beq.n	8005160 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ca:	3b01      	subs	r3, #1
 80050cc:	0419      	lsls	r1, r3, #16
 80050ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005278 <DMA_List_BuildNode+0x2a8>)
 80050d0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 80050d2:	431a      	orrs	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050dc:	2b00      	cmp	r3, #0
 80050de:	da06      	bge.n	80050ee <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	e005      	b.n	80050fa <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	2b00      	cmp	r3, #0
 8005100:	da06      	bge.n	8005110 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	609a      	str	r2, [r3, #8]
 800510e:	e005      	b.n	800511c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005120:	2b00      	cmp	r3, #0
 8005122:	da06      	bge.n	8005132 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	e005      	b.n	800513e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005142:	2b00      	cmp	r3, #0
 8005144:	da06      	bge.n	8005154 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	609a      	str	r2, [r3, #8]
 8005152:	e005      	b.n	8005160 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05d      	beq.n	8005238 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005180:	2b00      	cmp	r3, #0
 8005182:	da09      	bge.n	8005198 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005188:	425b      	negs	r3, r3
 800518a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	615a      	str	r2, [r3, #20]
 8005196:	e005      	b.n	80051a4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da0d      	bge.n	80051c8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b0:	425b      	negs	r3, r3
 80051b2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	0419      	lsls	r1, r3, #16
 80051bc:	4b2f      	ldr	r3, [pc, #188]	@ (800527c <DMA_List_BuildNode+0x2ac>)
 80051be:	400b      	ands	r3, r1
 80051c0:	431a      	orrs	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	615a      	str	r2, [r3, #20]
 80051c6:	e009      	b.n	80051dc <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d0:	0419      	lsls	r1, r3, #16
 80051d2:	4b2a      	ldr	r3, [pc, #168]	@ (800527c <DMA_List_BuildNode+0x2ac>)
 80051d4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 80051d6:	431a      	orrs	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da08      	bge.n	80051f6 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e8:	425b      	negs	r3, r3
 80051ea:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	619a      	str	r2, [r3, #24]
 80051f4:	e004      	b.n	8005200 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fa:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005204:	2b00      	cmp	r3, #0
 8005206:	da0b      	bge.n	8005220 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	425b      	negs	r3, r3
 800520e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005218:	431a      	orrs	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	619a      	str	r2, [r3, #24]
 800521e:	e007      	b.n	8005230 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005228:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800522a:	431a      	orrs	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	61da      	str	r2, [r3, #28]
 8005236:	e002      	b.n	800523e <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d006      	beq.n	8005260 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 800525e:	e005      	b.n	800526c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	621a      	str	r2, [r3, #32]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	07ff0000 	.word	0x07ff0000
 800527c:	1fff0000 	.word	0x1fff0000

08005280 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4313      	orrs	r3, r2
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	e00a      	b.n	80052c2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e004      	b.n	80052c2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	041b      	lsls	r3, r3, #16
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d001      	beq.n	80052d2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	e00e      	b.n	800531e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e006      	b.n	800531e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8005330:	2302      	movs	r3, #2
 8005332:	e00b      	b.n	800534c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	429a      	cmp	r2, r3
 8005344:	d001      	beq.n	800534a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8005346:	2303      	movs	r3, #3
 8005348:	e000      	b.n	800534c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00c      	beq.n	800538a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a0d      	ldr	r2, [pc, #52]	@ (80053b0 <DMA_List_GetCLLRNodeInfo+0x58>)
 800537a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00f      	beq.n	80053a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2207      	movs	r2, #7
 8005386:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005388:	e00b      	b.n	80053a2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a08      	ldr	r2, [pc, #32]	@ (80053b4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005394:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2205      	movs	r2, #5
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	fe010000 	.word	0xfe010000
 80053b4:	f8010000 	.word	0xf8010000

080053b8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b089      	sub	sp, #36	@ 0x24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d142      	bne.n	8005462 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 80053dc:	e01d      	b.n	800541a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d107      	bne.n	80053f4 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80053ee:	4013      	ands	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e00f      	b.n	8005414 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4413      	add	r3, r2
 8005404:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800540c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	429a      	cmp	r2, r3
 8005422:	d3dc      	bcc.n	80053de <DMA_List_FindNode+0x26>
 8005424:	e029      	b.n	800547a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d107      	bne.n	800543c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005436:	4013      	ands	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e00f      	b.n	800545c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4413      	add	r3, r2
 800544c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005454:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	3301      	adds	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	429a      	cmp	r2, r3
 800546a:	d206      	bcs.n	800547a <DMA_List_FindNode+0xc2>
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005472:	4013      	ands	r3, r2
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	429a      	cmp	r2, r3
 8005478:	d1d5      	bne.n	8005426 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005486:	4013      	ands	r3, r2
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	429a      	cmp	r2, r3
 800548c:	d001      	beq.n	8005492 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800548e:	2301      	movs	r3, #1
 8005490:	e02b      	b.n	80054ea <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	041b      	lsls	r3, r3, #16
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	461a      	mov	r2, r3
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00f      	beq.n	80054e8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	461a      	mov	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80054d8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	@ 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80054f6:	b480      	push	{r7}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	460b      	mov	r3, r1
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005508:	7afb      	ldrb	r3, [r7, #11]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d011      	beq.n	8005532 <HAL_EXTI_RegisterCallback+0x3c>
 800550e:	2b02      	cmp	r3, #2
 8005510:	dc13      	bgt.n	800553a <HAL_EXTI_RegisterCallback+0x44>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_EXTI_RegisterCallback+0x26>
 8005516:	2b01      	cmp	r3, #1
 8005518:	d007      	beq.n	800552a <HAL_EXTI_RegisterCallback+0x34>
 800551a:	e00e      	b.n	800553a <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	609a      	str	r2, [r3, #8]
      break;
 8005528:	e00a      	b.n	8005540 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]
      break;
 8005530:	e006      	b.n	8005540 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	609a      	str	r2, [r3, #8]
      break;
 8005538:	e002      	b.n	8005540 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	75fb      	strb	r3, [r7, #23]
      break;
 800553e:	bf00      	nop
  }

  return status;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e003      	b.n	800556a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	2201      	movs	r2, #1
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	4b17      	ldr	r3, [pc, #92]	@ (8005600 <HAL_EXTI_IRQHandler+0x88>)
 80055a2:	4413      	add	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4013      	ands	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <HAL_EXTI_IRQHandler+0x8c>)
 80055d0:	4413      	add	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d009      	beq.n	80055f8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	4798      	blx	r3
    }
  }
}
 80055f8:	bf00      	nop
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	4602200c 	.word	0x4602200c
 8005604:	46022010 	.word	0x46022010

08005608 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	@ 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800561a:	e1ba      	b.n	8005992 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2101      	movs	r1, #1
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 81aa 	beq.w	800598c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a55      	ldr	r2, [pc, #340]	@ (8005790 <HAL_GPIO_Init+0x188>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d15d      	bne.n	80056fc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005646:	2201      	movs	r2, #1
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	4013      	ands	r3, r2
 8005654:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 0201 	and.w	r2, r3, #1
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	4313      	orrs	r3, r2
 8005668:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005670:	4a48      	ldr	r2, [pc, #288]	@ (8005794 <HAL_GPIO_Init+0x18c>)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005678:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800567a:	4a46      	ldr	r2, [pc, #280]	@ (8005794 <HAL_GPIO_Init+0x18c>)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4413      	add	r3, r2
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	08da      	lsrs	r2, r3, #3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3208      	adds	r2, #8
 800568e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005692:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	220f      	movs	r2, #15
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	220b      	movs	r2, #11
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	08da      	lsrs	r2, r3, #3
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3208      	adds	r2, #8
 80056c6:	69f9      	ldr	r1, [r7, #28]
 80056c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	2203      	movs	r2, #3
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	4013      	ands	r3, r2
 80056e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	2202      	movs	r2, #2
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e067      	b.n	80057cc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d003      	beq.n	800570c <HAL_GPIO_Init+0x104>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b12      	cmp	r3, #18
 800570a:	d145      	bne.n	8005798 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	08da      	lsrs	r2, r3, #3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3208      	adds	r2, #8
 8005714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005718:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	220f      	movs	r2, #15
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	4013      	ands	r3, r2
 800572e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 020f 	and.w	r2, r3, #15
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	4313      	orrs	r3, r2
 8005748:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	08da      	lsrs	r2, r3, #3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3208      	adds	r2, #8
 8005752:	69f9      	ldr	r1, [r7, #28]
 8005754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	2203      	movs	r2, #3
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	4013      	ands	r3, r2
 800576e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 0203 	and.w	r2, r3, #3
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	4313      	orrs	r3, r2
 8005784:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e01e      	b.n	80057cc <HAL_GPIO_Init+0x1c4>
 800578e:	bf00      	nop
 8005790:	46020000 	.word	0x46020000
 8005794:	0801271c 	.word	0x0801271c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	2203      	movs	r2, #3
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0203 	and.w	r2, r3, #3
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d00b      	beq.n	80057ec <HAL_GPIO_Init+0x1e4>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d007      	beq.n	80057ec <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057e0:	2b11      	cmp	r3, #17
 80057e2:	d003      	beq.n	80057ec <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b12      	cmp	r3, #18
 80057ea:	d130      	bne.n	800584e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	2203      	movs	r2, #3
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	4013      	ands	r3, r2
 8005802:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	4313      	orrs	r3, r2
 8005814:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005822:	2201      	movs	r2, #1
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	4013      	ands	r3, r2
 8005830:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	091b      	lsrs	r3, r3, #4
 8005838:	f003 0201 	and.w	r2, r3, #1
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	4313      	orrs	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d017      	beq.n	8005886 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	2203      	movs	r2, #3
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43db      	mvns	r3, r3
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	4013      	ands	r3, r2
 800586c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	4313      	orrs	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d07c      	beq.n	800598c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005892:	4a47      	ldr	r2, [pc, #284]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	3318      	adds	r3, #24
 800589a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800589e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	220f      	movs	r2, #15
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	0a9a      	lsrs	r2, r3, #10
 80058ba:	4b3e      	ldr	r3, [pc, #248]	@ (80059b4 <HAL_GPIO_Init+0x3ac>)
 80058bc:	4013      	ands	r3, r2
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	f002 0203 	and.w	r2, r2, #3
 80058c4:	00d2      	lsls	r2, r2, #3
 80058c6:	4093      	lsls	r3, r2
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80058ce:	4938      	ldr	r1, [pc, #224]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	089b      	lsrs	r3, r3, #2
 80058d4:	3318      	adds	r3, #24
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80058dc:	4b34      	ldr	r3, [pc, #208]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005900:	4a2b      	ldr	r2, [pc, #172]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005906:	4b2a      	ldr	r3, [pc, #168]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	43db      	mvns	r3, r3
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	4013      	ands	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800592a:	4a21      	ldr	r2, [pc, #132]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005930:	4b1f      	ldr	r3, [pc, #124]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 8005932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005936:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	43db      	mvns	r3, r3
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	4013      	ands	r3, r2
 8005940:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005956:	4a16      	ldr	r2, [pc, #88]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800595e:	4b14      	ldr	r3, [pc, #80]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005964:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	43db      	mvns	r3, r3
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	4013      	ands	r3, r2
 800596e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005984:	4a0a      	ldr	r2, [pc, #40]	@ (80059b0 <HAL_GPIO_Init+0x3a8>)
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3301      	adds	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f ae3d 	bne.w	800561c <HAL_GPIO_Init+0x14>
  }
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	3724      	adds	r7, #36	@ 0x24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	46022000 	.word	0x46022000
 80059b4:	002f7f7f 	.word	0x002f7f7f

080059b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	807b      	strh	r3, [r7, #2]
 80059c4:	4613      	mov	r3, r2
 80059c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059c8:	787b      	ldrb	r3, [r7, #1]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059ce:	887a      	ldrh	r2, [r7, #2]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80059d4:	e002      	b.n	80059dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80059d6:	887a      	ldrh	r2, [r7, #2]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4013      	ands	r3, r2
 8005a00:	041a      	lsls	r2, r3, #16
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	43d9      	mvns	r1, r3
 8005a06:	887b      	ldrh	r3, [r7, #2]
 8005a08:	400b      	ands	r3, r1
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e059      	b.n	8005ae2 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fd f805 	bl	8002a58 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2203      	movs	r2, #3
 8005a52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a24      	ldr	r2, [pc, #144]	@ (8005aec <HAL_HCD_Init+0xd0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d102      	bne.n	8005a64 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f006 fe64 	bl	800c736 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	7c1a      	ldrb	r2, [r3, #16]
 8005a76:	f88d 2000 	strb.w	r2, [sp]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a7e:	f006 fe2d 	bl	800c6dc <USB_CoreInit>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e026      	b.n	8005ae2 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f006 fe5c 	bl	800c758 <USB_SetCurrentMode>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e017      	b.n	8005ae2 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7c1a      	ldrb	r2, [r3, #16]
 8005aba:	f88d 2000 	strb.w	r2, [sp]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ac2:	f006 ff35 	bl	800c930 <USB_HostInit>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e004      	b.n	8005ae2 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	42040000 	.word	0x42040000

08005af0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	e007      	b.n	8005b1e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005b0e:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f023 0204 	bic.w	r2, r3, #4
 8005b16:	4905      	ldr	r1, [pc, #20]	@ (8005b2c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	40030400 	.word	0x40030400

08005b30 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005b34:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <HAL_ICACHE_Enable+0x1c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a04      	ldr	r2, [pc, #16]	@ (8005b4c <HAL_ICACHE_Enable+0x1c>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40030400 	.word	0x40030400

08005b50 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005b58:	4b39      	ldr	r3, [pc, #228]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b60:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d10b      	bne.n	8005b82 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b70:	d905      	bls.n	8005b7e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005b72:	4b33      	ldr	r3, [pc, #204]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	4a32      	ldr	r2, [pc, #200]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b7c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e057      	b.n	8005c32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b88:	d90a      	bls.n	8005ba0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	4a2a      	ldr	r2, [pc, #168]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b9c:	60d3      	str	r3, [r2, #12]
 8005b9e:	e007      	b.n	8005bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005ba0:	4b27      	ldr	r3, [pc, #156]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005ba8:	4925      	ldr	r1, [pc, #148]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005bb0:	4b24      	ldr	r3, [pc, #144]	@ (8005c44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a24      	ldr	r2, [pc, #144]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	2232      	movs	r2, #50	@ 0x32
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	4a21      	ldr	r2, [pc, #132]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	099b      	lsrs	r3, r3, #6
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005bce:	e002      	b.n	8005bd6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f3      	bne.n	8005bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01b      	beq.n	8005c26 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005bee:	4b15      	ldr	r3, [pc, #84]	@ (8005c44 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	2232      	movs	r2, #50	@ 0x32
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	4a11      	ldr	r2, [pc, #68]	@ (8005c48 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	099b      	lsrs	r3, r3, #6
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005c0c:	e002      	b.n	8005c14 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005c14:	4b0a      	ldr	r3, [pc, #40]	@ (8005c40 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d102      	bne.n	8005c26 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f3      	bne.n	8005c0e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e000      	b.n	8005c32 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	46020800 	.word	0x46020800
 8005c44:	20000000 	.word	0x20000000
 8005c48:	10624dd3 	.word	0x10624dd3

08005c4c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005c50:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	46020800 	.word	0x46020800

08005c68 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005c70:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <HAL_PWREx_ConfigSupply+0x94>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a22      	ldr	r2, [pc, #136]	@ (8005d00 <HAL_PWREx_ConfigSupply+0x98>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	099b      	lsrs	r3, r3, #6
 8005c7c:	2232      	movs	r2, #50	@ 0x32
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a1f      	ldr	r2, [pc, #124]	@ (8005d00 <HAL_PWREx_ConfigSupply+0x98>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d113      	bne.n	8005cbc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005c94:	4b1b      	ldr	r3, [pc, #108]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x9c>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4a1a      	ldr	r2, [pc, #104]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x9c>)
 8005c9a:	f023 0302 	bic.w	r3, r3, #2
 8005c9e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005ca0:	e002      	b.n	8005ca8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005ca8:	4b16      	ldr	r3, [pc, #88]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x9c>)
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d116      	bne.n	8005ce2 <HAL_PWREx_ConfigSupply+0x7a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f3      	bne.n	8005ca2 <HAL_PWREx_ConfigSupply+0x3a>
 8005cba:	e012      	b.n	8005ce2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005cbc:	4b11      	ldr	r3, [pc, #68]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x9c>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a10      	ldr	r2, [pc, #64]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x9c>)
 8005cc2:	f043 0302 	orr.w	r3, r3, #2
 8005cc6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005cc8:	e002      	b.n	8005cd0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <HAL_PWREx_ConfigSupply+0x9c>)
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <HAL_PWREx_ConfigSupply+0x7a>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f3      	bne.n	8005cca <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e000      	b.n	8005cee <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000000 	.word	0x20000000
 8005d00:	10624dd3 	.word	0x10624dd3
 8005d04:	46020800 	.word	0x46020800

08005d08 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	4a04      	ldr	r2, [pc, #16]	@ (8005d24 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	6113      	str	r3, [r2, #16]
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	46020800 	.word	0x46020800

08005d28 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	4a04      	ldr	r2, [pc, #16]	@ (8005d44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d32:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d36:	6113      	str	r3, [r2, #16]
}
 8005d38:	bf00      	nop
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	46020800 	.word	0x46020800

08005d48 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8005d4c:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_PWREx_EnableVddA+0x1c>)
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <HAL_PWREx_EnableVddA+0x1c>)
 8005d52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d56:	6113      	str	r3, [r2, #16]
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	46020800 	.word	0x46020800

08005d68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005d6c:	4b05      	ldr	r3, [pc, #20]	@ (8005d84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	4a04      	ldr	r2, [pc, #16]	@ (8005d84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	46020800 	.word	0x46020800

08005d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08e      	sub	sp, #56	@ 0x38
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f000 bec8 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da2:	4b99      	ldr	r3, [pc, #612]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dac:	4b96      	ldr	r3, [pc, #600]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 816c 	beq.w	800609c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <HAL_RCC_OscConfig+0x52>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	f040 80de 	bne.w	8005f8e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	f040 80da 	bne.w	8005f8e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f000 bea5 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dec:	4b86      	ldr	r3, [pc, #536]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <HAL_RCC_OscConfig+0x7a>
 8005df8:	4b83      	ldr	r3, [pc, #524]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e00:	e005      	b.n	8005e0e <HAL_RCC_OscConfig+0x86>
 8005e02:	4b81      	ldr	r3, [pc, #516]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d255      	bcs.n	8005ebe <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fa11 	bl	8007244 <RCC_SetFlashLatencyFromMSIRange>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f000 be82 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005e2e:	4b76      	ldr	r3, [pc, #472]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	4a75      	ldr	r2, [pc, #468]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e38:	6093      	str	r3, [r2, #8]
 8005e3a:	4b73      	ldr	r3, [pc, #460]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	4970      	ldr	r1, [pc, #448]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e54:	d309      	bcc.n	8005e6a <HAL_RCC_OscConfig+0xe2>
 8005e56:	4b6c      	ldr	r3, [pc, #432]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f023 021f 	bic.w	r2, r3, #31
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	4969      	ldr	r1, [pc, #420]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60cb      	str	r3, [r1, #12]
 8005e68:	e07e      	b.n	8005f68 <HAL_RCC_OscConfig+0x1e0>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	da0a      	bge.n	8005e88 <HAL_RCC_OscConfig+0x100>
 8005e72:	4b65      	ldr	r3, [pc, #404]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	015b      	lsls	r3, r3, #5
 8005e80:	4961      	ldr	r1, [pc, #388]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60cb      	str	r3, [r1, #12]
 8005e86:	e06f      	b.n	8005f68 <HAL_RCC_OscConfig+0x1e0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e90:	d30a      	bcc.n	8005ea8 <HAL_RCC_OscConfig+0x120>
 8005e92:	4b5d      	ldr	r3, [pc, #372]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	4959      	ldr	r1, [pc, #356]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60cb      	str	r3, [r1, #12]
 8005ea6:	e05f      	b.n	8005f68 <HAL_RCC_OscConfig+0x1e0>
 8005ea8:	4b57      	ldr	r3, [pc, #348]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	03db      	lsls	r3, r3, #15
 8005eb6:	4954      	ldr	r1, [pc, #336]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60cb      	str	r3, [r1, #12]
 8005ebc:	e054      	b.n	8005f68 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005ebe:	4b52      	ldr	r3, [pc, #328]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	4a51      	ldr	r2, [pc, #324]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ec4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ec8:	6093      	str	r3, [r2, #8]
 8005eca:	4b4f      	ldr	r3, [pc, #316]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	494c      	ldr	r1, [pc, #304]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005ee4:	d309      	bcc.n	8005efa <HAL_RCC_OscConfig+0x172>
 8005ee6:	4b48      	ldr	r3, [pc, #288]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f023 021f 	bic.w	r2, r3, #31
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	4945      	ldr	r1, [pc, #276]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60cb      	str	r3, [r1, #12]
 8005ef8:	e028      	b.n	8005f4c <HAL_RCC_OscConfig+0x1c4>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da0a      	bge.n	8005f18 <HAL_RCC_OscConfig+0x190>
 8005f02:	4b41      	ldr	r3, [pc, #260]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	015b      	lsls	r3, r3, #5
 8005f10:	493d      	ldr	r1, [pc, #244]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60cb      	str	r3, [r1, #12]
 8005f16:	e019      	b.n	8005f4c <HAL_RCC_OscConfig+0x1c4>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f20:	d30a      	bcc.n	8005f38 <HAL_RCC_OscConfig+0x1b0>
 8005f22:	4b39      	ldr	r3, [pc, #228]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	4935      	ldr	r1, [pc, #212]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60cb      	str	r3, [r1, #12]
 8005f36:	e009      	b.n	8005f4c <HAL_RCC_OscConfig+0x1c4>
 8005f38:	4b33      	ldr	r3, [pc, #204]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	03db      	lsls	r3, r3, #15
 8005f46:	4930      	ldr	r1, [pc, #192]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f974 	bl	8007244 <RCC_SetFlashLatencyFromMSIRange>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f000 bde5 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005f68:	f001 f8de 	bl	8007128 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f6c:	4b27      	ldr	r3, [pc, #156]	@ (800600c <HAL_RCC_OscConfig+0x284>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fc fa5f 	bl	8002434 <HAL_InitTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 808a 	beq.w	800609a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f8a:	f000 bdd2 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d066      	beq.n	8006064 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005f96:	4b1c      	ldr	r3, [pc, #112]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005fa2:	f7fc ff83 	bl	8002eac <HAL_GetTick>
 8005fa6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005fa8:	e009      	b.n	8005fbe <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005faa:	f7fc ff7f 	bl	8002eac <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d902      	bls.n	8005fbe <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	f000 bdba 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005fbe:	4b12      	ldr	r3, [pc, #72]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0ef      	beq.n	8005faa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005fca:	4b0f      	ldr	r3, [pc, #60]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4a0e      	ldr	r2, [pc, #56]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005fd4:	6093      	str	r3, [r2, #8]
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	4909      	ldr	r1, [pc, #36]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005ff0:	d30e      	bcc.n	8006010 <HAL_RCC_OscConfig+0x288>
 8005ff2:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f023 021f 	bic.w	r2, r3, #31
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	4902      	ldr	r1, [pc, #8]	@ (8006008 <HAL_RCC_OscConfig+0x280>)
 8006000:	4313      	orrs	r3, r2
 8006002:	60cb      	str	r3, [r1, #12]
 8006004:	e04a      	b.n	800609c <HAL_RCC_OscConfig+0x314>
 8006006:	bf00      	nop
 8006008:	46020c00 	.word	0x46020c00
 800600c:	2000001c 	.word	0x2000001c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	da0a      	bge.n	800602e <HAL_RCC_OscConfig+0x2a6>
 8006018:	4b98      	ldr	r3, [pc, #608]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	015b      	lsls	r3, r3, #5
 8006026:	4995      	ldr	r1, [pc, #596]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006028:	4313      	orrs	r3, r2
 800602a:	60cb      	str	r3, [r1, #12]
 800602c:	e036      	b.n	800609c <HAL_RCC_OscConfig+0x314>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006036:	d30a      	bcc.n	800604e <HAL_RCC_OscConfig+0x2c6>
 8006038:	4b90      	ldr	r3, [pc, #576]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	498d      	ldr	r1, [pc, #564]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006048:	4313      	orrs	r3, r2
 800604a:	60cb      	str	r3, [r1, #12]
 800604c:	e026      	b.n	800609c <HAL_RCC_OscConfig+0x314>
 800604e:	4b8b      	ldr	r3, [pc, #556]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	03db      	lsls	r3, r3, #15
 800605c:	4987      	ldr	r1, [pc, #540]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800605e:	4313      	orrs	r3, r2
 8006060:	60cb      	str	r3, [r1, #12]
 8006062:	e01b      	b.n	800609c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006064:	4b85      	ldr	r3, [pc, #532]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a84      	ldr	r2, [pc, #528]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006070:	f7fc ff1c 	bl	8002eac <HAL_GetTick>
 8006074:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006076:	e009      	b.n	800608c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006078:	f7fc ff18 	bl	8002eac <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d902      	bls.n	800608c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	f000 bd53 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800608c:	4b7b      	ldr	r3, [pc, #492]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1ef      	bne.n	8006078 <HAL_RCC_OscConfig+0x2f0>
 8006098:	e000      	b.n	800609c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800609a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 808b 	beq.w	80061c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_OscConfig+0x334>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d109      	bne.n	80060ca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d106      	bne.n	80060ca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d17d      	bne.n	80061c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f000 bd34 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d2:	d106      	bne.n	80060e2 <HAL_RCC_OscConfig+0x35a>
 80060d4:	4b69      	ldr	r3, [pc, #420]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a68      	ldr	r2, [pc, #416]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80060da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	e041      	b.n	8006166 <HAL_RCC_OscConfig+0x3de>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060ea:	d112      	bne.n	8006112 <HAL_RCC_OscConfig+0x38a>
 80060ec:	4b63      	ldr	r3, [pc, #396]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a62      	ldr	r2, [pc, #392]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80060f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	4b60      	ldr	r3, [pc, #384]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5f      	ldr	r2, [pc, #380]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80060fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4b5d      	ldr	r3, [pc, #372]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5c      	ldr	r2, [pc, #368]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800610a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e029      	b.n	8006166 <HAL_RCC_OscConfig+0x3de>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800611a:	d112      	bne.n	8006142 <HAL_RCC_OscConfig+0x3ba>
 800611c:	4b57      	ldr	r3, [pc, #348]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a56      	ldr	r2, [pc, #344]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006122:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	4b54      	ldr	r3, [pc, #336]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a53      	ldr	r2, [pc, #332]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800612e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b51      	ldr	r3, [pc, #324]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a50      	ldr	r2, [pc, #320]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800613a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e011      	b.n	8006166 <HAL_RCC_OscConfig+0x3de>
 8006142:	4b4e      	ldr	r3, [pc, #312]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4d      	ldr	r2, [pc, #308]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b4b      	ldr	r3, [pc, #300]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a4a      	ldr	r2, [pc, #296]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	4b48      	ldr	r3, [pc, #288]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a47      	ldr	r2, [pc, #284]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006160:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006164:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d014      	beq.n	8006198 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800616e:	f7fc fe9d 	bl	8002eac <HAL_GetTick>
 8006172:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006174:	e009      	b.n	800618a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006176:	f7fc fe99 	bl	8002eac <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b64      	cmp	r3, #100	@ 0x64
 8006182:	d902      	bls.n	800618a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	f000 bcd4 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800618a:	4b3c      	ldr	r3, [pc, #240]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0ef      	beq.n	8006176 <HAL_RCC_OscConfig+0x3ee>
 8006196:	e013      	b.n	80061c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006198:	f7fc fe88 	bl	8002eac <HAL_GetTick>
 800619c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800619e:	e009      	b.n	80061b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fc fe84 	bl	8002eac <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	@ 0x64
 80061ac:	d902      	bls.n	80061b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	f000 bcbf 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061b4:	4b31      	ldr	r3, [pc, #196]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ef      	bne.n	80061a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d05f      	beq.n	800628c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d005      	beq.n	80061de <HAL_RCC_OscConfig+0x456>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	2b0c      	cmp	r3, #12
 80061d6:	d114      	bne.n	8006202 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d111      	bne.n	8006202 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f000 bca3 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80061ec:	4b23      	ldr	r3, [pc, #140]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	4920      	ldr	r1, [pc, #128]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006200:	e044      	b.n	800628c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d024      	beq.n	8006254 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800620a:	4b1c      	ldr	r3, [pc, #112]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006214:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006216:	f7fc fe49 	bl	8002eac <HAL_GetTick>
 800621a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800621c:	e009      	b.n	8006232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800621e:	f7fc fe45 	bl	8002eac <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d902      	bls.n	8006232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	f000 bc80 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006232:	4b12      	ldr	r3, [pc, #72]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0ef      	beq.n	800621e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800623e:	4b0f      	ldr	r3, [pc, #60]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	041b      	lsls	r3, r3, #16
 800624c:	490b      	ldr	r1, [pc, #44]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800624e:	4313      	orrs	r3, r2
 8006250:	610b      	str	r3, [r1, #16]
 8006252:	e01b      	b.n	800628c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006254:	4b09      	ldr	r3, [pc, #36]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a08      	ldr	r2, [pc, #32]	@ (800627c <HAL_RCC_OscConfig+0x4f4>)
 800625a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800625e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006260:	f7fc fe24 	bl	8002eac <HAL_GetTick>
 8006264:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006266:	e00b      	b.n	8006280 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006268:	f7fc fe20 	bl	8002eac <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d904      	bls.n	8006280 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	f000 bc5b 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
 800627c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006280:	4baf      	ldr	r3, [pc, #700]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1ed      	bne.n	8006268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80c8 	beq.w	800642a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800629a:	2300      	movs	r3, #0
 800629c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a0:	4ba7      	ldr	r3, [pc, #668]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80062a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d111      	bne.n	80062d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ae:	4ba4      	ldr	r3, [pc, #656]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80062b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062b4:	4aa2      	ldr	r2, [pc, #648]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80062b6:	f043 0304 	orr.w	r3, r3, #4
 80062ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80062be:	4ba0      	ldr	r3, [pc, #640]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80062c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80062d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d119      	bne.n	8006312 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80062de:	4b99      	ldr	r3, [pc, #612]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 80062e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e2:	4a98      	ldr	r2, [pc, #608]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 80062e4:	f043 0301 	orr.w	r3, r3, #1
 80062e8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ea:	f7fc fddf 	bl	8002eac <HAL_GetTick>
 80062ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80062f0:	e009      	b.n	8006306 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f2:	f7fc fddb 	bl	8002eac <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d902      	bls.n	8006306 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	f000 bc16 	b.w	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006306:	4b8f      	ldr	r3, [pc, #572]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0ef      	beq.n	80062f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d05f      	beq.n	80063da <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800631a:	4b89      	ldr	r3, [pc, #548]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800631c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006320:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800632c:	429a      	cmp	r2, r3
 800632e:	d037      	beq.n	80063a0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d006      	beq.n	8006348 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e3f4      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01b      	beq.n	800638a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006352:	4b7b      	ldr	r3, [pc, #492]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006358:	4a79      	ldr	r2, [pc, #484]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800635a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800635e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8006362:	f7fc fda3 	bl	8002eac <HAL_GetTick>
 8006366:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800636a:	f7fc fd9f 	bl	8002eac <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b05      	cmp	r3, #5
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e3da      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800637c:	4b70      	ldr	r3, [pc, #448]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800637e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006382:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1ef      	bne.n	800636a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800638a:	4b6d      	ldr	r3, [pc, #436]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800638c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006390:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	4969      	ldr	r1, [pc, #420]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80063a0:	4b67      	ldr	r3, [pc, #412]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80063a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063a6:	4a66      	ldr	r2, [pc, #408]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80063a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80063b0:	f7fc fd7c 	bl	8002eac <HAL_GetTick>
 80063b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b8:	f7fc fd78 	bl	8002eac <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e3b3      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80063ca:	4b5d      	ldr	r3, [pc, #372]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80063cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0ef      	beq.n	80063b8 <HAL_RCC_OscConfig+0x630>
 80063d8:	e01b      	b.n	8006412 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80063da:	4b59      	ldr	r3, [pc, #356]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80063dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063e0:	4a57      	ldr	r2, [pc, #348]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80063e2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80063e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80063ea:	f7fc fd5f 	bl	8002eac <HAL_GetTick>
 80063ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f2:	f7fc fd5b 	bl	8002eac <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b05      	cmp	r3, #5
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e396      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006404:	4b4e      	ldr	r3, [pc, #312]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800640a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1ef      	bne.n	80063f2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006412:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006416:	2b01      	cmp	r3, #1
 8006418:	d107      	bne.n	800642a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800641a:	4b49      	ldr	r3, [pc, #292]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800641c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006420:	4a47      	ldr	r2, [pc, #284]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006422:	f023 0304 	bic.w	r3, r3, #4
 8006426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8111 	beq.w	800665a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006438:	2300      	movs	r3, #0
 800643a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800643e:	4b40      	ldr	r3, [pc, #256]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d111      	bne.n	8006470 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644c:	4b3c      	ldr	r3, [pc, #240]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800644e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006452:	4a3b      	ldr	r2, [pc, #236]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006454:	f043 0304 	orr.w	r3, r3, #4
 8006458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800645c:	4b38      	ldr	r3, [pc, #224]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800645e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006470:	4b34      	ldr	r3, [pc, #208]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d118      	bne.n	80064ae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800647c:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	4a30      	ldr	r2, [pc, #192]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006488:	f7fc fd10 	bl	8002eac <HAL_GetTick>
 800648c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006490:	f7fc fd0c 	bl	8002eac <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e347      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064a2:	4b28      	ldr	r3, [pc, #160]	@ (8006544 <HAL_RCC_OscConfig+0x7bc>)
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0f0      	beq.n	8006490 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01f      	beq.n	80064fa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d010      	beq.n	80064e8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80064c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80064c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80064ce:	f043 0304 	orr.w	r3, r3, #4
 80064d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80064d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064dc:	4a18      	ldr	r2, [pc, #96]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064e6:	e018      	b.n	800651a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064e8:	4b15      	ldr	r3, [pc, #84]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80064ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064ee:	4a14      	ldr	r2, [pc, #80]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80064f8:	e00f      	b.n	800651a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064fa:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 80064fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006500:	4a0f      	ldr	r2, [pc, #60]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 800650c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006510:	4a0b      	ldr	r2, [pc, #44]	@ (8006540 <HAL_RCC_OscConfig+0x7b8>)
 8006512:	f023 0304 	bic.w	r3, r3, #4
 8006516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d057      	beq.n	80065d2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006522:	f7fc fcc3 	bl	8002eac <HAL_GetTick>
 8006526:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006528:	e00e      	b.n	8006548 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fc fcbf 	bl	8002eac <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d905      	bls.n	8006548 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e2f8      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
 8006540:	46020c00 	.word	0x46020c00
 8006544:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006548:	4b9c      	ldr	r3, [pc, #624]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800654a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0e9      	beq.n	800652a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01b      	beq.n	800659a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006562:	4b96      	ldr	r3, [pc, #600]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006568:	4a94      	ldr	r2, [pc, #592]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800656a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006572:	e00a      	b.n	800658a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006574:	f7fc fc9a 	bl	8002eac <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e2d3      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800658a:	4b8c      	ldr	r3, [pc, #560]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800658c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ed      	beq.n	8006574 <HAL_RCC_OscConfig+0x7ec>
 8006598:	e053      	b.n	8006642 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800659a:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800659c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065a0:	4a86      	ldr	r2, [pc, #536]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80065a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ac:	f7fc fc7e 	bl	8002eac <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e2b7      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065c2:	4b7e      	ldr	r3, [pc, #504]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80065c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1ed      	bne.n	80065ac <HAL_RCC_OscConfig+0x824>
 80065d0:	e037      	b.n	8006642 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80065d2:	f7fc fc6b 	bl	8002eac <HAL_GetTick>
 80065d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065d8:	e00a      	b.n	80065f0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fc fc67 	bl	8002eac <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e2a0      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065f0:	4b72      	ldr	r3, [pc, #456]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80065f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1ed      	bne.n	80065da <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80065fe:	4b6f      	ldr	r3, [pc, #444]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01a      	beq.n	8006642 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800660c:	4b6b      	ldr	r3, [pc, #428]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800660e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006612:	4a6a      	ldr	r2, [pc, #424]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006618:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661e:	f7fc fc45 	bl	8002eac <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e27e      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006634:	4b61      	ldr	r3, [pc, #388]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800663a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1ed      	bne.n	800661e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006642:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006646:	2b01      	cmp	r3, #1
 8006648:	d107      	bne.n	800665a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664a:	4b5c      	ldr	r3, [pc, #368]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800664c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006650:	4a5a      	ldr	r2, [pc, #360]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006652:	f023 0304 	bic.w	r3, r3, #4
 8006656:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d036      	beq.n	80066d4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d019      	beq.n	80066a2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800666e:	4b53      	ldr	r3, [pc, #332]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a52      	ldr	r2, [pc, #328]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006674:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006678:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800667a:	f7fc fc17 	bl	8002eac <HAL_GetTick>
 800667e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006682:	f7fc fc13 	bl	8002eac <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e24e      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006694:	4b49      	ldr	r3, [pc, #292]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCC_OscConfig+0x8fa>
 80066a0:	e018      	b.n	80066d4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80066a2:	4b46      	ldr	r3, [pc, #280]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a45      	ldr	r2, [pc, #276]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80066a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066ae:	f7fc fbfd 	bl	8002eac <HAL_GetTick>
 80066b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066b4:	e008      	b.n	80066c8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066b6:	f7fc fbf9 	bl	8002eac <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e234      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80066c8:	4b3c      	ldr	r3, [pc, #240]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1f0      	bne.n	80066b6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d036      	beq.n	800674e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d019      	beq.n	800671c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80066e8:	4b34      	ldr	r3, [pc, #208]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a33      	ldr	r2, [pc, #204]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80066ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80066f4:	f7fc fbda 	bl	8002eac <HAL_GetTick>
 80066f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80066fc:	f7fc fbd6 	bl	8002eac <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e211      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800670e:	4b2b      	ldr	r3, [pc, #172]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x974>
 800671a:	e018      	b.n	800674e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800671c:	4b27      	ldr	r3, [pc, #156]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a26      	ldr	r2, [pc, #152]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006726:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006728:	f7fc fbc0 	bl	8002eac <HAL_GetTick>
 800672c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006730:	f7fc fbbc 	bl	8002eac <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e1f7      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006742:	4b1e      	ldr	r3, [pc, #120]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f0      	bne.n	8006730 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d07f      	beq.n	800685a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675e:	2b00      	cmp	r3, #0
 8006760:	d062      	beq.n	8006828 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006762:	4b16      	ldr	r3, [pc, #88]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	4a15      	ldr	r2, [pc, #84]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006768:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800676c:	6093      	str	r3, [r2, #8]
 800676e:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677a:	4910      	ldr	r1, [pc, #64]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800677c:	4313      	orrs	r3, r2
 800677e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006788:	d309      	bcc.n	800679e <HAL_RCC_OscConfig+0xa16>
 800678a:	4b0c      	ldr	r3, [pc, #48]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f023 021f 	bic.w	r2, r3, #31
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	4909      	ldr	r1, [pc, #36]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 8006798:	4313      	orrs	r3, r2
 800679a:	60cb      	str	r3, [r1, #12]
 800679c:	e02a      	b.n	80067f4 <HAL_RCC_OscConfig+0xa6c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da0c      	bge.n	80067c0 <HAL_RCC_OscConfig+0xa38>
 80067a6:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	015b      	lsls	r3, r3, #5
 80067b4:	4901      	ldr	r1, [pc, #4]	@ (80067bc <HAL_RCC_OscConfig+0xa34>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60cb      	str	r3, [r1, #12]
 80067ba:	e01b      	b.n	80067f4 <HAL_RCC_OscConfig+0xa6c>
 80067bc:	46020c00 	.word	0x46020c00
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d30a      	bcc.n	80067e0 <HAL_RCC_OscConfig+0xa58>
 80067ca:	4ba1      	ldr	r3, [pc, #644]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	499d      	ldr	r1, [pc, #628]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	60cb      	str	r3, [r1, #12]
 80067de:	e009      	b.n	80067f4 <HAL_RCC_OscConfig+0xa6c>
 80067e0:	4b9b      	ldr	r3, [pc, #620]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	03db      	lsls	r3, r3, #15
 80067ee:	4998      	ldr	r1, [pc, #608]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80067f4:	4b96      	ldr	r3, [pc, #600]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a95      	ldr	r2, [pc, #596]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80067fa:	f043 0310 	orr.w	r3, r3, #16
 80067fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006800:	f7fc fb54 	bl	8002eac <HAL_GetTick>
 8006804:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006808:	f7fc fb50 	bl	8002eac <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e18b      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800681a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f0      	beq.n	8006808 <HAL_RCC_OscConfig+0xa80>
 8006826:	e018      	b.n	800685a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006828:	4b89      	ldr	r3, [pc, #548]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a88      	ldr	r2, [pc, #544]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800682e:	f023 0310 	bic.w	r3, r3, #16
 8006832:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006834:	f7fc fb3a 	bl	8002eac <HAL_GetTick>
 8006838:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800683c:	f7fc fb36 	bl	8002eac <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e171      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800684e:	4b80      	ldr	r3, [pc, #512]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8166 	beq.w	8006b30 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800686a:	4b79      	ldr	r3, [pc, #484]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	f003 030c 	and.w	r3, r3, #12
 8006872:	2b0c      	cmp	r3, #12
 8006874:	f000 80f2 	beq.w	8006a5c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687c:	2b02      	cmp	r3, #2
 800687e:	f040 80c5 	bne.w	8006a0c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006882:	4b73      	ldr	r3, [pc, #460]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a72      	ldr	r2, [pc, #456]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006888:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800688c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800688e:	f7fc fb0d 	bl	8002eac <HAL_GetTick>
 8006892:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006896:	f7fc fb09 	bl	8002eac <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e144      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80068a8:	4b69      	ldr	r3, [pc, #420]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f0      	bne.n	8006896 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068b4:	4b66      	ldr	r3, [pc, #408]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80068b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d111      	bne.n	80068e6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80068c2:	4b63      	ldr	r3, [pc, #396]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80068c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068c8:	4a61      	ldr	r2, [pc, #388]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80068ca:	f043 0304 	orr.w	r3, r3, #4
 80068ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80068d2:	4b5f      	ldr	r3, [pc, #380]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80068d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80068e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006a54 <HAL_RCC_OscConfig+0xccc>)
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068f2:	d102      	bne.n	80068fa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80068fa:	4b56      	ldr	r3, [pc, #344]	@ (8006a54 <HAL_RCC_OscConfig+0xccc>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	4a55      	ldr	r2, [pc, #340]	@ (8006a54 <HAL_RCC_OscConfig+0xccc>)
 8006900:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006904:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006906:	4b52      	ldr	r3, [pc, #328]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800691a:	3a01      	subs	r2, #1
 800691c:	0212      	lsls	r2, r2, #8
 800691e:	4311      	orrs	r1, r2
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006924:	430a      	orrs	r2, r1
 8006926:	494a      	ldr	r1, [pc, #296]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006928:	4313      	orrs	r3, r2
 800692a:	628b      	str	r3, [r1, #40]	@ 0x28
 800692c:	4b48      	ldr	r3, [pc, #288]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800692e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006930:	4b49      	ldr	r3, [pc, #292]	@ (8006a58 <HAL_RCC_OscConfig+0xcd0>)
 8006932:	4013      	ands	r3, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006938:	3a01      	subs	r2, #1
 800693a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006942:	3a01      	subs	r2, #1
 8006944:	0252      	lsls	r2, r2, #9
 8006946:	b292      	uxth	r2, r2
 8006948:	4311      	orrs	r1, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800694e:	3a01      	subs	r2, #1
 8006950:	0412      	lsls	r2, r2, #16
 8006952:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006956:	4311      	orrs	r1, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800695c:	3a01      	subs	r2, #1
 800695e:	0612      	lsls	r2, r2, #24
 8006960:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006964:	430a      	orrs	r2, r1
 8006966:	493a      	ldr	r1, [pc, #232]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006968:	4313      	orrs	r3, r2
 800696a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800696c:	4b38      	ldr	r3, [pc, #224]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800696e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006970:	4a37      	ldr	r2, [pc, #220]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697c:	4a34      	ldr	r2, [pc, #208]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006982:	4b33      	ldr	r3, [pc, #204]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	4a32      	ldr	r2, [pc, #200]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006988:	f043 0310 	orr.w	r3, r3, #16
 800698c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800698e:	4b30      	ldr	r3, [pc, #192]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006992:	f023 020c 	bic.w	r2, r3, #12
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800699a:	492d      	ldr	r1, [pc, #180]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 800699c:	4313      	orrs	r3, r2
 800699e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80069a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d105      	bne.n	80069b4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80069a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006a54 <HAL_RCC_OscConfig+0xccc>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	4a29      	ldr	r2, [pc, #164]	@ (8006a54 <HAL_RCC_OscConfig+0xccc>)
 80069ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069b2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80069b4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d107      	bne.n	80069cc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80069bc:	4b24      	ldr	r3, [pc, #144]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80069be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069c2:	4a23      	ldr	r2, [pc, #140]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80069cc:	4b20      	ldr	r3, [pc, #128]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80069d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80069d8:	f7fc fa68 	bl	8002eac <HAL_GetTick>
 80069dc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e0:	f7fc fa64 	bl	8002eac <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e09f      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80069f2:	4b17      	ldr	r3, [pc, #92]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069fe:	4b14      	ldr	r3, [pc, #80]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	4a13      	ldr	r2, [pc, #76]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a08:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a0a:	e091      	b.n	8006b30 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006a0c:	4b10      	ldr	r3, [pc, #64]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0f      	ldr	r2, [pc, #60]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a18:	f7fc fa48 	bl	8002eac <HAL_GetTick>
 8006a1c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a20:	f7fc fa44 	bl	8002eac <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e07f      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a32:	4b07      	ldr	r3, [pc, #28]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1f0      	bne.n	8006a20 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006a3e:	4b04      	ldr	r3, [pc, #16]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a42:	4a03      	ldr	r2, [pc, #12]	@ (8006a50 <HAL_RCC_OscConfig+0xcc8>)
 8006a44:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006a48:	f023 0303 	bic.w	r3, r3, #3
 8006a4c:	6293      	str	r3, [r2, #40]	@ 0x28
 8006a4e:	e06f      	b.n	8006b30 <HAL_RCC_OscConfig+0xda8>
 8006a50:	46020c00 	.word	0x46020c00
 8006a54:	46020800 	.word	0x46020800
 8006a58:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006a5c:	4b37      	ldr	r3, [pc, #220]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a60:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a62:	4b36      	ldr	r3, [pc, #216]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a66:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d039      	beq.n	8006ae4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f003 0203 	and.w	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d132      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	0a1b      	lsrs	r3, r3, #8
 8006a82:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d129      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d122      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aa8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d11a      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	0a5b      	lsrs	r3, r3, #9
 8006ab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d111      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	0c1b      	lsrs	r3, r3, #16
 8006ac4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006acc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d108      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	0e1b      	lsrs	r3, r3, #24
 8006ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ade:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e024      	b.n	8006b32 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ae8:	4b14      	ldr	r3, [pc, #80]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	08db      	lsrs	r3, r3, #3
 8006aee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d01a      	beq.n	8006b30 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006afa:	4b10      	ldr	r3, [pc, #64]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afe:	4a0f      	ldr	r2, [pc, #60]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006b00:	f023 0310 	bic.w	r3, r3, #16
 8006b04:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b06:	f7fc f9d1 	bl	8002eac <HAL_GetTick>
 8006b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006b0c:	bf00      	nop
 8006b0e:	f7fc f9cd 	bl	8002eac <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d0f9      	beq.n	8006b0e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1e:	4a07      	ldr	r2, [pc, #28]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006b24:	4b05      	ldr	r3, [pc, #20]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b28:	4a04      	ldr	r2, [pc, #16]	@ (8006b3c <HAL_RCC_OscConfig+0xdb4>)
 8006b2a:	f043 0310 	orr.w	r3, r3, #16
 8006b2e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3738      	adds	r7, #56	@ 0x38
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	46020c00 	.word	0x46020c00

08006b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e1d9      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b54:	4b9b      	ldr	r3, [pc, #620]	@ (8006dc4 <HAL_RCC_ClockConfig+0x284>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d910      	bls.n	8006b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b98      	ldr	r3, [pc, #608]	@ (8006dc4 <HAL_RCC_ClockConfig+0x284>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 020f 	bic.w	r2, r3, #15
 8006b6a:	4996      	ldr	r1, [pc, #600]	@ (8006dc4 <HAL_RCC_ClockConfig+0x284>)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b72:	4b94      	ldr	r3, [pc, #592]	@ (8006dc4 <HAL_RCC_ClockConfig+0x284>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e1c1      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d010      	beq.n	8006bb2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	4b8c      	ldr	r3, [pc, #560]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d908      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006ba0:	4b89      	ldr	r3, [pc, #548]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	4986      	ldr	r1, [pc, #536]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d012      	beq.n	8006be4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	4b81      	ldr	r3, [pc, #516]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d909      	bls.n	8006be4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006bd0:	4b7d      	ldr	r3, [pc, #500]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	497a      	ldr	r1, [pc, #488]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d010      	beq.n	8006c12 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	4b74      	ldr	r3, [pc, #464]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d908      	bls.n	8006c12 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006c00:	4b71      	ldr	r3, [pc, #452]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	496e      	ldr	r1, [pc, #440]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d010      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	4b69      	ldr	r3, [pc, #420]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d908      	bls.n	8006c40 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006c2e:	4b66      	ldr	r3, [pc, #408]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 020f 	bic.w	r2, r3, #15
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	4963      	ldr	r1, [pc, #396]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80d2 	beq.w	8006df2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d143      	bne.n	8006ce2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d110      	bne.n	8006c8a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006c68:	4b57      	ldr	r3, [pc, #348]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c6e:	4a56      	ldr	r2, [pc, #344]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c70:	f043 0304 	orr.w	r3, r3, #4
 8006c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c78:	4b53      	ldr	r3, [pc, #332]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	60bb      	str	r3, [r7, #8]
 8006c84:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006c8a:	f7fc f90f 	bl	8002eac <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006c90:	4b4e      	ldr	r3, [pc, #312]	@ (8006dcc <HAL_RCC_ClockConfig+0x28c>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00f      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006c9e:	f7fc f905 	bl	8002eac <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e12b      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006cb0:	4b46      	ldr	r3, [pc, #280]	@ (8006dcc <HAL_RCC_ClockConfig+0x28c>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d107      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006cc2:	4b41      	ldr	r3, [pc, #260]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cc8:	4a3f      	ldr	r2, [pc, #252]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006cca:	f023 0304 	bic.w	r3, r3, #4
 8006cce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d121      	bne.n	8006d22 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e112      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d107      	bne.n	8006cfa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cea:	4b37      	ldr	r3, [pc, #220]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d115      	bne.n	8006d22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e106      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d107      	bne.n	8006d12 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006d02:	4b31      	ldr	r3, [pc, #196]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0fa      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d12:	4b2d      	ldr	r3, [pc, #180]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e0f2      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006d22:	4b29      	ldr	r3, [pc, #164]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f023 0203 	bic.w	r2, r3, #3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	4926      	ldr	r1, [pc, #152]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006d34:	f7fc f8ba 	bl	8002eac <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d112      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d44:	f7fc f8b2 	bl	8002eac <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e0d6      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b0c      	cmp	r3, #12
 8006d64:	d1ee      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x204>
 8006d66:	e044      	b.n	8006df2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d112      	bne.n	8006d96 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d70:	e00a      	b.n	8006d88 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d72:	f7fc f89b 	bl	8002eac <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e0bf      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d88:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d1ee      	bne.n	8006d72 <HAL_RCC_ClockConfig+0x232>
 8006d94:	e02d      	b.n	8006df2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d123      	bne.n	8006de6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d9e:	e00a      	b.n	8006db6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006da0:	f7fc f884 	bl	8002eac <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e0a8      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006db6:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <HAL_RCC_ClockConfig+0x288>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 030c 	and.w	r3, r3, #12
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1ee      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x260>
 8006dc2:	e016      	b.n	8006df2 <HAL_RCC_ClockConfig+0x2b2>
 8006dc4:	40022000 	.word	0x40022000
 8006dc8:	46020c00 	.word	0x46020c00
 8006dcc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd0:	f7fc f86c 	bl	8002eac <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e090      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006de6:	4b4a      	ldr	r3, [pc, #296]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f003 030c 	and.w	r3, r3, #12
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d1ee      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d010      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	4b43      	ldr	r3, [pc, #268]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d208      	bcs.n	8006e20 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006e0e:	4b40      	ldr	r3, [pc, #256]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 020f 	bic.w	r2, r3, #15
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	493d      	ldr	r1, [pc, #244]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4b3c      	ldr	r3, [pc, #240]	@ (8006f14 <HAL_RCC_ClockConfig+0x3d4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d210      	bcs.n	8006e50 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b39      	ldr	r3, [pc, #228]	@ (8006f14 <HAL_RCC_ClockConfig+0x3d4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 020f 	bic.w	r2, r3, #15
 8006e36:	4937      	ldr	r1, [pc, #220]	@ (8006f14 <HAL_RCC_ClockConfig+0x3d4>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b35      	ldr	r3, [pc, #212]	@ (8006f14 <HAL_RCC_ClockConfig+0x3d4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e05b      	b.n	8006f08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	4b2b      	ldr	r3, [pc, #172]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d208      	bcs.n	8006e7e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006e6c:	4b28      	ldr	r3, [pc, #160]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4925      	ldr	r1, [pc, #148]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d012      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	4b20      	ldr	r3, [pc, #128]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d209      	bcs.n	8006eb0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	4919      	ldr	r1, [pc, #100]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d010      	beq.n	8006ede <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695a      	ldr	r2, [r3, #20]
 8006ec0:	4b13      	ldr	r3, [pc, #76]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d208      	bcs.n	8006ede <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006ecc:	4b10      	ldr	r3, [pc, #64]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	490d      	ldr	r1, [pc, #52]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006ede:	f000 f821 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <HAL_RCC_ClockConfig+0x3d0>)
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	490a      	ldr	r1, [pc, #40]	@ (8006f18 <HAL_RCC_ClockConfig+0x3d8>)
 8006eee:	5ccb      	ldrb	r3, [r1, r3]
 8006ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef4:	4a09      	ldr	r2, [pc, #36]	@ (8006f1c <HAL_RCC_ClockConfig+0x3dc>)
 8006ef6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ef8:	4b09      	ldr	r3, [pc, #36]	@ (8006f20 <HAL_RCC_ClockConfig+0x3e0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fb fa99 	bl	8002434 <HAL_InitTick>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]

  return status;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	46020c00 	.word	0x46020c00
 8006f14:	40022000 	.word	0x40022000
 8006f18:	080126b8 	.word	0x080126b8
 8006f1c:	20000000 	.word	0x20000000
 8006f20:	2000001c 	.word	0x2000001c

08006f24 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b08b      	sub	sp, #44	@ 0x2c
 8006f28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f32:	4b78      	ldr	r3, [pc, #480]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f003 030c 	and.w	r3, r3, #12
 8006f3a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f3c:	4b75      	ldr	r3, [pc, #468]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x34>
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2b0c      	cmp	r3, #12
 8006f50:	d121      	bne.n	8006f96 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11e      	bne.n	8006f96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006f58:	4b6e      	ldr	r3, [pc, #440]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006f64:	4b6b      	ldr	r3, [pc, #428]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f6a:	0b1b      	lsrs	r3, r3, #12
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f72:	e005      	b.n	8006f80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006f74:	4b67      	ldr	r3, [pc, #412]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	0f1b      	lsrs	r3, r3, #28
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f80:	4a65      	ldr	r2, [pc, #404]	@ (8007118 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d110      	bne.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f94:	e00d      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f96:	4b5f      	ldr	r3, [pc, #380]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800711c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006fa4:	623b      	str	r3, [r7, #32]
 8006fa6:	e004      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b08      	cmp	r3, #8
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fae:	4b5b      	ldr	r3, [pc, #364]	@ (800711c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006fb0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b0c      	cmp	r3, #12
 8006fb6:	f040 80a5 	bne.w	8007104 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006fba:	4b56      	ldr	r3, [pc, #344]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006fc4:	4b53      	ldr	r3, [pc, #332]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006fd2:	4b50      	ldr	r3, [pc, #320]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	091b      	lsrs	r3, r3, #4
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006fde:	4b4d      	ldr	r3, [pc, #308]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	08db      	lsrs	r3, r3, #3
 8006fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d003      	beq.n	8007008 <HAL_RCC_GetSysClockFreq+0xe4>
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d022      	beq.n	800704c <HAL_RCC_GetSysClockFreq+0x128>
 8007006:	e043      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007120 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701a:	4b3e      	ldr	r3, [pc, #248]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800701c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800702a:	ed97 6a01 	vldr	s12, [r7, #4]
 800702e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007124 <HAL_RCC_GetSysClockFreq+0x200>
 8007032:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007036:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800703a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800703e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704a:	e046      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007120 <HAL_RCC_GetSysClockFreq+0x1fc>
 800705a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705e:	4b2d      	ldr	r3, [pc, #180]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800706e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007072:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007124 <HAL_RCC_GetSysClockFreq+0x200>
 8007076:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800707a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800707e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007082:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800708e:	e024      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070b8:	ed97 6a01 	vldr	s12, [r7, #4]
 80070bc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007124 <HAL_RCC_GetSysClockFreq+0x200>
 80070c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80070c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80070d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80070da:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80070dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070de:	0e1b      	lsrs	r3, r3, #24
 80070e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e4:	3301      	adds	r3, #1
 80070e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fe:	ee17 3a90 	vmov	r3, s15
 8007102:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007104:	6a3b      	ldr	r3, [r7, #32]
}
 8007106:	4618      	mov	r0, r3
 8007108:	372c      	adds	r7, #44	@ 0x2c
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	46020c00 	.word	0x46020c00
 8007118:	080126d0 	.word	0x080126d0
 800711c:	00f42400 	.word	0x00f42400
 8007120:	4b742400 	.word	0x4b742400
 8007124:	46000000 	.word	0x46000000

08007128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800712c:	f7ff fefa 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8007130:	4602      	mov	r2, r0
 8007132:	4b07      	ldr	r3, [pc, #28]	@ (8007150 <HAL_RCC_GetHCLKFreq+0x28>)
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	4906      	ldr	r1, [pc, #24]	@ (8007154 <HAL_RCC_GetHCLKFreq+0x2c>)
 800713c:	5ccb      	ldrb	r3, [r1, r3]
 800713e:	fa22 f303 	lsr.w	r3, r2, r3
 8007142:	4a05      	ldr	r2, [pc, #20]	@ (8007158 <HAL_RCC_GetHCLKFreq+0x30>)
 8007144:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007146:	4b04      	ldr	r3, [pc, #16]	@ (8007158 <HAL_RCC_GetHCLKFreq+0x30>)
 8007148:	681b      	ldr	r3, [r3, #0]
}
 800714a:	4618      	mov	r0, r3
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	46020c00 	.word	0x46020c00
 8007154:	080126b8 	.word	0x080126b8
 8007158:	20000000 	.word	0x20000000

0800715c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007160:	f7ff ffe2 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 8007164:	4602      	mov	r2, r0
 8007166:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	091b      	lsrs	r3, r3, #4
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	4903      	ldr	r1, [pc, #12]	@ (8007180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007172:	5ccb      	ldrb	r3, [r1, r3]
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007178:	4618      	mov	r0, r3
 800717a:	bd80      	pop	{r7, pc}
 800717c:	46020c00 	.word	0x46020c00
 8007180:	080126c8 	.word	0x080126c8

08007184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007188:	f7ff ffce 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 800718c:	4602      	mov	r2, r0
 800718e:	4b05      	ldr	r3, [pc, #20]	@ (80071a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	4903      	ldr	r1, [pc, #12]	@ (80071a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800719a:	5ccb      	ldrb	r3, [r1, r3]
 800719c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	46020c00 	.word	0x46020c00
 80071a8:	080126c8 	.word	0x080126c8

080071ac <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80071b0:	f7ff ffba 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <HAL_RCC_GetPCLK3Freq+0x20>)
 80071b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ba:	091b      	lsrs	r3, r3, #4
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	4903      	ldr	r1, [pc, #12]	@ (80071d0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80071c2:	5ccb      	ldrb	r3, [r1, r3]
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	46020c00 	.word	0x46020c00
 80071d0:	080126c8 	.word	0x080126c8

080071d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	221f      	movs	r2, #31
 80071e2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80071e4:	4b15      	ldr	r3, [pc, #84]	@ (800723c <HAL_RCC_GetClockConfig+0x68>)
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	f003 0203 	and.w	r2, r3, #3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80071f0:	4b12      	ldr	r3, [pc, #72]	@ (800723c <HAL_RCC_GetClockConfig+0x68>)
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80071fc:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <HAL_RCC_GetClockConfig+0x68>)
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8007208:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <HAL_RCC_GetClockConfig+0x68>)
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	091b      	lsrs	r3, r3, #4
 800720e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8007216:	4b09      	ldr	r3, [pc, #36]	@ (800723c <HAL_RCC_GetClockConfig+0x68>)
 8007218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007222:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <HAL_RCC_GetClockConfig+0x6c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 020f 	and.w	r2, r3, #15
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	601a      	str	r2, [r3, #0]
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	46020c00 	.word	0x46020c00
 8007240:	40022000 	.word	0x40022000

08007244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800724c:	4b3e      	ldr	r3, [pc, #248]	@ (8007348 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800724e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800725a:	f7fe fcf7 	bl	8005c4c <HAL_PWREx_GetVoltageRange>
 800725e:	6178      	str	r0, [r7, #20]
 8007260:	e019      	b.n	8007296 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007262:	4b39      	ldr	r3, [pc, #228]	@ (8007348 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007268:	4a37      	ldr	r2, [pc, #220]	@ (8007348 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800726a:	f043 0304 	orr.w	r3, r3, #4
 800726e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007272:	4b35      	ldr	r3, [pc, #212]	@ (8007348 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007280:	f7fe fce4 	bl	8005c4c <HAL_PWREx_GetVoltageRange>
 8007284:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007286:	4b30      	ldr	r3, [pc, #192]	@ (8007348 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800728c:	4a2e      	ldr	r2, [pc, #184]	@ (8007348 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800728e:	f023 0304 	bic.w	r3, r3, #4
 8007292:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800729c:	d003      	beq.n	80072a6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072a4:	d109      	bne.n	80072ba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ac:	d202      	bcs.n	80072b4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80072ae:	2301      	movs	r3, #1
 80072b0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80072b2:	e033      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80072b8:	e030      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072c0:	d208      	bcs.n	80072d4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c8:	d102      	bne.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80072ca:	2303      	movs	r3, #3
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	e025      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e035      	b.n	8007340 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072da:	d90f      	bls.n	80072fc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072e8:	d902      	bls.n	80072f0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80072ea:	2300      	movs	r3, #0
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	e015      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80072f0:	2301      	movs	r3, #1
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	e012      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80072f6:	2300      	movs	r3, #0
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	e00f      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007302:	d109      	bne.n	8007318 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800730a:	d102      	bne.n	8007312 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800730c:	2301      	movs	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	e004      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007312:	2302      	movs	r3, #2
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	e001      	b.n	800731c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007318:	2301      	movs	r3, #1
 800731a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800731c:	4b0b      	ldr	r3, [pc, #44]	@ (800734c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f023 020f 	bic.w	r2, r3, #15
 8007324:	4909      	ldr	r1, [pc, #36]	@ (800734c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800732c:	4b07      	ldr	r3, [pc, #28]	@ (800734c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	429a      	cmp	r2, r3
 8007338:	d001      	beq.n	800733e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	46020c00 	.word	0x46020c00
 800734c:	40022000 	.word	0x40022000

08007350 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007354:	b0b8      	sub	sp, #224	@ 0xe0
 8007356:	af00      	add	r7, sp, #0
 8007358:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800735c:	2300      	movs	r3, #0
 800735e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007362:	2300      	movs	r3, #0
 8007364:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f002 0401 	and.w	r4, r2, #1
 8007374:	2500      	movs	r5, #0
 8007376:	ea54 0305 	orrs.w	r3, r4, r5
 800737a:	d00b      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800737c:	4bca      	ldr	r3, [pc, #808]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800737e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007382:	f023 0103 	bic.w	r1, r3, #3
 8007386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800738a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738c:	4ac6      	ldr	r2, [pc, #792]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800738e:	430b      	orrs	r3, r1
 8007390:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f002 0802 	and.w	r8, r2, #2
 80073a0:	f04f 0900 	mov.w	r9, #0
 80073a4:	ea58 0309 	orrs.w	r3, r8, r9
 80073a8:	d00b      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80073aa:	4bbf      	ldr	r3, [pc, #764]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073b0:	f023 010c 	bic.w	r1, r3, #12
 80073b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ba:	4abb      	ldr	r2, [pc, #748]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073bc:	430b      	orrs	r3, r1
 80073be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f002 0a04 	and.w	sl, r2, #4
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80073d6:	d00b      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80073d8:	4bb3      	ldr	r3, [pc, #716]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073de:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80073e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e8:	4aaf      	ldr	r2, [pc, #700]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073ea:	430b      	orrs	r3, r1
 80073ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f002 0308 	and.w	r3, r2, #8
 80073fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007400:	2300      	movs	r3, #0
 8007402:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007406:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800740a:	460b      	mov	r3, r1
 800740c:	4313      	orrs	r3, r2
 800740e:	d00b      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007410:	4ba5      	ldr	r3, [pc, #660]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007416:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800741a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800741e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007420:	4aa1      	ldr	r2, [pc, #644]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007422:	430b      	orrs	r3, r1
 8007424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f002 0310 	and.w	r3, r2, #16
 8007434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007438:	2300      	movs	r3, #0
 800743a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800743e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007442:	460b      	mov	r3, r1
 8007444:	4313      	orrs	r3, r2
 8007446:	d00b      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007448:	4b97      	ldr	r3, [pc, #604]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800744a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800744e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007458:	4a93      	ldr	r2, [pc, #588]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800745a:	430b      	orrs	r3, r1
 800745c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f002 0320 	and.w	r3, r2, #32
 800746c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007476:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	d00b      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007480:	4b89      	ldr	r3, [pc, #548]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007486:	f023 0107 	bic.w	r1, r3, #7
 800748a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800748e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007490:	4a85      	ldr	r2, [pc, #532]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007492:	430b      	orrs	r3, r1
 8007494:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80074a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	d00b      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80074b8:	4b7b      	ldr	r3, [pc, #492]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074be:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80074c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074c8:	4a77      	ldr	r2, [pc, #476]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074ca:	430b      	orrs	r3, r1
 80074cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80074dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074e0:	2300      	movs	r3, #0
 80074e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074e6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4313      	orrs	r3, r2
 80074ee:	d00b      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80074f0:	4b6d      	ldr	r3, [pc, #436]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80074f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007500:	4a69      	ldr	r2, [pc, #420]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007502:	430b      	orrs	r3, r1
 8007504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007508:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007518:	2300      	movs	r3, #0
 800751a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800751e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007522:	460b      	mov	r3, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	d00b      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007528:	4b5f      	ldr	r3, [pc, #380]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800752a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800752e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007538:	4a5b      	ldr	r2, [pc, #364]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800753a:	430b      	orrs	r3, r1
 800753c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800754c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007550:	2300      	movs	r3, #0
 8007552:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007556:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800755a:	460b      	mov	r3, r1
 800755c:	4313      	orrs	r3, r2
 800755e:	d00b      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007560:	4b51      	ldr	r3, [pc, #324]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007566:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800756a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800756e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007570:	4a4d      	ldr	r2, [pc, #308]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007572:	430b      	orrs	r3, r1
 8007574:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007588:	2300      	movs	r3, #0
 800758a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800758e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007592:	460b      	mov	r3, r1
 8007594:	4313      	orrs	r3, r2
 8007596:	d00b      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007598:	4b43      	ldr	r3, [pc, #268]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800759a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800759e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80075a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075a8:	4a3f      	ldr	r2, [pc, #252]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80075aa:	430b      	orrs	r3, r1
 80075ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80075bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075c0:	2300      	movs	r3, #0
 80075c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075ca:	460b      	mov	r3, r1
 80075cc:	4313      	orrs	r3, r2
 80075ce:	d00b      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80075d0:	4b35      	ldr	r3, [pc, #212]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80075d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075d6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80075da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075e0:	4a31      	ldr	r2, [pc, #196]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80075e2:	430b      	orrs	r3, r1
 80075e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80075e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80075f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075f6:	2300      	movs	r3, #0
 80075f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d00c      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007604:	4b28      	ldr	r3, [pc, #160]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800760a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800760e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007616:	4a24      	ldr	r2, [pc, #144]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007618:	430b      	orrs	r3, r1
 800761a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800761e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800762a:	673b      	str	r3, [r7, #112]	@ 0x70
 800762c:	2300      	movs	r3, #0
 800762e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007630:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007634:	460b      	mov	r3, r1
 8007636:	4313      	orrs	r3, r2
 8007638:	d04f      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800763a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800763e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007642:	2b80      	cmp	r3, #128	@ 0x80
 8007644:	d02d      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8007646:	2b80      	cmp	r3, #128	@ 0x80
 8007648:	d827      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800764a:	2b60      	cmp	r3, #96	@ 0x60
 800764c:	d02e      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800764e:	2b60      	cmp	r3, #96	@ 0x60
 8007650:	d823      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007652:	2b40      	cmp	r3, #64	@ 0x40
 8007654:	d006      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007656:	2b40      	cmp	r3, #64	@ 0x40
 8007658:	d81f      	bhi.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800765e:	2b20      	cmp	r3, #32
 8007660:	d011      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007662:	e01a      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007664:	4b10      	ldr	r3, [pc, #64]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	4a0f      	ldr	r2, [pc, #60]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800766a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800766e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007670:	e01d      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007676:	3308      	adds	r3, #8
 8007678:	4618      	mov	r0, r3
 800767a:	f002 f9d1 	bl	8009a20 <RCCEx_PLL2_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007684:	e013      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800768a:	332c      	adds	r3, #44	@ 0x2c
 800768c:	4618      	mov	r0, r3
 800768e:	f002 fa5f 	bl	8009b50 <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007698:	e009      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80076a0:	e005      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80076a2:	bf00      	nop
 80076a4:	e003      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80076a6:	bf00      	nop
 80076a8:	46020c00 	.word	0x46020c00
        break;
 80076ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10d      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80076b6:	4bb6      	ldr	r3, [pc, #728]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80076b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076bc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80076c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076c8:	4ab1      	ldr	r2, [pc, #708]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80076ca:	430b      	orrs	r3, r1
 80076cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80076d0:	e003      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80076d6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80076da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80076e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076e8:	2300      	movs	r3, #0
 80076ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80076f0:	460b      	mov	r3, r1
 80076f2:	4313      	orrs	r3, r2
 80076f4:	d053      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80076f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007702:	d033      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007708:	d82c      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800770a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800770e:	d02f      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007710:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007714:	d826      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771a:	d008      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800771c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007720:	d820      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800772a:	d011      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800772c:	e01a      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800772e:	4b98      	ldr	r3, [pc, #608]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	4a97      	ldr	r2, [pc, #604]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007738:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800773a:	e01a      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800773c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007740:	3308      	adds	r3, #8
 8007742:	4618      	mov	r0, r3
 8007744:	f002 f96c 	bl	8009a20 <RCCEx_PLL2_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800774e:	e010      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007754:	332c      	adds	r3, #44	@ 0x2c
 8007756:	4618      	mov	r0, r3
 8007758:	f002 f9fa 	bl	8009b50 <RCCEx_PLL3_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007762:	e006      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800776a:	e002      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800776c:	bf00      	nop
 800776e:	e000      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8007770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007772:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10d      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800777a:	4b85      	ldr	r3, [pc, #532]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800777c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007780:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800778c:	4a80      	ldr	r2, [pc, #512]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800778e:	430b      	orrs	r3, r1
 8007790:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007794:	e003      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007796:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800779a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800779e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80077aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80077ac:	2300      	movs	r3, #0
 80077ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80077b4:	460b      	mov	r3, r1
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d046      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80077ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80077c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077c6:	d028      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80077c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80077cc:	d821      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80077ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077d2:	d022      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80077d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077d8:	d81b      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80077da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077de:	d01c      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80077e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077e4:	d815      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80077e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ea:	d008      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80077ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077f0:	d80f      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d011      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fa:	d00e      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80077fc:	e009      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007802:	3308      	adds	r3, #8
 8007804:	4618      	mov	r0, r3
 8007806:	f002 f90b 	bl	8009a20 <RCCEx_PLL2_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007810:	e004      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007818:	e000      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800781a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007824:	4b5a      	ldr	r3, [pc, #360]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800782a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800782e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007836:	4a56      	ldr	r2, [pc, #344]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007838:	430b      	orrs	r3, r1
 800783a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800783e:	e003      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007844:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007854:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007856:	2300      	movs	r3, #0
 8007858:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800785a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d03f      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786c:	2b04      	cmp	r3, #4
 800786e:	d81e      	bhi.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8007870:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8007872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007876:	bf00      	nop
 8007878:	080078b7 	.word	0x080078b7
 800787c:	0800788d 	.word	0x0800788d
 8007880:	0800789b 	.word	0x0800789b
 8007884:	080078b7 	.word	0x080078b7
 8007888:	080078b7 	.word	0x080078b7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800788c:	4b40      	ldr	r3, [pc, #256]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	4a3f      	ldr	r2, [pc, #252]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007896:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007898:	e00e      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800789a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800789e:	332c      	adds	r3, #44	@ 0x2c
 80078a0:	4618      	mov	r0, r3
 80078a2:	f002 f955 	bl	8009b50 <RCCEx_PLL3_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80078ac:	e004      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80078b4:	e000      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80078b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80078b8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10d      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80078c0:	4b33      	ldr	r3, [pc, #204]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80078c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078c6:	f023 0107 	bic.w	r1, r3, #7
 80078ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80078d4:	430b      	orrs	r3, r1
 80078d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078dc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80078e0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80078e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80078f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80078f2:	2300      	movs	r3, #0
 80078f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80078f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80078fa:	460b      	mov	r3, r1
 80078fc:	4313      	orrs	r3, r2
 80078fe:	d04d      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007908:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800790c:	d028      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800790e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007912:	d821      	bhi.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007914:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007918:	d024      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800791a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800791e:	d81b      	bhi.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007924:	d00e      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8007926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800792a:	d815      	bhi.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01b      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007934:	d110      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007936:	4b16      	ldr	r3, [pc, #88]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793a:	4a15      	ldr	r2, [pc, #84]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800793c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007940:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007942:	e012      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007948:	332c      	adds	r3, #44	@ 0x2c
 800794a:	4618      	mov	r0, r3
 800794c:	f002 f900 	bl	8009b50 <RCCEx_PLL3_Config>
 8007950:	4603      	mov	r3, r0
 8007952:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007956:	e008      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800795e:	e004      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007960:	bf00      	nop
 8007962:	e002      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007964:	bf00      	nop
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8007968:	bf00      	nop
    }
    if (ret == HAL_OK)
 800796a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800796e:	2b00      	cmp	r3, #0
 8007970:	d110      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007972:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007978:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800797c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007984:	4a02      	ldr	r2, [pc, #8]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8007986:	430b      	orrs	r3, r1
 8007988:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800798c:	e006      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800798e:	bf00      	nop
 8007990:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007998:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800799c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80079a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079aa:	2300      	movs	r3, #0
 80079ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80079b2:	460b      	mov	r3, r1
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f000 80b5 	beq.w	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079c0:	4b9d      	ldr	r3, [pc, #628]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d113      	bne.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ce:	4b9a      	ldr	r3, [pc, #616]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079d4:	4a98      	ldr	r2, [pc, #608]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079d6:	f043 0304 	orr.w	r3, r3, #4
 80079da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80079de:	4b96      	ldr	r3, [pc, #600]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80079e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80079f6:	4b91      	ldr	r3, [pc, #580]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80079f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fa:	4a90      	ldr	r2, [pc, #576]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80079fc:	f043 0301 	orr.w	r3, r3, #1
 8007a00:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a02:	f7fb fa53 	bl	8002eac <HAL_GetTick>
 8007a06:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0c:	f7fb fa4e 	bl	8002eac <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d903      	bls.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007a22:	e005      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007a24:	4b85      	ldr	r3, [pc, #532]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0ed      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8007a30:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d165      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a38:	4b7f      	ldr	r3, [pc, #508]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d023      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8007a4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a52:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8007a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01b      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a5e:	4b76      	ldr	r3, [pc, #472]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a6c:	4b72      	ldr	r3, [pc, #456]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a72:	4a71      	ldr	r2, [pc, #452]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a7c:	4b6e      	ldr	r3, [pc, #440]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a82:	4a6d      	ldr	r2, [pc, #436]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d019      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa2:	f7fb fa03 	bl	8002eac <HAL_GetTick>
 8007aa6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aaa:	e00d      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aac:	f7fb f9fe 	bl	8002eac <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d903      	bls.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8007ac6:	e006      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0ea      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8007ad6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10d      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007ade:	4b56      	ldr	r3, [pc, #344]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ae4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007af0:	4a51      	ldr	r2, [pc, #324]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007af2:	430b      	orrs	r3, r1
 8007af4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007af8:	e008      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007afa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007afe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8007b02:	e003      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b08:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b0c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d107      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b14:	4b48      	ldr	r3, [pc, #288]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b1a:	4a47      	ldr	r2, [pc, #284]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b1c:	f023 0304 	bic.w	r3, r3, #4
 8007b20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007b24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007b30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b32:	2300      	movs	r3, #0
 8007b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	d042      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b48:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b4c:	d022      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007b4e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b52:	d81b      	bhi.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b58:	d011      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8007b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b5e:	d815      	bhi.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d019      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007b64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b68:	d110      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b6e:	3308      	adds	r3, #8
 8007b70:	4618      	mov	r0, r3
 8007b72:	f001 ff55 	bl	8009a20 <RCCEx_PLL2_Config>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b7c:	e00d      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	4a2d      	ldr	r2, [pc, #180]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b88:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007b8a:	e006      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007b92:	e002      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007b94:	bf00      	nop
 8007b96:	e000      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8007b98:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10d      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007ba2:	4b25      	ldr	r3, [pc, #148]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ba8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bb4:	4a20      	ldr	r2, [pc, #128]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007bbc:	e003      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007bc2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4313      	orrs	r3, r2
 8007be0:	d032      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bee:	d00b      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bf4:	d804      	bhi.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfe:	d007      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007c06:	e004      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007c08:	bf00      	nop
 8007c0a:	e002      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007c0c:	bf00      	nop
 8007c0e:	e000      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8007c10:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c12:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d112      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007c1a:	4b07      	ldr	r3, [pc, #28]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007c1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c2c:	4a02      	ldr	r2, [pc, #8]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007c34:	e008      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8007c36:	bf00      	nop
 8007c38:	46020c00 	.word	0x46020c00
 8007c3c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007c44:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c56:	2300      	movs	r3, #0
 8007c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4313      	orrs	r3, r2
 8007c62:	d019      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c70:	d105      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c72:	4b88      	ldr	r3, [pc, #544]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c76:	4a87      	ldr	r2, [pc, #540]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c7c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007c7e:	4b85      	ldr	r3, [pc, #532]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c84:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c90:	4a80      	ldr	r2, [pc, #512]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007c92:	430b      	orrs	r3, r1
 8007c94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007caa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007cae:	460b      	mov	r3, r1
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	d00c      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007cb4:	4b77      	ldr	r3, [pc, #476]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cc6:	4973      	ldr	r1, [pc, #460]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007cce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007cda:	623b      	str	r3, [r7, #32]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ce0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	d00c      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007cea:	4b6a      	ldr	r3, [pc, #424]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007cf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cfc:	4965      	ldr	r1, [pc, #404]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007d10:	61bb      	str	r3, [r7, #24]
 8007d12:	2300      	movs	r3, #0
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	d00c      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007d20:	4b5c      	ldr	r3, [pc, #368]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d26:	f023 0218 	bic.w	r2, r3, #24
 8007d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d32:	4958      	ldr	r1, [pc, #352]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007d46:	613b      	str	r3, [r7, #16]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d50:	460b      	mov	r3, r1
 8007d52:	4313      	orrs	r3, r2
 8007d54:	d032      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d62:	d105      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d64:	4b4b      	ldr	r3, [pc, #300]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	4a4a      	ldr	r2, [pc, #296]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d6e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d7c:	d108      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007d82:	3308      	adds	r3, #8
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fe4b 	bl	8009a20 <RCCEx_PLL2_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8007d90:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10d      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007d98:	4b3e      	ldr	r3, [pc, #248]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007daa:	493a      	ldr	r1, [pc, #232]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007db2:	e003      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007db8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007dc8:	60bb      	str	r3, [r7, #8]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	d03a      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007de4:	d00e      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dea:	d815      	bhi.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d017      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8007df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007df4:	d110      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df6:	4b27      	ldr	r3, [pc, #156]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfa:	4a26      	ldr	r2, [pc, #152]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e00:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007e02:	e00e      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e08:	3308      	adds	r3, #8
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 fe08 	bl	8009a20 <RCCEx_PLL2_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007e16:	e004      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8007e1e:	e000      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8007e20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007e22:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e3c:	4915      	ldr	r1, [pc, #84]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e46:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007e4a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e56:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	607b      	str	r3, [r7, #4]
 8007e60:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e64:	460b      	mov	r3, r1
 8007e66:	4313      	orrs	r3, r2
 8007e68:	d00c      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e70:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e7c:	4905      	ldr	r1, [pc, #20]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007e84:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	37e0      	adds	r7, #224	@ 0xe0
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e92:	bf00      	nop
 8007e94:	46020c00 	.word	0x46020c00

08007e98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b089      	sub	sp, #36	@ 0x24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007eaa:	4ba4      	ldr	r3, [pc, #656]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007eb4:	4ba1      	ldr	r3, [pc, #644]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	091b      	lsrs	r3, r3, #4
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007ece:	4b9b      	ldr	r3, [pc, #620]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed2:	08db      	lsrs	r3, r3, #3
 8007ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	fb02 f303 	mul.w	r3, r2, r3
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d062      	beq.n	8007fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	f200 8081 	bhi.w	8007ffa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d024      	beq.n	8007f48 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d17a      	bne.n	8007ffa <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008140 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f16:	4b89      	ldr	r3, [pc, #548]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f2a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008144 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f46:	e08f      	b.n	8008068 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007f48:	4b7c      	ldr	r3, [pc, #496]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007f54:	4b79      	ldr	r3, [pc, #484]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	0f1b      	lsrs	r3, r3, #28
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	e006      	b.n	8007f6e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007f60:	4b76      	ldr	r3, [pc, #472]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f66:	041b      	lsls	r3, r3, #16
 8007f68:	0f1b      	lsrs	r3, r3, #28
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	4a76      	ldr	r2, [pc, #472]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	ee07 3a90 	vmov	s15, r3
 8007f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	ee07 3a90 	vmov	s15, r3
 8007f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f94:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f98:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008144 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fb4:	e058      	b.n	8008068 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008140 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fdc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008144 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ff8:	e036      	b.n	8008068 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007ffa:	4b50      	ldr	r3, [pc, #320]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8008006:	4b4d      	ldr	r3, [pc, #308]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	0f1b      	lsrs	r3, r3, #28
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	e006      	b.n	8008020 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008012:	4b4a      	ldr	r3, [pc, #296]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	0f1b      	lsrs	r3, r3, #28
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	4a49      	ldr	r2, [pc, #292]	@ (8008148 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	ee07 3a90 	vmov	s15, r3
 8008034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008046:	ed97 6a02 	vldr	s12, [r7, #8]
 800804a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008144 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800804e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800805a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800805e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008066:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008068:	4b34      	ldr	r3, [pc, #208]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800806a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d017      	beq.n	80080a4 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008074:	4b31      	ldr	r3, [pc, #196]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008078:	0a5b      	lsrs	r3, r3, #9
 800807a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008086:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800808a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800808e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809a:	ee17 2a90 	vmov	r2, s15
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	e002      	b.n	80080aa <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80080aa:	4b24      	ldr	r3, [pc, #144]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d017      	beq.n	80080e6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080b6:	4b21      	ldr	r3, [pc, #132]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ba:	0c1b      	lsrs	r3, r3, #16
 80080bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80080c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080cc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080dc:	ee17 2a90 	vmov	r2, s15
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	605a      	str	r2, [r3, #4]
 80080e4:	e002      	b.n	80080ec <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80080ec:	4b13      	ldr	r3, [pc, #76]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d017      	beq.n	8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080f8:	4b10      	ldr	r3, [pc, #64]	@ (800813c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80080fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fc:	0e1b      	lsrs	r3, r3, #24
 80080fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800810a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800810e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008112:	edd7 6a07 	vldr	s13, [r7, #28]
 8008116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800811a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800811e:	ee17 2a90 	vmov	r2, s15
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008126:	e002      	b.n	800812e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	609a      	str	r2, [r3, #8]
}
 800812e:	bf00      	nop
 8008130:	3724      	adds	r7, #36	@ 0x24
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	46020c00 	.word	0x46020c00
 8008140:	4b742400 	.word	0x4b742400
 8008144:	46000000 	.word	0x46000000
 8008148:	080126d0 	.word	0x080126d0

0800814c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800814c:	b480      	push	{r7}
 800814e:	b089      	sub	sp, #36	@ 0x24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008154:	4ba6      	ldr	r3, [pc, #664]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800815e:	4ba4      	ldr	r3, [pc, #656]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008168:	4ba1      	ldr	r3, [pc, #644]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800816a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	3301      	adds	r3, #1
 8008174:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008176:	4b9e      	ldr	r3, [pc, #632]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	091b      	lsrs	r3, r3, #4
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008182:	4b9b      	ldr	r3, [pc, #620]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008186:	08db      	lsrs	r3, r3, #3
 8008188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	fb02 f303 	mul.w	r3, r2, r3
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d062      	beq.n	800826a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	f200 8081 	bhi.w	80082ae <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d024      	beq.n	80081fc <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d17a      	bne.n	80082ae <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80081c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ca:	4b89      	ldr	r3, [pc, #548]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d2:	ee07 3a90 	vmov	s15, r3
 80081d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80081da:	ed97 6a02 	vldr	s12, [r7, #8]
 80081de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80081e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80081e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80081ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80081f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081fa:	e08f      	b.n	800831c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80081fc:	4b7c      	ldr	r3, [pc, #496]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008208:	4b79      	ldr	r3, [pc, #484]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	0f1b      	lsrs	r3, r3, #28
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	e006      	b.n	8008222 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008214:	4b76      	ldr	r3, [pc, #472]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	0f1b      	lsrs	r3, r3, #28
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	4a76      	ldr	r2, [pc, #472]	@ (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	ee07 3a90 	vmov	s15, r3
 8008244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008248:	ed97 6a02 	vldr	s12, [r7, #8]
 800824c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008258:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800825c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008268:	e058      	b.n	800831c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008274:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827c:	4b5c      	ldr	r3, [pc, #368]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800827e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008284:	ee07 3a90 	vmov	s15, r3
 8008288:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800828c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008290:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008294:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008298:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800829c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80082a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ac:	e036      	b.n	800831c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80082ae:	4b50      	ldr	r3, [pc, #320]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80082ba:	4b4d      	ldr	r3, [pc, #308]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	0f1b      	lsrs	r3, r3, #28
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	e006      	b.n	80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80082c6:	4b4a      	ldr	r3, [pc, #296]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80082c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	0f1b      	lsrs	r3, r3, #28
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	4a49      	ldr	r2, [pc, #292]	@ (80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80082d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	ee07 3a90 	vmov	s15, r3
 80082e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80082fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800830e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800831a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800831c:	4b34      	ldr	r3, [pc, #208]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800831e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d017      	beq.n	8008358 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008328:	4b31      	ldr	r3, [pc, #196]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800832a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832c:	0a5b      	lsrs	r3, r3, #9
 800832e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800833e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008342:	edd7 6a07 	vldr	s13, [r7, #28]
 8008346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800834a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834e:	ee17 2a90 	vmov	r2, s15
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e002      	b.n	800835e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800835e:	4b24      	ldr	r3, [pc, #144]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d017      	beq.n	800839a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800836a:	4b21      	ldr	r3, [pc, #132]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800836c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800837c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008380:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008384:	edd7 6a07 	vldr	s13, [r7, #28]
 8008388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008390:	ee17 2a90 	vmov	r2, s15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	605a      	str	r2, [r3, #4]
 8008398:	e002      	b.n	80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80083a0:	4b13      	ldr	r3, [pc, #76]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d017      	beq.n	80083dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083ac:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80083ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b0:	0e1b      	lsrs	r3, r3, #24
 80083b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80083be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d2:	ee17 2a90 	vmov	r2, s15
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083da:	e002      	b.n	80083e2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	609a      	str	r2, [r3, #8]
}
 80083e2:	bf00      	nop
 80083e4:	3724      	adds	r7, #36	@ 0x24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	46020c00 	.word	0x46020c00
 80083f4:	4b742400 	.word	0x4b742400
 80083f8:	46000000 	.word	0x46000000
 80083fc:	080126d0 	.word	0x080126d0

08008400 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008400:	b480      	push	{r7}
 8008402:	b089      	sub	sp, #36	@ 0x24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008408:	4ba6      	ldr	r3, [pc, #664]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800840a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008410:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008412:	4ba4      	ldr	r3, [pc, #656]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800841c:	4ba1      	ldr	r3, [pc, #644]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800841e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008420:	0a1b      	lsrs	r3, r3, #8
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	3301      	adds	r3, #1
 8008428:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800842a:	4b9e      	ldr	r3, [pc, #632]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800842c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842e:	091b      	lsrs	r3, r3, #4
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008436:	4b9b      	ldr	r3, [pc, #620]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843a:	08db      	lsrs	r3, r3, #3
 800843c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	fb02 f303 	mul.w	r3, r2, r3
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d062      	beq.n	800851e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b03      	cmp	r3, #3
 800845c:	f200 8081 	bhi.w	8008562 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d024      	beq.n	80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d17a      	bne.n	8008562 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008476:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80086a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800847a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847e:	4b89      	ldr	r3, [pc, #548]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800848e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008492:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008496:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800849a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800849e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80084a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084aa:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80084ae:	e08f      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80084b0:	4b7c      	ldr	r3, [pc, #496]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80084bc:	4b79      	ldr	r3, [pc, #484]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	0f1b      	lsrs	r3, r3, #28
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	e006      	b.n	80084d6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80084c8:	4b76      	ldr	r3, [pc, #472]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80084ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084ce:	041b      	lsls	r3, r3, #16
 80084d0:	0f1b      	lsrs	r3, r3, #28
 80084d2:	f003 030f 	and.w	r3, r3, #15
 80084d6:	4a76      	ldr	r2, [pc, #472]	@ (80086b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80084d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084dc:	ee07 3a90 	vmov	s15, r3
 80084e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008500:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008510:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800851c:	e058      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008528:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800852c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008530:	4b5c      	ldr	r3, [pc, #368]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008540:	ed97 6a02 	vldr	s12, [r7, #8]
 8008544:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008548:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800854c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008550:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008554:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008560:	e036      	b.n	80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008562:	4b50      	ldr	r3, [pc, #320]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800856e:	4b4d      	ldr	r3, [pc, #308]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	0f1b      	lsrs	r3, r3, #28
 8008574:	f003 030f 	and.w	r3, r3, #15
 8008578:	e006      	b.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800857a:	4b4a      	ldr	r3, [pc, #296]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800857c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	0f1b      	lsrs	r3, r3, #28
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	4a49      	ldr	r2, [pc, #292]	@ (80086b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800858a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80085b2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80086ac <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80085b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80085c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ce:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80085d0:	4b34      	ldr	r3, [pc, #208]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d017      	beq.n	800860c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085dc:	4b31      	ldr	r3, [pc, #196]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80085de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e0:	0a5b      	lsrs	r3, r3, #9
 80085e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80085ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80085fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008602:	ee17 2a90 	vmov	r2, s15
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e002      	b.n	8008612 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008612:	4b24      	ldr	r3, [pc, #144]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d017      	beq.n	800864e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800861e:	4b21      	ldr	r3, [pc, #132]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008622:	0c1b      	lsrs	r3, r3, #16
 8008624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008634:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008638:	edd7 6a07 	vldr	s13, [r7, #28]
 800863c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008644:	ee17 2a90 	vmov	r2, s15
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	605a      	str	r2, [r3, #4]
 800864c:	e002      	b.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008654:	4b13      	ldr	r3, [pc, #76]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d017      	beq.n	8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008660:	4b10      	ldr	r3, [pc, #64]	@ (80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008664:	0e1b      	lsrs	r3, r3, #24
 8008666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008676:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800867a:	edd7 6a07 	vldr	s13, [r7, #28]
 800867e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008686:	ee17 2a90 	vmov	r2, s15
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800868e:	e002      	b.n	8008696 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	609a      	str	r2, [r3, #8]
}
 8008696:	bf00      	nop
 8008698:	3724      	adds	r7, #36	@ 0x24
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	46020c00 	.word	0x46020c00
 80086a8:	4b742400 	.word	0x4b742400
 80086ac:	46000000 	.word	0x46000000
 80086b0:	080126d0 	.word	0x080126d0

080086b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	@ 0x38
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80086be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80086c6:	430b      	orrs	r3, r1
 80086c8:	d145      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80086ca:	4baa      	ldr	r3, [pc, #680]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80086d6:	4ba7      	ldr	r3, [pc, #668]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d108      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ea:	d104      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80086ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f2:	f001 b987 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80086f6:	4b9f      	ldr	r3, [pc, #636]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008704:	d114      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800870c:	d110      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800870e:	4b99      	ldr	r3, [pc, #612]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800871c:	d103      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800871e:	23fa      	movs	r3, #250	@ 0xfa
 8008720:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008722:	f001 b96f 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008726:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800872c:	f001 b96a 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008730:	4b90      	ldr	r3, [pc, #576]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800873c:	d107      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008744:	d103      	bne.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008746:	4b8c      	ldr	r3, [pc, #560]	@ (8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008748:	637b      	str	r3, [r7, #52]	@ 0x34
 800874a:	f001 b95b 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	637b      	str	r3, [r7, #52]	@ 0x34
 8008752:	f001 b957 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800875e:	430b      	orrs	r3, r1
 8008760:	d151      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008762:	4b84      	ldr	r3, [pc, #528]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008764:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008768:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800876c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	2b80      	cmp	r3, #128	@ 0x80
 8008772:	d035      	beq.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008776:	2b80      	cmp	r3, #128	@ 0x80
 8008778:	d841      	bhi.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800877a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877c:	2b60      	cmp	r3, #96	@ 0x60
 800877e:	d02a      	beq.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	2b60      	cmp	r3, #96	@ 0x60
 8008784:	d83b      	bhi.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	2b40      	cmp	r3, #64	@ 0x40
 800878a:	d009      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	2b40      	cmp	r3, #64	@ 0x40
 8008790:	d835      	bhi.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00c      	beq.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	2b20      	cmp	r3, #32
 800879c:	d012      	beq.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800879e:	e02e      	b.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff fb77 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ae:	f001 b929 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b2:	f107 0318 	add.w	r3, r7, #24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fcc8 	bl	800814c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c0:	f001 b920 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087c4:	f107 030c 	add.w	r3, r7, #12
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fe19 	bl	8008400 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087d2:	f001 b917 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80087d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80087da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087dc:	f001 b912 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087e0:	4b64      	ldr	r3, [pc, #400]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ec:	d103      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80087ee:	4b63      	ldr	r3, [pc, #396]	@ (800897c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80087f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087f2:	f001 b907 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087fa:	f001 b903 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008802:	f001 b8ff 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800880e:	430b      	orrs	r3, r1
 8008810:	d158      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008812:	4b58      	ldr	r3, [pc, #352]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008818:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800881c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008824:	d03b      	beq.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800882c:	d846      	bhi.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008834:	d02e      	beq.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800883c:	d83e      	bhi.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008844:	d00b      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800884c:	d836      	bhi.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00d      	beq.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885a:	d012      	beq.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800885c:	e02e      	b.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800885e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fb18 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800886c:	f001 b8ca 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008870:	f107 0318 	add.w	r3, r7, #24
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fc69 	bl	800814c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800887e:	f001 b8c1 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008882:	f107 030c 	add.w	r3, r7, #12
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fdba 	bl	8008400 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008890:	f001 b8b8 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008894:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800889a:	f001 b8b3 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800889e:	4b35      	ldr	r3, [pc, #212]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088aa:	d103      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80088ac:	4b33      	ldr	r3, [pc, #204]	@ (800897c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088b0:	f001 b8a8 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b8:	f001 b8a4 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088c0:	f001 b8a0 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80088c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c8:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80088cc:	430b      	orrs	r3, r1
 80088ce:	d16e      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80088d0:	4b28      	ldr	r3, [pc, #160]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80088d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088d6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80088da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80088e2:	d034      	beq.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80088ea:	d85c      	bhi.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088f2:	d00b      	beq.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088fa:	d854      	bhi.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d016      	beq.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008908:	d009      	beq.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800890a:	e04c      	b.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800890c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff fac1 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800891a:	f001 b873 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891e:	f107 0318 	add.w	r3, r7, #24
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff fc12 	bl	800814c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800892c:	f001 b86a 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008930:	4b10      	ldr	r3, [pc, #64]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800893c:	d103      	bne.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800893e:	4b10      	ldr	r3, [pc, #64]	@ (8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008940:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008942:	f001 b85f 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800894a:	f001 b85b 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800894e:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0320 	and.w	r3, r3, #32
 8008956:	2b20      	cmp	r3, #32
 8008958:	d121      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800895a:	4b06      	ldr	r3, [pc, #24]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00e      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8008966:	4b03      	ldr	r3, [pc, #12]	@ (8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	0e1b      	lsrs	r3, r3, #24
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	e00f      	b.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008972:	bf00      	nop
 8008974:	46020c00 	.word	0x46020c00
 8008978:	0007a120 	.word	0x0007a120
 800897c:	00f42400 	.word	0x00f42400
 8008980:	02dc6c00 	.word	0x02dc6c00
 8008984:	4ba7      	ldr	r3, [pc, #668]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800898a:	041b      	lsls	r3, r3, #16
 800898c:	0e1b      	lsrs	r3, r3, #24
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	4aa5      	ldr	r2, [pc, #660]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008998:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800899a:	f001 b833 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089a2:	f001 b82f 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089aa:	f001 b82b 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b2:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80089b6:	430b      	orrs	r3, r1
 80089b8:	d17f      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80089ba:	4b9a      	ldr	r3, [pc, #616]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80089bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089c4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d165      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80089cc:	4b95      	ldr	r3, [pc, #596]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80089ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089d2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80089d6:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089de:	d034      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80089e6:	d853      	bhi.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089ee:	d00b      	beq.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80089f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089f6:	d84b      	bhi.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a04:	d009      	beq.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008a06:	e043      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fa43 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a16:	f000 bff5 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1a:	f107 0318 	add.w	r3, r7, #24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff fb94 	bl	800814c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a28:	f000 bfec 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a38:	d103      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8008a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008a3c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008a3e:	f000 bfe1 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a46:	f000 bfdd 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008a4a:	4b76      	ldr	r3, [pc, #472]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d118      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a56:	4b73      	ldr	r3, [pc, #460]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008a62:	4b70      	ldr	r3, [pc, #448]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	0e1b      	lsrs	r3, r3, #24
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	e006      	b.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8008a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008a74:	041b      	lsls	r3, r3, #16
 8008a76:	0e1b      	lsrs	r3, r3, #24
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008a84:	f000 bfbe 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a8c:	f000 bfba 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008a94:	f000 bfb6 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a9e:	d108      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff f9f7 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aae:	f000 bfa9 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab6:	f000 bfa5 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008abe:	1e51      	subs	r1, r2, #1
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	d136      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008ac4:	4b57      	ldr	r3, [pc, #348]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008ad6:	f7fe fb55 	bl	8007184 <HAL_RCC_GetPCLK2Freq>
 8008ada:	6378      	str	r0, [r7, #52]	@ 0x34
 8008adc:	f000 bf92 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d104      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ae6:	f7fe fa1d 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008aea:	6378      	str	r0, [r7, #52]	@ 0x34
 8008aec:	f000 bf8a 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008af0:	4b4c      	ldr	r3, [pc, #304]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afc:	d106      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d103      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8008b04:	4b4a      	ldr	r3, [pc, #296]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b08:	f000 bf7c 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008b0c:	4b45      	ldr	r3, [pc, #276]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d107      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d104      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8008b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b26:	f000 bf6d 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b2e:	f000 bf69 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b36:	1e91      	subs	r1, r2, #2
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	d136      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008b3c:	4b39      	ldr	r3, [pc, #228]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b42:	f003 030c 	and.w	r3, r3, #12
 8008b46:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d104      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008b4e:	f7fe fb05 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 8008b52:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b54:	f000 bf56 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d104      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b5e:	f7fe f9e1 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008b62:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b64:	f000 bf4e 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008b68:	4b2e      	ldr	r3, [pc, #184]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b74:	d106      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d103      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8008b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b80:	f000 bf40 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008b84:	4b27      	ldr	r3, [pc, #156]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d107      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	2b0c      	cmp	r3, #12
 8008b96:	d104      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8008b98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9e:	f000 bf31 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba6:	f000 bf2d 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bae:	1f11      	subs	r1, r2, #4
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	d13f      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008bbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d104      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008bc6:	f7fe fac9 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 8008bca:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bcc:	f000 bf1a 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd2:	2b10      	cmp	r3, #16
 8008bd4:	d104      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008bd6:	f7fe f9a5 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008bda:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bdc:	f000 bf12 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008be0:	4b10      	ldr	r3, [pc, #64]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bec:	d106      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d103      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8008bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf8:	f000 bf04 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008bfc:	4b09      	ldr	r3, [pc, #36]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8008bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d107      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0c:	2b30      	cmp	r3, #48	@ 0x30
 8008c0e:	d104      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8008c10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c16:	f000 bef5 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c1e:	f000 bef1 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008c22:	bf00      	nop
 8008c24:	46020c00 	.word	0x46020c00
 8008c28:	080126d0 	.word	0x080126d0
 8008c2c:	02dc6c00 	.word	0x02dc6c00
 8008c30:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c38:	f1a2 0108 	sub.w	r1, r2, #8
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	d136      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008c40:	4ba4      	ldr	r3, [pc, #656]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c52:	f7fe fa83 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 8008c56:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c58:	f000 bed4 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5e:	2b40      	cmp	r3, #64	@ 0x40
 8008c60:	d104      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c62:	f7fe f95f 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008c66:	6378      	str	r0, [r7, #52]	@ 0x34
 8008c68:	f000 becc 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008c6c:	4b99      	ldr	r3, [pc, #612]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c78:	d106      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	2b80      	cmp	r3, #128	@ 0x80
 8008c7e:	d103      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8008c80:	4b95      	ldr	r3, [pc, #596]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c84:	f000 bebe 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008c88:	4b92      	ldr	r3, [pc, #584]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d107      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c9a:	d104      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8008c9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ca2:	f000 beaf 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008caa:	f000 beab 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb2:	f1a2 0110 	sub.w	r1, r2, #16
 8008cb6:	430b      	orrs	r3, r1
 8008cb8:	d139      	bne.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008cba:	4b86      	ldr	r3, [pc, #536]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cc4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ccc:	f7fe fa46 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 8008cd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008cd2:	f000 be97 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cdc:	d104      	bne.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008cde:	f7fe f921 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008ce2:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ce4:	f000 be8e 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008ce8:	4b7a      	ldr	r3, [pc, #488]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cf4:	d107      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cfc:	d103      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8008cfe:	4b76      	ldr	r3, [pc, #472]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d02:	f000 be7f 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008d06:	4b73      	ldr	r3, [pc, #460]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d108      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8008d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d1a:	d104      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8008d1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d22:	f000 be6f 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2a:	f000 be6b 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d32:	f1a2 0120 	sub.w	r1, r2, #32
 8008d36:	430b      	orrs	r3, r1
 8008d38:	d158      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008d3a:	4b66      	ldr	r3, [pc, #408]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008d4c:	f7fe fa2e 	bl	80071ac <HAL_RCC_GetPCLK3Freq>
 8008d50:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d52:	f000 be57 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d104      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008d5c:	f7fe f8e2 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008d60:	6378      	str	r0, [r7, #52]	@ 0x34
 8008d62:	f000 be4f 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008d66:	4b5b      	ldr	r3, [pc, #364]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d72:	d106      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d103      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8008d7a:	4b57      	ldr	r3, [pc, #348]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d7e:	f000 be41 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008d82:	4b54      	ldr	r3, [pc, #336]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d107      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8008d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d104      	bne.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8008d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d9c:	f000 be32 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008da0:	4b4c      	ldr	r3, [pc, #304]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d11b      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d118      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008db2:	4b48      	ldr	r3, [pc, #288]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8008dbe:	4b45      	ldr	r3, [pc, #276]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	0e1b      	lsrs	r3, r3, #24
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	e006      	b.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008dca:	4b42      	ldr	r3, [pc, #264]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008dd0:	041b      	lsls	r3, r3, #16
 8008dd2:	0e1b      	lsrs	r3, r3, #24
 8008dd4:	f003 030f 	and.w	r3, r3, #15
 8008dd8:	4a40      	ldr	r2, [pc, #256]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8008dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de0:	f000 be10 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de8:	f000 be0c 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008df4:	430b      	orrs	r3, r1
 8008df6:	d173      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008df8:	4b36      	ldr	r3, [pc, #216]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008dfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dfe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008e02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e0a:	d104      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e0c:	f7fe f88a 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8008e10:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e12:	f000 bdf7 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e1c:	d108      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1e:	f107 0318 	add.w	r3, r7, #24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff f992 	bl	800814c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2c:	f000 bdea 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d104      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008e36:	f7fe f977 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 8008e3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e3c:	f000 bde2 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008e46:	d122      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008e48:	4b22      	ldr	r3, [pc, #136]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d118      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e54:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8008e60:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	0e1b      	lsrs	r3, r3, #24
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	e006      	b.n	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8008e6c:	4b19      	ldr	r3, [pc, #100]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e72:	041b      	lsls	r3, r3, #16
 8008e74:	0e1b      	lsrs	r3, r3, #24
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	4a18      	ldr	r2, [pc, #96]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8008e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e82:	f000 bdbf 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e8a:	f000 bdbb 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008e8e:	4b11      	ldr	r3, [pc, #68]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e9a:	d107      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ea2:	d103      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8008ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea8:	f000 bdac 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008eac:	4b09      	ldr	r3, [pc, #36]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eb8:	d107      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ec0:	d103      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8008ec2:	4b05      	ldr	r3, [pc, #20]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec6:	f000 bd9d 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ece:	f000 bd99 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008ed2:	bf00      	nop
 8008ed4:	46020c00 	.word	0x46020c00
 8008ed8:	00f42400 	.word	0x00f42400
 8008edc:	080126d0 	.word	0x080126d0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	d158      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008eec:	4bad      	ldr	r3, [pc, #692]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008eee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d84b      	bhi.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008efe:	a201      	add	r2, pc, #4	@ (adr r2, 8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f04:	08008f3d 	.word	0x08008f3d
 8008f08:	08008f19 	.word	0x08008f19
 8008f0c:	08008f2b 	.word	0x08008f2b
 8008f10:	08008f47 	.word	0x08008f47
 8008f14:	08008f51 	.word	0x08008f51
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe ffbb 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f26:	f000 bd6d 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2a:	f107 030c 	add.w	r3, r7, #12
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff fa66 	bl	8008400 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f38:	f000 bd64 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008f3c:	f7fe f8f4 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 8008f40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f42:	f000 bd5f 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f4c:	f000 bd5a 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008f50:	4b94      	ldr	r3, [pc, #592]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0320 	and.w	r3, r3, #32
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	d118      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f5c:	4b91      	ldr	r3, [pc, #580]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8008f68:	4b8e      	ldr	r3, [pc, #568]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	0e1b      	lsrs	r3, r3, #24
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	e006      	b.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8008f74:	4b8b      	ldr	r3, [pc, #556]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f7a:	041b      	lsls	r3, r3, #16
 8008f7c:	0e1b      	lsrs	r3, r3, #24
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	4a89      	ldr	r2, [pc, #548]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f8a:	f000 bd3b 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f92:	f000 bd37 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f9a:	f000 bd33 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008fa6:	430b      	orrs	r3, r1
 8008fa8:	d167      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008faa:	4b7e      	ldr	r3, [pc, #504]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fb0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008fb4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fbc:	d036      	beq.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fc4:	d855      	bhi.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008fcc:	d029      	beq.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008fd4:	d84d      	bhi.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fdc:	d013      	beq.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe4:	d845      	bhi.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d015      	beq.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff2:	d13e      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fe ff4d 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009002:	f000 bcff 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009006:	f107 030c 	add.w	r3, r7, #12
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff f9f8 	bl	8008400 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009014:	f000 bcf6 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009018:	f7fe f886 	bl	8007128 <HAL_RCC_GetHCLKFreq>
 800901c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800901e:	f000 bcf1 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009022:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009026:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009028:	f000 bcec 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800902c:	4b5d      	ldr	r3, [pc, #372]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b20      	cmp	r3, #32
 8009036:	d118      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009038:	4b5a      	ldr	r3, [pc, #360]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d005      	beq.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8009044:	4b57      	ldr	r3, [pc, #348]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	0e1b      	lsrs	r3, r3, #24
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	e006      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8009050:	4b54      	ldr	r3, [pc, #336]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009056:	041b      	lsls	r3, r3, #16
 8009058:	0e1b      	lsrs	r3, r3, #24
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	4a52      	ldr	r2, [pc, #328]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009064:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009066:	f000 bccd 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800906e:	f000 bcc9 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009076:	f000 bcc5 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800907a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009082:	430b      	orrs	r3, r1
 8009084:	d14c      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009086:	4b47      	ldr	r3, [pc, #284]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800908c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009090:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	2b00      	cmp	r3, #0
 8009096:	d104      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009098:	f7fe f860 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 800909c:	6378      	str	r0, [r7, #52]	@ 0x34
 800909e:	f000 bcb1 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090a8:	d104      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090aa:	f7fd ff3b 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 80090ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80090b0:	f000 bca8 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80090b4:	4b3b      	ldr	r3, [pc, #236]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090c0:	d107      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090c8:	d103      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80090ca:	4b38      	ldr	r3, [pc, #224]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80090cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ce:	f000 bc99 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80090d2:	4b34      	ldr	r3, [pc, #208]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b20      	cmp	r3, #32
 80090dc:	d11c      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80090e4:	d118      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090e6:	4b2f      	ldr	r3, [pc, #188]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80090f2:	4b2c      	ldr	r3, [pc, #176]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	0e1b      	lsrs	r3, r3, #24
 80090f8:	f003 030f 	and.w	r3, r3, #15
 80090fc:	e006      	b.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80090fe:	4b29      	ldr	r3, [pc, #164]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8009100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009104:	041b      	lsls	r3, r3, #16
 8009106:	0e1b      	lsrs	r3, r3, #24
 8009108:	f003 030f 	and.w	r3, r3, #15
 800910c:	4a26      	ldr	r2, [pc, #152]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800910e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009112:	637b      	str	r3, [r7, #52]	@ 0x34
 8009114:	f000 bc76 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	637b      	str	r3, [r7, #52]	@ 0x34
 800911c:	f000 bc72 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009124:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009128:	430b      	orrs	r3, r1
 800912a:	d152      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800912c:	4b1d      	ldr	r3, [pc, #116]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800912e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009132:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009136:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	2b00      	cmp	r3, #0
 800913c:	d104      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800913e:	f7fe f80d 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 8009142:	6378      	str	r0, [r7, #52]	@ 0x34
 8009144:	f000 bc5e 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800914e:	d104      	bne.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009150:	f7fd fee8 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8009154:	6378      	str	r0, [r7, #52]	@ 0x34
 8009156:	f000 bc55 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800915a:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009166:	d107      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800916e:	d103      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8009170:	4b0e      	ldr	r3, [pc, #56]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009172:	637b      	str	r3, [r7, #52]	@ 0x34
 8009174:	f000 bc46 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009178:	4b0a      	ldr	r3, [pc, #40]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b20      	cmp	r3, #32
 8009182:	d122      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800918a:	d11e      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8009198:	4b02      	ldr	r3, [pc, #8]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	0e1b      	lsrs	r3, r3, #24
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	e00c      	b.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80091a4:	46020c00 	.word	0x46020c00
 80091a8:	080126d0 	.word	0x080126d0
 80091ac:	00f42400 	.word	0x00f42400
 80091b0:	4ba1      	ldr	r3, [pc, #644]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80091b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091b6:	041b      	lsls	r3, r3, #16
 80091b8:	0e1b      	lsrs	r3, r3, #24
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	4a9f      	ldr	r2, [pc, #636]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80091c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c6:	f000 bc1d 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ce:	f000 bc19 	b.w	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80091d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80091da:	430b      	orrs	r3, r1
 80091dc:	d151      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80091de:	4b96      	ldr	r3, [pc, #600]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80091e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80091e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80091ee:	d024      	beq.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80091f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80091f4:	d842      	bhi.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80091f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f8:	2b80      	cmp	r3, #128	@ 0x80
 80091fa:	d00d      	beq.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	2b80      	cmp	r3, #128	@ 0x80
 8009200:	d83c      	bhi.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8009202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	2b40      	cmp	r3, #64	@ 0x40
 800920c:	d011      	beq.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800920e:	e035      	b.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009210:	f7fd ffcc 	bl	80071ac <HAL_RCC_GetPCLK3Freq>
 8009214:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009216:	e3f5      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009218:	4b87      	ldr	r3, [pc, #540]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009224:	d102      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8009226:	4b86      	ldr	r3, [pc, #536]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009228:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800922a:	e3eb      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009230:	e3e8      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009232:	f7fd fe77 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8009236:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009238:	e3e4      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800923a:	4b7f      	ldr	r3, [pc, #508]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b20      	cmp	r3, #32
 8009244:	d117      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009246:	4b7c      	ldr	r3, [pc, #496]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d005      	beq.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009252:	4b79      	ldr	r3, [pc, #484]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	0e1b      	lsrs	r3, r3, #24
 8009258:	f003 030f 	and.w	r3, r3, #15
 800925c:	e006      	b.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800925e:	4b76      	ldr	r3, [pc, #472]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009264:	041b      	lsls	r3, r3, #16
 8009266:	0e1b      	lsrs	r3, r3, #24
 8009268:	f003 030f 	and.w	r3, r3, #15
 800926c:	4a73      	ldr	r2, [pc, #460]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800926e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009272:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009274:	e3c6      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800927a:	e3c3      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009280:	e3c0      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009286:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800928a:	430b      	orrs	r3, r1
 800928c:	d147      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800928e:	4b6a      	ldr	r3, [pc, #424]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009294:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009298:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80092a0:	f7fd ff5c 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80092a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80092a6:	e3ad      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092ae:	d103      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80092b0:	f7fd fe38 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 80092b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80092b6:	e3a5      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80092b8:	4b5f      	ldr	r3, [pc, #380]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092c4:	d106      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092cc:	d102      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80092ce:	4b5c      	ldr	r3, [pc, #368]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d2:	e397      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80092d4:	4b58      	ldr	r3, [pc, #352]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0320 	and.w	r3, r3, #32
 80092dc:	2b20      	cmp	r3, #32
 80092de:	d11b      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80092e6:	d117      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092e8:	4b53      	ldr	r3, [pc, #332]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d005      	beq.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80092f4:	4b50      	ldr	r3, [pc, #320]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	0e1b      	lsrs	r3, r3, #24
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	e006      	b.n	800930e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8009300:	4b4d      	ldr	r3, [pc, #308]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009306:	041b      	lsls	r3, r3, #16
 8009308:	0e1b      	lsrs	r3, r3, #24
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	4a4b      	ldr	r2, [pc, #300]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
 8009316:	e375      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34
 800931c:	e372      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800931e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009322:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009326:	430b      	orrs	r3, r1
 8009328:	d164      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800932a:	4b43      	ldr	r3, [pc, #268]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800932c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009330:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009334:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	2b00      	cmp	r3, #0
 800933a:	d120      	bne.n	800937e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800933c:	4b3e      	ldr	r3, [pc, #248]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0320 	and.w	r3, r3, #32
 8009344:	2b20      	cmp	r3, #32
 8009346:	d117      	bne.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009348:	4b3b      	ldr	r3, [pc, #236]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8009354:	4b38      	ldr	r3, [pc, #224]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	0e1b      	lsrs	r3, r3, #24
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	e006      	b.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8009360:	4b35      	ldr	r3, [pc, #212]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	0e1b      	lsrs	r3, r3, #24
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	4a33      	ldr	r2, [pc, #204]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
 8009376:	e345      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	637b      	str	r3, [r7, #52]	@ 0x34
 800937c:	e342      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800937e:	4b2e      	ldr	r3, [pc, #184]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800938c:	d112      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800938e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009394:	d10e      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009396:	4b28      	ldr	r3, [pc, #160]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800939c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093a4:	d102      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80093a6:	23fa      	movs	r3, #250	@ 0xfa
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093aa:	e32b      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80093ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093b2:	e327      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80093b4:	4b20      	ldr	r3, [pc, #128]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093c0:	d106      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c8:	d102      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80093ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ce:	e319      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80093d0:	4b19      	ldr	r3, [pc, #100]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80093d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d107      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093e4:	d103      	bne.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80093e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ec:	e30a      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093f2:	e307      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80093f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80093fc:	430b      	orrs	r3, r1
 80093fe:	d16b      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009400:	4b0d      	ldr	r3, [pc, #52]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009406:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800940a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d127      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009412:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b20      	cmp	r3, #32
 800941c:	d11e      	bne.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800941e:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00c      	beq.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800942a:	4b03      	ldr	r3, [pc, #12]	@ (8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	0e1b      	lsrs	r3, r3, #24
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	e00d      	b.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009436:	bf00      	nop
 8009438:	46020c00 	.word	0x46020c00
 800943c:	080126d0 	.word	0x080126d0
 8009440:	00f42400 	.word	0x00f42400
 8009444:	4b94      	ldr	r3, [pc, #592]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800944a:	041b      	lsls	r3, r3, #16
 800944c:	0e1b      	lsrs	r3, r3, #24
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	4a92      	ldr	r2, [pc, #584]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
 800945a:	e2d3      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800945c:	2300      	movs	r3, #0
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009460:	e2d0      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009462:	4b8d      	ldr	r3, [pc, #564]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800946c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009470:	d112      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009478:	d10e      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800947a:	4b87      	ldr	r3, [pc, #540]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800947c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009488:	d102      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800948a:	23fa      	movs	r3, #250	@ 0xfa
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800948e:	e2b9      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009490:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009494:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009496:	e2b5      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009498:	4b7f      	ldr	r3, [pc, #508]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094a4:	d106      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094ac:	d102      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80094ae:	4b7c      	ldr	r3, [pc, #496]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b2:	e2a7      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80094b4:	4b78      	ldr	r3, [pc, #480]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80094b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d107      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094c8:	d103      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80094ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d0:	e298      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d6:	e295      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80094d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094dc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80094e0:	430b      	orrs	r3, r1
 80094e2:	d147      	bne.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80094e4:	4b6c      	ldr	r3, [pc, #432]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80094e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094ea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80094ee:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80094f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094f6:	f7fd fe31 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80094fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80094fc:	e282      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80094fe:	4b66      	ldr	r3, [pc, #408]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800950c:	d112      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009514:	d10e      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009516:	4b60      	ldr	r3, [pc, #384]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800951c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009524:	d102      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8009526:	23fa      	movs	r3, #250	@ 0xfa
 8009528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800952a:	e26b      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800952c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009530:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009532:	e267      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009534:	4b58      	ldr	r3, [pc, #352]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800953c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009540:	d106      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009548:	d102      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800954a:	4b55      	ldr	r3, [pc, #340]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
 800954e:	e259      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009550:	4b51      	ldr	r3, [pc, #324]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b02      	cmp	r3, #2
 800955c:	d107      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009564:	d103      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8009566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	e24a      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	637b      	str	r3, [r7, #52]	@ 0x34
 8009572:	e247      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009578:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800957c:	430b      	orrs	r3, r1
 800957e:	d12d      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009580:	4b45      	ldr	r3, [pc, #276]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009586:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800958a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800958c:	4b42      	ldr	r3, [pc, #264]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009598:	d105      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80095a0:	4b3f      	ldr	r3, [pc, #252]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a4:	e22e      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095ac:	d107      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fc70 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80095b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80095bc:	e222      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095c4:	d107      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c6:	f107 0318 	add.w	r3, r7, #24
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fdbe 	bl	800814c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d4:	e216      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095da:	e213      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80095dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80095e4:	430b      	orrs	r3, r1
 80095e6:	d15d      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80095e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80095ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095ee:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80095f2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80095fa:	d028      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009602:	d845      	bhi.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800960a:	d013      	beq.n	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009612:	d83d      	bhi.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800961a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009620:	d004      	beq.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8009622:	e035      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009624:	f7fd fdae 	bl	8007184 <HAL_RCC_GetPCLK2Freq>
 8009628:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800962a:	e1eb      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800962c:	f7fd fc7a 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8009630:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009632:	e1e7      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009634:	4b18      	ldr	r3, [pc, #96]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800963c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009640:	d102      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8009642:	4b17      	ldr	r3, [pc, #92]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009646:	e1dd      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800964c:	e1da      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800964e:	4b12      	ldr	r3, [pc, #72]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b20      	cmp	r3, #32
 8009658:	d117      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800965a:	4b0f      	ldr	r3, [pc, #60]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d005      	beq.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8009666:	4b0c      	ldr	r3, [pc, #48]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	0e1b      	lsrs	r3, r3, #24
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	e006      	b.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8009672:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8009674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	0e1b      	lsrs	r3, r3, #24
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	4a06      	ldr	r2, [pc, #24]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8009682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009686:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009688:	e1bc      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800968e:	e1b9      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009694:	e1b6      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009696:	bf00      	nop
 8009698:	46020c00 	.word	0x46020c00
 800969c:	080126d0 	.word	0x080126d0
 80096a0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80096a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a8:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80096ac:	430b      	orrs	r3, r1
 80096ae:	d156      	bne.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80096b0:	4ba5      	ldr	r3, [pc, #660]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80096b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096ba:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096c2:	d028      	beq.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80096ca:	d845      	bhi.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096d2:	d013      	beq.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096da:	d83d      	bhi.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e8:	d004      	beq.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80096ea:	e035      	b.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80096ec:	f7fd fd36 	bl	800715c <HAL_RCC_GetPCLK1Freq>
 80096f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80096f2:	e187      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80096f4:	f7fd fc16 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 80096f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80096fa:	e183      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096fc:	4b92      	ldr	r3, [pc, #584]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009708:	d102      	bne.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800970a:	4b90      	ldr	r3, [pc, #576]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800970e:	e179      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009714:	e176      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009716:	4b8c      	ldr	r3, [pc, #560]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0320 	and.w	r3, r3, #32
 800971e:	2b20      	cmp	r3, #32
 8009720:	d117      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009722:	4b89      	ldr	r3, [pc, #548]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800972e:	4b86      	ldr	r3, [pc, #536]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	0e1b      	lsrs	r3, r3, #24
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	e006      	b.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800973a:	4b83      	ldr	r3, [pc, #524]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800973c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009740:	041b      	lsls	r3, r3, #16
 8009742:	0e1b      	lsrs	r3, r3, #24
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	4a81      	ldr	r2, [pc, #516]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800974a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009750:	e158      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009756:	e155      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800975c:	e152      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800975e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009762:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009766:	430b      	orrs	r3, r1
 8009768:	d177      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800976a:	4b77      	ldr	r3, [pc, #476]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800976c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009770:	f003 0318 	and.w	r3, r3, #24
 8009774:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	2b18      	cmp	r3, #24
 800977a:	d86b      	bhi.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800977c:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	080097e9 	.word	0x080097e9
 8009788:	08009855 	.word	0x08009855
 800978c:	08009855 	.word	0x08009855
 8009790:	08009855 	.word	0x08009855
 8009794:	08009855 	.word	0x08009855
 8009798:	08009855 	.word	0x08009855
 800979c:	08009855 	.word	0x08009855
 80097a0:	08009855 	.word	0x08009855
 80097a4:	080097f1 	.word	0x080097f1
 80097a8:	08009855 	.word	0x08009855
 80097ac:	08009855 	.word	0x08009855
 80097b0:	08009855 	.word	0x08009855
 80097b4:	08009855 	.word	0x08009855
 80097b8:	08009855 	.word	0x08009855
 80097bc:	08009855 	.word	0x08009855
 80097c0:	08009855 	.word	0x08009855
 80097c4:	080097f9 	.word	0x080097f9
 80097c8:	08009855 	.word	0x08009855
 80097cc:	08009855 	.word	0x08009855
 80097d0:	08009855 	.word	0x08009855
 80097d4:	08009855 	.word	0x08009855
 80097d8:	08009855 	.word	0x08009855
 80097dc:	08009855 	.word	0x08009855
 80097e0:	08009855 	.word	0x08009855
 80097e4:	08009813 	.word	0x08009813
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80097e8:	f7fd fce0 	bl	80071ac <HAL_RCC_GetPCLK3Freq>
 80097ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097ee:	e109      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80097f0:	f7fd fb98 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 80097f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097f6:	e105      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097f8:	4b53      	ldr	r3, [pc, #332]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009804:	d102      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8009806:	4b51      	ldr	r3, [pc, #324]	@ (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800980a:	e0fb      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009810:	e0f8      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009812:	4b4d      	ldr	r3, [pc, #308]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b20      	cmp	r3, #32
 800981c:	d117      	bne.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800981e:	4b4a      	ldr	r3, [pc, #296]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800982a:	4b47      	ldr	r3, [pc, #284]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	0e1b      	lsrs	r3, r3, #24
 8009830:	f003 030f 	and.w	r3, r3, #15
 8009834:	e006      	b.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8009836:	4b44      	ldr	r3, [pc, #272]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800983c:	041b      	lsls	r3, r3, #16
 800983e:	0e1b      	lsrs	r3, r3, #24
 8009840:	f003 030f 	and.w	r3, r3, #15
 8009844:	4a42      	ldr	r2, [pc, #264]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8009846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800984c:	e0da      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009852:	e0d7      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009858:	e0d4      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800985a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800985e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009862:	430b      	orrs	r3, r1
 8009864:	d155      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009866:	4b38      	ldr	r3, [pc, #224]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800986c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009870:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009874:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009878:	d013      	beq.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009880:	d844      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8009882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009888:	d013      	beq.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009890:	d83c      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	d014      	beq.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800989e:	d014      	beq.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80098a0:	e034      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a2:	f107 0318 	add.w	r3, r7, #24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fc50 	bl	800814c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098b0:	e0a8      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe faee 	bl	8007e98 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098c0:	e0a0      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80098c2:	f7fd fb2f 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 80098c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80098c8:	e09c      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0320 	and.w	r3, r3, #32
 80098d2:	2b20      	cmp	r3, #32
 80098d4:	d117      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d005      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80098e2:	4b19      	ldr	r3, [pc, #100]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	0e1b      	lsrs	r3, r3, #24
 80098e8:	f003 030f 	and.w	r3, r3, #15
 80098ec:	e006      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80098ee:	4b16      	ldr	r3, [pc, #88]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80098f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	0e1b      	lsrs	r3, r3, #24
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	4a14      	ldr	r2, [pc, #80]	@ (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80098fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009904:	e07e      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800990a:	e07b      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009910:	e078      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009916:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800991a:	430b      	orrs	r3, r1
 800991c:	d138      	bne.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800991e:	4b0a      	ldr	r3, [pc, #40]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8009920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009928:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800992a:	4b07      	ldr	r3, [pc, #28]	@ (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800992c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b02      	cmp	r3, #2
 8009936:	d10d      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800993e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009942:	637b      	str	r3, [r7, #52]	@ 0x34
 8009944:	e05e      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009946:	bf00      	nop
 8009948:	46020c00 	.word	0x46020c00
 800994c:	00f42400 	.word	0x00f42400
 8009950:	080126d0 	.word	0x080126d0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009954:	4b2e      	ldr	r3, [pc, #184]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8009956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800995a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800995e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009962:	d112      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800996a:	d10e      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800996c:	4b28      	ldr	r3, [pc, #160]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800996e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009976:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800997a:	d102      	bne.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800997c:	23fa      	movs	r3, #250	@ 0xfa
 800997e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009980:	e040      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009982:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009988:	e03c      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	637b      	str	r3, [r7, #52]	@ 0x34
 800998e:	e039      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009994:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009998:	430b      	orrs	r3, r1
 800999a:	d131      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800999c:	4b1c      	ldr	r3, [pc, #112]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800999e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80099a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80099a8:	4b19      	ldr	r3, [pc, #100]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099b4:	d105      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d102      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80099bc:	4b15      	ldr	r3, [pc, #84]	@ (8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80099be:	637b      	str	r3, [r7, #52]	@ 0x34
 80099c0:	e020      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80099c2:	4b13      	ldr	r3, [pc, #76]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ce:	d106      	bne.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099d6:	d102      	bne.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80099d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80099da:	637b      	str	r3, [r7, #52]	@ 0x34
 80099dc:	e012      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80099de:	4b0c      	ldr	r3, [pc, #48]	@ (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099ea:	d106      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099f2:	d102      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80099f4:	4b09      	ldr	r3, [pc, #36]	@ (8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f8:	e004      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fe:	e001      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3738      	adds	r7, #56	@ 0x38
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	46020c00 	.word	0x46020c00
 8009a14:	02dc6c00 	.word	0x02dc6c00
 8009a18:	016e3600 	.word	0x016e3600
 8009a1c:	00f42400 	.word	0x00f42400

08009a20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009a28:	4b47      	ldr	r3, [pc, #284]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a46      	ldr	r2, [pc, #280]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009a2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a34:	f7f9 fa3a 	bl	8002eac <HAL_GetTick>
 8009a38:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a3a:	e008      	b.n	8009a4e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a3c:	f7f9 fa36 	bl	8002eac <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d901      	bls.n	8009a4e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e077      	b.n	8009b3e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f0      	bne.n	8009a3c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	6811      	ldr	r1, [r2, #0]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	6852      	ldr	r2, [r2, #4]
 8009a6e:	3a01      	subs	r2, #1
 8009a70:	0212      	lsls	r2, r2, #8
 8009a72:	430a      	orrs	r2, r1
 8009a74:	4934      	ldr	r1, [pc, #208]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009a7a:	4b33      	ldr	r3, [pc, #204]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a7e:	4b33      	ldr	r3, [pc, #204]	@ (8009b4c <RCCEx_PLL2_Config+0x12c>)
 8009a80:	4013      	ands	r3, r2
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6892      	ldr	r2, [r2, #8]
 8009a86:	3a01      	subs	r2, #1
 8009a88:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68d2      	ldr	r2, [r2, #12]
 8009a90:	3a01      	subs	r2, #1
 8009a92:	0252      	lsls	r2, r2, #9
 8009a94:	b292      	uxth	r2, r2
 8009a96:	4311      	orrs	r1, r2
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6912      	ldr	r2, [r2, #16]
 8009a9c:	3a01      	subs	r2, #1
 8009a9e:	0412      	lsls	r2, r2, #16
 8009aa0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009aa4:	4311      	orrs	r1, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6952      	ldr	r2, [r2, #20]
 8009aaa:	3a01      	subs	r2, #1
 8009aac:	0612      	lsls	r2, r2, #24
 8009aae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	4924      	ldr	r1, [pc, #144]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009aba:	4b23      	ldr	r3, [pc, #140]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	f023 020c 	bic.w	r2, r3, #12
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	4920      	ldr	r1, [pc, #128]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009acc:	4b1e      	ldr	r3, [pc, #120]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	491c      	ldr	r1, [pc, #112]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009ada:	4b1b      	ldr	r3, [pc, #108]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ade:	4a1a      	ldr	r2, [pc, #104]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009ae0:	f023 0310 	bic.w	r3, r3, #16
 8009ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009ae6:	4b18      	ldr	r3, [pc, #96]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009aee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	69d2      	ldr	r2, [r2, #28]
 8009af6:	00d2      	lsls	r2, r2, #3
 8009af8:	4913      	ldr	r1, [pc, #76]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009afe:	4b12      	ldr	r3, [pc, #72]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b02:	4a11      	ldr	r2, [pc, #68]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009b04:	f043 0310 	orr.w	r3, r3, #16
 8009b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009b10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b14:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b16:	f7f9 f9c9 	bl	8002eac <HAL_GetTick>
 8009b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b1c:	e008      	b.n	8009b30 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b1e:	f7f9 f9c5 	bl	8002eac <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d901      	bls.n	8009b30 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e006      	b.n	8009b3e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b30:	4b05      	ldr	r3, [pc, #20]	@ (8009b48 <RCCEx_PLL2_Config+0x128>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0f0      	beq.n	8009b1e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0

}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	46020c00 	.word	0x46020c00
 8009b4c:	80800000 	.word	0x80800000

08009b50 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009b58:	4b47      	ldr	r3, [pc, #284]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a46      	ldr	r2, [pc, #280]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b64:	f7f9 f9a2 	bl	8002eac <HAL_GetTick>
 8009b68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b6a:	e008      	b.n	8009b7e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b6c:	f7f9 f99e 	bl	8002eac <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d901      	bls.n	8009b7e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e077      	b.n	8009c6e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1f0      	bne.n	8009b6c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	6811      	ldr	r1, [r2, #0]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6852      	ldr	r2, [r2, #4]
 8009b9e:	3a01      	subs	r2, #1
 8009ba0:	0212      	lsls	r2, r2, #8
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	4934      	ldr	r1, [pc, #208]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	630b      	str	r3, [r1, #48]	@ 0x30
 8009baa:	4b33      	ldr	r3, [pc, #204]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bae:	4b33      	ldr	r3, [pc, #204]	@ (8009c7c <RCCEx_PLL3_Config+0x12c>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6892      	ldr	r2, [r2, #8]
 8009bb6:	3a01      	subs	r2, #1
 8009bb8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	68d2      	ldr	r2, [r2, #12]
 8009bc0:	3a01      	subs	r2, #1
 8009bc2:	0252      	lsls	r2, r2, #9
 8009bc4:	b292      	uxth	r2, r2
 8009bc6:	4311      	orrs	r1, r2
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6912      	ldr	r2, [r2, #16]
 8009bcc:	3a01      	subs	r2, #1
 8009bce:	0412      	lsls	r2, r2, #16
 8009bd0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009bd4:	4311      	orrs	r1, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6952      	ldr	r2, [r2, #20]
 8009bda:	3a01      	subs	r2, #1
 8009bdc:	0612      	lsls	r2, r2, #24
 8009bde:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009be2:	430a      	orrs	r2, r1
 8009be4:	4924      	ldr	r1, [pc, #144]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009bea:	4b23      	ldr	r3, [pc, #140]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bee:	f023 020c 	bic.w	r2, r3, #12
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	4920      	ldr	r1, [pc, #128]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	491c      	ldr	r1, [pc, #112]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c10:	f023 0310 	bic.w	r3, r3, #16
 8009c14:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c16:	4b18      	ldr	r3, [pc, #96]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c1e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	69d2      	ldr	r2, [r2, #28]
 8009c26:	00d2      	lsls	r2, r2, #3
 8009c28:	4913      	ldr	r1, [pc, #76]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009c2e:	4b12      	ldr	r3, [pc, #72]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c32:	4a11      	ldr	r2, [pc, #68]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c34:	f043 0310 	orr.w	r3, r3, #16
 8009c38:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c44:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c46:	f7f9 f931 	bl	8002eac <HAL_GetTick>
 8009c4a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c4c:	e008      	b.n	8009c60 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c4e:	f7f9 f92d 	bl	8002eac <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d901      	bls.n	8009c60 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e006      	b.n	8009c6e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c60:	4b05      	ldr	r3, [pc, #20]	@ (8009c78 <RCCEx_PLL3_Config+0x128>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0f0      	beq.n	8009c4e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	46020c00 	.word	0x46020c00
 8009c7c:	80800000 	.word	0x80800000

08009c80 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d904      	bls.n	8009c9e <HAL_SAI_InitProtocol+0x1e>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3b03      	subs	r3, #3
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d812      	bhi.n	8009cc2 <HAL_SAI_InitProtocol+0x42>
 8009c9c:	e008      	b.n	8009cb0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 fd33 	bl	800a710 <SAI_InitI2S>
 8009caa:	4603      	mov	r3, r0
 8009cac:	75fb      	strb	r3, [r7, #23]
      break;
 8009cae:	e00b      	b.n	8009cc8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	68b9      	ldr	r1, [r7, #8]
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fddc 	bl	800a874 <SAI_InitPCM>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc0:	e002      	b.n	8009cc8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc6:	bf00      	nop
  }

  if (status == HAL_OK)
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d104      	bne.n	8009cd8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 f808 	bl	8009ce4 <HAL_SAI_Init>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08a      	sub	sp, #40	@ 0x28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e1ce      	b.n	800a094 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d10e      	bne.n	8009d1e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a83      	ldr	r2, [pc, #524]	@ (8009f14 <HAL_SAI_Init+0x230>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d107      	bne.n	8009d1a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d103      	bne.n	8009d1a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e1ba      	b.n	800a094 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7f8 f9ca 	bl	80020cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fe55 	bl	800a9e8 <SAI_Disable>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e1a5      	b.n	800a094 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d00c      	beq.n	8009d72 <HAL_SAI_Init+0x8e>
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d80d      	bhi.n	8009d78 <HAL_SAI_Init+0x94>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <HAL_SAI_Init+0x82>
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d003      	beq.n	8009d6c <HAL_SAI_Init+0x88>
 8009d64:	e008      	b.n	8009d78 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009d6a:	e008      	b.n	8009d7e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009d70:	e005      	b.n	8009d7e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009d72:	2320      	movs	r3, #32
 8009d74:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009d76:	e002      	b.n	8009d7e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009d7c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d81d      	bhi.n	8009dc2 <HAL_SAI_Init+0xde>
 8009d86:	a201      	add	r2, pc, #4	@ (adr r2, 8009d8c <HAL_SAI_Init+0xa8>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009da3 	.word	0x08009da3
 8009d94:	08009dab 	.word	0x08009dab
 8009d98:	08009db3 	.word	0x08009db3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	61fb      	str	r3, [r7, #28]
      break;
 8009da0:	e012      	b.n	8009dc8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009da6:	61fb      	str	r3, [r7, #28]
      break;
 8009da8:	e00e      	b.n	8009dc8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009daa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009dae:	61fb      	str	r3, [r7, #28]
      break;
 8009db0:	e00a      	b.n	8009dc8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009db2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009db6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	f043 0301 	orr.w	r3, r3, #1
 8009dbe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009dc0:	e002      	b.n	8009dc8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61fb      	str	r3, [r7, #28]
      break;
 8009dc6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a51      	ldr	r2, [pc, #324]	@ (8009f14 <HAL_SAI_Init+0x230>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d004      	beq.n	8009ddc <HAL_SAI_Init+0xf8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a50      	ldr	r2, [pc, #320]	@ (8009f18 <HAL_SAI_Init+0x234>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d103      	bne.n	8009de4 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8009ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8009f1c <HAL_SAI_Init+0x238>)
 8009dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	e002      	b.n	8009dea <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009de4:	4a4e      	ldr	r2, [pc, #312]	@ (8009f20 <HAL_SAI_Init+0x23c>)
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d077      	beq.n	8009ee2 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a47      	ldr	r2, [pc, #284]	@ (8009f14 <HAL_SAI_Init+0x230>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d004      	beq.n	8009e06 <HAL_SAI_Init+0x122>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a45      	ldr	r2, [pc, #276]	@ (8009f18 <HAL_SAI_Init+0x234>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d107      	bne.n	8009e16 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009e06:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009e0a:	f04f 0100 	mov.w	r1, #0
 8009e0e:	f7fe fc51 	bl	80086b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e12:	61b8      	str	r0, [r7, #24]
 8009e14:	e006      	b.n	8009e24 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009e16:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009e1a:	f04f 0100 	mov.w	r1, #0
 8009e1e:	f7fe fc49 	bl	80086b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e22:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e2c:	d120      	bne.n	8009e70 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d102      	bne.n	8009e3c <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009e36:	2340      	movs	r3, #64	@ 0x40
 8009e38:	613b      	str	r3, [r7, #16]
 8009e3a:	e00a      	b.n	8009e52 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d103      	bne.n	8009e4c <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e48:	613b      	str	r3, [r7, #16]
 8009e4a:	e002      	b.n	8009e52 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e50:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	fb02 f303 	mul.w	r3, r2, r3
 8009e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e6c:	617b      	str	r3, [r7, #20]
 8009e6e:	e017      	b.n	8009ea0 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e78:	d101      	bne.n	8009e7e <HAL_SAI_Init+0x19a>
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e000      	b.n	8009e80 <HAL_SAI_Init+0x19c>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	fb02 f303 	mul.w	r3, r2, r3
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e9e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4a20      	ldr	r2, [pc, #128]	@ (8009f24 <HAL_SAI_Init+0x240>)
 8009ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea8:	08da      	lsrs	r2, r3, #3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009eae:	6979      	ldr	r1, [r7, #20]
 8009eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8009f24 <HAL_SAI_Init+0x240>)
 8009eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8009eb6:	08da      	lsrs	r2, r3, #3
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	1aca      	subs	r2, r1, r3
 8009ec2:	2a08      	cmp	r2, #8
 8009ec4:	d904      	bls.n	8009ed0 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d104      	bne.n	8009ee2 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009edc:	085a      	lsrs	r2, r3, #1
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <HAL_SAI_Init+0x20e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d109      	bne.n	8009f06 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d101      	bne.n	8009efe <HAL_SAI_Init+0x21a>
 8009efa:	2300      	movs	r3, #0
 8009efc:	e001      	b.n	8009f02 <HAL_SAI_Init+0x21e>
 8009efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f02:	623b      	str	r3, [r7, #32]
 8009f04:	e012      	b.n	8009f2c <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d10c      	bne.n	8009f28 <HAL_SAI_Init+0x244>
 8009f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f12:	e00a      	b.n	8009f2a <HAL_SAI_Init+0x246>
 8009f14:	40015404 	.word	0x40015404
 8009f18:	40015424 	.word	0x40015424
 8009f1c:	40015400 	.word	0x40015400
 8009f20:	40015800 	.word	0x40015800
 8009f24:	cccccccd 	.word	0xcccccccd
 8009f28:	2300      	movs	r3, #0
 8009f2a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6819      	ldr	r1, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	4b59      	ldr	r3, [pc, #356]	@ (800a09c <HAL_SAI_Init+0x3b8>)
 8009f38:	400b      	ands	r3, r1
 8009f3a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685a      	ldr	r2, [r3, #4]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f56:	431a      	orrs	r2, r3
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009f64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009f70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f76:	051b      	lsls	r3, r3, #20
 8009f78:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009f7e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6812      	ldr	r2, [r2, #0]
 8009f98:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009f9c:	f023 030f 	bic.w	r3, r3, #15
 8009fa0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6859      	ldr	r1, [r3, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	69da      	ldr	r2, [r3, #28]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6899      	ldr	r1, [r3, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	4b35      	ldr	r3, [pc, #212]	@ (800a0a0 <HAL_SAI_Init+0x3bc>)
 8009fcc:	400b      	ands	r3, r1
 8009fce:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6899      	ldr	r1, [r3, #8]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fda:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009fe0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8009fe6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8009fec:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009ff6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68d9      	ldr	r1, [r3, #12]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a00e:	400b      	ands	r3, r1
 800a010:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68d9      	ldr	r1, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a020:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a026:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a028:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a02e:	3b01      	subs	r3, #1
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a18      	ldr	r2, [pc, #96]	@ (800a0a4 <HAL_SAI_Init+0x3c0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d119      	bne.n	800a07a <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a046:	4b18      	ldr	r3, [pc, #96]	@ (800a0a8 <HAL_SAI_Init+0x3c4>)
 800a048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a04a:	4a17      	ldr	r2, [pc, #92]	@ (800a0a8 <HAL_SAI_Init+0x3c4>)
 800a04c:	f023 0301 	bic.w	r3, r3, #1
 800a050:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d10e      	bne.n	800a07a <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a064:	3b01      	subs	r3, #1
 800a066:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a068:	490f      	ldr	r1, [pc, #60]	@ (800a0a8 <HAL_SAI_Init+0x3c4>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800a06e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a8 <HAL_SAI_Init+0x3c4>)
 800a070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a072:	4a0d      	ldr	r2, [pc, #52]	@ (800a0a8 <HAL_SAI_Init+0x3c4>)
 800a074:	f043 0301 	orr.w	r3, r3, #1
 800a078:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3728      	adds	r7, #40	@ 0x28
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	f005c010 	.word	0xf005c010
 800a0a0:	fff88000 	.word	0xfff88000
 800a0a4:	40015404 	.word	0x40015404
 800a0a8:	40015400 	.word	0x40015400

0800a0ac <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d101      	bne.n	800a0c6 <HAL_SAI_Abort+0x1a>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e07d      	b.n	800a1c2 <HAL_SAI_Abort+0x116>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fc8a 	bl	800a9e8 <SAI_Disable>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0ec:	d14f      	bne.n	800a18e <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a0fc:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b12      	cmp	r3, #18
 800a108:	d11d      	bne.n	800a146 <HAL_SAI_Abort+0x9a>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a110:	2b00      	cmp	r3, #0
 800a112:	d018      	beq.n	800a146 <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7f9 fd82 	bl	8003c24 <HAL_DMA_Abort>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00f      	beq.n	800a146 <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a12e:	2b20      	cmp	r3, #32
 800a130:	d009      	beq.n	800a146 <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a13c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b22      	cmp	r3, #34	@ 0x22
 800a150:	d11d      	bne.n	800a18e <HAL_SAI_Abort+0xe2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d018      	beq.n	800a18e <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a162:	4618      	mov	r0, r3
 800a164:	f7f9 fd5e 	bl	8003c24 <HAL_DMA_Abort>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00f      	beq.n	800a18e <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a176:	2b20      	cmp	r3, #32
 800a178:	d009      	beq.n	800a18e <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a184:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2200      	movs	r2, #0
 800a194:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295
 800a19e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0208 	orr.w	r2, r2, #8
 800a1ae:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <HAL_SAI_Receive_DMA+0x1a>
 800a1e0:	88fb      	ldrh	r3, [r7, #6]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0c6      	b.n	800a378 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	f040 80bf 	bne.w	800a376 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_SAI_Receive_DMA+0x3a>
 800a202:	2302      	movs	r3, #2
 800a204:	e0b8      	b.n	800a378 <HAL_SAI_Receive_DMA+0x1ac>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	88fa      	ldrh	r2, [r7, #6]
 800a218:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	88fa      	ldrh	r2, [r7, #6]
 800a220:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2222      	movs	r2, #34	@ 0x22
 800a230:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a23a:	4a51      	ldr	r2, [pc, #324]	@ (800a380 <HAL_SAI_Receive_DMA+0x1b4>)
 800a23c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a244:	4a4f      	ldr	r2, [pc, #316]	@ (800a384 <HAL_SAI_Receive_DMA+0x1b8>)
 800a246:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a24e:	4a4e      	ldr	r2, [pc, #312]	@ (800a388 <HAL_SAI_Receive_DMA+0x1bc>)
 800a250:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a258:	2200      	movs	r2, #0
 800a25a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a260:	2b40      	cmp	r3, #64	@ 0x40
 800a262:	d106      	bne.n	800a272 <HAL_SAI_Receive_DMA+0xa6>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	e00a      	b.n	800a288 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a276:	2b80      	cmp	r3, #128	@ 0x80
 800a278:	d803      	bhi.n	800a282 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	e002      	b.n	800a288 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 800a282:	88fb      	ldrh	r3, [r7, #6]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a294:	2b00      	cmp	r3, #0
 800a296:	d02d      	beq.n	800a2f4 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a29e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d021      	beq.n	800a2e8 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f103 021c 	add.w	r2, r3, #28
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fa fab5 	bl	800484c <HAL_DMAEx_List_Start_IT>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	75fb      	strb	r3, [r7, #23]
 800a2e6:	e014      	b.n	800a312 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e041      	b.n	800a378 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	331c      	adds	r3, #28
 800a300:	4619      	mov	r1, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a306:	461a      	mov	r2, r3
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f7f9 fc2b 	bl	8003b64 <HAL_DMA_Start_IT>
 800a30e:	4603      	mov	r3, r0
 800a310:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 800a312:	7dfb      	ldrb	r3, [r7, #23]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e029      	b.n	800a378 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a324:	2100      	movs	r1, #0
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f000 fb26 	bl	800a978 <SAI_InterruptFlag>
 800a32c:	4601      	mov	r1, r0
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	691a      	ldr	r2, [r3, #16]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	430a      	orrs	r2, r1
 800a33a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a34a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d107      	bne.n	800a36a <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a368:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	e000      	b.n	800a378 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 800a376:	2302      	movs	r3, #2
  }
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	0800aabb 	.word	0x0800aabb
 800a384:	0800aa5d 	.word	0x0800aa5d
 800a388:	0800aad7 	.word	0x0800aad7

0800a38c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 81a7 	beq.w	800a6f0 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f003 0308 	and.w	r3, r3, #8
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00a      	beq.n	800a3da <HAL_SAI_IRQHandler+0x4e>
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f003 0308 	and.w	r3, r3, #8
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d005      	beq.n	800a3da <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4798      	blx	r3
 800a3d8:	e18a      	b.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01e      	beq.n	800a422 <HAL_SAI_IRQHandler+0x96>
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d019      	beq.n	800a422 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b22      	cmp	r3, #34	@ 0x22
 800a400:	d101      	bne.n	800a406 <HAL_SAI_IRQHandler+0x7a>
 800a402:	2301      	movs	r3, #1
 800a404:	e000      	b.n	800a408 <HAL_SAI_IRQHandler+0x7c>
 800a406:	2302      	movs	r3, #2
 800a408:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	431a      	orrs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f96e 	bl	800a6fc <HAL_SAI_ErrorCallback>
 800a420:	e166      	b.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d013      	beq.n	800a454 <HAL_SAI_IRQHandler+0xc8>
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f003 0302 	and.w	r3, r3, #2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00e      	beq.n	800a454 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2202      	movs	r2, #2
 800a43c:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 8153 	beq.w	800a6f0 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a450:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800a452:	e14d      	b.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d05b      	beq.n	800a516 <HAL_SAI_IRQHandler+0x18a>
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	f003 0320 	and.w	r3, r3, #32
 800a464:	2b00      	cmp	r3, #0
 800a466:	d056      	beq.n	800a516 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2220      	movs	r2, #32
 800a46e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a476:	f043 0204 	orr.w	r2, r3, #4
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d03e      	beq.n	800a508 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a490:	2b00      	cmp	r3, #0
 800a492:	d018      	beq.n	800a4c6 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a49a:	4a97      	ldr	r2, [pc, #604]	@ (800a6f8 <HAL_SAI_IRQHandler+0x36c>)
 800a49c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7f9 fc39 	bl	8003d1c <HAL_DMA_Abort_IT>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00a      	beq.n	800a4c6 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f91b 	bl	800a6fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 810a 	beq.w	800a6e6 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4d8:	4a87      	ldr	r2, [pc, #540]	@ (800a6f8 <HAL_SAI_IRQHandler+0x36c>)
 800a4da:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f9 fc1a 	bl	8003d1c <HAL_DMA_Abort_IT>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80fb 	beq.w	800a6e6 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f8fb 	bl	800a6fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a506:	e0ee      	b.n	800a6e6 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff fdcf 	bl	800a0ac <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f8f4 	bl	800a6fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a514:	e0e7      	b.n	800a6e6 <HAL_SAI_IRQHandler+0x35a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d05b      	beq.n	800a5d8 <HAL_SAI_IRQHandler+0x24c>
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a526:	2b00      	cmp	r3, #0
 800a528:	d056      	beq.n	800a5d8 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2240      	movs	r2, #64	@ 0x40
 800a530:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a538:	f043 0208 	orr.w	r2, r3, #8
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d03e      	beq.n	800a5ca <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a552:	2b00      	cmp	r3, #0
 800a554:	d018      	beq.n	800a588 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a55c:	4a66      	ldr	r2, [pc, #408]	@ (800a6f8 <HAL_SAI_IRQHandler+0x36c>)
 800a55e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a566:	4618      	mov	r0, r3
 800a568:	f7f9 fbd8 	bl	8003d1c <HAL_DMA_Abort_IT>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a578:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f8ba 	bl	800a6fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 80ab 	beq.w	800a6ea <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a59a:	4a57      	ldr	r2, [pc, #348]	@ (800a6f8 <HAL_SAI_IRQHandler+0x36c>)
 800a59c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7f9 fbb9 	bl	8003d1c <HAL_DMA_Abort_IT>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 809c 	beq.w	800a6ea <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f89a 	bl	800a6fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a5c8:	e08f      	b.n	800a6ea <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7ff fd6e 	bl	800a0ac <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f893 	bl	800a6fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a5d6:	e088      	b.n	800a6ea <HAL_SAI_IRQHandler+0x35e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d067      	beq.n	800a6b2 <HAL_SAI_IRQHandler+0x326>
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d062      	beq.n	800a6b2 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2204      	movs	r2, #4
 800a5f2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5fa:	f043 0220 	orr.w	r2, r3, #32
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d03c      	beq.n	800a688 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a614:	2b00      	cmp	r3, #0
 800a616:	d018      	beq.n	800a64a <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a61e:	4a36      	ldr	r2, [pc, #216]	@ (800a6f8 <HAL_SAI_IRQHandler+0x36c>)
 800a620:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f9 fb77 	bl	8003d1c <HAL_DMA_Abort_IT>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a63a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f859 	bl	800a6fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a650:	2b00      	cmp	r3, #0
 800a652:	d04c      	beq.n	800a6ee <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a65a:	4a27      	ldr	r2, [pc, #156]	@ (800a6f8 <HAL_SAI_IRQHandler+0x36c>)
 800a65c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a664:	4618      	mov	r0, r3
 800a666:	f7f9 fb59 	bl	8003d1c <HAL_DMA_Abort_IT>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d03e      	beq.n	800a6ee <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a676:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f83b 	bl	800a6fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a686:	e032      	b.n	800a6ee <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2200      	movs	r2, #0
 800a68e:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f826 	bl	800a6fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6b0:	e01d      	b.n	800a6ee <HAL_SAI_IRQHandler+0x362>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d019      	beq.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f003 0310 	and.w	r3, r3, #16
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d014      	beq.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2210      	movs	r2, #16
 800a6cc:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a6d4:	f043 0210 	orr.w	r2, r3, #16
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f80c 	bl	800a6fc <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a6e4:	e004      	b.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6e6:	bf00      	nop
 800a6e8:	e002      	b.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6ea:	bf00      	nop
 800a6ec:	e000      	b.n	800a6f0 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a6ee:	bf00      	nop
}
 800a6f0:	bf00      	nop
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	0800ab29 	.word	0x0800ab29

0800a6fc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <SAI_InitI2S+0x2e>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d103      	bne.n	800a746 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	651a      	str	r2, [r3, #80]	@ 0x50
 800a744:	e002      	b.n	800a74c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2201      	movs	r2, #1
 800a74a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a752:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a75a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e077      	b.n	800a866 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d107      	bne.n	800a78c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a788:	665a      	str	r2, [r3, #100]	@ 0x64
 800a78a:	e006      	b.n	800a79a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a792:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d84f      	bhi.n	800a840 <SAI_InitI2S+0x130>
 800a7a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a8 <SAI_InitI2S+0x98>)
 800a7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a6:	bf00      	nop
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a7db 	.word	0x0800a7db
 800a7b0:	0800a7fd 	.word	0x0800a7fd
 800a7b4:	0800a81f 	.word	0x0800a81f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2280      	movs	r2, #128	@ 0x80
 800a7bc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	085b      	lsrs	r3, r3, #1
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	085b      	lsrs	r3, r3, #1
 800a7cc:	011a      	lsls	r2, r3, #4
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2240      	movs	r2, #64	@ 0x40
 800a7d6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a7d8:	e035      	b.n	800a846 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2280      	movs	r2, #128	@ 0x80
 800a7de:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	085b      	lsrs	r3, r3, #1
 800a7e4:	019a      	lsls	r2, r3, #6
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	085b      	lsrs	r3, r3, #1
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2280      	movs	r2, #128	@ 0x80
 800a7f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a7fa:	e024      	b.n	800a846 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	22c0      	movs	r2, #192	@ 0xc0
 800a800:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	085b      	lsrs	r3, r3, #1
 800a806:	019a      	lsls	r2, r3, #6
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2280      	movs	r2, #128	@ 0x80
 800a81a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a81c:	e013      	b.n	800a846 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	22e0      	movs	r2, #224	@ 0xe0
 800a822:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	085b      	lsrs	r3, r3, #1
 800a828:	019a      	lsls	r2, r3, #6
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	085b      	lsrs	r3, r3, #1
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2280      	movs	r2, #128	@ 0x80
 800a83c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a83e:	e002      	b.n	800a846 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	75fb      	strb	r3, [r7, #23]
      break;
 800a844:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d10b      	bne.n	800a864 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d102      	bne.n	800a858 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2210      	movs	r2, #16
 800a856:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d102      	bne.n	800a864 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2208      	movs	r2, #8
 800a862:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800a864:	7dfb      	ldrb	r3, [r7, #23]
}
 800a866:	4618      	mov	r0, r3
 800a868:	371c      	adds	r7, #28
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop

0800a874 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d003      	beq.n	800a8a2 <SAI_InitPCM+0x2e>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d103      	bne.n	800a8aa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	651a      	str	r2, [r3, #80]	@ 0x50
 800a8a8:	e002      	b.n	800a8b0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a8bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a8c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a8d8:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d103      	bne.n	800a8e8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	659a      	str	r2, [r3, #88]	@ 0x58
 800a8e6:	e002      	b.n	800a8ee <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	220d      	movs	r2, #13
 800a8ec:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d837      	bhi.n	800a964 <SAI_InitPCM+0xf0>
 800a8f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8fc <SAI_InitPCM+0x88>)
 800a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fa:	bf00      	nop
 800a8fc:	0800a90d 	.word	0x0800a90d
 800a900:	0800a923 	.word	0x0800a923
 800a904:	0800a939 	.word	0x0800a939
 800a908:	0800a94f 	.word	0x0800a94f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2280      	movs	r2, #128	@ 0x80
 800a910:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	011a      	lsls	r2, r3, #4
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2240      	movs	r2, #64	@ 0x40
 800a91e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a920:	e023      	b.n	800a96a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2280      	movs	r2, #128	@ 0x80
 800a926:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2280      	movs	r2, #128	@ 0x80
 800a934:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a936:	e018      	b.n	800a96a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	22c0      	movs	r2, #192	@ 0xc0
 800a93c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2280      	movs	r2, #128	@ 0x80
 800a94a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a94c:	e00d      	b.n	800a96a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	22e0      	movs	r2, #224	@ 0xe0
 800a952:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2280      	movs	r2, #128	@ 0x80
 800a960:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a962:	e002      	b.n	800a96a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	75fb      	strb	r3, [r7, #23]
      break;
 800a968:	bf00      	nop
  }

  return status;
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	371c      	adds	r7, #28
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a984:	2301      	movs	r3, #1
 800a986:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d103      	bne.n	800a996 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f043 0308 	orr.w	r3, r3, #8
 800a994:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d10b      	bne.n	800a9b6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d003      	beq.n	800a9ae <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d103      	bne.n	800a9b6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f043 0310 	orr.w	r3, r3, #16
 800a9b4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d003      	beq.n	800a9c6 <SAI_InterruptFlag+0x4e>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d104      	bne.n	800a9d0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	e003      	b.n	800a9d8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f043 0304 	orr.w	r3, r3, #4
 800a9d6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
	...

0800a9e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a9f0:	4b18      	ldr	r3, [pc, #96]	@ (800aa54 <SAI_Disable+0x6c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a18      	ldr	r2, [pc, #96]	@ (800aa58 <SAI_Disable+0x70>)
 800a9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fa:	0b1b      	lsrs	r3, r3, #12
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800aa12:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10a      	bne.n	800aa30 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	72fb      	strb	r3, [r7, #11]
      break;
 800aa2e:	e009      	b.n	800aa44 <SAI_Disable+0x5c>
    }
    count--;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e7      	bne.n	800aa14 <SAI_Disable+0x2c>

  return status;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20000000 	.word	0x20000000
 800aa58:	95cbec1b 	.word	0x95cbec1b

0800aa5c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa6e:	2b81      	cmp	r3, #129	@ 0x81
 800aa70:	d01c      	beq.n	800aaac <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800aa80:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7ff ff73 	bl	800a978 <SAI_InterruptFlag>
 800aa92:	4603      	mov	r3, r0
 800aa94:	43d9      	mvns	r1, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	691a      	ldr	r2, [r3, #16]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	400a      	ands	r2, r1
 800aaa2:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7f7 fa57 	bl	8001f60 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800aab2:	bf00      	nop
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aac6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7f7 fa1d 	bl	8001f08 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aaea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ab02:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff ff6f 	bl	800a9e8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7ff fdee 	bl	800a6fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ab20:	bf00      	nop
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab34:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ab44:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f04f 32ff 	mov.w	r2, #4294967295
 800ab56:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab5e:	2b20      	cmp	r3, #32
 800ab60:	d00a      	beq.n	800ab78 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f7ff ff40 	bl	800a9e8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f042 0208 	orr.w	r2, r2, #8
 800ab76:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f7ff fdb7 	bl	800a6fc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e049      	b.n	800ac3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d106      	bne.n	800abc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f841 	bl	800ac44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2202      	movs	r2, #2
 800abc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3304      	adds	r3, #4
 800abd2:	4619      	mov	r1, r3
 800abd4:	4610      	mov	r0, r2
 800abd6:	f000 fa57 	bl	800b088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d001      	beq.n	800ac70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e072      	b.n	800ad56 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68da      	ldr	r2, [r3, #12]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0201 	orr.w	r2, r2, #1
 800ac86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a35      	ldr	r2, [pc, #212]	@ (800ad64 <HAL_TIM_Base_Start_IT+0x10c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d040      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a34      	ldr	r2, [pc, #208]	@ (800ad68 <HAL_TIM_Base_Start_IT+0x110>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d03b      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aca4:	d036      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acae:	d031      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a2d      	ldr	r2, [pc, #180]	@ (800ad6c <HAL_TIM_Base_Start_IT+0x114>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d02c      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a2c      	ldr	r2, [pc, #176]	@ (800ad70 <HAL_TIM_Base_Start_IT+0x118>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d027      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a2a      	ldr	r2, [pc, #168]	@ (800ad74 <HAL_TIM_Base_Start_IT+0x11c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d022      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a29      	ldr	r2, [pc, #164]	@ (800ad78 <HAL_TIM_Base_Start_IT+0x120>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d01d      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a27      	ldr	r2, [pc, #156]	@ (800ad7c <HAL_TIM_Base_Start_IT+0x124>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d018      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a26      	ldr	r2, [pc, #152]	@ (800ad80 <HAL_TIM_Base_Start_IT+0x128>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d013      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a24      	ldr	r2, [pc, #144]	@ (800ad84 <HAL_TIM_Base_Start_IT+0x12c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d00e      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a23      	ldr	r2, [pc, #140]	@ (800ad88 <HAL_TIM_Base_Start_IT+0x130>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d009      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a21      	ldr	r2, [pc, #132]	@ (800ad8c <HAL_TIM_Base_Start_IT+0x134>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d004      	beq.n	800ad14 <HAL_TIM_Base_Start_IT+0xbc>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a20      	ldr	r2, [pc, #128]	@ (800ad90 <HAL_TIM_Base_Start_IT+0x138>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d115      	bne.n	800ad40 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	4b1e      	ldr	r3, [pc, #120]	@ (800ad94 <HAL_TIM_Base_Start_IT+0x13c>)
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b06      	cmp	r3, #6
 800ad24:	d015      	beq.n	800ad52 <HAL_TIM_Base_Start_IT+0xfa>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad2c:	d011      	beq.n	800ad52 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f042 0201 	orr.w	r2, r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad3e:	e008      	b.n	800ad52 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f042 0201 	orr.w	r2, r2, #1
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	e000      	b.n	800ad54 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	40012c00 	.word	0x40012c00
 800ad68:	50012c00 	.word	0x50012c00
 800ad6c:	40000400 	.word	0x40000400
 800ad70:	50000400 	.word	0x50000400
 800ad74:	40000800 	.word	0x40000800
 800ad78:	50000800 	.word	0x50000800
 800ad7c:	40000c00 	.word	0x40000c00
 800ad80:	50000c00 	.word	0x50000c00
 800ad84:	40013400 	.word	0x40013400
 800ad88:	50013400 	.word	0x50013400
 800ad8c:	40014000 	.word	0x40014000
 800ad90:	50014000 	.word	0x50014000
 800ad94:	00010007 	.word	0x00010007

0800ad98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d020      	beq.n	800adfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d01b      	beq.n	800adfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f06f 0202 	mvn.w	r2, #2
 800adcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d003      	beq.n	800adea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f931 	bl	800b04a <HAL_TIM_IC_CaptureCallback>
 800ade8:	e005      	b.n	800adf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f923 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f934 	bl	800b05e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	f003 0304 	and.w	r3, r3, #4
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d020      	beq.n	800ae48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01b      	beq.n	800ae48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f06f 0204 	mvn.w	r2, #4
 800ae18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f90b 	bl	800b04a <HAL_TIM_IC_CaptureCallback>
 800ae34:	e005      	b.n	800ae42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f8fd 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f90e 	bl	800b05e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	f003 0308 	and.w	r3, r3, #8
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d020      	beq.n	800ae94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f003 0308 	and.w	r3, r3, #8
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01b      	beq.n	800ae94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f06f 0208 	mvn.w	r2, #8
 800ae64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2204      	movs	r2, #4
 800ae6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f8e5 	bl	800b04a <HAL_TIM_IC_CaptureCallback>
 800ae80:	e005      	b.n	800ae8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f8d7 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f8e8 	bl	800b05e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f003 0310 	and.w	r3, r3, #16
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d020      	beq.n	800aee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f003 0310 	and.w	r3, r3, #16
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d01b      	beq.n	800aee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f06f 0210 	mvn.w	r2, #16
 800aeb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2208      	movs	r2, #8
 800aeb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f8bf 	bl	800b04a <HAL_TIM_IC_CaptureCallback>
 800aecc:	e005      	b.n	800aeda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f8b1 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f8c2 	bl	800b05e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00c      	beq.n	800af04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f06f 0201 	mvn.w	r2, #1
 800aefc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7f7 f864 	bl	8001fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d104      	bne.n	800af18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00c      	beq.n	800af32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d007      	beq.n	800af32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800af2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f9b5 	bl	800b29c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00c      	beq.n	800af56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af42:	2b00      	cmp	r3, #0
 800af44:	d007      	beq.n	800af56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800af4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f9ad 	bl	800b2b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00c      	beq.n	800af7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f87c 	bl	800b072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f003 0320 	and.w	r3, r3, #32
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00c      	beq.n	800af9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d007      	beq.n	800af9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f06f 0220 	mvn.w	r2, #32
 800af96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 f975 	bl	800b288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00c      	beq.n	800afc2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d007      	beq.n	800afc2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800afba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f981 	bl	800b2c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00c      	beq.n	800afe6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d007      	beq.n	800afe6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800afde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f979 	bl	800b2d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00c      	beq.n	800b00a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d007      	beq.n	800b00a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f971 	bl	800b2ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00c      	beq.n	800b02e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d007      	beq.n	800b02e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f969 	bl	800b300 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b03e:	bf00      	nop
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b083      	sub	sp, #12
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b052:	bf00      	nop
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b05e:	b480      	push	{r7}
 800b060:	b083      	sub	sp, #12
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b066:	bf00      	nop
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b072:	b480      	push	{r7}
 800b074:	b083      	sub	sp, #12
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b07a:	bf00      	nop
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
	...

0800b088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a6b      	ldr	r2, [pc, #428]	@ (800b248 <TIM_Base_SetConfig+0x1c0>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d02b      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a6a      	ldr	r2, [pc, #424]	@ (800b24c <TIM_Base_SetConfig+0x1c4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d027      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ae:	d023      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0b6:	d01f      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a65      	ldr	r2, [pc, #404]	@ (800b250 <TIM_Base_SetConfig+0x1c8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d01b      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a64      	ldr	r2, [pc, #400]	@ (800b254 <TIM_Base_SetConfig+0x1cc>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d017      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a63      	ldr	r2, [pc, #396]	@ (800b258 <TIM_Base_SetConfig+0x1d0>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d013      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a62      	ldr	r2, [pc, #392]	@ (800b25c <TIM_Base_SetConfig+0x1d4>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d00f      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a61      	ldr	r2, [pc, #388]	@ (800b260 <TIM_Base_SetConfig+0x1d8>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d00b      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a60      	ldr	r2, [pc, #384]	@ (800b264 <TIM_Base_SetConfig+0x1dc>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d007      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a5f      	ldr	r2, [pc, #380]	@ (800b268 <TIM_Base_SetConfig+0x1e0>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d003      	beq.n	800b0f8 <TIM_Base_SetConfig+0x70>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a5e      	ldr	r2, [pc, #376]	@ (800b26c <TIM_Base_SetConfig+0x1e4>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d108      	bne.n	800b10a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a4e      	ldr	r2, [pc, #312]	@ (800b248 <TIM_Base_SetConfig+0x1c0>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d043      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a4d      	ldr	r2, [pc, #308]	@ (800b24c <TIM_Base_SetConfig+0x1c4>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d03f      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b120:	d03b      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b128:	d037      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a48      	ldr	r2, [pc, #288]	@ (800b250 <TIM_Base_SetConfig+0x1c8>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d033      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a47      	ldr	r2, [pc, #284]	@ (800b254 <TIM_Base_SetConfig+0x1cc>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d02f      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a46      	ldr	r2, [pc, #280]	@ (800b258 <TIM_Base_SetConfig+0x1d0>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d02b      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a45      	ldr	r2, [pc, #276]	@ (800b25c <TIM_Base_SetConfig+0x1d4>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d027      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a44      	ldr	r2, [pc, #272]	@ (800b260 <TIM_Base_SetConfig+0x1d8>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d023      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a43      	ldr	r2, [pc, #268]	@ (800b264 <TIM_Base_SetConfig+0x1dc>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d01f      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a42      	ldr	r2, [pc, #264]	@ (800b268 <TIM_Base_SetConfig+0x1e0>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d01b      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a41      	ldr	r2, [pc, #260]	@ (800b26c <TIM_Base_SetConfig+0x1e4>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d017      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a40      	ldr	r2, [pc, #256]	@ (800b270 <TIM_Base_SetConfig+0x1e8>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d013      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a3f      	ldr	r2, [pc, #252]	@ (800b274 <TIM_Base_SetConfig+0x1ec>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d00f      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a3e      	ldr	r2, [pc, #248]	@ (800b278 <TIM_Base_SetConfig+0x1f0>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d00b      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a3d      	ldr	r2, [pc, #244]	@ (800b27c <TIM_Base_SetConfig+0x1f4>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d007      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a3c      	ldr	r2, [pc, #240]	@ (800b280 <TIM_Base_SetConfig+0x1f8>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d003      	beq.n	800b19a <TIM_Base_SetConfig+0x112>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a3b      	ldr	r2, [pc, #236]	@ (800b284 <TIM_Base_SetConfig+0x1fc>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d108      	bne.n	800b1ac <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	689a      	ldr	r2, [r3, #8]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b248 <TIM_Base_SetConfig+0x1c0>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d023      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b24c <TIM_Base_SetConfig+0x1c4>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d01f      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a22      	ldr	r2, [pc, #136]	@ (800b268 <TIM_Base_SetConfig+0x1e0>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d01b      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a21      	ldr	r2, [pc, #132]	@ (800b26c <TIM_Base_SetConfig+0x1e4>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d017      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a20      	ldr	r2, [pc, #128]	@ (800b270 <TIM_Base_SetConfig+0x1e8>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d013      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a1f      	ldr	r2, [pc, #124]	@ (800b274 <TIM_Base_SetConfig+0x1ec>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d00f      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a1e      	ldr	r2, [pc, #120]	@ (800b278 <TIM_Base_SetConfig+0x1f0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00b      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a1d      	ldr	r2, [pc, #116]	@ (800b27c <TIM_Base_SetConfig+0x1f4>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d007      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4a1c      	ldr	r2, [pc, #112]	@ (800b280 <TIM_Base_SetConfig+0x1f8>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d003      	beq.n	800b21a <TIM_Base_SetConfig+0x192>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a1b      	ldr	r2, [pc, #108]	@ (800b284 <TIM_Base_SetConfig+0x1fc>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d103      	bne.n	800b222 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	691a      	ldr	r2, [r3, #16]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f043 0204 	orr.w	r2, r3, #4
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	601a      	str	r2, [r3, #0]
}
 800b23a:	bf00      	nop
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	40012c00 	.word	0x40012c00
 800b24c:	50012c00 	.word	0x50012c00
 800b250:	40000400 	.word	0x40000400
 800b254:	50000400 	.word	0x50000400
 800b258:	40000800 	.word	0x40000800
 800b25c:	50000800 	.word	0x50000800
 800b260:	40000c00 	.word	0x40000c00
 800b264:	50000c00 	.word	0x50000c00
 800b268:	40013400 	.word	0x40013400
 800b26c:	50013400 	.word	0x50013400
 800b270:	40014000 	.word	0x40014000
 800b274:	50014000 	.word	0x50014000
 800b278:	40014400 	.word	0x40014400
 800b27c:	50014400 	.word	0x50014400
 800b280:	40014800 	.word	0x40014800
 800b284:	50014800 	.word	0x50014800

0800b288 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b308:	bf00      	nop
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e042      	b.n	800b3ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7f7 faaf 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2224      	movs	r2, #36	@ 0x24
 800b342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f022 0201 	bic.w	r2, r2, #1
 800b354:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fd8a 	bl	800be78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fbe5 	bl	800bb34 <UART_SetConfig>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e01b      	b.n	800b3ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689a      	ldr	r2, [r3, #8]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0201 	orr.w	r2, r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fe09 	bl	800bfbc <UART_CheckIdleState>
 800b3aa:	4603      	mov	r3, r0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08c      	sub	sp, #48	@ 0x30
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800b3c2:	88fb      	ldrh	r3, [r7, #6]
 800b3c4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3cc:	2b20      	cmp	r3, #32
 800b3ce:	f040 80ad 	bne.w	800b52c <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <HAL_UART_Transmit_DMA+0x2a>
 800b3d8:	88fb      	ldrh	r3, [r7, #6]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e0a5      	b.n	800b52e <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	88fa      	ldrh	r2, [r7, #6]
 800b3ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	88fa      	ldrh	r2, [r7, #6]
 800b3f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2221      	movs	r2, #33	@ 0x21
 800b404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2240      	movs	r2, #64	@ 0x40
 800b40e:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b414:	2b00      	cmp	r3, #0
 800b416:	d06d      	beq.n	800b4f4 <HAL_UART_Transmit_DMA+0x140>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b41c:	4a46      	ldr	r2, [pc, #280]	@ (800b538 <HAL_UART_Transmit_DMA+0x184>)
 800b41e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b424:	4a45      	ldr	r2, [pc, #276]	@ (800b53c <HAL_UART_Transmit_DMA+0x188>)
 800b426:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b42c:	4a44      	ldr	r2, [pc, #272]	@ (800b540 <HAL_UART_Transmit_DMA+0x18c>)
 800b42e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b434:	2200      	movs	r2, #0
 800b436:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b440:	d106      	bne.n	800b450 <HAL_UART_Transmit_DMA+0x9c>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d102      	bne.n	800b450 <HAL_UART_Transmit_DMA+0x9c>
      {
        nbByte = Size * 2U;
 800b44a:	88fb      	ldrh	r3, [r7, #6]
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d02d      	beq.n	800b4ba <HAL_UART_Transmit_DMA+0x106>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b464:	2b00      	cmp	r3, #0
 800b466:	d024      	beq.n	800b4b2 <HAL_UART_Transmit_DMA+0xfe>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b46c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d01e      	beq.n	800b4b2 <HAL_UART_Transmit_DMA+0xfe>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b47e:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b49a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f9 f9d1 	bl	800484c <HAL_DMAEx_List_Start_IT>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b4b0:	e012      	b.n	800b4d8 <HAL_UART_Transmit_DMA+0x124>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b4b8:	e00e      	b.n	800b4d8 <HAL_UART_Transmit_DMA+0x124>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3328      	adds	r3, #40	@ 0x28
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b4ce:	f7f8 fb49 	bl	8003b64 <HAL_DMA_Start_IT>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800b4d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d009      	beq.n	800b4f4 <HAL_UART_Transmit_DMA+0x140>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2210      	movs	r2, #16
 800b4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e01c      	b.n	800b52e <HAL_UART_Transmit_DMA+0x17a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	617b      	str	r3, [r7, #20]
   return(result);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b50a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	3308      	adds	r3, #8
 800b512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b514:	627a      	str	r2, [r7, #36]	@ 0x24
 800b516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6a39      	ldr	r1, [r7, #32]
 800b51a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	61fb      	str	r3, [r7, #28]
   return(result);
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e5      	bne.n	800b4f4 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	e000      	b.n	800b52e <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800b52c:	2302      	movs	r3, #2
  }
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3730      	adds	r7, #48	@ 0x30
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	0800c339 	.word	0x0800c339
 800b53c:	0800c399 	.word	0x0800c399
 800b540:	0800c3b5 	.word	0x0800c3b5

0800b544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b0ae      	sub	sp, #184	@ 0xb8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b56a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b56e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b572:	4013      	ands	r3, r2
 800b574:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800b578:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d11b      	bne.n	800b5b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b584:	f003 0320 	and.w	r3, r3, #32
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d015      	beq.n	800b5b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b58c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b590:	f003 0320 	and.w	r3, r3, #32
 800b594:	2b00      	cmp	r3, #0
 800b596:	d105      	bne.n	800b5a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b59c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d009      	beq.n	800b5b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 8297 	beq.w	800badc <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	4798      	blx	r3
      }
      return;
 800b5b6:	e291      	b.n	800badc <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 80fd 	beq.w	800b7bc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b5c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b5c6:	4b7a      	ldr	r3, [pc, #488]	@ (800b7b0 <HAL_UART_IRQHandler+0x26c>)
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b5ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b5d2:	4b78      	ldr	r3, [pc, #480]	@ (800b7b4 <HAL_UART_IRQHandler+0x270>)
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f000 80f0 	beq.w	800b7bc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b5e0:	f003 0301 	and.w	r3, r3, #1
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d011      	beq.n	800b60c <HAL_UART_IRQHandler+0xc8>
 800b5e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b5ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b602:	f043 0201 	orr.w	r2, r3, #1
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b60c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b610:	f003 0302 	and.w	r3, r3, #2
 800b614:	2b00      	cmp	r3, #0
 800b616:	d011      	beq.n	800b63c <HAL_UART_IRQHandler+0xf8>
 800b618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00b      	beq.n	800b63c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2202      	movs	r2, #2
 800b62a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b632:	f043 0204 	orr.w	r2, r3, #4
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b63c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b640:	f003 0304 	and.w	r3, r3, #4
 800b644:	2b00      	cmp	r3, #0
 800b646:	d011      	beq.n	800b66c <HAL_UART_IRQHandler+0x128>
 800b648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00b      	beq.n	800b66c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2204      	movs	r2, #4
 800b65a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b662:	f043 0202 	orr.w	r2, r3, #2
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b66c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b670:	f003 0308 	and.w	r3, r3, #8
 800b674:	2b00      	cmp	r3, #0
 800b676:	d017      	beq.n	800b6a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b678:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b67c:	f003 0320 	and.w	r3, r3, #32
 800b680:	2b00      	cmp	r3, #0
 800b682:	d105      	bne.n	800b690 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b688:	4b49      	ldr	r3, [pc, #292]	@ (800b7b0 <HAL_UART_IRQHandler+0x26c>)
 800b68a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2208      	movs	r2, #8
 800b696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b69e:	f043 0208 	orr.w	r2, r3, #8
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d012      	beq.n	800b6da <HAL_UART_IRQHandler+0x196>
 800b6b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b6b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00c      	beq.n	800b6da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6d0:	f043 0220 	orr.w	r2, r3, #32
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 81fd 	beq.w	800bae0 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b6ea:	f003 0320 	and.w	r3, r3, #32
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d013      	beq.n	800b71a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b6f6:	f003 0320 	and.w	r3, r3, #32
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d105      	bne.n	800b70a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d007      	beq.n	800b71a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b720:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b72e:	2b40      	cmp	r3, #64	@ 0x40
 800b730:	d005      	beq.n	800b73e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b736:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d02e      	beq.n	800b79c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fd94 	bl	800c26c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b74e:	2b40      	cmp	r3, #64	@ 0x40
 800b750:	d120      	bne.n	800b794 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d017      	beq.n	800b78c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b762:	4a15      	ldr	r2, [pc, #84]	@ (800b7b8 <HAL_UART_IRQHandler+0x274>)
 800b764:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7f8 fad5 	bl	8003d1c <HAL_DMA_Abort_IT>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d019      	beq.n	800b7ac <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b786:	4610      	mov	r0, r2
 800b788:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b78a:	e00f      	b.n	800b7ac <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f9bb 	bl	800bb08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b792:	e00b      	b.n	800b7ac <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f9b7 	bl	800bb08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b79a:	e007      	b.n	800b7ac <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f9b3 	bl	800bb08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b7aa:	e199      	b.n	800bae0 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ac:	bf00      	nop
    return;
 800b7ae:	e197      	b.n	800bae0 <HAL_UART_IRQHandler+0x59c>
 800b7b0:	10000001 	.word	0x10000001
 800b7b4:	04000120 	.word	0x04000120
 800b7b8:	0800c435 	.word	0x0800c435

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	f040 8142 	bne.w	800ba4a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b7c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7ca:	f003 0310 	and.w	r3, r3, #16
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 813b 	beq.w	800ba4a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8134 	beq.w	800ba4a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2210      	movs	r2, #16
 800b7e8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7f4:	2b40      	cmp	r3, #64	@ 0x40
 800b7f6:	f040 80aa 	bne.w	800b94e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b804:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800b808:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 8084 	beq.w	800b91a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b818:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d27c      	bcs.n	800b91a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b826:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b832:	2b81      	cmp	r3, #129	@ 0x81
 800b834:	d060      	beq.n	800b8f8 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b83e:	e853 3f00 	ldrex	r3, [r3]
 800b842:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b84a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	461a      	mov	r2, r3
 800b854:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b85c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b85e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b860:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b864:	e841 2300 	strex	r3, r2, [r1]
 800b868:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b86a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e2      	bne.n	800b836 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3308      	adds	r3, #8
 800b876:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b87a:	e853 3f00 	ldrex	r3, [r3]
 800b87e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b882:	f023 0301 	bic.w	r3, r3, #1
 800b886:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	3308      	adds	r3, #8
 800b890:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b894:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b896:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b898:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b89a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b89c:	e841 2300 	strex	r3, r2, [r1]
 800b8a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b8a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1e3      	bne.n	800b870 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2220      	movs	r2, #32
 800b8ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8be:	e853 3f00 	ldrex	r3, [r3]
 800b8c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8c6:	f023 0310 	bic.w	r3, r3, #16
 800b8ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f8 f996 	bl	8003c24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	1ad3      	subs	r3, r2, r3
 800b90e:	b29b      	uxth	r3, r3
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f902 	bl	800bb1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b918:	e0e4      	b.n	800bae4 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b920:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b924:	429a      	cmp	r2, r3
 800b926:	f040 80dd 	bne.w	800bae4 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b932:	2b81      	cmp	r3, #129	@ 0x81
 800b934:	f040 80d6 	bne.w	800bae4 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f8e8 	bl	800bb1c <HAL_UARTEx_RxEventCallback>
      return;
 800b94c:	e0ca      	b.n	800bae4 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b968:	b29b      	uxth	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80bc 	beq.w	800bae8 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 800b970:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 80b7 	beq.w	800bae8 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b982:	e853 3f00 	ldrex	r3, [r3]
 800b986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b98a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b98e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	461a      	mov	r2, r3
 800b998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b99c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b99e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9a4:	e841 2300 	strex	r3, r2, [r1]
 800b9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e4      	bne.n	800b97a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	e853 3f00 	ldrex	r3, [r3]
 800b9be:	623b      	str	r3, [r7, #32]
   return(result);
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9c6:	f023 0301 	bic.w	r3, r3, #1
 800b9ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b9d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e0:	e841 2300 	strex	r3, r2, [r1]
 800b9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1e1      	bne.n	800b9b0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f023 0310 	bic.w	r3, r3, #16
 800ba14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ba22:	61fb      	str	r3, [r7, #28]
 800ba24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba26:	69b9      	ldr	r1, [r7, #24]
 800ba28:	69fa      	ldr	r2, [r7, #28]
 800ba2a:	e841 2300 	strex	r3, r2, [r1]
 800ba2e:	617b      	str	r3, [r7, #20]
   return(result);
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1e4      	bne.n	800ba00 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba3c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f86a 	bl	800bb1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba48:	e04e      	b.n	800bae8 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d014      	beq.n	800ba80 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d105      	bne.n	800ba6e <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d008      	beq.n	800ba80 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d03a      	beq.n	800baec <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
    }
    return;
 800ba7e:	e035      	b.n	800baec <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ba84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d009      	beq.n	800baa0 <HAL_UART_IRQHandler+0x55c>
 800ba8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ba90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fcdd 	bl	800c458 <UART_EndTransmit_IT>
    return;
 800ba9e:	e026      	b.n	800baee <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800baa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800baa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d009      	beq.n	800bac0 <HAL_UART_IRQHandler+0x57c>
 800baac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bab0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fd02 	bl	800c4c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800babe:	e016      	b.n	800baee <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bac0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d010      	beq.n	800baee <HAL_UART_IRQHandler+0x5aa>
 800bacc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da0c      	bge.n	800baee <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fcea 	bl	800c4ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bada:	e008      	b.n	800baee <HAL_UART_IRQHandler+0x5aa>
      return;
 800badc:	bf00      	nop
 800bade:	e006      	b.n	800baee <HAL_UART_IRQHandler+0x5aa>
    return;
 800bae0:	bf00      	nop
 800bae2:	e004      	b.n	800baee <HAL_UART_IRQHandler+0x5aa>
      return;
 800bae4:	bf00      	nop
 800bae6:	e002      	b.n	800baee <HAL_UART_IRQHandler+0x5aa>
      return;
 800bae8:	bf00      	nop
 800baea:	e000      	b.n	800baee <HAL_UART_IRQHandler+0x5aa>
    return;
 800baec:	bf00      	nop
  }
}
 800baee:	37b8      	adds	r7, #184	@ 0xb8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb38:	b094      	sub	sp, #80	@ 0x50
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	4b7e      	ldr	r3, [pc, #504]	@ (800bd44 <UART_SetConfig+0x210>)
 800bb4a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4e:	689a      	ldr	r2, [r3, #8]
 800bb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	431a      	orrs	r2, r3
 800bb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4977      	ldr	r1, [pc, #476]	@ (800bd48 <UART_SetConfig+0x214>)
 800bb6c:	4019      	ands	r1, r3
 800bb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb74:	430b      	orrs	r3, r1
 800bb76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb84:	68d9      	ldr	r1, [r3, #12]
 800bb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	ea40 0301 	orr.w	r3, r0, r1
 800bb8e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	4b6a      	ldr	r3, [pc, #424]	@ (800bd44 <UART_SetConfig+0x210>)
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d009      	beq.n	800bbb4 <UART_SetConfig+0x80>
 800bba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	4b69      	ldr	r3, [pc, #420]	@ (800bd4c <UART_SetConfig+0x218>)
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d004      	beq.n	800bbb4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbac:	6a1a      	ldr	r2, [r3, #32]
 800bbae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bbbe:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd2:	f023 000f 	bic.w	r0, r3, #15
 800bbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	ea40 0301 	orr.w	r3, r0, r1
 800bbe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	4b59      	ldr	r3, [pc, #356]	@ (800bd50 <UART_SetConfig+0x21c>)
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d102      	bne.n	800bbf4 <UART_SetConfig+0xc0>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbf2:	e029      	b.n	800bc48 <UART_SetConfig+0x114>
 800bbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	4b56      	ldr	r3, [pc, #344]	@ (800bd54 <UART_SetConfig+0x220>)
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d102      	bne.n	800bc04 <UART_SetConfig+0xd0>
 800bbfe:	2302      	movs	r3, #2
 800bc00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc02:	e021      	b.n	800bc48 <UART_SetConfig+0x114>
 800bc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	4b53      	ldr	r3, [pc, #332]	@ (800bd58 <UART_SetConfig+0x224>)
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d102      	bne.n	800bc14 <UART_SetConfig+0xe0>
 800bc0e:	2304      	movs	r3, #4
 800bc10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc12:	e019      	b.n	800bc48 <UART_SetConfig+0x114>
 800bc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	4b50      	ldr	r3, [pc, #320]	@ (800bd5c <UART_SetConfig+0x228>)
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d102      	bne.n	800bc24 <UART_SetConfig+0xf0>
 800bc1e:	2308      	movs	r3, #8
 800bc20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc22:	e011      	b.n	800bc48 <UART_SetConfig+0x114>
 800bc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	4b4d      	ldr	r3, [pc, #308]	@ (800bd60 <UART_SetConfig+0x22c>)
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d102      	bne.n	800bc34 <UART_SetConfig+0x100>
 800bc2e:	2310      	movs	r3, #16
 800bc30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc32:	e009      	b.n	800bc48 <UART_SetConfig+0x114>
 800bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	4b42      	ldr	r3, [pc, #264]	@ (800bd44 <UART_SetConfig+0x210>)
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d102      	bne.n	800bc44 <UART_SetConfig+0x110>
 800bc3e:	2320      	movs	r3, #32
 800bc40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc42:	e001      	b.n	800bc48 <UART_SetConfig+0x114>
 800bc44:	2300      	movs	r3, #0
 800bc46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	4b3d      	ldr	r3, [pc, #244]	@ (800bd44 <UART_SetConfig+0x210>)
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d005      	beq.n	800bc5e <UART_SetConfig+0x12a>
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	4b3d      	ldr	r3, [pc, #244]	@ (800bd4c <UART_SetConfig+0x218>)
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	f040 8085 	bne.w	800bd68 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bc5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc60:	2200      	movs	r2, #0
 800bc62:	623b      	str	r3, [r7, #32]
 800bc64:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bc6a:	f7fc fd23 	bl	80086b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bc6e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f000 80e8 	beq.w	800be48 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc7c:	4a39      	ldr	r2, [pc, #228]	@ (800bd64 <UART_SetConfig+0x230>)
 800bc7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc82:	461a      	mov	r2, r3
 800bc84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc86:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc8a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	4613      	mov	r3, r2
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	4413      	add	r3, r2
 800bc96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d305      	bcc.n	800bca8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bca2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d903      	bls.n	800bcb0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bcae:	e048      	b.n	800bd42 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	61bb      	str	r3, [r7, #24]
 800bcb6:	61fa      	str	r2, [r7, #28]
 800bcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcbc:	4a29      	ldr	r2, [pc, #164]	@ (800bd64 <UART_SetConfig+0x230>)
 800bcbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	613b      	str	r3, [r7, #16]
 800bcc8:	617a      	str	r2, [r7, #20]
 800bcca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bcce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bcd2:	f7f4 ffdd 	bl	8000c90 <__aeabi_uldivmod>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4619      	mov	r1, r3
 800bcde:	f04f 0200 	mov.w	r2, #0
 800bce2:	f04f 0300 	mov.w	r3, #0
 800bce6:	020b      	lsls	r3, r1, #8
 800bce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bcec:	0202      	lsls	r2, r0, #8
 800bcee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcf0:	6849      	ldr	r1, [r1, #4]
 800bcf2:	0849      	lsrs	r1, r1, #1
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	eb12 0804 	adds.w	r8, r2, r4
 800bcfe:	eb43 0905 	adc.w	r9, r3, r5
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	60bb      	str	r3, [r7, #8]
 800bd0a:	60fa      	str	r2, [r7, #12]
 800bd0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd10:	4640      	mov	r0, r8
 800bd12:	4649      	mov	r1, r9
 800bd14:	f7f4 ffbc 	bl	8000c90 <__aeabi_uldivmod>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd26:	d308      	bcc.n	800bd3a <UART_SetConfig+0x206>
 800bd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd2e:	d204      	bcs.n	800bd3a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd36:	60da      	str	r2, [r3, #12]
 800bd38:	e003      	b.n	800bd42 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bd40:	e082      	b.n	800be48 <UART_SetConfig+0x314>
 800bd42:	e081      	b.n	800be48 <UART_SetConfig+0x314>
 800bd44:	46002400 	.word	0x46002400
 800bd48:	cfff69f3 	.word	0xcfff69f3
 800bd4c:	56002400 	.word	0x56002400
 800bd50:	40013800 	.word	0x40013800
 800bd54:	40004400 	.word	0x40004400
 800bd58:	40004800 	.word	0x40004800
 800bd5c:	40004c00 	.word	0x40004c00
 800bd60:	40005000 	.word	0x40005000
 800bd64:	0801279c 	.word	0x0801279c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6a:	69db      	ldr	r3, [r3, #28]
 800bd6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd70:	d13c      	bne.n	800bdec <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd74:	2200      	movs	r2, #0
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	607a      	str	r2, [r7, #4]
 800bd7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd7e:	f7fc fc99 	bl	80086b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd82:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d05e      	beq.n	800be48 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8e:	4a39      	ldr	r2, [pc, #228]	@ (800be74 <UART_SetConfig+0x340>)
 800bd90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd94:	461a      	mov	r2, r3
 800bd96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd98:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd9c:	005a      	lsls	r2, r3, #1
 800bd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	085b      	lsrs	r3, r3, #1
 800bda4:	441a      	add	r2, r3
 800bda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb2:	2b0f      	cmp	r3, #15
 800bdb4:	d916      	bls.n	800bde4 <UART_SetConfig+0x2b0>
 800bdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdbc:	d212      	bcs.n	800bde4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	f023 030f 	bic.w	r3, r3, #15
 800bdc6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdca:	085b      	lsrs	r3, r3, #1
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	f003 0307 	and.w	r3, r3, #7
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bde0:	60da      	str	r2, [r3, #12]
 800bde2:	e031      	b.n	800be48 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bdea:	e02d      	b.n	800be48 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bdec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdee:	2200      	movs	r2, #0
 800bdf0:	469a      	mov	sl, r3
 800bdf2:	4693      	mov	fp, r2
 800bdf4:	4650      	mov	r0, sl
 800bdf6:	4659      	mov	r1, fp
 800bdf8:	f7fc fc5c 	bl	80086b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800bdfc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bdfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be00:	2b00      	cmp	r3, #0
 800be02:	d021      	beq.n	800be48 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be08:	4a1a      	ldr	r2, [pc, #104]	@ (800be74 <UART_SetConfig+0x340>)
 800be0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be0e:	461a      	mov	r2, r3
 800be10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be12:	fbb3 f2f2 	udiv	r2, r3, r2
 800be16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	085b      	lsrs	r3, r3, #1
 800be1c:	441a      	add	r2, r3
 800be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	fbb2 f3f3 	udiv	r3, r2, r3
 800be26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be2a:	2b0f      	cmp	r3, #15
 800be2c:	d909      	bls.n	800be42 <UART_SetConfig+0x30e>
 800be2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be34:	d205      	bcs.n	800be42 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be38:	b29a      	uxth	r2, r3
 800be3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60da      	str	r2, [r3, #12]
 800be40:	e002      	b.n	800be48 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4a:	2201      	movs	r2, #1
 800be4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be52:	2201      	movs	r2, #1
 800be54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5a:	2200      	movs	r2, #0
 800be5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be60:	2200      	movs	r2, #0
 800be62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3750      	adds	r7, #80	@ 0x50
 800be6c:	46bd      	mov	sp, r7
 800be6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be72:	bf00      	nop
 800be74:	0801279c 	.word	0x0801279c

0800be78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be84:	f003 0308 	and.w	r3, r3, #8
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00a      	beq.n	800bea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec8:	f003 0302 	and.w	r3, r3, #2
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00a      	beq.n	800bee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beea:	f003 0304 	and.w	r3, r3, #4
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	430a      	orrs	r2, r1
 800bf06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0c:	f003 0310 	and.w	r3, r3, #16
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00a      	beq.n	800bf2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00a      	beq.n	800bf4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	430a      	orrs	r2, r1
 800bf4a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01a      	beq.n	800bf8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf76:	d10a      	bne.n	800bf8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	605a      	str	r2, [r3, #4]
  }
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b098      	sub	sp, #96	@ 0x60
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfcc:	f7f6 ff6e 	bl	8002eac <HAL_GetTick>
 800bfd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0308 	and.w	r3, r3, #8
 800bfdc:	2b08      	cmp	r3, #8
 800bfde:	d12f      	bne.n	800c040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f88e 	bl	800c110 <UART_WaitOnFlagUntilTimeout>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d022      	beq.n	800c040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c00e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c018:	647b      	str	r3, [r7, #68]	@ 0x44
 800c01a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c01e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e6      	bne.n	800bffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e063      	b.n	800c108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0304 	and.w	r3, r3, #4
 800c04a:	2b04      	cmp	r3, #4
 800c04c:	d149      	bne.n	800c0e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c04e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c056:	2200      	movs	r2, #0
 800c058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f857 	bl	800c110 <UART_WaitOnFlagUntilTimeout>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d03c      	beq.n	800c0e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c070:	e853 3f00 	ldrex	r3, [r3]
 800c074:	623b      	str	r3, [r7, #32]
   return(result);
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c086:	633b      	str	r3, [r7, #48]	@ 0x30
 800c088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c08e:	e841 2300 	strex	r3, r2, [r1]
 800c092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1e6      	bne.n	800c068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3308      	adds	r3, #8
 800c0a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f023 0301 	bic.w	r3, r3, #1
 800c0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0ba:	61fa      	str	r2, [r7, #28]
 800c0bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	69b9      	ldr	r1, [r7, #24]
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	617b      	str	r3, [r7, #20]
   return(result);
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e5      	bne.n	800c09a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e012      	b.n	800c108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2220      	movs	r2, #32
 800c0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3758      	adds	r7, #88	@ 0x58
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	4613      	mov	r3, r2
 800c11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c120:	e04f      	b.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c128:	d04b      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c12a:	f7f6 febf 	bl	8002eac <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	429a      	cmp	r2, r3
 800c138:	d302      	bcc.n	800c140 <UART_WaitOnFlagUntilTimeout+0x30>
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d101      	bne.n	800c144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c140:	2303      	movs	r3, #3
 800c142:	e04e      	b.n	800c1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d037      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b80      	cmp	r3, #128	@ 0x80
 800c156:	d034      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2b40      	cmp	r3, #64	@ 0x40
 800c15c:	d031      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	69db      	ldr	r3, [r3, #28]
 800c164:	f003 0308 	and.w	r3, r3, #8
 800c168:	2b08      	cmp	r3, #8
 800c16a:	d110      	bne.n	800c18e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2208      	movs	r2, #8
 800c172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f879 	bl	800c26c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2208      	movs	r2, #8
 800c17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e029      	b.n	800c1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c19c:	d111      	bne.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 f85f 	bl	800c26c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1be:	2303      	movs	r3, #3
 800c1c0:	e00f      	b.n	800c1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69da      	ldr	r2, [r3, #28]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	bf0c      	ite	eq
 800c1d2:	2301      	moveq	r3, #1
 800c1d4:	2300      	movne	r3, #0
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	461a      	mov	r2, r3
 800c1da:	79fb      	ldrb	r3, [r7, #7]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d0a0      	beq.n	800c122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b08f      	sub	sp, #60	@ 0x3c
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	e853 3f00 	ldrex	r3, [r3]
 800c1fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c206:	637b      	str	r3, [r7, #52]	@ 0x34
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	461a      	mov	r2, r3
 800c20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c212:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c218:	e841 2300 	strex	r3, r2, [r1]
 800c21c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	d1e6      	bne.n	800c1f2 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3308      	adds	r3, #8
 800c22a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	e853 3f00 	ldrex	r3, [r3]
 800c232:	60bb      	str	r3, [r7, #8]
   return(result);
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c23a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3308      	adds	r3, #8
 800c242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c244:	61ba      	str	r2, [r7, #24]
 800c246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c248:	6979      	ldr	r1, [r7, #20]
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	e841 2300 	strex	r3, r2, [r1]
 800c250:	613b      	str	r3, [r7, #16]
   return(result);
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1e5      	bne.n	800c224 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2220      	movs	r2, #32
 800c25c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c260:	bf00      	nop
 800c262:	373c      	adds	r7, #60	@ 0x3c
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b095      	sub	sp, #84	@ 0x54
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27c:	e853 3f00 	ldrex	r3, [r3]
 800c280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c292:	643b      	str	r3, [r7, #64]	@ 0x40
 800c294:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e6      	bne.n	800c274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2bc:	f023 0301 	bic.w	r3, r3, #1
 800c2c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2d2:	e841 2300 	strex	r3, r2, [r1]
 800c2d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1e3      	bne.n	800c2a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d118      	bne.n	800c318 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	e853 3f00 	ldrex	r3, [r3]
 800c2f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f023 0310 	bic.w	r3, r3, #16
 800c2fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c304:	61bb      	str	r3, [r7, #24]
 800c306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	6979      	ldr	r1, [r7, #20]
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	e841 2300 	strex	r3, r2, [r1]
 800c310:	613b      	str	r3, [r7, #16]
   return(result);
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e6      	bne.n	800c2e6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2220      	movs	r2, #32
 800c31c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c32c:	bf00      	nop
 800c32e:	3754      	adds	r7, #84	@ 0x54
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08a      	sub	sp, #40	@ 0x28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c344:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c34a:	2b81      	cmp	r3, #129	@ 0x81
 800c34c:	d01d      	beq.n	800c38a <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 800c34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c350:	2200      	movs	r2, #0
 800c352:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	e853 3f00 	ldrex	r3, [r3]
 800c362:	60fb      	str	r3, [r7, #12]
   return(result);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c36a:	623b      	str	r3, [r7, #32]
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	461a      	mov	r2, r3
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	61fb      	str	r3, [r7, #28]
 800c376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c378:	69b9      	ldr	r1, [r7, #24]
 800c37a:	69fa      	ldr	r2, [r7, #28]
 800c37c:	e841 2300 	strex	r3, r2, [r1]
 800c380:	617b      	str	r3, [r7, #20]
   return(result);
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1e6      	bne.n	800c356 <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c388:	e002      	b.n	800c390 <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 800c38a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c38c:	f7f5 fe14 	bl	8001fb8 <HAL_UART_TxCpltCallback>
}
 800c390:	bf00      	nop
 800c392:	3728      	adds	r7, #40	@ 0x28
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f7ff fba4 	bl	800baf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3ac:	bf00      	nop
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3dc:	2b80      	cmp	r3, #128	@ 0x80
 800c3de:	d109      	bne.n	800c3f4 <UART_DMAError+0x40>
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	2b21      	cmp	r3, #33	@ 0x21
 800c3e4:	d106      	bne.n	800c3f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c3ee:	6978      	ldr	r0, [r7, #20]
 800c3f0:	f7ff fefb 	bl	800c1ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3fe:	2b40      	cmp	r3, #64	@ 0x40
 800c400:	d109      	bne.n	800c416 <UART_DMAError+0x62>
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b22      	cmp	r3, #34	@ 0x22
 800c406:	d106      	bne.n	800c416 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c410:	6978      	ldr	r0, [r7, #20]
 800c412:	f7ff ff2b 	bl	800c26c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c41c:	f043 0210 	orr.w	r2, r3, #16
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c426:	6978      	ldr	r0, [r7, #20]
 800c428:	f7ff fb6e 	bl	800bb08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c42c:	bf00      	nop
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f7ff fb5c 	bl	800bb08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	e853 3f00 	ldrex	r3, [r3]
 800c46c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	61bb      	str	r3, [r7, #24]
 800c480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c482:	6979      	ldr	r1, [r7, #20]
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	e841 2300 	strex	r3, r2, [r1]
 800c48a:	613b      	str	r3, [r7, #16]
   return(result);
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1e6      	bne.n	800c460 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2220      	movs	r2, #32
 800c496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7f5 fd89 	bl	8001fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4a6:	bf00      	nop
 800c4a8:	3720      	adds	r7, #32
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4b6:	bf00      	nop
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4c2:	b480      	push	{r7}
 800c4c4:	b083      	sub	sp, #12
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4ca:	bf00      	nop
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b085      	sub	sp, #20
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d101      	bne.n	800c4ec <HAL_UARTEx_DisableFifoMode+0x16>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	e027      	b.n	800c53c <HAL_UARTEx_DisableFifoMode+0x66>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2224      	movs	r2, #36	@ 0x24
 800c4f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f022 0201 	bic.w	r2, r2, #1
 800c512:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c51a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2220      	movs	r2, #32
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d101      	bne.n	800c560 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c55c:	2302      	movs	r3, #2
 800c55e:	e02d      	b.n	800c5bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2224      	movs	r2, #36	@ 0x24
 800c56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f022 0201 	bic.w	r2, r2, #1
 800c586:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	430a      	orrs	r2, r1
 800c59a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f84f 	bl	800c640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d101      	bne.n	800c5dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	e02d      	b.n	800c638 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2224      	movs	r2, #36	@ 0x24
 800c5e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f022 0201 	bic.w	r2, r2, #1
 800c602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	430a      	orrs	r2, r1
 800c616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 f811 	bl	800c640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2220      	movs	r2, #32
 800c62a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d108      	bne.n	800c662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c660:	e031      	b.n	800c6c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c662:	2308      	movs	r3, #8
 800c664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c666:	2308      	movs	r3, #8
 800c668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	0e5b      	lsrs	r3, r3, #25
 800c672:	b2db      	uxtb	r3, r3
 800c674:	f003 0307 	and.w	r3, r3, #7
 800c678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	0f5b      	lsrs	r3, r3, #29
 800c682:	b2db      	uxtb	r3, r3
 800c684:	f003 0307 	and.w	r3, r3, #7
 800c688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
 800c68c:	7b3a      	ldrb	r2, [r7, #12]
 800c68e:	4911      	ldr	r1, [pc, #68]	@ (800c6d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c690:	5c8a      	ldrb	r2, [r1, r2]
 800c692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c696:	7b3a      	ldrb	r2, [r7, #12]
 800c698:	490f      	ldr	r1, [pc, #60]	@ (800c6d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c69a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	7b7a      	ldrb	r2, [r7, #13]
 800c6ac:	4909      	ldr	r1, [pc, #36]	@ (800c6d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c6ae:	5c8a      	ldrb	r2, [r1, r2]
 800c6b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6b4:	7b7a      	ldrb	r2, [r7, #13]
 800c6b6:	4908      	ldr	r1, [pc, #32]	@ (800c6d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c6b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c6c6:	bf00      	nop
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	080127b4 	.word	0x080127b4
 800c6d8:	080127bc 	.word	0x080127bc

0800c6dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6dc:	b084      	sub	sp, #16
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b084      	sub	sp, #16
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	f107 001c 	add.w	r0, r7, #28
 800c6ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 f8e6 	bl	800c8cc <USB_CoreReset>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800c704:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d106      	bne.n	800c71a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c710:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	639a      	str	r2, [r3, #56]	@ 0x38
 800c718:	e005      	b.n	800c726 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c71e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c732:	b004      	add	sp, #16
 800c734:	4770      	bx	lr

0800c736 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c736:	b480      	push	{r7}
 800c738:	b083      	sub	sp, #12
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	f023 0201 	bic.w	r2, r3, #1
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c774:	78fb      	ldrb	r3, [r7, #3]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d115      	bne.n	800c7a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c786:	200a      	movs	r0, #10
 800c788:	f7f6 fb9c 	bl	8002ec4 <HAL_Delay>
      ms += 10U;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	330a      	adds	r3, #10
 800c790:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f88c 	bl	800c8b0 <USB_GetMode>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d01e      	beq.n	800c7dc <USB_SetCurrentMode+0x84>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2bc7      	cmp	r3, #199	@ 0xc7
 800c7a2:	d9f0      	bls.n	800c786 <USB_SetCurrentMode+0x2e>
 800c7a4:	e01a      	b.n	800c7dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c7a6:	78fb      	ldrb	r3, [r7, #3]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d115      	bne.n	800c7d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c7b8:	200a      	movs	r0, #10
 800c7ba:	f7f6 fb83 	bl	8002ec4 <HAL_Delay>
      ms += 10U;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	330a      	adds	r3, #10
 800c7c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f873 	bl	800c8b0 <USB_GetMode>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d005      	beq.n	800c7dc <USB_SetCurrentMode+0x84>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2bc7      	cmp	r3, #199	@ 0xc7
 800c7d4:	d9f0      	bls.n	800c7b8 <USB_SetCurrentMode+0x60>
 800c7d6:	e001      	b.n	800c7dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e005      	b.n	800c7e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2bc8      	cmp	r3, #200	@ 0xc8
 800c7e0:	d101      	bne.n	800c7e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e000      	b.n	800c7e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3301      	adds	r3, #1
 800c802:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c80a:	d901      	bls.n	800c810 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e01b      	b.n	800c848 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	daf2      	bge.n	800c7fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c818:	2300      	movs	r3, #0
 800c81a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	019b      	lsls	r3, r3, #6
 800c820:	f043 0220 	orr.w	r2, r3, #32
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3301      	adds	r3, #1
 800c82c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c834:	d901      	bls.n	800c83a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c836:	2303      	movs	r3, #3
 800c838:	e006      	b.n	800c848 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	f003 0320 	and.w	r3, r3, #32
 800c842:	2b20      	cmp	r3, #32
 800c844:	d0f0      	beq.n	800c828 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3301      	adds	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c86c:	d901      	bls.n	800c872 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	e018      	b.n	800c8a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	daf2      	bge.n	800c860 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c87a:	2300      	movs	r3, #0
 800c87c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2210      	movs	r2, #16
 800c882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	3301      	adds	r3, #1
 800c888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c890:	d901      	bls.n	800c896 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c892:	2303      	movs	r3, #3
 800c894:	e006      	b.n	800c8a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	f003 0310 	and.w	r3, r3, #16
 800c89e:	2b10      	cmp	r3, #16
 800c8a0:	d0f0      	beq.n	800c884 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3714      	adds	r7, #20
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	f003 0301 	and.w	r3, r3, #1
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c8e4:	d901      	bls.n	800c8ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c8e6:	2303      	movs	r3, #3
 800c8e8:	e01b      	b.n	800c922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	daf2      	bge.n	800c8d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	f043 0201 	orr.w	r2, r3, #1
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3301      	adds	r3, #1
 800c906:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c90e:	d901      	bls.n	800c914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c910:	2303      	movs	r3, #3
 800c912:	e006      	b.n	800c922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	f003 0301 	and.w	r3, r3, #1
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d0f0      	beq.n	800c902 <USB_CoreReset+0x36>

  return HAL_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
	...

0800c930 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c930:	b084      	sub	sp, #16
 800c932:	b580      	push	{r7, lr}
 800c934:	b086      	sub	sp, #24
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c93e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	60fb      	str	r3, [r7, #12]
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c950:	461a      	mov	r2, r3
 800c952:	2300      	movs	r3, #0
 800c954:	6013      	str	r3, [r2, #0]
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c95a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c966:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c976:	2b00      	cmp	r3, #0
 800c978:	d119      	bne.n	800c9ae <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c97a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d10a      	bne.n	800c998 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c990:	f043 0304 	orr.w	r3, r3, #4
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	e014      	b.n	800c9c2 <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c9a6:	f023 0304 	bic.w	r3, r3, #4
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	e009      	b.n	800c9c2 <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c9bc:	f023 0304 	bic.w	r3, r3, #4
 800c9c0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c9c2:	2110      	movs	r1, #16
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7ff ff13 	bl	800c7f0 <USB_FlushTxFifo>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff ff3d 	bl	800c854 <USB_FlushRxFifo>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	613b      	str	r3, [r7, #16]
 800c9e8:	e015      	b.n	800ca16 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	015a      	lsls	r2, r3, #5
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9fc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	015a      	lsls	r2, r3, #5
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	4413      	add	r3, r2
 800ca06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	3301      	adds	r3, #1
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d3e3      	bcc.n	800c9ea <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2e:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2280      	movs	r2, #128	@ 0x80
 800ca34:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a0e      	ldr	r2, [pc, #56]	@ (800ca74 <USB_HostInit+0x144>)
 800ca3a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a0e      	ldr	r2, [pc, #56]	@ (800ca78 <USB_HostInit+0x148>)
 800ca40:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ca44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d105      	bne.n	800ca58 <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	699b      	ldr	r3, [r3, #24]
 800ca50:	f043 0210 	orr.w	r2, r3, #16
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	699a      	ldr	r2, [r3, #24]
 800ca5c:	4b07      	ldr	r3, [pc, #28]	@ (800ca7c <USB_HostInit+0x14c>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3718      	adds	r7, #24
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca70:	b004      	add	sp, #16
 800ca72:	4770      	bx	lr
 800ca74:	00600080 	.word	0x00600080
 800ca78:	004000e0 	.word	0x004000e0
 800ca7c:	a3200008 	.word	0xa3200008

0800ca80 <arm_max_f32>:
 800ca80:	f101 3cff 	add.w	ip, r1, #4294967295
 800ca84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca86:	4607      	mov	r7, r0
 800ca88:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800ca8c:	ecf7 7a01 	vldmia	r7!, {s15}
 800ca90:	d05d      	beq.n	800cb4e <arm_max_f32+0xce>
 800ca92:	f10e 0601 	add.w	r6, lr, #1
 800ca96:	3014      	adds	r0, #20
 800ca98:	2404      	movs	r4, #4
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	00b6      	lsls	r6, r6, #2
 800ca9e:	ed10 7a04 	vldr	s14, [r0, #-16]
 800caa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800caa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caaa:	d502      	bpl.n	800cab2 <arm_max_f32+0x32>
 800caac:	eef0 7a47 	vmov.f32	s15, s14
 800cab0:	1ee5      	subs	r5, r4, #3
 800cab2:	ed10 7a03 	vldr	s14, [r0, #-12]
 800cab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800caba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabe:	d502      	bpl.n	800cac6 <arm_max_f32+0x46>
 800cac0:	eef0 7a47 	vmov.f32	s15, s14
 800cac4:	1ea5      	subs	r5, r4, #2
 800cac6:	ed10 7a02 	vldr	s14, [r0, #-8]
 800caca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad2:	d502      	bpl.n	800cada <arm_max_f32+0x5a>
 800cad4:	eef0 7a47 	vmov.f32	s15, s14
 800cad8:	1e65      	subs	r5, r4, #1
 800cada:	ed10 7a01 	vldr	s14, [r0, #-4]
 800cade:	3010      	adds	r0, #16
 800cae0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae8:	d502      	bpl.n	800caf0 <arm_max_f32+0x70>
 800caea:	eef0 7a47 	vmov.f32	s15, s14
 800caee:	4625      	mov	r5, r4
 800caf0:	3404      	adds	r4, #4
 800caf2:	42b4      	cmp	r4, r6
 800caf4:	d1d3      	bne.n	800ca9e <arm_max_f32+0x1e>
 800caf6:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800cafa:	f01c 0003 	ands.w	r0, ip, #3
 800cafe:	d01e      	beq.n	800cb3e <arm_max_f32+0xbe>
 800cb00:	ed97 7a00 	vldr	s14, [r7]
 800cb04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb0c:	dc1b      	bgt.n	800cb46 <arm_max_f32+0xc6>
 800cb0e:	3801      	subs	r0, #1
 800cb10:	d015      	beq.n	800cb3e <arm_max_f32+0xbe>
 800cb12:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb1e:	d502      	bpl.n	800cb26 <arm_max_f32+0xa6>
 800cb20:	eef0 7a47 	vmov.f32	s15, s14
 800cb24:	1a0d      	subs	r5, r1, r0
 800cb26:	2801      	cmp	r0, #1
 800cb28:	d009      	beq.n	800cb3e <arm_max_f32+0xbe>
 800cb2a:	ed97 7a02 	vldr	s14, [r7, #8]
 800cb2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb36:	d502      	bpl.n	800cb3e <arm_max_f32+0xbe>
 800cb38:	eef0 7a47 	vmov.f32	s15, s14
 800cb3c:	4665      	mov	r5, ip
 800cb3e:	edc2 7a00 	vstr	s15, [r2]
 800cb42:	601d      	str	r5, [r3, #0]
 800cb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb46:	eef0 7a47 	vmov.f32	s15, s14
 800cb4a:	1a0d      	subs	r5, r1, r0
 800cb4c:	e7df      	b.n	800cb0e <arm_max_f32+0x8e>
 800cb4e:	4675      	mov	r5, lr
 800cb50:	e7d3      	b.n	800cafa <arm_max_f32+0x7a>
 800cb52:	bf00      	nop

0800cb54 <arm_rfft_32_fast_init_f32>:
 800cb54:	b150      	cbz	r0, 800cb6c <arm_rfft_32_fast_init_f32+0x18>
 800cb56:	2110      	movs	r1, #16
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	f000 fd66 	bl	800d62c <arm_cfft_init_f32>
 800cb60:	b918      	cbnz	r0, 800cb6a <arm_rfft_32_fast_init_f32+0x16>
 800cb62:	2220      	movs	r2, #32
 800cb64:	4b03      	ldr	r3, [pc, #12]	@ (800cb74 <arm_rfft_32_fast_init_f32+0x20>)
 800cb66:	8222      	strh	r2, [r4, #16]
 800cb68:	6163      	str	r3, [r4, #20]
 800cb6a:	bd10      	pop	{r4, pc}
 800cb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	0802b21c 	.word	0x0802b21c

0800cb78 <arm_rfft_64_fast_init_f32>:
 800cb78:	b150      	cbz	r0, 800cb90 <arm_rfft_64_fast_init_f32+0x18>
 800cb7a:	2120      	movs	r1, #32
 800cb7c:	b510      	push	{r4, lr}
 800cb7e:	4604      	mov	r4, r0
 800cb80:	f000 fd54 	bl	800d62c <arm_cfft_init_f32>
 800cb84:	b918      	cbnz	r0, 800cb8e <arm_rfft_64_fast_init_f32+0x16>
 800cb86:	2240      	movs	r2, #64	@ 0x40
 800cb88:	4b03      	ldr	r3, [pc, #12]	@ (800cb98 <arm_rfft_64_fast_init_f32+0x20>)
 800cb8a:	8222      	strh	r2, [r4, #16]
 800cb8c:	6163      	str	r3, [r4, #20]
 800cb8e:	bd10      	pop	{r4, pc}
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	0802fa9c 	.word	0x0802fa9c

0800cb9c <arm_rfft_128_fast_init_f32>:
 800cb9c:	b150      	cbz	r0, 800cbb4 <arm_rfft_128_fast_init_f32+0x18>
 800cb9e:	2140      	movs	r1, #64	@ 0x40
 800cba0:	b510      	push	{r4, lr}
 800cba2:	4604      	mov	r4, r0
 800cba4:	f000 fd42 	bl	800d62c <arm_cfft_init_f32>
 800cba8:	b918      	cbnz	r0, 800cbb2 <arm_rfft_128_fast_init_f32+0x16>
 800cbaa:	2280      	movs	r2, #128	@ 0x80
 800cbac:	4b03      	ldr	r3, [pc, #12]	@ (800cbbc <arm_rfft_128_fast_init_f32+0x20>)
 800cbae:	8222      	strh	r2, [r4, #16]
 800cbb0:	6163      	str	r3, [r4, #20]
 800cbb2:	bd10      	pop	{r4, pc}
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	08028c1c 	.word	0x08028c1c

0800cbc0 <arm_rfft_256_fast_init_f32>:
 800cbc0:	b158      	cbz	r0, 800cbda <arm_rfft_256_fast_init_f32+0x1a>
 800cbc2:	2180      	movs	r1, #128	@ 0x80
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	f000 fd30 	bl	800d62c <arm_cfft_init_f32>
 800cbcc:	b920      	cbnz	r0, 800cbd8 <arm_rfft_256_fast_init_f32+0x18>
 800cbce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cbd2:	4b03      	ldr	r3, [pc, #12]	@ (800cbe0 <arm_rfft_256_fast_init_f32+0x20>)
 800cbd4:	8222      	strh	r2, [r4, #16]
 800cbd6:	6163      	str	r3, [r4, #20]
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	f04f 30ff 	mov.w	r0, #4294967295
 800cbde:	4770      	bx	lr
 800cbe0:	0802ae1c 	.word	0x0802ae1c

0800cbe4 <arm_rfft_512_fast_init_f32>:
 800cbe4:	b160      	cbz	r0, 800cc00 <arm_rfft_512_fast_init_f32+0x1c>
 800cbe6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cbea:	b510      	push	{r4, lr}
 800cbec:	4604      	mov	r4, r0
 800cbee:	f000 fd1d 	bl	800d62c <arm_cfft_init_f32>
 800cbf2:	b920      	cbnz	r0, 800cbfe <arm_rfft_512_fast_init_f32+0x1a>
 800cbf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbf8:	4b03      	ldr	r3, [pc, #12]	@ (800cc08 <arm_rfft_512_fast_init_f32+0x24>)
 800cbfa:	8222      	strh	r2, [r4, #16]
 800cbfc:	6163      	str	r3, [r4, #20]
 800cbfe:	bd10      	pop	{r4, pc}
 800cc00:	f04f 30ff 	mov.w	r0, #4294967295
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	0802f29c 	.word	0x0802f29c

0800cc0c <arm_rfft_1024_fast_init_f32>:
 800cc0c:	b160      	cbz	r0, 800cc28 <arm_rfft_1024_fast_init_f32+0x1c>
 800cc0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc12:	b510      	push	{r4, lr}
 800cc14:	4604      	mov	r4, r0
 800cc16:	f000 fd09 	bl	800d62c <arm_cfft_init_f32>
 800cc1a:	b920      	cbnz	r0, 800cc26 <arm_rfft_1024_fast_init_f32+0x1a>
 800cc1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cc20:	4b03      	ldr	r3, [pc, #12]	@ (800cc30 <arm_rfft_1024_fast_init_f32+0x24>)
 800cc22:	8222      	strh	r2, [r4, #16]
 800cc24:	6163      	str	r3, [r4, #20]
 800cc26:	bd10      	pop	{r4, pc}
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2c:	4770      	bx	lr
 800cc2e:	bf00      	nop
 800cc30:	08027c1c 	.word	0x08027c1c

0800cc34 <arm_rfft_2048_fast_init_f32>:
 800cc34:	b160      	cbz	r0, 800cc50 <arm_rfft_2048_fast_init_f32+0x1c>
 800cc36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cc3a:	b510      	push	{r4, lr}
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	f000 fcf5 	bl	800d62c <arm_cfft_init_f32>
 800cc42:	b920      	cbnz	r0, 800cc4e <arm_rfft_2048_fast_init_f32+0x1a>
 800cc44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc48:	4b03      	ldr	r3, [pc, #12]	@ (800cc58 <arm_rfft_2048_fast_init_f32+0x24>)
 800cc4a:	8222      	strh	r2, [r4, #16]
 800cc4c:	6163      	str	r3, [r4, #20]
 800cc4e:	bd10      	pop	{r4, pc}
 800cc50:	f04f 30ff 	mov.w	r0, #4294967295
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	08028e1c 	.word	0x08028e1c

0800cc5c <arm_rfft_4096_fast_init_f32>:
 800cc5c:	b160      	cbz	r0, 800cc78 <arm_rfft_4096_fast_init_f32+0x1c>
 800cc5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800cc62:	b510      	push	{r4, lr}
 800cc64:	4604      	mov	r4, r0
 800cc66:	f000 fce1 	bl	800d62c <arm_cfft_init_f32>
 800cc6a:	b920      	cbnz	r0, 800cc76 <arm_rfft_4096_fast_init_f32+0x1a>
 800cc6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cc70:	4b03      	ldr	r3, [pc, #12]	@ (800cc80 <arm_rfft_4096_fast_init_f32+0x24>)
 800cc72:	8222      	strh	r2, [r4, #16]
 800cc74:	6163      	str	r3, [r4, #20]
 800cc76:	bd10      	pop	{r4, pc}
 800cc78:	f04f 30ff 	mov.w	r0, #4294967295
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	0802b29c 	.word	0x0802b29c

0800cc84 <arm_rfft_fast_init_f32>:
 800cc84:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cc88:	d024      	beq.n	800ccd4 <arm_rfft_fast_init_f32+0x50>
 800cc8a:	d807      	bhi.n	800cc9c <arm_rfft_fast_init_f32+0x18>
 800cc8c:	2980      	cmp	r1, #128	@ 0x80
 800cc8e:	d01c      	beq.n	800ccca <arm_rfft_fast_init_f32+0x46>
 800cc90:	d90c      	bls.n	800ccac <arm_rfft_fast_init_f32+0x28>
 800cc92:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800cc96:	d11a      	bne.n	800ccce <arm_rfft_fast_init_f32+0x4a>
 800cc98:	4b0f      	ldr	r3, [pc, #60]	@ (800ccd8 <arm_rfft_fast_init_f32+0x54>)
 800cc9a:	4718      	bx	r3
 800cc9c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800cca0:	d011      	beq.n	800ccc6 <arm_rfft_fast_init_f32+0x42>
 800cca2:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800cca6:	d107      	bne.n	800ccb8 <arm_rfft_fast_init_f32+0x34>
 800cca8:	4b0c      	ldr	r3, [pc, #48]	@ (800ccdc <arm_rfft_fast_init_f32+0x58>)
 800ccaa:	4718      	bx	r3
 800ccac:	2920      	cmp	r1, #32
 800ccae:	d008      	beq.n	800ccc2 <arm_rfft_fast_init_f32+0x3e>
 800ccb0:	2940      	cmp	r1, #64	@ 0x40
 800ccb2:	d10c      	bne.n	800ccce <arm_rfft_fast_init_f32+0x4a>
 800ccb4:	4b0a      	ldr	r3, [pc, #40]	@ (800cce0 <arm_rfft_fast_init_f32+0x5c>)
 800ccb6:	e7f0      	b.n	800cc9a <arm_rfft_fast_init_f32+0x16>
 800ccb8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ccbc:	d107      	bne.n	800ccce <arm_rfft_fast_init_f32+0x4a>
 800ccbe:	4b09      	ldr	r3, [pc, #36]	@ (800cce4 <arm_rfft_fast_init_f32+0x60>)
 800ccc0:	e7eb      	b.n	800cc9a <arm_rfft_fast_init_f32+0x16>
 800ccc2:	4b09      	ldr	r3, [pc, #36]	@ (800cce8 <arm_rfft_fast_init_f32+0x64>)
 800ccc4:	e7e9      	b.n	800cc9a <arm_rfft_fast_init_f32+0x16>
 800ccc6:	4b09      	ldr	r3, [pc, #36]	@ (800ccec <arm_rfft_fast_init_f32+0x68>)
 800ccc8:	e7e7      	b.n	800cc9a <arm_rfft_fast_init_f32+0x16>
 800ccca:	4b09      	ldr	r3, [pc, #36]	@ (800ccf0 <arm_rfft_fast_init_f32+0x6c>)
 800cccc:	e7e5      	b.n	800cc9a <arm_rfft_fast_init_f32+0x16>
 800ccce:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd2:	4770      	bx	lr
 800ccd4:	4b07      	ldr	r3, [pc, #28]	@ (800ccf4 <arm_rfft_fast_init_f32+0x70>)
 800ccd6:	e7e0      	b.n	800cc9a <arm_rfft_fast_init_f32+0x16>
 800ccd8:	0800cbc1 	.word	0x0800cbc1
 800ccdc:	0800cc5d 	.word	0x0800cc5d
 800cce0:	0800cb79 	.word	0x0800cb79
 800cce4:	0800cc0d 	.word	0x0800cc0d
 800cce8:	0800cb55 	.word	0x0800cb55
 800ccec:	0800cc35 	.word	0x0800cc35
 800ccf0:	0800cb9d 	.word	0x0800cb9d
 800ccf4:	0800cbe5 	.word	0x0800cbe5

0800ccf8 <stage_rfft_f32>:
 800ccf8:	b470      	push	{r4, r5, r6}
 800ccfa:	edd1 7a00 	vldr	s15, [r1]
 800ccfe:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cd02:	ed91 7a01 	vldr	s14, [r1, #4]
 800cd06:	f101 0410 	add.w	r4, r1, #16
 800cd0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cd0e:	8806      	ldrh	r6, [r0, #0]
 800cd10:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cd14:	6940      	ldr	r0, [r0, #20]
 800cd16:	3e01      	subs	r6, #1
 800cd18:	eeb0 4a46 	vmov.f32	s8, s12
 800cd1c:	f102 0510 	add.w	r5, r2, #16
 800cd20:	3010      	adds	r0, #16
 800cd22:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd2e:	f1a1 0308 	sub.w	r3, r1, #8
 800cd32:	ee26 7a86 	vmul.f32	s14, s13, s12
 800cd36:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cd3a:	ed82 7a00 	vstr	s14, [r2]
 800cd3e:	edc2 7a01 	vstr	s15, [r2, #4]
 800cd42:	ed14 6a02 	vldr	s12, [r4, #-8]
 800cd46:	3e01      	subs	r6, #1
 800cd48:	ed93 7a02 	vldr	s14, [r3, #8]
 800cd4c:	f104 0408 	add.w	r4, r4, #8
 800cd50:	ed50 6a02 	vldr	s13, [r0, #-8]
 800cd54:	f1a3 0308 	sub.w	r3, r3, #8
 800cd58:	ee77 5a46 	vsub.f32	s11, s14, s12
 800cd5c:	edd3 4a05 	vldr	s9, [r3, #20]
 800cd60:	ed54 7a03 	vldr	s15, [r4, #-12]
 800cd64:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cd68:	ed10 6a01 	vldr	s12, [r0, #-4]
 800cd6c:	f105 0508 	add.w	r5, r5, #8
 800cd70:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800cd74:	f100 0008 	add.w	r0, r0, #8
 800cd78:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800cd7c:	ee66 5a25 	vmul.f32	s11, s12, s11
 800cd80:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800cd84:	ee37 7a23 	vadd.f32	s14, s14, s7
 800cd88:	ee66 6a85 	vmul.f32	s13, s13, s10
 800cd8c:	ee26 6a05 	vmul.f32	s12, s12, s10
 800cd90:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800cd94:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cd98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cda0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cda4:	ed05 7a04 	vstr	s14, [r5, #-16]
 800cda8:	ed45 7a03 	vstr	s15, [r5, #-12]
 800cdac:	d1c9      	bne.n	800cd42 <stage_rfft_f32+0x4a>
 800cdae:	bc70      	pop	{r4, r5, r6}
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <merge_rfft_f32>:
 800cdb4:	b410      	push	{r4}
 800cdb6:	edd1 7a00 	vldr	s15, [r1]
 800cdba:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800cdbe:	edd1 6a01 	vldr	s13, [r1, #4]
 800cdc2:	8804      	ldrh	r4, [r0, #0]
 800cdc4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cdc8:	6940      	ldr	r0, [r0, #20]
 800cdca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cdce:	3c01      	subs	r4, #1
 800cdd0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cdd4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cdd8:	ed82 7a00 	vstr	s14, [r2]
 800cddc:	edc2 7a01 	vstr	s15, [r2, #4]
 800cde0:	b3dc      	cbz	r4, 800ce5a <merge_rfft_f32+0xa6>
 800cde2:	00e3      	lsls	r3, r4, #3
 800cde4:	3010      	adds	r0, #16
 800cde6:	3210      	adds	r2, #16
 800cde8:	3b08      	subs	r3, #8
 800cdea:	440b      	add	r3, r1
 800cdec:	3110      	adds	r1, #16
 800cdee:	ed11 6a02 	vldr	s12, [r1, #-8]
 800cdf2:	3c01      	subs	r4, #1
 800cdf4:	ed93 7a02 	vldr	s14, [r3, #8]
 800cdf8:	f101 0108 	add.w	r1, r1, #8
 800cdfc:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ce00:	f1a3 0308 	sub.w	r3, r3, #8
 800ce04:	ee76 5a47 	vsub.f32	s11, s12, s14
 800ce08:	edd3 4a05 	vldr	s9, [r3, #20]
 800ce0c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ce10:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ce14:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ce18:	f102 0208 	add.w	r2, r2, #8
 800ce1c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ce20:	f100 0008 	add.w	r0, r0, #8
 800ce24:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ce28:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ce2c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ce30:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ce34:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ce38:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ce3c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ce40:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ce44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ce48:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ce4c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ce50:	ed02 7a04 	vstr	s14, [r2, #-16]
 800ce54:	ed42 7a03 	vstr	s15, [r2, #-12]
 800ce58:	d1c9      	bne.n	800cdee <merge_rfft_f32+0x3a>
 800ce5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <arm_rfft_fast_f32>:
 800ce60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce64:	461c      	mov	r4, r3
 800ce66:	4605      	mov	r5, r0
 800ce68:	4616      	mov	r6, r2
 800ce6a:	b14b      	cbz	r3, 800ce80 <arm_rfft_fast_f32+0x20>
 800ce6c:	f7ff ffa2 	bl	800cdb4 <merge_rfft_f32>
 800ce70:	4622      	mov	r2, r4
 800ce72:	4631      	mov	r1, r6
 800ce74:	4628      	mov	r0, r5
 800ce76:	2301      	movs	r3, #1
 800ce78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7c:	f000 bb38 	b.w	800d4f0 <arm_cfft_f32>
 800ce80:	460f      	mov	r7, r1
 800ce82:	461a      	mov	r2, r3
 800ce84:	2301      	movs	r3, #1
 800ce86:	f000 fb33 	bl	800d4f0 <arm_cfft_f32>
 800ce8a:	4632      	mov	r2, r6
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	4628      	mov	r0, r5
 800ce90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce94:	f7ff bf30 	b.w	800ccf8 <stage_rfft_f32>

0800ce98 <arm_cfft_radix8by2_f32>:
 800ce98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9c:	4607      	mov	r7, r0
 800ce9e:	4608      	mov	r0, r1
 800cea0:	ed2d 8b06 	vpush	{d8-d10}
 800cea4:	f8b7 c000 	ldrh.w	ip, [r7]
 800cea8:	b082      	sub	sp, #8
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800ceb0:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800ceb4:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ceb8:	f000 80ac 	beq.w	800d014 <arm_cfft_radix8by2_f32+0x17c>
 800cebc:	008c      	lsls	r4, r1, #2
 800cebe:	f100 0310 	add.w	r3, r0, #16
 800cec2:	3210      	adds	r2, #16
 800cec4:	f108 0610 	add.w	r6, r8, #16
 800cec8:	3410      	adds	r4, #16
 800ceca:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800cece:	1905      	adds	r5, r0, r4
 800ced0:	4444      	add	r4, r8
 800ced2:	ed16 7a04 	vldr	s14, [r6, #-16]
 800ced6:	3310      	adds	r3, #16
 800ced8:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 800cedc:	3510      	adds	r5, #16
 800cede:	ed56 0a03 	vldr	s1, [r6, #-12]
 800cee2:	3210      	adds	r2, #16
 800cee4:	ee74 9a87 	vadd.f32	s19, s9, s14
 800cee8:	ed56 7a02 	vldr	s15, [r6, #-8]
 800ceec:	ed56 2a01 	vldr	s5, [r6, #-4]
 800cef0:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800cef4:	ed54 5a04 	vldr	s11, [r4, #-16]
 800cef8:	3610      	adds	r6, #16
 800cefa:	ed14 5a03 	vldr	s10, [r4, #-12]
 800cefe:	3410      	adds	r4, #16
 800cf00:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 800cf04:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 800cf08:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 800cf0c:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 800cf10:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 800cf14:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800cf18:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 800cf1c:	ee33 8a83 	vadd.f32	s16, s7, s6
 800cf20:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 800cf24:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800cf28:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800cf2c:	ee34 0a06 	vadd.f32	s0, s8, s12
 800cf30:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 800cf34:	ee77 aa20 	vadd.f32	s21, s14, s1
 800cf38:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 800cf3c:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800cf40:	ee72 9a22 	vadd.f32	s19, s4, s5
 800cf44:	ee71 8a05 	vadd.f32	s17, s2, s10
 800cf48:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 800cf4c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800cf50:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 800cf54:	ee35 5a41 	vsub.f32	s10, s10, s2
 800cf58:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 800cf5c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800cf60:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 800cf64:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 800cf68:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800cf6c:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 800cf70:	ee72 7a62 	vsub.f32	s15, s4, s5
 800cf74:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 800cf78:	ee73 2a63 	vsub.f32	s5, s6, s7
 800cf7c:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800cf80:	4563      	cmp	r3, ip
 800cf82:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800cf86:	ee24 3a84 	vmul.f32	s6, s9, s8
 800cf8a:	ee27 2a26 	vmul.f32	s4, s14, s13
 800cf8e:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800cf92:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800cf96:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cf9a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800cf9e:	ee65 6a26 	vmul.f32	s13, s10, s13
 800cfa2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800cfa6:	ee37 7a64 	vsub.f32	s14, s14, s9
 800cfaa:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cfae:	ee33 4a02 	vadd.f32	s8, s6, s4
 800cfb2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800cfb6:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 800cfba:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 800cfbe:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 800cfc2:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 800cfc6:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800cfca:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800cfce:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800cfd2:	ee27 4a87 	vmul.f32	s8, s15, s14
 800cfd6:	ee61 5a87 	vmul.f32	s11, s3, s14
 800cfda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cfde:	ee22 5a87 	vmul.f32	s10, s5, s14
 800cfe2:	ee26 7a07 	vmul.f32	s14, s12, s14
 800cfe6:	ee26 6a26 	vmul.f32	s12, s12, s13
 800cfea:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800cfee:	ee74 4a84 	vadd.f32	s9, s9, s8
 800cff2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cff6:	ee35 6a46 	vsub.f32	s12, s10, s12
 800cffa:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cffe:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 800d002:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 800d006:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 800d00a:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 800d00e:	f47f af60 	bne.w	800ced2 <arm_cfft_radix8by2_f32+0x3a>
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	b289      	uxth	r1, r1
 800d016:	2302      	movs	r3, #2
 800d018:	9101      	str	r1, [sp, #4]
 800d01a:	f000 fb57 	bl	800d6cc <arm_radix8_butterfly_f32>
 800d01e:	9901      	ldr	r1, [sp, #4]
 800d020:	4640      	mov	r0, r8
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	2302      	movs	r3, #2
 800d026:	b002      	add	sp, #8
 800d028:	ecbd 8b06 	vpop	{d8-d10}
 800d02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d030:	f000 bb4c 	b.w	800d6cc <arm_radix8_butterfly_f32>

0800d034 <arm_cfft_radix8by4_f32>:
 800d034:	4602      	mov	r2, r0
 800d036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d03a:	ed2d 8b04 	vpush	{d8-d9}
 800d03e:	8813      	ldrh	r3, [r2, #0]
 800d040:	b08d      	sub	sp, #52	@ 0x34
 800d042:	edd1 7a00 	vldr	s15, [r1]
 800d046:	085b      	lsrs	r3, r3, #1
 800d048:	6852      	ldr	r2, [r2, #4]
 800d04a:	edd1 5a01 	vldr	s11, [r1, #4]
 800d04e:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 800d052:	900a      	str	r0, [sp, #40]	@ 0x28
 800d054:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 800d058:	4608      	mov	r0, r1
 800d05a:	ed98 6a00 	vldr	s12, [r8]
 800d05e:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 800d062:	ed96 7a00 	vldr	s14, [r6]
 800d066:	f102 0108 	add.w	r1, r2, #8
 800d06a:	ee77 6a86 	vadd.f32	s13, s15, s12
 800d06e:	ed95 5a00 	vldr	s10, [r5]
 800d072:	edd8 4a01 	vldr	s9, [r8, #4]
 800d076:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d07a:	9102      	str	r1, [sp, #8]
 800d07c:	0859      	lsrs	r1, r3, #1
 800d07e:	ee77 3a26 	vadd.f32	s7, s14, s13
 800d082:	ed96 4a01 	vldr	s8, [r6, #4]
 800d086:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800d08a:	ed95 3a01 	vldr	s6, [r5, #4]
 800d08e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800d092:	9109      	str	r1, [sp, #36]	@ 0x24
 800d094:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d098:	0859      	lsrs	r1, r3, #1
 800d09a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800d09e:	4603      	mov	r3, r0
 800d0a0:	ee76 4a44 	vsub.f32	s9, s12, s8
 800d0a4:	f102 0c10 	add.w	ip, r2, #16
 800d0a8:	edc0 3a00 	vstr	s7, [r0]
 800d0ac:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800d0b0:	ed96 2a01 	vldr	s4, [r6, #4]
 800d0b4:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d0b8:	3308      	adds	r3, #8
 800d0ba:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d0be:	ee36 6a02 	vadd.f32	s12, s12, s4
 800d0c2:	edd5 2a01 	vldr	s5, [r5, #4]
 800d0c6:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800d0ca:	9303      	str	r3, [sp, #12]
 800d0cc:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d0d0:	4637      	mov	r7, r6
 800d0d2:	462c      	mov	r4, r5
 800d0d4:	3902      	subs	r1, #2
 800d0d6:	4643      	mov	r3, r8
 800d0d8:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800d0dc:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800d0e0:	f8cd c000 	str.w	ip, [sp]
 800d0e4:	ee36 6a22 	vadd.f32	s12, s12, s5
 800d0e8:	f102 0c18 	add.w	ip, r2, #24
 800d0ec:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	ee74 4a05 	vadd.f32	s9, s8, s10
 800d0fc:	3408      	adds	r4, #8
 800d0fe:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d102:	0849      	lsrs	r1, r1, #1
 800d104:	ed80 6a01 	vstr	s12, [r0, #4]
 800d108:	9508      	str	r5, [sp, #32]
 800d10a:	edc6 3a00 	vstr	s7, [r6]
 800d10e:	edc6 4a01 	vstr	s9, [r6, #4]
 800d112:	9607      	str	r6, [sp, #28]
 800d114:	edc8 6a00 	vstr	s13, [r8]
 800d118:	edc8 5a01 	vstr	s11, [r8, #4]
 800d11c:	f8cd c004 	str.w	ip, [sp, #4]
 800d120:	9706      	str	r7, [sp, #24]
 800d122:	9305      	str	r3, [sp, #20]
 800d124:	edc5 7a00 	vstr	s15, [r5]
 800d128:	9404      	str	r4, [sp, #16]
 800d12a:	ed85 7a01 	vstr	s14, [r5, #4]
 800d12e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d130:	f000 813a 	beq.w	800d3a8 <arm_cfft_radix8by4_f32+0x374>
 800d134:	4637      	mov	r7, r6
 800d136:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d13a:	462e      	mov	r6, r5
 800d13c:	f1aa 030c 	sub.w	r3, sl, #12
 800d140:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800d144:	f102 0a20 	add.w	sl, r2, #32
 800d148:	4632      	mov	r2, r6
 800d14a:	442b      	add	r3, r5
 800d14c:	f100 0e10 	add.w	lr, r0, #16
 800d150:	f107 0510 	add.w	r5, r7, #16
 800d154:	f8dd b000 	ldr.w	fp, [sp]
 800d158:	f1a8 040c 	sub.w	r4, r8, #12
 800d15c:	f108 0710 	add.w	r7, r8, #16
 800d160:	3e0c      	subs	r6, #12
 800d162:	3210      	adds	r2, #16
 800d164:	ed17 7a02 	vldr	s14, [r7, #-8]
 800d168:	3901      	subs	r1, #1
 800d16a:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800d16e:	f1ac 0c08 	sub.w	ip, ip, #8
 800d172:	ed55 6a02 	vldr	s13, [r5, #-8]
 800d176:	f10e 0e08 	add.w	lr, lr, #8
 800d17a:	ee77 1a87 	vadd.f32	s3, s15, s14
 800d17e:	ed52 4a02 	vldr	s9, [r2, #-8]
 800d182:	ed57 5a01 	vldr	s11, [r7, #-4]
 800d186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d18a:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800d18e:	f10b 0b08 	add.w	fp, fp, #8
 800d192:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800d196:	ed15 3a01 	vldr	s6, [r5, #-4]
 800d19a:	ee37 4a25 	vadd.f32	s8, s14, s11
 800d19e:	ed52 3a01 	vldr	s7, [r2, #-4]
 800d1a2:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d1a6:	f105 0508 	add.w	r5, r5, #8
 800d1aa:	ee36 6a24 	vadd.f32	s12, s12, s9
 800d1ae:	f1a4 0408 	sub.w	r4, r4, #8
 800d1b2:	ee73 2a27 	vadd.f32	s5, s6, s15
 800d1b6:	f10a 0a10 	add.w	sl, sl, #16
 800d1ba:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d1be:	f107 0708 	add.w	r7, r7, #8
 800d1c2:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800d1c6:	ee37 5a66 	vsub.f32	s10, s14, s13
 800d1ca:	ed55 5a03 	vldr	s11, [r5, #-12]
 800d1ce:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800d1d2:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d1d6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d1da:	ee74 5a25 	vadd.f32	s11, s8, s11
 800d1de:	f1a6 0608 	sub.w	r6, r6, #8
 800d1e2:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d1e6:	f109 0918 	add.w	r9, r9, #24
 800d1ea:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800d1ee:	f102 0208 	add.w	r2, r2, #8
 800d1f2:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d1f6:	f1a3 0308 	sub.w	r3, r3, #8
 800d1fa:	ee34 6a63 	vsub.f32	s12, s8, s7
 800d1fe:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800d202:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800d206:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d20a:	ed96 4a04 	vldr	s8, [r6, #16]
 800d20e:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800d212:	ed9c 3a04 	vldr	s6, [ip, #16]
 800d216:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d21a:	edd4 7a04 	vldr	s15, [r4, #16]
 800d21e:	ee73 6a04 	vadd.f32	s13, s6, s8
 800d222:	ed93 8a04 	vldr	s16, [r3, #16]
 800d226:	edd6 5a03 	vldr	s11, [r6, #12]
 800d22a:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d22e:	ed9c 2a03 	vldr	s4, [ip, #12]
 800d232:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800d236:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800d23a:	ed94 1a03 	vldr	s2, [r4, #12]
 800d23e:	ee32 4a25 	vadd.f32	s8, s4, s11
 800d242:	edd3 2a03 	vldr	s5, [r3, #12]
 800d246:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d24a:	ee70 0a88 	vadd.f32	s1, s1, s16
 800d24e:	ee73 4a41 	vsub.f32	s9, s6, s2
 800d252:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d256:	edcc 0a04 	vstr	s1, [ip, #16]
 800d25a:	ee74 0a41 	vsub.f32	s1, s8, s2
 800d25e:	edd4 6a03 	vldr	s13, [r4, #12]
 800d262:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800d266:	ed93 9a03 	vldr	s18, [r3, #12]
 800d26a:	ee78 5a82 	vadd.f32	s11, s17, s4
 800d26e:	ee34 4a26 	vadd.f32	s8, s8, s13
 800d272:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800d276:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d27a:	ee34 4a09 	vadd.f32	s8, s8, s18
 800d27e:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d282:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d286:	ed8c 4a03 	vstr	s8, [ip, #12]
 800d28a:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800d28e:	ed1b 1a03 	vldr	s2, [fp, #-12]
 800d292:	ed1b 4a04 	vldr	s8, [fp, #-16]
 800d296:	ee60 2a01 	vmul.f32	s5, s0, s2
 800d29a:	ee64 6a81 	vmul.f32	s13, s9, s2
 800d29e:	ee20 8a04 	vmul.f32	s16, s0, s8
 800d2a2:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d2a6:	ee25 0a01 	vmul.f32	s0, s10, s2
 800d2aa:	ee25 5a04 	vmul.f32	s10, s10, s8
 800d2ae:	ee25 4a84 	vmul.f32	s8, s11, s8
 800d2b2:	ee65 5a81 	vmul.f32	s11, s11, s2
 800d2b6:	ee35 5a62 	vsub.f32	s10, s10, s5
 800d2ba:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800d2be:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800d2c2:	ee38 1a00 	vadd.f32	s2, s16, s0
 800d2c6:	ed05 5a03 	vstr	s10, [r5, #-12]
 800d2ca:	ed05 1a04 	vstr	s2, [r5, #-16]
 800d2ce:	ed84 4a04 	vstr	s8, [r4, #16]
 800d2d2:	edc4 5a03 	vstr	s11, [r4, #12]
 800d2d6:	ed1a 5a08 	vldr	s10, [sl, #-32]	@ 0xffffffe0
 800d2da:	ed5a 5a07 	vldr	s11, [sl, #-28]	@ 0xffffffe4
 800d2de:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800d2e2:	ee66 2a25 	vmul.f32	s5, s12, s11
 800d2e6:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800d2ea:	ee21 4a85 	vmul.f32	s8, s3, s10
 800d2ee:	ee60 7a85 	vmul.f32	s15, s1, s10
 800d2f2:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800d2f6:	ee26 6a05 	vmul.f32	s12, s12, s10
 800d2fa:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800d2fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d302:	ee34 5a22 	vadd.f32	s10, s8, s5
 800d306:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d30a:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800d30e:	ed07 5a04 	vstr	s10, [r7, #-16]
 800d312:	ed07 6a03 	vstr	s12, [r7, #-12]
 800d316:	edc6 5a04 	vstr	s11, [r6, #16]
 800d31a:	edc6 6a03 	vstr	s13, [r6, #12]
 800d31e:	ed59 2a0c 	vldr	s5, [r9, #-48]	@ 0xffffffd0
 800d322:	ed59 7a0b 	vldr	s15, [r9, #-44]	@ 0xffffffd4
 800d326:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800d32a:	ee67 5a27 	vmul.f32	s11, s14, s15
 800d32e:	ee63 6a27 	vmul.f32	s13, s6, s15
 800d332:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800d336:	ee27 7a22 	vmul.f32	s14, s14, s5
 800d33a:	ee62 7a27 	vmul.f32	s15, s4, s15
 800d33e:	ee23 3a22 	vmul.f32	s6, s6, s5
 800d342:	ee22 2a22 	vmul.f32	s4, s4, s5
 800d346:	ee36 6a25 	vadd.f32	s12, s12, s11
 800d34a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d34e:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800d352:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d356:	ed02 6a04 	vstr	s12, [r2, #-16]
 800d35a:	ed02 7a03 	vstr	s14, [r2, #-12]
 800d35e:	ed83 2a04 	vstr	s4, [r3, #16]
 800d362:	edc3 7a03 	vstr	s15, [r3, #12]
 800d366:	f47f aefd 	bne.w	800d164 <arm_cfft_radix8by4_f32+0x130>
 800d36a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d36c:	9903      	ldr	r1, [sp, #12]
 800d36e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d372:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d376:	9103      	str	r1, [sp, #12]
 800d378:	9902      	ldr	r1, [sp, #8]
 800d37a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d37e:	9102      	str	r1, [sp, #8]
 800d380:	9906      	ldr	r1, [sp, #24]
 800d382:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d386:	9106      	str	r1, [sp, #24]
 800d388:	9900      	ldr	r1, [sp, #0]
 800d38a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800d38e:	9100      	str	r1, [sp, #0]
 800d390:	9905      	ldr	r1, [sp, #20]
 800d392:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d396:	9105      	str	r1, [sp, #20]
 800d398:	9904      	ldr	r1, [sp, #16]
 800d39a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d39e:	9204      	str	r2, [sp, #16]
 800d3a0:	9a01      	ldr	r2, [sp, #4]
 800d3a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	9c03      	ldr	r4, [sp, #12]
 800d3aa:	2304      	movs	r3, #4
 800d3ac:	9e05      	ldr	r6, [sp, #20]
 800d3ae:	ed94 7a00 	vldr	s14, [r4]
 800d3b2:	edd6 7a00 	vldr	s15, [r6]
 800d3b6:	9a06      	ldr	r2, [sp, #24]
 800d3b8:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d3bc:	9d04      	ldr	r5, [sp, #16]
 800d3be:	edd2 6a00 	vldr	s13, [r2]
 800d3c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d3c6:	ed95 3a00 	vldr	s6, [r5]
 800d3ca:	ee76 3a86 	vadd.f32	s7, s13, s12
 800d3ce:	ed96 5a01 	vldr	s10, [r6, #4]
 800d3d2:	ed94 4a01 	vldr	s8, [r4, #4]
 800d3d6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d3da:	edd5 2a01 	vldr	s5, [r5, #4]
 800d3de:	ee73 3a83 	vadd.f32	s7, s7, s6
 800d3e2:	edd2 7a01 	vldr	s15, [r2, #4]
 800d3e6:	ee74 5a05 	vadd.f32	s11, s8, s10
 800d3ea:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800d3ee:	ee34 4a45 	vsub.f32	s8, s8, s10
 800d3f2:	edc4 3a00 	vstr	s7, [r4]
 800d3f6:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d3fa:	edd2 3a01 	vldr	s7, [r2, #4]
 800d3fe:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d402:	ed95 2a01 	vldr	s4, [r5, #4]
 800d406:	ee34 5a66 	vsub.f32	s10, s8, s13
 800d40a:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800d40e:	9103      	str	r1, [sp, #12]
 800d410:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800d414:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d418:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d41c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800d420:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d424:	edc4 3a01 	vstr	s7, [r4, #4]
 800d428:	ee76 6a84 	vadd.f32	s13, s13, s8
 800d42c:	9c02      	ldr	r4, [sp, #8]
 800d42e:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800d432:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800d436:	edd4 3a00 	vldr	s7, [r4]
 800d43a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d43e:	ed94 7a01 	vldr	s14, [r4, #4]
 800d442:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800d446:	ee64 4a87 	vmul.f32	s9, s9, s14
 800d44a:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d44e:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d452:	ee34 7a07 	vadd.f32	s14, s8, s14
 800d456:	ee35 5a64 	vsub.f32	s10, s10, s9
 800d45a:	ed82 7a00 	vstr	s14, [r2]
 800d45e:	ed82 5a01 	vstr	s10, [r2, #4]
 800d462:	9a00      	ldr	r2, [sp, #0]
 800d464:	edd2 4a01 	vldr	s9, [r2, #4]
 800d468:	ed92 7a00 	vldr	s14, [r2]
 800d46c:	9a01      	ldr	r2, [sp, #4]
 800d46e:	ee26 5a07 	vmul.f32	s10, s12, s14
 800d472:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d476:	ee25 7a87 	vmul.f32	s14, s11, s14
 800d47a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800d47e:	ee37 6a46 	vsub.f32	s12, s14, s12
 800d482:	ee75 5a25 	vadd.f32	s11, s10, s11
 800d486:	ed86 6a01 	vstr	s12, [r6, #4]
 800d48a:	edc6 5a00 	vstr	s11, [r6]
 800d48e:	edd2 5a01 	vldr	s11, [r2, #4]
 800d492:	ed92 7a00 	vldr	s14, [r2]
 800d496:	ee27 6a87 	vmul.f32	s12, s15, s14
 800d49a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800d49e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d4a2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d4a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 800d4ae:	edc5 6a00 	vstr	s13, [r5]
 800d4b2:	edc5 7a01 	vstr	s15, [r5, #4]
 800d4b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d4b8:	6862      	ldr	r2, [r4, #4]
 800d4ba:	f000 f907 	bl	800d6cc <arm_radix8_butterfly_f32>
 800d4be:	9903      	ldr	r1, [sp, #12]
 800d4c0:	9807      	ldr	r0, [sp, #28]
 800d4c2:	2304      	movs	r3, #4
 800d4c4:	6862      	ldr	r2, [r4, #4]
 800d4c6:	9100      	str	r1, [sp, #0]
 800d4c8:	f000 f900 	bl	800d6cc <arm_radix8_butterfly_f32>
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	9900      	ldr	r1, [sp, #0]
 800d4d0:	6862      	ldr	r2, [r4, #4]
 800d4d2:	2304      	movs	r3, #4
 800d4d4:	f000 f8fa 	bl	800d6cc <arm_radix8_butterfly_f32>
 800d4d8:	9900      	ldr	r1, [sp, #0]
 800d4da:	6862      	ldr	r2, [r4, #4]
 800d4dc:	2304      	movs	r3, #4
 800d4de:	9808      	ldr	r0, [sp, #32]
 800d4e0:	b00d      	add	sp, #52	@ 0x34
 800d4e2:	ecbd 8b04 	vpop	{d8-d9}
 800d4e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ea:	f000 b8ef 	b.w	800d6cc <arm_radix8_butterfly_f32>
 800d4ee:	bf00      	nop

0800d4f0 <arm_cfft_f32>:
 800d4f0:	2a01      	cmp	r2, #1
 800d4f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f6:	4607      	mov	r7, r0
 800d4f8:	4690      	mov	r8, r2
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	4699      	mov	r9, r3
 800d4fe:	8805      	ldrh	r5, [r0, #0]
 800d500:	d05b      	beq.n	800d5ba <arm_cfft_f32+0xca>
 800d502:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800d506:	d053      	beq.n	800d5b0 <arm_cfft_f32+0xc0>
 800d508:	d810      	bhi.n	800d52c <arm_cfft_f32+0x3c>
 800d50a:	2d40      	cmp	r5, #64	@ 0x40
 800d50c:	d015      	beq.n	800d53a <arm_cfft_f32+0x4a>
 800d50e:	d94b      	bls.n	800d5a8 <arm_cfft_f32+0xb8>
 800d510:	2d80      	cmp	r5, #128	@ 0x80
 800d512:	d103      	bne.n	800d51c <arm_cfft_f32+0x2c>
 800d514:	4621      	mov	r1, r4
 800d516:	4638      	mov	r0, r7
 800d518:	f7ff fcbe 	bl	800ce98 <arm_cfft_radix8by2_f32>
 800d51c:	f1b9 0f00 	cmp.w	r9, #0
 800d520:	d114      	bne.n	800d54c <arm_cfft_f32+0x5c>
 800d522:	f1b8 0f01 	cmp.w	r8, #1
 800d526:	d019      	beq.n	800d55c <arm_cfft_f32+0x6c>
 800d528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d52c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800d530:	d03e      	beq.n	800d5b0 <arm_cfft_f32+0xc0>
 800d532:	d932      	bls.n	800d59a <arm_cfft_f32+0xaa>
 800d534:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800d538:	d1f0      	bne.n	800d51c <arm_cfft_f32+0x2c>
 800d53a:	2301      	movs	r3, #1
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	4629      	mov	r1, r5
 800d540:	4620      	mov	r0, r4
 800d542:	f000 f8c3 	bl	800d6cc <arm_radix8_butterfly_f32>
 800d546:	f1b9 0f00 	cmp.w	r9, #0
 800d54a:	d0ea      	beq.n	800d522 <arm_cfft_f32+0x32>
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	4620      	mov	r0, r4
 800d550:	89b9      	ldrh	r1, [r7, #12]
 800d552:	f000 f843 	bl	800d5dc <arm_bitreversal_32>
 800d556:	f1b8 0f01 	cmp.w	r8, #1
 800d55a:	d1e5      	bne.n	800d528 <arm_cfft_f32+0x38>
 800d55c:	ee07 5a90 	vmov	s15, r5
 800d560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d568:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d56c:	2d00      	cmp	r5, #0
 800d56e:	d0db      	beq.n	800d528 <arm_cfft_f32+0x38>
 800d570:	f104 0108 	add.w	r1, r4, #8
 800d574:	2300      	movs	r3, #0
 800d576:	ed11 7a02 	vldr	s14, [r1, #-8]
 800d57a:	3301      	adds	r3, #1
 800d57c:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d580:	3108      	adds	r1, #8
 800d582:	429d      	cmp	r5, r3
 800d584:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d588:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d58c:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d590:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d594:	d1ef      	bne.n	800d576 <arm_cfft_f32+0x86>
 800d596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d59a:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800d59e:	d0cc      	beq.n	800d53a <arm_cfft_f32+0x4a>
 800d5a0:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800d5a4:	d0b6      	beq.n	800d514 <arm_cfft_f32+0x24>
 800d5a6:	e7b9      	b.n	800d51c <arm_cfft_f32+0x2c>
 800d5a8:	2d10      	cmp	r5, #16
 800d5aa:	d0b3      	beq.n	800d514 <arm_cfft_f32+0x24>
 800d5ac:	2d20      	cmp	r5, #32
 800d5ae:	d1b5      	bne.n	800d51c <arm_cfft_f32+0x2c>
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	f7ff fd3e 	bl	800d034 <arm_cfft_radix8by4_f32>
 800d5b8:	e7b0      	b.n	800d51c <arm_cfft_f32+0x2c>
 800d5ba:	b165      	cbz	r5, 800d5d6 <arm_cfft_f32+0xe6>
 800d5bc:	310c      	adds	r1, #12
 800d5be:	2600      	movs	r6, #0
 800d5c0:	ed51 7a02 	vldr	s15, [r1, #-8]
 800d5c4:	3601      	adds	r6, #1
 800d5c6:	3108      	adds	r1, #8
 800d5c8:	eef1 7a67 	vneg.f32	s15, s15
 800d5cc:	42b5      	cmp	r5, r6
 800d5ce:	ed41 7a04 	vstr	s15, [r1, #-16]
 800d5d2:	d1f5      	bne.n	800d5c0 <arm_cfft_f32+0xd0>
 800d5d4:	e795      	b.n	800d502 <arm_cfft_f32+0x12>
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d0a6      	beq.n	800d528 <arm_cfft_f32+0x38>
 800d5da:	e7b7      	b.n	800d54c <arm_cfft_f32+0x5c>

0800d5dc <arm_bitreversal_32>:
 800d5dc:	b321      	cbz	r1, 800d628 <arm_bitreversal_32+0x4c>
 800d5de:	f102 0c02 	add.w	ip, r2, #2
 800d5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	4690      	mov	r8, r2
 800d5e8:	2500      	movs	r5, #0
 800d5ea:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800d5ee:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800d5f2:	3502      	adds	r5, #2
 800d5f4:	08a4      	lsrs	r4, r4, #2
 800d5f6:	089b      	lsrs	r3, r3, #2
 800d5f8:	428d      	cmp	r5, r1
 800d5fa:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800d5fe:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800d602:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800d606:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800d60a:	f107 0704 	add.w	r7, r7, #4
 800d60e:	f106 0604 	add.w	r6, r6, #4
 800d612:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800d616:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800d61a:	59c4      	ldr	r4, [r0, r7]
 800d61c:	5983      	ldr	r3, [r0, r6]
 800d61e:	51c3      	str	r3, [r0, r7]
 800d620:	5184      	str	r4, [r0, r6]
 800d622:	d3e2      	bcc.n	800d5ea <arm_bitreversal_32+0xe>
 800d624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop

0800d62c <arm_cfft_init_f32>:
 800d62c:	2200      	movs	r2, #0
 800d62e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800d632:	4603      	mov	r3, r0
 800d634:	b430      	push	{r4, r5}
 800d636:	6042      	str	r2, [r0, #4]
 800d638:	8001      	strh	r1, [r0, #0]
 800d63a:	d032      	beq.n	800d6a2 <arm_cfft_init_f32+0x76>
 800d63c:	d918      	bls.n	800d670 <arm_cfft_init_f32+0x44>
 800d63e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800d642:	d026      	beq.n	800d692 <arm_cfft_init_f32+0x66>
 800d644:	d90c      	bls.n	800d660 <arm_cfft_init_f32+0x34>
 800d646:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800d64a:	d11e      	bne.n	800d68a <arm_cfft_init_f32+0x5e>
 800d64c:	4916      	ldr	r1, [pc, #88]	@ (800d6a8 <arm_cfft_init_f32+0x7c>)
 800d64e:	4610      	mov	r0, r2
 800d650:	898d      	ldrh	r5, [r1, #12]
 800d652:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 800d656:	819d      	strh	r5, [r3, #12]
 800d658:	e9c3 2401 	strd	r2, r4, [r3, #4]
 800d65c:	bc30      	pop	{r4, r5}
 800d65e:	4770      	bx	lr
 800d660:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d664:	d017      	beq.n	800d696 <arm_cfft_init_f32+0x6a>
 800d666:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d66a:	d10e      	bne.n	800d68a <arm_cfft_init_f32+0x5e>
 800d66c:	490f      	ldr	r1, [pc, #60]	@ (800d6ac <arm_cfft_init_f32+0x80>)
 800d66e:	e7ee      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d670:	2940      	cmp	r1, #64	@ 0x40
 800d672:	d012      	beq.n	800d69a <arm_cfft_init_f32+0x6e>
 800d674:	d903      	bls.n	800d67e <arm_cfft_init_f32+0x52>
 800d676:	2980      	cmp	r1, #128	@ 0x80
 800d678:	d107      	bne.n	800d68a <arm_cfft_init_f32+0x5e>
 800d67a:	490d      	ldr	r1, [pc, #52]	@ (800d6b0 <arm_cfft_init_f32+0x84>)
 800d67c:	e7e7      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d67e:	2910      	cmp	r1, #16
 800d680:	d00d      	beq.n	800d69e <arm_cfft_init_f32+0x72>
 800d682:	2920      	cmp	r1, #32
 800d684:	d101      	bne.n	800d68a <arm_cfft_init_f32+0x5e>
 800d686:	490b      	ldr	r1, [pc, #44]	@ (800d6b4 <arm_cfft_init_f32+0x88>)
 800d688:	e7e1      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d68a:	f04f 30ff 	mov.w	r0, #4294967295
 800d68e:	bc30      	pop	{r4, r5}
 800d690:	4770      	bx	lr
 800d692:	4909      	ldr	r1, [pc, #36]	@ (800d6b8 <arm_cfft_init_f32+0x8c>)
 800d694:	e7db      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d696:	4909      	ldr	r1, [pc, #36]	@ (800d6bc <arm_cfft_init_f32+0x90>)
 800d698:	e7d9      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d69a:	4909      	ldr	r1, [pc, #36]	@ (800d6c0 <arm_cfft_init_f32+0x94>)
 800d69c:	e7d7      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d69e:	4909      	ldr	r1, [pc, #36]	@ (800d6c4 <arm_cfft_init_f32+0x98>)
 800d6a0:	e7d5      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d6a2:	4909      	ldr	r1, [pc, #36]	@ (800d6c8 <arm_cfft_init_f32+0x9c>)
 800d6a4:	e7d3      	b.n	800d64e <arm_cfft_init_f32+0x22>
 800d6a6:	bf00      	nop
 800d6a8:	0802fbfc 	.word	0x0802fbfc
 800d6ac:	0802fb9c 	.word	0x0802fb9c
 800d6b0:	0802fbac 	.word	0x0802fbac
 800d6b4:	0802fbec 	.word	0x0802fbec
 800d6b8:	0802fbcc 	.word	0x0802fbcc
 800d6bc:	0802fc0c 	.word	0x0802fc0c
 800d6c0:	0802fc1c 	.word	0x0802fc1c
 800d6c4:	0802fbbc 	.word	0x0802fbbc
 800d6c8:	0802fbdc 	.word	0x0802fbdc

0800d6cc <arm_radix8_butterfly_f32>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	ed2d 8b10 	vpush	{d8-d15}
 800d6d4:	b093      	sub	sp, #76	@ 0x4c
 800d6d6:	468a      	mov	sl, r1
 800d6d8:	eddf 8aba 	vldr	s17, [pc, #744]	@ 800d9c4 <arm_radix8_butterfly_f32+0x2f8>
 800d6dc:	468b      	mov	fp, r1
 800d6de:	9010      	str	r0, [sp, #64]	@ 0x40
 800d6e0:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	3304      	adds	r3, #4
 800d6e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d6ea:	ea4f 06da 	mov.w	r6, sl, lsr #3
 800d6ee:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d6f0:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 800d6f4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d6f8:	eb05 1146 	add.w	r1, r5, r6, lsl #5
 800d6fc:	960d      	str	r6, [sp, #52]	@ 0x34
 800d6fe:	00f0      	lsls	r0, r6, #3
 800d700:	f04f 0e00 	mov.w	lr, #0
 800d704:	eb01 1406 	add.w	r4, r1, r6, lsl #4
 800d708:	0137      	lsls	r7, r6, #4
 800d70a:	9003      	str	r0, [sp, #12]
 800d70c:	eba6 0286 	sub.w	r2, r6, r6, lsl #2
 800d710:	9400      	str	r4, [sp, #0]
 800d712:	9702      	str	r7, [sp, #8]
 800d714:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800d718:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800d71c:	1d04      	adds	r4, r0, #4
 800d71e:	1d38      	adds	r0, r7, #4
 800d720:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800d724:	442c      	add	r4, r5
 800d726:	ebc6 09c6 	rsb	r9, r6, r6, lsl #3
 800d72a:	9701      	str	r7, [sp, #4]
 800d72c:	4428      	add	r0, r5
 800d72e:	9d01      	ldr	r5, [sp, #4]
 800d730:	eb02 1746 	add.w	r7, r2, r6, lsl #5
 800d734:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800d738:	00ed      	lsls	r5, r5, #3
 800d73a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800d73e:	9501      	str	r5, [sp, #4]
 800d740:	ea4f 1508 	mov.w	r5, r8, lsl #4
 800d744:	9504      	str	r5, [sp, #16]
 800d746:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 800d74a:	9505      	str	r5, [sp, #20]
 800d74c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800d74e:	ea4f 1845 	mov.w	r8, r5, lsl #5
 800d752:	9d00      	ldr	r5, [sp, #0]
 800d754:	edd1 6a00 	vldr	s13, [r1]
 800d758:	44d6      	add	lr, sl
 800d75a:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800d75e:	ed95 7a00 	vldr	s14, [r5]
 800d762:	45f3      	cmp	fp, lr
 800d764:	ed14 6a01 	vldr	s12, [r4, #-4]
 800d768:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800d76c:	edd6 2a00 	vldr	s5, [r6]
 800d770:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d774:	edd7 3a00 	vldr	s7, [r7]
 800d778:	ed10 5a01 	vldr	s10, [r0, #-4]
 800d77c:	ee36 3a22 	vadd.f32	s6, s12, s5
 800d780:	edd2 6a00 	vldr	s13, [r2]
 800d784:	ee75 5a07 	vadd.f32	s11, s10, s14
 800d788:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800d78c:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800d790:	ee72 4a25 	vadd.f32	s9, s4, s11
 800d794:	ee73 3a04 	vadd.f32	s7, s6, s8
 800d798:	ee35 5a47 	vsub.f32	s10, s10, s14
 800d79c:	ee36 7a62 	vsub.f32	s14, s12, s5
 800d7a0:	ee32 2a65 	vsub.f32	s4, s4, s11
 800d7a4:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800d7a8:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800d7ac:	ee37 6a66 	vsub.f32	s12, s14, s13
 800d7b0:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800d7b4:	ee33 3a44 	vsub.f32	s6, s6, s8
 800d7b8:	edc1 4a00 	vstr	s9, [r1]
 800d7bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d7c0:	ed97 4a01 	vldr	s8, [r7, #4]
 800d7c4:	ee66 6a28 	vmul.f32	s13, s12, s17
 800d7c8:	edd4 5a00 	vldr	s11, [r4]
 800d7cc:	ed96 6a01 	vldr	s12, [r6, #4]
 800d7d0:	ee27 7a28 	vmul.f32	s14, s14, s17
 800d7d4:	edd2 3a01 	vldr	s7, [r2, #4]
 800d7d8:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800d7dc:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800d7e0:	ed91 1a01 	vldr	s2, [r1, #4]
 800d7e4:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800d7e8:	edd5 0a01 	vldr	s1, [r5, #4]
 800d7ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d7f0:	eddc 6a00 	vldr	s13, [ip]
 800d7f4:	ee75 5a86 	vadd.f32	s11, s11, s12
 800d7f8:	ed90 6a00 	vldr	s12, [r0]
 800d7fc:	ee73 3a84 	vadd.f32	s7, s7, s8
 800d800:	ee74 1a80 	vadd.f32	s3, s9, s0
 800d804:	ee36 4a81 	vadd.f32	s8, s13, s2
 800d808:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d80c:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800d810:	ee36 1a20 	vadd.f32	s2, s12, s1
 800d814:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800d818:	ee36 6a60 	vsub.f32	s12, s12, s1
 800d81c:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800d820:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800d824:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800d828:	ee74 3a01 	vadd.f32	s7, s8, s2
 800d82c:	ee34 4a41 	vsub.f32	s8, s8, s2
 800d830:	ee36 1a21 	vadd.f32	s2, s12, s3
 800d834:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800d838:	ee36 6a61 	vsub.f32	s12, s12, s3
 800d83c:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800d840:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800d844:	ed8c 0a00 	vstr	s0, [ip]
 800d848:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d84c:	449c      	add	ip, r3
 800d84e:	ee75 4a07 	vadd.f32	s9, s10, s14
 800d852:	edc1 3a01 	vstr	s7, [r1, #4]
 800d856:	ee35 7a47 	vsub.f32	s14, s10, s14
 800d85a:	4419      	add	r1, r3
 800d85c:	ee32 5a25 	vadd.f32	s10, s4, s11
 800d860:	ee72 5a65 	vsub.f32	s11, s4, s11
 800d864:	ee72 3a81 	vadd.f32	s7, s5, s2
 800d868:	ed00 5a01 	vstr	s10, [r0, #-4]
 800d86c:	ee34 2a43 	vsub.f32	s4, s8, s6
 800d870:	edc5 5a00 	vstr	s11, [r5]
 800d874:	ee37 5a86 	vadd.f32	s10, s15, s12
 800d878:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800d87c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d880:	ed80 2a00 	vstr	s4, [r0]
 800d884:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800d888:	4418      	add	r0, r3
 800d88a:	ee33 4a04 	vadd.f32	s8, s6, s8
 800d88e:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800d892:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800d896:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d89a:	ed85 4a01 	vstr	s8, [r5, #4]
 800d89e:	ed44 3a01 	vstr	s7, [r4, #-4]
 800d8a2:	441d      	add	r5, r3
 800d8a4:	edc7 2a00 	vstr	s5, [r7]
 800d8a8:	ed86 5a00 	vstr	s10, [r6]
 800d8ac:	edc2 7a00 	vstr	s15, [r2]
 800d8b0:	edc4 5a00 	vstr	s11, [r4]
 800d8b4:	441c      	add	r4, r3
 800d8b6:	edc7 4a01 	vstr	s9, [r7, #4]
 800d8ba:	441f      	add	r7, r3
 800d8bc:	ed86 6a01 	vstr	s12, [r6, #4]
 800d8c0:	441e      	add	r6, r3
 800d8c2:	ed82 7a01 	vstr	s14, [r2, #4]
 800d8c6:	441a      	add	r2, r3
 800d8c8:	f63f af44 	bhi.w	800d754 <arm_radix8_butterfly_f32+0x88>
 800d8cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8ce:	2a07      	cmp	r2, #7
 800d8d0:	f240 81b7 	bls.w	800dc42 <arm_radix8_butterfly_f32+0x576>
 800d8d4:	9a03      	ldr	r2, [sp, #12]
 800d8d6:	f108 0808 	add.w	r8, r8, #8
 800d8da:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d8dc:	f109 0008 	add.w	r0, r9, #8
 800d8e0:	3208      	adds	r2, #8
 800d8e2:	9e01      	ldr	r6, [sp, #4]
 800d8e4:	9d04      	ldr	r5, [sp, #16]
 800d8e6:	4694      	mov	ip, r2
 800d8e8:	463a      	mov	r2, r7
 800d8ea:	3608      	adds	r6, #8
 800d8ec:	9c05      	ldr	r4, [sp, #20]
 800d8ee:	4442      	add	r2, r8
 800d8f0:	3508      	adds	r5, #8
 800d8f2:	3408      	adds	r4, #8
 800d8f4:	9902      	ldr	r1, [sp, #8]
 800d8f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d8f8:	eb07 020c 	add.w	r2, r7, ip
 800d8fc:	310c      	adds	r1, #12
 800d8fe:	f04f 0800 	mov.w	r8, #0
 800d902:	920a      	str	r2, [sp, #40]	@ 0x28
 800d904:	19ba      	adds	r2, r7, r6
 800d906:	9209      	str	r2, [sp, #36]	@ 0x24
 800d908:	197a      	adds	r2, r7, r5
 800d90a:	9208      	str	r2, [sp, #32]
 800d90c:	193a      	adds	r2, r7, r4
 800d90e:	9207      	str	r2, [sp, #28]
 800d910:	183a      	adds	r2, r7, r0
 800d912:	9206      	str	r2, [sp, #24]
 800d914:	187a      	adds	r2, r7, r1
 800d916:	9204      	str	r2, [sp, #16]
 800d918:	f107 020c 	add.w	r2, r7, #12
 800d91c:	9205      	str	r2, [sp, #20]
 800d91e:	2201      	movs	r2, #1
 800d920:	9203      	str	r2, [sp, #12]
 800d922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d924:	f8dd c010 	ldr.w	ip, [sp, #16]
 800d928:	4490      	add	r8, r2
 800d92a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d92c:	9f05      	ldr	r7, [sp, #20]
 800d92e:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800d932:	9e06      	ldr	r6, [sp, #24]
 800d934:	eba8 0e88 	sub.w	lr, r8, r8, lsl #2
 800d938:	9d07      	ldr	r5, [sp, #28]
 800d93a:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800d93e:	ed92 ea00 	vldr	s28, [r2]
 800d942:	9c08      	ldr	r4, [sp, #32]
 800d944:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800d948:	edd1 da00 	vldr	s27, [r1]
 800d94c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d94e:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800d952:	ed92 da00 	vldr	s26, [r2]
 800d956:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800d95a:	edd1 ca00 	vldr	s25, [r1]
 800d95e:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800d962:	ed92 ca00 	vldr	s24, [r2]
 800d966:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800d96a:	edd1 ba00 	vldr	s23, [r1]
 800d96e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d970:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800d974:	ed92 ba00 	vldr	s22, [r2]
 800d978:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d97a:	eb0e 09c8 	add.w	r9, lr, r8, lsl #3
 800d97e:	910c      	str	r1, [sp, #48]	@ 0x30
 800d980:	9200      	str	r2, [sp, #0]
 800d982:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800d986:	ed99 aa01 	vldr	s20, [r9, #4]
 800d98a:	edde aa01 	vldr	s21, [lr, #4]
 800d98e:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800d992:	edd2 9a01 	vldr	s19, [r2, #4]
 800d996:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800d99a:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800d99e:	ed99 9a01 	vldr	s18, [r9, #4]
 800d9a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d9a4:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800d9a8:	ed92 8a01 	vldr	s16, [r2, #4]
 800d9ac:	edd9 7a01 	vldr	s15, [r9, #4]
 800d9b0:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800d9b4:	edcd 7a01 	vstr	s15, [sp, #4]
 800d9b8:	edd2 7a01 	vldr	s15, [r2, #4]
 800d9bc:	9a00      	ldr	r2, [sp, #0]
 800d9be:	edcd 7a02 	vstr	s15, [sp, #8]
 800d9c2:	e001      	b.n	800d9c8 <arm_radix8_butterfly_f32+0x2fc>
 800d9c4:	3f3504f3 	.word	0x3f3504f3
 800d9c8:	ed92 7a00 	vldr	s14, [r2]
 800d9cc:	44d6      	add	lr, sl
 800d9ce:	ed17 1a01 	vldr	s2, [r7, #-4]
 800d9d2:	ed90 5a00 	vldr	s10, [r0]
 800d9d6:	45f3      	cmp	fp, lr
 800d9d8:	ed1c fa01 	vldr	s30, [ip, #-4]
 800d9dc:	ee31 3a07 	vadd.f32	s6, s2, s14
 800d9e0:	edd6 5a00 	vldr	s11, [r6]
 800d9e4:	ee31 1a47 	vsub.f32	s2, s2, s14
 800d9e8:	edd4 7a00 	vldr	s15, [r4]
 800d9ec:	ed95 7a00 	vldr	s14, [r5]
 800d9f0:	ed91 4a00 	vldr	s8, [r1]
 800d9f4:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800d9f8:	ee77 6a25 	vadd.f32	s13, s14, s11
 800d9fc:	edd7 ea00 	vldr	s29, [r7]
 800da00:	ee74 fa05 	vadd.f32	s31, s8, s10
 800da04:	ee73 1a06 	vadd.f32	s3, s6, s12
 800da08:	ee34 4a45 	vsub.f32	s8, s8, s10
 800da0c:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800da10:	ee37 7a65 	vsub.f32	s14, s14, s11
 800da14:	ee33 3a46 	vsub.f32	s6, s6, s12
 800da18:	ee31 6a85 	vadd.f32	s12, s3, s10
 800da1c:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800da20:	ee34 fa07 	vadd.f32	s30, s8, s14
 800da24:	ed07 6a01 	vstr	s12, [r7, #-4]
 800da28:	ee34 4a47 	vsub.f32	s8, s8, s14
 800da2c:	edd5 3a01 	vldr	s7, [r5, #4]
 800da30:	ee7f fae6 	vsub.f32	s31, s31, s13
 800da34:	ed90 7a01 	vldr	s14, [r0, #4]
 800da38:	ee2f fa28 	vmul.f32	s30, s30, s17
 800da3c:	edd1 5a01 	vldr	s11, [r1, #4]
 800da40:	ee24 4a28 	vmul.f32	s8, s8, s17
 800da44:	ed96 6a01 	vldr	s12, [r6, #4]
 800da48:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800da4c:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800da50:	edd2 6a01 	vldr	s13, [r2, #4]
 800da54:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800da58:	edd4 4a01 	vldr	s9, [r4, #4]
 800da5c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800da60:	ed9c 7a00 	vldr	s14, [ip]
 800da64:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800da68:	ee33 6a86 	vadd.f32	s12, s7, s12
 800da6c:	ee37 facf 	vsub.f32	s30, s15, s30
 800da70:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800da74:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800da78:	ee7e eae6 	vsub.f32	s29, s29, s13
 800da7c:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800da80:	ee77 6a24 	vadd.f32	s13, s14, s9
 800da84:	ee75 0a86 	vadd.f32	s1, s11, s12
 800da88:	ee37 7a64 	vsub.f32	s14, s14, s9
 800da8c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800da90:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800da94:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800da98:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800da9c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800daa0:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800daa4:	ee77 4a22 	vadd.f32	s9, s14, s5
 800daa8:	ee7e eae7 	vsub.f32	s29, s29, s15
 800daac:	ee77 7a62 	vsub.f32	s15, s14, s5
 800dab0:	ee71 2a04 	vadd.f32	s5, s2, s8
 800dab4:	ee31 7a44 	vsub.f32	s14, s2, s8
 800dab8:	ee30 1a60 	vsub.f32	s2, s0, s1
 800dabc:	ee73 1a06 	vadd.f32	s3, s6, s12
 800dac0:	ee33 6a46 	vsub.f32	s12, s6, s12
 800dac4:	ee33 3aef 	vsub.f32	s6, s7, s31
 800dac8:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800dacc:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800dad0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800dad4:	ee72 5a25 	vadd.f32	s11, s4, s11
 800dad8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800dadc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800dae0:	ee77 2a27 	vadd.f32	s5, s14, s15
 800dae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dae8:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800daec:	ee2c fa85 	vmul.f32	s30, s25, s10
 800daf0:	ee69 ea01 	vmul.f32	s29, s18, s2
 800daf4:	ee29 5a05 	vmul.f32	s10, s18, s10
 800daf8:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800dafc:	ee6d faa1 	vmul.f32	s31, s27, s3
 800db00:	ee70 0a20 	vadd.f32	s1, s0, s1
 800db04:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800db08:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800db0c:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800db10:	edc7 0a00 	vstr	s1, [r7]
 800db14:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800db18:	441f      	add	r7, r3
 800db1a:	ee2a faa3 	vmul.f32	s30, s21, s7
 800db1e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800db22:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800db26:	edc2 ea00 	vstr	s29, [r2]
 800db2a:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800db2e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800db32:	ed82 5a01 	vstr	s10, [r2, #4]
 800db36:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800db3a:	ed9d 5a02 	vldr	s10, [sp, #8]
 800db3e:	edcd 3a00 	vstr	s7, [sp]
 800db42:	ee6b ea86 	vmul.f32	s29, s23, s12
 800db46:	eddd 3a01 	vldr	s7, [sp, #4]
 800db4a:	ee6b fa24 	vmul.f32	s31, s22, s9
 800db4e:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800db52:	ee65 4a24 	vmul.f32	s9, s10, s9
 800db56:	ed8c 3a00 	vstr	s6, [ip]
 800db5a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800db5e:	ee23 6a86 	vmul.f32	s12, s7, s12
 800db62:	eddd 3a00 	vldr	s7, [sp]
 800db66:	ee25 5a25 	vmul.f32	s10, s10, s11
 800db6a:	441a      	add	r2, r3
 800db6c:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800db70:	449c      	add	ip, r3
 800db72:	ee68 1a04 	vmul.f32	s3, s16, s8
 800db76:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800db7a:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800db7e:	ee29 faa7 	vmul.f32	s30, s19, s15
 800db82:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800db86:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800db8a:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800db8e:	ee68 2a22 	vmul.f32	s5, s16, s5
 800db92:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800db96:	ee29 7a87 	vmul.f32	s14, s19, s14
 800db9a:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800db9e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800dba2:	ee7e ea81 	vadd.f32	s29, s29, s2
 800dba6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800dbaa:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800dbae:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800dbb2:	edc4 ea00 	vstr	s29, [r4]
 800dbb6:	ee30 0a21 	vadd.f32	s0, s0, s3
 800dbba:	ed84 6a01 	vstr	s12, [r4, #4]
 800dbbe:	ee74 2a62 	vsub.f32	s5, s8, s5
 800dbc2:	edc1 0a00 	vstr	s1, [r1]
 800dbc6:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800dbca:	edc1 3a01 	vstr	s7, [r1, #4]
 800dbce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800dbd2:	ed86 5a00 	vstr	s10, [r6]
 800dbd6:	edc6 4a01 	vstr	s9, [r6, #4]
 800dbda:	4419      	add	r1, r3
 800dbdc:	ed80 0a00 	vstr	s0, [r0]
 800dbe0:	441c      	add	r4, r3
 800dbe2:	edc0 2a01 	vstr	s5, [r0, #4]
 800dbe6:	441e      	add	r6, r3
 800dbe8:	ed85 3a00 	vstr	s6, [r5]
 800dbec:	4418      	add	r0, r3
 800dbee:	ed85 7a01 	vstr	s14, [r5, #4]
 800dbf2:	441d      	add	r5, r3
 800dbf4:	f63f aee8 	bhi.w	800d9c8 <arm_radix8_butterfly_f32+0x2fc>
 800dbf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbfa:	9a03      	ldr	r2, [sp, #12]
 800dbfc:	3108      	adds	r1, #8
 800dbfe:	3201      	adds	r2, #1
 800dc00:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dc02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc04:	9203      	str	r2, [sp, #12]
 800dc06:	3108      	adds	r1, #8
 800dc08:	910a      	str	r1, [sp, #40]	@ 0x28
 800dc0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc0c:	3108      	adds	r1, #8
 800dc0e:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc10:	9908      	ldr	r1, [sp, #32]
 800dc12:	3108      	adds	r1, #8
 800dc14:	9108      	str	r1, [sp, #32]
 800dc16:	9907      	ldr	r1, [sp, #28]
 800dc18:	3108      	adds	r1, #8
 800dc1a:	9107      	str	r1, [sp, #28]
 800dc1c:	9906      	ldr	r1, [sp, #24]
 800dc1e:	3108      	adds	r1, #8
 800dc20:	9106      	str	r1, [sp, #24]
 800dc22:	9905      	ldr	r1, [sp, #20]
 800dc24:	3108      	adds	r1, #8
 800dc26:	9105      	str	r1, [sp, #20]
 800dc28:	9904      	ldr	r1, [sp, #16]
 800dc2a:	3108      	adds	r1, #8
 800dc2c:	9104      	str	r1, [sp, #16]
 800dc2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dc30:	4291      	cmp	r1, r2
 800dc32:	f47f ae76 	bne.w	800d922 <arm_radix8_butterfly_f32+0x256>
 800dc36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc38:	468a      	mov	sl, r1
 800dc3a:	00db      	lsls	r3, r3, #3
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc40:	e553      	b.n	800d6ea <arm_radix8_butterfly_f32+0x1e>
 800dc42:	b013      	add	sp, #76	@ 0x4c
 800dc44:	ecbd 8b10 	vpop	{d8-d15}
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc4c <__cvt>:
 800dc4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc50:	ec57 6b10 	vmov	r6, r7, d0
 800dc54:	2f00      	cmp	r7, #0
 800dc56:	460c      	mov	r4, r1
 800dc58:	4619      	mov	r1, r3
 800dc5a:	463b      	mov	r3, r7
 800dc5c:	bfb4      	ite	lt
 800dc5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dc62:	2300      	movge	r3, #0
 800dc64:	4691      	mov	r9, r2
 800dc66:	bfbf      	itttt	lt
 800dc68:	4632      	movlt	r2, r6
 800dc6a:	461f      	movlt	r7, r3
 800dc6c:	232d      	movlt	r3, #45	@ 0x2d
 800dc6e:	4616      	movlt	r6, r2
 800dc70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dc74:	700b      	strb	r3, [r1, #0]
 800dc76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc78:	f023 0820 	bic.w	r8, r3, #32
 800dc7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc80:	d005      	beq.n	800dc8e <__cvt+0x42>
 800dc82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dc86:	d100      	bne.n	800dc8a <__cvt+0x3e>
 800dc88:	3401      	adds	r4, #1
 800dc8a:	2102      	movs	r1, #2
 800dc8c:	e000      	b.n	800dc90 <__cvt+0x44>
 800dc8e:	2103      	movs	r1, #3
 800dc90:	ab03      	add	r3, sp, #12
 800dc92:	4622      	mov	r2, r4
 800dc94:	9301      	str	r3, [sp, #4]
 800dc96:	ab02      	add	r3, sp, #8
 800dc98:	ec47 6b10 	vmov	d0, r6, r7
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	4653      	mov	r3, sl
 800dca0:	f001 f892 	bl	800edc8 <_dtoa_r>
 800dca4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dca8:	4605      	mov	r5, r0
 800dcaa:	d119      	bne.n	800dce0 <__cvt+0x94>
 800dcac:	f019 0f01 	tst.w	r9, #1
 800dcb0:	d00e      	beq.n	800dcd0 <__cvt+0x84>
 800dcb2:	eb00 0904 	add.w	r9, r0, r4
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	2300      	movs	r3, #0
 800dcba:	4630      	mov	r0, r6
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	f7f2 ff07 	bl	8000ad0 <__aeabi_dcmpeq>
 800dcc2:	b108      	cbz	r0, 800dcc8 <__cvt+0x7c>
 800dcc4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dcc8:	2230      	movs	r2, #48	@ 0x30
 800dcca:	9b03      	ldr	r3, [sp, #12]
 800dccc:	454b      	cmp	r3, r9
 800dcce:	d31e      	bcc.n	800dd0e <__cvt+0xc2>
 800dcd0:	9b03      	ldr	r3, [sp, #12]
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcd6:	1b5b      	subs	r3, r3, r5
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	b004      	add	sp, #16
 800dcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dce0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dce4:	eb00 0904 	add.w	r9, r0, r4
 800dce8:	d1e5      	bne.n	800dcb6 <__cvt+0x6a>
 800dcea:	7803      	ldrb	r3, [r0, #0]
 800dcec:	2b30      	cmp	r3, #48	@ 0x30
 800dcee:	d10a      	bne.n	800dd06 <__cvt+0xba>
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	4639      	mov	r1, r7
 800dcf8:	f7f2 feea 	bl	8000ad0 <__aeabi_dcmpeq>
 800dcfc:	b918      	cbnz	r0, 800dd06 <__cvt+0xba>
 800dcfe:	f1c4 0401 	rsb	r4, r4, #1
 800dd02:	f8ca 4000 	str.w	r4, [sl]
 800dd06:	f8da 3000 	ldr.w	r3, [sl]
 800dd0a:	4499      	add	r9, r3
 800dd0c:	e7d3      	b.n	800dcb6 <__cvt+0x6a>
 800dd0e:	1c59      	adds	r1, r3, #1
 800dd10:	9103      	str	r1, [sp, #12]
 800dd12:	701a      	strb	r2, [r3, #0]
 800dd14:	e7d9      	b.n	800dcca <__cvt+0x7e>

0800dd16 <__exponent>:
 800dd16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd18:	2900      	cmp	r1, #0
 800dd1a:	7002      	strb	r2, [r0, #0]
 800dd1c:	bfba      	itte	lt
 800dd1e:	4249      	neglt	r1, r1
 800dd20:	232d      	movlt	r3, #45	@ 0x2d
 800dd22:	232b      	movge	r3, #43	@ 0x2b
 800dd24:	2909      	cmp	r1, #9
 800dd26:	7043      	strb	r3, [r0, #1]
 800dd28:	dd28      	ble.n	800dd7c <__exponent+0x66>
 800dd2a:	f10d 0307 	add.w	r3, sp, #7
 800dd2e:	270a      	movs	r7, #10
 800dd30:	461d      	mov	r5, r3
 800dd32:	461a      	mov	r2, r3
 800dd34:	3b01      	subs	r3, #1
 800dd36:	fbb1 f6f7 	udiv	r6, r1, r7
 800dd3a:	fb07 1416 	mls	r4, r7, r6, r1
 800dd3e:	3430      	adds	r4, #48	@ 0x30
 800dd40:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dd44:	460c      	mov	r4, r1
 800dd46:	4631      	mov	r1, r6
 800dd48:	2c63      	cmp	r4, #99	@ 0x63
 800dd4a:	dcf2      	bgt.n	800dd32 <__exponent+0x1c>
 800dd4c:	3130      	adds	r1, #48	@ 0x30
 800dd4e:	1e94      	subs	r4, r2, #2
 800dd50:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dd54:	1c41      	adds	r1, r0, #1
 800dd56:	4623      	mov	r3, r4
 800dd58:	42ab      	cmp	r3, r5
 800dd5a:	d30a      	bcc.n	800dd72 <__exponent+0x5c>
 800dd5c:	f10d 0309 	add.w	r3, sp, #9
 800dd60:	1a9b      	subs	r3, r3, r2
 800dd62:	42ac      	cmp	r4, r5
 800dd64:	bf88      	it	hi
 800dd66:	2300      	movhi	r3, #0
 800dd68:	3302      	adds	r3, #2
 800dd6a:	4403      	add	r3, r0
 800dd6c:	1a18      	subs	r0, r3, r0
 800dd6e:	b003      	add	sp, #12
 800dd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd72:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dd76:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dd7a:	e7ed      	b.n	800dd58 <__exponent+0x42>
 800dd7c:	2330      	movs	r3, #48	@ 0x30
 800dd7e:	3130      	adds	r1, #48	@ 0x30
 800dd80:	7083      	strb	r3, [r0, #2]
 800dd82:	1d03      	adds	r3, r0, #4
 800dd84:	70c1      	strb	r1, [r0, #3]
 800dd86:	e7f1      	b.n	800dd6c <__exponent+0x56>

0800dd88 <_printf_float>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	b08d      	sub	sp, #52	@ 0x34
 800dd8e:	460c      	mov	r4, r1
 800dd90:	4616      	mov	r6, r2
 800dd92:	461f      	mov	r7, r3
 800dd94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dd98:	4605      	mov	r5, r0
 800dd9a:	f000 feed 	bl	800eb78 <_localeconv_r>
 800dd9e:	6803      	ldr	r3, [r0, #0]
 800dda0:	4618      	mov	r0, r3
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	f7f2 fa68 	bl	8000278 <strlen>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	9005      	str	r0, [sp, #20]
 800ddac:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddae:	f8d8 3000 	ldr.w	r3, [r8]
 800ddb2:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ddb6:	3307      	adds	r3, #7
 800ddb8:	f8d4 b000 	ldr.w	fp, [r4]
 800ddbc:	f023 0307 	bic.w	r3, r3, #7
 800ddc0:	f103 0208 	add.w	r2, r3, #8
 800ddc4:	f8c8 2000 	str.w	r2, [r8]
 800ddc8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ddd4:	f8cd 8018 	str.w	r8, [sp, #24]
 800ddd8:	9307      	str	r3, [sp, #28]
 800ddda:	4b9d      	ldr	r3, [pc, #628]	@ (800e050 <_printf_float+0x2c8>)
 800dddc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dde0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dde4:	f7f2 fea6 	bl	8000b34 <__aeabi_dcmpun>
 800dde8:	bb70      	cbnz	r0, 800de48 <_printf_float+0xc0>
 800ddea:	f04f 32ff 	mov.w	r2, #4294967295
 800ddee:	4b98      	ldr	r3, [pc, #608]	@ (800e050 <_printf_float+0x2c8>)
 800ddf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddf4:	f7f2 fe80 	bl	8000af8 <__aeabi_dcmple>
 800ddf8:	bb30      	cbnz	r0, 800de48 <_printf_float+0xc0>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4640      	mov	r0, r8
 800de00:	4649      	mov	r1, r9
 800de02:	f7f2 fe6f 	bl	8000ae4 <__aeabi_dcmplt>
 800de06:	b110      	cbz	r0, 800de0e <_printf_float+0x86>
 800de08:	232d      	movs	r3, #45	@ 0x2d
 800de0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de0e:	4a91      	ldr	r2, [pc, #580]	@ (800e054 <_printf_float+0x2cc>)
 800de10:	4b91      	ldr	r3, [pc, #580]	@ (800e058 <_printf_float+0x2d0>)
 800de12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800de16:	bf8c      	ite	hi
 800de18:	4690      	movhi	r8, r2
 800de1a:	4698      	movls	r8, r3
 800de1c:	2303      	movs	r3, #3
 800de1e:	f04f 0900 	mov.w	r9, #0
 800de22:	6123      	str	r3, [r4, #16]
 800de24:	f02b 0304 	bic.w	r3, fp, #4
 800de28:	6023      	str	r3, [r4, #0]
 800de2a:	4633      	mov	r3, r6
 800de2c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800de2e:	4621      	mov	r1, r4
 800de30:	4628      	mov	r0, r5
 800de32:	9700      	str	r7, [sp, #0]
 800de34:	f000 f9d2 	bl	800e1dc <_printf_common>
 800de38:	3001      	adds	r0, #1
 800de3a:	f040 808d 	bne.w	800df58 <_printf_float+0x1d0>
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	b00d      	add	sp, #52	@ 0x34
 800de44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de48:	4642      	mov	r2, r8
 800de4a:	464b      	mov	r3, r9
 800de4c:	4640      	mov	r0, r8
 800de4e:	4649      	mov	r1, r9
 800de50:	f7f2 fe70 	bl	8000b34 <__aeabi_dcmpun>
 800de54:	b140      	cbz	r0, 800de68 <_printf_float+0xe0>
 800de56:	464b      	mov	r3, r9
 800de58:	4a80      	ldr	r2, [pc, #512]	@ (800e05c <_printf_float+0x2d4>)
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	bfbc      	itt	lt
 800de5e:	232d      	movlt	r3, #45	@ 0x2d
 800de60:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800de64:	4b7e      	ldr	r3, [pc, #504]	@ (800e060 <_printf_float+0x2d8>)
 800de66:	e7d4      	b.n	800de12 <_printf_float+0x8a>
 800de68:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800de6c:	6863      	ldr	r3, [r4, #4]
 800de6e:	9206      	str	r2, [sp, #24]
 800de70:	1c5a      	adds	r2, r3, #1
 800de72:	d13b      	bne.n	800deec <_printf_float+0x164>
 800de74:	2306      	movs	r3, #6
 800de76:	6063      	str	r3, [r4, #4]
 800de78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800de7c:	2300      	movs	r3, #0
 800de7e:	4628      	mov	r0, r5
 800de80:	6022      	str	r2, [r4, #0]
 800de82:	9303      	str	r3, [sp, #12]
 800de84:	ab0a      	add	r3, sp, #40	@ 0x28
 800de86:	e9cd a301 	strd	sl, r3, [sp, #4]
 800de8a:	ab09      	add	r3, sp, #36	@ 0x24
 800de8c:	ec49 8b10 	vmov	d0, r8, r9
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800de96:	6861      	ldr	r1, [r4, #4]
 800de98:	f7ff fed8 	bl	800dc4c <__cvt>
 800de9c:	9b06      	ldr	r3, [sp, #24]
 800de9e:	4680      	mov	r8, r0
 800dea0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dea2:	2b47      	cmp	r3, #71	@ 0x47
 800dea4:	d129      	bne.n	800defa <_printf_float+0x172>
 800dea6:	1cc8      	adds	r0, r1, #3
 800dea8:	db02      	blt.n	800deb0 <_printf_float+0x128>
 800deaa:	6863      	ldr	r3, [r4, #4]
 800deac:	4299      	cmp	r1, r3
 800deae:	dd41      	ble.n	800df34 <_printf_float+0x1ac>
 800deb0:	f1aa 0a02 	sub.w	sl, sl, #2
 800deb4:	fa5f fa8a 	uxtb.w	sl, sl
 800deb8:	3901      	subs	r1, #1
 800deba:	4652      	mov	r2, sl
 800debc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dec0:	9109      	str	r1, [sp, #36]	@ 0x24
 800dec2:	f7ff ff28 	bl	800dd16 <__exponent>
 800dec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dec8:	4681      	mov	r9, r0
 800deca:	1813      	adds	r3, r2, r0
 800decc:	2a01      	cmp	r2, #1
 800dece:	6123      	str	r3, [r4, #16]
 800ded0:	dc02      	bgt.n	800ded8 <_printf_float+0x150>
 800ded2:	6822      	ldr	r2, [r4, #0]
 800ded4:	07d2      	lsls	r2, r2, #31
 800ded6:	d501      	bpl.n	800dedc <_printf_float+0x154>
 800ded8:	3301      	adds	r3, #1
 800deda:	6123      	str	r3, [r4, #16]
 800dedc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d0a2      	beq.n	800de2a <_printf_float+0xa2>
 800dee4:	232d      	movs	r3, #45	@ 0x2d
 800dee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800deea:	e79e      	b.n	800de2a <_printf_float+0xa2>
 800deec:	9a06      	ldr	r2, [sp, #24]
 800deee:	2a47      	cmp	r2, #71	@ 0x47
 800def0:	d1c2      	bne.n	800de78 <_printf_float+0xf0>
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1c0      	bne.n	800de78 <_printf_float+0xf0>
 800def6:	2301      	movs	r3, #1
 800def8:	e7bd      	b.n	800de76 <_printf_float+0xee>
 800defa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800defe:	d9db      	bls.n	800deb8 <_printf_float+0x130>
 800df00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800df04:	d118      	bne.n	800df38 <_printf_float+0x1b0>
 800df06:	2900      	cmp	r1, #0
 800df08:	6863      	ldr	r3, [r4, #4]
 800df0a:	dd0b      	ble.n	800df24 <_printf_float+0x19c>
 800df0c:	6121      	str	r1, [r4, #16]
 800df0e:	b913      	cbnz	r3, 800df16 <_printf_float+0x18e>
 800df10:	6822      	ldr	r2, [r4, #0]
 800df12:	07d0      	lsls	r0, r2, #31
 800df14:	d502      	bpl.n	800df1c <_printf_float+0x194>
 800df16:	3301      	adds	r3, #1
 800df18:	440b      	add	r3, r1
 800df1a:	6123      	str	r3, [r4, #16]
 800df1c:	f04f 0900 	mov.w	r9, #0
 800df20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800df22:	e7db      	b.n	800dedc <_printf_float+0x154>
 800df24:	b913      	cbnz	r3, 800df2c <_printf_float+0x1a4>
 800df26:	6822      	ldr	r2, [r4, #0]
 800df28:	07d2      	lsls	r2, r2, #31
 800df2a:	d501      	bpl.n	800df30 <_printf_float+0x1a8>
 800df2c:	3302      	adds	r3, #2
 800df2e:	e7f4      	b.n	800df1a <_printf_float+0x192>
 800df30:	2301      	movs	r3, #1
 800df32:	e7f2      	b.n	800df1a <_printf_float+0x192>
 800df34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800df38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df3a:	4299      	cmp	r1, r3
 800df3c:	db05      	blt.n	800df4a <_printf_float+0x1c2>
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	6121      	str	r1, [r4, #16]
 800df42:	07d8      	lsls	r0, r3, #31
 800df44:	d5ea      	bpl.n	800df1c <_printf_float+0x194>
 800df46:	1c4b      	adds	r3, r1, #1
 800df48:	e7e7      	b.n	800df1a <_printf_float+0x192>
 800df4a:	2900      	cmp	r1, #0
 800df4c:	bfd4      	ite	le
 800df4e:	f1c1 0202 	rsble	r2, r1, #2
 800df52:	2201      	movgt	r2, #1
 800df54:	4413      	add	r3, r2
 800df56:	e7e0      	b.n	800df1a <_printf_float+0x192>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	055a      	lsls	r2, r3, #21
 800df5c:	d407      	bmi.n	800df6e <_printf_float+0x1e6>
 800df5e:	6923      	ldr	r3, [r4, #16]
 800df60:	4642      	mov	r2, r8
 800df62:	4631      	mov	r1, r6
 800df64:	4628      	mov	r0, r5
 800df66:	47b8      	blx	r7
 800df68:	3001      	adds	r0, #1
 800df6a:	d12b      	bne.n	800dfc4 <_printf_float+0x23c>
 800df6c:	e767      	b.n	800de3e <_printf_float+0xb6>
 800df6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800df72:	f240 80dd 	bls.w	800e130 <_printf_float+0x3a8>
 800df76:	2200      	movs	r2, #0
 800df78:	2300      	movs	r3, #0
 800df7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800df7e:	f7f2 fda7 	bl	8000ad0 <__aeabi_dcmpeq>
 800df82:	2800      	cmp	r0, #0
 800df84:	d033      	beq.n	800dfee <_printf_float+0x266>
 800df86:	2301      	movs	r3, #1
 800df88:	4a36      	ldr	r2, [pc, #216]	@ (800e064 <_printf_float+0x2dc>)
 800df8a:	4631      	mov	r1, r6
 800df8c:	4628      	mov	r0, r5
 800df8e:	47b8      	blx	r7
 800df90:	3001      	adds	r0, #1
 800df92:	f43f af54 	beq.w	800de3e <_printf_float+0xb6>
 800df96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800df9a:	4543      	cmp	r3, r8
 800df9c:	db02      	blt.n	800dfa4 <_printf_float+0x21c>
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	07d8      	lsls	r0, r3, #31
 800dfa2:	d50f      	bpl.n	800dfc4 <_printf_float+0x23c>
 800dfa4:	4631      	mov	r1, r6
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfac:	47b8      	blx	r7
 800dfae:	3001      	adds	r0, #1
 800dfb0:	f43f af45 	beq.w	800de3e <_printf_float+0xb6>
 800dfb4:	f04f 0900 	mov.w	r9, #0
 800dfb8:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfbc:	f104 0a1a 	add.w	sl, r4, #26
 800dfc0:	45c8      	cmp	r8, r9
 800dfc2:	dc09      	bgt.n	800dfd8 <_printf_float+0x250>
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	079b      	lsls	r3, r3, #30
 800dfc8:	f100 8103 	bmi.w	800e1d2 <_printf_float+0x44a>
 800dfcc:	68e0      	ldr	r0, [r4, #12]
 800dfce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfd0:	4298      	cmp	r0, r3
 800dfd2:	bfb8      	it	lt
 800dfd4:	4618      	movlt	r0, r3
 800dfd6:	e734      	b.n	800de42 <_printf_float+0xba>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	4652      	mov	r2, sl
 800dfdc:	4631      	mov	r1, r6
 800dfde:	4628      	mov	r0, r5
 800dfe0:	47b8      	blx	r7
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	f43f af2b 	beq.w	800de3e <_printf_float+0xb6>
 800dfe8:	f109 0901 	add.w	r9, r9, #1
 800dfec:	e7e8      	b.n	800dfc0 <_printf_float+0x238>
 800dfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dc39      	bgt.n	800e068 <_printf_float+0x2e0>
 800dff4:	2301      	movs	r3, #1
 800dff6:	4a1b      	ldr	r2, [pc, #108]	@ (800e064 <_printf_float+0x2dc>)
 800dff8:	4631      	mov	r1, r6
 800dffa:	4628      	mov	r0, r5
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	f43f af1d 	beq.w	800de3e <_printf_float+0xb6>
 800e004:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e008:	ea59 0303 	orrs.w	r3, r9, r3
 800e00c:	d102      	bne.n	800e014 <_printf_float+0x28c>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	07d9      	lsls	r1, r3, #31
 800e012:	d5d7      	bpl.n	800dfc4 <_printf_float+0x23c>
 800e014:	4631      	mov	r1, r6
 800e016:	4628      	mov	r0, r5
 800e018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e01c:	47b8      	blx	r7
 800e01e:	3001      	adds	r0, #1
 800e020:	f43f af0d 	beq.w	800de3e <_printf_float+0xb6>
 800e024:	f04f 0a00 	mov.w	sl, #0
 800e028:	f104 0b1a 	add.w	fp, r4, #26
 800e02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e02e:	425b      	negs	r3, r3
 800e030:	4553      	cmp	r3, sl
 800e032:	dc01      	bgt.n	800e038 <_printf_float+0x2b0>
 800e034:	464b      	mov	r3, r9
 800e036:	e793      	b.n	800df60 <_printf_float+0x1d8>
 800e038:	2301      	movs	r3, #1
 800e03a:	465a      	mov	r2, fp
 800e03c:	4631      	mov	r1, r6
 800e03e:	4628      	mov	r0, r5
 800e040:	47b8      	blx	r7
 800e042:	3001      	adds	r0, #1
 800e044:	f43f aefb 	beq.w	800de3e <_printf_float+0xb6>
 800e048:	f10a 0a01 	add.w	sl, sl, #1
 800e04c:	e7ee      	b.n	800e02c <_printf_float+0x2a4>
 800e04e:	bf00      	nop
 800e050:	7fefffff 	.word	0x7fefffff
 800e054:	0802fc30 	.word	0x0802fc30
 800e058:	0802fc2c 	.word	0x0802fc2c
 800e05c:	0802fc38 	.word	0x0802fc38
 800e060:	0802fc34 	.word	0x0802fc34
 800e064:	0802fc3c 	.word	0x0802fc3c
 800e068:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e06a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e06e:	4553      	cmp	r3, sl
 800e070:	bfa8      	it	ge
 800e072:	4653      	movge	r3, sl
 800e074:	2b00      	cmp	r3, #0
 800e076:	4699      	mov	r9, r3
 800e078:	dc36      	bgt.n	800e0e8 <_printf_float+0x360>
 800e07a:	f04f 0b00 	mov.w	fp, #0
 800e07e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e082:	f104 021a 	add.w	r2, r4, #26
 800e086:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e088:	9306      	str	r3, [sp, #24]
 800e08a:	eba3 0309 	sub.w	r3, r3, r9
 800e08e:	455b      	cmp	r3, fp
 800e090:	dc31      	bgt.n	800e0f6 <_printf_float+0x36e>
 800e092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e094:	459a      	cmp	sl, r3
 800e096:	dc3a      	bgt.n	800e10e <_printf_float+0x386>
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	07da      	lsls	r2, r3, #31
 800e09c:	d437      	bmi.n	800e10e <_printf_float+0x386>
 800e09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a0:	ebaa 0903 	sub.w	r9, sl, r3
 800e0a4:	9b06      	ldr	r3, [sp, #24]
 800e0a6:	ebaa 0303 	sub.w	r3, sl, r3
 800e0aa:	4599      	cmp	r9, r3
 800e0ac:	bfa8      	it	ge
 800e0ae:	4699      	movge	r9, r3
 800e0b0:	f1b9 0f00 	cmp.w	r9, #0
 800e0b4:	dc33      	bgt.n	800e11e <_printf_float+0x396>
 800e0b6:	f04f 0800 	mov.w	r8, #0
 800e0ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0be:	f104 0b1a 	add.w	fp, r4, #26
 800e0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0c4:	ebaa 0303 	sub.w	r3, sl, r3
 800e0c8:	eba3 0309 	sub.w	r3, r3, r9
 800e0cc:	4543      	cmp	r3, r8
 800e0ce:	f77f af79 	ble.w	800dfc4 <_printf_float+0x23c>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	465a      	mov	r2, fp
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4628      	mov	r0, r5
 800e0da:	47b8      	blx	r7
 800e0dc:	3001      	adds	r0, #1
 800e0de:	f43f aeae 	beq.w	800de3e <_printf_float+0xb6>
 800e0e2:	f108 0801 	add.w	r8, r8, #1
 800e0e6:	e7ec      	b.n	800e0c2 <_printf_float+0x33a>
 800e0e8:	4642      	mov	r2, r8
 800e0ea:	4631      	mov	r1, r6
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	47b8      	blx	r7
 800e0f0:	3001      	adds	r0, #1
 800e0f2:	d1c2      	bne.n	800e07a <_printf_float+0x2f2>
 800e0f4:	e6a3      	b.n	800de3e <_printf_float+0xb6>
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	4631      	mov	r1, r6
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	9206      	str	r2, [sp, #24]
 800e0fe:	47b8      	blx	r7
 800e100:	3001      	adds	r0, #1
 800e102:	f43f ae9c 	beq.w	800de3e <_printf_float+0xb6>
 800e106:	f10b 0b01 	add.w	fp, fp, #1
 800e10a:	9a06      	ldr	r2, [sp, #24]
 800e10c:	e7bb      	b.n	800e086 <_printf_float+0x2fe>
 800e10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e112:	4631      	mov	r1, r6
 800e114:	4628      	mov	r0, r5
 800e116:	47b8      	blx	r7
 800e118:	3001      	adds	r0, #1
 800e11a:	d1c0      	bne.n	800e09e <_printf_float+0x316>
 800e11c:	e68f      	b.n	800de3e <_printf_float+0xb6>
 800e11e:	9a06      	ldr	r2, [sp, #24]
 800e120:	464b      	mov	r3, r9
 800e122:	4631      	mov	r1, r6
 800e124:	4628      	mov	r0, r5
 800e126:	4442      	add	r2, r8
 800e128:	47b8      	blx	r7
 800e12a:	3001      	adds	r0, #1
 800e12c:	d1c3      	bne.n	800e0b6 <_printf_float+0x32e>
 800e12e:	e686      	b.n	800de3e <_printf_float+0xb6>
 800e130:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e134:	f1ba 0f01 	cmp.w	sl, #1
 800e138:	dc01      	bgt.n	800e13e <_printf_float+0x3b6>
 800e13a:	07db      	lsls	r3, r3, #31
 800e13c:	d536      	bpl.n	800e1ac <_printf_float+0x424>
 800e13e:	2301      	movs	r3, #1
 800e140:	4642      	mov	r2, r8
 800e142:	4631      	mov	r1, r6
 800e144:	4628      	mov	r0, r5
 800e146:	47b8      	blx	r7
 800e148:	3001      	adds	r0, #1
 800e14a:	f43f ae78 	beq.w	800de3e <_printf_float+0xb6>
 800e14e:	4631      	mov	r1, r6
 800e150:	4628      	mov	r0, r5
 800e152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e156:	47b8      	blx	r7
 800e158:	3001      	adds	r0, #1
 800e15a:	f43f ae70 	beq.w	800de3e <_printf_float+0xb6>
 800e15e:	2200      	movs	r2, #0
 800e160:	2300      	movs	r3, #0
 800e162:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e166:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e16a:	f7f2 fcb1 	bl	8000ad0 <__aeabi_dcmpeq>
 800e16e:	b9c0      	cbnz	r0, 800e1a2 <_printf_float+0x41a>
 800e170:	4653      	mov	r3, sl
 800e172:	f108 0201 	add.w	r2, r8, #1
 800e176:	4631      	mov	r1, r6
 800e178:	4628      	mov	r0, r5
 800e17a:	47b8      	blx	r7
 800e17c:	3001      	adds	r0, #1
 800e17e:	d10c      	bne.n	800e19a <_printf_float+0x412>
 800e180:	e65d      	b.n	800de3e <_printf_float+0xb6>
 800e182:	2301      	movs	r3, #1
 800e184:	465a      	mov	r2, fp
 800e186:	4631      	mov	r1, r6
 800e188:	4628      	mov	r0, r5
 800e18a:	47b8      	blx	r7
 800e18c:	3001      	adds	r0, #1
 800e18e:	f43f ae56 	beq.w	800de3e <_printf_float+0xb6>
 800e192:	f108 0801 	add.w	r8, r8, #1
 800e196:	45d0      	cmp	r8, sl
 800e198:	dbf3      	blt.n	800e182 <_printf_float+0x3fa>
 800e19a:	464b      	mov	r3, r9
 800e19c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e1a0:	e6df      	b.n	800df62 <_printf_float+0x1da>
 800e1a2:	f04f 0800 	mov.w	r8, #0
 800e1a6:	f104 0b1a 	add.w	fp, r4, #26
 800e1aa:	e7f4      	b.n	800e196 <_printf_float+0x40e>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	4642      	mov	r2, r8
 800e1b0:	e7e1      	b.n	800e176 <_printf_float+0x3ee>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	464a      	mov	r2, r9
 800e1b6:	4631      	mov	r1, r6
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	47b8      	blx	r7
 800e1bc:	3001      	adds	r0, #1
 800e1be:	f43f ae3e 	beq.w	800de3e <_printf_float+0xb6>
 800e1c2:	f108 0801 	add.w	r8, r8, #1
 800e1c6:	68e3      	ldr	r3, [r4, #12]
 800e1c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e1ca:	1a5b      	subs	r3, r3, r1
 800e1cc:	4543      	cmp	r3, r8
 800e1ce:	dcf0      	bgt.n	800e1b2 <_printf_float+0x42a>
 800e1d0:	e6fc      	b.n	800dfcc <_printf_float+0x244>
 800e1d2:	f04f 0800 	mov.w	r8, #0
 800e1d6:	f104 0919 	add.w	r9, r4, #25
 800e1da:	e7f4      	b.n	800e1c6 <_printf_float+0x43e>

0800e1dc <_printf_common>:
 800e1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e0:	4616      	mov	r6, r2
 800e1e2:	4698      	mov	r8, r3
 800e1e4:	688a      	ldr	r2, [r1, #8]
 800e1e6:	4607      	mov	r7, r0
 800e1e8:	690b      	ldr	r3, [r1, #16]
 800e1ea:	460c      	mov	r4, r1
 800e1ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	bfb8      	it	lt
 800e1f4:	4613      	movlt	r3, r2
 800e1f6:	6033      	str	r3, [r6, #0]
 800e1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1fc:	b10a      	cbz	r2, 800e202 <_printf_common+0x26>
 800e1fe:	3301      	adds	r3, #1
 800e200:	6033      	str	r3, [r6, #0]
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	0699      	lsls	r1, r3, #26
 800e206:	bf42      	ittt	mi
 800e208:	6833      	ldrmi	r3, [r6, #0]
 800e20a:	3302      	addmi	r3, #2
 800e20c:	6033      	strmi	r3, [r6, #0]
 800e20e:	6825      	ldr	r5, [r4, #0]
 800e210:	f015 0506 	ands.w	r5, r5, #6
 800e214:	d106      	bne.n	800e224 <_printf_common+0x48>
 800e216:	f104 0a19 	add.w	sl, r4, #25
 800e21a:	68e3      	ldr	r3, [r4, #12]
 800e21c:	6832      	ldr	r2, [r6, #0]
 800e21e:	1a9b      	subs	r3, r3, r2
 800e220:	42ab      	cmp	r3, r5
 800e222:	dc2b      	bgt.n	800e27c <_printf_common+0xa0>
 800e224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e228:	6822      	ldr	r2, [r4, #0]
 800e22a:	3b00      	subs	r3, #0
 800e22c:	bf18      	it	ne
 800e22e:	2301      	movne	r3, #1
 800e230:	0692      	lsls	r2, r2, #26
 800e232:	d430      	bmi.n	800e296 <_printf_common+0xba>
 800e234:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e238:	4641      	mov	r1, r8
 800e23a:	4638      	mov	r0, r7
 800e23c:	47c8      	blx	r9
 800e23e:	3001      	adds	r0, #1
 800e240:	d023      	beq.n	800e28a <_printf_common+0xae>
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	341a      	adds	r4, #26
 800e246:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e24a:	f003 0306 	and.w	r3, r3, #6
 800e24e:	2b04      	cmp	r3, #4
 800e250:	bf0a      	itet	eq
 800e252:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e256:	2500      	movne	r5, #0
 800e258:	6833      	ldreq	r3, [r6, #0]
 800e25a:	f04f 0600 	mov.w	r6, #0
 800e25e:	bf08      	it	eq
 800e260:	1aed      	subeq	r5, r5, r3
 800e262:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e266:	bf08      	it	eq
 800e268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e26c:	4293      	cmp	r3, r2
 800e26e:	bfc4      	itt	gt
 800e270:	1a9b      	subgt	r3, r3, r2
 800e272:	18ed      	addgt	r5, r5, r3
 800e274:	42b5      	cmp	r5, r6
 800e276:	d11a      	bne.n	800e2ae <_printf_common+0xd2>
 800e278:	2000      	movs	r0, #0
 800e27a:	e008      	b.n	800e28e <_printf_common+0xb2>
 800e27c:	2301      	movs	r3, #1
 800e27e:	4652      	mov	r2, sl
 800e280:	4641      	mov	r1, r8
 800e282:	4638      	mov	r0, r7
 800e284:	47c8      	blx	r9
 800e286:	3001      	adds	r0, #1
 800e288:	d103      	bne.n	800e292 <_printf_common+0xb6>
 800e28a:	f04f 30ff 	mov.w	r0, #4294967295
 800e28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e292:	3501      	adds	r5, #1
 800e294:	e7c1      	b.n	800e21a <_printf_common+0x3e>
 800e296:	18e1      	adds	r1, r4, r3
 800e298:	1c5a      	adds	r2, r3, #1
 800e29a:	2030      	movs	r0, #48	@ 0x30
 800e29c:	3302      	adds	r3, #2
 800e29e:	4422      	add	r2, r4
 800e2a0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e2a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e2a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e2ac:	e7c2      	b.n	800e234 <_printf_common+0x58>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	4622      	mov	r2, r4
 800e2b2:	4641      	mov	r1, r8
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	47c8      	blx	r9
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	d0e6      	beq.n	800e28a <_printf_common+0xae>
 800e2bc:	3601      	adds	r6, #1
 800e2be:	e7d9      	b.n	800e274 <_printf_common+0x98>

0800e2c0 <_printf_i>:
 800e2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c4:	7e0f      	ldrb	r7, [r1, #24]
 800e2c6:	4691      	mov	r9, r2
 800e2c8:	4680      	mov	r8, r0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	2f78      	cmp	r7, #120	@ 0x78
 800e2ce:	469a      	mov	sl, r3
 800e2d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2d6:	d807      	bhi.n	800e2e8 <_printf_i+0x28>
 800e2d8:	2f62      	cmp	r7, #98	@ 0x62
 800e2da:	d80a      	bhi.n	800e2f2 <_printf_i+0x32>
 800e2dc:	2f00      	cmp	r7, #0
 800e2de:	f000 80d1 	beq.w	800e484 <_printf_i+0x1c4>
 800e2e2:	2f58      	cmp	r7, #88	@ 0x58
 800e2e4:	f000 80b8 	beq.w	800e458 <_printf_i+0x198>
 800e2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2f0:	e03a      	b.n	800e368 <_printf_i+0xa8>
 800e2f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2f6:	2b15      	cmp	r3, #21
 800e2f8:	d8f6      	bhi.n	800e2e8 <_printf_i+0x28>
 800e2fa:	a101      	add	r1, pc, #4	@ (adr r1, 800e300 <_printf_i+0x40>)
 800e2fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e300:	0800e359 	.word	0x0800e359
 800e304:	0800e36d 	.word	0x0800e36d
 800e308:	0800e2e9 	.word	0x0800e2e9
 800e30c:	0800e2e9 	.word	0x0800e2e9
 800e310:	0800e2e9 	.word	0x0800e2e9
 800e314:	0800e2e9 	.word	0x0800e2e9
 800e318:	0800e36d 	.word	0x0800e36d
 800e31c:	0800e2e9 	.word	0x0800e2e9
 800e320:	0800e2e9 	.word	0x0800e2e9
 800e324:	0800e2e9 	.word	0x0800e2e9
 800e328:	0800e2e9 	.word	0x0800e2e9
 800e32c:	0800e46b 	.word	0x0800e46b
 800e330:	0800e397 	.word	0x0800e397
 800e334:	0800e425 	.word	0x0800e425
 800e338:	0800e2e9 	.word	0x0800e2e9
 800e33c:	0800e2e9 	.word	0x0800e2e9
 800e340:	0800e48d 	.word	0x0800e48d
 800e344:	0800e2e9 	.word	0x0800e2e9
 800e348:	0800e397 	.word	0x0800e397
 800e34c:	0800e2e9 	.word	0x0800e2e9
 800e350:	0800e2e9 	.word	0x0800e2e9
 800e354:	0800e42d 	.word	0x0800e42d
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	1d1a      	adds	r2, r3, #4
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	6032      	str	r2, [r6, #0]
 800e360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e368:	2301      	movs	r3, #1
 800e36a:	e09c      	b.n	800e4a6 <_printf_i+0x1e6>
 800e36c:	6833      	ldr	r3, [r6, #0]
 800e36e:	6820      	ldr	r0, [r4, #0]
 800e370:	1d19      	adds	r1, r3, #4
 800e372:	6031      	str	r1, [r6, #0]
 800e374:	0606      	lsls	r6, r0, #24
 800e376:	d501      	bpl.n	800e37c <_printf_i+0xbc>
 800e378:	681d      	ldr	r5, [r3, #0]
 800e37a:	e003      	b.n	800e384 <_printf_i+0xc4>
 800e37c:	0645      	lsls	r5, r0, #25
 800e37e:	d5fb      	bpl.n	800e378 <_printf_i+0xb8>
 800e380:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e384:	2d00      	cmp	r5, #0
 800e386:	da03      	bge.n	800e390 <_printf_i+0xd0>
 800e388:	232d      	movs	r3, #45	@ 0x2d
 800e38a:	426d      	negs	r5, r5
 800e38c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e390:	4858      	ldr	r0, [pc, #352]	@ (800e4f4 <_printf_i+0x234>)
 800e392:	230a      	movs	r3, #10
 800e394:	e011      	b.n	800e3ba <_printf_i+0xfa>
 800e396:	6821      	ldr	r1, [r4, #0]
 800e398:	6833      	ldr	r3, [r6, #0]
 800e39a:	0608      	lsls	r0, r1, #24
 800e39c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e3a0:	d402      	bmi.n	800e3a8 <_printf_i+0xe8>
 800e3a2:	0649      	lsls	r1, r1, #25
 800e3a4:	bf48      	it	mi
 800e3a6:	b2ad      	uxthmi	r5, r5
 800e3a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e3aa:	6033      	str	r3, [r6, #0]
 800e3ac:	4851      	ldr	r0, [pc, #324]	@ (800e4f4 <_printf_i+0x234>)
 800e3ae:	bf14      	ite	ne
 800e3b0:	230a      	movne	r3, #10
 800e3b2:	2308      	moveq	r3, #8
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e3ba:	6866      	ldr	r6, [r4, #4]
 800e3bc:	2e00      	cmp	r6, #0
 800e3be:	60a6      	str	r6, [r4, #8]
 800e3c0:	db05      	blt.n	800e3ce <_printf_i+0x10e>
 800e3c2:	6821      	ldr	r1, [r4, #0]
 800e3c4:	432e      	orrs	r6, r5
 800e3c6:	f021 0104 	bic.w	r1, r1, #4
 800e3ca:	6021      	str	r1, [r4, #0]
 800e3cc:	d04b      	beq.n	800e466 <_printf_i+0x1a6>
 800e3ce:	4616      	mov	r6, r2
 800e3d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3d4:	fb03 5711 	mls	r7, r3, r1, r5
 800e3d8:	5dc7      	ldrb	r7, [r0, r7]
 800e3da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3de:	462f      	mov	r7, r5
 800e3e0:	460d      	mov	r5, r1
 800e3e2:	42bb      	cmp	r3, r7
 800e3e4:	d9f4      	bls.n	800e3d0 <_printf_i+0x110>
 800e3e6:	2b08      	cmp	r3, #8
 800e3e8:	d10b      	bne.n	800e402 <_printf_i+0x142>
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	07df      	lsls	r7, r3, #31
 800e3ee:	d508      	bpl.n	800e402 <_printf_i+0x142>
 800e3f0:	6923      	ldr	r3, [r4, #16]
 800e3f2:	6861      	ldr	r1, [r4, #4]
 800e3f4:	4299      	cmp	r1, r3
 800e3f6:	bfde      	ittt	le
 800e3f8:	2330      	movle	r3, #48	@ 0x30
 800e3fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e402:	1b92      	subs	r2, r2, r6
 800e404:	6122      	str	r2, [r4, #16]
 800e406:	464b      	mov	r3, r9
 800e408:	aa03      	add	r2, sp, #12
 800e40a:	4621      	mov	r1, r4
 800e40c:	4640      	mov	r0, r8
 800e40e:	f8cd a000 	str.w	sl, [sp]
 800e412:	f7ff fee3 	bl	800e1dc <_printf_common>
 800e416:	3001      	adds	r0, #1
 800e418:	d14a      	bne.n	800e4b0 <_printf_i+0x1f0>
 800e41a:	f04f 30ff 	mov.w	r0, #4294967295
 800e41e:	b004      	add	sp, #16
 800e420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	f043 0320 	orr.w	r3, r3, #32
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	2778      	movs	r7, #120	@ 0x78
 800e42e:	4832      	ldr	r0, [pc, #200]	@ (800e4f8 <_printf_i+0x238>)
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e436:	061f      	lsls	r7, r3, #24
 800e438:	6831      	ldr	r1, [r6, #0]
 800e43a:	f851 5b04 	ldr.w	r5, [r1], #4
 800e43e:	d402      	bmi.n	800e446 <_printf_i+0x186>
 800e440:	065f      	lsls	r7, r3, #25
 800e442:	bf48      	it	mi
 800e444:	b2ad      	uxthmi	r5, r5
 800e446:	6031      	str	r1, [r6, #0]
 800e448:	07d9      	lsls	r1, r3, #31
 800e44a:	bf44      	itt	mi
 800e44c:	f043 0320 	orrmi.w	r3, r3, #32
 800e450:	6023      	strmi	r3, [r4, #0]
 800e452:	b11d      	cbz	r5, 800e45c <_printf_i+0x19c>
 800e454:	2310      	movs	r3, #16
 800e456:	e7ad      	b.n	800e3b4 <_printf_i+0xf4>
 800e458:	4826      	ldr	r0, [pc, #152]	@ (800e4f4 <_printf_i+0x234>)
 800e45a:	e7e9      	b.n	800e430 <_printf_i+0x170>
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	f023 0320 	bic.w	r3, r3, #32
 800e462:	6023      	str	r3, [r4, #0]
 800e464:	e7f6      	b.n	800e454 <_printf_i+0x194>
 800e466:	4616      	mov	r6, r2
 800e468:	e7bd      	b.n	800e3e6 <_printf_i+0x126>
 800e46a:	6833      	ldr	r3, [r6, #0]
 800e46c:	6825      	ldr	r5, [r4, #0]
 800e46e:	1d18      	adds	r0, r3, #4
 800e470:	6961      	ldr	r1, [r4, #20]
 800e472:	6030      	str	r0, [r6, #0]
 800e474:	062e      	lsls	r6, r5, #24
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	d501      	bpl.n	800e47e <_printf_i+0x1be>
 800e47a:	6019      	str	r1, [r3, #0]
 800e47c:	e002      	b.n	800e484 <_printf_i+0x1c4>
 800e47e:	0668      	lsls	r0, r5, #25
 800e480:	d5fb      	bpl.n	800e47a <_printf_i+0x1ba>
 800e482:	8019      	strh	r1, [r3, #0]
 800e484:	2300      	movs	r3, #0
 800e486:	4616      	mov	r6, r2
 800e488:	6123      	str	r3, [r4, #16]
 800e48a:	e7bc      	b.n	800e406 <_printf_i+0x146>
 800e48c:	6833      	ldr	r3, [r6, #0]
 800e48e:	2100      	movs	r1, #0
 800e490:	1d1a      	adds	r2, r3, #4
 800e492:	6032      	str	r2, [r6, #0]
 800e494:	681e      	ldr	r6, [r3, #0]
 800e496:	6862      	ldr	r2, [r4, #4]
 800e498:	4630      	mov	r0, r6
 800e49a:	f000 fbe4 	bl	800ec66 <memchr>
 800e49e:	b108      	cbz	r0, 800e4a4 <_printf_i+0x1e4>
 800e4a0:	1b80      	subs	r0, r0, r6
 800e4a2:	6060      	str	r0, [r4, #4]
 800e4a4:	6863      	ldr	r3, [r4, #4]
 800e4a6:	6123      	str	r3, [r4, #16]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4ae:	e7aa      	b.n	800e406 <_printf_i+0x146>
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	4632      	mov	r2, r6
 800e4b4:	4649      	mov	r1, r9
 800e4b6:	4640      	mov	r0, r8
 800e4b8:	47d0      	blx	sl
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	d0ad      	beq.n	800e41a <_printf_i+0x15a>
 800e4be:	6823      	ldr	r3, [r4, #0]
 800e4c0:	079b      	lsls	r3, r3, #30
 800e4c2:	d413      	bmi.n	800e4ec <_printf_i+0x22c>
 800e4c4:	68e0      	ldr	r0, [r4, #12]
 800e4c6:	9b03      	ldr	r3, [sp, #12]
 800e4c8:	4298      	cmp	r0, r3
 800e4ca:	bfb8      	it	lt
 800e4cc:	4618      	movlt	r0, r3
 800e4ce:	e7a6      	b.n	800e41e <_printf_i+0x15e>
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	4632      	mov	r2, r6
 800e4d4:	4649      	mov	r1, r9
 800e4d6:	4640      	mov	r0, r8
 800e4d8:	47d0      	blx	sl
 800e4da:	3001      	adds	r0, #1
 800e4dc:	d09d      	beq.n	800e41a <_printf_i+0x15a>
 800e4de:	3501      	adds	r5, #1
 800e4e0:	68e3      	ldr	r3, [r4, #12]
 800e4e2:	9903      	ldr	r1, [sp, #12]
 800e4e4:	1a5b      	subs	r3, r3, r1
 800e4e6:	42ab      	cmp	r3, r5
 800e4e8:	dcf2      	bgt.n	800e4d0 <_printf_i+0x210>
 800e4ea:	e7eb      	b.n	800e4c4 <_printf_i+0x204>
 800e4ec:	2500      	movs	r5, #0
 800e4ee:	f104 0619 	add.w	r6, r4, #25
 800e4f2:	e7f5      	b.n	800e4e0 <_printf_i+0x220>
 800e4f4:	0802fc3e 	.word	0x0802fc3e
 800e4f8:	0802fc4f 	.word	0x0802fc4f

0800e4fc <_scanf_float>:
 800e4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e500:	b087      	sub	sp, #28
 800e502:	4691      	mov	r9, r2
 800e504:	4680      	mov	r8, r0
 800e506:	460c      	mov	r4, r1
 800e508:	9303      	str	r3, [sp, #12]
 800e50a:	688b      	ldr	r3, [r1, #8]
 800e50c:	1e5a      	subs	r2, r3, #1
 800e50e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e512:	460a      	mov	r2, r1
 800e514:	bf89      	itett	hi
 800e516:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e51a:	f04f 0b00 	movls.w	fp, #0
 800e51e:	eb03 0b05 	addhi.w	fp, r3, r5
 800e522:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e526:	f04f 0500 	mov.w	r5, #0
 800e52a:	bf88      	it	hi
 800e52c:	608b      	strhi	r3, [r1, #8]
 800e52e:	680b      	ldr	r3, [r1, #0]
 800e530:	46aa      	mov	sl, r5
 800e532:	462f      	mov	r7, r5
 800e534:	9502      	str	r5, [sp, #8]
 800e536:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e53a:	f842 3b1c 	str.w	r3, [r2], #28
 800e53e:	4616      	mov	r6, r2
 800e540:	9201      	str	r2, [sp, #4]
 800e542:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e546:	68a2      	ldr	r2, [r4, #8]
 800e548:	b15a      	cbz	r2, 800e562 <_scanf_float+0x66>
 800e54a:	f8d9 3000 	ldr.w	r3, [r9]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b4e      	cmp	r3, #78	@ 0x4e
 800e552:	d863      	bhi.n	800e61c <_scanf_float+0x120>
 800e554:	2b40      	cmp	r3, #64	@ 0x40
 800e556:	d83b      	bhi.n	800e5d0 <_scanf_float+0xd4>
 800e558:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e55c:	b2c8      	uxtb	r0, r1
 800e55e:	280e      	cmp	r0, #14
 800e560:	d939      	bls.n	800e5d6 <_scanf_float+0xda>
 800e562:	b11f      	cbz	r7, 800e56c <_scanf_float+0x70>
 800e564:	6823      	ldr	r3, [r4, #0]
 800e566:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e56a:	6023      	str	r3, [r4, #0]
 800e56c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e570:	f1ba 0f01 	cmp.w	sl, #1
 800e574:	f200 8115 	bhi.w	800e7a2 <_scanf_float+0x2a6>
 800e578:	9b01      	ldr	r3, [sp, #4]
 800e57a:	429e      	cmp	r6, r3
 800e57c:	f200 8106 	bhi.w	800e78c <_scanf_float+0x290>
 800e580:	2001      	movs	r0, #1
 800e582:	b007      	add	sp, #28
 800e584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e588:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e58c:	2a0d      	cmp	r2, #13
 800e58e:	d8e8      	bhi.n	800e562 <_scanf_float+0x66>
 800e590:	a101      	add	r1, pc, #4	@ (adr r1, 800e598 <_scanf_float+0x9c>)
 800e592:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e596:	bf00      	nop
 800e598:	0800e6e1 	.word	0x0800e6e1
 800e59c:	0800e563 	.word	0x0800e563
 800e5a0:	0800e563 	.word	0x0800e563
 800e5a4:	0800e563 	.word	0x0800e563
 800e5a8:	0800e73d 	.word	0x0800e73d
 800e5ac:	0800e717 	.word	0x0800e717
 800e5b0:	0800e563 	.word	0x0800e563
 800e5b4:	0800e563 	.word	0x0800e563
 800e5b8:	0800e6ef 	.word	0x0800e6ef
 800e5bc:	0800e563 	.word	0x0800e563
 800e5c0:	0800e563 	.word	0x0800e563
 800e5c4:	0800e563 	.word	0x0800e563
 800e5c8:	0800e563 	.word	0x0800e563
 800e5cc:	0800e6ab 	.word	0x0800e6ab
 800e5d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e5d4:	e7da      	b.n	800e58c <_scanf_float+0x90>
 800e5d6:	290e      	cmp	r1, #14
 800e5d8:	d8c3      	bhi.n	800e562 <_scanf_float+0x66>
 800e5da:	a001      	add	r0, pc, #4	@ (adr r0, 800e5e0 <_scanf_float+0xe4>)
 800e5dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e5e0:	0800e69b 	.word	0x0800e69b
 800e5e4:	0800e563 	.word	0x0800e563
 800e5e8:	0800e69b 	.word	0x0800e69b
 800e5ec:	0800e72b 	.word	0x0800e72b
 800e5f0:	0800e563 	.word	0x0800e563
 800e5f4:	0800e63d 	.word	0x0800e63d
 800e5f8:	0800e681 	.word	0x0800e681
 800e5fc:	0800e681 	.word	0x0800e681
 800e600:	0800e681 	.word	0x0800e681
 800e604:	0800e681 	.word	0x0800e681
 800e608:	0800e681 	.word	0x0800e681
 800e60c:	0800e681 	.word	0x0800e681
 800e610:	0800e681 	.word	0x0800e681
 800e614:	0800e681 	.word	0x0800e681
 800e618:	0800e681 	.word	0x0800e681
 800e61c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e61e:	d809      	bhi.n	800e634 <_scanf_float+0x138>
 800e620:	2b60      	cmp	r3, #96	@ 0x60
 800e622:	d8b1      	bhi.n	800e588 <_scanf_float+0x8c>
 800e624:	2b54      	cmp	r3, #84	@ 0x54
 800e626:	d07b      	beq.n	800e720 <_scanf_float+0x224>
 800e628:	2b59      	cmp	r3, #89	@ 0x59
 800e62a:	d19a      	bne.n	800e562 <_scanf_float+0x66>
 800e62c:	2d07      	cmp	r5, #7
 800e62e:	d198      	bne.n	800e562 <_scanf_float+0x66>
 800e630:	2508      	movs	r5, #8
 800e632:	e02f      	b.n	800e694 <_scanf_float+0x198>
 800e634:	2b74      	cmp	r3, #116	@ 0x74
 800e636:	d073      	beq.n	800e720 <_scanf_float+0x224>
 800e638:	2b79      	cmp	r3, #121	@ 0x79
 800e63a:	e7f6      	b.n	800e62a <_scanf_float+0x12e>
 800e63c:	6821      	ldr	r1, [r4, #0]
 800e63e:	05c8      	lsls	r0, r1, #23
 800e640:	d51e      	bpl.n	800e680 <_scanf_float+0x184>
 800e642:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e646:	3701      	adds	r7, #1
 800e648:	6021      	str	r1, [r4, #0]
 800e64a:	f1bb 0f00 	cmp.w	fp, #0
 800e64e:	d003      	beq.n	800e658 <_scanf_float+0x15c>
 800e650:	3201      	adds	r2, #1
 800e652:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e656:	60a2      	str	r2, [r4, #8]
 800e658:	68a3      	ldr	r3, [r4, #8]
 800e65a:	3b01      	subs	r3, #1
 800e65c:	60a3      	str	r3, [r4, #8]
 800e65e:	6923      	ldr	r3, [r4, #16]
 800e660:	3301      	adds	r3, #1
 800e662:	6123      	str	r3, [r4, #16]
 800e664:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e668:	3b01      	subs	r3, #1
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f8c9 3004 	str.w	r3, [r9, #4]
 800e670:	f340 8083 	ble.w	800e77a <_scanf_float+0x27e>
 800e674:	f8d9 3000 	ldr.w	r3, [r9]
 800e678:	3301      	adds	r3, #1
 800e67a:	f8c9 3000 	str.w	r3, [r9]
 800e67e:	e762      	b.n	800e546 <_scanf_float+0x4a>
 800e680:	eb1a 0105 	adds.w	r1, sl, r5
 800e684:	f47f af6d 	bne.w	800e562 <_scanf_float+0x66>
 800e688:	6822      	ldr	r2, [r4, #0]
 800e68a:	460d      	mov	r5, r1
 800e68c:	468a      	mov	sl, r1
 800e68e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e692:	6022      	str	r2, [r4, #0]
 800e694:	f806 3b01 	strb.w	r3, [r6], #1
 800e698:	e7de      	b.n	800e658 <_scanf_float+0x15c>
 800e69a:	6822      	ldr	r2, [r4, #0]
 800e69c:	0610      	lsls	r0, r2, #24
 800e69e:	f57f af60 	bpl.w	800e562 <_scanf_float+0x66>
 800e6a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e6a6:	6022      	str	r2, [r4, #0]
 800e6a8:	e7f4      	b.n	800e694 <_scanf_float+0x198>
 800e6aa:	f1ba 0f00 	cmp.w	sl, #0
 800e6ae:	d10c      	bne.n	800e6ca <_scanf_float+0x1ce>
 800e6b0:	b977      	cbnz	r7, 800e6d0 <_scanf_float+0x1d4>
 800e6b2:	6822      	ldr	r2, [r4, #0]
 800e6b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e6b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e6bc:	d108      	bne.n	800e6d0 <_scanf_float+0x1d4>
 800e6be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e6c2:	f04f 0a01 	mov.w	sl, #1
 800e6c6:	6022      	str	r2, [r4, #0]
 800e6c8:	e7e4      	b.n	800e694 <_scanf_float+0x198>
 800e6ca:	f1ba 0f02 	cmp.w	sl, #2
 800e6ce:	d051      	beq.n	800e774 <_scanf_float+0x278>
 800e6d0:	2d01      	cmp	r5, #1
 800e6d2:	d002      	beq.n	800e6da <_scanf_float+0x1de>
 800e6d4:	2d04      	cmp	r5, #4
 800e6d6:	f47f af44 	bne.w	800e562 <_scanf_float+0x66>
 800e6da:	3501      	adds	r5, #1
 800e6dc:	b2ed      	uxtb	r5, r5
 800e6de:	e7d9      	b.n	800e694 <_scanf_float+0x198>
 800e6e0:	f1ba 0f01 	cmp.w	sl, #1
 800e6e4:	f47f af3d 	bne.w	800e562 <_scanf_float+0x66>
 800e6e8:	f04f 0a02 	mov.w	sl, #2
 800e6ec:	e7d2      	b.n	800e694 <_scanf_float+0x198>
 800e6ee:	b975      	cbnz	r5, 800e70e <_scanf_float+0x212>
 800e6f0:	2f00      	cmp	r7, #0
 800e6f2:	f47f af37 	bne.w	800e564 <_scanf_float+0x68>
 800e6f6:	6822      	ldr	r2, [r4, #0]
 800e6f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e6fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e700:	f040 8103 	bne.w	800e90a <_scanf_float+0x40e>
 800e704:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e708:	2501      	movs	r5, #1
 800e70a:	6022      	str	r2, [r4, #0]
 800e70c:	e7c2      	b.n	800e694 <_scanf_float+0x198>
 800e70e:	2d03      	cmp	r5, #3
 800e710:	d0e3      	beq.n	800e6da <_scanf_float+0x1de>
 800e712:	2d05      	cmp	r5, #5
 800e714:	e7df      	b.n	800e6d6 <_scanf_float+0x1da>
 800e716:	2d02      	cmp	r5, #2
 800e718:	f47f af23 	bne.w	800e562 <_scanf_float+0x66>
 800e71c:	2503      	movs	r5, #3
 800e71e:	e7b9      	b.n	800e694 <_scanf_float+0x198>
 800e720:	2d06      	cmp	r5, #6
 800e722:	f47f af1e 	bne.w	800e562 <_scanf_float+0x66>
 800e726:	2507      	movs	r5, #7
 800e728:	e7b4      	b.n	800e694 <_scanf_float+0x198>
 800e72a:	6822      	ldr	r2, [r4, #0]
 800e72c:	0591      	lsls	r1, r2, #22
 800e72e:	f57f af18 	bpl.w	800e562 <_scanf_float+0x66>
 800e732:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e736:	9702      	str	r7, [sp, #8]
 800e738:	6022      	str	r2, [r4, #0]
 800e73a:	e7ab      	b.n	800e694 <_scanf_float+0x198>
 800e73c:	6822      	ldr	r2, [r4, #0]
 800e73e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e742:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e746:	d005      	beq.n	800e754 <_scanf_float+0x258>
 800e748:	0550      	lsls	r0, r2, #21
 800e74a:	f57f af0a 	bpl.w	800e562 <_scanf_float+0x66>
 800e74e:	2f00      	cmp	r7, #0
 800e750:	f000 80db 	beq.w	800e90a <_scanf_float+0x40e>
 800e754:	0591      	lsls	r1, r2, #22
 800e756:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e75a:	bf58      	it	pl
 800e75c:	9902      	ldrpl	r1, [sp, #8]
 800e75e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e762:	bf58      	it	pl
 800e764:	1a79      	subpl	r1, r7, r1
 800e766:	6022      	str	r2, [r4, #0]
 800e768:	f04f 0700 	mov.w	r7, #0
 800e76c:	bf58      	it	pl
 800e76e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e772:	e78f      	b.n	800e694 <_scanf_float+0x198>
 800e774:	f04f 0a03 	mov.w	sl, #3
 800e778:	e78c      	b.n	800e694 <_scanf_float+0x198>
 800e77a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e77e:	4649      	mov	r1, r9
 800e780:	4640      	mov	r0, r8
 800e782:	4798      	blx	r3
 800e784:	2800      	cmp	r0, #0
 800e786:	f43f aede 	beq.w	800e546 <_scanf_float+0x4a>
 800e78a:	e6ea      	b.n	800e562 <_scanf_float+0x66>
 800e78c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e790:	464a      	mov	r2, r9
 800e792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e796:	4640      	mov	r0, r8
 800e798:	4798      	blx	r3
 800e79a:	6923      	ldr	r3, [r4, #16]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	6123      	str	r3, [r4, #16]
 800e7a0:	e6ea      	b.n	800e578 <_scanf_float+0x7c>
 800e7a2:	1e6b      	subs	r3, r5, #1
 800e7a4:	2b06      	cmp	r3, #6
 800e7a6:	d824      	bhi.n	800e7f2 <_scanf_float+0x2f6>
 800e7a8:	2d02      	cmp	r5, #2
 800e7aa:	d836      	bhi.n	800e81a <_scanf_float+0x31e>
 800e7ac:	9b01      	ldr	r3, [sp, #4]
 800e7ae:	429e      	cmp	r6, r3
 800e7b0:	f67f aee6 	bls.w	800e580 <_scanf_float+0x84>
 800e7b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7b8:	464a      	mov	r2, r9
 800e7ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4798      	blx	r3
 800e7c2:	6923      	ldr	r3, [r4, #16]
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	6123      	str	r3, [r4, #16]
 800e7c8:	e7f0      	b.n	800e7ac <_scanf_float+0x2b0>
 800e7ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e7ce:	464a      	mov	r2, r9
 800e7d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e7d4:	4640      	mov	r0, r8
 800e7d6:	4798      	blx	r3
 800e7d8:	6923      	ldr	r3, [r4, #16]
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	6123      	str	r3, [r4, #16]
 800e7de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7e2:	fa5f fa8a 	uxtb.w	sl, sl
 800e7e6:	f1ba 0f02 	cmp.w	sl, #2
 800e7ea:	d1ee      	bne.n	800e7ca <_scanf_float+0x2ce>
 800e7ec:	3d03      	subs	r5, #3
 800e7ee:	b2ed      	uxtb	r5, r5
 800e7f0:	1b76      	subs	r6, r6, r5
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	05da      	lsls	r2, r3, #23
 800e7f6:	d52f      	bpl.n	800e858 <_scanf_float+0x35c>
 800e7f8:	055b      	lsls	r3, r3, #21
 800e7fa:	d511      	bpl.n	800e820 <_scanf_float+0x324>
 800e7fc:	9b01      	ldr	r3, [sp, #4]
 800e7fe:	429e      	cmp	r6, r3
 800e800:	f67f aebe 	bls.w	800e580 <_scanf_float+0x84>
 800e804:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e808:	464a      	mov	r2, r9
 800e80a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e80e:	4640      	mov	r0, r8
 800e810:	4798      	blx	r3
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	3b01      	subs	r3, #1
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	e7f0      	b.n	800e7fc <_scanf_float+0x300>
 800e81a:	46aa      	mov	sl, r5
 800e81c:	46b3      	mov	fp, r6
 800e81e:	e7de      	b.n	800e7de <_scanf_float+0x2e2>
 800e820:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e824:	1e75      	subs	r5, r6, #1
 800e826:	6923      	ldr	r3, [r4, #16]
 800e828:	2965      	cmp	r1, #101	@ 0x65
 800e82a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	d00c      	beq.n	800e84c <_scanf_float+0x350>
 800e832:	2945      	cmp	r1, #69	@ 0x45
 800e834:	d00a      	beq.n	800e84c <_scanf_float+0x350>
 800e836:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e83a:	464a      	mov	r2, r9
 800e83c:	4640      	mov	r0, r8
 800e83e:	1eb5      	subs	r5, r6, #2
 800e840:	4798      	blx	r3
 800e842:	6923      	ldr	r3, [r4, #16]
 800e844:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e848:	3b01      	subs	r3, #1
 800e84a:	6123      	str	r3, [r4, #16]
 800e84c:	462e      	mov	r6, r5
 800e84e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e852:	464a      	mov	r2, r9
 800e854:	4640      	mov	r0, r8
 800e856:	4798      	blx	r3
 800e858:	6822      	ldr	r2, [r4, #0]
 800e85a:	f012 0210 	ands.w	r2, r2, #16
 800e85e:	d001      	beq.n	800e864 <_scanf_float+0x368>
 800e860:	2000      	movs	r0, #0
 800e862:	e68e      	b.n	800e582 <_scanf_float+0x86>
 800e864:	7032      	strb	r2, [r6, #0]
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e86c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e870:	d125      	bne.n	800e8be <_scanf_float+0x3c2>
 800e872:	9b02      	ldr	r3, [sp, #8]
 800e874:	429f      	cmp	r7, r3
 800e876:	d00a      	beq.n	800e88e <_scanf_float+0x392>
 800e878:	1bda      	subs	r2, r3, r7
 800e87a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e87e:	4924      	ldr	r1, [pc, #144]	@ (800e910 <_scanf_float+0x414>)
 800e880:	429e      	cmp	r6, r3
 800e882:	bf28      	it	cs
 800e884:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e888:	4630      	mov	r0, r6
 800e88a:	f000 f907 	bl	800ea9c <siprintf>
 800e88e:	2200      	movs	r2, #0
 800e890:	9901      	ldr	r1, [sp, #4]
 800e892:	4640      	mov	r0, r8
 800e894:	f002 fc24 	bl	80110e0 <_strtod_r>
 800e898:	6821      	ldr	r1, [r4, #0]
 800e89a:	9b03      	ldr	r3, [sp, #12]
 800e89c:	f011 0f02 	tst.w	r1, #2
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	ec57 6b10 	vmov	r6, r7, d0
 800e8a6:	f103 0204 	add.w	r2, r3, #4
 800e8aa:	d015      	beq.n	800e8d8 <_scanf_float+0x3dc>
 800e8ac:	9903      	ldr	r1, [sp, #12]
 800e8ae:	600a      	str	r2, [r1, #0]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	e9c3 6700 	strd	r6, r7, [r3]
 800e8b6:	68e3      	ldr	r3, [r4, #12]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	60e3      	str	r3, [r4, #12]
 800e8bc:	e7d0      	b.n	800e860 <_scanf_float+0x364>
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d0e4      	beq.n	800e88e <_scanf_float+0x392>
 800e8c4:	9905      	ldr	r1, [sp, #20]
 800e8c6:	230a      	movs	r3, #10
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	3101      	adds	r1, #1
 800e8cc:	f002 fc88 	bl	80111e0 <_strtol_r>
 800e8d0:	9b04      	ldr	r3, [sp, #16]
 800e8d2:	9e05      	ldr	r6, [sp, #20]
 800e8d4:	1ac2      	subs	r2, r0, r3
 800e8d6:	e7d0      	b.n	800e87a <_scanf_float+0x37e>
 800e8d8:	f011 0f04 	tst.w	r1, #4
 800e8dc:	9903      	ldr	r1, [sp, #12]
 800e8de:	600a      	str	r2, [r1, #0]
 800e8e0:	d1e6      	bne.n	800e8b0 <_scanf_float+0x3b4>
 800e8e2:	681d      	ldr	r5, [r3, #0]
 800e8e4:	4632      	mov	r2, r6
 800e8e6:	463b      	mov	r3, r7
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	4639      	mov	r1, r7
 800e8ec:	f7f2 f922 	bl	8000b34 <__aeabi_dcmpun>
 800e8f0:	b128      	cbz	r0, 800e8fe <_scanf_float+0x402>
 800e8f2:	4808      	ldr	r0, [pc, #32]	@ (800e914 <_scanf_float+0x418>)
 800e8f4:	f000 f9d2 	bl	800ec9c <nanf>
 800e8f8:	ed85 0a00 	vstr	s0, [r5]
 800e8fc:	e7db      	b.n	800e8b6 <_scanf_float+0x3ba>
 800e8fe:	4630      	mov	r0, r6
 800e900:	4639      	mov	r1, r7
 800e902:	f7f2 f975 	bl	8000bf0 <__aeabi_d2f>
 800e906:	6028      	str	r0, [r5, #0]
 800e908:	e7d5      	b.n	800e8b6 <_scanf_float+0x3ba>
 800e90a:	2700      	movs	r7, #0
 800e90c:	e62e      	b.n	800e56c <_scanf_float+0x70>
 800e90e:	bf00      	nop
 800e910:	0802fc60 	.word	0x0802fc60
 800e914:	0802fda1 	.word	0x0802fda1

0800e918 <std>:
 800e918:	2300      	movs	r3, #0
 800e91a:	b510      	push	{r4, lr}
 800e91c:	4604      	mov	r4, r0
 800e91e:	6083      	str	r3, [r0, #8]
 800e920:	8181      	strh	r1, [r0, #12]
 800e922:	4619      	mov	r1, r3
 800e924:	6643      	str	r3, [r0, #100]	@ 0x64
 800e926:	81c2      	strh	r2, [r0, #14]
 800e928:	2208      	movs	r2, #8
 800e92a:	6183      	str	r3, [r0, #24]
 800e92c:	e9c0 3300 	strd	r3, r3, [r0]
 800e930:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e934:	305c      	adds	r0, #92	@ 0x5c
 800e936:	f000 f916 	bl	800eb66 <memset>
 800e93a:	4b0d      	ldr	r3, [pc, #52]	@ (800e970 <std+0x58>)
 800e93c:	6224      	str	r4, [r4, #32]
 800e93e:	6263      	str	r3, [r4, #36]	@ 0x24
 800e940:	4b0c      	ldr	r3, [pc, #48]	@ (800e974 <std+0x5c>)
 800e942:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e944:	4b0c      	ldr	r3, [pc, #48]	@ (800e978 <std+0x60>)
 800e946:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e948:	4b0c      	ldr	r3, [pc, #48]	@ (800e97c <std+0x64>)
 800e94a:	6323      	str	r3, [r4, #48]	@ 0x30
 800e94c:	4b0c      	ldr	r3, [pc, #48]	@ (800e980 <std+0x68>)
 800e94e:	429c      	cmp	r4, r3
 800e950:	d006      	beq.n	800e960 <std+0x48>
 800e952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e956:	4294      	cmp	r4, r2
 800e958:	d002      	beq.n	800e960 <std+0x48>
 800e95a:	33d0      	adds	r3, #208	@ 0xd0
 800e95c:	429c      	cmp	r4, r3
 800e95e:	d105      	bne.n	800e96c <std+0x54>
 800e960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e968:	f000 b97a 	b.w	800ec60 <__retarget_lock_init_recursive>
 800e96c:	bd10      	pop	{r4, pc}
 800e96e:	bf00      	nop
 800e970:	0800eae1 	.word	0x0800eae1
 800e974:	0800eb03 	.word	0x0800eb03
 800e978:	0800eb3b 	.word	0x0800eb3b
 800e97c:	0800eb5f 	.word	0x0800eb5f
 800e980:	20013ab4 	.word	0x20013ab4

0800e984 <stdio_exit_handler>:
 800e984:	4a02      	ldr	r2, [pc, #8]	@ (800e990 <stdio_exit_handler+0xc>)
 800e986:	4903      	ldr	r1, [pc, #12]	@ (800e994 <stdio_exit_handler+0x10>)
 800e988:	4803      	ldr	r0, [pc, #12]	@ (800e998 <stdio_exit_handler+0x14>)
 800e98a:	f000 b869 	b.w	800ea60 <_fwalk_sglue>
 800e98e:	bf00      	nop
 800e990:	20000024 	.word	0x20000024
 800e994:	0801159d 	.word	0x0801159d
 800e998:	20000034 	.word	0x20000034

0800e99c <cleanup_stdio>:
 800e99c:	6841      	ldr	r1, [r0, #4]
 800e99e:	4b0c      	ldr	r3, [pc, #48]	@ (800e9d0 <cleanup_stdio+0x34>)
 800e9a0:	4299      	cmp	r1, r3
 800e9a2:	b510      	push	{r4, lr}
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	d001      	beq.n	800e9ac <cleanup_stdio+0x10>
 800e9a8:	f002 fdf8 	bl	801159c <_fflush_r>
 800e9ac:	68a1      	ldr	r1, [r4, #8]
 800e9ae:	4b09      	ldr	r3, [pc, #36]	@ (800e9d4 <cleanup_stdio+0x38>)
 800e9b0:	4299      	cmp	r1, r3
 800e9b2:	d002      	beq.n	800e9ba <cleanup_stdio+0x1e>
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f002 fdf1 	bl	801159c <_fflush_r>
 800e9ba:	68e1      	ldr	r1, [r4, #12]
 800e9bc:	4b06      	ldr	r3, [pc, #24]	@ (800e9d8 <cleanup_stdio+0x3c>)
 800e9be:	4299      	cmp	r1, r3
 800e9c0:	d004      	beq.n	800e9cc <cleanup_stdio+0x30>
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9c8:	f002 bde8 	b.w	801159c <_fflush_r>
 800e9cc:	bd10      	pop	{r4, pc}
 800e9ce:	bf00      	nop
 800e9d0:	20013ab4 	.word	0x20013ab4
 800e9d4:	20013b1c 	.word	0x20013b1c
 800e9d8:	20013b84 	.word	0x20013b84

0800e9dc <global_stdio_init.part.0>:
 800e9dc:	b510      	push	{r4, lr}
 800e9de:	4b0b      	ldr	r3, [pc, #44]	@ (800ea0c <global_stdio_init.part.0+0x30>)
 800e9e0:	2104      	movs	r1, #4
 800e9e2:	4c0b      	ldr	r4, [pc, #44]	@ (800ea10 <global_stdio_init.part.0+0x34>)
 800e9e4:	4a0b      	ldr	r2, [pc, #44]	@ (800ea14 <global_stdio_init.part.0+0x38>)
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f7ff ff94 	bl	800e918 <std>
 800e9f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	2109      	movs	r1, #9
 800e9f8:	f7ff ff8e 	bl	800e918 <std>
 800e9fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea00:	2202      	movs	r2, #2
 800ea02:	2112      	movs	r1, #18
 800ea04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea08:	f7ff bf86 	b.w	800e918 <std>
 800ea0c:	20013bec 	.word	0x20013bec
 800ea10:	20013ab4 	.word	0x20013ab4
 800ea14:	0800e985 	.word	0x0800e985

0800ea18 <__sfp_lock_acquire>:
 800ea18:	4801      	ldr	r0, [pc, #4]	@ (800ea20 <__sfp_lock_acquire+0x8>)
 800ea1a:	f000 b922 	b.w	800ec62 <__retarget_lock_acquire_recursive>
 800ea1e:	bf00      	nop
 800ea20:	20013bf5 	.word	0x20013bf5

0800ea24 <__sfp_lock_release>:
 800ea24:	4801      	ldr	r0, [pc, #4]	@ (800ea2c <__sfp_lock_release+0x8>)
 800ea26:	f000 b91d 	b.w	800ec64 <__retarget_lock_release_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	20013bf5 	.word	0x20013bf5

0800ea30 <__sinit>:
 800ea30:	b510      	push	{r4, lr}
 800ea32:	4604      	mov	r4, r0
 800ea34:	f7ff fff0 	bl	800ea18 <__sfp_lock_acquire>
 800ea38:	6a23      	ldr	r3, [r4, #32]
 800ea3a:	b11b      	cbz	r3, 800ea44 <__sinit+0x14>
 800ea3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea40:	f7ff bff0 	b.w	800ea24 <__sfp_lock_release>
 800ea44:	4b04      	ldr	r3, [pc, #16]	@ (800ea58 <__sinit+0x28>)
 800ea46:	6223      	str	r3, [r4, #32]
 800ea48:	4b04      	ldr	r3, [pc, #16]	@ (800ea5c <__sinit+0x2c>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d1f5      	bne.n	800ea3c <__sinit+0xc>
 800ea50:	f7ff ffc4 	bl	800e9dc <global_stdio_init.part.0>
 800ea54:	e7f2      	b.n	800ea3c <__sinit+0xc>
 800ea56:	bf00      	nop
 800ea58:	0800e99d 	.word	0x0800e99d
 800ea5c:	20013bec 	.word	0x20013bec

0800ea60 <_fwalk_sglue>:
 800ea60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea64:	4607      	mov	r7, r0
 800ea66:	4688      	mov	r8, r1
 800ea68:	4614      	mov	r4, r2
 800ea6a:	2600      	movs	r6, #0
 800ea6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea70:	f1b9 0901 	subs.w	r9, r9, #1
 800ea74:	d505      	bpl.n	800ea82 <_fwalk_sglue+0x22>
 800ea76:	6824      	ldr	r4, [r4, #0]
 800ea78:	2c00      	cmp	r4, #0
 800ea7a:	d1f7      	bne.n	800ea6c <_fwalk_sglue+0xc>
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea82:	89ab      	ldrh	r3, [r5, #12]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d907      	bls.n	800ea98 <_fwalk_sglue+0x38>
 800ea88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	d003      	beq.n	800ea98 <_fwalk_sglue+0x38>
 800ea90:	4629      	mov	r1, r5
 800ea92:	4638      	mov	r0, r7
 800ea94:	47c0      	blx	r8
 800ea96:	4306      	orrs	r6, r0
 800ea98:	3568      	adds	r5, #104	@ 0x68
 800ea9a:	e7e9      	b.n	800ea70 <_fwalk_sglue+0x10>

0800ea9c <siprintf>:
 800ea9c:	b40e      	push	{r1, r2, r3}
 800ea9e:	b510      	push	{r4, lr}
 800eaa0:	b09d      	sub	sp, #116	@ 0x74
 800eaa2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eaa6:	2400      	movs	r4, #0
 800eaa8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eaaa:	9002      	str	r0, [sp, #8]
 800eaac:	9006      	str	r0, [sp, #24]
 800eaae:	9107      	str	r1, [sp, #28]
 800eab0:	9104      	str	r1, [sp, #16]
 800eab2:	4809      	ldr	r0, [pc, #36]	@ (800ead8 <siprintf+0x3c>)
 800eab4:	4909      	ldr	r1, [pc, #36]	@ (800eadc <siprintf+0x40>)
 800eab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaba:	9105      	str	r1, [sp, #20]
 800eabc:	a902      	add	r1, sp, #8
 800eabe:	6800      	ldr	r0, [r0, #0]
 800eac0:	9301      	str	r3, [sp, #4]
 800eac2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eac4:	f002 fbea 	bl	801129c <_svfiprintf_r>
 800eac8:	9b02      	ldr	r3, [sp, #8]
 800eaca:	701c      	strb	r4, [r3, #0]
 800eacc:	b01d      	add	sp, #116	@ 0x74
 800eace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ead2:	b003      	add	sp, #12
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	20000030 	.word	0x20000030
 800eadc:	ffff0208 	.word	0xffff0208

0800eae0 <__sread>:
 800eae0:	b510      	push	{r4, lr}
 800eae2:	460c      	mov	r4, r1
 800eae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eae8:	f000 f86c 	bl	800ebc4 <_read_r>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	bfab      	itete	ge
 800eaf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eaf2:	89a3      	ldrhlt	r3, [r4, #12]
 800eaf4:	181b      	addge	r3, r3, r0
 800eaf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eafa:	bfac      	ite	ge
 800eafc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eafe:	81a3      	strhlt	r3, [r4, #12]
 800eb00:	bd10      	pop	{r4, pc}

0800eb02 <__swrite>:
 800eb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb06:	461f      	mov	r7, r3
 800eb08:	898b      	ldrh	r3, [r1, #12]
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	460c      	mov	r4, r1
 800eb0e:	05db      	lsls	r3, r3, #23
 800eb10:	4616      	mov	r6, r2
 800eb12:	d505      	bpl.n	800eb20 <__swrite+0x1e>
 800eb14:	2302      	movs	r3, #2
 800eb16:	2200      	movs	r2, #0
 800eb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1c:	f000 f840 	bl	800eba0 <_lseek_r>
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	4632      	mov	r2, r6
 800eb24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb2e:	81a3      	strh	r3, [r4, #12]
 800eb30:	463b      	mov	r3, r7
 800eb32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb36:	f000 b857 	b.w	800ebe8 <_write_r>

0800eb3a <__sseek>:
 800eb3a:	b510      	push	{r4, lr}
 800eb3c:	460c      	mov	r4, r1
 800eb3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb42:	f000 f82d 	bl	800eba0 <_lseek_r>
 800eb46:	1c43      	adds	r3, r0, #1
 800eb48:	89a3      	ldrh	r3, [r4, #12]
 800eb4a:	bf15      	itete	ne
 800eb4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb56:	81a3      	strheq	r3, [r4, #12]
 800eb58:	bf18      	it	ne
 800eb5a:	81a3      	strhne	r3, [r4, #12]
 800eb5c:	bd10      	pop	{r4, pc}

0800eb5e <__sclose>:
 800eb5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb62:	f000 b80d 	b.w	800eb80 <_close_r>

0800eb66 <memset>:
 800eb66:	4402      	add	r2, r0
 800eb68:	4603      	mov	r3, r0
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d100      	bne.n	800eb70 <memset+0xa>
 800eb6e:	4770      	bx	lr
 800eb70:	f803 1b01 	strb.w	r1, [r3], #1
 800eb74:	e7f9      	b.n	800eb6a <memset+0x4>
	...

0800eb78 <_localeconv_r>:
 800eb78:	4800      	ldr	r0, [pc, #0]	@ (800eb7c <_localeconv_r+0x4>)
 800eb7a:	4770      	bx	lr
 800eb7c:	20000170 	.word	0x20000170

0800eb80 <_close_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	2300      	movs	r3, #0
 800eb84:	4d05      	ldr	r5, [pc, #20]	@ (800eb9c <_close_r+0x1c>)
 800eb86:	4604      	mov	r4, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	602b      	str	r3, [r5, #0]
 800eb8c:	f7f3 fd96 	bl	80026bc <_close>
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	d102      	bne.n	800eb9a <_close_r+0x1a>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	b103      	cbz	r3, 800eb9a <_close_r+0x1a>
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	bd38      	pop	{r3, r4, r5, pc}
 800eb9c:	20013bf0 	.word	0x20013bf0

0800eba0 <_lseek_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4604      	mov	r4, r0
 800eba4:	4d06      	ldr	r5, [pc, #24]	@ (800ebc0 <_lseek_r+0x20>)
 800eba6:	4608      	mov	r0, r1
 800eba8:	4611      	mov	r1, r2
 800ebaa:	2200      	movs	r2, #0
 800ebac:	602a      	str	r2, [r5, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	f7f3 fdab 	bl	800270a <_lseek>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	d102      	bne.n	800ebbe <_lseek_r+0x1e>
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	b103      	cbz	r3, 800ebbe <_lseek_r+0x1e>
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	20013bf0 	.word	0x20013bf0

0800ebc4 <_read_r>:
 800ebc4:	b538      	push	{r3, r4, r5, lr}
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	4d06      	ldr	r5, [pc, #24]	@ (800ebe4 <_read_r+0x20>)
 800ebca:	4608      	mov	r0, r1
 800ebcc:	4611      	mov	r1, r2
 800ebce:	2200      	movs	r2, #0
 800ebd0:	602a      	str	r2, [r5, #0]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	f7f3 fd39 	bl	800264a <_read>
 800ebd8:	1c43      	adds	r3, r0, #1
 800ebda:	d102      	bne.n	800ebe2 <_read_r+0x1e>
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	b103      	cbz	r3, 800ebe2 <_read_r+0x1e>
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	20013bf0 	.word	0x20013bf0

0800ebe8 <_write_r>:
 800ebe8:	b538      	push	{r3, r4, r5, lr}
 800ebea:	4604      	mov	r4, r0
 800ebec:	4d06      	ldr	r5, [pc, #24]	@ (800ec08 <_write_r+0x20>)
 800ebee:	4608      	mov	r0, r1
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	602a      	str	r2, [r5, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	f7f3 fd44 	bl	8002684 <_write>
 800ebfc:	1c43      	adds	r3, r0, #1
 800ebfe:	d102      	bne.n	800ec06 <_write_r+0x1e>
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	b103      	cbz	r3, 800ec06 <_write_r+0x1e>
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	bd38      	pop	{r3, r4, r5, pc}
 800ec08:	20013bf0 	.word	0x20013bf0

0800ec0c <__errno>:
 800ec0c:	4b01      	ldr	r3, [pc, #4]	@ (800ec14 <__errno+0x8>)
 800ec0e:	6818      	ldr	r0, [r3, #0]
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	20000030 	.word	0x20000030

0800ec18 <__libc_init_array>:
 800ec18:	b570      	push	{r4, r5, r6, lr}
 800ec1a:	4d0d      	ldr	r5, [pc, #52]	@ (800ec50 <__libc_init_array+0x38>)
 800ec1c:	2600      	movs	r6, #0
 800ec1e:	4c0d      	ldr	r4, [pc, #52]	@ (800ec54 <__libc_init_array+0x3c>)
 800ec20:	1b64      	subs	r4, r4, r5
 800ec22:	10a4      	asrs	r4, r4, #2
 800ec24:	42a6      	cmp	r6, r4
 800ec26:	d109      	bne.n	800ec3c <__libc_init_array+0x24>
 800ec28:	4d0b      	ldr	r5, [pc, #44]	@ (800ec58 <__libc_init_array+0x40>)
 800ec2a:	2600      	movs	r6, #0
 800ec2c:	4c0b      	ldr	r4, [pc, #44]	@ (800ec5c <__libc_init_array+0x44>)
 800ec2e:	f003 fd37 	bl	80126a0 <_init>
 800ec32:	1b64      	subs	r4, r4, r5
 800ec34:	10a4      	asrs	r4, r4, #2
 800ec36:	42a6      	cmp	r6, r4
 800ec38:	d105      	bne.n	800ec46 <__libc_init_array+0x2e>
 800ec3a:	bd70      	pop	{r4, r5, r6, pc}
 800ec3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec40:	3601      	adds	r6, #1
 800ec42:	4798      	blx	r3
 800ec44:	e7ee      	b.n	800ec24 <__libc_init_array+0xc>
 800ec46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec4a:	3601      	adds	r6, #1
 800ec4c:	4798      	blx	r3
 800ec4e:	e7f2      	b.n	800ec36 <__libc_init_array+0x1e>
 800ec50:	0803005c 	.word	0x0803005c
 800ec54:	0803005c 	.word	0x0803005c
 800ec58:	0803005c 	.word	0x0803005c
 800ec5c:	08030060 	.word	0x08030060

0800ec60 <__retarget_lock_init_recursive>:
 800ec60:	4770      	bx	lr

0800ec62 <__retarget_lock_acquire_recursive>:
 800ec62:	4770      	bx	lr

0800ec64 <__retarget_lock_release_recursive>:
 800ec64:	4770      	bx	lr

0800ec66 <memchr>:
 800ec66:	b2c9      	uxtb	r1, r1
 800ec68:	4603      	mov	r3, r0
 800ec6a:	4402      	add	r2, r0
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	4618      	mov	r0, r3
 800ec72:	d101      	bne.n	800ec78 <memchr+0x12>
 800ec74:	2000      	movs	r0, #0
 800ec76:	e003      	b.n	800ec80 <memchr+0x1a>
 800ec78:	7804      	ldrb	r4, [r0, #0]
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	428c      	cmp	r4, r1
 800ec7e:	d1f6      	bne.n	800ec6e <memchr+0x8>
 800ec80:	bd10      	pop	{r4, pc}

0800ec82 <memcpy>:
 800ec82:	440a      	add	r2, r1
 800ec84:	1e43      	subs	r3, r0, #1
 800ec86:	4291      	cmp	r1, r2
 800ec88:	d100      	bne.n	800ec8c <memcpy+0xa>
 800ec8a:	4770      	bx	lr
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec92:	4291      	cmp	r1, r2
 800ec94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec98:	d1f9      	bne.n	800ec8e <memcpy+0xc>
 800ec9a:	bd10      	pop	{r4, pc}

0800ec9c <nanf>:
 800ec9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eca4 <nanf+0x8>
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	7fc00000 	.word	0x7fc00000

0800eca8 <quorem>:
 800eca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecac:	6903      	ldr	r3, [r0, #16]
 800ecae:	4607      	mov	r7, r0
 800ecb0:	690c      	ldr	r4, [r1, #16]
 800ecb2:	42a3      	cmp	r3, r4
 800ecb4:	f2c0 8083 	blt.w	800edbe <quorem+0x116>
 800ecb8:	3c01      	subs	r4, #1
 800ecba:	f100 0514 	add.w	r5, r0, #20
 800ecbe:	f101 0814 	add.w	r8, r1, #20
 800ecc2:	00a3      	lsls	r3, r4, #2
 800ecc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ecd2:	9301      	str	r3, [sp, #4]
 800ecd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ece0:	d331      	bcc.n	800ed46 <quorem+0x9e>
 800ece2:	f04f 0a00 	mov.w	sl, #0
 800ece6:	46c4      	mov	ip, r8
 800ece8:	46ae      	mov	lr, r5
 800ecea:	46d3      	mov	fp, sl
 800ecec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ecf0:	b298      	uxth	r0, r3
 800ecf2:	45e1      	cmp	r9, ip
 800ecf4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ecf8:	fb06 a000 	mla	r0, r6, r0, sl
 800ecfc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ed00:	b280      	uxth	r0, r0
 800ed02:	fb06 2303 	mla	r3, r6, r3, r2
 800ed06:	f8de 2000 	ldr.w	r2, [lr]
 800ed0a:	b292      	uxth	r2, r2
 800ed0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed10:	eba2 0200 	sub.w	r2, r2, r0
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	f8de 0000 	ldr.w	r0, [lr]
 800ed1a:	445a      	add	r2, fp
 800ed1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ed20:	b292      	uxth	r2, r2
 800ed22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ed26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ed2a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ed2e:	f84e 2b04 	str.w	r2, [lr], #4
 800ed32:	d2db      	bcs.n	800ecec <quorem+0x44>
 800ed34:	9b00      	ldr	r3, [sp, #0]
 800ed36:	58eb      	ldr	r3, [r5, r3]
 800ed38:	b92b      	cbnz	r3, 800ed46 <quorem+0x9e>
 800ed3a:	9b01      	ldr	r3, [sp, #4]
 800ed3c:	3b04      	subs	r3, #4
 800ed3e:	429d      	cmp	r5, r3
 800ed40:	461a      	mov	r2, r3
 800ed42:	d330      	bcc.n	800eda6 <quorem+0xfe>
 800ed44:	613c      	str	r4, [r7, #16]
 800ed46:	4638      	mov	r0, r7
 800ed48:	f001 f9d0 	bl	80100ec <__mcmp>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	db26      	blt.n	800ed9e <quorem+0xf6>
 800ed50:	4629      	mov	r1, r5
 800ed52:	2000      	movs	r0, #0
 800ed54:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed58:	f8d1 c000 	ldr.w	ip, [r1]
 800ed5c:	fa1f fe82 	uxth.w	lr, r2
 800ed60:	45c1      	cmp	r9, r8
 800ed62:	fa1f f38c 	uxth.w	r3, ip
 800ed66:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ed6a:	eba3 030e 	sub.w	r3, r3, lr
 800ed6e:	4403      	add	r3, r0
 800ed70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ed7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed82:	f841 3b04 	str.w	r3, [r1], #4
 800ed86:	d2e5      	bcs.n	800ed54 <quorem+0xac>
 800ed88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed90:	b922      	cbnz	r2, 800ed9c <quorem+0xf4>
 800ed92:	3b04      	subs	r3, #4
 800ed94:	429d      	cmp	r5, r3
 800ed96:	461a      	mov	r2, r3
 800ed98:	d30b      	bcc.n	800edb2 <quorem+0x10a>
 800ed9a:	613c      	str	r4, [r7, #16]
 800ed9c:	3601      	adds	r6, #1
 800ed9e:	4630      	mov	r0, r6
 800eda0:	b003      	add	sp, #12
 800eda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda6:	6812      	ldr	r2, [r2, #0]
 800eda8:	3b04      	subs	r3, #4
 800edaa:	2a00      	cmp	r2, #0
 800edac:	d1ca      	bne.n	800ed44 <quorem+0x9c>
 800edae:	3c01      	subs	r4, #1
 800edb0:	e7c5      	b.n	800ed3e <quorem+0x96>
 800edb2:	6812      	ldr	r2, [r2, #0]
 800edb4:	3b04      	subs	r3, #4
 800edb6:	2a00      	cmp	r2, #0
 800edb8:	d1ef      	bne.n	800ed9a <quorem+0xf2>
 800edba:	3c01      	subs	r4, #1
 800edbc:	e7ea      	b.n	800ed94 <quorem+0xec>
 800edbe:	2000      	movs	r0, #0
 800edc0:	e7ee      	b.n	800eda0 <quorem+0xf8>
 800edc2:	0000      	movs	r0, r0
 800edc4:	0000      	movs	r0, r0
	...

0800edc8 <_dtoa_r>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	69c7      	ldr	r7, [r0, #28]
 800edce:	b097      	sub	sp, #92	@ 0x5c
 800edd0:	4681      	mov	r9, r0
 800edd2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800edd4:	9107      	str	r1, [sp, #28]
 800edd6:	920c      	str	r2, [sp, #48]	@ 0x30
 800edd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800edda:	ec55 4b10 	vmov	r4, r5, d0
 800edde:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ede2:	b97f      	cbnz	r7, 800ee04 <_dtoa_r+0x3c>
 800ede4:	2010      	movs	r0, #16
 800ede6:	f000 fe0b 	bl	800fa00 <malloc>
 800edea:	4602      	mov	r2, r0
 800edec:	f8c9 001c 	str.w	r0, [r9, #28]
 800edf0:	b920      	cbnz	r0, 800edfc <_dtoa_r+0x34>
 800edf2:	4ba9      	ldr	r3, [pc, #676]	@ (800f098 <_dtoa_r+0x2d0>)
 800edf4:	21ef      	movs	r1, #239	@ 0xef
 800edf6:	48a9      	ldr	r0, [pc, #676]	@ (800f09c <_dtoa_r+0x2d4>)
 800edf8:	f002 fc3e 	bl	8011678 <__assert_func>
 800edfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ee00:	6007      	str	r7, [r0, #0]
 800ee02:	60c7      	str	r7, [r0, #12]
 800ee04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee08:	6819      	ldr	r1, [r3, #0]
 800ee0a:	b159      	cbz	r1, 800ee24 <_dtoa_r+0x5c>
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	2301      	movs	r3, #1
 800ee10:	4648      	mov	r0, r9
 800ee12:	4093      	lsls	r3, r2
 800ee14:	604a      	str	r2, [r1, #4]
 800ee16:	608b      	str	r3, [r1, #8]
 800ee18:	f000 fee8 	bl	800fbec <_Bfree>
 800ee1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ee20:	2200      	movs	r2, #0
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	1e2b      	subs	r3, r5, #0
 800ee26:	bfb7      	itett	lt
 800ee28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ee2c:	2300      	movge	r3, #0
 800ee2e:	2201      	movlt	r2, #1
 800ee30:	9305      	strlt	r3, [sp, #20]
 800ee32:	bfa8      	it	ge
 800ee34:	6033      	strge	r3, [r6, #0]
 800ee36:	9f05      	ldr	r7, [sp, #20]
 800ee38:	4b99      	ldr	r3, [pc, #612]	@ (800f0a0 <_dtoa_r+0x2d8>)
 800ee3a:	bfb8      	it	lt
 800ee3c:	6032      	strlt	r2, [r6, #0]
 800ee3e:	43bb      	bics	r3, r7
 800ee40:	d112      	bne.n	800ee68 <_dtoa_r+0xa0>
 800ee42:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ee46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ee48:	6013      	str	r3, [r2, #0]
 800ee4a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee4e:	4323      	orrs	r3, r4
 800ee50:	f000 855a 	beq.w	800f908 <_dtoa_r+0xb40>
 800ee54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ee56:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f0b4 <_dtoa_r+0x2ec>
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f000 855c 	beq.w	800f918 <_dtoa_r+0xb50>
 800ee60:	f10a 0303 	add.w	r3, sl, #3
 800ee64:	f000 bd56 	b.w	800f914 <_dtoa_r+0xb4c>
 800ee68:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	2300      	movs	r3, #0
 800ee70:	ec51 0b17 	vmov	r0, r1, d7
 800ee74:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ee78:	f7f1 fe2a 	bl	8000ad0 <__aeabi_dcmpeq>
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	b158      	cbz	r0, 800ee98 <_dtoa_r+0xd0>
 800ee80:	2301      	movs	r3, #1
 800ee82:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ee84:	6013      	str	r3, [r2, #0]
 800ee86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ee88:	b113      	cbz	r3, 800ee90 <_dtoa_r+0xc8>
 800ee8a:	4b86      	ldr	r3, [pc, #536]	@ (800f0a4 <_dtoa_r+0x2dc>)
 800ee8c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800f0b8 <_dtoa_r+0x2f0>
 800ee94:	f000 bd40 	b.w	800f918 <_dtoa_r+0xb50>
 800ee98:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ee9c:	aa14      	add	r2, sp, #80	@ 0x50
 800ee9e:	a915      	add	r1, sp, #84	@ 0x54
 800eea0:	4648      	mov	r0, r9
 800eea2:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800eea6:	f001 fa49 	bl	801033c <__d2b>
 800eeaa:	9002      	str	r0, [sp, #8]
 800eeac:	2e00      	cmp	r6, #0
 800eeae:	d076      	beq.n	800ef9e <_dtoa_r+0x1d6>
 800eeb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eeb2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eeb6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800eeba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eebe:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eec2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eec6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eeca:	4619      	mov	r1, r3
 800eecc:	2200      	movs	r2, #0
 800eece:	4b76      	ldr	r3, [pc, #472]	@ (800f0a8 <_dtoa_r+0x2e0>)
 800eed0:	f7f1 f9de 	bl	8000290 <__aeabi_dsub>
 800eed4:	a36a      	add	r3, pc, #424	@ (adr r3, 800f080 <_dtoa_r+0x2b8>)
 800eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeda:	f7f1 fb91 	bl	8000600 <__aeabi_dmul>
 800eede:	a36a      	add	r3, pc, #424	@ (adr r3, 800f088 <_dtoa_r+0x2c0>)
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	f7f1 f9d6 	bl	8000294 <__adddf3>
 800eee8:	4604      	mov	r4, r0
 800eeea:	460d      	mov	r5, r1
 800eeec:	4630      	mov	r0, r6
 800eeee:	f7f1 fb1d 	bl	800052c <__aeabi_i2d>
 800eef2:	a367      	add	r3, pc, #412	@ (adr r3, 800f090 <_dtoa_r+0x2c8>)
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 fb82 	bl	8000600 <__aeabi_dmul>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	4620      	mov	r0, r4
 800ef02:	4629      	mov	r1, r5
 800ef04:	f7f1 f9c6 	bl	8000294 <__adddf3>
 800ef08:	4604      	mov	r4, r0
 800ef0a:	460d      	mov	r5, r1
 800ef0c:	f7f1 fe28 	bl	8000b60 <__aeabi_d2iz>
 800ef10:	2200      	movs	r2, #0
 800ef12:	4607      	mov	r7, r0
 800ef14:	2300      	movs	r3, #0
 800ef16:	4620      	mov	r0, r4
 800ef18:	4629      	mov	r1, r5
 800ef1a:	f7f1 fde3 	bl	8000ae4 <__aeabi_dcmplt>
 800ef1e:	b140      	cbz	r0, 800ef32 <_dtoa_r+0x16a>
 800ef20:	4638      	mov	r0, r7
 800ef22:	f7f1 fb03 	bl	800052c <__aeabi_i2d>
 800ef26:	4622      	mov	r2, r4
 800ef28:	462b      	mov	r3, r5
 800ef2a:	f7f1 fdd1 	bl	8000ad0 <__aeabi_dcmpeq>
 800ef2e:	b900      	cbnz	r0, 800ef32 <_dtoa_r+0x16a>
 800ef30:	3f01      	subs	r7, #1
 800ef32:	2f16      	cmp	r7, #22
 800ef34:	d852      	bhi.n	800efdc <_dtoa_r+0x214>
 800ef36:	4b5d      	ldr	r3, [pc, #372]	@ (800f0ac <_dtoa_r+0x2e4>)
 800ef38:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	f7f1 fdce 	bl	8000ae4 <__aeabi_dcmplt>
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	d049      	beq.n	800efe0 <_dtoa_r+0x218>
 800ef4c:	3f01      	subs	r7, #1
 800ef4e:	2300      	movs	r3, #0
 800ef50:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ef54:	1b9b      	subs	r3, r3, r6
 800ef56:	1e5a      	subs	r2, r3, #1
 800ef58:	bf4c      	ite	mi
 800ef5a:	f1c3 0301 	rsbmi	r3, r3, #1
 800ef5e:	2300      	movpl	r3, #0
 800ef60:	9206      	str	r2, [sp, #24]
 800ef62:	bf45      	ittet	mi
 800ef64:	9300      	strmi	r3, [sp, #0]
 800ef66:	2300      	movmi	r3, #0
 800ef68:	9300      	strpl	r3, [sp, #0]
 800ef6a:	9306      	strmi	r3, [sp, #24]
 800ef6c:	2f00      	cmp	r7, #0
 800ef6e:	db39      	blt.n	800efe4 <_dtoa_r+0x21c>
 800ef70:	9b06      	ldr	r3, [sp, #24]
 800ef72:	970d      	str	r7, [sp, #52]	@ 0x34
 800ef74:	443b      	add	r3, r7
 800ef76:	9306      	str	r3, [sp, #24]
 800ef78:	2300      	movs	r3, #0
 800ef7a:	9308      	str	r3, [sp, #32]
 800ef7c:	9b07      	ldr	r3, [sp, #28]
 800ef7e:	2b09      	cmp	r3, #9
 800ef80:	d863      	bhi.n	800f04a <_dtoa_r+0x282>
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	bfc5      	ittet	gt
 800ef86:	3b04      	subgt	r3, #4
 800ef88:	2400      	movgt	r4, #0
 800ef8a:	2401      	movle	r4, #1
 800ef8c:	9307      	strgt	r3, [sp, #28]
 800ef8e:	9b07      	ldr	r3, [sp, #28]
 800ef90:	3b02      	subs	r3, #2
 800ef92:	2b03      	cmp	r3, #3
 800ef94:	d865      	bhi.n	800f062 <_dtoa_r+0x29a>
 800ef96:	e8df f003 	tbb	[pc, r3]
 800ef9a:	5654      	.short	0x5654
 800ef9c:	2d39      	.short	0x2d39
 800ef9e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800efa2:	441e      	add	r6, r3
 800efa4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800efa8:	2b20      	cmp	r3, #32
 800efaa:	bfc9      	itett	gt
 800efac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800efb0:	f1c3 0320 	rsble	r3, r3, #32
 800efb4:	409f      	lslgt	r7, r3
 800efb6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800efba:	bfd8      	it	le
 800efbc:	fa04 f003 	lslle.w	r0, r4, r3
 800efc0:	f106 36ff 	add.w	r6, r6, #4294967295
 800efc4:	bfc4      	itt	gt
 800efc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800efca:	ea47 0003 	orrgt.w	r0, r7, r3
 800efce:	f7f1 fa9d 	bl	800050c <__aeabi_ui2d>
 800efd2:	2201      	movs	r2, #1
 800efd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800efd8:	9212      	str	r2, [sp, #72]	@ 0x48
 800efda:	e776      	b.n	800eeca <_dtoa_r+0x102>
 800efdc:	2301      	movs	r3, #1
 800efde:	e7b7      	b.n	800ef50 <_dtoa_r+0x188>
 800efe0:	9010      	str	r0, [sp, #64]	@ 0x40
 800efe2:	e7b6      	b.n	800ef52 <_dtoa_r+0x18a>
 800efe4:	9b00      	ldr	r3, [sp, #0]
 800efe6:	1bdb      	subs	r3, r3, r7
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	427b      	negs	r3, r7
 800efec:	9308      	str	r3, [sp, #32]
 800efee:	2300      	movs	r3, #0
 800eff0:	930d      	str	r3, [sp, #52]	@ 0x34
 800eff2:	e7c3      	b.n	800ef7c <_dtoa_r+0x1b4>
 800eff4:	2301      	movs	r3, #1
 800eff6:	9309      	str	r3, [sp, #36]	@ 0x24
 800eff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800effa:	eb07 0b03 	add.w	fp, r7, r3
 800effe:	f10b 0301 	add.w	r3, fp, #1
 800f002:	2b01      	cmp	r3, #1
 800f004:	9303      	str	r3, [sp, #12]
 800f006:	bfb8      	it	lt
 800f008:	2301      	movlt	r3, #1
 800f00a:	e006      	b.n	800f01a <_dtoa_r+0x252>
 800f00c:	2301      	movs	r3, #1
 800f00e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f012:	2b00      	cmp	r3, #0
 800f014:	dd28      	ble.n	800f068 <_dtoa_r+0x2a0>
 800f016:	469b      	mov	fp, r3
 800f018:	9303      	str	r3, [sp, #12]
 800f01a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f01e:	2100      	movs	r1, #0
 800f020:	2204      	movs	r2, #4
 800f022:	f102 0514 	add.w	r5, r2, #20
 800f026:	429d      	cmp	r5, r3
 800f028:	d926      	bls.n	800f078 <_dtoa_r+0x2b0>
 800f02a:	6041      	str	r1, [r0, #4]
 800f02c:	4648      	mov	r0, r9
 800f02e:	f000 fd9d 	bl	800fb6c <_Balloc>
 800f032:	4682      	mov	sl, r0
 800f034:	2800      	cmp	r0, #0
 800f036:	d141      	bne.n	800f0bc <_dtoa_r+0x2f4>
 800f038:	4b1d      	ldr	r3, [pc, #116]	@ (800f0b0 <_dtoa_r+0x2e8>)
 800f03a:	4602      	mov	r2, r0
 800f03c:	f240 11af 	movw	r1, #431	@ 0x1af
 800f040:	e6d9      	b.n	800edf6 <_dtoa_r+0x2e>
 800f042:	2300      	movs	r3, #0
 800f044:	e7e3      	b.n	800f00e <_dtoa_r+0x246>
 800f046:	2300      	movs	r3, #0
 800f048:	e7d5      	b.n	800eff6 <_dtoa_r+0x22e>
 800f04a:	2401      	movs	r4, #1
 800f04c:	2300      	movs	r3, #0
 800f04e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f050:	9307      	str	r3, [sp, #28]
 800f052:	f04f 3bff 	mov.w	fp, #4294967295
 800f056:	2200      	movs	r2, #0
 800f058:	2312      	movs	r3, #18
 800f05a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f05e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f060:	e7db      	b.n	800f01a <_dtoa_r+0x252>
 800f062:	2301      	movs	r3, #1
 800f064:	9309      	str	r3, [sp, #36]	@ 0x24
 800f066:	e7f4      	b.n	800f052 <_dtoa_r+0x28a>
 800f068:	f04f 0b01 	mov.w	fp, #1
 800f06c:	465b      	mov	r3, fp
 800f06e:	f8cd b00c 	str.w	fp, [sp, #12]
 800f072:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f076:	e7d0      	b.n	800f01a <_dtoa_r+0x252>
 800f078:	3101      	adds	r1, #1
 800f07a:	0052      	lsls	r2, r2, #1
 800f07c:	e7d1      	b.n	800f022 <_dtoa_r+0x25a>
 800f07e:	bf00      	nop
 800f080:	636f4361 	.word	0x636f4361
 800f084:	3fd287a7 	.word	0x3fd287a7
 800f088:	8b60c8b3 	.word	0x8b60c8b3
 800f08c:	3fc68a28 	.word	0x3fc68a28
 800f090:	509f79fb 	.word	0x509f79fb
 800f094:	3fd34413 	.word	0x3fd34413
 800f098:	0802fc72 	.word	0x0802fc72
 800f09c:	0802fc89 	.word	0x0802fc89
 800f0a0:	7ff00000 	.word	0x7ff00000
 800f0a4:	0802fc3d 	.word	0x0802fc3d
 800f0a8:	3ff80000 	.word	0x3ff80000
 800f0ac:	0802fe38 	.word	0x0802fe38
 800f0b0:	0802fce1 	.word	0x0802fce1
 800f0b4:	0802fc6e 	.word	0x0802fc6e
 800f0b8:	0802fc3c 	.word	0x0802fc3c
 800f0bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f0c0:	6018      	str	r0, [r3, #0]
 800f0c2:	9b03      	ldr	r3, [sp, #12]
 800f0c4:	2b0e      	cmp	r3, #14
 800f0c6:	f200 80a1 	bhi.w	800f20c <_dtoa_r+0x444>
 800f0ca:	2c00      	cmp	r4, #0
 800f0cc:	f000 809e 	beq.w	800f20c <_dtoa_r+0x444>
 800f0d0:	2f00      	cmp	r7, #0
 800f0d2:	dd33      	ble.n	800f13c <_dtoa_r+0x374>
 800f0d4:	f007 020f 	and.w	r2, r7, #15
 800f0d8:	4b9b      	ldr	r3, [pc, #620]	@ (800f348 <_dtoa_r+0x580>)
 800f0da:	05f8      	lsls	r0, r7, #23
 800f0dc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f0e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0e4:	ed93 7b00 	vldr	d7, [r3]
 800f0e8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f0ec:	d516      	bpl.n	800f11c <_dtoa_r+0x354>
 800f0ee:	4b97      	ldr	r3, [pc, #604]	@ (800f34c <_dtoa_r+0x584>)
 800f0f0:	f004 040f 	and.w	r4, r4, #15
 800f0f4:	2603      	movs	r6, #3
 800f0f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f0fe:	f7f1 fba9 	bl	8000854 <__aeabi_ddiv>
 800f102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f106:	4d91      	ldr	r5, [pc, #580]	@ (800f34c <_dtoa_r+0x584>)
 800f108:	b954      	cbnz	r4, 800f120 <_dtoa_r+0x358>
 800f10a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f10e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f112:	f7f1 fb9f 	bl	8000854 <__aeabi_ddiv>
 800f116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f11a:	e028      	b.n	800f16e <_dtoa_r+0x3a6>
 800f11c:	2602      	movs	r6, #2
 800f11e:	e7f2      	b.n	800f106 <_dtoa_r+0x33e>
 800f120:	07e1      	lsls	r1, r4, #31
 800f122:	d508      	bpl.n	800f136 <_dtoa_r+0x36e>
 800f124:	3601      	adds	r6, #1
 800f126:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f12a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f12e:	f7f1 fa67 	bl	8000600 <__aeabi_dmul>
 800f132:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f136:	1064      	asrs	r4, r4, #1
 800f138:	3508      	adds	r5, #8
 800f13a:	e7e5      	b.n	800f108 <_dtoa_r+0x340>
 800f13c:	f000 80af 	beq.w	800f29e <_dtoa_r+0x4d6>
 800f140:	427c      	negs	r4, r7
 800f142:	4b81      	ldr	r3, [pc, #516]	@ (800f348 <_dtoa_r+0x580>)
 800f144:	4d81      	ldr	r5, [pc, #516]	@ (800f34c <_dtoa_r+0x584>)
 800f146:	2602      	movs	r6, #2
 800f148:	f004 020f 	and.w	r2, r4, #15
 800f14c:	1124      	asrs	r4, r4, #4
 800f14e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f152:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15a:	f7f1 fa51 	bl	8000600 <__aeabi_dmul>
 800f15e:	2300      	movs	r3, #0
 800f160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f164:	2c00      	cmp	r4, #0
 800f166:	f040 808f 	bne.w	800f288 <_dtoa_r+0x4c0>
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1d3      	bne.n	800f116 <_dtoa_r+0x34e>
 800f16e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f170:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 8094 	beq.w	800f2a2 <_dtoa_r+0x4da>
 800f17a:	2200      	movs	r2, #0
 800f17c:	4b74      	ldr	r3, [pc, #464]	@ (800f350 <_dtoa_r+0x588>)
 800f17e:	4620      	mov	r0, r4
 800f180:	4629      	mov	r1, r5
 800f182:	f7f1 fcaf 	bl	8000ae4 <__aeabi_dcmplt>
 800f186:	2800      	cmp	r0, #0
 800f188:	f000 808b 	beq.w	800f2a2 <_dtoa_r+0x4da>
 800f18c:	9b03      	ldr	r3, [sp, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f000 8087 	beq.w	800f2a2 <_dtoa_r+0x4da>
 800f194:	f1bb 0f00 	cmp.w	fp, #0
 800f198:	dd34      	ble.n	800f204 <_dtoa_r+0x43c>
 800f19a:	4620      	mov	r0, r4
 800f19c:	f107 38ff 	add.w	r8, r7, #4294967295
 800f1a0:	3601      	adds	r6, #1
 800f1a2:	465c      	mov	r4, fp
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	4b6b      	ldr	r3, [pc, #428]	@ (800f354 <_dtoa_r+0x58c>)
 800f1a8:	4629      	mov	r1, r5
 800f1aa:	f7f1 fa29 	bl	8000600 <__aeabi_dmul>
 800f1ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f7f1 f9ba 	bl	800052c <__aeabi_i2d>
 800f1b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1bc:	f7f1 fa20 	bl	8000600 <__aeabi_dmul>
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4b65      	ldr	r3, [pc, #404]	@ (800f358 <_dtoa_r+0x590>)
 800f1c4:	f7f1 f866 	bl	8000294 <__adddf3>
 800f1c8:	4605      	mov	r5, r0
 800f1ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f1ce:	2c00      	cmp	r4, #0
 800f1d0:	d16a      	bne.n	800f2a8 <_dtoa_r+0x4e0>
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	4b61      	ldr	r3, [pc, #388]	@ (800f35c <_dtoa_r+0x594>)
 800f1d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1da:	f7f1 f859 	bl	8000290 <__aeabi_dsub>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f1e6:	462a      	mov	r2, r5
 800f1e8:	4633      	mov	r3, r6
 800f1ea:	f7f1 fc99 	bl	8000b20 <__aeabi_dcmpgt>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	f040 8298 	bne.w	800f724 <_dtoa_r+0x95c>
 800f1f4:	462a      	mov	r2, r5
 800f1f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1fe:	f7f1 fc71 	bl	8000ae4 <__aeabi_dcmplt>
 800f202:	bb38      	cbnz	r0, 800f254 <_dtoa_r+0x48c>
 800f204:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f208:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f20c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f2c0 8157 	blt.w	800f4c2 <_dtoa_r+0x6fa>
 800f214:	2f0e      	cmp	r7, #14
 800f216:	f300 8154 	bgt.w	800f4c2 <_dtoa_r+0x6fa>
 800f21a:	4b4b      	ldr	r3, [pc, #300]	@ (800f348 <_dtoa_r+0x580>)
 800f21c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f220:	ed93 7b00 	vldr	d7, [r3]
 800f224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f226:	2b00      	cmp	r3, #0
 800f228:	ed8d 7b00 	vstr	d7, [sp]
 800f22c:	f280 80e5 	bge.w	800f3fa <_dtoa_r+0x632>
 800f230:	9b03      	ldr	r3, [sp, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	f300 80e1 	bgt.w	800f3fa <_dtoa_r+0x632>
 800f238:	d10c      	bne.n	800f254 <_dtoa_r+0x48c>
 800f23a:	2200      	movs	r2, #0
 800f23c:	4b47      	ldr	r3, [pc, #284]	@ (800f35c <_dtoa_r+0x594>)
 800f23e:	ec51 0b17 	vmov	r0, r1, d7
 800f242:	f7f1 f9dd 	bl	8000600 <__aeabi_dmul>
 800f246:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f24a:	f7f1 fc5f 	bl	8000b0c <__aeabi_dcmpge>
 800f24e:	2800      	cmp	r0, #0
 800f250:	f000 8266 	beq.w	800f720 <_dtoa_r+0x958>
 800f254:	2400      	movs	r4, #0
 800f256:	4625      	mov	r5, r4
 800f258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f25a:	4656      	mov	r6, sl
 800f25c:	ea6f 0803 	mvn.w	r8, r3
 800f260:	2700      	movs	r7, #0
 800f262:	4621      	mov	r1, r4
 800f264:	4648      	mov	r0, r9
 800f266:	f000 fcc1 	bl	800fbec <_Bfree>
 800f26a:	2d00      	cmp	r5, #0
 800f26c:	f000 80bd 	beq.w	800f3ea <_dtoa_r+0x622>
 800f270:	b12f      	cbz	r7, 800f27e <_dtoa_r+0x4b6>
 800f272:	42af      	cmp	r7, r5
 800f274:	d003      	beq.n	800f27e <_dtoa_r+0x4b6>
 800f276:	4639      	mov	r1, r7
 800f278:	4648      	mov	r0, r9
 800f27a:	f000 fcb7 	bl	800fbec <_Bfree>
 800f27e:	4629      	mov	r1, r5
 800f280:	4648      	mov	r0, r9
 800f282:	f000 fcb3 	bl	800fbec <_Bfree>
 800f286:	e0b0      	b.n	800f3ea <_dtoa_r+0x622>
 800f288:	07e2      	lsls	r2, r4, #31
 800f28a:	d505      	bpl.n	800f298 <_dtoa_r+0x4d0>
 800f28c:	3601      	adds	r6, #1
 800f28e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f292:	f7f1 f9b5 	bl	8000600 <__aeabi_dmul>
 800f296:	2301      	movs	r3, #1
 800f298:	1064      	asrs	r4, r4, #1
 800f29a:	3508      	adds	r5, #8
 800f29c:	e762      	b.n	800f164 <_dtoa_r+0x39c>
 800f29e:	2602      	movs	r6, #2
 800f2a0:	e765      	b.n	800f16e <_dtoa_r+0x3a6>
 800f2a2:	46b8      	mov	r8, r7
 800f2a4:	9c03      	ldr	r4, [sp, #12]
 800f2a6:	e784      	b.n	800f1b2 <_dtoa_r+0x3ea>
 800f2a8:	4b27      	ldr	r3, [pc, #156]	@ (800f348 <_dtoa_r+0x580>)
 800f2aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f2ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f2b0:	4454      	add	r4, sl
 800f2b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f2b6:	2900      	cmp	r1, #0
 800f2b8:	d054      	beq.n	800f364 <_dtoa_r+0x59c>
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	4928      	ldr	r1, [pc, #160]	@ (800f360 <_dtoa_r+0x598>)
 800f2be:	f7f1 fac9 	bl	8000854 <__aeabi_ddiv>
 800f2c2:	4633      	mov	r3, r6
 800f2c4:	4656      	mov	r6, sl
 800f2c6:	462a      	mov	r2, r5
 800f2c8:	f7f0 ffe2 	bl	8000290 <__aeabi_dsub>
 800f2cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f2d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2d4:	f7f1 fc44 	bl	8000b60 <__aeabi_d2iz>
 800f2d8:	4605      	mov	r5, r0
 800f2da:	f7f1 f927 	bl	800052c <__aeabi_i2d>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	3530      	adds	r5, #48	@ 0x30
 800f2e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2e8:	f7f0 ffd2 	bl	8000290 <__aeabi_dsub>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	f806 5b01 	strb.w	r5, [r6], #1
 800f2f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f2f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f2fc:	f7f1 fbf2 	bl	8000ae4 <__aeabi_dcmplt>
 800f300:	2800      	cmp	r0, #0
 800f302:	d172      	bne.n	800f3ea <_dtoa_r+0x622>
 800f304:	2000      	movs	r0, #0
 800f306:	4912      	ldr	r1, [pc, #72]	@ (800f350 <_dtoa_r+0x588>)
 800f308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f30c:	f7f0 ffc0 	bl	8000290 <__aeabi_dsub>
 800f310:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f314:	f7f1 fbe6 	bl	8000ae4 <__aeabi_dcmplt>
 800f318:	2800      	cmp	r0, #0
 800f31a:	f040 80b4 	bne.w	800f486 <_dtoa_r+0x6be>
 800f31e:	42a6      	cmp	r6, r4
 800f320:	f43f af70 	beq.w	800f204 <_dtoa_r+0x43c>
 800f324:	2200      	movs	r2, #0
 800f326:	4b0b      	ldr	r3, [pc, #44]	@ (800f354 <_dtoa_r+0x58c>)
 800f328:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f32c:	f7f1 f968 	bl	8000600 <__aeabi_dmul>
 800f330:	2200      	movs	r2, #0
 800f332:	4b08      	ldr	r3, [pc, #32]	@ (800f354 <_dtoa_r+0x58c>)
 800f334:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f338:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f33c:	f7f1 f960 	bl	8000600 <__aeabi_dmul>
 800f340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f344:	e7c4      	b.n	800f2d0 <_dtoa_r+0x508>
 800f346:	bf00      	nop
 800f348:	0802fe38 	.word	0x0802fe38
 800f34c:	0802fe10 	.word	0x0802fe10
 800f350:	3ff00000 	.word	0x3ff00000
 800f354:	40240000 	.word	0x40240000
 800f358:	401c0000 	.word	0x401c0000
 800f35c:	40140000 	.word	0x40140000
 800f360:	3fe00000 	.word	0x3fe00000
 800f364:	4631      	mov	r1, r6
 800f366:	4656      	mov	r6, sl
 800f368:	4628      	mov	r0, r5
 800f36a:	f7f1 f949 	bl	8000600 <__aeabi_dmul>
 800f36e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f370:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f378:	f7f1 fbf2 	bl	8000b60 <__aeabi_d2iz>
 800f37c:	4605      	mov	r5, r0
 800f37e:	f7f1 f8d5 	bl	800052c <__aeabi_i2d>
 800f382:	4602      	mov	r2, r0
 800f384:	3530      	adds	r5, #48	@ 0x30
 800f386:	460b      	mov	r3, r1
 800f388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f38c:	f7f0 ff80 	bl	8000290 <__aeabi_dsub>
 800f390:	f806 5b01 	strb.w	r5, [r6], #1
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	42a6      	cmp	r6, r4
 800f39a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f39e:	f04f 0200 	mov.w	r2, #0
 800f3a2:	d124      	bne.n	800f3ee <_dtoa_r+0x626>
 800f3a4:	4baf      	ldr	r3, [pc, #700]	@ (800f664 <_dtoa_r+0x89c>)
 800f3a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f3aa:	f7f0 ff73 	bl	8000294 <__adddf3>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3b6:	f7f1 fbb3 	bl	8000b20 <__aeabi_dcmpgt>
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	d163      	bne.n	800f486 <_dtoa_r+0x6be>
 800f3be:	2000      	movs	r0, #0
 800f3c0:	49a8      	ldr	r1, [pc, #672]	@ (800f664 <_dtoa_r+0x89c>)
 800f3c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f3c6:	f7f0 ff63 	bl	8000290 <__aeabi_dsub>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3d2:	f7f1 fb87 	bl	8000ae4 <__aeabi_dcmplt>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	f43f af14 	beq.w	800f204 <_dtoa_r+0x43c>
 800f3dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f3de:	1e73      	subs	r3, r6, #1
 800f3e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3e6:	2b30      	cmp	r3, #48	@ 0x30
 800f3e8:	d0f8      	beq.n	800f3dc <_dtoa_r+0x614>
 800f3ea:	4647      	mov	r7, r8
 800f3ec:	e03b      	b.n	800f466 <_dtoa_r+0x69e>
 800f3ee:	4b9e      	ldr	r3, [pc, #632]	@ (800f668 <_dtoa_r+0x8a0>)
 800f3f0:	f7f1 f906 	bl	8000600 <__aeabi_dmul>
 800f3f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3f8:	e7bc      	b.n	800f374 <_dtoa_r+0x5ac>
 800f3fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f3fe:	4656      	mov	r6, sl
 800f400:	4620      	mov	r0, r4
 800f402:	4629      	mov	r1, r5
 800f404:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f408:	f7f1 fa24 	bl	8000854 <__aeabi_ddiv>
 800f40c:	f7f1 fba8 	bl	8000b60 <__aeabi_d2iz>
 800f410:	4680      	mov	r8, r0
 800f412:	f7f1 f88b 	bl	800052c <__aeabi_i2d>
 800f416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f41a:	f7f1 f8f1 	bl	8000600 <__aeabi_dmul>
 800f41e:	4602      	mov	r2, r0
 800f420:	4620      	mov	r0, r4
 800f422:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f426:	460b      	mov	r3, r1
 800f428:	4629      	mov	r1, r5
 800f42a:	f7f0 ff31 	bl	8000290 <__aeabi_dsub>
 800f42e:	9d03      	ldr	r5, [sp, #12]
 800f430:	f806 4b01 	strb.w	r4, [r6], #1
 800f434:	eba6 040a 	sub.w	r4, r6, sl
 800f438:	4602      	mov	r2, r0
 800f43a:	460b      	mov	r3, r1
 800f43c:	42a5      	cmp	r5, r4
 800f43e:	d133      	bne.n	800f4a8 <_dtoa_r+0x6e0>
 800f440:	f7f0 ff28 	bl	8000294 <__adddf3>
 800f444:	4604      	mov	r4, r0
 800f446:	460d      	mov	r5, r1
 800f448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f44c:	f7f1 fb68 	bl	8000b20 <__aeabi_dcmpgt>
 800f450:	b9c0      	cbnz	r0, 800f484 <_dtoa_r+0x6bc>
 800f452:	4620      	mov	r0, r4
 800f454:	4629      	mov	r1, r5
 800f456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f45a:	f7f1 fb39 	bl	8000ad0 <__aeabi_dcmpeq>
 800f45e:	b110      	cbz	r0, 800f466 <_dtoa_r+0x69e>
 800f460:	f018 0f01 	tst.w	r8, #1
 800f464:	d10e      	bne.n	800f484 <_dtoa_r+0x6bc>
 800f466:	9902      	ldr	r1, [sp, #8]
 800f468:	4648      	mov	r0, r9
 800f46a:	f000 fbbf 	bl	800fbec <_Bfree>
 800f46e:	2300      	movs	r3, #0
 800f470:	3701      	adds	r7, #1
 800f472:	7033      	strb	r3, [r6, #0]
 800f474:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f476:	601f      	str	r7, [r3, #0]
 800f478:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f000 824c 	beq.w	800f918 <_dtoa_r+0xb50>
 800f480:	601e      	str	r6, [r3, #0]
 800f482:	e249      	b.n	800f918 <_dtoa_r+0xb50>
 800f484:	46b8      	mov	r8, r7
 800f486:	4633      	mov	r3, r6
 800f488:	461e      	mov	r6, r3
 800f48a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f48e:	2a39      	cmp	r2, #57	@ 0x39
 800f490:	d106      	bne.n	800f4a0 <_dtoa_r+0x6d8>
 800f492:	459a      	cmp	sl, r3
 800f494:	d1f8      	bne.n	800f488 <_dtoa_r+0x6c0>
 800f496:	2230      	movs	r2, #48	@ 0x30
 800f498:	f108 0801 	add.w	r8, r8, #1
 800f49c:	f88a 2000 	strb.w	r2, [sl]
 800f4a0:	781a      	ldrb	r2, [r3, #0]
 800f4a2:	3201      	adds	r2, #1
 800f4a4:	701a      	strb	r2, [r3, #0]
 800f4a6:	e7a0      	b.n	800f3ea <_dtoa_r+0x622>
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	4b6f      	ldr	r3, [pc, #444]	@ (800f668 <_dtoa_r+0x8a0>)
 800f4ac:	f7f1 f8a8 	bl	8000600 <__aeabi_dmul>
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	460d      	mov	r5, r1
 800f4b8:	f7f1 fb0a 	bl	8000ad0 <__aeabi_dcmpeq>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d09f      	beq.n	800f400 <_dtoa_r+0x638>
 800f4c0:	e7d1      	b.n	800f466 <_dtoa_r+0x69e>
 800f4c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4c4:	2a00      	cmp	r2, #0
 800f4c6:	f000 80ea 	beq.w	800f69e <_dtoa_r+0x8d6>
 800f4ca:	9a07      	ldr	r2, [sp, #28]
 800f4cc:	2a01      	cmp	r2, #1
 800f4ce:	f300 80cd 	bgt.w	800f66c <_dtoa_r+0x8a4>
 800f4d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f4d4:	2a00      	cmp	r2, #0
 800f4d6:	f000 80c1 	beq.w	800f65c <_dtoa_r+0x894>
 800f4da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f4de:	9c08      	ldr	r4, [sp, #32]
 800f4e0:	9e00      	ldr	r6, [sp, #0]
 800f4e2:	9a00      	ldr	r2, [sp, #0]
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	4648      	mov	r0, r9
 800f4e8:	441a      	add	r2, r3
 800f4ea:	9200      	str	r2, [sp, #0]
 800f4ec:	9a06      	ldr	r2, [sp, #24]
 800f4ee:	441a      	add	r2, r3
 800f4f0:	9206      	str	r2, [sp, #24]
 800f4f2:	f000 fc7b 	bl	800fdec <__i2b>
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	b166      	cbz	r6, 800f514 <_dtoa_r+0x74c>
 800f4fa:	9b06      	ldr	r3, [sp, #24]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	dd09      	ble.n	800f514 <_dtoa_r+0x74c>
 800f500:	42b3      	cmp	r3, r6
 800f502:	9a00      	ldr	r2, [sp, #0]
 800f504:	bfa8      	it	ge
 800f506:	4633      	movge	r3, r6
 800f508:	1ad2      	subs	r2, r2, r3
 800f50a:	1af6      	subs	r6, r6, r3
 800f50c:	9200      	str	r2, [sp, #0]
 800f50e:	9a06      	ldr	r2, [sp, #24]
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	9306      	str	r3, [sp, #24]
 800f514:	9b08      	ldr	r3, [sp, #32]
 800f516:	b30b      	cbz	r3, 800f55c <_dtoa_r+0x794>
 800f518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 80c6 	beq.w	800f6ac <_dtoa_r+0x8e4>
 800f520:	2c00      	cmp	r4, #0
 800f522:	f000 80c0 	beq.w	800f6a6 <_dtoa_r+0x8de>
 800f526:	4629      	mov	r1, r5
 800f528:	4622      	mov	r2, r4
 800f52a:	4648      	mov	r0, r9
 800f52c:	f000 fd18 	bl	800ff60 <__pow5mult>
 800f530:	9a02      	ldr	r2, [sp, #8]
 800f532:	4601      	mov	r1, r0
 800f534:	4605      	mov	r5, r0
 800f536:	4648      	mov	r0, r9
 800f538:	f000 fc6e 	bl	800fe18 <__multiply>
 800f53c:	9902      	ldr	r1, [sp, #8]
 800f53e:	4680      	mov	r8, r0
 800f540:	4648      	mov	r0, r9
 800f542:	f000 fb53 	bl	800fbec <_Bfree>
 800f546:	9b08      	ldr	r3, [sp, #32]
 800f548:	1b1b      	subs	r3, r3, r4
 800f54a:	9308      	str	r3, [sp, #32]
 800f54c:	f000 80b1 	beq.w	800f6b2 <_dtoa_r+0x8ea>
 800f550:	9a08      	ldr	r2, [sp, #32]
 800f552:	4641      	mov	r1, r8
 800f554:	4648      	mov	r0, r9
 800f556:	f000 fd03 	bl	800ff60 <__pow5mult>
 800f55a:	9002      	str	r0, [sp, #8]
 800f55c:	2101      	movs	r1, #1
 800f55e:	4648      	mov	r0, r9
 800f560:	f000 fc44 	bl	800fdec <__i2b>
 800f564:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f566:	4604      	mov	r4, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f000 81d9 	beq.w	800f920 <_dtoa_r+0xb58>
 800f56e:	461a      	mov	r2, r3
 800f570:	4601      	mov	r1, r0
 800f572:	4648      	mov	r0, r9
 800f574:	f000 fcf4 	bl	800ff60 <__pow5mult>
 800f578:	9b07      	ldr	r3, [sp, #28]
 800f57a:	4604      	mov	r4, r0
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	f300 809f 	bgt.w	800f6c0 <_dtoa_r+0x8f8>
 800f582:	9b04      	ldr	r3, [sp, #16]
 800f584:	2b00      	cmp	r3, #0
 800f586:	f040 8097 	bne.w	800f6b8 <_dtoa_r+0x8f0>
 800f58a:	9b05      	ldr	r3, [sp, #20]
 800f58c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f590:	2b00      	cmp	r3, #0
 800f592:	f040 8093 	bne.w	800f6bc <_dtoa_r+0x8f4>
 800f596:	9b05      	ldr	r3, [sp, #20]
 800f598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f59c:	0d1b      	lsrs	r3, r3, #20
 800f59e:	051b      	lsls	r3, r3, #20
 800f5a0:	b133      	cbz	r3, 800f5b0 <_dtoa_r+0x7e8>
 800f5a2:	9b00      	ldr	r3, [sp, #0]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	9b06      	ldr	r3, [sp, #24]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	9306      	str	r3, [sp, #24]
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	9308      	str	r3, [sp, #32]
 800f5b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f000 81b9 	beq.w	800f92c <_dtoa_r+0xb64>
 800f5ba:	6923      	ldr	r3, [r4, #16]
 800f5bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f5c0:	6918      	ldr	r0, [r3, #16]
 800f5c2:	f000 fbc7 	bl	800fd54 <__hi0bits>
 800f5c6:	f1c0 0020 	rsb	r0, r0, #32
 800f5ca:	9b06      	ldr	r3, [sp, #24]
 800f5cc:	4418      	add	r0, r3
 800f5ce:	f010 001f 	ands.w	r0, r0, #31
 800f5d2:	f000 8082 	beq.w	800f6da <_dtoa_r+0x912>
 800f5d6:	f1c0 0320 	rsb	r3, r0, #32
 800f5da:	2b04      	cmp	r3, #4
 800f5dc:	dd73      	ble.n	800f6c6 <_dtoa_r+0x8fe>
 800f5de:	f1c0 001c 	rsb	r0, r0, #28
 800f5e2:	9b00      	ldr	r3, [sp, #0]
 800f5e4:	4403      	add	r3, r0
 800f5e6:	4406      	add	r6, r0
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	9b06      	ldr	r3, [sp, #24]
 800f5ec:	4403      	add	r3, r0
 800f5ee:	9306      	str	r3, [sp, #24]
 800f5f0:	9b00      	ldr	r3, [sp, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	dd05      	ble.n	800f602 <_dtoa_r+0x83a>
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	9902      	ldr	r1, [sp, #8]
 800f5fa:	4648      	mov	r0, r9
 800f5fc:	f000 fd0a 	bl	8010014 <__lshift>
 800f600:	9002      	str	r0, [sp, #8]
 800f602:	9b06      	ldr	r3, [sp, #24]
 800f604:	2b00      	cmp	r3, #0
 800f606:	dd05      	ble.n	800f614 <_dtoa_r+0x84c>
 800f608:	4621      	mov	r1, r4
 800f60a:	461a      	mov	r2, r3
 800f60c:	4648      	mov	r0, r9
 800f60e:	f000 fd01 	bl	8010014 <__lshift>
 800f612:	4604      	mov	r4, r0
 800f614:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f616:	2b00      	cmp	r3, #0
 800f618:	d061      	beq.n	800f6de <_dtoa_r+0x916>
 800f61a:	4621      	mov	r1, r4
 800f61c:	9802      	ldr	r0, [sp, #8]
 800f61e:	f000 fd65 	bl	80100ec <__mcmp>
 800f622:	2800      	cmp	r0, #0
 800f624:	da5b      	bge.n	800f6de <_dtoa_r+0x916>
 800f626:	2300      	movs	r3, #0
 800f628:	220a      	movs	r2, #10
 800f62a:	9902      	ldr	r1, [sp, #8]
 800f62c:	4648      	mov	r0, r9
 800f62e:	f000 faff 	bl	800fc30 <__multadd>
 800f632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f634:	f107 38ff 	add.w	r8, r7, #4294967295
 800f638:	9002      	str	r0, [sp, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 8178 	beq.w	800f930 <_dtoa_r+0xb68>
 800f640:	4629      	mov	r1, r5
 800f642:	2300      	movs	r3, #0
 800f644:	220a      	movs	r2, #10
 800f646:	4648      	mov	r0, r9
 800f648:	f000 faf2 	bl	800fc30 <__multadd>
 800f64c:	f1bb 0f00 	cmp.w	fp, #0
 800f650:	4605      	mov	r5, r0
 800f652:	dc6f      	bgt.n	800f734 <_dtoa_r+0x96c>
 800f654:	9b07      	ldr	r3, [sp, #28]
 800f656:	2b02      	cmp	r3, #2
 800f658:	dc49      	bgt.n	800f6ee <_dtoa_r+0x926>
 800f65a:	e06b      	b.n	800f734 <_dtoa_r+0x96c>
 800f65c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f65e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f662:	e73c      	b.n	800f4de <_dtoa_r+0x716>
 800f664:	3fe00000 	.word	0x3fe00000
 800f668:	40240000 	.word	0x40240000
 800f66c:	9b03      	ldr	r3, [sp, #12]
 800f66e:	1e5c      	subs	r4, r3, #1
 800f670:	9b08      	ldr	r3, [sp, #32]
 800f672:	42a3      	cmp	r3, r4
 800f674:	db09      	blt.n	800f68a <_dtoa_r+0x8c2>
 800f676:	1b1c      	subs	r4, r3, r4
 800f678:	9b03      	ldr	r3, [sp, #12]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f6bf af30 	bge.w	800f4e0 <_dtoa_r+0x718>
 800f680:	9b00      	ldr	r3, [sp, #0]
 800f682:	9a03      	ldr	r2, [sp, #12]
 800f684:	1a9e      	subs	r6, r3, r2
 800f686:	2300      	movs	r3, #0
 800f688:	e72b      	b.n	800f4e2 <_dtoa_r+0x71a>
 800f68a:	9b08      	ldr	r3, [sp, #32]
 800f68c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f68e:	1ae3      	subs	r3, r4, r3
 800f690:	9408      	str	r4, [sp, #32]
 800f692:	9e00      	ldr	r6, [sp, #0]
 800f694:	2400      	movs	r4, #0
 800f696:	441a      	add	r2, r3
 800f698:	9b03      	ldr	r3, [sp, #12]
 800f69a:	920d      	str	r2, [sp, #52]	@ 0x34
 800f69c:	e721      	b.n	800f4e2 <_dtoa_r+0x71a>
 800f69e:	9c08      	ldr	r4, [sp, #32]
 800f6a0:	9e00      	ldr	r6, [sp, #0]
 800f6a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f6a4:	e728      	b.n	800f4f8 <_dtoa_r+0x730>
 800f6a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f6aa:	e751      	b.n	800f550 <_dtoa_r+0x788>
 800f6ac:	9a08      	ldr	r2, [sp, #32]
 800f6ae:	9902      	ldr	r1, [sp, #8]
 800f6b0:	e750      	b.n	800f554 <_dtoa_r+0x78c>
 800f6b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f6b6:	e751      	b.n	800f55c <_dtoa_r+0x794>
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	e779      	b.n	800f5b0 <_dtoa_r+0x7e8>
 800f6bc:	9b04      	ldr	r3, [sp, #16]
 800f6be:	e777      	b.n	800f5b0 <_dtoa_r+0x7e8>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	9308      	str	r3, [sp, #32]
 800f6c4:	e779      	b.n	800f5ba <_dtoa_r+0x7f2>
 800f6c6:	d093      	beq.n	800f5f0 <_dtoa_r+0x828>
 800f6c8:	331c      	adds	r3, #28
 800f6ca:	9a00      	ldr	r2, [sp, #0]
 800f6cc:	441a      	add	r2, r3
 800f6ce:	441e      	add	r6, r3
 800f6d0:	9200      	str	r2, [sp, #0]
 800f6d2:	9a06      	ldr	r2, [sp, #24]
 800f6d4:	441a      	add	r2, r3
 800f6d6:	9206      	str	r2, [sp, #24]
 800f6d8:	e78a      	b.n	800f5f0 <_dtoa_r+0x828>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	e7f4      	b.n	800f6c8 <_dtoa_r+0x900>
 800f6de:	9b03      	ldr	r3, [sp, #12]
 800f6e0:	46b8      	mov	r8, r7
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	dc20      	bgt.n	800f728 <_dtoa_r+0x960>
 800f6e6:	469b      	mov	fp, r3
 800f6e8:	9b07      	ldr	r3, [sp, #28]
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	dd1e      	ble.n	800f72c <_dtoa_r+0x964>
 800f6ee:	f1bb 0f00 	cmp.w	fp, #0
 800f6f2:	f47f adb1 	bne.w	800f258 <_dtoa_r+0x490>
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	465b      	mov	r3, fp
 800f6fa:	2205      	movs	r2, #5
 800f6fc:	4648      	mov	r0, r9
 800f6fe:	f000 fa97 	bl	800fc30 <__multadd>
 800f702:	4601      	mov	r1, r0
 800f704:	4604      	mov	r4, r0
 800f706:	9802      	ldr	r0, [sp, #8]
 800f708:	f000 fcf0 	bl	80100ec <__mcmp>
 800f70c:	2800      	cmp	r0, #0
 800f70e:	f77f ada3 	ble.w	800f258 <_dtoa_r+0x490>
 800f712:	4656      	mov	r6, sl
 800f714:	2331      	movs	r3, #49	@ 0x31
 800f716:	f108 0801 	add.w	r8, r8, #1
 800f71a:	f806 3b01 	strb.w	r3, [r6], #1
 800f71e:	e59f      	b.n	800f260 <_dtoa_r+0x498>
 800f720:	46b8      	mov	r8, r7
 800f722:	9c03      	ldr	r4, [sp, #12]
 800f724:	4625      	mov	r5, r4
 800f726:	e7f4      	b.n	800f712 <_dtoa_r+0x94a>
 800f728:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f000 8102 	beq.w	800f938 <_dtoa_r+0xb70>
 800f734:	2e00      	cmp	r6, #0
 800f736:	dd05      	ble.n	800f744 <_dtoa_r+0x97c>
 800f738:	4629      	mov	r1, r5
 800f73a:	4632      	mov	r2, r6
 800f73c:	4648      	mov	r0, r9
 800f73e:	f000 fc69 	bl	8010014 <__lshift>
 800f742:	4605      	mov	r5, r0
 800f744:	9b08      	ldr	r3, [sp, #32]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d05c      	beq.n	800f804 <_dtoa_r+0xa3c>
 800f74a:	6869      	ldr	r1, [r5, #4]
 800f74c:	4648      	mov	r0, r9
 800f74e:	f000 fa0d 	bl	800fb6c <_Balloc>
 800f752:	4606      	mov	r6, r0
 800f754:	b928      	cbnz	r0, 800f762 <_dtoa_r+0x99a>
 800f756:	4b83      	ldr	r3, [pc, #524]	@ (800f964 <_dtoa_r+0xb9c>)
 800f758:	4602      	mov	r2, r0
 800f75a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f75e:	f7ff bb4a 	b.w	800edf6 <_dtoa_r+0x2e>
 800f762:	692a      	ldr	r2, [r5, #16]
 800f764:	f105 010c 	add.w	r1, r5, #12
 800f768:	300c      	adds	r0, #12
 800f76a:	3202      	adds	r2, #2
 800f76c:	0092      	lsls	r2, r2, #2
 800f76e:	f7ff fa88 	bl	800ec82 <memcpy>
 800f772:	2201      	movs	r2, #1
 800f774:	4631      	mov	r1, r6
 800f776:	4648      	mov	r0, r9
 800f778:	f000 fc4c 	bl	8010014 <__lshift>
 800f77c:	f10a 0301 	add.w	r3, sl, #1
 800f780:	462f      	mov	r7, r5
 800f782:	4605      	mov	r5, r0
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	eb0a 030b 	add.w	r3, sl, fp
 800f78a:	9308      	str	r3, [sp, #32]
 800f78c:	9b04      	ldr	r3, [sp, #16]
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	9306      	str	r3, [sp, #24]
 800f794:	9b00      	ldr	r3, [sp, #0]
 800f796:	4621      	mov	r1, r4
 800f798:	9802      	ldr	r0, [sp, #8]
 800f79a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f79e:	f7ff fa83 	bl	800eca8 <quorem>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	4639      	mov	r1, r7
 800f7a6:	9003      	str	r0, [sp, #12]
 800f7a8:	3330      	adds	r3, #48	@ 0x30
 800f7aa:	9802      	ldr	r0, [sp, #8]
 800f7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ae:	f000 fc9d 	bl	80100ec <__mcmp>
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	9004      	str	r0, [sp, #16]
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	4648      	mov	r0, r9
 800f7ba:	f000 fcb3 	bl	8010124 <__mdiff>
 800f7be:	68c2      	ldr	r2, [r0, #12]
 800f7c0:	4606      	mov	r6, r0
 800f7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7c4:	bb02      	cbnz	r2, 800f808 <_dtoa_r+0xa40>
 800f7c6:	4601      	mov	r1, r0
 800f7c8:	9802      	ldr	r0, [sp, #8]
 800f7ca:	f000 fc8f 	bl	80100ec <__mcmp>
 800f7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	4631      	mov	r1, r6
 800f7d4:	4648      	mov	r0, r9
 800f7d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f7d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7da:	f000 fa07 	bl	800fbec <_Bfree>
 800f7de:	9b07      	ldr	r3, [sp, #28]
 800f7e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f7e2:	9e00      	ldr	r6, [sp, #0]
 800f7e4:	ea42 0103 	orr.w	r1, r2, r3
 800f7e8:	9b06      	ldr	r3, [sp, #24]
 800f7ea:	4319      	orrs	r1, r3
 800f7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ee:	d10d      	bne.n	800f80c <_dtoa_r+0xa44>
 800f7f0:	2b39      	cmp	r3, #57	@ 0x39
 800f7f2:	d027      	beq.n	800f844 <_dtoa_r+0xa7c>
 800f7f4:	9a04      	ldr	r2, [sp, #16]
 800f7f6:	2a00      	cmp	r2, #0
 800f7f8:	dd01      	ble.n	800f7fe <_dtoa_r+0xa36>
 800f7fa:	9b03      	ldr	r3, [sp, #12]
 800f7fc:	3331      	adds	r3, #49	@ 0x31
 800f7fe:	f88b 3000 	strb.w	r3, [fp]
 800f802:	e52e      	b.n	800f262 <_dtoa_r+0x49a>
 800f804:	4628      	mov	r0, r5
 800f806:	e7b9      	b.n	800f77c <_dtoa_r+0x9b4>
 800f808:	2201      	movs	r2, #1
 800f80a:	e7e2      	b.n	800f7d2 <_dtoa_r+0xa0a>
 800f80c:	9904      	ldr	r1, [sp, #16]
 800f80e:	2900      	cmp	r1, #0
 800f810:	db04      	blt.n	800f81c <_dtoa_r+0xa54>
 800f812:	9807      	ldr	r0, [sp, #28]
 800f814:	4301      	orrs	r1, r0
 800f816:	9806      	ldr	r0, [sp, #24]
 800f818:	4301      	orrs	r1, r0
 800f81a:	d120      	bne.n	800f85e <_dtoa_r+0xa96>
 800f81c:	2a00      	cmp	r2, #0
 800f81e:	ddee      	ble.n	800f7fe <_dtoa_r+0xa36>
 800f820:	2201      	movs	r2, #1
 800f822:	9902      	ldr	r1, [sp, #8]
 800f824:	4648      	mov	r0, r9
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	f000 fbf4 	bl	8010014 <__lshift>
 800f82c:	4621      	mov	r1, r4
 800f82e:	9002      	str	r0, [sp, #8]
 800f830:	f000 fc5c 	bl	80100ec <__mcmp>
 800f834:	2800      	cmp	r0, #0
 800f836:	9b00      	ldr	r3, [sp, #0]
 800f838:	dc02      	bgt.n	800f840 <_dtoa_r+0xa78>
 800f83a:	d1e0      	bne.n	800f7fe <_dtoa_r+0xa36>
 800f83c:	07da      	lsls	r2, r3, #31
 800f83e:	d5de      	bpl.n	800f7fe <_dtoa_r+0xa36>
 800f840:	2b39      	cmp	r3, #57	@ 0x39
 800f842:	d1da      	bne.n	800f7fa <_dtoa_r+0xa32>
 800f844:	2339      	movs	r3, #57	@ 0x39
 800f846:	f88b 3000 	strb.w	r3, [fp]
 800f84a:	4633      	mov	r3, r6
 800f84c:	461e      	mov	r6, r3
 800f84e:	3b01      	subs	r3, #1
 800f850:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f854:	2a39      	cmp	r2, #57	@ 0x39
 800f856:	d04f      	beq.n	800f8f8 <_dtoa_r+0xb30>
 800f858:	3201      	adds	r2, #1
 800f85a:	701a      	strb	r2, [r3, #0]
 800f85c:	e501      	b.n	800f262 <_dtoa_r+0x49a>
 800f85e:	2a00      	cmp	r2, #0
 800f860:	dd03      	ble.n	800f86a <_dtoa_r+0xaa2>
 800f862:	2b39      	cmp	r3, #57	@ 0x39
 800f864:	d0ee      	beq.n	800f844 <_dtoa_r+0xa7c>
 800f866:	3301      	adds	r3, #1
 800f868:	e7c9      	b.n	800f7fe <_dtoa_r+0xa36>
 800f86a:	9a00      	ldr	r2, [sp, #0]
 800f86c:	9908      	ldr	r1, [sp, #32]
 800f86e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f872:	428a      	cmp	r2, r1
 800f874:	d029      	beq.n	800f8ca <_dtoa_r+0xb02>
 800f876:	2300      	movs	r3, #0
 800f878:	220a      	movs	r2, #10
 800f87a:	9902      	ldr	r1, [sp, #8]
 800f87c:	4648      	mov	r0, r9
 800f87e:	f000 f9d7 	bl	800fc30 <__multadd>
 800f882:	42af      	cmp	r7, r5
 800f884:	9002      	str	r0, [sp, #8]
 800f886:	f04f 0300 	mov.w	r3, #0
 800f88a:	f04f 020a 	mov.w	r2, #10
 800f88e:	4639      	mov	r1, r7
 800f890:	4648      	mov	r0, r9
 800f892:	d107      	bne.n	800f8a4 <_dtoa_r+0xadc>
 800f894:	f000 f9cc 	bl	800fc30 <__multadd>
 800f898:	4607      	mov	r7, r0
 800f89a:	4605      	mov	r5, r0
 800f89c:	9b00      	ldr	r3, [sp, #0]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	e777      	b.n	800f794 <_dtoa_r+0x9cc>
 800f8a4:	f000 f9c4 	bl	800fc30 <__multadd>
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4607      	mov	r7, r0
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	220a      	movs	r2, #10
 800f8b0:	4648      	mov	r0, r9
 800f8b2:	f000 f9bd 	bl	800fc30 <__multadd>
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	e7f0      	b.n	800f89c <_dtoa_r+0xad4>
 800f8ba:	f1bb 0f00 	cmp.w	fp, #0
 800f8be:	f04f 0700 	mov.w	r7, #0
 800f8c2:	bfcc      	ite	gt
 800f8c4:	465e      	movgt	r6, fp
 800f8c6:	2601      	movle	r6, #1
 800f8c8:	4456      	add	r6, sl
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	9902      	ldr	r1, [sp, #8]
 800f8ce:	4648      	mov	r0, r9
 800f8d0:	9300      	str	r3, [sp, #0]
 800f8d2:	f000 fb9f 	bl	8010014 <__lshift>
 800f8d6:	4621      	mov	r1, r4
 800f8d8:	9002      	str	r0, [sp, #8]
 800f8da:	f000 fc07 	bl	80100ec <__mcmp>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	dcb3      	bgt.n	800f84a <_dtoa_r+0xa82>
 800f8e2:	d102      	bne.n	800f8ea <_dtoa_r+0xb22>
 800f8e4:	9b00      	ldr	r3, [sp, #0]
 800f8e6:	07db      	lsls	r3, r3, #31
 800f8e8:	d4af      	bmi.n	800f84a <_dtoa_r+0xa82>
 800f8ea:	4633      	mov	r3, r6
 800f8ec:	461e      	mov	r6, r3
 800f8ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8f2:	2a30      	cmp	r2, #48	@ 0x30
 800f8f4:	d0fa      	beq.n	800f8ec <_dtoa_r+0xb24>
 800f8f6:	e4b4      	b.n	800f262 <_dtoa_r+0x49a>
 800f8f8:	459a      	cmp	sl, r3
 800f8fa:	d1a7      	bne.n	800f84c <_dtoa_r+0xa84>
 800f8fc:	2331      	movs	r3, #49	@ 0x31
 800f8fe:	f108 0801 	add.w	r8, r8, #1
 800f902:	f88a 3000 	strb.w	r3, [sl]
 800f906:	e4ac      	b.n	800f262 <_dtoa_r+0x49a>
 800f908:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f90a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f968 <_dtoa_r+0xba0>
 800f90e:	b11b      	cbz	r3, 800f918 <_dtoa_r+0xb50>
 800f910:	f10a 0308 	add.w	r3, sl, #8
 800f914:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f916:	6013      	str	r3, [r2, #0]
 800f918:	4650      	mov	r0, sl
 800f91a:	b017      	add	sp, #92	@ 0x5c
 800f91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f920:	9b07      	ldr	r3, [sp, #28]
 800f922:	2b01      	cmp	r3, #1
 800f924:	f77f ae2d 	ble.w	800f582 <_dtoa_r+0x7ba>
 800f928:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f92a:	9308      	str	r3, [sp, #32]
 800f92c:	2001      	movs	r0, #1
 800f92e:	e64c      	b.n	800f5ca <_dtoa_r+0x802>
 800f930:	f1bb 0f00 	cmp.w	fp, #0
 800f934:	f77f aed8 	ble.w	800f6e8 <_dtoa_r+0x920>
 800f938:	4656      	mov	r6, sl
 800f93a:	4621      	mov	r1, r4
 800f93c:	9802      	ldr	r0, [sp, #8]
 800f93e:	f7ff f9b3 	bl	800eca8 <quorem>
 800f942:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f946:	f806 3b01 	strb.w	r3, [r6], #1
 800f94a:	eba6 020a 	sub.w	r2, r6, sl
 800f94e:	4593      	cmp	fp, r2
 800f950:	ddb3      	ble.n	800f8ba <_dtoa_r+0xaf2>
 800f952:	2300      	movs	r3, #0
 800f954:	220a      	movs	r2, #10
 800f956:	9902      	ldr	r1, [sp, #8]
 800f958:	4648      	mov	r0, r9
 800f95a:	f000 f969 	bl	800fc30 <__multadd>
 800f95e:	9002      	str	r0, [sp, #8]
 800f960:	e7eb      	b.n	800f93a <_dtoa_r+0xb72>
 800f962:	bf00      	nop
 800f964:	0802fce1 	.word	0x0802fce1
 800f968:	0802fc65 	.word	0x0802fc65

0800f96c <_free_r>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	4605      	mov	r5, r0
 800f970:	2900      	cmp	r1, #0
 800f972:	d041      	beq.n	800f9f8 <_free_r+0x8c>
 800f974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f978:	1f0c      	subs	r4, r1, #4
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	bfb8      	it	lt
 800f97e:	18e4      	addlt	r4, r4, r3
 800f980:	f000 f8e8 	bl	800fb54 <__malloc_lock>
 800f984:	4a1d      	ldr	r2, [pc, #116]	@ (800f9fc <_free_r+0x90>)
 800f986:	6813      	ldr	r3, [r2, #0]
 800f988:	b933      	cbnz	r3, 800f998 <_free_r+0x2c>
 800f98a:	6063      	str	r3, [r4, #4]
 800f98c:	6014      	str	r4, [r2, #0]
 800f98e:	4628      	mov	r0, r5
 800f990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f994:	f000 b8e4 	b.w	800fb60 <__malloc_unlock>
 800f998:	42a3      	cmp	r3, r4
 800f99a:	d908      	bls.n	800f9ae <_free_r+0x42>
 800f99c:	6820      	ldr	r0, [r4, #0]
 800f99e:	1821      	adds	r1, r4, r0
 800f9a0:	428b      	cmp	r3, r1
 800f9a2:	bf01      	itttt	eq
 800f9a4:	6819      	ldreq	r1, [r3, #0]
 800f9a6:	685b      	ldreq	r3, [r3, #4]
 800f9a8:	1809      	addeq	r1, r1, r0
 800f9aa:	6021      	streq	r1, [r4, #0]
 800f9ac:	e7ed      	b.n	800f98a <_free_r+0x1e>
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	b10b      	cbz	r3, 800f9b8 <_free_r+0x4c>
 800f9b4:	42a3      	cmp	r3, r4
 800f9b6:	d9fa      	bls.n	800f9ae <_free_r+0x42>
 800f9b8:	6811      	ldr	r1, [r2, #0]
 800f9ba:	1850      	adds	r0, r2, r1
 800f9bc:	42a0      	cmp	r0, r4
 800f9be:	d10b      	bne.n	800f9d8 <_free_r+0x6c>
 800f9c0:	6820      	ldr	r0, [r4, #0]
 800f9c2:	4401      	add	r1, r0
 800f9c4:	1850      	adds	r0, r2, r1
 800f9c6:	6011      	str	r1, [r2, #0]
 800f9c8:	4283      	cmp	r3, r0
 800f9ca:	d1e0      	bne.n	800f98e <_free_r+0x22>
 800f9cc:	6818      	ldr	r0, [r3, #0]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	4408      	add	r0, r1
 800f9d2:	6053      	str	r3, [r2, #4]
 800f9d4:	6010      	str	r0, [r2, #0]
 800f9d6:	e7da      	b.n	800f98e <_free_r+0x22>
 800f9d8:	d902      	bls.n	800f9e0 <_free_r+0x74>
 800f9da:	230c      	movs	r3, #12
 800f9dc:	602b      	str	r3, [r5, #0]
 800f9de:	e7d6      	b.n	800f98e <_free_r+0x22>
 800f9e0:	6820      	ldr	r0, [r4, #0]
 800f9e2:	1821      	adds	r1, r4, r0
 800f9e4:	428b      	cmp	r3, r1
 800f9e6:	bf02      	ittt	eq
 800f9e8:	6819      	ldreq	r1, [r3, #0]
 800f9ea:	685b      	ldreq	r3, [r3, #4]
 800f9ec:	1809      	addeq	r1, r1, r0
 800f9ee:	6063      	str	r3, [r4, #4]
 800f9f0:	bf08      	it	eq
 800f9f2:	6021      	streq	r1, [r4, #0]
 800f9f4:	6054      	str	r4, [r2, #4]
 800f9f6:	e7ca      	b.n	800f98e <_free_r+0x22>
 800f9f8:	bd38      	pop	{r3, r4, r5, pc}
 800f9fa:	bf00      	nop
 800f9fc:	20013bfc 	.word	0x20013bfc

0800fa00 <malloc>:
 800fa00:	4b02      	ldr	r3, [pc, #8]	@ (800fa0c <malloc+0xc>)
 800fa02:	4601      	mov	r1, r0
 800fa04:	6818      	ldr	r0, [r3, #0]
 800fa06:	f000 b825 	b.w	800fa54 <_malloc_r>
 800fa0a:	bf00      	nop
 800fa0c:	20000030 	.word	0x20000030

0800fa10 <sbrk_aligned>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	4e0f      	ldr	r6, [pc, #60]	@ (800fa50 <sbrk_aligned+0x40>)
 800fa14:	460c      	mov	r4, r1
 800fa16:	4605      	mov	r5, r0
 800fa18:	6831      	ldr	r1, [r6, #0]
 800fa1a:	b911      	cbnz	r1, 800fa22 <sbrk_aligned+0x12>
 800fa1c:	f001 fe12 	bl	8011644 <_sbrk_r>
 800fa20:	6030      	str	r0, [r6, #0]
 800fa22:	4621      	mov	r1, r4
 800fa24:	4628      	mov	r0, r5
 800fa26:	f001 fe0d 	bl	8011644 <_sbrk_r>
 800fa2a:	1c43      	adds	r3, r0, #1
 800fa2c:	d103      	bne.n	800fa36 <sbrk_aligned+0x26>
 800fa2e:	f04f 34ff 	mov.w	r4, #4294967295
 800fa32:	4620      	mov	r0, r4
 800fa34:	bd70      	pop	{r4, r5, r6, pc}
 800fa36:	1cc4      	adds	r4, r0, #3
 800fa38:	f024 0403 	bic.w	r4, r4, #3
 800fa3c:	42a0      	cmp	r0, r4
 800fa3e:	d0f8      	beq.n	800fa32 <sbrk_aligned+0x22>
 800fa40:	1a21      	subs	r1, r4, r0
 800fa42:	4628      	mov	r0, r5
 800fa44:	f001 fdfe 	bl	8011644 <_sbrk_r>
 800fa48:	3001      	adds	r0, #1
 800fa4a:	d1f2      	bne.n	800fa32 <sbrk_aligned+0x22>
 800fa4c:	e7ef      	b.n	800fa2e <sbrk_aligned+0x1e>
 800fa4e:	bf00      	nop
 800fa50:	20013bf8 	.word	0x20013bf8

0800fa54 <_malloc_r>:
 800fa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa58:	1ccd      	adds	r5, r1, #3
 800fa5a:	4606      	mov	r6, r0
 800fa5c:	f025 0503 	bic.w	r5, r5, #3
 800fa60:	3508      	adds	r5, #8
 800fa62:	2d0c      	cmp	r5, #12
 800fa64:	bf38      	it	cc
 800fa66:	250c      	movcc	r5, #12
 800fa68:	2d00      	cmp	r5, #0
 800fa6a:	db01      	blt.n	800fa70 <_malloc_r+0x1c>
 800fa6c:	42a9      	cmp	r1, r5
 800fa6e:	d904      	bls.n	800fa7a <_malloc_r+0x26>
 800fa70:	230c      	movs	r3, #12
 800fa72:	6033      	str	r3, [r6, #0]
 800fa74:	2000      	movs	r0, #0
 800fa76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb50 <_malloc_r+0xfc>
 800fa7e:	f000 f869 	bl	800fb54 <__malloc_lock>
 800fa82:	f8d8 3000 	ldr.w	r3, [r8]
 800fa86:	461c      	mov	r4, r3
 800fa88:	bb44      	cbnz	r4, 800fadc <_malloc_r+0x88>
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	f7ff ffbf 	bl	800fa10 <sbrk_aligned>
 800fa92:	1c43      	adds	r3, r0, #1
 800fa94:	4604      	mov	r4, r0
 800fa96:	d158      	bne.n	800fb4a <_malloc_r+0xf6>
 800fa98:	f8d8 4000 	ldr.w	r4, [r8]
 800fa9c:	4627      	mov	r7, r4
 800fa9e:	2f00      	cmp	r7, #0
 800faa0:	d143      	bne.n	800fb2a <_malloc_r+0xd6>
 800faa2:	2c00      	cmp	r4, #0
 800faa4:	d04b      	beq.n	800fb3e <_malloc_r+0xea>
 800faa6:	6823      	ldr	r3, [r4, #0]
 800faa8:	4639      	mov	r1, r7
 800faaa:	4630      	mov	r0, r6
 800faac:	eb04 0903 	add.w	r9, r4, r3
 800fab0:	f001 fdc8 	bl	8011644 <_sbrk_r>
 800fab4:	4581      	cmp	r9, r0
 800fab6:	d142      	bne.n	800fb3e <_malloc_r+0xea>
 800fab8:	6821      	ldr	r1, [r4, #0]
 800faba:	4630      	mov	r0, r6
 800fabc:	1a6d      	subs	r5, r5, r1
 800fabe:	4629      	mov	r1, r5
 800fac0:	f7ff ffa6 	bl	800fa10 <sbrk_aligned>
 800fac4:	3001      	adds	r0, #1
 800fac6:	d03a      	beq.n	800fb3e <_malloc_r+0xea>
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	442b      	add	r3, r5
 800facc:	6023      	str	r3, [r4, #0]
 800face:	f8d8 3000 	ldr.w	r3, [r8]
 800fad2:	685a      	ldr	r2, [r3, #4]
 800fad4:	bb62      	cbnz	r2, 800fb30 <_malloc_r+0xdc>
 800fad6:	f8c8 7000 	str.w	r7, [r8]
 800fada:	e00f      	b.n	800fafc <_malloc_r+0xa8>
 800fadc:	6822      	ldr	r2, [r4, #0]
 800fade:	1b52      	subs	r2, r2, r5
 800fae0:	d420      	bmi.n	800fb24 <_malloc_r+0xd0>
 800fae2:	2a0b      	cmp	r2, #11
 800fae4:	d917      	bls.n	800fb16 <_malloc_r+0xc2>
 800fae6:	1961      	adds	r1, r4, r5
 800fae8:	42a3      	cmp	r3, r4
 800faea:	6025      	str	r5, [r4, #0]
 800faec:	bf18      	it	ne
 800faee:	6059      	strne	r1, [r3, #4]
 800faf0:	6863      	ldr	r3, [r4, #4]
 800faf2:	bf08      	it	eq
 800faf4:	f8c8 1000 	streq.w	r1, [r8]
 800faf8:	5162      	str	r2, [r4, r5]
 800fafa:	604b      	str	r3, [r1, #4]
 800fafc:	4630      	mov	r0, r6
 800fafe:	f000 f82f 	bl	800fb60 <__malloc_unlock>
 800fb02:	f104 000b 	add.w	r0, r4, #11
 800fb06:	1d23      	adds	r3, r4, #4
 800fb08:	f020 0007 	bic.w	r0, r0, #7
 800fb0c:	1ac2      	subs	r2, r0, r3
 800fb0e:	bf1c      	itt	ne
 800fb10:	1a1b      	subne	r3, r3, r0
 800fb12:	50a3      	strne	r3, [r4, r2]
 800fb14:	e7af      	b.n	800fa76 <_malloc_r+0x22>
 800fb16:	6862      	ldr	r2, [r4, #4]
 800fb18:	42a3      	cmp	r3, r4
 800fb1a:	bf0c      	ite	eq
 800fb1c:	f8c8 2000 	streq.w	r2, [r8]
 800fb20:	605a      	strne	r2, [r3, #4]
 800fb22:	e7eb      	b.n	800fafc <_malloc_r+0xa8>
 800fb24:	4623      	mov	r3, r4
 800fb26:	6864      	ldr	r4, [r4, #4]
 800fb28:	e7ae      	b.n	800fa88 <_malloc_r+0x34>
 800fb2a:	463c      	mov	r4, r7
 800fb2c:	687f      	ldr	r7, [r7, #4]
 800fb2e:	e7b6      	b.n	800fa9e <_malloc_r+0x4a>
 800fb30:	461a      	mov	r2, r3
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	42a3      	cmp	r3, r4
 800fb36:	d1fb      	bne.n	800fb30 <_malloc_r+0xdc>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	6053      	str	r3, [r2, #4]
 800fb3c:	e7de      	b.n	800fafc <_malloc_r+0xa8>
 800fb3e:	230c      	movs	r3, #12
 800fb40:	4630      	mov	r0, r6
 800fb42:	6033      	str	r3, [r6, #0]
 800fb44:	f000 f80c 	bl	800fb60 <__malloc_unlock>
 800fb48:	e794      	b.n	800fa74 <_malloc_r+0x20>
 800fb4a:	6005      	str	r5, [r0, #0]
 800fb4c:	e7d6      	b.n	800fafc <_malloc_r+0xa8>
 800fb4e:	bf00      	nop
 800fb50:	20013bfc 	.word	0x20013bfc

0800fb54 <__malloc_lock>:
 800fb54:	4801      	ldr	r0, [pc, #4]	@ (800fb5c <__malloc_lock+0x8>)
 800fb56:	f7ff b884 	b.w	800ec62 <__retarget_lock_acquire_recursive>
 800fb5a:	bf00      	nop
 800fb5c:	20013bf4 	.word	0x20013bf4

0800fb60 <__malloc_unlock>:
 800fb60:	4801      	ldr	r0, [pc, #4]	@ (800fb68 <__malloc_unlock+0x8>)
 800fb62:	f7ff b87f 	b.w	800ec64 <__retarget_lock_release_recursive>
 800fb66:	bf00      	nop
 800fb68:	20013bf4 	.word	0x20013bf4

0800fb6c <_Balloc>:
 800fb6c:	b570      	push	{r4, r5, r6, lr}
 800fb6e:	69c6      	ldr	r6, [r0, #28]
 800fb70:	4604      	mov	r4, r0
 800fb72:	460d      	mov	r5, r1
 800fb74:	b976      	cbnz	r6, 800fb94 <_Balloc+0x28>
 800fb76:	2010      	movs	r0, #16
 800fb78:	f7ff ff42 	bl	800fa00 <malloc>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	61e0      	str	r0, [r4, #28]
 800fb80:	b920      	cbnz	r0, 800fb8c <_Balloc+0x20>
 800fb82:	4b18      	ldr	r3, [pc, #96]	@ (800fbe4 <_Balloc+0x78>)
 800fb84:	216b      	movs	r1, #107	@ 0x6b
 800fb86:	4818      	ldr	r0, [pc, #96]	@ (800fbe8 <_Balloc+0x7c>)
 800fb88:	f001 fd76 	bl	8011678 <__assert_func>
 800fb8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb90:	6006      	str	r6, [r0, #0]
 800fb92:	60c6      	str	r6, [r0, #12]
 800fb94:	69e6      	ldr	r6, [r4, #28]
 800fb96:	68f3      	ldr	r3, [r6, #12]
 800fb98:	b183      	cbz	r3, 800fbbc <_Balloc+0x50>
 800fb9a:	69e3      	ldr	r3, [r4, #28]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fba2:	b9b8      	cbnz	r0, 800fbd4 <_Balloc+0x68>
 800fba4:	2101      	movs	r1, #1
 800fba6:	4620      	mov	r0, r4
 800fba8:	fa01 f605 	lsl.w	r6, r1, r5
 800fbac:	1d72      	adds	r2, r6, #5
 800fbae:	0092      	lsls	r2, r2, #2
 800fbb0:	f001 fd80 	bl	80116b4 <_calloc_r>
 800fbb4:	b160      	cbz	r0, 800fbd0 <_Balloc+0x64>
 800fbb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbba:	e00e      	b.n	800fbda <_Balloc+0x6e>
 800fbbc:	2221      	movs	r2, #33	@ 0x21
 800fbbe:	2104      	movs	r1, #4
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f001 fd77 	bl	80116b4 <_calloc_r>
 800fbc6:	69e3      	ldr	r3, [r4, #28]
 800fbc8:	60f0      	str	r0, [r6, #12]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1e4      	bne.n	800fb9a <_Balloc+0x2e>
 800fbd0:	2000      	movs	r0, #0
 800fbd2:	bd70      	pop	{r4, r5, r6, pc}
 800fbd4:	6802      	ldr	r2, [r0, #0]
 800fbd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fbe0:	e7f7      	b.n	800fbd2 <_Balloc+0x66>
 800fbe2:	bf00      	nop
 800fbe4:	0802fc72 	.word	0x0802fc72
 800fbe8:	0802fcf2 	.word	0x0802fcf2

0800fbec <_Bfree>:
 800fbec:	b570      	push	{r4, r5, r6, lr}
 800fbee:	69c6      	ldr	r6, [r0, #28]
 800fbf0:	4605      	mov	r5, r0
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	b976      	cbnz	r6, 800fc14 <_Bfree+0x28>
 800fbf6:	2010      	movs	r0, #16
 800fbf8:	f7ff ff02 	bl	800fa00 <malloc>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	61e8      	str	r0, [r5, #28]
 800fc00:	b920      	cbnz	r0, 800fc0c <_Bfree+0x20>
 800fc02:	4b09      	ldr	r3, [pc, #36]	@ (800fc28 <_Bfree+0x3c>)
 800fc04:	218f      	movs	r1, #143	@ 0x8f
 800fc06:	4809      	ldr	r0, [pc, #36]	@ (800fc2c <_Bfree+0x40>)
 800fc08:	f001 fd36 	bl	8011678 <__assert_func>
 800fc0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc10:	6006      	str	r6, [r0, #0]
 800fc12:	60c6      	str	r6, [r0, #12]
 800fc14:	b13c      	cbz	r4, 800fc26 <_Bfree+0x3a>
 800fc16:	69eb      	ldr	r3, [r5, #28]
 800fc18:	6862      	ldr	r2, [r4, #4]
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc20:	6021      	str	r1, [r4, #0]
 800fc22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc26:	bd70      	pop	{r4, r5, r6, pc}
 800fc28:	0802fc72 	.word	0x0802fc72
 800fc2c:	0802fcf2 	.word	0x0802fcf2

0800fc30 <__multadd>:
 800fc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc34:	f101 0c14 	add.w	ip, r1, #20
 800fc38:	4607      	mov	r7, r0
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	461e      	mov	r6, r3
 800fc3e:	690d      	ldr	r5, [r1, #16]
 800fc40:	2000      	movs	r0, #0
 800fc42:	f8dc 3000 	ldr.w	r3, [ip]
 800fc46:	3001      	adds	r0, #1
 800fc48:	b299      	uxth	r1, r3
 800fc4a:	4285      	cmp	r5, r0
 800fc4c:	fb02 6101 	mla	r1, r2, r1, r6
 800fc50:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc54:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800fc58:	b289      	uxth	r1, r1
 800fc5a:	fb02 3306 	mla	r3, r2, r6, r3
 800fc5e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc66:	f84c 1b04 	str.w	r1, [ip], #4
 800fc6a:	dcea      	bgt.n	800fc42 <__multadd+0x12>
 800fc6c:	b30e      	cbz	r6, 800fcb2 <__multadd+0x82>
 800fc6e:	68a3      	ldr	r3, [r4, #8]
 800fc70:	42ab      	cmp	r3, r5
 800fc72:	dc19      	bgt.n	800fca8 <__multadd+0x78>
 800fc74:	6861      	ldr	r1, [r4, #4]
 800fc76:	4638      	mov	r0, r7
 800fc78:	3101      	adds	r1, #1
 800fc7a:	f7ff ff77 	bl	800fb6c <_Balloc>
 800fc7e:	4680      	mov	r8, r0
 800fc80:	b928      	cbnz	r0, 800fc8e <__multadd+0x5e>
 800fc82:	4602      	mov	r2, r0
 800fc84:	4b0c      	ldr	r3, [pc, #48]	@ (800fcb8 <__multadd+0x88>)
 800fc86:	21ba      	movs	r1, #186	@ 0xba
 800fc88:	480c      	ldr	r0, [pc, #48]	@ (800fcbc <__multadd+0x8c>)
 800fc8a:	f001 fcf5 	bl	8011678 <__assert_func>
 800fc8e:	6922      	ldr	r2, [r4, #16]
 800fc90:	f104 010c 	add.w	r1, r4, #12
 800fc94:	300c      	adds	r0, #12
 800fc96:	3202      	adds	r2, #2
 800fc98:	0092      	lsls	r2, r2, #2
 800fc9a:	f7fe fff2 	bl	800ec82 <memcpy>
 800fc9e:	4621      	mov	r1, r4
 800fca0:	4644      	mov	r4, r8
 800fca2:	4638      	mov	r0, r7
 800fca4:	f7ff ffa2 	bl	800fbec <_Bfree>
 800fca8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcac:	3501      	adds	r5, #1
 800fcae:	615e      	str	r6, [r3, #20]
 800fcb0:	6125      	str	r5, [r4, #16]
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb8:	0802fce1 	.word	0x0802fce1
 800fcbc:	0802fcf2 	.word	0x0802fcf2

0800fcc0 <__s2b>:
 800fcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcc4:	4615      	mov	r5, r2
 800fcc6:	461f      	mov	r7, r3
 800fcc8:	2209      	movs	r2, #9
 800fcca:	3308      	adds	r3, #8
 800fccc:	460c      	mov	r4, r1
 800fcce:	4606      	mov	r6, r0
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	db09      	blt.n	800fcf0 <__s2b+0x30>
 800fcdc:	4630      	mov	r0, r6
 800fcde:	f7ff ff45 	bl	800fb6c <_Balloc>
 800fce2:	b940      	cbnz	r0, 800fcf6 <__s2b+0x36>
 800fce4:	4602      	mov	r2, r0
 800fce6:	4b19      	ldr	r3, [pc, #100]	@ (800fd4c <__s2b+0x8c>)
 800fce8:	21d3      	movs	r1, #211	@ 0xd3
 800fcea:	4819      	ldr	r0, [pc, #100]	@ (800fd50 <__s2b+0x90>)
 800fcec:	f001 fcc4 	bl	8011678 <__assert_func>
 800fcf0:	0052      	lsls	r2, r2, #1
 800fcf2:	3101      	adds	r1, #1
 800fcf4:	e7f0      	b.n	800fcd8 <__s2b+0x18>
 800fcf6:	9b08      	ldr	r3, [sp, #32]
 800fcf8:	2d09      	cmp	r5, #9
 800fcfa:	6143      	str	r3, [r0, #20]
 800fcfc:	f04f 0301 	mov.w	r3, #1
 800fd00:	6103      	str	r3, [r0, #16]
 800fd02:	dd16      	ble.n	800fd32 <__s2b+0x72>
 800fd04:	f104 0909 	add.w	r9, r4, #9
 800fd08:	442c      	add	r4, r5
 800fd0a:	46c8      	mov	r8, r9
 800fd0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fd10:	4601      	mov	r1, r0
 800fd12:	220a      	movs	r2, #10
 800fd14:	4630      	mov	r0, r6
 800fd16:	3b30      	subs	r3, #48	@ 0x30
 800fd18:	f7ff ff8a 	bl	800fc30 <__multadd>
 800fd1c:	45a0      	cmp	r8, r4
 800fd1e:	d1f5      	bne.n	800fd0c <__s2b+0x4c>
 800fd20:	f1a5 0408 	sub.w	r4, r5, #8
 800fd24:	444c      	add	r4, r9
 800fd26:	1b2d      	subs	r5, r5, r4
 800fd28:	1963      	adds	r3, r4, r5
 800fd2a:	42bb      	cmp	r3, r7
 800fd2c:	db04      	blt.n	800fd38 <__s2b+0x78>
 800fd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd32:	340a      	adds	r4, #10
 800fd34:	2509      	movs	r5, #9
 800fd36:	e7f6      	b.n	800fd26 <__s2b+0x66>
 800fd38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd3c:	4601      	mov	r1, r0
 800fd3e:	220a      	movs	r2, #10
 800fd40:	4630      	mov	r0, r6
 800fd42:	3b30      	subs	r3, #48	@ 0x30
 800fd44:	f7ff ff74 	bl	800fc30 <__multadd>
 800fd48:	e7ee      	b.n	800fd28 <__s2b+0x68>
 800fd4a:	bf00      	nop
 800fd4c:	0802fce1 	.word	0x0802fce1
 800fd50:	0802fcf2 	.word	0x0802fcf2

0800fd54 <__hi0bits>:
 800fd54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd58:	4603      	mov	r3, r0
 800fd5a:	bf36      	itet	cc
 800fd5c:	0403      	lslcc	r3, r0, #16
 800fd5e:	2000      	movcs	r0, #0
 800fd60:	2010      	movcc	r0, #16
 800fd62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd66:	bf3c      	itt	cc
 800fd68:	021b      	lslcc	r3, r3, #8
 800fd6a:	3008      	addcc	r0, #8
 800fd6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd70:	bf3c      	itt	cc
 800fd72:	011b      	lslcc	r3, r3, #4
 800fd74:	3004      	addcc	r0, #4
 800fd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd7a:	bf3c      	itt	cc
 800fd7c:	009b      	lslcc	r3, r3, #2
 800fd7e:	3002      	addcc	r0, #2
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	db05      	blt.n	800fd90 <__hi0bits+0x3c>
 800fd84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd88:	f100 0001 	add.w	r0, r0, #1
 800fd8c:	bf08      	it	eq
 800fd8e:	2020      	moveq	r0, #32
 800fd90:	4770      	bx	lr

0800fd92 <__lo0bits>:
 800fd92:	6803      	ldr	r3, [r0, #0]
 800fd94:	4602      	mov	r2, r0
 800fd96:	f013 0007 	ands.w	r0, r3, #7
 800fd9a:	d00b      	beq.n	800fdb4 <__lo0bits+0x22>
 800fd9c:	07d9      	lsls	r1, r3, #31
 800fd9e:	d421      	bmi.n	800fde4 <__lo0bits+0x52>
 800fda0:	0798      	lsls	r0, r3, #30
 800fda2:	bf47      	ittee	mi
 800fda4:	085b      	lsrmi	r3, r3, #1
 800fda6:	2001      	movmi	r0, #1
 800fda8:	089b      	lsrpl	r3, r3, #2
 800fdaa:	2002      	movpl	r0, #2
 800fdac:	bf4c      	ite	mi
 800fdae:	6013      	strmi	r3, [r2, #0]
 800fdb0:	6013      	strpl	r3, [r2, #0]
 800fdb2:	4770      	bx	lr
 800fdb4:	b299      	uxth	r1, r3
 800fdb6:	b909      	cbnz	r1, 800fdbc <__lo0bits+0x2a>
 800fdb8:	0c1b      	lsrs	r3, r3, #16
 800fdba:	2010      	movs	r0, #16
 800fdbc:	b2d9      	uxtb	r1, r3
 800fdbe:	b909      	cbnz	r1, 800fdc4 <__lo0bits+0x32>
 800fdc0:	3008      	adds	r0, #8
 800fdc2:	0a1b      	lsrs	r3, r3, #8
 800fdc4:	0719      	lsls	r1, r3, #28
 800fdc6:	bf04      	itt	eq
 800fdc8:	091b      	lsreq	r3, r3, #4
 800fdca:	3004      	addeq	r0, #4
 800fdcc:	0799      	lsls	r1, r3, #30
 800fdce:	bf04      	itt	eq
 800fdd0:	089b      	lsreq	r3, r3, #2
 800fdd2:	3002      	addeq	r0, #2
 800fdd4:	07d9      	lsls	r1, r3, #31
 800fdd6:	d403      	bmi.n	800fde0 <__lo0bits+0x4e>
 800fdd8:	085b      	lsrs	r3, r3, #1
 800fdda:	f100 0001 	add.w	r0, r0, #1
 800fdde:	d003      	beq.n	800fde8 <__lo0bits+0x56>
 800fde0:	6013      	str	r3, [r2, #0]
 800fde2:	4770      	bx	lr
 800fde4:	2000      	movs	r0, #0
 800fde6:	4770      	bx	lr
 800fde8:	2020      	movs	r0, #32
 800fdea:	4770      	bx	lr

0800fdec <__i2b>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	460c      	mov	r4, r1
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	f7ff febb 	bl	800fb6c <_Balloc>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	b928      	cbnz	r0, 800fe06 <__i2b+0x1a>
 800fdfa:	4b05      	ldr	r3, [pc, #20]	@ (800fe10 <__i2b+0x24>)
 800fdfc:	f240 1145 	movw	r1, #325	@ 0x145
 800fe00:	4804      	ldr	r0, [pc, #16]	@ (800fe14 <__i2b+0x28>)
 800fe02:	f001 fc39 	bl	8011678 <__assert_func>
 800fe06:	2301      	movs	r3, #1
 800fe08:	6144      	str	r4, [r0, #20]
 800fe0a:	6103      	str	r3, [r0, #16]
 800fe0c:	bd10      	pop	{r4, pc}
 800fe0e:	bf00      	nop
 800fe10:	0802fce1 	.word	0x0802fce1
 800fe14:	0802fcf2 	.word	0x0802fcf2

0800fe18 <__multiply>:
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe1c:	4617      	mov	r7, r2
 800fe1e:	690a      	ldr	r2, [r1, #16]
 800fe20:	4689      	mov	r9, r1
 800fe22:	b085      	sub	sp, #20
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	bfa2      	ittt	ge
 800fe2a:	463b      	movge	r3, r7
 800fe2c:	460f      	movge	r7, r1
 800fe2e:	4699      	movge	r9, r3
 800fe30:	693d      	ldr	r5, [r7, #16]
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe38:	6879      	ldr	r1, [r7, #4]
 800fe3a:	eb05 060a 	add.w	r6, r5, sl
 800fe3e:	42b3      	cmp	r3, r6
 800fe40:	bfb8      	it	lt
 800fe42:	3101      	addlt	r1, #1
 800fe44:	f7ff fe92 	bl	800fb6c <_Balloc>
 800fe48:	b930      	cbnz	r0, 800fe58 <__multiply+0x40>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	4b42      	ldr	r3, [pc, #264]	@ (800ff58 <__multiply+0x140>)
 800fe4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe52:	4842      	ldr	r0, [pc, #264]	@ (800ff5c <__multiply+0x144>)
 800fe54:	f001 fc10 	bl	8011678 <__assert_func>
 800fe58:	f100 0414 	add.w	r4, r0, #20
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fe62:	4623      	mov	r3, r4
 800fe64:	4573      	cmp	r3, lr
 800fe66:	d320      	bcc.n	800feaa <__multiply+0x92>
 800fe68:	f107 0814 	add.w	r8, r7, #20
 800fe6c:	f109 0114 	add.w	r1, r9, #20
 800fe70:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fe74:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fe78:	9302      	str	r3, [sp, #8]
 800fe7a:	1beb      	subs	r3, r5, r7
 800fe7c:	3715      	adds	r7, #21
 800fe7e:	3b15      	subs	r3, #21
 800fe80:	f023 0303 	bic.w	r3, r3, #3
 800fe84:	3304      	adds	r3, #4
 800fe86:	42bd      	cmp	r5, r7
 800fe88:	bf38      	it	cc
 800fe8a:	2304      	movcc	r3, #4
 800fe8c:	9301      	str	r3, [sp, #4]
 800fe8e:	9b02      	ldr	r3, [sp, #8]
 800fe90:	9103      	str	r1, [sp, #12]
 800fe92:	428b      	cmp	r3, r1
 800fe94:	d80c      	bhi.n	800feb0 <__multiply+0x98>
 800fe96:	2e00      	cmp	r6, #0
 800fe98:	dd03      	ble.n	800fea2 <__multiply+0x8a>
 800fe9a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d057      	beq.n	800ff52 <__multiply+0x13a>
 800fea2:	6106      	str	r6, [r0, #16]
 800fea4:	b005      	add	sp, #20
 800fea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feaa:	f843 2b04 	str.w	r2, [r3], #4
 800feae:	e7d9      	b.n	800fe64 <__multiply+0x4c>
 800feb0:	f8b1 a000 	ldrh.w	sl, [r1]
 800feb4:	f1ba 0f00 	cmp.w	sl, #0
 800feb8:	d021      	beq.n	800fefe <__multiply+0xe6>
 800feba:	46c4      	mov	ip, r8
 800febc:	46a1      	mov	r9, r4
 800febe:	2700      	movs	r7, #0
 800fec0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fec4:	f8d9 3000 	ldr.w	r3, [r9]
 800fec8:	fa1f fb82 	uxth.w	fp, r2
 800fecc:	4565      	cmp	r5, ip
 800fece:	b29b      	uxth	r3, r3
 800fed0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800fed4:	fb0a 330b 	mla	r3, sl, fp, r3
 800fed8:	443b      	add	r3, r7
 800feda:	f8d9 7000 	ldr.w	r7, [r9]
 800fede:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800fee2:	fb0a 7202 	mla	r2, sl, r2, r7
 800fee6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800feea:	b29b      	uxth	r3, r3
 800feec:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fef4:	f849 3b04 	str.w	r3, [r9], #4
 800fef8:	d8e2      	bhi.n	800fec0 <__multiply+0xa8>
 800fefa:	9b01      	ldr	r3, [sp, #4]
 800fefc:	50e7      	str	r7, [r4, r3]
 800fefe:	9b03      	ldr	r3, [sp, #12]
 800ff00:	3104      	adds	r1, #4
 800ff02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff06:	f1b9 0f00 	cmp.w	r9, #0
 800ff0a:	d020      	beq.n	800ff4e <__multiply+0x136>
 800ff0c:	6823      	ldr	r3, [r4, #0]
 800ff0e:	4647      	mov	r7, r8
 800ff10:	46a4      	mov	ip, r4
 800ff12:	f04f 0a00 	mov.w	sl, #0
 800ff16:	f8b7 b000 	ldrh.w	fp, [r7]
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ff20:	fb09 220b 	mla	r2, r9, fp, r2
 800ff24:	4452      	add	r2, sl
 800ff26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff2a:	f84c 3b04 	str.w	r3, [ip], #4
 800ff2e:	f857 3b04 	ldr.w	r3, [r7], #4
 800ff32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff36:	f8bc 3000 	ldrh.w	r3, [ip]
 800ff3a:	42bd      	cmp	r5, r7
 800ff3c:	fb09 330a 	mla	r3, r9, sl, r3
 800ff40:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ff44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff48:	d8e5      	bhi.n	800ff16 <__multiply+0xfe>
 800ff4a:	9a01      	ldr	r2, [sp, #4]
 800ff4c:	50a3      	str	r3, [r4, r2]
 800ff4e:	3404      	adds	r4, #4
 800ff50:	e79d      	b.n	800fe8e <__multiply+0x76>
 800ff52:	3e01      	subs	r6, #1
 800ff54:	e79f      	b.n	800fe96 <__multiply+0x7e>
 800ff56:	bf00      	nop
 800ff58:	0802fce1 	.word	0x0802fce1
 800ff5c:	0802fcf2 	.word	0x0802fcf2

0800ff60 <__pow5mult>:
 800ff60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff64:	4615      	mov	r5, r2
 800ff66:	f012 0203 	ands.w	r2, r2, #3
 800ff6a:	4607      	mov	r7, r0
 800ff6c:	460e      	mov	r6, r1
 800ff6e:	d007      	beq.n	800ff80 <__pow5mult+0x20>
 800ff70:	3a01      	subs	r2, #1
 800ff72:	4c25      	ldr	r4, [pc, #148]	@ (8010008 <__pow5mult+0xa8>)
 800ff74:	2300      	movs	r3, #0
 800ff76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff7a:	f7ff fe59 	bl	800fc30 <__multadd>
 800ff7e:	4606      	mov	r6, r0
 800ff80:	10ad      	asrs	r5, r5, #2
 800ff82:	d03d      	beq.n	8010000 <__pow5mult+0xa0>
 800ff84:	69fc      	ldr	r4, [r7, #28]
 800ff86:	b97c      	cbnz	r4, 800ffa8 <__pow5mult+0x48>
 800ff88:	2010      	movs	r0, #16
 800ff8a:	f7ff fd39 	bl	800fa00 <malloc>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	61f8      	str	r0, [r7, #28]
 800ff92:	b928      	cbnz	r0, 800ffa0 <__pow5mult+0x40>
 800ff94:	4b1d      	ldr	r3, [pc, #116]	@ (801000c <__pow5mult+0xac>)
 800ff96:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff9a:	481d      	ldr	r0, [pc, #116]	@ (8010010 <__pow5mult+0xb0>)
 800ff9c:	f001 fb6c 	bl	8011678 <__assert_func>
 800ffa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffa4:	6004      	str	r4, [r0, #0]
 800ffa6:	60c4      	str	r4, [r0, #12]
 800ffa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ffac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffb0:	b94c      	cbnz	r4, 800ffc6 <__pow5mult+0x66>
 800ffb2:	f240 2171 	movw	r1, #625	@ 0x271
 800ffb6:	4638      	mov	r0, r7
 800ffb8:	f7ff ff18 	bl	800fdec <__i2b>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffc4:	6003      	str	r3, [r0, #0]
 800ffc6:	f04f 0900 	mov.w	r9, #0
 800ffca:	07eb      	lsls	r3, r5, #31
 800ffcc:	d50a      	bpl.n	800ffe4 <__pow5mult+0x84>
 800ffce:	4631      	mov	r1, r6
 800ffd0:	4622      	mov	r2, r4
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	f7ff ff20 	bl	800fe18 <__multiply>
 800ffd8:	4680      	mov	r8, r0
 800ffda:	4631      	mov	r1, r6
 800ffdc:	4638      	mov	r0, r7
 800ffde:	4646      	mov	r6, r8
 800ffe0:	f7ff fe04 	bl	800fbec <_Bfree>
 800ffe4:	106d      	asrs	r5, r5, #1
 800ffe6:	d00b      	beq.n	8010000 <__pow5mult+0xa0>
 800ffe8:	6820      	ldr	r0, [r4, #0]
 800ffea:	b938      	cbnz	r0, 800fffc <__pow5mult+0x9c>
 800ffec:	4622      	mov	r2, r4
 800ffee:	4621      	mov	r1, r4
 800fff0:	4638      	mov	r0, r7
 800fff2:	f7ff ff11 	bl	800fe18 <__multiply>
 800fff6:	6020      	str	r0, [r4, #0]
 800fff8:	f8c0 9000 	str.w	r9, [r0]
 800fffc:	4604      	mov	r4, r0
 800fffe:	e7e4      	b.n	800ffca <__pow5mult+0x6a>
 8010000:	4630      	mov	r0, r6
 8010002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010006:	bf00      	nop
 8010008:	0802fe04 	.word	0x0802fe04
 801000c:	0802fc72 	.word	0x0802fc72
 8010010:	0802fcf2 	.word	0x0802fcf2

08010014 <__lshift>:
 8010014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010018:	460c      	mov	r4, r1
 801001a:	4607      	mov	r7, r0
 801001c:	4691      	mov	r9, r2
 801001e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010022:	6923      	ldr	r3, [r4, #16]
 8010024:	6849      	ldr	r1, [r1, #4]
 8010026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801002a:	68a3      	ldr	r3, [r4, #8]
 801002c:	f108 0601 	add.w	r6, r8, #1
 8010030:	42b3      	cmp	r3, r6
 8010032:	db0b      	blt.n	801004c <__lshift+0x38>
 8010034:	4638      	mov	r0, r7
 8010036:	f7ff fd99 	bl	800fb6c <_Balloc>
 801003a:	4605      	mov	r5, r0
 801003c:	b948      	cbnz	r0, 8010052 <__lshift+0x3e>
 801003e:	4602      	mov	r2, r0
 8010040:	4b28      	ldr	r3, [pc, #160]	@ (80100e4 <__lshift+0xd0>)
 8010042:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010046:	4828      	ldr	r0, [pc, #160]	@ (80100e8 <__lshift+0xd4>)
 8010048:	f001 fb16 	bl	8011678 <__assert_func>
 801004c:	3101      	adds	r1, #1
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	e7ee      	b.n	8010030 <__lshift+0x1c>
 8010052:	2300      	movs	r3, #0
 8010054:	f100 0114 	add.w	r1, r0, #20
 8010058:	f100 0210 	add.w	r2, r0, #16
 801005c:	4618      	mov	r0, r3
 801005e:	4553      	cmp	r3, sl
 8010060:	db33      	blt.n	80100ca <__lshift+0xb6>
 8010062:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010066:	f104 0314 	add.w	r3, r4, #20
 801006a:	6920      	ldr	r0, [r4, #16]
 801006c:	f019 091f 	ands.w	r9, r9, #31
 8010070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010078:	d02b      	beq.n	80100d2 <__lshift+0xbe>
 801007a:	f1c9 0e20 	rsb	lr, r9, #32
 801007e:	468a      	mov	sl, r1
 8010080:	2200      	movs	r2, #0
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	fa00 f009 	lsl.w	r0, r0, r9
 8010088:	4310      	orrs	r0, r2
 801008a:	f84a 0b04 	str.w	r0, [sl], #4
 801008e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010092:	459c      	cmp	ip, r3
 8010094:	fa22 f20e 	lsr.w	r2, r2, lr
 8010098:	d8f3      	bhi.n	8010082 <__lshift+0x6e>
 801009a:	ebac 0304 	sub.w	r3, ip, r4
 801009e:	f104 0015 	add.w	r0, r4, #21
 80100a2:	3b15      	subs	r3, #21
 80100a4:	f023 0303 	bic.w	r3, r3, #3
 80100a8:	3304      	adds	r3, #4
 80100aa:	4560      	cmp	r0, ip
 80100ac:	bf88      	it	hi
 80100ae:	2304      	movhi	r3, #4
 80100b0:	50ca      	str	r2, [r1, r3]
 80100b2:	b10a      	cbz	r2, 80100b8 <__lshift+0xa4>
 80100b4:	f108 0602 	add.w	r6, r8, #2
 80100b8:	3e01      	subs	r6, #1
 80100ba:	4638      	mov	r0, r7
 80100bc:	4621      	mov	r1, r4
 80100be:	612e      	str	r6, [r5, #16]
 80100c0:	f7ff fd94 	bl	800fbec <_Bfree>
 80100c4:	4628      	mov	r0, r5
 80100c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ca:	3301      	adds	r3, #1
 80100cc:	f842 0f04 	str.w	r0, [r2, #4]!
 80100d0:	e7c5      	b.n	801005e <__lshift+0x4a>
 80100d2:	3904      	subs	r1, #4
 80100d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80100d8:	459c      	cmp	ip, r3
 80100da:	f841 2f04 	str.w	r2, [r1, #4]!
 80100de:	d8f9      	bhi.n	80100d4 <__lshift+0xc0>
 80100e0:	e7ea      	b.n	80100b8 <__lshift+0xa4>
 80100e2:	bf00      	nop
 80100e4:	0802fce1 	.word	0x0802fce1
 80100e8:	0802fcf2 	.word	0x0802fcf2

080100ec <__mcmp>:
 80100ec:	4603      	mov	r3, r0
 80100ee:	690a      	ldr	r2, [r1, #16]
 80100f0:	6900      	ldr	r0, [r0, #16]
 80100f2:	1a80      	subs	r0, r0, r2
 80100f4:	b530      	push	{r4, r5, lr}
 80100f6:	d10e      	bne.n	8010116 <__mcmp+0x2a>
 80100f8:	3314      	adds	r3, #20
 80100fa:	3114      	adds	r1, #20
 80100fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801010c:	4295      	cmp	r5, r2
 801010e:	d003      	beq.n	8010118 <__mcmp+0x2c>
 8010110:	d205      	bcs.n	801011e <__mcmp+0x32>
 8010112:	f04f 30ff 	mov.w	r0, #4294967295
 8010116:	bd30      	pop	{r4, r5, pc}
 8010118:	42a3      	cmp	r3, r4
 801011a:	d3f3      	bcc.n	8010104 <__mcmp+0x18>
 801011c:	e7fb      	b.n	8010116 <__mcmp+0x2a>
 801011e:	2001      	movs	r0, #1
 8010120:	e7f9      	b.n	8010116 <__mcmp+0x2a>
	...

08010124 <__mdiff>:
 8010124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010128:	4689      	mov	r9, r1
 801012a:	4606      	mov	r6, r0
 801012c:	4611      	mov	r1, r2
 801012e:	4614      	mov	r4, r2
 8010130:	4648      	mov	r0, r9
 8010132:	f7ff ffdb 	bl	80100ec <__mcmp>
 8010136:	1e05      	subs	r5, r0, #0
 8010138:	d112      	bne.n	8010160 <__mdiff+0x3c>
 801013a:	4629      	mov	r1, r5
 801013c:	4630      	mov	r0, r6
 801013e:	f7ff fd15 	bl	800fb6c <_Balloc>
 8010142:	4602      	mov	r2, r0
 8010144:	b928      	cbnz	r0, 8010152 <__mdiff+0x2e>
 8010146:	4b41      	ldr	r3, [pc, #260]	@ (801024c <__mdiff+0x128>)
 8010148:	f240 2137 	movw	r1, #567	@ 0x237
 801014c:	4840      	ldr	r0, [pc, #256]	@ (8010250 <__mdiff+0x12c>)
 801014e:	f001 fa93 	bl	8011678 <__assert_func>
 8010152:	2301      	movs	r3, #1
 8010154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010158:	4610      	mov	r0, r2
 801015a:	b003      	add	sp, #12
 801015c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010160:	bfbc      	itt	lt
 8010162:	464b      	movlt	r3, r9
 8010164:	46a1      	movlt	r9, r4
 8010166:	4630      	mov	r0, r6
 8010168:	bfb8      	it	lt
 801016a:	2501      	movlt	r5, #1
 801016c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010170:	bfb4      	ite	lt
 8010172:	461c      	movlt	r4, r3
 8010174:	2500      	movge	r5, #0
 8010176:	f7ff fcf9 	bl	800fb6c <_Balloc>
 801017a:	4602      	mov	r2, r0
 801017c:	b918      	cbnz	r0, 8010186 <__mdiff+0x62>
 801017e:	4b33      	ldr	r3, [pc, #204]	@ (801024c <__mdiff+0x128>)
 8010180:	f240 2145 	movw	r1, #581	@ 0x245
 8010184:	e7e2      	b.n	801014c <__mdiff+0x28>
 8010186:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801018a:	f104 0e14 	add.w	lr, r4, #20
 801018e:	6926      	ldr	r6, [r4, #16]
 8010190:	f100 0b14 	add.w	fp, r0, #20
 8010194:	60c5      	str	r5, [r0, #12]
 8010196:	f109 0514 	add.w	r5, r9, #20
 801019a:	f109 0310 	add.w	r3, r9, #16
 801019e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101a2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101a6:	46d9      	mov	r9, fp
 80101a8:	f04f 0c00 	mov.w	ip, #0
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	9b01      	ldr	r3, [sp, #4]
 80101b0:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101b4:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101b8:	4576      	cmp	r6, lr
 80101ba:	9301      	str	r3, [sp, #4]
 80101bc:	fa1f f38a 	uxth.w	r3, sl
 80101c0:	4619      	mov	r1, r3
 80101c2:	b283      	uxth	r3, r0
 80101c4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80101c8:	eba1 0303 	sub.w	r3, r1, r3
 80101cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101d0:	4463      	add	r3, ip
 80101d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80101e0:	f849 3b04 	str.w	r3, [r9], #4
 80101e4:	d8e3      	bhi.n	80101ae <__mdiff+0x8a>
 80101e6:	1b33      	subs	r3, r6, r4
 80101e8:	3415      	adds	r4, #21
 80101ea:	3b15      	subs	r3, #21
 80101ec:	f023 0303 	bic.w	r3, r3, #3
 80101f0:	3304      	adds	r3, #4
 80101f2:	42a6      	cmp	r6, r4
 80101f4:	bf38      	it	cc
 80101f6:	2304      	movcc	r3, #4
 80101f8:	441d      	add	r5, r3
 80101fa:	445b      	add	r3, fp
 80101fc:	462c      	mov	r4, r5
 80101fe:	461e      	mov	r6, r3
 8010200:	4544      	cmp	r4, r8
 8010202:	d30e      	bcc.n	8010222 <__mdiff+0xfe>
 8010204:	f108 0103 	add.w	r1, r8, #3
 8010208:	1b49      	subs	r1, r1, r5
 801020a:	3d03      	subs	r5, #3
 801020c:	f021 0103 	bic.w	r1, r1, #3
 8010210:	45a8      	cmp	r8, r5
 8010212:	bf38      	it	cc
 8010214:	2100      	movcc	r1, #0
 8010216:	440b      	add	r3, r1
 8010218:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801021c:	b199      	cbz	r1, 8010246 <__mdiff+0x122>
 801021e:	6117      	str	r7, [r2, #16]
 8010220:	e79a      	b.n	8010158 <__mdiff+0x34>
 8010222:	f854 1b04 	ldr.w	r1, [r4], #4
 8010226:	46e6      	mov	lr, ip
 8010228:	fa1f fc81 	uxth.w	ip, r1
 801022c:	0c08      	lsrs	r0, r1, #16
 801022e:	4471      	add	r1, lr
 8010230:	44f4      	add	ip, lr
 8010232:	b289      	uxth	r1, r1
 8010234:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801023c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010240:	f846 1b04 	str.w	r1, [r6], #4
 8010244:	e7dc      	b.n	8010200 <__mdiff+0xdc>
 8010246:	3f01      	subs	r7, #1
 8010248:	e7e6      	b.n	8010218 <__mdiff+0xf4>
 801024a:	bf00      	nop
 801024c:	0802fce1 	.word	0x0802fce1
 8010250:	0802fcf2 	.word	0x0802fcf2

08010254 <__ulp>:
 8010254:	b082      	sub	sp, #8
 8010256:	4b11      	ldr	r3, [pc, #68]	@ (801029c <__ulp+0x48>)
 8010258:	ed8d 0b00 	vstr	d0, [sp]
 801025c:	9a01      	ldr	r2, [sp, #4]
 801025e:	4013      	ands	r3, r2
 8010260:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010264:	2b00      	cmp	r3, #0
 8010266:	dc08      	bgt.n	801027a <__ulp+0x26>
 8010268:	425b      	negs	r3, r3
 801026a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801026e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010272:	da04      	bge.n	801027e <__ulp+0x2a>
 8010274:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010278:	4113      	asrs	r3, r2
 801027a:	2200      	movs	r2, #0
 801027c:	e008      	b.n	8010290 <__ulp+0x3c>
 801027e:	f1a2 0314 	sub.w	r3, r2, #20
 8010282:	2b1e      	cmp	r3, #30
 8010284:	bfd6      	itet	le
 8010286:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801028a:	2201      	movgt	r2, #1
 801028c:	40da      	lsrle	r2, r3
 801028e:	2300      	movs	r3, #0
 8010290:	4619      	mov	r1, r3
 8010292:	4610      	mov	r0, r2
 8010294:	ec41 0b10 	vmov	d0, r0, r1
 8010298:	b002      	add	sp, #8
 801029a:	4770      	bx	lr
 801029c:	7ff00000 	.word	0x7ff00000

080102a0 <__b2d>:
 80102a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a4:	6906      	ldr	r6, [r0, #16]
 80102a6:	f100 0814 	add.w	r8, r0, #20
 80102aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80102ae:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80102b2:	1f37      	subs	r7, r6, #4
 80102b4:	4610      	mov	r0, r2
 80102b6:	f7ff fd4d 	bl	800fd54 <__hi0bits>
 80102ba:	f1c0 0320 	rsb	r3, r0, #32
 80102be:	280a      	cmp	r0, #10
 80102c0:	600b      	str	r3, [r1, #0]
 80102c2:	491d      	ldr	r1, [pc, #116]	@ (8010338 <__b2d+0x98>)
 80102c4:	dc16      	bgt.n	80102f4 <__b2d+0x54>
 80102c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80102ca:	45b8      	cmp	r8, r7
 80102cc:	f100 0015 	add.w	r0, r0, #21
 80102d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80102d4:	fa02 f000 	lsl.w	r0, r2, r0
 80102d8:	ea43 0501 	orr.w	r5, r3, r1
 80102dc:	bf34      	ite	cc
 80102de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80102e2:	2300      	movcs	r3, #0
 80102e4:	fa23 f30c 	lsr.w	r3, r3, ip
 80102e8:	4303      	orrs	r3, r0
 80102ea:	461c      	mov	r4, r3
 80102ec:	ec45 4b10 	vmov	d0, r4, r5
 80102f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f4:	45b8      	cmp	r8, r7
 80102f6:	bf3a      	itte	cc
 80102f8:	f1a6 0708 	subcc.w	r7, r6, #8
 80102fc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010300:	2300      	movcs	r3, #0
 8010302:	380b      	subs	r0, #11
 8010304:	d014      	beq.n	8010330 <__b2d+0x90>
 8010306:	f1c0 0120 	rsb	r1, r0, #32
 801030a:	4082      	lsls	r2, r0
 801030c:	4547      	cmp	r7, r8
 801030e:	fa23 f401 	lsr.w	r4, r3, r1
 8010312:	fa03 f300 	lsl.w	r3, r3, r0
 8010316:	ea42 0204 	orr.w	r2, r2, r4
 801031a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801031e:	bf8c      	ite	hi
 8010320:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010324:	2200      	movls	r2, #0
 8010326:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801032a:	40ca      	lsrs	r2, r1
 801032c:	4313      	orrs	r3, r2
 801032e:	e7dc      	b.n	80102ea <__b2d+0x4a>
 8010330:	ea42 0501 	orr.w	r5, r2, r1
 8010334:	e7d9      	b.n	80102ea <__b2d+0x4a>
 8010336:	bf00      	nop
 8010338:	3ff00000 	.word	0x3ff00000

0801033c <__d2b>:
 801033c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010340:	460f      	mov	r7, r1
 8010342:	2101      	movs	r1, #1
 8010344:	4616      	mov	r6, r2
 8010346:	ec59 8b10 	vmov	r8, r9, d0
 801034a:	f7ff fc0f 	bl	800fb6c <_Balloc>
 801034e:	4604      	mov	r4, r0
 8010350:	b930      	cbnz	r0, 8010360 <__d2b+0x24>
 8010352:	4602      	mov	r2, r0
 8010354:	4b23      	ldr	r3, [pc, #140]	@ (80103e4 <__d2b+0xa8>)
 8010356:	f240 310f 	movw	r1, #783	@ 0x30f
 801035a:	4823      	ldr	r0, [pc, #140]	@ (80103e8 <__d2b+0xac>)
 801035c:	f001 f98c 	bl	8011678 <__assert_func>
 8010360:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010364:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010368:	b10d      	cbz	r5, 801036e <__d2b+0x32>
 801036a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801036e:	9301      	str	r3, [sp, #4]
 8010370:	f1b8 0300 	subs.w	r3, r8, #0
 8010374:	d023      	beq.n	80103be <__d2b+0x82>
 8010376:	4668      	mov	r0, sp
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	f7ff fd0a 	bl	800fd92 <__lo0bits>
 801037e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010382:	b1d0      	cbz	r0, 80103ba <__d2b+0x7e>
 8010384:	f1c0 0320 	rsb	r3, r0, #32
 8010388:	fa02 f303 	lsl.w	r3, r2, r3
 801038c:	40c2      	lsrs	r2, r0
 801038e:	430b      	orrs	r3, r1
 8010390:	9201      	str	r2, [sp, #4]
 8010392:	6163      	str	r3, [r4, #20]
 8010394:	9b01      	ldr	r3, [sp, #4]
 8010396:	2b00      	cmp	r3, #0
 8010398:	61a3      	str	r3, [r4, #24]
 801039a:	bf0c      	ite	eq
 801039c:	2201      	moveq	r2, #1
 801039e:	2202      	movne	r2, #2
 80103a0:	6122      	str	r2, [r4, #16]
 80103a2:	b1a5      	cbz	r5, 80103ce <__d2b+0x92>
 80103a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103a8:	4405      	add	r5, r0
 80103aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103ae:	603d      	str	r5, [r7, #0]
 80103b0:	6030      	str	r0, [r6, #0]
 80103b2:	4620      	mov	r0, r4
 80103b4:	b003      	add	sp, #12
 80103b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ba:	6161      	str	r1, [r4, #20]
 80103bc:	e7ea      	b.n	8010394 <__d2b+0x58>
 80103be:	a801      	add	r0, sp, #4
 80103c0:	f7ff fce7 	bl	800fd92 <__lo0bits>
 80103c4:	9b01      	ldr	r3, [sp, #4]
 80103c6:	3020      	adds	r0, #32
 80103c8:	2201      	movs	r2, #1
 80103ca:	6163      	str	r3, [r4, #20]
 80103cc:	e7e8      	b.n	80103a0 <__d2b+0x64>
 80103ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103d6:	6038      	str	r0, [r7, #0]
 80103d8:	6918      	ldr	r0, [r3, #16]
 80103da:	f7ff fcbb 	bl	800fd54 <__hi0bits>
 80103de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103e2:	e7e5      	b.n	80103b0 <__d2b+0x74>
 80103e4:	0802fce1 	.word	0x0802fce1
 80103e8:	0802fcf2 	.word	0x0802fcf2

080103ec <__ratio>:
 80103ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f0:	b085      	sub	sp, #20
 80103f2:	e9cd 1000 	strd	r1, r0, [sp]
 80103f6:	a902      	add	r1, sp, #8
 80103f8:	f7ff ff52 	bl	80102a0 <__b2d>
 80103fc:	a903      	add	r1, sp, #12
 80103fe:	9800      	ldr	r0, [sp, #0]
 8010400:	ec55 4b10 	vmov	r4, r5, d0
 8010404:	f7ff ff4c 	bl	80102a0 <__b2d>
 8010408:	9b01      	ldr	r3, [sp, #4]
 801040a:	462f      	mov	r7, r5
 801040c:	4620      	mov	r0, r4
 801040e:	6919      	ldr	r1, [r3, #16]
 8010410:	9b00      	ldr	r3, [sp, #0]
 8010412:	691b      	ldr	r3, [r3, #16]
 8010414:	1ac9      	subs	r1, r1, r3
 8010416:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801041a:	ec5b ab10 	vmov	sl, fp, d0
 801041e:	1a9b      	subs	r3, r3, r2
 8010420:	46d9      	mov	r9, fp
 8010422:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010426:	2b00      	cmp	r3, #0
 8010428:	bfcd      	iteet	gt
 801042a:	462a      	movgt	r2, r5
 801042c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010430:	465a      	movle	r2, fp
 8010432:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010436:	bfd8      	it	le
 8010438:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801043c:	4652      	mov	r2, sl
 801043e:	4639      	mov	r1, r7
 8010440:	464b      	mov	r3, r9
 8010442:	f7f0 fa07 	bl	8000854 <__aeabi_ddiv>
 8010446:	ec41 0b10 	vmov	d0, r0, r1
 801044a:	b005      	add	sp, #20
 801044c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010450 <__copybits>:
 8010450:	3901      	subs	r1, #1
 8010452:	f102 0314 	add.w	r3, r2, #20
 8010456:	1149      	asrs	r1, r1, #5
 8010458:	b570      	push	{r4, r5, r6, lr}
 801045a:	3101      	adds	r1, #1
 801045c:	6914      	ldr	r4, [r2, #16]
 801045e:	1f05      	subs	r5, r0, #4
 8010460:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010464:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010468:	42a3      	cmp	r3, r4
 801046a:	d30c      	bcc.n	8010486 <__copybits+0x36>
 801046c:	1aa3      	subs	r3, r4, r2
 801046e:	3211      	adds	r2, #17
 8010470:	3b11      	subs	r3, #17
 8010472:	f023 0303 	bic.w	r3, r3, #3
 8010476:	42a2      	cmp	r2, r4
 8010478:	bf88      	it	hi
 801047a:	2300      	movhi	r3, #0
 801047c:	4418      	add	r0, r3
 801047e:	2300      	movs	r3, #0
 8010480:	4288      	cmp	r0, r1
 8010482:	d305      	bcc.n	8010490 <__copybits+0x40>
 8010484:	bd70      	pop	{r4, r5, r6, pc}
 8010486:	f853 6b04 	ldr.w	r6, [r3], #4
 801048a:	f845 6f04 	str.w	r6, [r5, #4]!
 801048e:	e7eb      	b.n	8010468 <__copybits+0x18>
 8010490:	f840 3b04 	str.w	r3, [r0], #4
 8010494:	e7f4      	b.n	8010480 <__copybits+0x30>

08010496 <__any_on>:
 8010496:	f100 0214 	add.w	r2, r0, #20
 801049a:	114b      	asrs	r3, r1, #5
 801049c:	6900      	ldr	r0, [r0, #16]
 801049e:	4298      	cmp	r0, r3
 80104a0:	b510      	push	{r4, lr}
 80104a2:	db11      	blt.n	80104c8 <__any_on+0x32>
 80104a4:	dd0a      	ble.n	80104bc <__any_on+0x26>
 80104a6:	f011 011f 	ands.w	r1, r1, #31
 80104aa:	d007      	beq.n	80104bc <__any_on+0x26>
 80104ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80104b0:	fa24 f001 	lsr.w	r0, r4, r1
 80104b4:	fa00 f101 	lsl.w	r1, r0, r1
 80104b8:	428c      	cmp	r4, r1
 80104ba:	d10b      	bne.n	80104d4 <__any_on+0x3e>
 80104bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d803      	bhi.n	80104cc <__any_on+0x36>
 80104c4:	2000      	movs	r0, #0
 80104c6:	bd10      	pop	{r4, pc}
 80104c8:	4603      	mov	r3, r0
 80104ca:	e7f7      	b.n	80104bc <__any_on+0x26>
 80104cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104d0:	2900      	cmp	r1, #0
 80104d2:	d0f5      	beq.n	80104c0 <__any_on+0x2a>
 80104d4:	2001      	movs	r0, #1
 80104d6:	e7f6      	b.n	80104c6 <__any_on+0x30>

080104d8 <sulp>:
 80104d8:	b570      	push	{r4, r5, r6, lr}
 80104da:	4604      	mov	r4, r0
 80104dc:	460d      	mov	r5, r1
 80104de:	4616      	mov	r6, r2
 80104e0:	ec45 4b10 	vmov	d0, r4, r5
 80104e4:	f7ff feb6 	bl	8010254 <__ulp>
 80104e8:	ec51 0b10 	vmov	r0, r1, d0
 80104ec:	b17e      	cbz	r6, 801050e <sulp+0x36>
 80104ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80104f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	dd09      	ble.n	801050e <sulp+0x36>
 80104fa:	051b      	lsls	r3, r3, #20
 80104fc:	2400      	movs	r4, #0
 80104fe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010502:	4622      	mov	r2, r4
 8010504:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010508:	462b      	mov	r3, r5
 801050a:	f7f0 f879 	bl	8000600 <__aeabi_dmul>
 801050e:	ec41 0b10 	vmov	d0, r0, r1
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	0000      	movs	r0, r0
	...

08010518 <_strtod_l>:
 8010518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051c:	b09f      	sub	sp, #124	@ 0x7c
 801051e:	460c      	mov	r4, r1
 8010520:	f04f 0a00 	mov.w	sl, #0
 8010524:	f04f 0b00 	mov.w	fp, #0
 8010528:	9217      	str	r2, [sp, #92]	@ 0x5c
 801052a:	2200      	movs	r2, #0
 801052c:	9005      	str	r0, [sp, #20]
 801052e:	921a      	str	r2, [sp, #104]	@ 0x68
 8010530:	460a      	mov	r2, r1
 8010532:	9219      	str	r2, [sp, #100]	@ 0x64
 8010534:	7811      	ldrb	r1, [r2, #0]
 8010536:	292b      	cmp	r1, #43	@ 0x2b
 8010538:	d04a      	beq.n	80105d0 <_strtod_l+0xb8>
 801053a:	d838      	bhi.n	80105ae <_strtod_l+0x96>
 801053c:	290d      	cmp	r1, #13
 801053e:	d832      	bhi.n	80105a6 <_strtod_l+0x8e>
 8010540:	2908      	cmp	r1, #8
 8010542:	d832      	bhi.n	80105aa <_strtod_l+0x92>
 8010544:	2900      	cmp	r1, #0
 8010546:	d03b      	beq.n	80105c0 <_strtod_l+0xa8>
 8010548:	2200      	movs	r2, #0
 801054a:	920e      	str	r2, [sp, #56]	@ 0x38
 801054c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801054e:	782a      	ldrb	r2, [r5, #0]
 8010550:	2a30      	cmp	r2, #48	@ 0x30
 8010552:	f040 80b2 	bne.w	80106ba <_strtod_l+0x1a2>
 8010556:	786a      	ldrb	r2, [r5, #1]
 8010558:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801055c:	2a58      	cmp	r2, #88	@ 0x58
 801055e:	d16e      	bne.n	801063e <_strtod_l+0x126>
 8010560:	9302      	str	r3, [sp, #8]
 8010562:	a919      	add	r1, sp, #100	@ 0x64
 8010564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010566:	4a90      	ldr	r2, [pc, #576]	@ (80107a8 <_strtod_l+0x290>)
 8010568:	9301      	str	r3, [sp, #4]
 801056a:	ab1a      	add	r3, sp, #104	@ 0x68
 801056c:	9805      	ldr	r0, [sp, #20]
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010572:	f001 f919 	bl	80117a8 <__gethex>
 8010576:	f010 060f 	ands.w	r6, r0, #15
 801057a:	4604      	mov	r4, r0
 801057c:	d005      	beq.n	801058a <_strtod_l+0x72>
 801057e:	2e06      	cmp	r6, #6
 8010580:	d128      	bne.n	80105d4 <_strtod_l+0xbc>
 8010582:	3501      	adds	r5, #1
 8010584:	2300      	movs	r3, #0
 8010586:	9519      	str	r5, [sp, #100]	@ 0x64
 8010588:	930e      	str	r3, [sp, #56]	@ 0x38
 801058a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801058c:	2b00      	cmp	r3, #0
 801058e:	f040 858e 	bne.w	80110ae <_strtod_l+0xb96>
 8010592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010594:	b1cb      	cbz	r3, 80105ca <_strtod_l+0xb2>
 8010596:	4652      	mov	r2, sl
 8010598:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801059c:	ec43 2b10 	vmov	d0, r2, r3
 80105a0:	b01f      	add	sp, #124	@ 0x7c
 80105a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a6:	2920      	cmp	r1, #32
 80105a8:	d1ce      	bne.n	8010548 <_strtod_l+0x30>
 80105aa:	3201      	adds	r2, #1
 80105ac:	e7c1      	b.n	8010532 <_strtod_l+0x1a>
 80105ae:	292d      	cmp	r1, #45	@ 0x2d
 80105b0:	d1ca      	bne.n	8010548 <_strtod_l+0x30>
 80105b2:	2101      	movs	r1, #1
 80105b4:	910e      	str	r1, [sp, #56]	@ 0x38
 80105b6:	1c51      	adds	r1, r2, #1
 80105b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80105ba:	7852      	ldrb	r2, [r2, #1]
 80105bc:	2a00      	cmp	r2, #0
 80105be:	d1c5      	bne.n	801054c <_strtod_l+0x34>
 80105c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80105c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f040 8570 	bne.w	80110aa <_strtod_l+0xb92>
 80105ca:	4652      	mov	r2, sl
 80105cc:	465b      	mov	r3, fp
 80105ce:	e7e5      	b.n	801059c <_strtod_l+0x84>
 80105d0:	2100      	movs	r1, #0
 80105d2:	e7ef      	b.n	80105b4 <_strtod_l+0x9c>
 80105d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80105d6:	b13a      	cbz	r2, 80105e8 <_strtod_l+0xd0>
 80105d8:	2135      	movs	r1, #53	@ 0x35
 80105da:	a81c      	add	r0, sp, #112	@ 0x70
 80105dc:	f7ff ff38 	bl	8010450 <__copybits>
 80105e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80105e2:	9805      	ldr	r0, [sp, #20]
 80105e4:	f7ff fb02 	bl	800fbec <_Bfree>
 80105e8:	3e01      	subs	r6, #1
 80105ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80105ec:	2e04      	cmp	r6, #4
 80105ee:	d806      	bhi.n	80105fe <_strtod_l+0xe6>
 80105f0:	e8df f006 	tbb	[pc, r6]
 80105f4:	201d0314 	.word	0x201d0314
 80105f8:	14          	.byte	0x14
 80105f9:	00          	.byte	0x00
 80105fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80105fe:	05e1      	lsls	r1, r4, #23
 8010600:	bf48      	it	mi
 8010602:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801060a:	0d1b      	lsrs	r3, r3, #20
 801060c:	051b      	lsls	r3, r3, #20
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1bb      	bne.n	801058a <_strtod_l+0x72>
 8010612:	f7fe fafb 	bl	800ec0c <__errno>
 8010616:	2322      	movs	r3, #34	@ 0x22
 8010618:	6003      	str	r3, [r0, #0]
 801061a:	e7b6      	b.n	801058a <_strtod_l+0x72>
 801061c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010620:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010628:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801062c:	e7e7      	b.n	80105fe <_strtod_l+0xe6>
 801062e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80107b0 <_strtod_l+0x298>
 8010632:	e7e4      	b.n	80105fe <_strtod_l+0xe6>
 8010634:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010638:	f04f 3aff 	mov.w	sl, #4294967295
 801063c:	e7df      	b.n	80105fe <_strtod_l+0xe6>
 801063e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010640:	1c5a      	adds	r2, r3, #1
 8010642:	9219      	str	r2, [sp, #100]	@ 0x64
 8010644:	785b      	ldrb	r3, [r3, #1]
 8010646:	2b30      	cmp	r3, #48	@ 0x30
 8010648:	d0f9      	beq.n	801063e <_strtod_l+0x126>
 801064a:	2b00      	cmp	r3, #0
 801064c:	d09d      	beq.n	801058a <_strtod_l+0x72>
 801064e:	2301      	movs	r3, #1
 8010650:	2700      	movs	r7, #0
 8010652:	9308      	str	r3, [sp, #32]
 8010654:	220a      	movs	r2, #10
 8010656:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010658:	46b9      	mov	r9, r7
 801065a:	970b      	str	r7, [sp, #44]	@ 0x2c
 801065c:	930c      	str	r3, [sp, #48]	@ 0x30
 801065e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010660:	7805      	ldrb	r5, [r0, #0]
 8010662:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010666:	b2d9      	uxtb	r1, r3
 8010668:	2909      	cmp	r1, #9
 801066a:	d928      	bls.n	80106be <_strtod_l+0x1a6>
 801066c:	2201      	movs	r2, #1
 801066e:	494f      	ldr	r1, [pc, #316]	@ (80107ac <_strtod_l+0x294>)
 8010670:	f000 ffd6 	bl	8011620 <strncmp>
 8010674:	2800      	cmp	r0, #0
 8010676:	d032      	beq.n	80106de <_strtod_l+0x1c6>
 8010678:	2000      	movs	r0, #0
 801067a:	462a      	mov	r2, r5
 801067c:	464d      	mov	r5, r9
 801067e:	4603      	mov	r3, r0
 8010680:	900a      	str	r0, [sp, #40]	@ 0x28
 8010682:	2a65      	cmp	r2, #101	@ 0x65
 8010684:	d001      	beq.n	801068a <_strtod_l+0x172>
 8010686:	2a45      	cmp	r2, #69	@ 0x45
 8010688:	d114      	bne.n	80106b4 <_strtod_l+0x19c>
 801068a:	b91d      	cbnz	r5, 8010694 <_strtod_l+0x17c>
 801068c:	9a08      	ldr	r2, [sp, #32]
 801068e:	4302      	orrs	r2, r0
 8010690:	d096      	beq.n	80105c0 <_strtod_l+0xa8>
 8010692:	2500      	movs	r5, #0
 8010694:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010696:	1c62      	adds	r2, r4, #1
 8010698:	9219      	str	r2, [sp, #100]	@ 0x64
 801069a:	7862      	ldrb	r2, [r4, #1]
 801069c:	2a2b      	cmp	r2, #43	@ 0x2b
 801069e:	d079      	beq.n	8010794 <_strtod_l+0x27c>
 80106a0:	2a2d      	cmp	r2, #45	@ 0x2d
 80106a2:	d07d      	beq.n	80107a0 <_strtod_l+0x288>
 80106a4:	f04f 0c00 	mov.w	ip, #0
 80106a8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80106ac:	2909      	cmp	r1, #9
 80106ae:	f240 8085 	bls.w	80107bc <_strtod_l+0x2a4>
 80106b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80106b4:	f04f 0800 	mov.w	r8, #0
 80106b8:	e0a5      	b.n	8010806 <_strtod_l+0x2ee>
 80106ba:	2300      	movs	r3, #0
 80106bc:	e7c8      	b.n	8010650 <_strtod_l+0x138>
 80106be:	f1b9 0f08 	cmp.w	r9, #8
 80106c2:	f100 0001 	add.w	r0, r0, #1
 80106c6:	f109 0901 	add.w	r9, r9, #1
 80106ca:	bfd4      	ite	le
 80106cc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80106ce:	fb02 3707 	mlagt	r7, r2, r7, r3
 80106d2:	9019      	str	r0, [sp, #100]	@ 0x64
 80106d4:	bfdc      	itt	le
 80106d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80106da:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80106dc:	e7bf      	b.n	801065e <_strtod_l+0x146>
 80106de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106e0:	1c5a      	adds	r2, r3, #1
 80106e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80106e4:	785a      	ldrb	r2, [r3, #1]
 80106e6:	f1b9 0f00 	cmp.w	r9, #0
 80106ea:	d03a      	beq.n	8010762 <_strtod_l+0x24a>
 80106ec:	464d      	mov	r5, r9
 80106ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80106f0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80106f4:	2b09      	cmp	r3, #9
 80106f6:	d912      	bls.n	801071e <_strtod_l+0x206>
 80106f8:	2301      	movs	r3, #1
 80106fa:	e7c2      	b.n	8010682 <_strtod_l+0x16a>
 80106fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106fe:	3001      	adds	r0, #1
 8010700:	1c5a      	adds	r2, r3, #1
 8010702:	9219      	str	r2, [sp, #100]	@ 0x64
 8010704:	785a      	ldrb	r2, [r3, #1]
 8010706:	2a30      	cmp	r2, #48	@ 0x30
 8010708:	d0f8      	beq.n	80106fc <_strtod_l+0x1e4>
 801070a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801070e:	2b08      	cmp	r3, #8
 8010710:	f200 84d2 	bhi.w	80110b8 <_strtod_l+0xba0>
 8010714:	900a      	str	r0, [sp, #40]	@ 0x28
 8010716:	2000      	movs	r0, #0
 8010718:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801071a:	4605      	mov	r5, r0
 801071c:	930c      	str	r3, [sp, #48]	@ 0x30
 801071e:	3a30      	subs	r2, #48	@ 0x30
 8010720:	f100 0301 	add.w	r3, r0, #1
 8010724:	d017      	beq.n	8010756 <_strtod_l+0x23e>
 8010726:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010728:	462e      	mov	r6, r5
 801072a:	f04f 0e0a 	mov.w	lr, #10
 801072e:	4419      	add	r1, r3
 8010730:	910a      	str	r1, [sp, #40]	@ 0x28
 8010732:	1c71      	adds	r1, r6, #1
 8010734:	eba1 0c05 	sub.w	ip, r1, r5
 8010738:	4563      	cmp	r3, ip
 801073a:	dc14      	bgt.n	8010766 <_strtod_l+0x24e>
 801073c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010740:	182b      	adds	r3, r5, r0
 8010742:	3501      	adds	r5, #1
 8010744:	2b08      	cmp	r3, #8
 8010746:	4405      	add	r5, r0
 8010748:	dc1a      	bgt.n	8010780 <_strtod_l+0x268>
 801074a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801074c:	230a      	movs	r3, #10
 801074e:	fb03 2301 	mla	r3, r3, r1, r2
 8010752:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010754:	2300      	movs	r3, #0
 8010756:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010758:	4618      	mov	r0, r3
 801075a:	1c51      	adds	r1, r2, #1
 801075c:	9119      	str	r1, [sp, #100]	@ 0x64
 801075e:	7852      	ldrb	r2, [r2, #1]
 8010760:	e7c6      	b.n	80106f0 <_strtod_l+0x1d8>
 8010762:	4648      	mov	r0, r9
 8010764:	e7cf      	b.n	8010706 <_strtod_l+0x1ee>
 8010766:	2e08      	cmp	r6, #8
 8010768:	dc05      	bgt.n	8010776 <_strtod_l+0x25e>
 801076a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801076c:	fb0e f606 	mul.w	r6, lr, r6
 8010770:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010772:	460e      	mov	r6, r1
 8010774:	e7dd      	b.n	8010732 <_strtod_l+0x21a>
 8010776:	2910      	cmp	r1, #16
 8010778:	bfd8      	it	le
 801077a:	fb0e f707 	mulle.w	r7, lr, r7
 801077e:	e7f8      	b.n	8010772 <_strtod_l+0x25a>
 8010780:	2b0f      	cmp	r3, #15
 8010782:	bfdc      	itt	le
 8010784:	230a      	movle	r3, #10
 8010786:	fb03 2707 	mlale	r7, r3, r7, r2
 801078a:	e7e3      	b.n	8010754 <_strtod_l+0x23c>
 801078c:	2300      	movs	r3, #0
 801078e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010790:	2301      	movs	r3, #1
 8010792:	e77b      	b.n	801068c <_strtod_l+0x174>
 8010794:	f04f 0c00 	mov.w	ip, #0
 8010798:	1ca2      	adds	r2, r4, #2
 801079a:	9219      	str	r2, [sp, #100]	@ 0x64
 801079c:	78a2      	ldrb	r2, [r4, #2]
 801079e:	e783      	b.n	80106a8 <_strtod_l+0x190>
 80107a0:	f04f 0c01 	mov.w	ip, #1
 80107a4:	e7f8      	b.n	8010798 <_strtod_l+0x280>
 80107a6:	bf00      	nop
 80107a8:	0802ff14 	.word	0x0802ff14
 80107ac:	0802fd4b 	.word	0x0802fd4b
 80107b0:	7ff00000 	.word	0x7ff00000
 80107b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107b6:	1c51      	adds	r1, r2, #1
 80107b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80107ba:	7852      	ldrb	r2, [r2, #1]
 80107bc:	2a30      	cmp	r2, #48	@ 0x30
 80107be:	d0f9      	beq.n	80107b4 <_strtod_l+0x29c>
 80107c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80107c4:	2908      	cmp	r1, #8
 80107c6:	f63f af75 	bhi.w	80106b4 <_strtod_l+0x19c>
 80107ca:	3a30      	subs	r2, #48	@ 0x30
 80107cc:	f04f 080a 	mov.w	r8, #10
 80107d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80107d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80107d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80107d8:	1c56      	adds	r6, r2, #1
 80107da:	9619      	str	r6, [sp, #100]	@ 0x64
 80107dc:	7852      	ldrb	r2, [r2, #1]
 80107de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80107e2:	f1be 0f09 	cmp.w	lr, #9
 80107e6:	d939      	bls.n	801085c <_strtod_l+0x344>
 80107e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80107ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80107ee:	1a76      	subs	r6, r6, r1
 80107f0:	2e08      	cmp	r6, #8
 80107f2:	dc03      	bgt.n	80107fc <_strtod_l+0x2e4>
 80107f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80107f6:	4588      	cmp	r8, r1
 80107f8:	bfa8      	it	ge
 80107fa:	4688      	movge	r8, r1
 80107fc:	f1bc 0f00 	cmp.w	ip, #0
 8010800:	d001      	beq.n	8010806 <_strtod_l+0x2ee>
 8010802:	f1c8 0800 	rsb	r8, r8, #0
 8010806:	2d00      	cmp	r5, #0
 8010808:	d14e      	bne.n	80108a8 <_strtod_l+0x390>
 801080a:	9908      	ldr	r1, [sp, #32]
 801080c:	4308      	orrs	r0, r1
 801080e:	f47f aebc 	bne.w	801058a <_strtod_l+0x72>
 8010812:	2b00      	cmp	r3, #0
 8010814:	f47f aed4 	bne.w	80105c0 <_strtod_l+0xa8>
 8010818:	2a69      	cmp	r2, #105	@ 0x69
 801081a:	d028      	beq.n	801086e <_strtod_l+0x356>
 801081c:	dc25      	bgt.n	801086a <_strtod_l+0x352>
 801081e:	2a49      	cmp	r2, #73	@ 0x49
 8010820:	d025      	beq.n	801086e <_strtod_l+0x356>
 8010822:	2a4e      	cmp	r2, #78	@ 0x4e
 8010824:	f47f aecc 	bne.w	80105c0 <_strtod_l+0xa8>
 8010828:	499a      	ldr	r1, [pc, #616]	@ (8010a94 <_strtod_l+0x57c>)
 801082a:	a819      	add	r0, sp, #100	@ 0x64
 801082c:	f001 f9dc 	bl	8011be8 <__match>
 8010830:	2800      	cmp	r0, #0
 8010832:	f43f aec5 	beq.w	80105c0 <_strtod_l+0xa8>
 8010836:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	2b28      	cmp	r3, #40	@ 0x28
 801083c:	d12e      	bne.n	801089c <_strtod_l+0x384>
 801083e:	aa1c      	add	r2, sp, #112	@ 0x70
 8010840:	4995      	ldr	r1, [pc, #596]	@ (8010a98 <_strtod_l+0x580>)
 8010842:	a819      	add	r0, sp, #100	@ 0x64
 8010844:	f001 f9e4 	bl	8011c10 <__hexnan>
 8010848:	2805      	cmp	r0, #5
 801084a:	d127      	bne.n	801089c <_strtod_l+0x384>
 801084c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801084e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010852:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010856:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801085a:	e696      	b.n	801058a <_strtod_l+0x72>
 801085c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801085e:	fb08 2101 	mla	r1, r8, r1, r2
 8010862:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010866:	9209      	str	r2, [sp, #36]	@ 0x24
 8010868:	e7b5      	b.n	80107d6 <_strtod_l+0x2be>
 801086a:	2a6e      	cmp	r2, #110	@ 0x6e
 801086c:	e7da      	b.n	8010824 <_strtod_l+0x30c>
 801086e:	498b      	ldr	r1, [pc, #556]	@ (8010a9c <_strtod_l+0x584>)
 8010870:	a819      	add	r0, sp, #100	@ 0x64
 8010872:	f001 f9b9 	bl	8011be8 <__match>
 8010876:	2800      	cmp	r0, #0
 8010878:	f43f aea2 	beq.w	80105c0 <_strtod_l+0xa8>
 801087c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801087e:	a819      	add	r0, sp, #100	@ 0x64
 8010880:	4987      	ldr	r1, [pc, #540]	@ (8010aa0 <_strtod_l+0x588>)
 8010882:	3b01      	subs	r3, #1
 8010884:	9319      	str	r3, [sp, #100]	@ 0x64
 8010886:	f001 f9af 	bl	8011be8 <__match>
 801088a:	b910      	cbnz	r0, 8010892 <_strtod_l+0x37a>
 801088c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801088e:	3301      	adds	r3, #1
 8010890:	9319      	str	r3, [sp, #100]	@ 0x64
 8010892:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010ab0 <_strtod_l+0x598>
 8010896:	f04f 0a00 	mov.w	sl, #0
 801089a:	e676      	b.n	801058a <_strtod_l+0x72>
 801089c:	4881      	ldr	r0, [pc, #516]	@ (8010aa4 <_strtod_l+0x58c>)
 801089e:	f000 fee3 	bl	8011668 <nan>
 80108a2:	ec5b ab10 	vmov	sl, fp, d0
 80108a6:	e670      	b.n	801058a <_strtod_l+0x72>
 80108a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108aa:	f1b9 0f00 	cmp.w	r9, #0
 80108ae:	bf08      	it	eq
 80108b0:	46a9      	moveq	r9, r5
 80108b2:	2d10      	cmp	r5, #16
 80108b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80108b6:	eba8 0303 	sub.w	r3, r8, r3
 80108ba:	462c      	mov	r4, r5
 80108bc:	bfa8      	it	ge
 80108be:	2410      	movge	r4, #16
 80108c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80108c2:	f7ef fe23 	bl	800050c <__aeabi_ui2d>
 80108c6:	2d09      	cmp	r5, #9
 80108c8:	4682      	mov	sl, r0
 80108ca:	468b      	mov	fp, r1
 80108cc:	dc13      	bgt.n	80108f6 <_strtod_l+0x3de>
 80108ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f43f ae5a 	beq.w	801058a <_strtod_l+0x72>
 80108d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108d8:	dd78      	ble.n	80109cc <_strtod_l+0x4b4>
 80108da:	2b16      	cmp	r3, #22
 80108dc:	dc5f      	bgt.n	801099e <_strtod_l+0x486>
 80108de:	4972      	ldr	r1, [pc, #456]	@ (8010aa8 <_strtod_l+0x590>)
 80108e0:	4652      	mov	r2, sl
 80108e2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80108e6:	465b      	mov	r3, fp
 80108e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108ec:	f7ef fe88 	bl	8000600 <__aeabi_dmul>
 80108f0:	4682      	mov	sl, r0
 80108f2:	468b      	mov	fp, r1
 80108f4:	e649      	b.n	801058a <_strtod_l+0x72>
 80108f6:	4b6c      	ldr	r3, [pc, #432]	@ (8010aa8 <_strtod_l+0x590>)
 80108f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80108fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010900:	f7ef fe7e 	bl	8000600 <__aeabi_dmul>
 8010904:	4682      	mov	sl, r0
 8010906:	468b      	mov	fp, r1
 8010908:	4638      	mov	r0, r7
 801090a:	f7ef fdff 	bl	800050c <__aeabi_ui2d>
 801090e:	4602      	mov	r2, r0
 8010910:	460b      	mov	r3, r1
 8010912:	4650      	mov	r0, sl
 8010914:	4659      	mov	r1, fp
 8010916:	f7ef fcbd 	bl	8000294 <__adddf3>
 801091a:	2d0f      	cmp	r5, #15
 801091c:	4682      	mov	sl, r0
 801091e:	468b      	mov	fp, r1
 8010920:	ddd5      	ble.n	80108ce <_strtod_l+0x3b6>
 8010922:	1b2c      	subs	r4, r5, r4
 8010924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010926:	441c      	add	r4, r3
 8010928:	2c00      	cmp	r4, #0
 801092a:	f340 8093 	ble.w	8010a54 <_strtod_l+0x53c>
 801092e:	f014 030f 	ands.w	r3, r4, #15
 8010932:	d00a      	beq.n	801094a <_strtod_l+0x432>
 8010934:	495c      	ldr	r1, [pc, #368]	@ (8010aa8 <_strtod_l+0x590>)
 8010936:	4652      	mov	r2, sl
 8010938:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801093c:	465b      	mov	r3, fp
 801093e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010942:	f7ef fe5d 	bl	8000600 <__aeabi_dmul>
 8010946:	4682      	mov	sl, r0
 8010948:	468b      	mov	fp, r1
 801094a:	f034 040f 	bics.w	r4, r4, #15
 801094e:	d073      	beq.n	8010a38 <_strtod_l+0x520>
 8010950:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010954:	dd49      	ble.n	80109ea <_strtod_l+0x4d2>
 8010956:	2400      	movs	r4, #0
 8010958:	46a0      	mov	r8, r4
 801095a:	46a1      	mov	r9, r4
 801095c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801095e:	2322      	movs	r3, #34	@ 0x22
 8010960:	9a05      	ldr	r2, [sp, #20]
 8010962:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010ab0 <_strtod_l+0x598>
 8010966:	f04f 0a00 	mov.w	sl, #0
 801096a:	6013      	str	r3, [r2, #0]
 801096c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801096e:	2b00      	cmp	r3, #0
 8010970:	f43f ae0b 	beq.w	801058a <_strtod_l+0x72>
 8010974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010976:	9805      	ldr	r0, [sp, #20]
 8010978:	f7ff f938 	bl	800fbec <_Bfree>
 801097c:	4649      	mov	r1, r9
 801097e:	9805      	ldr	r0, [sp, #20]
 8010980:	f7ff f934 	bl	800fbec <_Bfree>
 8010984:	4641      	mov	r1, r8
 8010986:	9805      	ldr	r0, [sp, #20]
 8010988:	f7ff f930 	bl	800fbec <_Bfree>
 801098c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801098e:	9805      	ldr	r0, [sp, #20]
 8010990:	f7ff f92c 	bl	800fbec <_Bfree>
 8010994:	4621      	mov	r1, r4
 8010996:	9805      	ldr	r0, [sp, #20]
 8010998:	f7ff f928 	bl	800fbec <_Bfree>
 801099c:	e5f5      	b.n	801058a <_strtod_l+0x72>
 801099e:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80109a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109a4:	4293      	cmp	r3, r2
 80109a6:	dbbc      	blt.n	8010922 <_strtod_l+0x40a>
 80109a8:	f1c5 050f 	rsb	r5, r5, #15
 80109ac:	4c3e      	ldr	r4, [pc, #248]	@ (8010aa8 <_strtod_l+0x590>)
 80109ae:	4652      	mov	r2, sl
 80109b0:	465b      	mov	r3, fp
 80109b2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80109b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109ba:	f7ef fe21 	bl	8000600 <__aeabi_dmul>
 80109be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c0:	1b5d      	subs	r5, r3, r5
 80109c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80109c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80109ca:	e78f      	b.n	80108ec <_strtod_l+0x3d4>
 80109cc:	3316      	adds	r3, #22
 80109ce:	dba8      	blt.n	8010922 <_strtod_l+0x40a>
 80109d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109d2:	4650      	mov	r0, sl
 80109d4:	4659      	mov	r1, fp
 80109d6:	eba3 0808 	sub.w	r8, r3, r8
 80109da:	4b33      	ldr	r3, [pc, #204]	@ (8010aa8 <_strtod_l+0x590>)
 80109dc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80109e0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80109e4:	f7ef ff36 	bl	8000854 <__aeabi_ddiv>
 80109e8:	e782      	b.n	80108f0 <_strtod_l+0x3d8>
 80109ea:	2300      	movs	r3, #0
 80109ec:	1124      	asrs	r4, r4, #4
 80109ee:	4650      	mov	r0, sl
 80109f0:	4659      	mov	r1, fp
 80109f2:	4f2e      	ldr	r7, [pc, #184]	@ (8010aac <_strtod_l+0x594>)
 80109f4:	461e      	mov	r6, r3
 80109f6:	2c01      	cmp	r4, #1
 80109f8:	dc21      	bgt.n	8010a3e <_strtod_l+0x526>
 80109fa:	b10b      	cbz	r3, 8010a00 <_strtod_l+0x4e8>
 80109fc:	4682      	mov	sl, r0
 80109fe:	468b      	mov	fp, r1
 8010a00:	492a      	ldr	r1, [pc, #168]	@ (8010aac <_strtod_l+0x594>)
 8010a02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010a06:	4652      	mov	r2, sl
 8010a08:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010a0c:	465b      	mov	r3, fp
 8010a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a12:	f7ef fdf5 	bl	8000600 <__aeabi_dmul>
 8010a16:	4b26      	ldr	r3, [pc, #152]	@ (8010ab0 <_strtod_l+0x598>)
 8010a18:	460a      	mov	r2, r1
 8010a1a:	4682      	mov	sl, r0
 8010a1c:	400b      	ands	r3, r1
 8010a1e:	4925      	ldr	r1, [pc, #148]	@ (8010ab4 <_strtod_l+0x59c>)
 8010a20:	428b      	cmp	r3, r1
 8010a22:	d898      	bhi.n	8010956 <_strtod_l+0x43e>
 8010a24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010a28:	428b      	cmp	r3, r1
 8010a2a:	bf86      	itte	hi
 8010a2c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010ab8 <_strtod_l+0x5a0>
 8010a30:	f04f 3aff 	movhi.w	sl, #4294967295
 8010a34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010a38:	2300      	movs	r3, #0
 8010a3a:	9308      	str	r3, [sp, #32]
 8010a3c:	e076      	b.n	8010b2c <_strtod_l+0x614>
 8010a3e:	07e2      	lsls	r2, r4, #31
 8010a40:	d504      	bpl.n	8010a4c <_strtod_l+0x534>
 8010a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a46:	f7ef fddb 	bl	8000600 <__aeabi_dmul>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	3601      	adds	r6, #1
 8010a4e:	1064      	asrs	r4, r4, #1
 8010a50:	3708      	adds	r7, #8
 8010a52:	e7d0      	b.n	80109f6 <_strtod_l+0x4de>
 8010a54:	d0f0      	beq.n	8010a38 <_strtod_l+0x520>
 8010a56:	4264      	negs	r4, r4
 8010a58:	f014 020f 	ands.w	r2, r4, #15
 8010a5c:	d00a      	beq.n	8010a74 <_strtod_l+0x55c>
 8010a5e:	4b12      	ldr	r3, [pc, #72]	@ (8010aa8 <_strtod_l+0x590>)
 8010a60:	4650      	mov	r0, sl
 8010a62:	4659      	mov	r1, fp
 8010a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6c:	f7ef fef2 	bl	8000854 <__aeabi_ddiv>
 8010a70:	4682      	mov	sl, r0
 8010a72:	468b      	mov	fp, r1
 8010a74:	1124      	asrs	r4, r4, #4
 8010a76:	d0df      	beq.n	8010a38 <_strtod_l+0x520>
 8010a78:	2c1f      	cmp	r4, #31
 8010a7a:	dd1f      	ble.n	8010abc <_strtod_l+0x5a4>
 8010a7c:	2400      	movs	r4, #0
 8010a7e:	46a0      	mov	r8, r4
 8010a80:	46a1      	mov	r9, r4
 8010a82:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010a84:	2322      	movs	r3, #34	@ 0x22
 8010a86:	9a05      	ldr	r2, [sp, #20]
 8010a88:	f04f 0a00 	mov.w	sl, #0
 8010a8c:	f04f 0b00 	mov.w	fp, #0
 8010a90:	6013      	str	r3, [r2, #0]
 8010a92:	e76b      	b.n	801096c <_strtod_l+0x454>
 8010a94:	0802fc39 	.word	0x0802fc39
 8010a98:	0802ff00 	.word	0x0802ff00
 8010a9c:	0802fc31 	.word	0x0802fc31
 8010aa0:	0802fc68 	.word	0x0802fc68
 8010aa4:	0802fda1 	.word	0x0802fda1
 8010aa8:	0802fe38 	.word	0x0802fe38
 8010aac:	0802fe10 	.word	0x0802fe10
 8010ab0:	7ff00000 	.word	0x7ff00000
 8010ab4:	7ca00000 	.word	0x7ca00000
 8010ab8:	7fefffff 	.word	0x7fefffff
 8010abc:	f014 0310 	ands.w	r3, r4, #16
 8010ac0:	4650      	mov	r0, sl
 8010ac2:	4659      	mov	r1, fp
 8010ac4:	4ea9      	ldr	r6, [pc, #676]	@ (8010d6c <_strtod_l+0x854>)
 8010ac6:	bf18      	it	ne
 8010ac8:	236a      	movne	r3, #106	@ 0x6a
 8010aca:	9308      	str	r3, [sp, #32]
 8010acc:	2300      	movs	r3, #0
 8010ace:	07e7      	lsls	r7, r4, #31
 8010ad0:	d504      	bpl.n	8010adc <_strtod_l+0x5c4>
 8010ad2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ad6:	f7ef fd93 	bl	8000600 <__aeabi_dmul>
 8010ada:	2301      	movs	r3, #1
 8010adc:	1064      	asrs	r4, r4, #1
 8010ade:	f106 0608 	add.w	r6, r6, #8
 8010ae2:	d1f4      	bne.n	8010ace <_strtod_l+0x5b6>
 8010ae4:	b10b      	cbz	r3, 8010aea <_strtod_l+0x5d2>
 8010ae6:	4682      	mov	sl, r0
 8010ae8:	468b      	mov	fp, r1
 8010aea:	9b08      	ldr	r3, [sp, #32]
 8010aec:	b1b3      	cbz	r3, 8010b1c <_strtod_l+0x604>
 8010aee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010af2:	4659      	mov	r1, fp
 8010af4:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	dd0f      	ble.n	8010b1c <_strtod_l+0x604>
 8010afc:	2b1f      	cmp	r3, #31
 8010afe:	dd56      	ble.n	8010bae <_strtod_l+0x696>
 8010b00:	2b34      	cmp	r3, #52	@ 0x34
 8010b02:	f04f 0a00 	mov.w	sl, #0
 8010b06:	bfdb      	ittet	le
 8010b08:	f04f 33ff 	movle.w	r3, #4294967295
 8010b0c:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010b10:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010b14:	4093      	lslle	r3, r2
 8010b16:	bfd8      	it	le
 8010b18:	ea03 0b01 	andle.w	fp, r3, r1
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	2300      	movs	r3, #0
 8010b20:	4650      	mov	r0, sl
 8010b22:	4659      	mov	r1, fp
 8010b24:	f7ef ffd4 	bl	8000ad0 <__aeabi_dcmpeq>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	d1a7      	bne.n	8010a7c <_strtod_l+0x564>
 8010b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b2e:	464a      	mov	r2, r9
 8010b30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010b32:	9300      	str	r3, [sp, #0]
 8010b34:	462b      	mov	r3, r5
 8010b36:	9805      	ldr	r0, [sp, #20]
 8010b38:	f7ff f8c2 	bl	800fcc0 <__s2b>
 8010b3c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f43f af09 	beq.w	8010956 <_strtod_l+0x43e>
 8010b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b46:	2400      	movs	r4, #0
 8010b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b4a:	2a00      	cmp	r2, #0
 8010b4c:	eba3 0308 	sub.w	r3, r3, r8
 8010b50:	46a0      	mov	r8, r4
 8010b52:	bfa8      	it	ge
 8010b54:	2300      	movge	r3, #0
 8010b56:	9312      	str	r3, [sp, #72]	@ 0x48
 8010b58:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010b5c:	9316      	str	r3, [sp, #88]	@ 0x58
 8010b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b60:	9805      	ldr	r0, [sp, #20]
 8010b62:	6859      	ldr	r1, [r3, #4]
 8010b64:	f7ff f802 	bl	800fb6c <_Balloc>
 8010b68:	4681      	mov	r9, r0
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	f43f aef7 	beq.w	801095e <_strtod_l+0x446>
 8010b70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b72:	300c      	adds	r0, #12
 8010b74:	691a      	ldr	r2, [r3, #16]
 8010b76:	f103 010c 	add.w	r1, r3, #12
 8010b7a:	3202      	adds	r2, #2
 8010b7c:	0092      	lsls	r2, r2, #2
 8010b7e:	f7fe f880 	bl	800ec82 <memcpy>
 8010b82:	aa1c      	add	r2, sp, #112	@ 0x70
 8010b84:	a91b      	add	r1, sp, #108	@ 0x6c
 8010b86:	9805      	ldr	r0, [sp, #20]
 8010b88:	ec4b ab10 	vmov	d0, sl, fp
 8010b8c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010b90:	f7ff fbd4 	bl	801033c <__d2b>
 8010b94:	901a      	str	r0, [sp, #104]	@ 0x68
 8010b96:	2800      	cmp	r0, #0
 8010b98:	f43f aee1 	beq.w	801095e <_strtod_l+0x446>
 8010b9c:	2101      	movs	r1, #1
 8010b9e:	9805      	ldr	r0, [sp, #20]
 8010ba0:	f7ff f924 	bl	800fdec <__i2b>
 8010ba4:	4680      	mov	r8, r0
 8010ba6:	b948      	cbnz	r0, 8010bbc <_strtod_l+0x6a4>
 8010ba8:	f04f 0800 	mov.w	r8, #0
 8010bac:	e6d7      	b.n	801095e <_strtod_l+0x446>
 8010bae:	f04f 32ff 	mov.w	r2, #4294967295
 8010bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb6:	ea03 0a0a 	and.w	sl, r3, sl
 8010bba:	e7af      	b.n	8010b1c <_strtod_l+0x604>
 8010bbc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010bbe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010bc0:	2d00      	cmp	r5, #0
 8010bc2:	bfa9      	itett	ge
 8010bc4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010bc6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010bc8:	18ef      	addge	r7, r5, r3
 8010bca:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010bcc:	bfb8      	it	lt
 8010bce:	1b5e      	sublt	r6, r3, r5
 8010bd0:	9b08      	ldr	r3, [sp, #32]
 8010bd2:	bfb8      	it	lt
 8010bd4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010bd6:	1aed      	subs	r5, r5, r3
 8010bd8:	4b65      	ldr	r3, [pc, #404]	@ (8010d70 <_strtod_l+0x858>)
 8010bda:	4415      	add	r5, r2
 8010bdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010be0:	3d01      	subs	r5, #1
 8010be2:	429d      	cmp	r5, r3
 8010be4:	da4f      	bge.n	8010c86 <_strtod_l+0x76e>
 8010be6:	1b5b      	subs	r3, r3, r5
 8010be8:	2101      	movs	r1, #1
 8010bea:	2b1f      	cmp	r3, #31
 8010bec:	eba2 0203 	sub.w	r2, r2, r3
 8010bf0:	dc3d      	bgt.n	8010c6e <_strtod_l+0x756>
 8010bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8010bf6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8010bfc:	18bd      	adds	r5, r7, r2
 8010bfe:	9b08      	ldr	r3, [sp, #32]
 8010c00:	4416      	add	r6, r2
 8010c02:	42af      	cmp	r7, r5
 8010c04:	441e      	add	r6, r3
 8010c06:	463b      	mov	r3, r7
 8010c08:	bfa8      	it	ge
 8010c0a:	462b      	movge	r3, r5
 8010c0c:	42b3      	cmp	r3, r6
 8010c0e:	bfa8      	it	ge
 8010c10:	4633      	movge	r3, r6
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	bfc2      	ittt	gt
 8010c16:	1aed      	subgt	r5, r5, r3
 8010c18:	1af6      	subgt	r6, r6, r3
 8010c1a:	1aff      	subgt	r7, r7, r3
 8010c1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	dd16      	ble.n	8010c50 <_strtod_l+0x738>
 8010c22:	4641      	mov	r1, r8
 8010c24:	461a      	mov	r2, r3
 8010c26:	9805      	ldr	r0, [sp, #20]
 8010c28:	f7ff f99a 	bl	800ff60 <__pow5mult>
 8010c2c:	4680      	mov	r8, r0
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d0ba      	beq.n	8010ba8 <_strtod_l+0x690>
 8010c32:	4601      	mov	r1, r0
 8010c34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010c36:	9805      	ldr	r0, [sp, #20]
 8010c38:	f7ff f8ee 	bl	800fe18 <__multiply>
 8010c3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	f43f ae8d 	beq.w	801095e <_strtod_l+0x446>
 8010c44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c46:	9805      	ldr	r0, [sp, #20]
 8010c48:	f7fe ffd0 	bl	800fbec <_Bfree>
 8010c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c50:	2d00      	cmp	r5, #0
 8010c52:	dc1d      	bgt.n	8010c90 <_strtod_l+0x778>
 8010c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	dd23      	ble.n	8010ca2 <_strtod_l+0x78a>
 8010c5a:	4649      	mov	r1, r9
 8010c5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010c5e:	9805      	ldr	r0, [sp, #20]
 8010c60:	f7ff f97e 	bl	800ff60 <__pow5mult>
 8010c64:	4681      	mov	r9, r0
 8010c66:	b9e0      	cbnz	r0, 8010ca2 <_strtod_l+0x78a>
 8010c68:	f04f 0900 	mov.w	r9, #0
 8010c6c:	e677      	b.n	801095e <_strtod_l+0x446>
 8010c6e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010c72:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010c74:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010c78:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010c7c:	35e2      	adds	r5, #226	@ 0xe2
 8010c7e:	fa01 f305 	lsl.w	r3, r1, r5
 8010c82:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c84:	e7ba      	b.n	8010bfc <_strtod_l+0x6e4>
 8010c86:	2300      	movs	r3, #0
 8010c88:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c8e:	e7b5      	b.n	8010bfc <_strtod_l+0x6e4>
 8010c90:	462a      	mov	r2, r5
 8010c92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c94:	9805      	ldr	r0, [sp, #20]
 8010c96:	f7ff f9bd 	bl	8010014 <__lshift>
 8010c9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	d1d9      	bne.n	8010c54 <_strtod_l+0x73c>
 8010ca0:	e65d      	b.n	801095e <_strtod_l+0x446>
 8010ca2:	2e00      	cmp	r6, #0
 8010ca4:	dd07      	ble.n	8010cb6 <_strtod_l+0x79e>
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	4632      	mov	r2, r6
 8010caa:	9805      	ldr	r0, [sp, #20]
 8010cac:	f7ff f9b2 	bl	8010014 <__lshift>
 8010cb0:	4681      	mov	r9, r0
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d0d8      	beq.n	8010c68 <_strtod_l+0x750>
 8010cb6:	2f00      	cmp	r7, #0
 8010cb8:	dd08      	ble.n	8010ccc <_strtod_l+0x7b4>
 8010cba:	4641      	mov	r1, r8
 8010cbc:	463a      	mov	r2, r7
 8010cbe:	9805      	ldr	r0, [sp, #20]
 8010cc0:	f7ff f9a8 	bl	8010014 <__lshift>
 8010cc4:	4680      	mov	r8, r0
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	f43f ae49 	beq.w	801095e <_strtod_l+0x446>
 8010ccc:	464a      	mov	r2, r9
 8010cce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010cd0:	9805      	ldr	r0, [sp, #20]
 8010cd2:	f7ff fa27 	bl	8010124 <__mdiff>
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	f43f ae40 	beq.w	801095e <_strtod_l+0x446>
 8010cde:	68c3      	ldr	r3, [r0, #12]
 8010ce0:	4641      	mov	r1, r8
 8010ce2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	60c3      	str	r3, [r0, #12]
 8010ce8:	f7ff fa00 	bl	80100ec <__mcmp>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	da45      	bge.n	8010d7c <_strtod_l+0x864>
 8010cf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cf2:	ea53 030a 	orrs.w	r3, r3, sl
 8010cf6:	d16b      	bne.n	8010dd0 <_strtod_l+0x8b8>
 8010cf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d167      	bne.n	8010dd0 <_strtod_l+0x8b8>
 8010d00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d04:	0d1b      	lsrs	r3, r3, #20
 8010d06:	051b      	lsls	r3, r3, #20
 8010d08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010d0c:	d960      	bls.n	8010dd0 <_strtod_l+0x8b8>
 8010d0e:	6963      	ldr	r3, [r4, #20]
 8010d10:	b913      	cbnz	r3, 8010d18 <_strtod_l+0x800>
 8010d12:	6923      	ldr	r3, [r4, #16]
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	dd5b      	ble.n	8010dd0 <_strtod_l+0x8b8>
 8010d18:	4621      	mov	r1, r4
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	9805      	ldr	r0, [sp, #20]
 8010d1e:	f7ff f979 	bl	8010014 <__lshift>
 8010d22:	4641      	mov	r1, r8
 8010d24:	4604      	mov	r4, r0
 8010d26:	f7ff f9e1 	bl	80100ec <__mcmp>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	dd50      	ble.n	8010dd0 <_strtod_l+0x8b8>
 8010d2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d32:	9a08      	ldr	r2, [sp, #32]
 8010d34:	0d1b      	lsrs	r3, r3, #20
 8010d36:	051b      	lsls	r3, r3, #20
 8010d38:	2a00      	cmp	r2, #0
 8010d3a:	d06a      	beq.n	8010e12 <_strtod_l+0x8fa>
 8010d3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010d40:	d867      	bhi.n	8010e12 <_strtod_l+0x8fa>
 8010d42:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010d46:	f67f ae9d 	bls.w	8010a84 <_strtod_l+0x56c>
 8010d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8010d74 <_strtod_l+0x85c>)
 8010d4c:	4650      	mov	r0, sl
 8010d4e:	4659      	mov	r1, fp
 8010d50:	2200      	movs	r2, #0
 8010d52:	f7ef fc55 	bl	8000600 <__aeabi_dmul>
 8010d56:	4b08      	ldr	r3, [pc, #32]	@ (8010d78 <_strtod_l+0x860>)
 8010d58:	4682      	mov	sl, r0
 8010d5a:	468b      	mov	fp, r1
 8010d5c:	400b      	ands	r3, r1
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f47f ae08 	bne.w	8010974 <_strtod_l+0x45c>
 8010d64:	2322      	movs	r3, #34	@ 0x22
 8010d66:	9a05      	ldr	r2, [sp, #20]
 8010d68:	6013      	str	r3, [r2, #0]
 8010d6a:	e603      	b.n	8010974 <_strtod_l+0x45c>
 8010d6c:	0802ff28 	.word	0x0802ff28
 8010d70:	fffffc02 	.word	0xfffffc02
 8010d74:	39500000 	.word	0x39500000
 8010d78:	7ff00000 	.word	0x7ff00000
 8010d7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010d80:	d165      	bne.n	8010e4e <_strtod_l+0x936>
 8010d82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d88:	b35a      	cbz	r2, 8010de2 <_strtod_l+0x8ca>
 8010d8a:	4a9f      	ldr	r2, [pc, #636]	@ (8011008 <_strtod_l+0xaf0>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d12b      	bne.n	8010de8 <_strtod_l+0x8d0>
 8010d90:	9b08      	ldr	r3, [sp, #32]
 8010d92:	4651      	mov	r1, sl
 8010d94:	b303      	cbz	r3, 8010dd8 <_strtod_l+0x8c0>
 8010d96:	465a      	mov	r2, fp
 8010d98:	4b9c      	ldr	r3, [pc, #624]	@ (801100c <_strtod_l+0xaf4>)
 8010d9a:	4013      	ands	r3, r2
 8010d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010da0:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010da4:	d81b      	bhi.n	8010dde <_strtod_l+0x8c6>
 8010da6:	0d1b      	lsrs	r3, r3, #20
 8010da8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010dac:	fa02 f303 	lsl.w	r3, r2, r3
 8010db0:	4299      	cmp	r1, r3
 8010db2:	d119      	bne.n	8010de8 <_strtod_l+0x8d0>
 8010db4:	4b96      	ldr	r3, [pc, #600]	@ (8011010 <_strtod_l+0xaf8>)
 8010db6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d102      	bne.n	8010dc2 <_strtod_l+0x8aa>
 8010dbc:	3101      	adds	r1, #1
 8010dbe:	f43f adce 	beq.w	801095e <_strtod_l+0x446>
 8010dc2:	4b92      	ldr	r3, [pc, #584]	@ (801100c <_strtod_l+0xaf4>)
 8010dc4:	f04f 0a00 	mov.w	sl, #0
 8010dc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dca:	401a      	ands	r2, r3
 8010dcc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010dd0:	9b08      	ldr	r3, [sp, #32]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1b9      	bne.n	8010d4a <_strtod_l+0x832>
 8010dd6:	e5cd      	b.n	8010974 <_strtod_l+0x45c>
 8010dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ddc:	e7e8      	b.n	8010db0 <_strtod_l+0x898>
 8010dde:	4613      	mov	r3, r2
 8010de0:	e7e6      	b.n	8010db0 <_strtod_l+0x898>
 8010de2:	ea53 030a 	orrs.w	r3, r3, sl
 8010de6:	d0a2      	beq.n	8010d2e <_strtod_l+0x816>
 8010de8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010dea:	b1db      	cbz	r3, 8010e24 <_strtod_l+0x90c>
 8010dec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dee:	4213      	tst	r3, r2
 8010df0:	d0ee      	beq.n	8010dd0 <_strtod_l+0x8b8>
 8010df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010df4:	4650      	mov	r0, sl
 8010df6:	9a08      	ldr	r2, [sp, #32]
 8010df8:	4659      	mov	r1, fp
 8010dfa:	b1bb      	cbz	r3, 8010e2c <_strtod_l+0x914>
 8010dfc:	f7ff fb6c 	bl	80104d8 <sulp>
 8010e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e04:	ec53 2b10 	vmov	r2, r3, d0
 8010e08:	f7ef fa44 	bl	8000294 <__adddf3>
 8010e0c:	4682      	mov	sl, r0
 8010e0e:	468b      	mov	fp, r1
 8010e10:	e7de      	b.n	8010dd0 <_strtod_l+0x8b8>
 8010e12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010e16:	f04f 3aff 	mov.w	sl, #4294967295
 8010e1a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e1e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e22:	e7d5      	b.n	8010dd0 <_strtod_l+0x8b8>
 8010e24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010e26:	ea13 0f0a 	tst.w	r3, sl
 8010e2a:	e7e1      	b.n	8010df0 <_strtod_l+0x8d8>
 8010e2c:	f7ff fb54 	bl	80104d8 <sulp>
 8010e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e34:	ec53 2b10 	vmov	r2, r3, d0
 8010e38:	f7ef fa2a 	bl	8000290 <__aeabi_dsub>
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	4682      	mov	sl, r0
 8010e42:	468b      	mov	fp, r1
 8010e44:	f7ef fe44 	bl	8000ad0 <__aeabi_dcmpeq>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	d0c1      	beq.n	8010dd0 <_strtod_l+0x8b8>
 8010e4c:	e61a      	b.n	8010a84 <_strtod_l+0x56c>
 8010e4e:	4641      	mov	r1, r8
 8010e50:	4620      	mov	r0, r4
 8010e52:	f7ff facb 	bl	80103ec <__ratio>
 8010e56:	2200      	movs	r2, #0
 8010e58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010e5c:	ec57 6b10 	vmov	r6, r7, d0
 8010e60:	4630      	mov	r0, r6
 8010e62:	4639      	mov	r1, r7
 8010e64:	f7ef fe48 	bl	8000af8 <__aeabi_dcmple>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d06f      	beq.n	8010f4c <_strtod_l+0xa34>
 8010e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d17a      	bne.n	8010f68 <_strtod_l+0xa50>
 8010e72:	f1ba 0f00 	cmp.w	sl, #0
 8010e76:	d158      	bne.n	8010f2a <_strtod_l+0xa12>
 8010e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d15a      	bne.n	8010f38 <_strtod_l+0xa20>
 8010e82:	2200      	movs	r2, #0
 8010e84:	4b63      	ldr	r3, [pc, #396]	@ (8011014 <_strtod_l+0xafc>)
 8010e86:	4630      	mov	r0, r6
 8010e88:	4639      	mov	r1, r7
 8010e8a:	f7ef fe2b 	bl	8000ae4 <__aeabi_dcmplt>
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	d159      	bne.n	8010f46 <_strtod_l+0xa2e>
 8010e92:	4630      	mov	r0, r6
 8010e94:	4639      	mov	r1, r7
 8010e96:	2200      	movs	r2, #0
 8010e98:	4b5f      	ldr	r3, [pc, #380]	@ (8011018 <_strtod_l+0xb00>)
 8010e9a:	f7ef fbb1 	bl	8000600 <__aeabi_dmul>
 8010e9e:	4606      	mov	r6, r0
 8010ea0:	460f      	mov	r7, r1
 8010ea2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010ea6:	9606      	str	r6, [sp, #24]
 8010ea8:	9307      	str	r3, [sp, #28]
 8010eaa:	4d58      	ldr	r5, [pc, #352]	@ (801100c <_strtod_l+0xaf4>)
 8010eac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010eb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010eb6:	401d      	ands	r5, r3
 8010eb8:	4b58      	ldr	r3, [pc, #352]	@ (801101c <_strtod_l+0xb04>)
 8010eba:	429d      	cmp	r5, r3
 8010ebc:	f040 80b2 	bne.w	8011024 <_strtod_l+0xb0c>
 8010ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ec2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010ec6:	ec4b ab10 	vmov	d0, sl, fp
 8010eca:	f7ff f9c3 	bl	8010254 <__ulp>
 8010ece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ed2:	ec51 0b10 	vmov	r0, r1, d0
 8010ed6:	f7ef fb93 	bl	8000600 <__aeabi_dmul>
 8010eda:	4652      	mov	r2, sl
 8010edc:	465b      	mov	r3, fp
 8010ede:	f7ef f9d9 	bl	8000294 <__adddf3>
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	4949      	ldr	r1, [pc, #292]	@ (801100c <_strtod_l+0xaf4>)
 8010ee6:	4682      	mov	sl, r0
 8010ee8:	4a4d      	ldr	r2, [pc, #308]	@ (8011020 <_strtod_l+0xb08>)
 8010eea:	4019      	ands	r1, r3
 8010eec:	4291      	cmp	r1, r2
 8010eee:	d942      	bls.n	8010f76 <_strtod_l+0xa5e>
 8010ef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ef2:	4b47      	ldr	r3, [pc, #284]	@ (8011010 <_strtod_l+0xaf8>)
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d103      	bne.n	8010f00 <_strtod_l+0x9e8>
 8010ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010efa:	3301      	adds	r3, #1
 8010efc:	f43f ad2f 	beq.w	801095e <_strtod_l+0x446>
 8010f00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011010 <_strtod_l+0xaf8>
 8010f04:	f04f 3aff 	mov.w	sl, #4294967295
 8010f08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f0a:	9805      	ldr	r0, [sp, #20]
 8010f0c:	f7fe fe6e 	bl	800fbec <_Bfree>
 8010f10:	4649      	mov	r1, r9
 8010f12:	9805      	ldr	r0, [sp, #20]
 8010f14:	f7fe fe6a 	bl	800fbec <_Bfree>
 8010f18:	4641      	mov	r1, r8
 8010f1a:	9805      	ldr	r0, [sp, #20]
 8010f1c:	f7fe fe66 	bl	800fbec <_Bfree>
 8010f20:	4621      	mov	r1, r4
 8010f22:	9805      	ldr	r0, [sp, #20]
 8010f24:	f7fe fe62 	bl	800fbec <_Bfree>
 8010f28:	e619      	b.n	8010b5e <_strtod_l+0x646>
 8010f2a:	f1ba 0f01 	cmp.w	sl, #1
 8010f2e:	d103      	bne.n	8010f38 <_strtod_l+0xa20>
 8010f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f43f ada6 	beq.w	8010a84 <_strtod_l+0x56c>
 8010f38:	2600      	movs	r6, #0
 8010f3a:	4f36      	ldr	r7, [pc, #216]	@ (8011014 <_strtod_l+0xafc>)
 8010f3c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8010fe8 <_strtod_l+0xad0>
 8010f40:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010f44:	e7b1      	b.n	8010eaa <_strtod_l+0x992>
 8010f46:	2600      	movs	r6, #0
 8010f48:	4f33      	ldr	r7, [pc, #204]	@ (8011018 <_strtod_l+0xb00>)
 8010f4a:	e7aa      	b.n	8010ea2 <_strtod_l+0x98a>
 8010f4c:	4b32      	ldr	r3, [pc, #200]	@ (8011018 <_strtod_l+0xb00>)
 8010f4e:	4630      	mov	r0, r6
 8010f50:	4639      	mov	r1, r7
 8010f52:	2200      	movs	r2, #0
 8010f54:	f7ef fb54 	bl	8000600 <__aeabi_dmul>
 8010f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f5a:	4606      	mov	r6, r0
 8010f5c:	460f      	mov	r7, r1
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d09f      	beq.n	8010ea2 <_strtod_l+0x98a>
 8010f62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010f66:	e7a0      	b.n	8010eaa <_strtod_l+0x992>
 8010f68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010ff0 <_strtod_l+0xad8>
 8010f6c:	ec57 6b17 	vmov	r6, r7, d7
 8010f70:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010f74:	e799      	b.n	8010eaa <_strtod_l+0x992>
 8010f76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010f7a:	9b08      	ldr	r3, [sp, #32]
 8010f7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d1c1      	bne.n	8010f08 <_strtod_l+0x9f0>
 8010f84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010f88:	0d1b      	lsrs	r3, r3, #20
 8010f8a:	051b      	lsls	r3, r3, #20
 8010f8c:	429d      	cmp	r5, r3
 8010f8e:	d1bb      	bne.n	8010f08 <_strtod_l+0x9f0>
 8010f90:	4630      	mov	r0, r6
 8010f92:	4639      	mov	r1, r7
 8010f94:	f7ef fe94 	bl	8000cc0 <__aeabi_d2lz>
 8010f98:	f7ef fb04 	bl	80005a4 <__aeabi_l2d>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	4639      	mov	r1, r7
 8010fa4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010fa8:	f7ef f972 	bl	8000290 <__aeabi_dsub>
 8010fac:	460b      	mov	r3, r1
 8010fae:	4602      	mov	r2, r0
 8010fb0:	ea46 060a 	orr.w	r6, r6, sl
 8010fb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fba:	431e      	orrs	r6, r3
 8010fbc:	d06f      	beq.n	801109e <_strtod_l+0xb86>
 8010fbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8010ff8 <_strtod_l+0xae0>)
 8010fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc4:	f7ef fd8e 	bl	8000ae4 <__aeabi_dcmplt>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	f47f acd3 	bne.w	8010974 <_strtod_l+0x45c>
 8010fce:	a30c      	add	r3, pc, #48	@ (adr r3, 8011000 <_strtod_l+0xae8>)
 8010fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010fd8:	f7ef fda2 	bl	8000b20 <__aeabi_dcmpgt>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d093      	beq.n	8010f08 <_strtod_l+0x9f0>
 8010fe0:	e4c8      	b.n	8010974 <_strtod_l+0x45c>
 8010fe2:	bf00      	nop
 8010fe4:	f3af 8000 	nop.w
 8010fe8:	00000000 	.word	0x00000000
 8010fec:	bff00000 	.word	0xbff00000
 8010ff0:	00000000 	.word	0x00000000
 8010ff4:	3ff00000 	.word	0x3ff00000
 8010ff8:	94a03595 	.word	0x94a03595
 8010ffc:	3fdfffff 	.word	0x3fdfffff
 8011000:	35afe535 	.word	0x35afe535
 8011004:	3fe00000 	.word	0x3fe00000
 8011008:	000fffff 	.word	0x000fffff
 801100c:	7ff00000 	.word	0x7ff00000
 8011010:	7fefffff 	.word	0x7fefffff
 8011014:	3ff00000 	.word	0x3ff00000
 8011018:	3fe00000 	.word	0x3fe00000
 801101c:	7fe00000 	.word	0x7fe00000
 8011020:	7c9fffff 	.word	0x7c9fffff
 8011024:	9b08      	ldr	r3, [sp, #32]
 8011026:	b323      	cbz	r3, 8011072 <_strtod_l+0xb5a>
 8011028:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801102c:	d821      	bhi.n	8011072 <_strtod_l+0xb5a>
 801102e:	4630      	mov	r0, r6
 8011030:	4639      	mov	r1, r7
 8011032:	a327      	add	r3, pc, #156	@ (adr r3, 80110d0 <_strtod_l+0xbb8>)
 8011034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011038:	f7ef fd5e 	bl	8000af8 <__aeabi_dcmple>
 801103c:	b1a0      	cbz	r0, 8011068 <_strtod_l+0xb50>
 801103e:	4639      	mov	r1, r7
 8011040:	4630      	mov	r0, r6
 8011042:	f7ef fdb5 	bl	8000bb0 <__aeabi_d2uiz>
 8011046:	2801      	cmp	r0, #1
 8011048:	bf38      	it	cc
 801104a:	2001      	movcc	r0, #1
 801104c:	f7ef fa5e 	bl	800050c <__aeabi_ui2d>
 8011050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011052:	4606      	mov	r6, r0
 8011054:	460f      	mov	r7, r1
 8011056:	b9fb      	cbnz	r3, 8011098 <_strtod_l+0xb80>
 8011058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801105c:	9014      	str	r0, [sp, #80]	@ 0x50
 801105e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011060:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011064:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801106a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801106e:	1b5b      	subs	r3, r3, r5
 8011070:	9311      	str	r3, [sp, #68]	@ 0x44
 8011072:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011076:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801107a:	f7ff f8eb 	bl	8010254 <__ulp>
 801107e:	4650      	mov	r0, sl
 8011080:	4659      	mov	r1, fp
 8011082:	ec53 2b10 	vmov	r2, r3, d0
 8011086:	f7ef fabb 	bl	8000600 <__aeabi_dmul>
 801108a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801108e:	f7ef f901 	bl	8000294 <__adddf3>
 8011092:	4682      	mov	sl, r0
 8011094:	468b      	mov	fp, r1
 8011096:	e770      	b.n	8010f7a <_strtod_l+0xa62>
 8011098:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801109c:	e7e0      	b.n	8011060 <_strtod_l+0xb48>
 801109e:	a30e      	add	r3, pc, #56	@ (adr r3, 80110d8 <_strtod_l+0xbc0>)
 80110a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a4:	f7ef fd1e 	bl	8000ae4 <__aeabi_dcmplt>
 80110a8:	e798      	b.n	8010fdc <_strtod_l+0xac4>
 80110aa:	2300      	movs	r3, #0
 80110ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80110ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110b0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80110b2:	6013      	str	r3, [r2, #0]
 80110b4:	f7ff ba6d 	b.w	8010592 <_strtod_l+0x7a>
 80110b8:	2a65      	cmp	r2, #101	@ 0x65
 80110ba:	f43f ab67 	beq.w	801078c <_strtod_l+0x274>
 80110be:	2a45      	cmp	r2, #69	@ 0x45
 80110c0:	f43f ab64 	beq.w	801078c <_strtod_l+0x274>
 80110c4:	2301      	movs	r3, #1
 80110c6:	f7ff bba0 	b.w	801080a <_strtod_l+0x2f2>
 80110ca:	bf00      	nop
 80110cc:	f3af 8000 	nop.w
 80110d0:	ffc00000 	.word	0xffc00000
 80110d4:	41dfffff 	.word	0x41dfffff
 80110d8:	94a03595 	.word	0x94a03595
 80110dc:	3fcfffff 	.word	0x3fcfffff

080110e0 <_strtod_r>:
 80110e0:	4b01      	ldr	r3, [pc, #4]	@ (80110e8 <_strtod_r+0x8>)
 80110e2:	f7ff ba19 	b.w	8010518 <_strtod_l>
 80110e6:	bf00      	nop
 80110e8:	20000080 	.word	0x20000080

080110ec <_strtol_l.isra.0>:
 80110ec:	2b24      	cmp	r3, #36	@ 0x24
 80110ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f2:	4686      	mov	lr, r0
 80110f4:	4690      	mov	r8, r2
 80110f6:	d801      	bhi.n	80110fc <_strtol_l.isra.0+0x10>
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d106      	bne.n	801110a <_strtol_l.isra.0+0x1e>
 80110fc:	f7fd fd86 	bl	800ec0c <__errno>
 8011100:	2316      	movs	r3, #22
 8011102:	6003      	str	r3, [r0, #0]
 8011104:	2000      	movs	r0, #0
 8011106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801110a:	460d      	mov	r5, r1
 801110c:	4833      	ldr	r0, [pc, #204]	@ (80111dc <_strtol_l.isra.0+0xf0>)
 801110e:	462a      	mov	r2, r5
 8011110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011114:	5d06      	ldrb	r6, [r0, r4]
 8011116:	f016 0608 	ands.w	r6, r6, #8
 801111a:	d1f8      	bne.n	801110e <_strtol_l.isra.0+0x22>
 801111c:	2c2d      	cmp	r4, #45	@ 0x2d
 801111e:	d110      	bne.n	8011142 <_strtol_l.isra.0+0x56>
 8011120:	782c      	ldrb	r4, [r5, #0]
 8011122:	2601      	movs	r6, #1
 8011124:	1c95      	adds	r5, r2, #2
 8011126:	f033 0210 	bics.w	r2, r3, #16
 801112a:	d115      	bne.n	8011158 <_strtol_l.isra.0+0x6c>
 801112c:	2c30      	cmp	r4, #48	@ 0x30
 801112e:	d10d      	bne.n	801114c <_strtol_l.isra.0+0x60>
 8011130:	782a      	ldrb	r2, [r5, #0]
 8011132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011136:	2a58      	cmp	r2, #88	@ 0x58
 8011138:	d108      	bne.n	801114c <_strtol_l.isra.0+0x60>
 801113a:	786c      	ldrb	r4, [r5, #1]
 801113c:	3502      	adds	r5, #2
 801113e:	2310      	movs	r3, #16
 8011140:	e00a      	b.n	8011158 <_strtol_l.isra.0+0x6c>
 8011142:	2c2b      	cmp	r4, #43	@ 0x2b
 8011144:	bf04      	itt	eq
 8011146:	782c      	ldrbeq	r4, [r5, #0]
 8011148:	1c95      	addeq	r5, r2, #2
 801114a:	e7ec      	b.n	8011126 <_strtol_l.isra.0+0x3a>
 801114c:	2b00      	cmp	r3, #0
 801114e:	d1f6      	bne.n	801113e <_strtol_l.isra.0+0x52>
 8011150:	2c30      	cmp	r4, #48	@ 0x30
 8011152:	bf14      	ite	ne
 8011154:	230a      	movne	r3, #10
 8011156:	2308      	moveq	r3, #8
 8011158:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801115c:	2200      	movs	r2, #0
 801115e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011162:	4610      	mov	r0, r2
 8011164:	fbbc f9f3 	udiv	r9, ip, r3
 8011168:	fb03 ca19 	mls	sl, r3, r9, ip
 801116c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011170:	2f09      	cmp	r7, #9
 8011172:	d80f      	bhi.n	8011194 <_strtol_l.isra.0+0xa8>
 8011174:	463c      	mov	r4, r7
 8011176:	42a3      	cmp	r3, r4
 8011178:	dd1b      	ble.n	80111b2 <_strtol_l.isra.0+0xc6>
 801117a:	1c57      	adds	r7, r2, #1
 801117c:	d007      	beq.n	801118e <_strtol_l.isra.0+0xa2>
 801117e:	4581      	cmp	r9, r0
 8011180:	d314      	bcc.n	80111ac <_strtol_l.isra.0+0xc0>
 8011182:	d101      	bne.n	8011188 <_strtol_l.isra.0+0x9c>
 8011184:	45a2      	cmp	sl, r4
 8011186:	db11      	blt.n	80111ac <_strtol_l.isra.0+0xc0>
 8011188:	fb00 4003 	mla	r0, r0, r3, r4
 801118c:	2201      	movs	r2, #1
 801118e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011192:	e7eb      	b.n	801116c <_strtol_l.isra.0+0x80>
 8011194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011198:	2f19      	cmp	r7, #25
 801119a:	d801      	bhi.n	80111a0 <_strtol_l.isra.0+0xb4>
 801119c:	3c37      	subs	r4, #55	@ 0x37
 801119e:	e7ea      	b.n	8011176 <_strtol_l.isra.0+0x8a>
 80111a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80111a4:	2f19      	cmp	r7, #25
 80111a6:	d804      	bhi.n	80111b2 <_strtol_l.isra.0+0xc6>
 80111a8:	3c57      	subs	r4, #87	@ 0x57
 80111aa:	e7e4      	b.n	8011176 <_strtol_l.isra.0+0x8a>
 80111ac:	f04f 32ff 	mov.w	r2, #4294967295
 80111b0:	e7ed      	b.n	801118e <_strtol_l.isra.0+0xa2>
 80111b2:	1c53      	adds	r3, r2, #1
 80111b4:	d108      	bne.n	80111c8 <_strtol_l.isra.0+0xdc>
 80111b6:	2322      	movs	r3, #34	@ 0x22
 80111b8:	4660      	mov	r0, ip
 80111ba:	f8ce 3000 	str.w	r3, [lr]
 80111be:	f1b8 0f00 	cmp.w	r8, #0
 80111c2:	d0a0      	beq.n	8011106 <_strtol_l.isra.0+0x1a>
 80111c4:	1e69      	subs	r1, r5, #1
 80111c6:	e006      	b.n	80111d6 <_strtol_l.isra.0+0xea>
 80111c8:	b106      	cbz	r6, 80111cc <_strtol_l.isra.0+0xe0>
 80111ca:	4240      	negs	r0, r0
 80111cc:	f1b8 0f00 	cmp.w	r8, #0
 80111d0:	d099      	beq.n	8011106 <_strtol_l.isra.0+0x1a>
 80111d2:	2a00      	cmp	r2, #0
 80111d4:	d1f6      	bne.n	80111c4 <_strtol_l.isra.0+0xd8>
 80111d6:	f8c8 1000 	str.w	r1, [r8]
 80111da:	e794      	b.n	8011106 <_strtol_l.isra.0+0x1a>
 80111dc:	0802ff51 	.word	0x0802ff51

080111e0 <_strtol_r>:
 80111e0:	f7ff bf84 	b.w	80110ec <_strtol_l.isra.0>

080111e4 <__ssputs_r>:
 80111e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111e8:	461f      	mov	r7, r3
 80111ea:	688e      	ldr	r6, [r1, #8]
 80111ec:	4682      	mov	sl, r0
 80111ee:	460c      	mov	r4, r1
 80111f0:	42be      	cmp	r6, r7
 80111f2:	4690      	mov	r8, r2
 80111f4:	680b      	ldr	r3, [r1, #0]
 80111f6:	d82d      	bhi.n	8011254 <__ssputs_r+0x70>
 80111f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011200:	d026      	beq.n	8011250 <__ssputs_r+0x6c>
 8011202:	6965      	ldr	r5, [r4, #20]
 8011204:	6909      	ldr	r1, [r1, #16]
 8011206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801120a:	eba3 0901 	sub.w	r9, r3, r1
 801120e:	1c7b      	adds	r3, r7, #1
 8011210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011214:	444b      	add	r3, r9
 8011216:	106d      	asrs	r5, r5, #1
 8011218:	429d      	cmp	r5, r3
 801121a:	bf38      	it	cc
 801121c:	461d      	movcc	r5, r3
 801121e:	0553      	lsls	r3, r2, #21
 8011220:	d527      	bpl.n	8011272 <__ssputs_r+0x8e>
 8011222:	4629      	mov	r1, r5
 8011224:	f7fe fc16 	bl	800fa54 <_malloc_r>
 8011228:	4606      	mov	r6, r0
 801122a:	b360      	cbz	r0, 8011286 <__ssputs_r+0xa2>
 801122c:	464a      	mov	r2, r9
 801122e:	6921      	ldr	r1, [r4, #16]
 8011230:	f7fd fd27 	bl	800ec82 <memcpy>
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801123a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801123e:	81a3      	strh	r3, [r4, #12]
 8011240:	6126      	str	r6, [r4, #16]
 8011242:	444e      	add	r6, r9
 8011244:	6165      	str	r5, [r4, #20]
 8011246:	eba5 0509 	sub.w	r5, r5, r9
 801124a:	6026      	str	r6, [r4, #0]
 801124c:	463e      	mov	r6, r7
 801124e:	60a5      	str	r5, [r4, #8]
 8011250:	42be      	cmp	r6, r7
 8011252:	d900      	bls.n	8011256 <__ssputs_r+0x72>
 8011254:	463e      	mov	r6, r7
 8011256:	4632      	mov	r2, r6
 8011258:	4641      	mov	r1, r8
 801125a:	6820      	ldr	r0, [r4, #0]
 801125c:	f000 f9c6 	bl	80115ec <memmove>
 8011260:	68a3      	ldr	r3, [r4, #8]
 8011262:	2000      	movs	r0, #0
 8011264:	1b9b      	subs	r3, r3, r6
 8011266:	60a3      	str	r3, [r4, #8]
 8011268:	6823      	ldr	r3, [r4, #0]
 801126a:	4433      	add	r3, r6
 801126c:	6023      	str	r3, [r4, #0]
 801126e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011272:	462a      	mov	r2, r5
 8011274:	f000 fd79 	bl	8011d6a <_realloc_r>
 8011278:	4606      	mov	r6, r0
 801127a:	2800      	cmp	r0, #0
 801127c:	d1e0      	bne.n	8011240 <__ssputs_r+0x5c>
 801127e:	6921      	ldr	r1, [r4, #16]
 8011280:	4650      	mov	r0, sl
 8011282:	f7fe fb73 	bl	800f96c <_free_r>
 8011286:	230c      	movs	r3, #12
 8011288:	f04f 30ff 	mov.w	r0, #4294967295
 801128c:	f8ca 3000 	str.w	r3, [sl]
 8011290:	89a3      	ldrh	r3, [r4, #12]
 8011292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011296:	81a3      	strh	r3, [r4, #12]
 8011298:	e7e9      	b.n	801126e <__ssputs_r+0x8a>
	...

0801129c <_svfiprintf_r>:
 801129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a0:	4698      	mov	r8, r3
 80112a2:	898b      	ldrh	r3, [r1, #12]
 80112a4:	b09d      	sub	sp, #116	@ 0x74
 80112a6:	4607      	mov	r7, r0
 80112a8:	061b      	lsls	r3, r3, #24
 80112aa:	460d      	mov	r5, r1
 80112ac:	4614      	mov	r4, r2
 80112ae:	d510      	bpl.n	80112d2 <_svfiprintf_r+0x36>
 80112b0:	690b      	ldr	r3, [r1, #16]
 80112b2:	b973      	cbnz	r3, 80112d2 <_svfiprintf_r+0x36>
 80112b4:	2140      	movs	r1, #64	@ 0x40
 80112b6:	f7fe fbcd 	bl	800fa54 <_malloc_r>
 80112ba:	6028      	str	r0, [r5, #0]
 80112bc:	6128      	str	r0, [r5, #16]
 80112be:	b930      	cbnz	r0, 80112ce <_svfiprintf_r+0x32>
 80112c0:	230c      	movs	r3, #12
 80112c2:	603b      	str	r3, [r7, #0]
 80112c4:	f04f 30ff 	mov.w	r0, #4294967295
 80112c8:	b01d      	add	sp, #116	@ 0x74
 80112ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ce:	2340      	movs	r3, #64	@ 0x40
 80112d0:	616b      	str	r3, [r5, #20]
 80112d2:	2300      	movs	r3, #0
 80112d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80112d8:	f04f 0901 	mov.w	r9, #1
 80112dc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8011480 <_svfiprintf_r+0x1e4>
 80112e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112e2:	2320      	movs	r3, #32
 80112e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112e8:	2330      	movs	r3, #48	@ 0x30
 80112ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112ee:	4623      	mov	r3, r4
 80112f0:	469a      	mov	sl, r3
 80112f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112f6:	b10a      	cbz	r2, 80112fc <_svfiprintf_r+0x60>
 80112f8:	2a25      	cmp	r2, #37	@ 0x25
 80112fa:	d1f9      	bne.n	80112f0 <_svfiprintf_r+0x54>
 80112fc:	ebba 0b04 	subs.w	fp, sl, r4
 8011300:	d00b      	beq.n	801131a <_svfiprintf_r+0x7e>
 8011302:	465b      	mov	r3, fp
 8011304:	4622      	mov	r2, r4
 8011306:	4629      	mov	r1, r5
 8011308:	4638      	mov	r0, r7
 801130a:	f7ff ff6b 	bl	80111e4 <__ssputs_r>
 801130e:	3001      	adds	r0, #1
 8011310:	f000 80a7 	beq.w	8011462 <_svfiprintf_r+0x1c6>
 8011314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011316:	445a      	add	r2, fp
 8011318:	9209      	str	r2, [sp, #36]	@ 0x24
 801131a:	f89a 3000 	ldrb.w	r3, [sl]
 801131e:	2b00      	cmp	r3, #0
 8011320:	f000 809f 	beq.w	8011462 <_svfiprintf_r+0x1c6>
 8011324:	2300      	movs	r3, #0
 8011326:	f04f 32ff 	mov.w	r2, #4294967295
 801132a:	f10a 0a01 	add.w	sl, sl, #1
 801132e:	9304      	str	r3, [sp, #16]
 8011330:	9307      	str	r3, [sp, #28]
 8011332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011336:	931a      	str	r3, [sp, #104]	@ 0x68
 8011338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801133c:	4654      	mov	r4, sl
 801133e:	2205      	movs	r2, #5
 8011340:	484f      	ldr	r0, [pc, #316]	@ (8011480 <_svfiprintf_r+0x1e4>)
 8011342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011346:	f7fd fc8e 	bl	800ec66 <memchr>
 801134a:	9a04      	ldr	r2, [sp, #16]
 801134c:	b9d8      	cbnz	r0, 8011386 <_svfiprintf_r+0xea>
 801134e:	06d0      	lsls	r0, r2, #27
 8011350:	bf44      	itt	mi
 8011352:	2320      	movmi	r3, #32
 8011354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011358:	0711      	lsls	r1, r2, #28
 801135a:	bf44      	itt	mi
 801135c:	232b      	movmi	r3, #43	@ 0x2b
 801135e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011362:	f89a 3000 	ldrb.w	r3, [sl]
 8011366:	2b2a      	cmp	r3, #42	@ 0x2a
 8011368:	d015      	beq.n	8011396 <_svfiprintf_r+0xfa>
 801136a:	9a07      	ldr	r2, [sp, #28]
 801136c:	4654      	mov	r4, sl
 801136e:	2000      	movs	r0, #0
 8011370:	f04f 0c0a 	mov.w	ip, #10
 8011374:	4621      	mov	r1, r4
 8011376:	f811 3b01 	ldrb.w	r3, [r1], #1
 801137a:	3b30      	subs	r3, #48	@ 0x30
 801137c:	2b09      	cmp	r3, #9
 801137e:	d94b      	bls.n	8011418 <_svfiprintf_r+0x17c>
 8011380:	b1b0      	cbz	r0, 80113b0 <_svfiprintf_r+0x114>
 8011382:	9207      	str	r2, [sp, #28]
 8011384:	e014      	b.n	80113b0 <_svfiprintf_r+0x114>
 8011386:	eba0 0308 	sub.w	r3, r0, r8
 801138a:	46a2      	mov	sl, r4
 801138c:	fa09 f303 	lsl.w	r3, r9, r3
 8011390:	4313      	orrs	r3, r2
 8011392:	9304      	str	r3, [sp, #16]
 8011394:	e7d2      	b.n	801133c <_svfiprintf_r+0xa0>
 8011396:	9b03      	ldr	r3, [sp, #12]
 8011398:	1d19      	adds	r1, r3, #4
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	9103      	str	r1, [sp, #12]
 80113a0:	bfbb      	ittet	lt
 80113a2:	425b      	neglt	r3, r3
 80113a4:	f042 0202 	orrlt.w	r2, r2, #2
 80113a8:	9307      	strge	r3, [sp, #28]
 80113aa:	9307      	strlt	r3, [sp, #28]
 80113ac:	bfb8      	it	lt
 80113ae:	9204      	strlt	r2, [sp, #16]
 80113b0:	7823      	ldrb	r3, [r4, #0]
 80113b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80113b4:	d10a      	bne.n	80113cc <_svfiprintf_r+0x130>
 80113b6:	7863      	ldrb	r3, [r4, #1]
 80113b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80113ba:	d132      	bne.n	8011422 <_svfiprintf_r+0x186>
 80113bc:	9b03      	ldr	r3, [sp, #12]
 80113be:	3402      	adds	r4, #2
 80113c0:	1d1a      	adds	r2, r3, #4
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113c8:	9203      	str	r2, [sp, #12]
 80113ca:	9305      	str	r3, [sp, #20]
 80113cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011490 <_svfiprintf_r+0x1f4>
 80113d0:	2203      	movs	r2, #3
 80113d2:	7821      	ldrb	r1, [r4, #0]
 80113d4:	4650      	mov	r0, sl
 80113d6:	f7fd fc46 	bl	800ec66 <memchr>
 80113da:	b138      	cbz	r0, 80113ec <_svfiprintf_r+0x150>
 80113dc:	eba0 000a 	sub.w	r0, r0, sl
 80113e0:	2240      	movs	r2, #64	@ 0x40
 80113e2:	9b04      	ldr	r3, [sp, #16]
 80113e4:	3401      	adds	r4, #1
 80113e6:	4082      	lsls	r2, r0
 80113e8:	4313      	orrs	r3, r2
 80113ea:	9304      	str	r3, [sp, #16]
 80113ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113f0:	2206      	movs	r2, #6
 80113f2:	4824      	ldr	r0, [pc, #144]	@ (8011484 <_svfiprintf_r+0x1e8>)
 80113f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113f8:	f7fd fc35 	bl	800ec66 <memchr>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d036      	beq.n	801146e <_svfiprintf_r+0x1d2>
 8011400:	4b21      	ldr	r3, [pc, #132]	@ (8011488 <_svfiprintf_r+0x1ec>)
 8011402:	bb1b      	cbnz	r3, 801144c <_svfiprintf_r+0x1b0>
 8011404:	9b03      	ldr	r3, [sp, #12]
 8011406:	3307      	adds	r3, #7
 8011408:	f023 0307 	bic.w	r3, r3, #7
 801140c:	3308      	adds	r3, #8
 801140e:	9303      	str	r3, [sp, #12]
 8011410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011412:	4433      	add	r3, r6
 8011414:	9309      	str	r3, [sp, #36]	@ 0x24
 8011416:	e76a      	b.n	80112ee <_svfiprintf_r+0x52>
 8011418:	fb0c 3202 	mla	r2, ip, r2, r3
 801141c:	460c      	mov	r4, r1
 801141e:	2001      	movs	r0, #1
 8011420:	e7a8      	b.n	8011374 <_svfiprintf_r+0xd8>
 8011422:	2300      	movs	r3, #0
 8011424:	3401      	adds	r4, #1
 8011426:	f04f 0c0a 	mov.w	ip, #10
 801142a:	4619      	mov	r1, r3
 801142c:	9305      	str	r3, [sp, #20]
 801142e:	4620      	mov	r0, r4
 8011430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011434:	3a30      	subs	r2, #48	@ 0x30
 8011436:	2a09      	cmp	r2, #9
 8011438:	d903      	bls.n	8011442 <_svfiprintf_r+0x1a6>
 801143a:	2b00      	cmp	r3, #0
 801143c:	d0c6      	beq.n	80113cc <_svfiprintf_r+0x130>
 801143e:	9105      	str	r1, [sp, #20]
 8011440:	e7c4      	b.n	80113cc <_svfiprintf_r+0x130>
 8011442:	fb0c 2101 	mla	r1, ip, r1, r2
 8011446:	4604      	mov	r4, r0
 8011448:	2301      	movs	r3, #1
 801144a:	e7f0      	b.n	801142e <_svfiprintf_r+0x192>
 801144c:	ab03      	add	r3, sp, #12
 801144e:	462a      	mov	r2, r5
 8011450:	a904      	add	r1, sp, #16
 8011452:	4638      	mov	r0, r7
 8011454:	9300      	str	r3, [sp, #0]
 8011456:	4b0d      	ldr	r3, [pc, #52]	@ (801148c <_svfiprintf_r+0x1f0>)
 8011458:	f7fc fc96 	bl	800dd88 <_printf_float>
 801145c:	1c42      	adds	r2, r0, #1
 801145e:	4606      	mov	r6, r0
 8011460:	d1d6      	bne.n	8011410 <_svfiprintf_r+0x174>
 8011462:	89ab      	ldrh	r3, [r5, #12]
 8011464:	065b      	lsls	r3, r3, #25
 8011466:	f53f af2d 	bmi.w	80112c4 <_svfiprintf_r+0x28>
 801146a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801146c:	e72c      	b.n	80112c8 <_svfiprintf_r+0x2c>
 801146e:	ab03      	add	r3, sp, #12
 8011470:	462a      	mov	r2, r5
 8011472:	a904      	add	r1, sp, #16
 8011474:	4638      	mov	r0, r7
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	4b04      	ldr	r3, [pc, #16]	@ (801148c <_svfiprintf_r+0x1f0>)
 801147a:	f7fc ff21 	bl	800e2c0 <_printf_i>
 801147e:	e7ed      	b.n	801145c <_svfiprintf_r+0x1c0>
 8011480:	0802fd4d 	.word	0x0802fd4d
 8011484:	0802fd57 	.word	0x0802fd57
 8011488:	0800dd89 	.word	0x0800dd89
 801148c:	080111e5 	.word	0x080111e5
 8011490:	0802fd53 	.word	0x0802fd53

08011494 <__sflush_r>:
 8011494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801149c:	0716      	lsls	r6, r2, #28
 801149e:	4605      	mov	r5, r0
 80114a0:	460c      	mov	r4, r1
 80114a2:	d454      	bmi.n	801154e <__sflush_r+0xba>
 80114a4:	684b      	ldr	r3, [r1, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	dc02      	bgt.n	80114b0 <__sflush_r+0x1c>
 80114aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	dd48      	ble.n	8011542 <__sflush_r+0xae>
 80114b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114b2:	2e00      	cmp	r6, #0
 80114b4:	d045      	beq.n	8011542 <__sflush_r+0xae>
 80114b6:	2300      	movs	r3, #0
 80114b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114bc:	682f      	ldr	r7, [r5, #0]
 80114be:	6a21      	ldr	r1, [r4, #32]
 80114c0:	602b      	str	r3, [r5, #0]
 80114c2:	d030      	beq.n	8011526 <__sflush_r+0x92>
 80114c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114c6:	89a3      	ldrh	r3, [r4, #12]
 80114c8:	0759      	lsls	r1, r3, #29
 80114ca:	d505      	bpl.n	80114d8 <__sflush_r+0x44>
 80114cc:	6863      	ldr	r3, [r4, #4]
 80114ce:	1ad2      	subs	r2, r2, r3
 80114d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114d2:	b10b      	cbz	r3, 80114d8 <__sflush_r+0x44>
 80114d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114d6:	1ad2      	subs	r2, r2, r3
 80114d8:	2300      	movs	r3, #0
 80114da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114dc:	6a21      	ldr	r1, [r4, #32]
 80114de:	4628      	mov	r0, r5
 80114e0:	47b0      	blx	r6
 80114e2:	1c43      	adds	r3, r0, #1
 80114e4:	89a3      	ldrh	r3, [r4, #12]
 80114e6:	d106      	bne.n	80114f6 <__sflush_r+0x62>
 80114e8:	6829      	ldr	r1, [r5, #0]
 80114ea:	291d      	cmp	r1, #29
 80114ec:	d82b      	bhi.n	8011546 <__sflush_r+0xb2>
 80114ee:	4a2a      	ldr	r2, [pc, #168]	@ (8011598 <__sflush_r+0x104>)
 80114f0:	40ca      	lsrs	r2, r1
 80114f2:	07d6      	lsls	r6, r2, #31
 80114f4:	d527      	bpl.n	8011546 <__sflush_r+0xb2>
 80114f6:	2200      	movs	r2, #0
 80114f8:	04d9      	lsls	r1, r3, #19
 80114fa:	6062      	str	r2, [r4, #4]
 80114fc:	6922      	ldr	r2, [r4, #16]
 80114fe:	6022      	str	r2, [r4, #0]
 8011500:	d504      	bpl.n	801150c <__sflush_r+0x78>
 8011502:	1c42      	adds	r2, r0, #1
 8011504:	d101      	bne.n	801150a <__sflush_r+0x76>
 8011506:	682b      	ldr	r3, [r5, #0]
 8011508:	b903      	cbnz	r3, 801150c <__sflush_r+0x78>
 801150a:	6560      	str	r0, [r4, #84]	@ 0x54
 801150c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801150e:	602f      	str	r7, [r5, #0]
 8011510:	b1b9      	cbz	r1, 8011542 <__sflush_r+0xae>
 8011512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011516:	4299      	cmp	r1, r3
 8011518:	d002      	beq.n	8011520 <__sflush_r+0x8c>
 801151a:	4628      	mov	r0, r5
 801151c:	f7fe fa26 	bl	800f96c <_free_r>
 8011520:	2300      	movs	r3, #0
 8011522:	6363      	str	r3, [r4, #52]	@ 0x34
 8011524:	e00d      	b.n	8011542 <__sflush_r+0xae>
 8011526:	2301      	movs	r3, #1
 8011528:	4628      	mov	r0, r5
 801152a:	47b0      	blx	r6
 801152c:	4602      	mov	r2, r0
 801152e:	1c50      	adds	r0, r2, #1
 8011530:	d1c9      	bne.n	80114c6 <__sflush_r+0x32>
 8011532:	682b      	ldr	r3, [r5, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d0c6      	beq.n	80114c6 <__sflush_r+0x32>
 8011538:	2b1d      	cmp	r3, #29
 801153a:	d001      	beq.n	8011540 <__sflush_r+0xac>
 801153c:	2b16      	cmp	r3, #22
 801153e:	d11d      	bne.n	801157c <__sflush_r+0xe8>
 8011540:	602f      	str	r7, [r5, #0]
 8011542:	2000      	movs	r0, #0
 8011544:	e021      	b.n	801158a <__sflush_r+0xf6>
 8011546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801154a:	b21b      	sxth	r3, r3
 801154c:	e01a      	b.n	8011584 <__sflush_r+0xf0>
 801154e:	690f      	ldr	r7, [r1, #16]
 8011550:	2f00      	cmp	r7, #0
 8011552:	d0f6      	beq.n	8011542 <__sflush_r+0xae>
 8011554:	0793      	lsls	r3, r2, #30
 8011556:	680e      	ldr	r6, [r1, #0]
 8011558:	600f      	str	r7, [r1, #0]
 801155a:	bf0c      	ite	eq
 801155c:	694b      	ldreq	r3, [r1, #20]
 801155e:	2300      	movne	r3, #0
 8011560:	eba6 0807 	sub.w	r8, r6, r7
 8011564:	608b      	str	r3, [r1, #8]
 8011566:	f1b8 0f00 	cmp.w	r8, #0
 801156a:	ddea      	ble.n	8011542 <__sflush_r+0xae>
 801156c:	4643      	mov	r3, r8
 801156e:	463a      	mov	r2, r7
 8011570:	6a21      	ldr	r1, [r4, #32]
 8011572:	4628      	mov	r0, r5
 8011574:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011576:	47b0      	blx	r6
 8011578:	2800      	cmp	r0, #0
 801157a:	dc08      	bgt.n	801158e <__sflush_r+0xfa>
 801157c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011584:	f04f 30ff 	mov.w	r0, #4294967295
 8011588:	81a3      	strh	r3, [r4, #12]
 801158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158e:	4407      	add	r7, r0
 8011590:	eba8 0800 	sub.w	r8, r8, r0
 8011594:	e7e7      	b.n	8011566 <__sflush_r+0xd2>
 8011596:	bf00      	nop
 8011598:	20400001 	.word	0x20400001

0801159c <_fflush_r>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	690b      	ldr	r3, [r1, #16]
 80115a0:	4605      	mov	r5, r0
 80115a2:	460c      	mov	r4, r1
 80115a4:	b913      	cbnz	r3, 80115ac <_fflush_r+0x10>
 80115a6:	2500      	movs	r5, #0
 80115a8:	4628      	mov	r0, r5
 80115aa:	bd38      	pop	{r3, r4, r5, pc}
 80115ac:	b118      	cbz	r0, 80115b6 <_fflush_r+0x1a>
 80115ae:	6a03      	ldr	r3, [r0, #32]
 80115b0:	b90b      	cbnz	r3, 80115b6 <_fflush_r+0x1a>
 80115b2:	f7fd fa3d 	bl	800ea30 <__sinit>
 80115b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d0f3      	beq.n	80115a6 <_fflush_r+0xa>
 80115be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115c0:	07d0      	lsls	r0, r2, #31
 80115c2:	d404      	bmi.n	80115ce <_fflush_r+0x32>
 80115c4:	0599      	lsls	r1, r3, #22
 80115c6:	d402      	bmi.n	80115ce <_fflush_r+0x32>
 80115c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115ca:	f7fd fb4a 	bl	800ec62 <__retarget_lock_acquire_recursive>
 80115ce:	4628      	mov	r0, r5
 80115d0:	4621      	mov	r1, r4
 80115d2:	f7ff ff5f 	bl	8011494 <__sflush_r>
 80115d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115d8:	4605      	mov	r5, r0
 80115da:	07da      	lsls	r2, r3, #31
 80115dc:	d4e4      	bmi.n	80115a8 <_fflush_r+0xc>
 80115de:	89a3      	ldrh	r3, [r4, #12]
 80115e0:	059b      	lsls	r3, r3, #22
 80115e2:	d4e1      	bmi.n	80115a8 <_fflush_r+0xc>
 80115e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115e6:	f7fd fb3d 	bl	800ec64 <__retarget_lock_release_recursive>
 80115ea:	e7dd      	b.n	80115a8 <_fflush_r+0xc>

080115ec <memmove>:
 80115ec:	4288      	cmp	r0, r1
 80115ee:	b510      	push	{r4, lr}
 80115f0:	eb01 0402 	add.w	r4, r1, r2
 80115f4:	d902      	bls.n	80115fc <memmove+0x10>
 80115f6:	4284      	cmp	r4, r0
 80115f8:	4623      	mov	r3, r4
 80115fa:	d807      	bhi.n	801160c <memmove+0x20>
 80115fc:	1e43      	subs	r3, r0, #1
 80115fe:	42a1      	cmp	r1, r4
 8011600:	d008      	beq.n	8011614 <memmove+0x28>
 8011602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011606:	f803 2f01 	strb.w	r2, [r3, #1]!
 801160a:	e7f8      	b.n	80115fe <memmove+0x12>
 801160c:	4402      	add	r2, r0
 801160e:	4601      	mov	r1, r0
 8011610:	428a      	cmp	r2, r1
 8011612:	d100      	bne.n	8011616 <memmove+0x2a>
 8011614:	bd10      	pop	{r4, pc}
 8011616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801161a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801161e:	e7f7      	b.n	8011610 <memmove+0x24>

08011620 <strncmp>:
 8011620:	b510      	push	{r4, lr}
 8011622:	b16a      	cbz	r2, 8011640 <strncmp+0x20>
 8011624:	3901      	subs	r1, #1
 8011626:	1884      	adds	r4, r0, r2
 8011628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801162c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011630:	429a      	cmp	r2, r3
 8011632:	d103      	bne.n	801163c <strncmp+0x1c>
 8011634:	42a0      	cmp	r0, r4
 8011636:	d001      	beq.n	801163c <strncmp+0x1c>
 8011638:	2a00      	cmp	r2, #0
 801163a:	d1f5      	bne.n	8011628 <strncmp+0x8>
 801163c:	1ad0      	subs	r0, r2, r3
 801163e:	bd10      	pop	{r4, pc}
 8011640:	4610      	mov	r0, r2
 8011642:	e7fc      	b.n	801163e <strncmp+0x1e>

08011644 <_sbrk_r>:
 8011644:	b538      	push	{r3, r4, r5, lr}
 8011646:	2300      	movs	r3, #0
 8011648:	4d05      	ldr	r5, [pc, #20]	@ (8011660 <_sbrk_r+0x1c>)
 801164a:	4604      	mov	r4, r0
 801164c:	4608      	mov	r0, r1
 801164e:	602b      	str	r3, [r5, #0]
 8011650:	f7f1 f868 	bl	8002724 <_sbrk>
 8011654:	1c43      	adds	r3, r0, #1
 8011656:	d102      	bne.n	801165e <_sbrk_r+0x1a>
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	b103      	cbz	r3, 801165e <_sbrk_r+0x1a>
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	bd38      	pop	{r3, r4, r5, pc}
 8011660:	20013bf0 	.word	0x20013bf0
 8011664:	00000000 	.word	0x00000000

08011668 <nan>:
 8011668:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011670 <nan+0x8>
 801166c:	4770      	bx	lr
 801166e:	bf00      	nop
 8011670:	00000000 	.word	0x00000000
 8011674:	7ff80000 	.word	0x7ff80000

08011678 <__assert_func>:
 8011678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801167a:	4614      	mov	r4, r2
 801167c:	461a      	mov	r2, r3
 801167e:	4b09      	ldr	r3, [pc, #36]	@ (80116a4 <__assert_func+0x2c>)
 8011680:	4605      	mov	r5, r0
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	68d8      	ldr	r0, [r3, #12]
 8011686:	b14c      	cbz	r4, 801169c <__assert_func+0x24>
 8011688:	4b07      	ldr	r3, [pc, #28]	@ (80116a8 <__assert_func+0x30>)
 801168a:	9100      	str	r1, [sp, #0]
 801168c:	4907      	ldr	r1, [pc, #28]	@ (80116ac <__assert_func+0x34>)
 801168e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011692:	462b      	mov	r3, r5
 8011694:	f000 fba4 	bl	8011de0 <fiprintf>
 8011698:	f000 fbb4 	bl	8011e04 <abort>
 801169c:	4b04      	ldr	r3, [pc, #16]	@ (80116b0 <__assert_func+0x38>)
 801169e:	461c      	mov	r4, r3
 80116a0:	e7f3      	b.n	801168a <__assert_func+0x12>
 80116a2:	bf00      	nop
 80116a4:	20000030 	.word	0x20000030
 80116a8:	0802fd66 	.word	0x0802fd66
 80116ac:	0802fd73 	.word	0x0802fd73
 80116b0:	0802fda1 	.word	0x0802fda1

080116b4 <_calloc_r>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	fba1 5402 	umull	r5, r4, r1, r2
 80116ba:	b934      	cbnz	r4, 80116ca <_calloc_r+0x16>
 80116bc:	4629      	mov	r1, r5
 80116be:	f7fe f9c9 	bl	800fa54 <_malloc_r>
 80116c2:	4606      	mov	r6, r0
 80116c4:	b928      	cbnz	r0, 80116d2 <_calloc_r+0x1e>
 80116c6:	4630      	mov	r0, r6
 80116c8:	bd70      	pop	{r4, r5, r6, pc}
 80116ca:	220c      	movs	r2, #12
 80116cc:	2600      	movs	r6, #0
 80116ce:	6002      	str	r2, [r0, #0]
 80116d0:	e7f9      	b.n	80116c6 <_calloc_r+0x12>
 80116d2:	462a      	mov	r2, r5
 80116d4:	4621      	mov	r1, r4
 80116d6:	f7fd fa46 	bl	800eb66 <memset>
 80116da:	e7f4      	b.n	80116c6 <_calloc_r+0x12>

080116dc <rshift>:
 80116dc:	6903      	ldr	r3, [r0, #16]
 80116de:	114a      	asrs	r2, r1, #5
 80116e0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80116e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116e8:	f100 0414 	add.w	r4, r0, #20
 80116ec:	dd45      	ble.n	801177a <rshift+0x9e>
 80116ee:	f011 011f 	ands.w	r1, r1, #31
 80116f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80116f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80116fa:	d10c      	bne.n	8011716 <rshift+0x3a>
 80116fc:	f100 0710 	add.w	r7, r0, #16
 8011700:	4629      	mov	r1, r5
 8011702:	42b1      	cmp	r1, r6
 8011704:	d334      	bcc.n	8011770 <rshift+0x94>
 8011706:	1a9b      	subs	r3, r3, r2
 8011708:	1eea      	subs	r2, r5, #3
 801170a:	009b      	lsls	r3, r3, #2
 801170c:	4296      	cmp	r6, r2
 801170e:	bf38      	it	cc
 8011710:	2300      	movcc	r3, #0
 8011712:	4423      	add	r3, r4
 8011714:	e015      	b.n	8011742 <rshift+0x66>
 8011716:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801171a:	f1c1 0820 	rsb	r8, r1, #32
 801171e:	f105 0e04 	add.w	lr, r5, #4
 8011722:	46a1      	mov	r9, r4
 8011724:	40cf      	lsrs	r7, r1
 8011726:	4576      	cmp	r6, lr
 8011728:	46f4      	mov	ip, lr
 801172a:	d815      	bhi.n	8011758 <rshift+0x7c>
 801172c:	1a9a      	subs	r2, r3, r2
 801172e:	3501      	adds	r5, #1
 8011730:	0092      	lsls	r2, r2, #2
 8011732:	3a04      	subs	r2, #4
 8011734:	42ae      	cmp	r6, r5
 8011736:	bf38      	it	cc
 8011738:	2200      	movcc	r2, #0
 801173a:	18a3      	adds	r3, r4, r2
 801173c:	50a7      	str	r7, [r4, r2]
 801173e:	b107      	cbz	r7, 8011742 <rshift+0x66>
 8011740:	3304      	adds	r3, #4
 8011742:	1b1a      	subs	r2, r3, r4
 8011744:	42a3      	cmp	r3, r4
 8011746:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801174a:	bf08      	it	eq
 801174c:	2300      	moveq	r3, #0
 801174e:	6102      	str	r2, [r0, #16]
 8011750:	bf08      	it	eq
 8011752:	6143      	streq	r3, [r0, #20]
 8011754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011758:	f8dc c000 	ldr.w	ip, [ip]
 801175c:	fa0c fc08 	lsl.w	ip, ip, r8
 8011760:	ea4c 0707 	orr.w	r7, ip, r7
 8011764:	f849 7b04 	str.w	r7, [r9], #4
 8011768:	f85e 7b04 	ldr.w	r7, [lr], #4
 801176c:	40cf      	lsrs	r7, r1
 801176e:	e7da      	b.n	8011726 <rshift+0x4a>
 8011770:	f851 cb04 	ldr.w	ip, [r1], #4
 8011774:	f847 cf04 	str.w	ip, [r7, #4]!
 8011778:	e7c3      	b.n	8011702 <rshift+0x26>
 801177a:	4623      	mov	r3, r4
 801177c:	e7e1      	b.n	8011742 <rshift+0x66>

0801177e <__hexdig_fun>:
 801177e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011782:	2b09      	cmp	r3, #9
 8011784:	d802      	bhi.n	801178c <__hexdig_fun+0xe>
 8011786:	3820      	subs	r0, #32
 8011788:	b2c0      	uxtb	r0, r0
 801178a:	4770      	bx	lr
 801178c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011790:	2b05      	cmp	r3, #5
 8011792:	d801      	bhi.n	8011798 <__hexdig_fun+0x1a>
 8011794:	3847      	subs	r0, #71	@ 0x47
 8011796:	e7f7      	b.n	8011788 <__hexdig_fun+0xa>
 8011798:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801179c:	2b05      	cmp	r3, #5
 801179e:	d801      	bhi.n	80117a4 <__hexdig_fun+0x26>
 80117a0:	3827      	subs	r0, #39	@ 0x27
 80117a2:	e7f1      	b.n	8011788 <__hexdig_fun+0xa>
 80117a4:	2000      	movs	r0, #0
 80117a6:	4770      	bx	lr

080117a8 <__gethex>:
 80117a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ac:	b085      	sub	sp, #20
 80117ae:	468a      	mov	sl, r1
 80117b0:	4690      	mov	r8, r2
 80117b2:	9302      	str	r3, [sp, #8]
 80117b4:	680b      	ldr	r3, [r1, #0]
 80117b6:	9001      	str	r0, [sp, #4]
 80117b8:	1c9c      	adds	r4, r3, #2
 80117ba:	46a1      	mov	r9, r4
 80117bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80117c0:	2830      	cmp	r0, #48	@ 0x30
 80117c2:	d0fa      	beq.n	80117ba <__gethex+0x12>
 80117c4:	eba9 0303 	sub.w	r3, r9, r3
 80117c8:	f1a3 0b02 	sub.w	fp, r3, #2
 80117cc:	f7ff ffd7 	bl	801177e <__hexdig_fun>
 80117d0:	4605      	mov	r5, r0
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d166      	bne.n	80118a4 <__gethex+0xfc>
 80117d6:	2201      	movs	r2, #1
 80117d8:	499e      	ldr	r1, [pc, #632]	@ (8011a54 <__gethex+0x2ac>)
 80117da:	4648      	mov	r0, r9
 80117dc:	f7ff ff20 	bl	8011620 <strncmp>
 80117e0:	4607      	mov	r7, r0
 80117e2:	2800      	cmp	r0, #0
 80117e4:	d165      	bne.n	80118b2 <__gethex+0x10a>
 80117e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80117ea:	4626      	mov	r6, r4
 80117ec:	f7ff ffc7 	bl	801177e <__hexdig_fun>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	d060      	beq.n	80118b6 <__gethex+0x10e>
 80117f4:	4623      	mov	r3, r4
 80117f6:	7818      	ldrb	r0, [r3, #0]
 80117f8:	4699      	mov	r9, r3
 80117fa:	3301      	adds	r3, #1
 80117fc:	2830      	cmp	r0, #48	@ 0x30
 80117fe:	d0fa      	beq.n	80117f6 <__gethex+0x4e>
 8011800:	f7ff ffbd 	bl	801177e <__hexdig_fun>
 8011804:	fab0 f580 	clz	r5, r0
 8011808:	f04f 0b01 	mov.w	fp, #1
 801180c:	096d      	lsrs	r5, r5, #5
 801180e:	464a      	mov	r2, r9
 8011810:	4616      	mov	r6, r2
 8011812:	3201      	adds	r2, #1
 8011814:	7830      	ldrb	r0, [r6, #0]
 8011816:	f7ff ffb2 	bl	801177e <__hexdig_fun>
 801181a:	2800      	cmp	r0, #0
 801181c:	d1f8      	bne.n	8011810 <__gethex+0x68>
 801181e:	2201      	movs	r2, #1
 8011820:	498c      	ldr	r1, [pc, #560]	@ (8011a54 <__gethex+0x2ac>)
 8011822:	4630      	mov	r0, r6
 8011824:	f7ff fefc 	bl	8011620 <strncmp>
 8011828:	2800      	cmp	r0, #0
 801182a:	d13e      	bne.n	80118aa <__gethex+0x102>
 801182c:	b944      	cbnz	r4, 8011840 <__gethex+0x98>
 801182e:	1c74      	adds	r4, r6, #1
 8011830:	4622      	mov	r2, r4
 8011832:	4616      	mov	r6, r2
 8011834:	3201      	adds	r2, #1
 8011836:	7830      	ldrb	r0, [r6, #0]
 8011838:	f7ff ffa1 	bl	801177e <__hexdig_fun>
 801183c:	2800      	cmp	r0, #0
 801183e:	d1f8      	bne.n	8011832 <__gethex+0x8a>
 8011840:	1ba4      	subs	r4, r4, r6
 8011842:	00a7      	lsls	r7, r4, #2
 8011844:	7833      	ldrb	r3, [r6, #0]
 8011846:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801184a:	2b50      	cmp	r3, #80	@ 0x50
 801184c:	d13d      	bne.n	80118ca <__gethex+0x122>
 801184e:	7873      	ldrb	r3, [r6, #1]
 8011850:	2b2b      	cmp	r3, #43	@ 0x2b
 8011852:	d032      	beq.n	80118ba <__gethex+0x112>
 8011854:	2b2d      	cmp	r3, #45	@ 0x2d
 8011856:	d033      	beq.n	80118c0 <__gethex+0x118>
 8011858:	1c71      	adds	r1, r6, #1
 801185a:	2400      	movs	r4, #0
 801185c:	7808      	ldrb	r0, [r1, #0]
 801185e:	f7ff ff8e 	bl	801177e <__hexdig_fun>
 8011862:	1e43      	subs	r3, r0, #1
 8011864:	b2db      	uxtb	r3, r3
 8011866:	2b18      	cmp	r3, #24
 8011868:	d82f      	bhi.n	80118ca <__gethex+0x122>
 801186a:	f1a0 0210 	sub.w	r2, r0, #16
 801186e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011872:	f7ff ff84 	bl	801177e <__hexdig_fun>
 8011876:	f100 3cff 	add.w	ip, r0, #4294967295
 801187a:	230a      	movs	r3, #10
 801187c:	fa5f fc8c 	uxtb.w	ip, ip
 8011880:	f1bc 0f18 	cmp.w	ip, #24
 8011884:	d91e      	bls.n	80118c4 <__gethex+0x11c>
 8011886:	b104      	cbz	r4, 801188a <__gethex+0xe2>
 8011888:	4252      	negs	r2, r2
 801188a:	4417      	add	r7, r2
 801188c:	f8ca 1000 	str.w	r1, [sl]
 8011890:	b1ed      	cbz	r5, 80118ce <__gethex+0x126>
 8011892:	f1bb 0f00 	cmp.w	fp, #0
 8011896:	bf0c      	ite	eq
 8011898:	2506      	moveq	r5, #6
 801189a:	2500      	movne	r5, #0
 801189c:	4628      	mov	r0, r5
 801189e:	b005      	add	sp, #20
 80118a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a4:	2500      	movs	r5, #0
 80118a6:	462c      	mov	r4, r5
 80118a8:	e7b1      	b.n	801180e <__gethex+0x66>
 80118aa:	2c00      	cmp	r4, #0
 80118ac:	d1c8      	bne.n	8011840 <__gethex+0x98>
 80118ae:	4627      	mov	r7, r4
 80118b0:	e7c8      	b.n	8011844 <__gethex+0x9c>
 80118b2:	464e      	mov	r6, r9
 80118b4:	462f      	mov	r7, r5
 80118b6:	2501      	movs	r5, #1
 80118b8:	e7c4      	b.n	8011844 <__gethex+0x9c>
 80118ba:	2400      	movs	r4, #0
 80118bc:	1cb1      	adds	r1, r6, #2
 80118be:	e7cd      	b.n	801185c <__gethex+0xb4>
 80118c0:	2401      	movs	r4, #1
 80118c2:	e7fb      	b.n	80118bc <__gethex+0x114>
 80118c4:	fb03 0002 	mla	r0, r3, r2, r0
 80118c8:	e7cf      	b.n	801186a <__gethex+0xc2>
 80118ca:	4631      	mov	r1, r6
 80118cc:	e7de      	b.n	801188c <__gethex+0xe4>
 80118ce:	eba6 0309 	sub.w	r3, r6, r9
 80118d2:	4629      	mov	r1, r5
 80118d4:	3b01      	subs	r3, #1
 80118d6:	2b07      	cmp	r3, #7
 80118d8:	dc0a      	bgt.n	80118f0 <__gethex+0x148>
 80118da:	9801      	ldr	r0, [sp, #4]
 80118dc:	f7fe f946 	bl	800fb6c <_Balloc>
 80118e0:	4604      	mov	r4, r0
 80118e2:	b940      	cbnz	r0, 80118f6 <__gethex+0x14e>
 80118e4:	4b5c      	ldr	r3, [pc, #368]	@ (8011a58 <__gethex+0x2b0>)
 80118e6:	4602      	mov	r2, r0
 80118e8:	21e4      	movs	r1, #228	@ 0xe4
 80118ea:	485c      	ldr	r0, [pc, #368]	@ (8011a5c <__gethex+0x2b4>)
 80118ec:	f7ff fec4 	bl	8011678 <__assert_func>
 80118f0:	3101      	adds	r1, #1
 80118f2:	105b      	asrs	r3, r3, #1
 80118f4:	e7ef      	b.n	80118d6 <__gethex+0x12e>
 80118f6:	f100 0a14 	add.w	sl, r0, #20
 80118fa:	2300      	movs	r3, #0
 80118fc:	4655      	mov	r5, sl
 80118fe:	469b      	mov	fp, r3
 8011900:	45b1      	cmp	r9, r6
 8011902:	d337      	bcc.n	8011974 <__gethex+0x1cc>
 8011904:	f845 bb04 	str.w	fp, [r5], #4
 8011908:	eba5 050a 	sub.w	r5, r5, sl
 801190c:	4658      	mov	r0, fp
 801190e:	10ad      	asrs	r5, r5, #2
 8011910:	6125      	str	r5, [r4, #16]
 8011912:	016d      	lsls	r5, r5, #5
 8011914:	f7fe fa1e 	bl	800fd54 <__hi0bits>
 8011918:	f8d8 6000 	ldr.w	r6, [r8]
 801191c:	1a2d      	subs	r5, r5, r0
 801191e:	42b5      	cmp	r5, r6
 8011920:	dd54      	ble.n	80119cc <__gethex+0x224>
 8011922:	1bad      	subs	r5, r5, r6
 8011924:	4620      	mov	r0, r4
 8011926:	4629      	mov	r1, r5
 8011928:	f7fe fdb5 	bl	8010496 <__any_on>
 801192c:	4681      	mov	r9, r0
 801192e:	b178      	cbz	r0, 8011950 <__gethex+0x1a8>
 8011930:	1e6b      	subs	r3, r5, #1
 8011932:	f04f 0901 	mov.w	r9, #1
 8011936:	1159      	asrs	r1, r3, #5
 8011938:	f003 021f 	and.w	r2, r3, #31
 801193c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011940:	fa09 f202 	lsl.w	r2, r9, r2
 8011944:	420a      	tst	r2, r1
 8011946:	d003      	beq.n	8011950 <__gethex+0x1a8>
 8011948:	454b      	cmp	r3, r9
 801194a:	dc36      	bgt.n	80119ba <__gethex+0x212>
 801194c:	f04f 0902 	mov.w	r9, #2
 8011950:	442f      	add	r7, r5
 8011952:	4629      	mov	r1, r5
 8011954:	4620      	mov	r0, r4
 8011956:	f7ff fec1 	bl	80116dc <rshift>
 801195a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801195e:	42bb      	cmp	r3, r7
 8011960:	da42      	bge.n	80119e8 <__gethex+0x240>
 8011962:	4621      	mov	r1, r4
 8011964:	9801      	ldr	r0, [sp, #4]
 8011966:	f7fe f941 	bl	800fbec <_Bfree>
 801196a:	2300      	movs	r3, #0
 801196c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801196e:	25a3      	movs	r5, #163	@ 0xa3
 8011970:	6013      	str	r3, [r2, #0]
 8011972:	e793      	b.n	801189c <__gethex+0xf4>
 8011974:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011978:	2a2e      	cmp	r2, #46	@ 0x2e
 801197a:	d012      	beq.n	80119a2 <__gethex+0x1fa>
 801197c:	2b20      	cmp	r3, #32
 801197e:	d104      	bne.n	801198a <__gethex+0x1e2>
 8011980:	f845 bb04 	str.w	fp, [r5], #4
 8011984:	f04f 0b00 	mov.w	fp, #0
 8011988:	465b      	mov	r3, fp
 801198a:	7830      	ldrb	r0, [r6, #0]
 801198c:	9303      	str	r3, [sp, #12]
 801198e:	f7ff fef6 	bl	801177e <__hexdig_fun>
 8011992:	9b03      	ldr	r3, [sp, #12]
 8011994:	f000 000f 	and.w	r0, r0, #15
 8011998:	4098      	lsls	r0, r3
 801199a:	3304      	adds	r3, #4
 801199c:	ea4b 0b00 	orr.w	fp, fp, r0
 80119a0:	e7ae      	b.n	8011900 <__gethex+0x158>
 80119a2:	45b1      	cmp	r9, r6
 80119a4:	d8ea      	bhi.n	801197c <__gethex+0x1d4>
 80119a6:	2201      	movs	r2, #1
 80119a8:	492a      	ldr	r1, [pc, #168]	@ (8011a54 <__gethex+0x2ac>)
 80119aa:	4630      	mov	r0, r6
 80119ac:	9303      	str	r3, [sp, #12]
 80119ae:	f7ff fe37 	bl	8011620 <strncmp>
 80119b2:	9b03      	ldr	r3, [sp, #12]
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d1e1      	bne.n	801197c <__gethex+0x1d4>
 80119b8:	e7a2      	b.n	8011900 <__gethex+0x158>
 80119ba:	1ea9      	subs	r1, r5, #2
 80119bc:	4620      	mov	r0, r4
 80119be:	f7fe fd6a 	bl	8010496 <__any_on>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d0c2      	beq.n	801194c <__gethex+0x1a4>
 80119c6:	f04f 0903 	mov.w	r9, #3
 80119ca:	e7c1      	b.n	8011950 <__gethex+0x1a8>
 80119cc:	da09      	bge.n	80119e2 <__gethex+0x23a>
 80119ce:	1b75      	subs	r5, r6, r5
 80119d0:	4621      	mov	r1, r4
 80119d2:	9801      	ldr	r0, [sp, #4]
 80119d4:	462a      	mov	r2, r5
 80119d6:	1b7f      	subs	r7, r7, r5
 80119d8:	f7fe fb1c 	bl	8010014 <__lshift>
 80119dc:	4604      	mov	r4, r0
 80119de:	f100 0a14 	add.w	sl, r0, #20
 80119e2:	f04f 0900 	mov.w	r9, #0
 80119e6:	e7b8      	b.n	801195a <__gethex+0x1b2>
 80119e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80119ec:	42bd      	cmp	r5, r7
 80119ee:	dd6f      	ble.n	8011ad0 <__gethex+0x328>
 80119f0:	1bed      	subs	r5, r5, r7
 80119f2:	42ae      	cmp	r6, r5
 80119f4:	dc34      	bgt.n	8011a60 <__gethex+0x2b8>
 80119f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80119fa:	2b02      	cmp	r3, #2
 80119fc:	d022      	beq.n	8011a44 <__gethex+0x29c>
 80119fe:	2b03      	cmp	r3, #3
 8011a00:	d024      	beq.n	8011a4c <__gethex+0x2a4>
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d115      	bne.n	8011a32 <__gethex+0x28a>
 8011a06:	42ae      	cmp	r6, r5
 8011a08:	d113      	bne.n	8011a32 <__gethex+0x28a>
 8011a0a:	2e01      	cmp	r6, #1
 8011a0c:	d10b      	bne.n	8011a26 <__gethex+0x27e>
 8011a0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011a12:	2562      	movs	r5, #98	@ 0x62
 8011a14:	9a02      	ldr	r2, [sp, #8]
 8011a16:	6013      	str	r3, [r2, #0]
 8011a18:	2301      	movs	r3, #1
 8011a1a:	6123      	str	r3, [r4, #16]
 8011a1c:	f8ca 3000 	str.w	r3, [sl]
 8011a20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a22:	601c      	str	r4, [r3, #0]
 8011a24:	e73a      	b.n	801189c <__gethex+0xf4>
 8011a26:	1e71      	subs	r1, r6, #1
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f7fe fd34 	bl	8010496 <__any_on>
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	d1ed      	bne.n	8011a0e <__gethex+0x266>
 8011a32:	4621      	mov	r1, r4
 8011a34:	9801      	ldr	r0, [sp, #4]
 8011a36:	f7fe f8d9 	bl	800fbec <_Bfree>
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a3e:	2550      	movs	r5, #80	@ 0x50
 8011a40:	6013      	str	r3, [r2, #0]
 8011a42:	e72b      	b.n	801189c <__gethex+0xf4>
 8011a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1f3      	bne.n	8011a32 <__gethex+0x28a>
 8011a4a:	e7e0      	b.n	8011a0e <__gethex+0x266>
 8011a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d1dd      	bne.n	8011a0e <__gethex+0x266>
 8011a52:	e7ee      	b.n	8011a32 <__gethex+0x28a>
 8011a54:	0802fd4b 	.word	0x0802fd4b
 8011a58:	0802fce1 	.word	0x0802fce1
 8011a5c:	0802fda2 	.word	0x0802fda2
 8011a60:	1e6f      	subs	r7, r5, #1
 8011a62:	f1b9 0f00 	cmp.w	r9, #0
 8011a66:	d130      	bne.n	8011aca <__gethex+0x322>
 8011a68:	b127      	cbz	r7, 8011a74 <__gethex+0x2cc>
 8011a6a:	4639      	mov	r1, r7
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f7fe fd12 	bl	8010496 <__any_on>
 8011a72:	4681      	mov	r9, r0
 8011a74:	117a      	asrs	r2, r7, #5
 8011a76:	2301      	movs	r3, #1
 8011a78:	f007 071f 	and.w	r7, r7, #31
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011a82:	4620      	mov	r0, r4
 8011a84:	40bb      	lsls	r3, r7
 8011a86:	1b76      	subs	r6, r6, r5
 8011a88:	2502      	movs	r5, #2
 8011a8a:	4213      	tst	r3, r2
 8011a8c:	bf18      	it	ne
 8011a8e:	f049 0902 	orrne.w	r9, r9, #2
 8011a92:	f7ff fe23 	bl	80116dc <rshift>
 8011a96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011a9a:	f1b9 0f00 	cmp.w	r9, #0
 8011a9e:	d047      	beq.n	8011b30 <__gethex+0x388>
 8011aa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011aa4:	2b02      	cmp	r3, #2
 8011aa6:	d015      	beq.n	8011ad4 <__gethex+0x32c>
 8011aa8:	2b03      	cmp	r3, #3
 8011aaa:	d017      	beq.n	8011adc <__gethex+0x334>
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d109      	bne.n	8011ac4 <__gethex+0x31c>
 8011ab0:	f019 0f02 	tst.w	r9, #2
 8011ab4:	d006      	beq.n	8011ac4 <__gethex+0x31c>
 8011ab6:	f8da 3000 	ldr.w	r3, [sl]
 8011aba:	ea49 0903 	orr.w	r9, r9, r3
 8011abe:	f019 0f01 	tst.w	r9, #1
 8011ac2:	d10e      	bne.n	8011ae2 <__gethex+0x33a>
 8011ac4:	f045 0510 	orr.w	r5, r5, #16
 8011ac8:	e032      	b.n	8011b30 <__gethex+0x388>
 8011aca:	f04f 0901 	mov.w	r9, #1
 8011ace:	e7d1      	b.n	8011a74 <__gethex+0x2cc>
 8011ad0:	2501      	movs	r5, #1
 8011ad2:	e7e2      	b.n	8011a9a <__gethex+0x2f2>
 8011ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ad6:	f1c3 0301 	rsb	r3, r3, #1
 8011ada:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d0f0      	beq.n	8011ac4 <__gethex+0x31c>
 8011ae2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ae6:	f104 0314 	add.w	r3, r4, #20
 8011aea:	f04f 0c00 	mov.w	ip, #0
 8011aee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011af2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011af6:	4618      	mov	r0, r3
 8011af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011afc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011b00:	d01b      	beq.n	8011b3a <__gethex+0x392>
 8011b02:	3201      	adds	r2, #1
 8011b04:	6002      	str	r2, [r0, #0]
 8011b06:	2d02      	cmp	r5, #2
 8011b08:	f104 0314 	add.w	r3, r4, #20
 8011b0c:	d13c      	bne.n	8011b88 <__gethex+0x3e0>
 8011b0e:	f8d8 2000 	ldr.w	r2, [r8]
 8011b12:	3a01      	subs	r2, #1
 8011b14:	42b2      	cmp	r2, r6
 8011b16:	d109      	bne.n	8011b2c <__gethex+0x384>
 8011b18:	1171      	asrs	r1, r6, #5
 8011b1a:	2201      	movs	r2, #1
 8011b1c:	f006 061f 	and.w	r6, r6, #31
 8011b20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011b24:	fa02 f606 	lsl.w	r6, r2, r6
 8011b28:	421e      	tst	r6, r3
 8011b2a:	d13a      	bne.n	8011ba2 <__gethex+0x3fa>
 8011b2c:	f045 0520 	orr.w	r5, r5, #32
 8011b30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b32:	601c      	str	r4, [r3, #0]
 8011b34:	9b02      	ldr	r3, [sp, #8]
 8011b36:	601f      	str	r7, [r3, #0]
 8011b38:	e6b0      	b.n	801189c <__gethex+0xf4>
 8011b3a:	4299      	cmp	r1, r3
 8011b3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011b40:	d8d9      	bhi.n	8011af6 <__gethex+0x34e>
 8011b42:	68a3      	ldr	r3, [r4, #8]
 8011b44:	459b      	cmp	fp, r3
 8011b46:	db17      	blt.n	8011b78 <__gethex+0x3d0>
 8011b48:	6861      	ldr	r1, [r4, #4]
 8011b4a:	9801      	ldr	r0, [sp, #4]
 8011b4c:	3101      	adds	r1, #1
 8011b4e:	f7fe f80d 	bl	800fb6c <_Balloc>
 8011b52:	4681      	mov	r9, r0
 8011b54:	b918      	cbnz	r0, 8011b5e <__gethex+0x3b6>
 8011b56:	4b1a      	ldr	r3, [pc, #104]	@ (8011bc0 <__gethex+0x418>)
 8011b58:	4602      	mov	r2, r0
 8011b5a:	2184      	movs	r1, #132	@ 0x84
 8011b5c:	e6c5      	b.n	80118ea <__gethex+0x142>
 8011b5e:	6922      	ldr	r2, [r4, #16]
 8011b60:	f104 010c 	add.w	r1, r4, #12
 8011b64:	300c      	adds	r0, #12
 8011b66:	3202      	adds	r2, #2
 8011b68:	0092      	lsls	r2, r2, #2
 8011b6a:	f7fd f88a 	bl	800ec82 <memcpy>
 8011b6e:	4621      	mov	r1, r4
 8011b70:	464c      	mov	r4, r9
 8011b72:	9801      	ldr	r0, [sp, #4]
 8011b74:	f7fe f83a 	bl	800fbec <_Bfree>
 8011b78:	6923      	ldr	r3, [r4, #16]
 8011b7a:	1c5a      	adds	r2, r3, #1
 8011b7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b80:	6122      	str	r2, [r4, #16]
 8011b82:	2201      	movs	r2, #1
 8011b84:	615a      	str	r2, [r3, #20]
 8011b86:	e7be      	b.n	8011b06 <__gethex+0x35e>
 8011b88:	6922      	ldr	r2, [r4, #16]
 8011b8a:	455a      	cmp	r2, fp
 8011b8c:	dd0b      	ble.n	8011ba6 <__gethex+0x3fe>
 8011b8e:	2101      	movs	r1, #1
 8011b90:	4620      	mov	r0, r4
 8011b92:	f7ff fda3 	bl	80116dc <rshift>
 8011b96:	3701      	adds	r7, #1
 8011b98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b9c:	42bb      	cmp	r3, r7
 8011b9e:	f6ff aee0 	blt.w	8011962 <__gethex+0x1ba>
 8011ba2:	2501      	movs	r5, #1
 8011ba4:	e7c2      	b.n	8011b2c <__gethex+0x384>
 8011ba6:	f016 061f 	ands.w	r6, r6, #31
 8011baa:	d0fa      	beq.n	8011ba2 <__gethex+0x3fa>
 8011bac:	4453      	add	r3, sl
 8011bae:	f1c6 0620 	rsb	r6, r6, #32
 8011bb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011bb6:	f7fe f8cd 	bl	800fd54 <__hi0bits>
 8011bba:	42b0      	cmp	r0, r6
 8011bbc:	dbe7      	blt.n	8011b8e <__gethex+0x3e6>
 8011bbe:	e7f0      	b.n	8011ba2 <__gethex+0x3fa>
 8011bc0:	0802fce1 	.word	0x0802fce1

08011bc4 <L_shift>:
 8011bc4:	f1c2 0208 	rsb	r2, r2, #8
 8011bc8:	0092      	lsls	r2, r2, #2
 8011bca:	b570      	push	{r4, r5, r6, lr}
 8011bcc:	f1c2 0620 	rsb	r6, r2, #32
 8011bd0:	6843      	ldr	r3, [r0, #4]
 8011bd2:	6804      	ldr	r4, [r0, #0]
 8011bd4:	fa03 f506 	lsl.w	r5, r3, r6
 8011bd8:	40d3      	lsrs	r3, r2
 8011bda:	432c      	orrs	r4, r5
 8011bdc:	6004      	str	r4, [r0, #0]
 8011bde:	f840 3f04 	str.w	r3, [r0, #4]!
 8011be2:	4288      	cmp	r0, r1
 8011be4:	d3f4      	bcc.n	8011bd0 <L_shift+0xc>
 8011be6:	bd70      	pop	{r4, r5, r6, pc}

08011be8 <__match>:
 8011be8:	6803      	ldr	r3, [r0, #0]
 8011bea:	3301      	adds	r3, #1
 8011bec:	b530      	push	{r4, r5, lr}
 8011bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bf2:	b914      	cbnz	r4, 8011bfa <__match+0x12>
 8011bf4:	6003      	str	r3, [r0, #0]
 8011bf6:	2001      	movs	r0, #1
 8011bf8:	bd30      	pop	{r4, r5, pc}
 8011bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011c02:	2d19      	cmp	r5, #25
 8011c04:	bf98      	it	ls
 8011c06:	3220      	addls	r2, #32
 8011c08:	42a2      	cmp	r2, r4
 8011c0a:	d0f0      	beq.n	8011bee <__match+0x6>
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	e7f3      	b.n	8011bf8 <__match+0x10>

08011c10 <__hexnan>:
 8011c10:	680b      	ldr	r3, [r1, #0]
 8011c12:	6801      	ldr	r1, [r0, #0]
 8011c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c18:	115e      	asrs	r6, r3, #5
 8011c1a:	f013 031f 	ands.w	r3, r3, #31
 8011c1e:	f04f 0500 	mov.w	r5, #0
 8011c22:	b087      	sub	sp, #28
 8011c24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011c28:	4682      	mov	sl, r0
 8011c2a:	4690      	mov	r8, r2
 8011c2c:	46ab      	mov	fp, r5
 8011c2e:	bf18      	it	ne
 8011c30:	3604      	addne	r6, #4
 8011c32:	9301      	str	r3, [sp, #4]
 8011c34:	9502      	str	r5, [sp, #8]
 8011c36:	1f37      	subs	r7, r6, #4
 8011c38:	f846 5c04 	str.w	r5, [r6, #-4]
 8011c3c:	46b9      	mov	r9, r7
 8011c3e:	463c      	mov	r4, r7
 8011c40:	1c4b      	adds	r3, r1, #1
 8011c42:	784a      	ldrb	r2, [r1, #1]
 8011c44:	9303      	str	r3, [sp, #12]
 8011c46:	b342      	cbz	r2, 8011c9a <__hexnan+0x8a>
 8011c48:	4610      	mov	r0, r2
 8011c4a:	9105      	str	r1, [sp, #20]
 8011c4c:	9204      	str	r2, [sp, #16]
 8011c4e:	f7ff fd96 	bl	801177e <__hexdig_fun>
 8011c52:	2800      	cmp	r0, #0
 8011c54:	d151      	bne.n	8011cfa <__hexnan+0xea>
 8011c56:	9a04      	ldr	r2, [sp, #16]
 8011c58:	9905      	ldr	r1, [sp, #20]
 8011c5a:	2a20      	cmp	r2, #32
 8011c5c:	d818      	bhi.n	8011c90 <__hexnan+0x80>
 8011c5e:	9b02      	ldr	r3, [sp, #8]
 8011c60:	459b      	cmp	fp, r3
 8011c62:	dd13      	ble.n	8011c8c <__hexnan+0x7c>
 8011c64:	454c      	cmp	r4, r9
 8011c66:	d206      	bcs.n	8011c76 <__hexnan+0x66>
 8011c68:	2d07      	cmp	r5, #7
 8011c6a:	dc04      	bgt.n	8011c76 <__hexnan+0x66>
 8011c6c:	462a      	mov	r2, r5
 8011c6e:	4649      	mov	r1, r9
 8011c70:	4620      	mov	r0, r4
 8011c72:	f7ff ffa7 	bl	8011bc4 <L_shift>
 8011c76:	4544      	cmp	r4, r8
 8011c78:	d951      	bls.n	8011d1e <__hexnan+0x10e>
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	f1a4 0904 	sub.w	r9, r4, #4
 8011c80:	f8cd b008 	str.w	fp, [sp, #8]
 8011c84:	f844 3c04 	str.w	r3, [r4, #-4]
 8011c88:	461d      	mov	r5, r3
 8011c8a:	464c      	mov	r4, r9
 8011c8c:	9903      	ldr	r1, [sp, #12]
 8011c8e:	e7d7      	b.n	8011c40 <__hexnan+0x30>
 8011c90:	2a29      	cmp	r2, #41	@ 0x29
 8011c92:	d156      	bne.n	8011d42 <__hexnan+0x132>
 8011c94:	3102      	adds	r1, #2
 8011c96:	f8ca 1000 	str.w	r1, [sl]
 8011c9a:	f1bb 0f00 	cmp.w	fp, #0
 8011c9e:	d050      	beq.n	8011d42 <__hexnan+0x132>
 8011ca0:	454c      	cmp	r4, r9
 8011ca2:	d206      	bcs.n	8011cb2 <__hexnan+0xa2>
 8011ca4:	2d07      	cmp	r5, #7
 8011ca6:	dc04      	bgt.n	8011cb2 <__hexnan+0xa2>
 8011ca8:	462a      	mov	r2, r5
 8011caa:	4649      	mov	r1, r9
 8011cac:	4620      	mov	r0, r4
 8011cae:	f7ff ff89 	bl	8011bc4 <L_shift>
 8011cb2:	4544      	cmp	r4, r8
 8011cb4:	d935      	bls.n	8011d22 <__hexnan+0x112>
 8011cb6:	f1a8 0204 	sub.w	r2, r8, #4
 8011cba:	4623      	mov	r3, r4
 8011cbc:	f853 1b04 	ldr.w	r1, [r3], #4
 8011cc0:	429f      	cmp	r7, r3
 8011cc2:	f842 1f04 	str.w	r1, [r2, #4]!
 8011cc6:	d2f9      	bcs.n	8011cbc <__hexnan+0xac>
 8011cc8:	1b3b      	subs	r3, r7, r4
 8011cca:	3e03      	subs	r6, #3
 8011ccc:	3401      	adds	r4, #1
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f023 0303 	bic.w	r3, r3, #3
 8011cd4:	3304      	adds	r3, #4
 8011cd6:	42b4      	cmp	r4, r6
 8011cd8:	bf88      	it	hi
 8011cda:	2304      	movhi	r3, #4
 8011cdc:	4443      	add	r3, r8
 8011cde:	f843 2b04 	str.w	r2, [r3], #4
 8011ce2:	429f      	cmp	r7, r3
 8011ce4:	d2fb      	bcs.n	8011cde <__hexnan+0xce>
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	b91b      	cbnz	r3, 8011cf2 <__hexnan+0xe2>
 8011cea:	4547      	cmp	r7, r8
 8011cec:	d127      	bne.n	8011d3e <__hexnan+0x12e>
 8011cee:	2301      	movs	r3, #1
 8011cf0:	603b      	str	r3, [r7, #0]
 8011cf2:	2005      	movs	r0, #5
 8011cf4:	b007      	add	sp, #28
 8011cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfa:	3501      	adds	r5, #1
 8011cfc:	f10b 0b01 	add.w	fp, fp, #1
 8011d00:	2d08      	cmp	r5, #8
 8011d02:	dd05      	ble.n	8011d10 <__hexnan+0x100>
 8011d04:	4544      	cmp	r4, r8
 8011d06:	d9c1      	bls.n	8011c8c <__hexnan+0x7c>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	3c04      	subs	r4, #4
 8011d0c:	2501      	movs	r5, #1
 8011d0e:	6023      	str	r3, [r4, #0]
 8011d10:	6822      	ldr	r2, [r4, #0]
 8011d12:	f000 000f 	and.w	r0, r0, #15
 8011d16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011d1a:	6020      	str	r0, [r4, #0]
 8011d1c:	e7b6      	b.n	8011c8c <__hexnan+0x7c>
 8011d1e:	2508      	movs	r5, #8
 8011d20:	e7b4      	b.n	8011c8c <__hexnan+0x7c>
 8011d22:	9b01      	ldr	r3, [sp, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d0de      	beq.n	8011ce6 <__hexnan+0xd6>
 8011d28:	f1c3 0320 	rsb	r3, r3, #32
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d30:	40da      	lsrs	r2, r3
 8011d32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011d36:	4013      	ands	r3, r2
 8011d38:	f846 3c04 	str.w	r3, [r6, #-4]
 8011d3c:	e7d3      	b.n	8011ce6 <__hexnan+0xd6>
 8011d3e:	3f04      	subs	r7, #4
 8011d40:	e7d1      	b.n	8011ce6 <__hexnan+0xd6>
 8011d42:	2004      	movs	r0, #4
 8011d44:	e7d6      	b.n	8011cf4 <__hexnan+0xe4>

08011d46 <__ascii_mbtowc>:
 8011d46:	b082      	sub	sp, #8
 8011d48:	b901      	cbnz	r1, 8011d4c <__ascii_mbtowc+0x6>
 8011d4a:	a901      	add	r1, sp, #4
 8011d4c:	b142      	cbz	r2, 8011d60 <__ascii_mbtowc+0x1a>
 8011d4e:	b14b      	cbz	r3, 8011d64 <__ascii_mbtowc+0x1e>
 8011d50:	7813      	ldrb	r3, [r2, #0]
 8011d52:	600b      	str	r3, [r1, #0]
 8011d54:	7812      	ldrb	r2, [r2, #0]
 8011d56:	1e10      	subs	r0, r2, #0
 8011d58:	bf18      	it	ne
 8011d5a:	2001      	movne	r0, #1
 8011d5c:	b002      	add	sp, #8
 8011d5e:	4770      	bx	lr
 8011d60:	4610      	mov	r0, r2
 8011d62:	e7fb      	b.n	8011d5c <__ascii_mbtowc+0x16>
 8011d64:	f06f 0001 	mvn.w	r0, #1
 8011d68:	e7f8      	b.n	8011d5c <__ascii_mbtowc+0x16>

08011d6a <_realloc_r>:
 8011d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6e:	4607      	mov	r7, r0
 8011d70:	4614      	mov	r4, r2
 8011d72:	460d      	mov	r5, r1
 8011d74:	b921      	cbnz	r1, 8011d80 <_realloc_r+0x16>
 8011d76:	4611      	mov	r1, r2
 8011d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d7c:	f7fd be6a 	b.w	800fa54 <_malloc_r>
 8011d80:	b92a      	cbnz	r2, 8011d8e <_realloc_r+0x24>
 8011d82:	4625      	mov	r5, r4
 8011d84:	f7fd fdf2 	bl	800f96c <_free_r>
 8011d88:	4628      	mov	r0, r5
 8011d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d8e:	f000 f840 	bl	8011e12 <_malloc_usable_size_r>
 8011d92:	4284      	cmp	r4, r0
 8011d94:	4606      	mov	r6, r0
 8011d96:	d802      	bhi.n	8011d9e <_realloc_r+0x34>
 8011d98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011d9c:	d8f4      	bhi.n	8011d88 <_realloc_r+0x1e>
 8011d9e:	4621      	mov	r1, r4
 8011da0:	4638      	mov	r0, r7
 8011da2:	f7fd fe57 	bl	800fa54 <_malloc_r>
 8011da6:	4680      	mov	r8, r0
 8011da8:	b908      	cbnz	r0, 8011dae <_realloc_r+0x44>
 8011daa:	4645      	mov	r5, r8
 8011dac:	e7ec      	b.n	8011d88 <_realloc_r+0x1e>
 8011dae:	42b4      	cmp	r4, r6
 8011db0:	4622      	mov	r2, r4
 8011db2:	4629      	mov	r1, r5
 8011db4:	bf28      	it	cs
 8011db6:	4632      	movcs	r2, r6
 8011db8:	f7fc ff63 	bl	800ec82 <memcpy>
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	f7fd fdd4 	bl	800f96c <_free_r>
 8011dc4:	e7f1      	b.n	8011daa <_realloc_r+0x40>

08011dc6 <__ascii_wctomb>:
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	4608      	mov	r0, r1
 8011dca:	b141      	cbz	r1, 8011dde <__ascii_wctomb+0x18>
 8011dcc:	2aff      	cmp	r2, #255	@ 0xff
 8011dce:	d904      	bls.n	8011dda <__ascii_wctomb+0x14>
 8011dd0:	228a      	movs	r2, #138	@ 0x8a
 8011dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd6:	601a      	str	r2, [r3, #0]
 8011dd8:	4770      	bx	lr
 8011dda:	2001      	movs	r0, #1
 8011ddc:	700a      	strb	r2, [r1, #0]
 8011dde:	4770      	bx	lr

08011de0 <fiprintf>:
 8011de0:	b40e      	push	{r1, r2, r3}
 8011de2:	b503      	push	{r0, r1, lr}
 8011de4:	ab03      	add	r3, sp, #12
 8011de6:	4601      	mov	r1, r0
 8011de8:	4805      	ldr	r0, [pc, #20]	@ (8011e00 <fiprintf+0x20>)
 8011dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dee:	6800      	ldr	r0, [r0, #0]
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	f000 f83f 	bl	8011e74 <_vfiprintf_r>
 8011df6:	b002      	add	sp, #8
 8011df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dfc:	b003      	add	sp, #12
 8011dfe:	4770      	bx	lr
 8011e00:	20000030 	.word	0x20000030

08011e04 <abort>:
 8011e04:	2006      	movs	r0, #6
 8011e06:	b508      	push	{r3, lr}
 8011e08:	f000 fa08 	bl	801221c <raise>
 8011e0c:	2001      	movs	r0, #1
 8011e0e:	f7f0 fc11 	bl	8002634 <_exit>

08011e12 <_malloc_usable_size_r>:
 8011e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e16:	1f18      	subs	r0, r3, #4
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	bfbc      	itt	lt
 8011e1c:	580b      	ldrlt	r3, [r1, r0]
 8011e1e:	18c0      	addlt	r0, r0, r3
 8011e20:	4770      	bx	lr

08011e22 <__sfputc_r>:
 8011e22:	6893      	ldr	r3, [r2, #8]
 8011e24:	3b01      	subs	r3, #1
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	b410      	push	{r4}
 8011e2a:	6093      	str	r3, [r2, #8]
 8011e2c:	da08      	bge.n	8011e40 <__sfputc_r+0x1e>
 8011e2e:	6994      	ldr	r4, [r2, #24]
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	db01      	blt.n	8011e38 <__sfputc_r+0x16>
 8011e34:	290a      	cmp	r1, #10
 8011e36:	d103      	bne.n	8011e40 <__sfputc_r+0x1e>
 8011e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e3c:	f000 b932 	b.w	80120a4 <__swbuf_r>
 8011e40:	6813      	ldr	r3, [r2, #0]
 8011e42:	1c58      	adds	r0, r3, #1
 8011e44:	6010      	str	r0, [r2, #0]
 8011e46:	4608      	mov	r0, r1
 8011e48:	7019      	strb	r1, [r3, #0]
 8011e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <__sfputs_r>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	4606      	mov	r6, r0
 8011e54:	460f      	mov	r7, r1
 8011e56:	4614      	mov	r4, r2
 8011e58:	18d5      	adds	r5, r2, r3
 8011e5a:	42ac      	cmp	r4, r5
 8011e5c:	d101      	bne.n	8011e62 <__sfputs_r+0x12>
 8011e5e:	2000      	movs	r0, #0
 8011e60:	e007      	b.n	8011e72 <__sfputs_r+0x22>
 8011e62:	463a      	mov	r2, r7
 8011e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f7ff ffda 	bl	8011e22 <__sfputc_r>
 8011e6e:	1c43      	adds	r3, r0, #1
 8011e70:	d1f3      	bne.n	8011e5a <__sfputs_r+0xa>
 8011e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e74 <_vfiprintf_r>:
 8011e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e78:	460d      	mov	r5, r1
 8011e7a:	b09d      	sub	sp, #116	@ 0x74
 8011e7c:	4614      	mov	r4, r2
 8011e7e:	4698      	mov	r8, r3
 8011e80:	4606      	mov	r6, r0
 8011e82:	b118      	cbz	r0, 8011e8c <_vfiprintf_r+0x18>
 8011e84:	6a03      	ldr	r3, [r0, #32]
 8011e86:	b90b      	cbnz	r3, 8011e8c <_vfiprintf_r+0x18>
 8011e88:	f7fc fdd2 	bl	800ea30 <__sinit>
 8011e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e8e:	07d9      	lsls	r1, r3, #31
 8011e90:	d405      	bmi.n	8011e9e <_vfiprintf_r+0x2a>
 8011e92:	89ab      	ldrh	r3, [r5, #12]
 8011e94:	059a      	lsls	r2, r3, #22
 8011e96:	d402      	bmi.n	8011e9e <_vfiprintf_r+0x2a>
 8011e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e9a:	f7fc fee2 	bl	800ec62 <__retarget_lock_acquire_recursive>
 8011e9e:	89ab      	ldrh	r3, [r5, #12]
 8011ea0:	071b      	lsls	r3, r3, #28
 8011ea2:	d501      	bpl.n	8011ea8 <_vfiprintf_r+0x34>
 8011ea4:	692b      	ldr	r3, [r5, #16]
 8011ea6:	b99b      	cbnz	r3, 8011ed0 <_vfiprintf_r+0x5c>
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	4630      	mov	r0, r6
 8011eac:	f000 f938 	bl	8012120 <__swsetup_r>
 8011eb0:	b170      	cbz	r0, 8011ed0 <_vfiprintf_r+0x5c>
 8011eb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011eb4:	07dc      	lsls	r4, r3, #31
 8011eb6:	d504      	bpl.n	8011ec2 <_vfiprintf_r+0x4e>
 8011eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebc:	b01d      	add	sp, #116	@ 0x74
 8011ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec2:	89ab      	ldrh	r3, [r5, #12]
 8011ec4:	0598      	lsls	r0, r3, #22
 8011ec6:	d4f7      	bmi.n	8011eb8 <_vfiprintf_r+0x44>
 8011ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011eca:	f7fc fecb 	bl	800ec64 <__retarget_lock_release_recursive>
 8011ece:	e7f3      	b.n	8011eb8 <_vfiprintf_r+0x44>
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ed6:	f04f 0901 	mov.w	r9, #1
 8011eda:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012090 <_vfiprintf_r+0x21c>
 8011ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ee0:	2320      	movs	r3, #32
 8011ee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ee6:	2330      	movs	r3, #48	@ 0x30
 8011ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011eec:	4623      	mov	r3, r4
 8011eee:	469a      	mov	sl, r3
 8011ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ef4:	b10a      	cbz	r2, 8011efa <_vfiprintf_r+0x86>
 8011ef6:	2a25      	cmp	r2, #37	@ 0x25
 8011ef8:	d1f9      	bne.n	8011eee <_vfiprintf_r+0x7a>
 8011efa:	ebba 0b04 	subs.w	fp, sl, r4
 8011efe:	d00b      	beq.n	8011f18 <_vfiprintf_r+0xa4>
 8011f00:	465b      	mov	r3, fp
 8011f02:	4622      	mov	r2, r4
 8011f04:	4629      	mov	r1, r5
 8011f06:	4630      	mov	r0, r6
 8011f08:	f7ff ffa2 	bl	8011e50 <__sfputs_r>
 8011f0c:	3001      	adds	r0, #1
 8011f0e:	f000 80a7 	beq.w	8012060 <_vfiprintf_r+0x1ec>
 8011f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f14:	445a      	add	r2, fp
 8011f16:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f18:	f89a 3000 	ldrb.w	r3, [sl]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f000 809f 	beq.w	8012060 <_vfiprintf_r+0x1ec>
 8011f22:	2300      	movs	r3, #0
 8011f24:	f04f 32ff 	mov.w	r2, #4294967295
 8011f28:	f10a 0a01 	add.w	sl, sl, #1
 8011f2c:	9304      	str	r3, [sp, #16]
 8011f2e:	9307      	str	r3, [sp, #28]
 8011f30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f34:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f3a:	4654      	mov	r4, sl
 8011f3c:	2205      	movs	r2, #5
 8011f3e:	4854      	ldr	r0, [pc, #336]	@ (8012090 <_vfiprintf_r+0x21c>)
 8011f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f44:	f7fc fe8f 	bl	800ec66 <memchr>
 8011f48:	9a04      	ldr	r2, [sp, #16]
 8011f4a:	b9d8      	cbnz	r0, 8011f84 <_vfiprintf_r+0x110>
 8011f4c:	06d1      	lsls	r1, r2, #27
 8011f4e:	bf44      	itt	mi
 8011f50:	2320      	movmi	r3, #32
 8011f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f56:	0713      	lsls	r3, r2, #28
 8011f58:	bf44      	itt	mi
 8011f5a:	232b      	movmi	r3, #43	@ 0x2b
 8011f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f60:	f89a 3000 	ldrb.w	r3, [sl]
 8011f64:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f66:	d015      	beq.n	8011f94 <_vfiprintf_r+0x120>
 8011f68:	9a07      	ldr	r2, [sp, #28]
 8011f6a:	4654      	mov	r4, sl
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	f04f 0c0a 	mov.w	ip, #10
 8011f72:	4621      	mov	r1, r4
 8011f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f78:	3b30      	subs	r3, #48	@ 0x30
 8011f7a:	2b09      	cmp	r3, #9
 8011f7c:	d94b      	bls.n	8012016 <_vfiprintf_r+0x1a2>
 8011f7e:	b1b0      	cbz	r0, 8011fae <_vfiprintf_r+0x13a>
 8011f80:	9207      	str	r2, [sp, #28]
 8011f82:	e014      	b.n	8011fae <_vfiprintf_r+0x13a>
 8011f84:	eba0 0308 	sub.w	r3, r0, r8
 8011f88:	46a2      	mov	sl, r4
 8011f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	9304      	str	r3, [sp, #16]
 8011f92:	e7d2      	b.n	8011f3a <_vfiprintf_r+0xc6>
 8011f94:	9b03      	ldr	r3, [sp, #12]
 8011f96:	1d19      	adds	r1, r3, #4
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	9103      	str	r1, [sp, #12]
 8011f9e:	bfbb      	ittet	lt
 8011fa0:	425b      	neglt	r3, r3
 8011fa2:	f042 0202 	orrlt.w	r2, r2, #2
 8011fa6:	9307      	strge	r3, [sp, #28]
 8011fa8:	9307      	strlt	r3, [sp, #28]
 8011faa:	bfb8      	it	lt
 8011fac:	9204      	strlt	r2, [sp, #16]
 8011fae:	7823      	ldrb	r3, [r4, #0]
 8011fb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fb2:	d10a      	bne.n	8011fca <_vfiprintf_r+0x156>
 8011fb4:	7863      	ldrb	r3, [r4, #1]
 8011fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fb8:	d132      	bne.n	8012020 <_vfiprintf_r+0x1ac>
 8011fba:	9b03      	ldr	r3, [sp, #12]
 8011fbc:	3402      	adds	r4, #2
 8011fbe:	1d1a      	adds	r2, r3, #4
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fc6:	9203      	str	r2, [sp, #12]
 8011fc8:	9305      	str	r3, [sp, #20]
 8011fca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80120a0 <_vfiprintf_r+0x22c>
 8011fce:	2203      	movs	r2, #3
 8011fd0:	7821      	ldrb	r1, [r4, #0]
 8011fd2:	4650      	mov	r0, sl
 8011fd4:	f7fc fe47 	bl	800ec66 <memchr>
 8011fd8:	b138      	cbz	r0, 8011fea <_vfiprintf_r+0x176>
 8011fda:	eba0 000a 	sub.w	r0, r0, sl
 8011fde:	2240      	movs	r2, #64	@ 0x40
 8011fe0:	9b04      	ldr	r3, [sp, #16]
 8011fe2:	3401      	adds	r4, #1
 8011fe4:	4082      	lsls	r2, r0
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	9304      	str	r3, [sp, #16]
 8011fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fee:	2206      	movs	r2, #6
 8011ff0:	4828      	ldr	r0, [pc, #160]	@ (8012094 <_vfiprintf_r+0x220>)
 8011ff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ff6:	f7fc fe36 	bl	800ec66 <memchr>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d03f      	beq.n	801207e <_vfiprintf_r+0x20a>
 8011ffe:	4b26      	ldr	r3, [pc, #152]	@ (8012098 <_vfiprintf_r+0x224>)
 8012000:	bb1b      	cbnz	r3, 801204a <_vfiprintf_r+0x1d6>
 8012002:	9b03      	ldr	r3, [sp, #12]
 8012004:	3307      	adds	r3, #7
 8012006:	f023 0307 	bic.w	r3, r3, #7
 801200a:	3308      	adds	r3, #8
 801200c:	9303      	str	r3, [sp, #12]
 801200e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012010:	443b      	add	r3, r7
 8012012:	9309      	str	r3, [sp, #36]	@ 0x24
 8012014:	e76a      	b.n	8011eec <_vfiprintf_r+0x78>
 8012016:	fb0c 3202 	mla	r2, ip, r2, r3
 801201a:	460c      	mov	r4, r1
 801201c:	2001      	movs	r0, #1
 801201e:	e7a8      	b.n	8011f72 <_vfiprintf_r+0xfe>
 8012020:	2300      	movs	r3, #0
 8012022:	3401      	adds	r4, #1
 8012024:	f04f 0c0a 	mov.w	ip, #10
 8012028:	4619      	mov	r1, r3
 801202a:	9305      	str	r3, [sp, #20]
 801202c:	4620      	mov	r0, r4
 801202e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012032:	3a30      	subs	r2, #48	@ 0x30
 8012034:	2a09      	cmp	r2, #9
 8012036:	d903      	bls.n	8012040 <_vfiprintf_r+0x1cc>
 8012038:	2b00      	cmp	r3, #0
 801203a:	d0c6      	beq.n	8011fca <_vfiprintf_r+0x156>
 801203c:	9105      	str	r1, [sp, #20]
 801203e:	e7c4      	b.n	8011fca <_vfiprintf_r+0x156>
 8012040:	fb0c 2101 	mla	r1, ip, r1, r2
 8012044:	4604      	mov	r4, r0
 8012046:	2301      	movs	r3, #1
 8012048:	e7f0      	b.n	801202c <_vfiprintf_r+0x1b8>
 801204a:	ab03      	add	r3, sp, #12
 801204c:	462a      	mov	r2, r5
 801204e:	a904      	add	r1, sp, #16
 8012050:	4630      	mov	r0, r6
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	4b11      	ldr	r3, [pc, #68]	@ (801209c <_vfiprintf_r+0x228>)
 8012056:	f7fb fe97 	bl	800dd88 <_printf_float>
 801205a:	4607      	mov	r7, r0
 801205c:	1c78      	adds	r0, r7, #1
 801205e:	d1d6      	bne.n	801200e <_vfiprintf_r+0x19a>
 8012060:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012062:	07d9      	lsls	r1, r3, #31
 8012064:	d405      	bmi.n	8012072 <_vfiprintf_r+0x1fe>
 8012066:	89ab      	ldrh	r3, [r5, #12]
 8012068:	059a      	lsls	r2, r3, #22
 801206a:	d402      	bmi.n	8012072 <_vfiprintf_r+0x1fe>
 801206c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801206e:	f7fc fdf9 	bl	800ec64 <__retarget_lock_release_recursive>
 8012072:	89ab      	ldrh	r3, [r5, #12]
 8012074:	065b      	lsls	r3, r3, #25
 8012076:	f53f af1f 	bmi.w	8011eb8 <_vfiprintf_r+0x44>
 801207a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801207c:	e71e      	b.n	8011ebc <_vfiprintf_r+0x48>
 801207e:	ab03      	add	r3, sp, #12
 8012080:	462a      	mov	r2, r5
 8012082:	a904      	add	r1, sp, #16
 8012084:	4630      	mov	r0, r6
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	4b04      	ldr	r3, [pc, #16]	@ (801209c <_vfiprintf_r+0x228>)
 801208a:	f7fc f919 	bl	800e2c0 <_printf_i>
 801208e:	e7e4      	b.n	801205a <_vfiprintf_r+0x1e6>
 8012090:	0802fd4d 	.word	0x0802fd4d
 8012094:	0802fd57 	.word	0x0802fd57
 8012098:	0800dd89 	.word	0x0800dd89
 801209c:	08011e51 	.word	0x08011e51
 80120a0:	0802fd53 	.word	0x0802fd53

080120a4 <__swbuf_r>:
 80120a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a6:	460e      	mov	r6, r1
 80120a8:	4614      	mov	r4, r2
 80120aa:	4605      	mov	r5, r0
 80120ac:	b118      	cbz	r0, 80120b6 <__swbuf_r+0x12>
 80120ae:	6a03      	ldr	r3, [r0, #32]
 80120b0:	b90b      	cbnz	r3, 80120b6 <__swbuf_r+0x12>
 80120b2:	f7fc fcbd 	bl	800ea30 <__sinit>
 80120b6:	69a3      	ldr	r3, [r4, #24]
 80120b8:	60a3      	str	r3, [r4, #8]
 80120ba:	89a3      	ldrh	r3, [r4, #12]
 80120bc:	071a      	lsls	r2, r3, #28
 80120be:	d501      	bpl.n	80120c4 <__swbuf_r+0x20>
 80120c0:	6923      	ldr	r3, [r4, #16]
 80120c2:	b943      	cbnz	r3, 80120d6 <__swbuf_r+0x32>
 80120c4:	4621      	mov	r1, r4
 80120c6:	4628      	mov	r0, r5
 80120c8:	f000 f82a 	bl	8012120 <__swsetup_r>
 80120cc:	b118      	cbz	r0, 80120d6 <__swbuf_r+0x32>
 80120ce:	f04f 37ff 	mov.w	r7, #4294967295
 80120d2:	4638      	mov	r0, r7
 80120d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120d6:	6823      	ldr	r3, [r4, #0]
 80120d8:	b2f6      	uxtb	r6, r6
 80120da:	6922      	ldr	r2, [r4, #16]
 80120dc:	4637      	mov	r7, r6
 80120de:	1a98      	subs	r0, r3, r2
 80120e0:	6963      	ldr	r3, [r4, #20]
 80120e2:	4283      	cmp	r3, r0
 80120e4:	dc05      	bgt.n	80120f2 <__swbuf_r+0x4e>
 80120e6:	4621      	mov	r1, r4
 80120e8:	4628      	mov	r0, r5
 80120ea:	f7ff fa57 	bl	801159c <_fflush_r>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d1ed      	bne.n	80120ce <__swbuf_r+0x2a>
 80120f2:	68a3      	ldr	r3, [r4, #8]
 80120f4:	3b01      	subs	r3, #1
 80120f6:	60a3      	str	r3, [r4, #8]
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	1c5a      	adds	r2, r3, #1
 80120fc:	6022      	str	r2, [r4, #0]
 80120fe:	701e      	strb	r6, [r3, #0]
 8012100:	1c43      	adds	r3, r0, #1
 8012102:	6962      	ldr	r2, [r4, #20]
 8012104:	429a      	cmp	r2, r3
 8012106:	d004      	beq.n	8012112 <__swbuf_r+0x6e>
 8012108:	89a3      	ldrh	r3, [r4, #12]
 801210a:	07db      	lsls	r3, r3, #31
 801210c:	d5e1      	bpl.n	80120d2 <__swbuf_r+0x2e>
 801210e:	2e0a      	cmp	r6, #10
 8012110:	d1df      	bne.n	80120d2 <__swbuf_r+0x2e>
 8012112:	4621      	mov	r1, r4
 8012114:	4628      	mov	r0, r5
 8012116:	f7ff fa41 	bl	801159c <_fflush_r>
 801211a:	2800      	cmp	r0, #0
 801211c:	d0d9      	beq.n	80120d2 <__swbuf_r+0x2e>
 801211e:	e7d6      	b.n	80120ce <__swbuf_r+0x2a>

08012120 <__swsetup_r>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	4b29      	ldr	r3, [pc, #164]	@ (80121c8 <__swsetup_r+0xa8>)
 8012124:	4605      	mov	r5, r0
 8012126:	460c      	mov	r4, r1
 8012128:	6818      	ldr	r0, [r3, #0]
 801212a:	b118      	cbz	r0, 8012134 <__swsetup_r+0x14>
 801212c:	6a03      	ldr	r3, [r0, #32]
 801212e:	b90b      	cbnz	r3, 8012134 <__swsetup_r+0x14>
 8012130:	f7fc fc7e 	bl	800ea30 <__sinit>
 8012134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012138:	0719      	lsls	r1, r3, #28
 801213a:	d422      	bmi.n	8012182 <__swsetup_r+0x62>
 801213c:	06da      	lsls	r2, r3, #27
 801213e:	d407      	bmi.n	8012150 <__swsetup_r+0x30>
 8012140:	2209      	movs	r2, #9
 8012142:	602a      	str	r2, [r5, #0]
 8012144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012148:	f04f 30ff 	mov.w	r0, #4294967295
 801214c:	81a3      	strh	r3, [r4, #12]
 801214e:	e033      	b.n	80121b8 <__swsetup_r+0x98>
 8012150:	0758      	lsls	r0, r3, #29
 8012152:	d512      	bpl.n	801217a <__swsetup_r+0x5a>
 8012154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012156:	b141      	cbz	r1, 801216a <__swsetup_r+0x4a>
 8012158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801215c:	4299      	cmp	r1, r3
 801215e:	d002      	beq.n	8012166 <__swsetup_r+0x46>
 8012160:	4628      	mov	r0, r5
 8012162:	f7fd fc03 	bl	800f96c <_free_r>
 8012166:	2300      	movs	r3, #0
 8012168:	6363      	str	r3, [r4, #52]	@ 0x34
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012170:	81a3      	strh	r3, [r4, #12]
 8012172:	2300      	movs	r3, #0
 8012174:	6063      	str	r3, [r4, #4]
 8012176:	6923      	ldr	r3, [r4, #16]
 8012178:	6023      	str	r3, [r4, #0]
 801217a:	89a3      	ldrh	r3, [r4, #12]
 801217c:	f043 0308 	orr.w	r3, r3, #8
 8012180:	81a3      	strh	r3, [r4, #12]
 8012182:	6923      	ldr	r3, [r4, #16]
 8012184:	b94b      	cbnz	r3, 801219a <__swsetup_r+0x7a>
 8012186:	89a3      	ldrh	r3, [r4, #12]
 8012188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801218c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012190:	d003      	beq.n	801219a <__swsetup_r+0x7a>
 8012192:	4621      	mov	r1, r4
 8012194:	4628      	mov	r0, r5
 8012196:	f000 f882 	bl	801229e <__smakebuf_r>
 801219a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801219e:	f013 0201 	ands.w	r2, r3, #1
 80121a2:	d00a      	beq.n	80121ba <__swsetup_r+0x9a>
 80121a4:	2200      	movs	r2, #0
 80121a6:	60a2      	str	r2, [r4, #8]
 80121a8:	6962      	ldr	r2, [r4, #20]
 80121aa:	4252      	negs	r2, r2
 80121ac:	61a2      	str	r2, [r4, #24]
 80121ae:	6922      	ldr	r2, [r4, #16]
 80121b0:	b942      	cbnz	r2, 80121c4 <__swsetup_r+0xa4>
 80121b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80121b6:	d1c5      	bne.n	8012144 <__swsetup_r+0x24>
 80121b8:	bd38      	pop	{r3, r4, r5, pc}
 80121ba:	0799      	lsls	r1, r3, #30
 80121bc:	bf58      	it	pl
 80121be:	6962      	ldrpl	r2, [r4, #20]
 80121c0:	60a2      	str	r2, [r4, #8]
 80121c2:	e7f4      	b.n	80121ae <__swsetup_r+0x8e>
 80121c4:	2000      	movs	r0, #0
 80121c6:	e7f7      	b.n	80121b8 <__swsetup_r+0x98>
 80121c8:	20000030 	.word	0x20000030

080121cc <_raise_r>:
 80121cc:	291f      	cmp	r1, #31
 80121ce:	b538      	push	{r3, r4, r5, lr}
 80121d0:	4605      	mov	r5, r0
 80121d2:	460c      	mov	r4, r1
 80121d4:	d904      	bls.n	80121e0 <_raise_r+0x14>
 80121d6:	2316      	movs	r3, #22
 80121d8:	6003      	str	r3, [r0, #0]
 80121da:	f04f 30ff 	mov.w	r0, #4294967295
 80121de:	bd38      	pop	{r3, r4, r5, pc}
 80121e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80121e2:	b112      	cbz	r2, 80121ea <_raise_r+0x1e>
 80121e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121e8:	b94b      	cbnz	r3, 80121fe <_raise_r+0x32>
 80121ea:	4628      	mov	r0, r5
 80121ec:	f000 f830 	bl	8012250 <_getpid_r>
 80121f0:	4622      	mov	r2, r4
 80121f2:	4601      	mov	r1, r0
 80121f4:	4628      	mov	r0, r5
 80121f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121fa:	f000 b817 	b.w	801222c <_kill_r>
 80121fe:	2b01      	cmp	r3, #1
 8012200:	d00a      	beq.n	8012218 <_raise_r+0x4c>
 8012202:	1c59      	adds	r1, r3, #1
 8012204:	d103      	bne.n	801220e <_raise_r+0x42>
 8012206:	2316      	movs	r3, #22
 8012208:	6003      	str	r3, [r0, #0]
 801220a:	2001      	movs	r0, #1
 801220c:	e7e7      	b.n	80121de <_raise_r+0x12>
 801220e:	2100      	movs	r1, #0
 8012210:	4620      	mov	r0, r4
 8012212:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012216:	4798      	blx	r3
 8012218:	2000      	movs	r0, #0
 801221a:	e7e0      	b.n	80121de <_raise_r+0x12>

0801221c <raise>:
 801221c:	4b02      	ldr	r3, [pc, #8]	@ (8012228 <raise+0xc>)
 801221e:	4601      	mov	r1, r0
 8012220:	6818      	ldr	r0, [r3, #0]
 8012222:	f7ff bfd3 	b.w	80121cc <_raise_r>
 8012226:	bf00      	nop
 8012228:	20000030 	.word	0x20000030

0801222c <_kill_r>:
 801222c:	b538      	push	{r3, r4, r5, lr}
 801222e:	2300      	movs	r3, #0
 8012230:	4d06      	ldr	r5, [pc, #24]	@ (801224c <_kill_r+0x20>)
 8012232:	4604      	mov	r4, r0
 8012234:	4608      	mov	r0, r1
 8012236:	4611      	mov	r1, r2
 8012238:	602b      	str	r3, [r5, #0]
 801223a:	f7f0 f9eb 	bl	8002614 <_kill>
 801223e:	1c43      	adds	r3, r0, #1
 8012240:	d102      	bne.n	8012248 <_kill_r+0x1c>
 8012242:	682b      	ldr	r3, [r5, #0]
 8012244:	b103      	cbz	r3, 8012248 <_kill_r+0x1c>
 8012246:	6023      	str	r3, [r4, #0]
 8012248:	bd38      	pop	{r3, r4, r5, pc}
 801224a:	bf00      	nop
 801224c:	20013bf0 	.word	0x20013bf0

08012250 <_getpid_r>:
 8012250:	f7f0 b9d8 	b.w	8002604 <_getpid>

08012254 <__swhatbuf_r>:
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	460c      	mov	r4, r1
 8012258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801225c:	b096      	sub	sp, #88	@ 0x58
 801225e:	4615      	mov	r5, r2
 8012260:	2900      	cmp	r1, #0
 8012262:	461e      	mov	r6, r3
 8012264:	da0c      	bge.n	8012280 <__swhatbuf_r+0x2c>
 8012266:	89a3      	ldrh	r3, [r4, #12]
 8012268:	2100      	movs	r1, #0
 801226a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801226e:	bf14      	ite	ne
 8012270:	2340      	movne	r3, #64	@ 0x40
 8012272:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012276:	2000      	movs	r0, #0
 8012278:	6031      	str	r1, [r6, #0]
 801227a:	602b      	str	r3, [r5, #0]
 801227c:	b016      	add	sp, #88	@ 0x58
 801227e:	bd70      	pop	{r4, r5, r6, pc}
 8012280:	466a      	mov	r2, sp
 8012282:	f000 f849 	bl	8012318 <_fstat_r>
 8012286:	2800      	cmp	r0, #0
 8012288:	dbed      	blt.n	8012266 <__swhatbuf_r+0x12>
 801228a:	9901      	ldr	r1, [sp, #4]
 801228c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012290:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012294:	4259      	negs	r1, r3
 8012296:	4159      	adcs	r1, r3
 8012298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801229c:	e7eb      	b.n	8012276 <__swhatbuf_r+0x22>

0801229e <__smakebuf_r>:
 801229e:	898b      	ldrh	r3, [r1, #12]
 80122a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122a2:	079d      	lsls	r5, r3, #30
 80122a4:	4606      	mov	r6, r0
 80122a6:	460c      	mov	r4, r1
 80122a8:	d507      	bpl.n	80122ba <__smakebuf_r+0x1c>
 80122aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80122ae:	6023      	str	r3, [r4, #0]
 80122b0:	6123      	str	r3, [r4, #16]
 80122b2:	2301      	movs	r3, #1
 80122b4:	6163      	str	r3, [r4, #20]
 80122b6:	b003      	add	sp, #12
 80122b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ba:	ab01      	add	r3, sp, #4
 80122bc:	466a      	mov	r2, sp
 80122be:	f7ff ffc9 	bl	8012254 <__swhatbuf_r>
 80122c2:	9f00      	ldr	r7, [sp, #0]
 80122c4:	4605      	mov	r5, r0
 80122c6:	4630      	mov	r0, r6
 80122c8:	4639      	mov	r1, r7
 80122ca:	f7fd fbc3 	bl	800fa54 <_malloc_r>
 80122ce:	b948      	cbnz	r0, 80122e4 <__smakebuf_r+0x46>
 80122d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122d4:	059a      	lsls	r2, r3, #22
 80122d6:	d4ee      	bmi.n	80122b6 <__smakebuf_r+0x18>
 80122d8:	f023 0303 	bic.w	r3, r3, #3
 80122dc:	f043 0302 	orr.w	r3, r3, #2
 80122e0:	81a3      	strh	r3, [r4, #12]
 80122e2:	e7e2      	b.n	80122aa <__smakebuf_r+0xc>
 80122e4:	89a3      	ldrh	r3, [r4, #12]
 80122e6:	6020      	str	r0, [r4, #0]
 80122e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122ec:	81a3      	strh	r3, [r4, #12]
 80122ee:	9b01      	ldr	r3, [sp, #4]
 80122f0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80122f4:	b15b      	cbz	r3, 801230e <__smakebuf_r+0x70>
 80122f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122fa:	4630      	mov	r0, r6
 80122fc:	f000 f81e 	bl	801233c <_isatty_r>
 8012300:	b128      	cbz	r0, 801230e <__smakebuf_r+0x70>
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	f023 0303 	bic.w	r3, r3, #3
 8012308:	f043 0301 	orr.w	r3, r3, #1
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	89a3      	ldrh	r3, [r4, #12]
 8012310:	431d      	orrs	r5, r3
 8012312:	81a5      	strh	r5, [r4, #12]
 8012314:	e7cf      	b.n	80122b6 <__smakebuf_r+0x18>
	...

08012318 <_fstat_r>:
 8012318:	b538      	push	{r3, r4, r5, lr}
 801231a:	2300      	movs	r3, #0
 801231c:	4d06      	ldr	r5, [pc, #24]	@ (8012338 <_fstat_r+0x20>)
 801231e:	4604      	mov	r4, r0
 8012320:	4608      	mov	r0, r1
 8012322:	4611      	mov	r1, r2
 8012324:	602b      	str	r3, [r5, #0]
 8012326:	f7f0 f9d5 	bl	80026d4 <_fstat>
 801232a:	1c43      	adds	r3, r0, #1
 801232c:	d102      	bne.n	8012334 <_fstat_r+0x1c>
 801232e:	682b      	ldr	r3, [r5, #0]
 8012330:	b103      	cbz	r3, 8012334 <_fstat_r+0x1c>
 8012332:	6023      	str	r3, [r4, #0]
 8012334:	bd38      	pop	{r3, r4, r5, pc}
 8012336:	bf00      	nop
 8012338:	20013bf0 	.word	0x20013bf0

0801233c <_isatty_r>:
 801233c:	b538      	push	{r3, r4, r5, lr}
 801233e:	2300      	movs	r3, #0
 8012340:	4d05      	ldr	r5, [pc, #20]	@ (8012358 <_isatty_r+0x1c>)
 8012342:	4604      	mov	r4, r0
 8012344:	4608      	mov	r0, r1
 8012346:	602b      	str	r3, [r5, #0]
 8012348:	f7f0 f9d4 	bl	80026f4 <_isatty>
 801234c:	1c43      	adds	r3, r0, #1
 801234e:	d102      	bne.n	8012356 <_isatty_r+0x1a>
 8012350:	682b      	ldr	r3, [r5, #0]
 8012352:	b103      	cbz	r3, 8012356 <_isatty_r+0x1a>
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	bd38      	pop	{r3, r4, r5, pc}
 8012358:	20013bf0 	.word	0x20013bf0

0801235c <acosf>:
 801235c:	b508      	push	{r3, lr}
 801235e:	ed2d 8b02 	vpush	{d8}
 8012362:	eeb0 8a40 	vmov.f32	s16, s0
 8012366:	f000 f8a5 	bl	80124b4 <__ieee754_acosf>
 801236a:	eef0 8a40 	vmov.f32	s17, s0
 801236e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012376:	d615      	bvs.n	80123a4 <acosf+0x48>
 8012378:	eeb0 0a48 	vmov.f32	s0, s16
 801237c:	f000 f838 	bl	80123f0 <fabsf>
 8012380:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012384:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238c:	dd0a      	ble.n	80123a4 <acosf+0x48>
 801238e:	f7fc fc3d 	bl	800ec0c <__errno>
 8012392:	2321      	movs	r3, #33	@ 0x21
 8012394:	ecbd 8b02 	vpop	{d8}
 8012398:	6003      	str	r3, [r0, #0]
 801239a:	4805      	ldr	r0, [pc, #20]	@ (80123b0 <acosf+0x54>)
 801239c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80123a0:	f7fc bc7c 	b.w	800ec9c <nanf>
 80123a4:	eeb0 0a68 	vmov.f32	s0, s17
 80123a8:	ecbd 8b02 	vpop	{d8}
 80123ac:	bd08      	pop	{r3, pc}
 80123ae:	bf00      	nop
 80123b0:	0802fda1 	.word	0x0802fda1

080123b4 <sqrtf>:
 80123b4:	b508      	push	{r3, lr}
 80123b6:	ed2d 8b02 	vpush	{d8}
 80123ba:	eeb0 8a40 	vmov.f32	s16, s0
 80123be:	f000 f875 	bl	80124ac <__ieee754_sqrtf>
 80123c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80123c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ca:	d60c      	bvs.n	80123e6 <sqrtf+0x32>
 80123cc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80123ec <sqrtf+0x38>
 80123d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80123d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d8:	d505      	bpl.n	80123e6 <sqrtf+0x32>
 80123da:	f7fc fc17 	bl	800ec0c <__errno>
 80123de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80123e2:	2321      	movs	r3, #33	@ 0x21
 80123e4:	6003      	str	r3, [r0, #0]
 80123e6:	ecbd 8b02 	vpop	{d8}
 80123ea:	bd08      	pop	{r3, pc}
 80123ec:	00000000 	.word	0x00000000

080123f0 <fabsf>:
 80123f0:	ee10 3a10 	vmov	r3, s0
 80123f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80123f8:	ee00 3a10 	vmov	s0, r3
 80123fc:	4770      	bx	lr

080123fe <fmaxf>:
 80123fe:	b508      	push	{r3, lr}
 8012400:	ed2d 8b02 	vpush	{d8}
 8012404:	eeb0 8a40 	vmov.f32	s16, s0
 8012408:	eef0 8a60 	vmov.f32	s17, s1
 801240c:	f000 f832 	bl	8012474 <__fpclassifyf>
 8012410:	b930      	cbnz	r0, 8012420 <fmaxf+0x22>
 8012412:	eeb0 8a68 	vmov.f32	s16, s17
 8012416:	eeb0 0a48 	vmov.f32	s0, s16
 801241a:	ecbd 8b02 	vpop	{d8}
 801241e:	bd08      	pop	{r3, pc}
 8012420:	eeb0 0a68 	vmov.f32	s0, s17
 8012424:	f000 f826 	bl	8012474 <__fpclassifyf>
 8012428:	2800      	cmp	r0, #0
 801242a:	d0f4      	beq.n	8012416 <fmaxf+0x18>
 801242c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012434:	dded      	ble.n	8012412 <fmaxf+0x14>
 8012436:	e7ee      	b.n	8012416 <fmaxf+0x18>

08012438 <fminf>:
 8012438:	b508      	push	{r3, lr}
 801243a:	ed2d 8b02 	vpush	{d8}
 801243e:	eeb0 8a40 	vmov.f32	s16, s0
 8012442:	eef0 8a60 	vmov.f32	s17, s1
 8012446:	f000 f815 	bl	8012474 <__fpclassifyf>
 801244a:	b930      	cbnz	r0, 801245a <fminf+0x22>
 801244c:	eeb0 8a68 	vmov.f32	s16, s17
 8012450:	eeb0 0a48 	vmov.f32	s0, s16
 8012454:	ecbd 8b02 	vpop	{d8}
 8012458:	bd08      	pop	{r3, pc}
 801245a:	eeb0 0a68 	vmov.f32	s0, s17
 801245e:	f000 f809 	bl	8012474 <__fpclassifyf>
 8012462:	2800      	cmp	r0, #0
 8012464:	d0f4      	beq.n	8012450 <fminf+0x18>
 8012466:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246e:	d5ed      	bpl.n	801244c <fminf+0x14>
 8012470:	e7ee      	b.n	8012450 <fminf+0x18>
	...

08012474 <__fpclassifyf>:
 8012474:	ee10 3a10 	vmov	r3, s0
 8012478:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801247c:	d00d      	beq.n	801249a <__fpclassifyf+0x26>
 801247e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012482:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012486:	d30a      	bcc.n	801249e <__fpclassifyf+0x2a>
 8012488:	1e42      	subs	r2, r0, #1
 801248a:	4b07      	ldr	r3, [pc, #28]	@ (80124a8 <__fpclassifyf+0x34>)
 801248c:	429a      	cmp	r2, r3
 801248e:	d908      	bls.n	80124a2 <__fpclassifyf+0x2e>
 8012490:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012494:	4258      	negs	r0, r3
 8012496:	4158      	adcs	r0, r3
 8012498:	4770      	bx	lr
 801249a:	2002      	movs	r0, #2
 801249c:	4770      	bx	lr
 801249e:	2004      	movs	r0, #4
 80124a0:	4770      	bx	lr
 80124a2:	2003      	movs	r0, #3
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	007ffffe 	.word	0x007ffffe

080124ac <__ieee754_sqrtf>:
 80124ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80124b0:	4770      	bx	lr
	...

080124b4 <__ieee754_acosf>:
 80124b4:	b508      	push	{r3, lr}
 80124b6:	ee10 3a10 	vmov	r3, s0
 80124ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80124be:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80124c2:	ed2d 8b0c 	vpush	{d8-d13}
 80124c6:	d109      	bne.n	80124dc <__ieee754_acosf+0x28>
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 801265c <__ieee754_acosf+0x1a8>
 80124ce:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8012660 <__ieee754_acosf+0x1ac>
 80124d2:	fe37 0a80 	vselgt.f32	s0, s15, s0
 80124d6:	ecbd 8b0c 	vpop	{d8-d13}
 80124da:	bd08      	pop	{r3, pc}
 80124dc:	d904      	bls.n	80124e8 <__ieee754_acosf+0x34>
 80124de:	ee30 8a40 	vsub.f32	s16, s0, s0
 80124e2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80124e6:	e7f6      	b.n	80124d6 <__ieee754_acosf+0x22>
 80124e8:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80124ec:	d23c      	bcs.n	8012568 <__ieee754_acosf+0xb4>
 80124ee:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80124f2:	f240 80af 	bls.w	8012654 <__ieee754_acosf+0x1a0>
 80124f6:	ee60 7a00 	vmul.f32	s15, s0, s0
 80124fa:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8012664 <__ieee754_acosf+0x1b0>
 80124fe:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8012668 <__ieee754_acosf+0x1b4>
 8012502:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801266c <__ieee754_acosf+0x1b8>
 8012506:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801250a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8012670 <__ieee754_acosf+0x1bc>
 801250e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012512:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8012674 <__ieee754_acosf+0x1c0>
 8012516:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801251a:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8012678 <__ieee754_acosf+0x1c4>
 801251e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012522:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801267c <__ieee754_acosf+0x1c8>
 8012526:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801252a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8012680 <__ieee754_acosf+0x1cc>
 801252e:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8012532:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8012684 <__ieee754_acosf+0x1d0>
 8012536:	ee27 7a27 	vmul.f32	s14, s14, s15
 801253a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801253e:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8012688 <__ieee754_acosf+0x1d4>
 8012542:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801254a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801254e:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801268c <__ieee754_acosf+0x1d8>
 8012552:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8012556:	eee0 7a46 	vfms.f32	s15, s0, s12
 801255a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801255e:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8012690 <__ieee754_acosf+0x1dc>
 8012562:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012566:	e7b6      	b.n	80124d6 <__ieee754_acosf+0x22>
 8012568:	2b00      	cmp	r3, #0
 801256a:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801256e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012572:	eddf da3c 	vldr	s27, [pc, #240]	@ 8012664 <__ieee754_acosf+0x1b0>
 8012576:	eddf ca3c 	vldr	s25, [pc, #240]	@ 8012668 <__ieee754_acosf+0x1b4>
 801257a:	ed9f ca3d 	vldr	s24, [pc, #244]	@ 8012670 <__ieee754_acosf+0x1bc>
 801257e:	eddf ba3d 	vldr	s23, [pc, #244]	@ 8012674 <__ieee754_acosf+0x1c0>
 8012582:	ed9f ba3d 	vldr	s22, [pc, #244]	@ 8012678 <__ieee754_acosf+0x1c4>
 8012586:	eddf 8a3d 	vldr	s17, [pc, #244]	@ 801267c <__ieee754_acosf+0x1c8>
 801258a:	ed9f da3d 	vldr	s26, [pc, #244]	@ 8012680 <__ieee754_acosf+0x1cc>
 801258e:	eddf aa37 	vldr	s21, [pc, #220]	@ 801266c <__ieee754_acosf+0x1b8>
 8012592:	ed9f aa3c 	vldr	s20, [pc, #240]	@ 8012684 <__ieee754_acosf+0x1d0>
 8012596:	eddf 9a3c 	vldr	s19, [pc, #240]	@ 8012688 <__ieee754_acosf+0x1d4>
 801259a:	da28      	bge.n	80125ee <__ieee754_acosf+0x13a>
 801259c:	ee30 8a09 	vadd.f32	s16, s0, s18
 80125a0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80125a4:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80125a8:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80125ac:	eeac ca80 	vfma.f32	s24, s25, s0
 80125b0:	eeaa aa80 	vfma.f32	s20, s21, s0
 80125b4:	eeec ba00 	vfma.f32	s23, s24, s0
 80125b8:	eeea 9a00 	vfma.f32	s19, s20, s0
 80125bc:	eeab ba80 	vfma.f32	s22, s23, s0
 80125c0:	eea9 9a80 	vfma.f32	s18, s19, s0
 80125c4:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80125c8:	ee68 8a80 	vmul.f32	s17, s17, s0
 80125cc:	f7ff ff6e 	bl	80124ac <__ieee754_sqrtf>
 80125d0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8012694 <__ieee754_acosf+0x1e0>
 80125d4:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80125d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80125dc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80125e0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80125e4:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8012698 <__ieee754_acosf+0x1e4>
 80125e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80125ec:	e773      	b.n	80124d6 <__ieee754_acosf+0x22>
 80125ee:	ee39 8a40 	vsub.f32	s16, s18, s0
 80125f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80125f6:	eeb0 0a48 	vmov.f32	s0, s16
 80125fa:	f7ff ff57 	bl	80124ac <__ieee754_sqrtf>
 80125fe:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8012602:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8012606:	ee10 3a10 	vmov	r3, s0
 801260a:	eeb0 6a48 	vmov.f32	s12, s16
 801260e:	f36f 030b 	bfc	r3, #0, #12
 8012612:	ee07 3a90 	vmov	s15, r3
 8012616:	eeac ca88 	vfma.f32	s24, s25, s16
 801261a:	eeaa aa88 	vfma.f32	s20, s21, s16
 801261e:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8012622:	ee70 6a27 	vadd.f32	s13, s0, s15
 8012626:	eeec ba08 	vfma.f32	s23, s24, s16
 801262a:	eeea 9a08 	vfma.f32	s19, s20, s16
 801262e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012632:	eeab ba88 	vfma.f32	s22, s23, s16
 8012636:	eea9 9a88 	vfma.f32	s18, s19, s16
 801263a:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801263e:	ee68 8a88 	vmul.f32	s17, s17, s16
 8012642:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8012646:	eea0 7a26 	vfma.f32	s14, s0, s13
 801264a:	ee37 0a87 	vadd.f32	s0, s15, s14
 801264e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012652:	e740      	b.n	80124d6 <__ieee754_acosf+0x22>
 8012654:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801269c <__ieee754_acosf+0x1e8>
 8012658:	e73d      	b.n	80124d6 <__ieee754_acosf+0x22>
 801265a:	bf00      	nop
 801265c:	40490fdb 	.word	0x40490fdb
 8012660:	00000000 	.word	0x00000000
 8012664:	3811ef08 	.word	0x3811ef08
 8012668:	3a4f7f04 	.word	0x3a4f7f04
 801266c:	bf303361 	.word	0xbf303361
 8012670:	bd241146 	.word	0xbd241146
 8012674:	3e4e0aa8 	.word	0x3e4e0aa8
 8012678:	bea6b090 	.word	0xbea6b090
 801267c:	3e2aaaab 	.word	0x3e2aaaab
 8012680:	3d9dc62e 	.word	0x3d9dc62e
 8012684:	4001572d 	.word	0x4001572d
 8012688:	c019d139 	.word	0xc019d139
 801268c:	33a22168 	.word	0x33a22168
 8012690:	3fc90fda 	.word	0x3fc90fda
 8012694:	b3a22168 	.word	0xb3a22168
 8012698:	40490fda 	.word	0x40490fda
 801269c:	3fc90fdb 	.word	0x3fc90fdb

080126a0 <_init>:
 80126a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a2:	bf00      	nop
 80126a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126a6:	bc08      	pop	{r3}
 80126a8:	469e      	mov	lr, r3
 80126aa:	4770      	bx	lr

080126ac <_fini>:
 80126ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ae:	bf00      	nop
 80126b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126b2:	bc08      	pop	{r3}
 80126b4:	469e      	mov	lr, r3
 80126b6:	4770      	bx	lr
