
ADE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cb8  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d999  08010ef0  08010ef0  00011ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802e88c  0802e88c  0002f88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802e894  0802e894  0002f894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802e898  0802e898  0002f898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  0802e89c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cabc  200001ec  0802ea88  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000cca8  0802ea88  00030ca8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033b2b  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c3f  00000000  00000000  00063d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fc8  00000000  00000000  00069990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001781  00000000  00000000  0006b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000398a0  00000000  00000000  0006d0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002cd4e  00000000  00000000  000a6979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016605f  00000000  00000000  000d36c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000bc  00000000  00000000  00239726  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009c14  00000000  00000000  002397e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  002433f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00003a0c  00000000  00000000  00243458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000000e0  00000000  00000000  00246e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001ec 	.word	0x200001ec
 8000254:	00000000 	.word	0x00000000
 8000258:	08010ed8 	.word	0x08010ed8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f0 	.word	0x200001f0
 8000274:	08010ed8 	.word	0x08010ed8

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9e6 	b.w	8001074 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	4688      	mov	r8, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	468e      	mov	lr, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d14a      	bne.n	8000dd2 <__udivmoddi4+0xa6>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	d95f      	bls.n	8000e02 <__udivmoddi4+0xd6>
 8000d42:	fab2 f682 	clz	r6, r2
 8000d46:	b14e      	cbz	r6, 8000d5c <__udivmoddi4+0x30>
 8000d48:	f1c6 0320 	rsb	r3, r6, #32
 8000d4c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d50:	40b7      	lsls	r7, r6
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	0c23      	lsrs	r3, r4, #16
 8000d66:	fbbe f1f8 	udiv	r1, lr, r8
 8000d6a:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d72:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f200 8154 	bhi.w	8001030 <__udivmoddi4+0x304>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b2a2      	uxth	r2, r4
 8000d8e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d92:	fb08 3310 	mls	r3, r8, r0, r3
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d9e:	4594      	cmp	ip, r2
 8000da0:	d90b      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da2:	18ba      	adds	r2, r7, r2
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	bf2c      	ite	cs
 8000daa:	2401      	movcs	r4, #1
 8000dac:	2400      	movcc	r4, #0
 8000dae:	4594      	cmp	ip, r2
 8000db0:	d902      	bls.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	2c00      	cmp	r4, #0
 8000db4:	f000 813f 	beq.w	8001036 <__udivmoddi4+0x30a>
 8000db8:	4618      	mov	r0, r3
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	eba2 020c 	sub.w	r2, r2, ip
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa2>
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e9c5 2300 	strd	r2, r3, [r5]
 8000dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xb6>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb0>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d14e      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dea:	4543      	cmp	r3, r8
 8000dec:	f0c0 8112 	bcc.w	8001014 <__udivmoddi4+0x2e8>
 8000df0:	4282      	cmp	r2, r0
 8000df2:	f240 810f 	bls.w	8001014 <__udivmoddi4+0x2e8>
 8000df6:	4608      	mov	r0, r1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e8      	beq.n	8000dce <__udivmoddi4+0xa2>
 8000dfc:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e00:	e7e5      	b.n	8000dce <__udivmoddi4+0xa2>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f000 80ac 	beq.w	8000f60 <__udivmoddi4+0x234>
 8000e08:	fab2 f682 	clz	r6, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	f040 80bb 	bne.w	8000f88 <__udivmoddi4+0x25c>
 8000e12:	1a8b      	subs	r3, r1, r2
 8000e14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e18:	b2bc      	uxth	r4, r7
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	0c02      	lsrs	r2, r0, #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e24:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e2c:	fb04 f20c 	mul.w	r2, r4, ip
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d90e      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80ec 	beq.w	8001028 <__udivmoddi4+0x2fc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	fb04 f408 	mul.w	r4, r4, r8
 8000e60:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e64:	4294      	cmp	r4, r2
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x154>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	2001      	movcs	r0, #1
 8000e72:	2000      	movcc	r0, #0
 8000e74:	4294      	cmp	r4, r2
 8000e76:	d902      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f000 80d1 	beq.w	8001020 <__udivmoddi4+0x2f4>
 8000e7e:	4698      	mov	r8, r3
 8000e80:	1b12      	subs	r2, r2, r4
 8000e82:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa08 f401 	lsl.w	r4, r8, r1
 8000e92:	fa00 f901 	lsl.w	r9, r0, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	fa28 f806 	lsr.w	r8, r8, r6
 8000e9e:	408a      	lsls	r2, r1
 8000ea0:	431f      	orrs	r7, r3
 8000ea2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fa1f fc87 	uxth.w	ip, r7
 8000eae:	0c1c      	lsrs	r4, r3, #16
 8000eb0:	fbb8 fef0 	udiv	lr, r8, r0
 8000eb4:	fb00 881e 	mls	r8, r0, lr, r8
 8000eb8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ebc:	fb0e f80c 	mul.w	r8, lr, ip
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d90e      	bls.n	8000ee2 <__udivmoddi4+0x1b6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	bf2c      	ite	cs
 8000ecc:	f04f 0b01 	movcs.w	fp, #1
 8000ed0:	f04f 0b00 	movcc.w	fp, #0
 8000ed4:	45a0      	cmp	r8, r4
 8000ed6:	d903      	bls.n	8000ee0 <__udivmoddi4+0x1b4>
 8000ed8:	f1bb 0f00 	cmp.w	fp, #0
 8000edc:	f000 80b8 	beq.w	8001050 <__udivmoddi4+0x324>
 8000ee0:	46d6      	mov	lr, sl
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fa1f f883 	uxth.w	r8, r3
 8000eea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eee:	fb00 4413 	mls	r4, r0, r3, r4
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d90e      	bls.n	8000f1c <__udivmoddi4+0x1f0>
 8000efe:	193c      	adds	r4, r7, r4
 8000f00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f04:	bf2c      	ite	cs
 8000f06:	f04f 0801 	movcs.w	r8, #1
 8000f0a:	f04f 0800 	movcc.w	r8, #0
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d903      	bls.n	8000f1a <__udivmoddi4+0x1ee>
 8000f12:	f1b8 0f00 	cmp.w	r8, #0
 8000f16:	f000 809f 	beq.w	8001058 <__udivmoddi4+0x32c>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f20:	eba4 040c 	sub.w	r4, r4, ip
 8000f24:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f28:	4564      	cmp	r4, ip
 8000f2a:	4673      	mov	r3, lr
 8000f2c:	46e0      	mov	r8, ip
 8000f2e:	d302      	bcc.n	8000f36 <__udivmoddi4+0x20a>
 8000f30:	d107      	bne.n	8000f42 <__udivmoddi4+0x216>
 8000f32:	45f1      	cmp	r9, lr
 8000f34:	d205      	bcs.n	8000f42 <__udivmoddi4+0x216>
 8000f36:	ebbe 0302 	subs.w	r3, lr, r2
 8000f3a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	46e0      	mov	r8, ip
 8000f42:	b15d      	cbz	r5, 8000f5c <__udivmoddi4+0x230>
 8000f44:	ebb9 0203 	subs.w	r2, r9, r3
 8000f48:	eb64 0408 	sbc.w	r4, r4, r8
 8000f4c:	fa04 f606 	lsl.w	r6, r4, r6
 8000f50:	fa22 f301 	lsr.w	r3, r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	431e      	orrs	r6, r3
 8000f58:	e9c5 6400 	strd	r6, r4, [r5]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e736      	b.n	8000dce <__udivmoddi4+0xa2>
 8000f60:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f64:	0c01      	lsrs	r1, r0, #16
 8000f66:	4614      	mov	r4, r2
 8000f68:	b280      	uxth	r0, r0
 8000f6a:	4696      	mov	lr, r2
 8000f6c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f70:	2620      	movs	r6, #32
 8000f72:	4690      	mov	r8, r2
 8000f74:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f78:	4610      	mov	r0, r2
 8000f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f7e:	eba3 0308 	sub.w	r3, r3, r8
 8000f82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f86:	e74b      	b.n	8000e20 <__udivmoddi4+0xf4>
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	f1c6 0320 	rsb	r3, r6, #32
 8000f8e:	fa01 f206 	lsl.w	r2, r1, r6
 8000f92:	fa21 f803 	lsr.w	r8, r1, r3
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	fa20 f303 	lsr.w	r3, r0, r3
 8000f9e:	b2bc      	uxth	r4, r7
 8000fa0:	40b0      	lsls	r0, r6
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	0c02      	lsrs	r2, r0, #16
 8000fa6:	0c19      	lsrs	r1, r3, #16
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fae:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fb2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fb6:	fb09 f804 	mul.w	r8, r9, r4
 8000fba:	4588      	cmp	r8, r1
 8000fbc:	d951      	bls.n	8001062 <__udivmoddi4+0x336>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0a01 	movcs.w	sl, #1
 8000fca:	f04f 0a00 	movcc.w	sl, #0
 8000fce:	4588      	cmp	r8, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x2ac>
 8000fd2:	f1ba 0f00 	cmp.w	sl, #0
 8000fd6:	d031      	beq.n	800103c <__udivmoddi4+0x310>
 8000fd8:	eba1 0108 	sub.w	r1, r1, r8
 8000fdc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe0:	fb09 f804 	mul.w	r8, r9, r4
 8000fe4:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fee:	4543      	cmp	r3, r8
 8000ff0:	d235      	bcs.n	800105e <__udivmoddi4+0x332>
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ff8:	bf2c      	ite	cs
 8000ffa:	f04f 0a01 	movcs.w	sl, #1
 8000ffe:	f04f 0a00 	movcc.w	sl, #0
 8001002:	4543      	cmp	r3, r8
 8001004:	d2bb      	bcs.n	8000f7e <__udivmoddi4+0x252>
 8001006:	f1ba 0f00 	cmp.w	sl, #0
 800100a:	d1b8      	bne.n	8000f7e <__udivmoddi4+0x252>
 800100c:	f1a9 0102 	sub.w	r1, r9, #2
 8001010:	443b      	add	r3, r7
 8001012:	e7b4      	b.n	8000f7e <__udivmoddi4+0x252>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb68 0203 	sbc.w	r2, r8, r3
 800101a:	2001      	movs	r0, #1
 800101c:	4696      	mov	lr, r2
 800101e:	e6eb      	b.n	8000df8 <__udivmoddi4+0xcc>
 8001020:	443a      	add	r2, r7
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	e72b      	b.n	8000e80 <__udivmoddi4+0x154>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	443b      	add	r3, r7
 800102e:	e710      	b.n	8000e52 <__udivmoddi4+0x126>
 8001030:	3902      	subs	r1, #2
 8001032:	443b      	add	r3, r7
 8001034:	e6a9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8001036:	443a      	add	r2, r7
 8001038:	3802      	subs	r0, #2
 800103a:	e6be      	b.n	8000dba <__udivmoddi4+0x8e>
 800103c:	eba7 0808 	sub.w	r8, r7, r8
 8001040:	f1a9 0c02 	sub.w	ip, r9, #2
 8001044:	4441      	add	r1, r8
 8001046:	fbb1 f9fe 	udiv	r9, r1, lr
 800104a:	fb09 f804 	mul.w	r8, r9, r4
 800104e:	e7c9      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001050:	f1ae 0e02 	sub.w	lr, lr, #2
 8001054:	443c      	add	r4, r7
 8001056:	e744      	b.n	8000ee2 <__udivmoddi4+0x1b6>
 8001058:	3b02      	subs	r3, #2
 800105a:	443c      	add	r4, r7
 800105c:	e75e      	b.n	8000f1c <__udivmoddi4+0x1f0>
 800105e:	4649      	mov	r1, r9
 8001060:	e78d      	b.n	8000f7e <__udivmoddi4+0x252>
 8001062:	eba1 0108 	sub.w	r1, r1, r8
 8001066:	46cc      	mov	ip, r9
 8001068:	fbb1 f9fe 	udiv	r9, r1, lr
 800106c:	fb09 f804 	mul.w	r8, r9, r4
 8001070:	e7b8      	b.n	8000fe4 <__udivmoddi4+0x2b8>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800107e:	4a1f      	ldr	r2, [pc, #124]	@ (80010fc <MX_ADC1_Init+0x84>)
 8001080:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_ADC1_Init+0x80>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_ADC1_Init+0x80>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_ADC1_Init+0x80>)
 80010e6:	f001 fc0b 	bl	8002900 <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010f0:	f000 fc4c 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000208 	.word	0x20000208
 80010fc:	42028000 	.word	0x42028000

08001100 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0ba      	sub	sp, #232	@ 0xe8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	22c0      	movs	r2, #192	@ 0xc0
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f00c f93e 	bl	800d3a2 <memset>
  if(adcHandle->Instance==ADC1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_ADC_MspInit+0xbc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d140      	bne.n	80011b2 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001130:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800113c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f005 f951 	bl	80063f0 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001154:	f000 fc1a 	bl	800198c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800115a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001160:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001164:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800116a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800116e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800117c:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_ADC_MspInit+0xc0>)
 8001188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_ADC_MspInit+0xc4>)
 80011ae:	f003 fa7b 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b2:	bf00      	nop
 80011b4:	37e8      	adds	r7, #232	@ 0xe8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	42028000 	.word	0x42028000
 80011c0:	46020c00 	.word	0x46020c00
 80011c4:	42020800 	.word	0x42020800

080011c8 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_GPDMA1_Init+0x4c>)
 80011d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <MX_GPDMA1_Init+0x4c>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <MX_GPDMA1_Init+0x4c>)
 80011e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2055      	movs	r0, #85	@ 0x55
 80011f2:	f001 ff07 	bl	8003004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 80011f6:	2055      	movs	r0, #85	@ 0x55
 80011f8:	f001 ff1e 	bl	8003038 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel14_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2056      	movs	r0, #86	@ 0x56
 8001202:	f001 feff 	bl	8003004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel14_IRQn);
 8001206:	2056      	movs	r0, #86	@ 0x56
 8001208:	f001 ff16 	bl	8003038 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	46020c00 	.word	0x46020c00

08001218 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b3c      	ldr	r3, [pc, #240]	@ (8001320 <MX_GPIO_Init+0x108>)
 8001230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001234:	4a3a      	ldr	r2, [pc, #232]	@ (8001320 <MX_GPIO_Init+0x108>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <MX_GPIO_Init+0x108>)
 8001240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <MX_GPIO_Init+0x108>)
 800124e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001252:	4a33      	ldr	r2, [pc, #204]	@ (8001320 <MX_GPIO_Init+0x108>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800125c:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <MX_GPIO_Init+0x108>)
 800125e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <MX_GPIO_Init+0x108>)
 800126c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001270:	4a2b      	ldr	r2, [pc, #172]	@ (8001320 <MX_GPIO_Init+0x108>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800127a:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <MX_GPIO_Init+0x108>)
 800127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <MX_GPIO_Init+0x108>)
 800128a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800128e:	4a24      	ldr	r2, [pc, #144]	@ (8001320 <MX_GPIO_Init+0x108>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001298:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <MX_GPIO_Init+0x108>)
 800129a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2104      	movs	r1, #4
 80012aa:	481e      	ldr	r0, [pc, #120]	@ (8001324 <MX_GPIO_Init+0x10c>)
 80012ac:	f003 fbd4 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m2_lr_sel_Pin|led_blue_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2184      	movs	r1, #132	@ 0x84
 80012b4:	481c      	ldr	r0, [pc, #112]	@ (8001328 <MX_GPIO_Init+0x110>)
 80012b6:	f003 fbcf 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	481b      	ldr	r0, [pc, #108]	@ (800132c <MX_GPIO_Init+0x114>)
 80012c0:	f003 fbca 	bl	8004a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : m1_lr_sel_Pin */
  GPIO_InitStruct.Pin = m1_lr_sel_Pin;
 80012c4:	2304      	movs	r3, #4
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(m1_lr_sel_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4812      	ldr	r0, [pc, #72]	@ (8001324 <MX_GPIO_Init+0x10c>)
 80012dc:	f003 f9e4 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : m2_lr_sel_Pin led_blue_Pin */
  GPIO_InitStruct.Pin = m2_lr_sel_Pin|led_blue_Pin;
 80012e0:	2384      	movs	r3, #132	@ 0x84
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	480c      	ldr	r0, [pc, #48]	@ (8001328 <MX_GPIO_Init+0x110>)
 80012f8:	f003 f9d6 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_green_Pin */
  GPIO_InitStruct.Pin = led_green_Pin;
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_green_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <MX_GPIO_Init+0x114>)
 8001314:	f003 f9c8 	bl	80046a8 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	46020c00 	.word	0x46020c00
 8001324:	42021000 	.word	0x42021000
 8001328:	42020400 	.word	0x42020400
 800132c:	42020800 	.word	0x42020800

08001330 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001334:	2000      	movs	r0, #0
 8001336:	f003 fc2b 	bl	8004b90 <HAL_ICACHE_ConfigAssociativityMode>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001340:	f000 fb24 	bl	800198c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001344:	f003 fc44 	bl	8004bd0 <HAL_ICACHE_Enable>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800134e:	f000 fb1d 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135c:	f001 f95e 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001360:	f000 f8c4 	bl	80014ec <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f85e 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f7ff ff56 	bl	8001218 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800136c:	f7ff ff2c 	bl	80011c8 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 8001370:	f7ff ffde 	bl	8001330 <MX_ICACHE_Init>
  MX_SAI1_Init();
 8001374:	f000 fb10 	bl	8001998 <MX_SAI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001378:	f000 ff44 	bl	8002204 <MX_USB_OTG_FS_HCD_Init>
  MX_USART1_UART_Init();
 800137c:	f000 fe8c 	bl	8002098 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001380:	f7ff fe7a 	bl	8001078 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  if (arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001384:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001388:	481f      	ldr	r0, [pc, #124]	@ (8001408 <main+0xb0>)
 800138a:	f00a f899 	bl	800b4c0 <arm_rfft_fast_init_f32>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <main+0x46>
    HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, GPIO_PIN_SET);  
 8001394:	2201      	movs	r2, #1
 8001396:	2180      	movs	r1, #128	@ 0x80
 8001398:	481c      	ldr	r0, [pc, #112]	@ (800140c <main+0xb4>)
 800139a:	f003 fb5d 	bl	8004a58 <HAL_GPIO_WritePin>
  }

    // Start SAI audio capture for BOTH blocks

  if (HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t*)sai_a_dma_buffer, SAI_RX_BUFFER_SIZE * 2) != HAL_OK) {
 800139e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013a2:	491b      	ldr	r1, [pc, #108]	@ (8001410 <main+0xb8>)
 80013a4:	481b      	ldr	r0, [pc, #108]	@ (8001414 <main+0xbc>)
 80013a6:	f007 ff61 	bl	800926c <HAL_SAI_Receive_DMA>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <main+0x62>
      HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, GPIO_PIN_SET);  
 80013b0:	2201      	movs	r2, #1
 80013b2:	2180      	movs	r1, #128	@ 0x80
 80013b4:	4818      	ldr	r0, [pc, #96]	@ (8001418 <main+0xc0>)
 80013b6:	f003 fb4f 	bl	8004a58 <HAL_GPIO_WritePin>
//  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 fffe 	bl	80023bc <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f000 fffb 	bl	80023bc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80013c6:	2002      	movs	r0, #2
 80013c8:	f000 fff8 	bl	80023bc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80013cc:	2101      	movs	r1, #1
 80013ce:	2000      	movs	r0, #0
 80013d0:	f001 f884 	bl	80024dc <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Set Mics SAI1 A Left and Right
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2104      	movs	r1, #4
 80013d8:	4810      	ldr	r0, [pc, #64]	@ (800141c <main+0xc4>)
 80013da:	f003 fb3d 	bl	8004a58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m2_lr_sel_GPIO_Port, m2_lr_sel_Pin, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2104      	movs	r1, #4
 80013e2:	480a      	ldr	r0, [pc, #40]	@ (800140c <main+0xb4>)
 80013e4:	f003 fb38 	bl	8004a58 <HAL_GPIO_WritePin>

  
  while (1)
  {

    if (data_ready_flag) {
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <main+0xc8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <main+0xa4>
        process_audio_data();
 80013f2:	f000 f889 	bl	8001508 <process_audio_data>
        // Reset flag after processing
        data_ready_flag = 0;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <main+0xc8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    }
	   HAL_Delay(500);
 80013fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001400:	f001 f95c 	bl	80026bc <HAL_Delay>
    if (data_ready_flag) {
 8001404:	e7f0      	b.n	80013e8 <main+0x90>
 8001406:	bf00      	nop
 8001408:	2000c294 	.word	0x2000c294
 800140c:	42020400 	.word	0x42020400
 8001410:	20000294 	.word	0x20000294
 8001414:	2000c4c0 	.word	0x2000c4c0
 8001418:	42020800 	.word	0x42020800
 800141c:	42021000 	.word	0x42021000
 8001420:	2000c2ac 	.word	0x2000c2ac

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09e      	sub	sp, #120	@ 0x78
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 0318 	add.w	r3, r7, #24
 800142e:	2260      	movs	r2, #96	@ 0x60
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f00b ffb5 	bl	800d3a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001448:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800144c:	f003 fbd0 	bl	8004bf0 <HAL_PWREx_ControlVoltageScaling>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001456:	f000 fa99 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800145a:	2332      	movs	r3, #50	@ 0x32
 800145c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001468:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2310      	movs	r3, #16
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800146e:	2301      	movs	r3, #1
 8001470:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001472:	2310      	movs	r3, #16
 8001474:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001476:	2300      	movs	r3, #0
 8001478:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800147e:	2301      	movs	r3, #1
 8001480:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001482:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001486:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001488:	2303      	movs	r3, #3
 800148a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800148c:	2308      	movs	r3, #8
 800148e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001490:	2302      	movs	r3, #2
 8001492:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001494:	2302      	movs	r3, #2
 8001496:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800149c:	230c      	movs	r3, #12
 800149e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fcbd 	bl	8004e28 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014b4:	f000 fa6a 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	231f      	movs	r3, #31
 80014ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2303      	movs	r3, #3
 80014be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	2103      	movs	r1, #3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fb83 	bl	8005be0 <HAL_RCC_ClockConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014e0:	f000 fa54 	bl	800198c <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3778      	adds	r7, #120	@ 0x78
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014f0:	f003 fc8a 	bl	8004e08 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80014f4:	2002      	movs	r0, #2
 80014f6:	f003 fc07 	bl	8004d08 <HAL_PWREx_ConfigSupply>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001500:	f000 fa44 	bl	800198c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <process_audio_data>:
/**
  * @brief  Processes a block of audio data to calculate sound direction.
  * @retval None
  */
void process_audio_data(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
    // }
    // float32_t average_angle = angle_sum / NUM_PAIRS;


        // --- Step 1: De-interleave the raw DMA buffer into separate mic buffers ---
    for (int i = 0; i < FFT_SIZE; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e027      	b.n	8001564 <process_audio_data+0x5c>
        // Data is 24-bit in a 32-bit word, left-aligned. Right-shift to normalize.
        mic_buffers[0][i] = (float32_t)(processing_ptr_a[i * 2] >> 8);     // Mic 1
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <process_audio_data+0x94>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	121b      	asrs	r3, r3, #8
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	4a1d      	ldr	r2, [pc, #116]	@ (80015a0 <process_audio_data+0x98>)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	edc3 7a00 	vstr	s15, [r3]
        mic_buffers[1][i] = (float32_t)(processing_ptr_a[i * 2 + 1] >> 8); // Mic 2
 8001536:	4b19      	ldr	r3, [pc, #100]	@ (800159c <process_audio_data+0x94>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	3304      	adds	r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	121b      	asrs	r3, r3, #8
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	4a14      	ldr	r2, [pc, #80]	@ (80015a0 <process_audio_data+0x98>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < FFT_SIZE; i++) {
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3301      	adds	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800156a:	dbd3      	blt.n	8001514 <process_audio_data+0xc>
    }

    // --- Step 2: Calculate TDOA lag for the microphone pair ---
    int16_t lag = calculate_tdoa_lag(mic_buffers[0], mic_buffers[1]);
 800156c:	490d      	ldr	r1, [pc, #52]	@ (80015a4 <process_audio_data+0x9c>)
 800156e:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <process_audio_data+0x98>)
 8001570:	f000 f8e2 	bl	8001738 <calculate_tdoa_lag>
 8001574:	4603      	mov	r3, r0
 8001576:	817b      	strh	r3, [r7, #10]

    // --- Step 3: Convert lag into a direction angle (0-180 degrees) ---
    float32_t angle_deg = calculate_direction(lag);
 8001578:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f813 	bl	80015a8 <calculate_direction>
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]


    // --- Step 4: Transmit results and diagnostic data over UART ---
    transmit_uart_data(angle_deg, lag);
 8001586:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800158a:	4618      	mov	r0, r3
 800158c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001590:	f000 f86a 	bl	8001668 <transmit_uart_data>



    // --- Step 4: Transmit results and diagnostic data over VCP ---
//    transmit_vcp_data(angle_deg, lag);
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2000c2b0 	.word	0x2000c2b0
 80015a0:	20004294 	.word	0x20004294
 80015a4:	20005294 	.word	0x20005294

080015a8 <calculate_direction>:
  * @brief  Calculates the direction angle for a linear array.
  * @param  lag: The lag in samples between the two microphones.
  * @retval Angle in degrees (0-180).
  */
float32_t calculate_direction(int16_t lag)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
    float32_t dt = (float32_t)lag / SAMPLE_RATE;
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001658 <calculate_direction+0xb0>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Calculate the argument for acos, clamp to [-1, 1] to avoid domain errors
    float32_t cos_theta = (dt * SPEED_OF_SOUND) / MIC_DISTANCE;
 80015ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ce:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800165c <calculate_direction+0xb4>
 80015d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d6:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001660 <calculate_direction+0xb8>
 80015da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015de:	edc7 7a04 	vstr	s15, [r7, #16]
    cos_theta = fmaxf(-1.0f, fminf(1.0f, cos_theta));
 80015e2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80015e6:	ed97 0a04 	vldr	s0, [r7, #16]
 80015ea:	f00f fb41 	bl	8010c70 <fminf>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	f00f fb1c 	bl	8010c36 <fmaxf>
 80015fe:	ed87 0a04 	vstr	s0, [r7, #16]
    
    // Calculate final angle in degrees
    float32_t angle_rad = acosf(cos_theta);
 8001602:	ed97 0a04 	vldr	s0, [r7, #16]
 8001606:	f00f fac5 	bl	8010b94 <acosf>
 800160a:	ed87 0a03 	vstr	s0, [r7, #12]
    float32_t angle_deg = angle_rad * 180.0f / M_PI;
 800160e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001612:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001664 <calculate_direction+0xbc>
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ff97 	bl	8000550 <__aeabi_f2d>
 8001622:	a30b      	add	r3, pc, #44	@ (adr r3, 8001650 <calculate_direction+0xa8>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f914 	bl	8000854 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fadc 	bl	8000bf0 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	60bb      	str	r3, [r7, #8]

    return angle_deg;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	f3af 8000 	nop.w
 8001650:	54442d18 	.word	0x54442d18
 8001654:	400921fb 	.word	0x400921fb
 8001658:	473b8000 	.word	0x473b8000
 800165c:	43ab8000 	.word	0x43ab8000
 8001660:	3dcccccd 	.word	0x3dcccccd
 8001664:	43340000 	.word	0x43340000

08001668 <transmit_uart_data>:
/**
 * @brief Fills and transmits a data packet over UART.
 * @param angle The calculated angle in degrees.
 * @param lag The TDOA lag between the two mics.
 */
void transmit_uart_data(float32_t angle, int16_t lag) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001672:	4603      	mov	r3, r0
 8001674:	807b      	strh	r3, [r7, #2]
    uart_packet.header = UART_PACKET_HEADER;
 8001676:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <transmit_uart_data+0xbc>)
 8001678:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 800167c:	801a      	strh	r2, [r3, #0]
    uart_packet.angle_q10 = (uint16_t)(angle * 1024.0f);
 800167e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001682:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001728 <transmit_uart_data+0xc0>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <transmit_uart_data+0xbc>)
 8001696:	805a      	strh	r2, [r3, #2]
    uart_packet.timestamp = HAL_GetTick();
 8001698:	f001 f804 	bl	80026a4 <HAL_GetTick>
 800169c:	4603      	mov	r3, r0
 800169e:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <transmit_uart_data+0xbc>)
 80016a0:	6053      	str	r3, [r2, #4]
    uart_packet.lag = lag;
 80016a2:	4a20      	ldr	r2, [pc, #128]	@ (8001724 <transmit_uart_data+0xbc>)
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	8113      	strh	r3, [r2, #8]
    uart_packet.reserved = 0;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <transmit_uart_data+0xbc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	815a      	strh	r2, [r3, #10]

    // Downsample raw mic data for transmission
    for(int i = 0; i < NUM_MICS_DEBUG; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e024      	b.n	80016fe <transmit_uart_data+0x96>
        for(int j = 0; j < UART_MIC_SAMPLES; j++) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	e01b      	b.n	80016f2 <transmit_uart_data+0x8a>
            uart_packet.mic_data[i][j] = (int16_t)mic_buffers[i][j * MIC_DATA_DOWNSAMPLE_FACTOR];
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	491b      	ldr	r1, [pc, #108]	@ (800172c <transmit_uart_data+0xc4>)
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	0292      	lsls	r2, r2, #10
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d2:	ee17 3a90 	vmov	r3, s15
 80016d6:	b218      	sxth	r0, r3
 80016d8:	4912      	ldr	r1, [pc, #72]	@ (8001724 <transmit_uart_data+0xbc>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	01da      	lsls	r2, r3, #7
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	3304      	adds	r3, #4
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	440b      	add	r3, r1
 80016e8:	4602      	mov	r2, r0
 80016ea:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < UART_MIC_SAMPLES; j++) {
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80016f6:	dde0      	ble.n	80016ba <transmit_uart_data+0x52>
    for(int i = 0; i < NUM_MICS_DEBUG; i++) {
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	ddd7      	ble.n	80016b4 <transmit_uart_data+0x4c>
    }

    // Send the packet over UART
    // Note: Using HAL_UART_Transmit in blocking mode for simplicity.
    // For higher performance, HAL_UART_Transmit_DMA could be used.
    HAL_UART_Transmit(&huart1, (uint8_t*)&uart_packet, sizeof(UART_DataPacket), 100);
 8001704:	2364      	movs	r3, #100	@ 0x64
 8001706:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800170a:	4906      	ldr	r1, [pc, #24]	@ (8001724 <transmit_uart_data+0xbc>)
 800170c:	4808      	ldr	r0, [pc, #32]	@ (8001730 <transmit_uart_data+0xc8>)
 800170e:	f008 fea1 	bl	800a454 <HAL_UART_Transmit>
    // Optionally, toggle an LED to indicate data transmission
    HAL_GPIO_TogglePin(led_blue_GPIO_Port, led_blue_Pin);
 8001712:	2180      	movs	r1, #128	@ 0x80
 8001714:	4807      	ldr	r0, [pc, #28]	@ (8001734 <transmit_uart_data+0xcc>)
 8001716:	f003 f9b7 	bl	8004a88 <HAL_GPIO_TogglePin>
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000c2b4 	.word	0x2000c2b4
 8001728:	44800000 	.word	0x44800000
 800172c:	20004294 	.word	0x20004294
 8001730:	2000c6d8 	.word	0x2000c6d8
 8001734:	42020400 	.word	0x42020400

08001738 <calculate_tdoa_lag>:
  * @param  mic1_data: Pointer to the first microphone's audio buffer.
  * @param  mic2_data: Pointer to the second microphone's audio buffer.
  * @retval The lag in samples.
  */
int16_t calculate_tdoa_lag(float32_t* mic1_data, float32_t* mic2_data)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b090      	sub	sp, #64	@ 0x40
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    // Copy data to FFT buffers
    memcpy(fft_buffer1, mic1_data, FFT_SIZE * sizeof(float32_t));
 8001742:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	486d      	ldr	r0, [pc, #436]	@ (8001900 <calculate_tdoa_lag+0x1c8>)
 800174a:	f00b feb8 	bl	800d4be <memcpy>
    memcpy(fft_buffer2, mic2_data, FFT_SIZE * sizeof(float32_t));
 800174e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	486b      	ldr	r0, [pc, #428]	@ (8001904 <calculate_tdoa_lag+0x1cc>)
 8001756:	f00b feb2 	bl	800d4be <memcpy>

    // Perform forward FFT on both signals
    arm_rfft_fast_f32(&fft_instance, fft_buffer1, fft_buffer1, 0);
 800175a:	2300      	movs	r3, #0
 800175c:	4a68      	ldr	r2, [pc, #416]	@ (8001900 <calculate_tdoa_lag+0x1c8>)
 800175e:	4968      	ldr	r1, [pc, #416]	@ (8001900 <calculate_tdoa_lag+0x1c8>)
 8001760:	4869      	ldr	r0, [pc, #420]	@ (8001908 <calculate_tdoa_lag+0x1d0>)
 8001762:	f009 ff9b 	bl	800b69c <arm_rfft_fast_f32>
    arm_rfft_fast_f32(&fft_instance, fft_buffer2, fft_buffer2, 0);
 8001766:	2300      	movs	r3, #0
 8001768:	4a66      	ldr	r2, [pc, #408]	@ (8001904 <calculate_tdoa_lag+0x1cc>)
 800176a:	4966      	ldr	r1, [pc, #408]	@ (8001904 <calculate_tdoa_lag+0x1cc>)
 800176c:	4866      	ldr	r0, [pc, #408]	@ (8001908 <calculate_tdoa_lag+0x1d0>)
 800176e:	f009 ff95 	bl	800b69c <arm_rfft_fast_f32>

    // GCC-PHAT Calculation
    for (int i = 0; i < FFT_SIZE * 2; i += 2) {
 8001772:	2300      	movs	r3, #0
 8001774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001776:	e096      	b.n	80018a6 <calculate_tdoa_lag+0x16e>
        float32_t X_re = fft_buffer1[i], X_im = fft_buffer1[i+1];
 8001778:	4a61      	ldr	r2, [pc, #388]	@ (8001900 <calculate_tdoa_lag+0x1c8>)
 800177a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
 8001784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001786:	3301      	adds	r3, #1
 8001788:	4a5d      	ldr	r2, [pc, #372]	@ (8001900 <calculate_tdoa_lag+0x1c8>)
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30
        float32_t Y_re = fft_buffer2[i], Y_im = fft_buffer2[i+1];
 8001792:	4a5c      	ldr	r2, [pc, #368]	@ (8001904 <calculate_tdoa_lag+0x1cc>)
 8001794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800179e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a58      	ldr	r2, [pc, #352]	@ (8001904 <calculate_tdoa_lag+0x1cc>)
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        float32_t R_re = X_re * Y_re + X_im * Y_im;
 80017ac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80017b0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b8:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80017bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        float32_t R_im = X_im * Y_re - X_re * Y_im;
 80017cc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80017d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80017dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	edc7 7a08 	vstr	s15, [r7, #32]
        float32_t R_mag;
        arm_sqrt_f32(R_re * R_re + R_im * R_im, &R_mag);
 80017ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	edc7 7a07 	vstr	s15, [r7, #28]
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800180a:	edd7 7a07 	vldr	s15, [r7, #28]
 800180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	db09      	blt.n	800182c <calculate_tdoa_lag+0xf4>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001818:	ed97 0a07 	vldr	s0, [r7, #28]
 800181c:	f00f f9e6 	bl	8010bec <sqrtf>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800182a:	e004      	b.n	8001836 <calculate_tdoa_lag+0xfe>
    }
    else
    {
      *pOut = 0.0f;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001834:	bf00      	nop
        if (R_mag > 1e-9) {
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe89 	bl	8000550 <__aeabi_f2d>
 800183e:	a32e      	add	r3, pc, #184	@ (adr r3, 80018f8 <calculate_tdoa_lag+0x1c0>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7ff f96c 	bl	8000b20 <__aeabi_dcmpgt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d019      	beq.n	8001882 <calculate_tdoa_lag+0x14a>
            correlation_output[i]   = R_re / R_mag;
 800184e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001852:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185a:	4a2c      	ldr	r2, [pc, #176]	@ (800190c <calculate_tdoa_lag+0x1d4>)
 800185c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	edc3 7a00 	vstr	s15, [r3]
            correlation_output[i+1] = R_im / R_mag;
 8001866:	ed97 7a03 	vldr	s14, [r7, #12]
 800186a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800186c:	3301      	adds	r3, #1
 800186e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001876:	4a25      	ldr	r2, [pc, #148]	@ (800190c <calculate_tdoa_lag+0x1d4>)
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	edc3 7a00 	vstr	s15, [r3]
 8001880:	e00e      	b.n	80018a0 <calculate_tdoa_lag+0x168>
        } else {
            correlation_output[i]   = 0.0f;
 8001882:	4a22      	ldr	r2, [pc, #136]	@ (800190c <calculate_tdoa_lag+0x1d4>)
 8001884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
            correlation_output[i+1] = 0.0f;
 8001890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001892:	3301      	adds	r3, #1
 8001894:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <calculate_tdoa_lag+0x1d4>)
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < FFT_SIZE * 2; i += 2) {
 80018a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018a2:	3302      	adds	r3, #2
 80018a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018ac:	f6ff af64 	blt.w	8001778 <calculate_tdoa_lag+0x40>
        }
    }

    // Inverse FFT
    arm_rfft_fast_f32(&fft_instance, correlation_output, correlation_output, 1);
 80018b0:	2301      	movs	r3, #1
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <calculate_tdoa_lag+0x1d4>)
 80018b4:	4915      	ldr	r1, [pc, #84]	@ (800190c <calculate_tdoa_lag+0x1d4>)
 80018b6:	4814      	ldr	r0, [pc, #80]	@ (8001908 <calculate_tdoa_lag+0x1d0>)
 80018b8:	f009 fef0 	bl	800b69c <arm_rfft_fast_f32>

    // Find the peak of the correlation
    float32_t max_val;
    uint32_t max_idx;
    arm_max_f32(correlation_output, FFT_SIZE, &max_val, &max_idx);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	f107 0214 	add.w	r2, r7, #20
 80018c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c8:	4810      	ldr	r0, [pc, #64]	@ (800190c <calculate_tdoa_lag+0x1d4>)
 80018ca:	f009 fcf7 	bl	800b2bc <arm_max_f32>
    
    int16_t lag_val = max_idx;
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    if (lag_val >= FFT_SIZE / 2) {
 80018d2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80018d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018da:	db04      	blt.n	80018e6 <calculate_tdoa_lag+0x1ae>
        lag_val -= FFT_SIZE;
 80018dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80018de:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    return lag_val;
 80018e6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3740      	adds	r7, #64	@ 0x40
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	e826d695 	.word	0xe826d695
 80018fc:	3e112e0b 	.word	0x3e112e0b
 8001900:	20006294 	.word	0x20006294
 8001904:	20008294 	.word	0x20008294
 8001908:	2000c294 	.word	0x2000c294
 800190c:	2000a294 	.word	0x2000a294

08001910 <HAL_SAI_RxHalfCpltCallback>:
}

// --- Simplified DMA Transfer Complete Callbacks ---

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  // Point to the first half of the DMA buffer
  processing_ptr_a = &sai_a_dma_buffer[0];
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_SAI_RxHalfCpltCallback+0x20>)
 800191a:	4a06      	ldr	r2, [pc, #24]	@ (8001934 <HAL_SAI_RxHalfCpltCallback+0x24>)
 800191c:	601a      	str	r2, [r3, #0]
  // Set flag to process this data in the main loop
  data_ready_flag = 1;
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	2000c2b0 	.word	0x2000c2b0
 8001934:	20000294 	.word	0x20000294
 8001938:	2000c2ac 	.word	0x2000c2ac

0800193c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  // Point to the second half of the DMA buffer
  processing_ptr_a = &sai_a_dma_buffer[SAI_RX_BUFFER_SIZE];
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <HAL_SAI_RxCpltCallback+0x20>)
 8001946:	4a06      	ldr	r2, [pc, #24]	@ (8001960 <HAL_SAI_RxCpltCallback+0x24>)
 8001948:	601a      	str	r2, [r3, #0]
  // Set flag to process this data in the main loop
  data_ready_flag = 1;
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_SAI_RxCpltCallback+0x28>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	2000c2b0 	.word	0x2000c2b0
 8001960:	20002294 	.word	0x20002294
 8001964:	2000c2ac 	.word	0x2000c2ac

08001968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800197a:	f000 fe7f 	bl	800267c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40014800 	.word	0x40014800

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <Error_Handler+0x8>

08001998 <MX_SAI1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel13;
DMA_HandleTypeDef handle_GPDMA1_Channel13;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <MX_SAI1_Init+0x64>)
 800199e:	4a18      	ldr	r2, [pc, #96]	@ (8001a00 <MX_SAI1_Init+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019c4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80019c8:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80019dc:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80019e2:	2302      	movs	r3, #2
 80019e4:	2202      	movs	r2, #2
 80019e6:	2100      	movs	r1, #0
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <MX_SAI1_Init+0x64>)
 80019ea:	f007 f999 	bl	8008d20 <HAL_SAI_InitProtocol>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 80019f4:	f7ff ffca 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000c4c0 	.word	0x2000c4c0
 8001a00:	40015404 	.word	0x40015404

08001a04 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0d4      	sub	sp, #336	@ 0x150
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a0e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001a12:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	461a      	mov	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	f00b fcbd 	bl	800d3a2 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001a28:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a2c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a99      	ldr	r2, [pc, #612]	@ (8001c9c <HAL_SAI_MspInit+0x298>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f040 812a 	bne.w	8001c90 <HAL_SAI_MspInit+0x28c>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001a3c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a40:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 8001a44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001a50:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a54:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 8001a5e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a62:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a66:	2201      	movs	r2, #1
 8001a68:	609a      	str	r2, [r3, #8]
    PeriphClkInit.PLL2.PLL2M = 3;
 8001a6a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a6e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a72:	2203      	movs	r2, #3
 8001a74:	60da      	str	r2, [r3, #12]
    PeriphClkInit.PLL2.PLL2N = 15;
 8001a76:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a7a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a7e:	220f      	movs	r2, #15
 8001a80:	611a      	str	r2, [r3, #16]
    PeriphClkInit.PLL2.PLL2P = 2;
 8001a82:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a86:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	615a      	str	r2, [r3, #20]
    PeriphClkInit.PLL2.PLL2Q = 2;
 8001a8e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a92:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a96:	2202      	movs	r2, #2
 8001a98:	619a      	str	r2, [r3, #24]
    PeriphClkInit.PLL2.PLL2R = 2;
 8001a9a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a9e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	61da      	str	r2, [r3, #28]
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001aa6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001aaa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001aae:	220c      	movs	r2, #12
 8001ab0:	621a      	str	r2, [r3, #32]
    PeriphClkInit.PLL2.PLL2FRACN = 2048;
 8001ab2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001ab6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 8001ac0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001ac4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ac8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fc8c 	bl	80063f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_SAI_MspInit+0xde>
    {
      Error_Handler();
 8001ade:	f7ff ff55 	bl	800198c <Error_Handler>
    }

    if (SAI1_client == 0)
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca0 <HAL_SAI_MspInit+0x29c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11e      	bne.n	8001b28 <HAL_SAI_MspInit+0x124>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001aea:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca4 <HAL_SAI_MspInit+0x2a0>)
 8001aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001af0:	4a6c      	ldr	r2, [pc, #432]	@ (8001ca4 <HAL_SAI_MspInit+0x2a0>)
 8001af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001afa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <HAL_SAI_MspInit+0x2a0>)
 8001afc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b00:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001b04:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001b08:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001b12:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b16:	681b      	ldr	r3, [r3, #0]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	205a      	movs	r0, #90	@ 0x5a
 8001b1e:	f001 fa71 	bl	8003004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001b22:	205a      	movs	r0, #90	@ 0x5a
 8001b24:	f001 fa88 	bl	8003038 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001b28:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca0 <HAL_SAI_MspInit+0x29c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca0 <HAL_SAI_MspInit+0x29c>)
 8001b30:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b32:	2370      	movs	r3, #112	@ 0x70
 8001b34:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001b4a:	230d      	movs	r3, #13
 8001b4c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4854      	ldr	r0, [pc, #336]	@ (8001ca8 <HAL_SAI_MspInit+0x2a4>)
 8001b58:	f002 fda6 	bl	80046a8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8001b5c:	2322      	movs	r3, #34	@ 0x22
 8001b5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI1_A;
 8001b62:	2324      	movs	r3, #36	@ 0x24
 8001b64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8001b88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcBurstLength = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.DestBurstLength = 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel14) != HAL_OK)
 8001bde:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001be2:	4932      	ldr	r1, [pc, #200]	@ (8001cac <HAL_SAI_MspInit+0x2a8>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 ff15 	bl	8003a14 <HAL_DMAEx_List_BuildNode>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_SAI_MspInit+0x1f0>
    {
      Error_Handler();
 8001bf0:	f7ff fecc 	bl	800198c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel14, NULL, &Node_GPDMA1_Channel14) != HAL_OK)
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001cac <HAL_SAI_MspInit+0x2a8>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	482d      	ldr	r0, [pc, #180]	@ (8001cb0 <HAL_SAI_MspInit+0x2ac>)
 8001bfa:	f001 ff21 	bl	8003a40 <HAL_DMAEx_List_InsertNode>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_SAI_MspInit+0x204>
    {
      Error_Handler();
 8001c04:	f7ff fec2 	bl	800198c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel14) != HAL_OK)
 8001c08:	4829      	ldr	r0, [pc, #164]	@ (8001cb0 <HAL_SAI_MspInit+0x2ac>)
 8001c0a:	f001 ffe2 	bl	8003bd2 <HAL_DMAEx_List_SetCircularMode>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_SAI_MspInit+0x214>
    {
      Error_Handler();
 8001c14:	f7ff feba 	bl	800198c <Error_Handler>
    }

    handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 8001c18:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c1a:	4a27      	ldr	r2, [pc, #156]	@ (8001cb8 <HAL_SAI_MspInit+0x2b4>)
 8001c1c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel14.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c20:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001c24:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel14.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel14.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel14.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001c32:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel14.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c3a:	2281      	movs	r2, #129	@ 0x81
 8001c3c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8001c3e:	481d      	ldr	r0, [pc, #116]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c40:	f001 fd28 	bl	8003694 <HAL_DMAEx_List_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_SAI_MspInit+0x24a>
    {
      Error_Handler();
 8001c4a:	f7ff fe9f 	bl	800198c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel14, &List_GPDMA1_Channel14) != HAL_OK)
 8001c4e:	4918      	ldr	r1, [pc, #96]	@ (8001cb0 <HAL_SAI_MspInit+0x2ac>)
 8001c50:	4818      	ldr	r0, [pc, #96]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c52:	f002 f81f 	bl	8003c94 <HAL_DMAEx_List_LinkQ>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_SAI_MspInit+0x25c>
    {
      Error_Handler();
 8001c5c:	f7ff fe96 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel14);
 8001c60:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001c64:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001c70:	4a10      	ldr	r2, [pc, #64]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c72:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001c76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c7e:	2110      	movs	r1, #16
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <HAL_SAI_MspInit+0x2b0>)
 8001c82:	f001 fca5 	bl	80035d0 <HAL_DMA_ConfigChannelAttributes>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_SAI_MspInit+0x28c>
    {
      Error_Handler();
 8001c8c:	f7ff fe7e 	bl	800198c <Error_Handler>
    }

    }
}
 8001c90:	bf00      	nop
 8001c92:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40015404 	.word	0x40015404
 8001ca0:	2000c684 	.word	0x2000c684
 8001ca4:	46020c00 	.word	0x46020c00
 8001ca8:	42021000 	.word	0x42021000
 8001cac:	2000c558 	.word	0x2000c558
 8001cb0:	2000c57c 	.word	0x2000c57c
 8001cb4:	2000c594 	.word	0x2000c594
 8001cb8:	40020750 	.word	0x40020750

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <HAL_MspInit+0x3c>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <HAL_MspInit+0x3c>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_MspInit+0x3c>)
 8001cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001ce0:	f003 f862 	bl	8004da8 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddA();
 8001ce4:	f003 f880 	bl	8004de8 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ce8:	2004      	movs	r0, #4
 8001cea:	f001 f980 	bl	8002fee <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	46020c00 	.word	0x46020c00

08001cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08e      	sub	sp, #56	@ 0x38
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <HAL_InitTick+0xcc>)
 8001d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d12:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc8 <HAL_InitTick+0xcc>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d18:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <HAL_InitTick+0xcc>)
 8001d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d2a:	f107 0210 	add.w	r2, r7, #16
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 fa9d 	bl	8006274 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d3a:	f004 fa73 	bl	8006224 <HAL_RCC_GetPCLK2Freq>
 8001d3e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d42:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9b      	lsrs	r3, r3, #18
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <HAL_InitTick+0xd8>)
 8001d52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d5a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d60:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001d6e:	4818      	ldr	r0, [pc, #96]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d70:	f007 ff61 	bl	8009c36 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001d82:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d84:	f007 ffb8 	bl	8009cf8 <HAL_TIM_Base_Start_IT>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001d8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10e      	bne.n	8001db4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d808      	bhi.n	8001dae <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	2047      	movs	r0, #71	@ 0x47
 8001da2:	f001 f92f 	bl	8003004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da6:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd8 <HAL_InitTick+0xdc>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e002      	b.n	8001db4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001db4:	2047      	movs	r0, #71	@ 0x47
 8001db6:	f001 f93f 	bl	8003038 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001dba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3738      	adds	r7, #56	@ 0x38
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	46020c00 	.word	0x46020c00
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	2000c688 	.word	0x2000c688
 8001dd4:	40014800 	.word	0x40014800
 8001dd8:	2000001c 	.word	0x2000001c

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <NMI_Handler+0x4>

08001de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <MemManage_Handler+0x4>

08001df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 fbc3 	bl	80025cc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <TIM17_IRQHandler+0x10>)
 8001e52:	f007 fff1 	bl	8009e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000c688 	.word	0x2000c688

08001e60 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <GPDMA1_Channel13_IRQHandler+0x10>)
 8001e66:	f001 fa52 	bl	800330e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000c60c 	.word	0x2000c60c

08001e74 <GPDMA1_Channel14_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 14 global interrupt.
  */
void GPDMA1_Channel14_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 0 */

  /* USER CODE END GPDMA1_Channel14_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel14);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <GPDMA1_Channel14_IRQHandler+0x10>)
 8001e7a:	f001 fa48 	bl	800330e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 1 */

  /* USER CODE END GPDMA1_Channel14_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000c594 	.word	0x2000c594

08001e88 <SAI1_IRQHandler>:

/**
  * @brief This function handles Serial Audio Interface 1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <SAI1_IRQHandler+0x10>)
 8001e8e:	f007 facd 	bl	800942c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000c4c0 	.word	0x2000c4c0

08001e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return 1;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_kill>:

int _kill(int pid, int sig)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eb6:	f00b fac7 	bl	800d448 <__errno>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2216      	movs	r2, #22
 8001ebe:	601a      	str	r2, [r3, #0]
  return -1;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_exit>:

void _exit (int status)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ffe7 	bl	8001eac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ede:	bf00      	nop
 8001ee0:	e7fd      	b.n	8001ede <_exit+0x12>

08001ee2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e00a      	b.n	8001f0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	4601      	mov	r1, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	60ba      	str	r2, [r7, #8]
 8001f00:	b2ca      	uxtb	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3301      	adds	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dbf0      	blt.n	8001ef4 <_read+0x12>
  }

  return len;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e009      	b.n	8001f42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	60ba      	str	r2, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbf1      	blt.n	8001f2e <_write+0x12>
  }
  return len;
 8001f4a:	687b      	ldr	r3, [r7, #4]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_close>:

int _close(int file)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_isatty>:

int _isatty(int file)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f00b fa2c 	bl	800d448 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200c0000 	.word	0x200c0000
 800201c:	00000400 	.word	0x00000400
 8002020:	2000c6d4 	.word	0x2000c6d4
 8002024:	2000cca8 	.word	0x2000cca8

08002028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800202c:	4b18      	ldr	r3, [pc, #96]	@ (8002090 <SystemInit+0x68>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	4a17      	ldr	r2, [pc, #92]	@ (8002090 <SystemInit+0x68>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <SystemInit+0x6c>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <SystemInit+0x6c>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <SystemInit+0x6c>)
 800204a:	2200      	movs	r2, #0
 800204c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <SystemInit+0x6c>)
 8002050:	2200      	movs	r2, #0
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <SystemInit+0x6c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0e      	ldr	r2, [pc, #56]	@ (8002094 <SystemInit+0x6c>)
 800205a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800205e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002062:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <SystemInit+0x6c>)
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <SystemInit+0x6c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <SystemInit+0x6c>)
 8002070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <SystemInit+0x6c>)
 8002078:	2200      	movs	r2, #0
 800207a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <SystemInit+0x68>)
 800207e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002082:	609a      	str	r2, [r3, #8]
  #endif
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	46020c00 	.word	0x46020c00

08002098 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800209c:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 800209e:	4a23      	ldr	r2, [pc, #140]	@ (800212c <MX_USART1_UART_Init+0x94>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80020a2:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020a4:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <MX_USART1_UART_Init+0x98>)
 80020a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020bc:	220c      	movs	r2, #12
 80020be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d8:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020de:	4812      	ldr	r0, [pc, #72]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020e0:	f008 f968 	bl	800a3b4 <HAL_UART_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80020ea:	f7ff fc4f 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ee:	2100      	movs	r1, #0
 80020f0:	480d      	ldr	r0, [pc, #52]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 80020f2:	f008 fe47 	bl	800ad84 <HAL_UARTEx_SetTxFifoThreshold>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80020fc:	f7ff fc46 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002100:	2100      	movs	r1, #0
 8002102:	4809      	ldr	r0, [pc, #36]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 8002104:	f008 fe7c 	bl	800ae00 <HAL_UARTEx_SetRxFifoThreshold>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800210e:	f7ff fc3d 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002112:	4805      	ldr	r0, [pc, #20]	@ (8002128 <MX_USART1_UART_Init+0x90>)
 8002114:	f008 fdfd 	bl	800ad12 <HAL_UARTEx_DisableFifoMode>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800211e:	f7ff fc35 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000c6d8 	.word	0x2000c6d8
 800212c:	40013800 	.word	0x40013800
 8002130:	001e8480 	.word	0x001e8480

08002134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0ba      	sub	sp, #232	@ 0xe8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	22c0      	movs	r2, #192	@ 0xc0
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f00b f924 	bl	800d3a2 <memset>
  if(uartHandle->Instance==USART1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a26      	ldr	r2, [pc, #152]	@ (80021f8 <HAL_UART_MspInit+0xc4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d145      	bne.n	80021f0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002164:	f04f 0201 	mov.w	r2, #1
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002170:	2300      	movs	r3, #0
 8002172:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	4618      	mov	r0, r3
 800217a:	f004 f939 	bl	80063f0 <HAL_RCCEx_PeriphCLKConfig>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002184:	f7ff fc02 	bl	800198c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002188:	4b1c      	ldr	r3, [pc, #112]	@ (80021fc <HAL_UART_MspInit+0xc8>)
 800218a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800218e:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_UART_MspInit+0xc8>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002194:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002198:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <HAL_UART_MspInit+0xc8>)
 800219a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800219e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <HAL_UART_MspInit+0xc8>)
 80021a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ac:	4a13      	ldr	r2, [pc, #76]	@ (80021fc <HAL_UART_MspInit+0xc8>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_UART_MspInit+0xc8>)
 80021b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021de:	2307      	movs	r3, #7
 80021e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <HAL_UART_MspInit+0xcc>)
 80021ec:	f002 fa5c 	bl	80046a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021f0:	bf00      	nop
 80021f2:	37e8      	adds	r7, #232	@ 0xe8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40013800 	.word	0x40013800
 80021fc:	46020c00 	.word	0x46020c00
 8002200:	42020000 	.word	0x42020000

08002204 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 800220a:	4a10      	ldr	r2, [pc, #64]	@ (800224c <MX_USB_OTG_FS_HCD_Init+0x48>)
 800220c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800220e:	4b0e      	ldr	r3, [pc, #56]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002210:	220c      	movs	r2, #12
 8002212:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002216:	2201      	movs	r2, #1
 8002218:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800221a:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 800221c:	2200      	movs	r2, #0
 800221e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8002220:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002222:	2202      	movs	r2, #2
 8002224:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002226:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002228:	2200      	movs	r2, #0
 800222a:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 800222e:	2200      	movs	r2, #0
 8002230:	739a      	strb	r2, [r3, #14]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002232:	4805      	ldr	r0, [pc, #20]	@ (8002248 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8002234:	f002 fc42 	bl	8004abc <HAL_HCD_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_USB_OTG_FS_HCD_Init+0x3e>
  {
    Error_Handler();
 800223e:	f7ff fba5 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000c76c 	.word	0x2000c76c
 800224c:	42040000 	.word	0x42040000

08002250 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0bc      	sub	sp, #240	@ 0xf0
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002268:	f107 0318 	add.w	r3, r7, #24
 800226c:	22c0      	movs	r2, #192	@ 0xc0
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f00b f896 	bl	800d3a2 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a38      	ldr	r2, [pc, #224]	@ (800235c <HAL_HCD_MspInit+0x10c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d169      	bne.n	8002354 <HAL_HCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002280:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002292:	f107 0318 	add.w	r3, r7, #24
 8002296:	4618      	mov	r0, r3
 8002298:	f004 f8aa 	bl	80063f0 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 80022a2:	f7ff fb73 	bl	800198c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 80022a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 80022b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80022c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80022de:	230a      	movs	r3, #10
 80022e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022e8:	4619      	mov	r1, r3
 80022ea:	481e      	ldr	r0, [pc, #120]	@ (8002364 <HAL_HCD_MspInit+0x114>)
 80022ec:	f002 f9dc 	bl	80046a8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 80022f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 8002302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 8002310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d119      	bne.n	8002350 <HAL_HCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002322:	4a0f      	ldr	r2, [pc, #60]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800233a:	f002 fd35 	bl	8004da8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002344:	4a06      	ldr	r2, [pc, #24]	@ (8002360 <HAL_HCD_MspInit+0x110>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800234e:	e001      	b.n	8002354 <HAL_HCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8002350:	f002 fd2a 	bl	8004da8 <HAL_PWREx_EnableVddUSB>
}
 8002354:	bf00      	nop
 8002356:	37f0      	adds	r7, #240	@ 0xf0
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	42040000 	.word	0x42040000
 8002360:	46020c00 	.word	0x46020c00
 8002364:	42020000 	.word	0x42020000

08002368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023a0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800236c:	f7ff fe5c 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002370:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002372:	e003      	b.n	800237c <LoopCopyDataInit>

08002374 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002376:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002378:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800237a:	3104      	adds	r1, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800237c:	480a      	ldr	r0, [pc, #40]	@ (80023a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800237e:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8002380:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002382:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002384:	d3f6      	bcc.n	8002374 <CopyDataInit>
	ldr	r2, =_sbss
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002388:	e002      	b.n	8002390 <LoopFillZerobss>

0800238a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800238a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800238c:	f842 3b04 	str.w	r3, [r2], #4

08002390 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <LoopForever+0x16>)
	cmp	r2, r3
 8002392:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002394:	d3f9      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002396:	f00b f85d 	bl	800d454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800239a:	f7fe ffdd 	bl	8001358 <main>

0800239e <LoopForever>:

LoopForever:
    b LoopForever
 800239e:	e7fe      	b.n	800239e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80023a0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80023a4:	0802e89c 	.word	0x0802e89c
	ldr	r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023ac:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 80023b0:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 80023b4:	2000cca8 	.word	0x2000cca8

080023b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC1_IRQHandler>
	...

080023bc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08e      	sub	sp, #56	@ 0x38
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d009      	beq.n	80023e8 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <BSP_LED_Init+0x2c>
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d003      	beq.n	80023e8 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023e0:	f06f 0301 	mvn.w	r3, #1
 80023e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023e6:	e06e      	b.n	80024c6 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10f      	bne.n	800240e <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80023ee:	4b38      	ldr	r3, [pc, #224]	@ (80024d0 <BSP_LED_Init+0x114>)
 80023f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f4:	4a36      	ldr	r2, [pc, #216]	@ (80024d0 <BSP_LED_Init+0x114>)
 80023f6:	f043 0302 	orr.w	r3, r3, #2
 80023fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	e046      	b.n	800249c <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10f      	bne.n	8002434 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8002414:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800241a:	4a2d      	ldr	r2, [pc, #180]	@ (80024d0 <BSP_LED_Init+0x114>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	e033      	b.n	800249c <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002434:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d110      	bne.n	8002464 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002448:	4a21      	ldr	r2, [pc, #132]	@ (80024d0 <BSP_LED_Init+0x114>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002452:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8002460:	2301      	movs	r3, #1
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8002464:	f002 fcb0 	bl	8004dc8 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002470:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002474:	4a16      	ldr	r2, [pc, #88]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002476:	f023 0304 	bic.w	r3, r3, #4
 800247a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 800247e:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002484:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800248a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <BSP_LED_Init+0x114>)
 8002490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4a0d      	ldr	r2, [pc, #52]	@ (80024d4 <BSP_LED_Init+0x118>)
 80024a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024a4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	4a08      	ldr	r2, [pc, #32]	@ (80024d8 <BSP_LED_Init+0x11c>)
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	f107 021c 	add.w	r2, r7, #28
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 f8f1 	bl	80046a8 <HAL_GPIO_Init>
  }

  return ret;
 80024c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3738      	adds	r7, #56	@ 0x38
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	46020c00 	.word	0x46020c00
 80024d4:	08010f48 	.word	0x08010f48
 80024d8:	20000004 	.word	0x20000004

080024dc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	460a      	mov	r2, r1
 80024e6:	71fb      	strb	r3, [r7, #7]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80024ec:	4b30      	ldr	r3, [pc, #192]	@ (80025b0 <BSP_PB_Init+0xd4>)
 80024ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f2:	4a2f      	ldr	r2, [pc, #188]	@ (80025b0 <BSP_PB_Init+0xd4>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024fc:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <BSP_PB_Init+0xd4>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800250a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800250e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002510:	2302      	movs	r3, #2
 8002512:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002514:	2302      	movs	r3, #2
 8002516:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <BSP_PB_Init+0xd8>)
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	f107 020c 	add.w	r2, r7, #12
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f002 f8b9 	bl	80046a8 <HAL_GPIO_Init>
 8002536:	e036      	b.n	80025a6 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002538:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <BSP_PB_Init+0xdc>)
 800253a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <BSP_PB_Init+0xd8>)
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	f107 020c 	add.w	r2, r7, #12
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f002 f8ac 	bl	80046a8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002550:	79fa      	ldrb	r2, [r7, #7]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4a18      	ldr	r2, [pc, #96]	@ (80025bc <BSP_PB_Init+0xe0>)
 800255c:	441a      	add	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4917      	ldr	r1, [pc, #92]	@ (80025c0 <BSP_PB_Init+0xe4>)
 8002562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002566:	4619      	mov	r1, r3
 8002568:	4610      	mov	r0, r2
 800256a:	f002 f840 	bl	80045ee <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800256e:	79fa      	ldrb	r2, [r7, #7]
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a10      	ldr	r2, [pc, #64]	@ (80025bc <BSP_PB_Init+0xe0>)
 800257a:	1898      	adds	r0, r3, r2
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <BSP_PB_Init+0xe8>)
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	461a      	mov	r2, r3
 8002586:	2100      	movs	r1, #0
 8002588:	f002 f805 	bl	8004596 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800258c:	2018      	movs	r0, #24
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <BSP_PB_Init+0xec>)
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	2200      	movs	r2, #0
 8002598:	4619      	mov	r1, r3
 800259a:	f000 fd33 	bl	8003004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800259e:	2318      	movs	r3, #24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fd49 	bl	8003038 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	46020c00 	.word	0x46020c00
 80025b4:	20000010 	.word	0x20000010
 80025b8:	10110000 	.word	0x10110000
 80025bc:	2000cb4c 	.word	0x2000cb4c
 80025c0:	08010f50 	.word	0x08010f50
 80025c4:	20000014 	.word	0x20000014
 80025c8:	20000018 	.word	0x20000018

080025cc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <BSP_PB_IRQHandler+0x28>)
 80025e2:	4413      	add	r3, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 f817 	bl	8004618 <HAL_EXTI_IRQHandler>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000cb4c 	.word	0x2000cb4c

080025f8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002612:	2000      	movs	r0, #0
 8002614:	f7ff fff0 	bl	80025f8 <BSP_PB_Callback>
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_Init+0x50>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a11      	ldr	r2, [pc, #68]	@ (800266c <HAL_Init+0x50>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262c:	2003      	movs	r0, #3
 800262e:	f000 fcde 	bl	8002fee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002632:	f003 fcc7 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_Init+0x54>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	490c      	ldr	r1, [pc, #48]	@ (8002674 <HAL_Init+0x58>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	4a0b      	ldr	r2, [pc, #44]	@ (8002678 <HAL_Init+0x5c>)
 800264a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800264c:	2004      	movs	r0, #4
 800264e:	f000 fd01 	bl	8003054 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff fb52 	bl	8001cfc <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e002      	b.n	8002668 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002662:	f7ff fb2b 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40022000 	.word	0x40022000
 8002670:	46020c00 	.word	0x46020c00
 8002674:	08010ef0 	.word	0x08010ef0
 8002678:	20000000 	.word	0x20000000

0800267c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_IncTick+0x20>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_IncTick+0x24>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <HAL_IncTick+0x24>)
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000020 	.word	0x20000020
 80026a0:	2000cb58 	.word	0x2000cb58

080026a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return uwTick;
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <HAL_GetTick+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	2000cb58 	.word	0x2000cb58

080026bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff ffee 	bl	80026a4 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d005      	beq.n	80026e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_Delay+0x44>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e2:	bf00      	nop
 80026e4:	f7ff ffde 	bl	80026a4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8f7      	bhi.n	80026e4 <HAL_Delay+0x28>
  {
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000020 	.word	0x20000020

08002704 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <LL_ADC_SetResolution+0x3c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d104      	bne.n	800274c <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3b01      	subs	r3, #1
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f023 020c 	bic.w	r2, r3, #12
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	46021000 	.word	0x46021000

0800276c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800277e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	2a00      	cmp	r2, #0
 8002796:	d002      	beq.n	800279e <LL_ADC_SetGainCompensation+0x32>
 8002798:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800279c:	e000      	b.n	80027a0 <LL_ADC_SetGainCompensation+0x34>
 800279e:	2200      	movs	r2, #0
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2107      	movs	r1, #7
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	431a      	orrs	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002800:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6093      	str	r3, [r2, #8]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002828:	d101      	bne.n	800282e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800284c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002850:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002878:	d101      	bne.n	800287e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <LL_ADC_IsEnabled+0x18>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <LL_ADC_IsEnabled+0x1a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d101      	bne.n	80028ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d101      	bne.n	80028f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e2b3      	b.n	8002e88 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a8b      	ldr	r2, [pc, #556]	@ (8002b5c <HAL_ADC_Init+0x25c>)
 800292e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7fe fbe1 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff5f 	bl	8002814 <LL_ADC_IsDeepPowerDownEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff45 	bl	80027f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff7a 	bl	8002864 <LL_ADC_IsInternalRegulatorEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff5e 	bl	800283c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002980:	4b77      	ldr	r3, [pc, #476]	@ (8002b60 <HAL_ADC_Init+0x260>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	4a77      	ldr	r2, [pc, #476]	@ (8002b64 <HAL_ADC_Init+0x264>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002994:	e002      	b.n	800299c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3b01      	subs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f9      	bne.n	8002996 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff5c 	bl	8002864 <LL_ADC_IsInternalRegulatorEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff6c 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 80029da:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 8244 	bne.w	8002e72 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 8240 	bne.w	8002e72 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029f6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029fa:	f043 0202 	orr.w	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ff40 	bl	800288c <LL_ADC_IsEnabled>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d140      	bne.n	8002a94 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a51      	ldr	r2, [pc, #324]	@ (8002b5c <HAL_ADC_Init+0x25c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d028      	beq.n	8002a6e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a51      	ldr	r2, [pc, #324]	@ (8002b68 <HAL_ADC_Init+0x268>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d109      	bne.n	8002a3a <HAL_ADC_Init+0x13a>
 8002a26:	4850      	ldr	r0, [pc, #320]	@ (8002b68 <HAL_ADC_Init+0x268>)
 8002a28:	f7ff ff30 	bl	800288c <LL_ADC_IsEnabled>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	e008      	b.n	8002a4c <HAL_ADC_Init+0x14c>
 8002a3a:	4848      	ldr	r0, [pc, #288]	@ (8002b5c <HAL_ADC_Init+0x25c>)
 8002a3c:	f7ff ff26 	bl	800288c <LL_ADC_IsEnabled>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	bf0c      	ite	eq
 8002a46:	2301      	moveq	r3, #1
 8002a48:	2300      	movne	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d021      	beq.n	8002a94 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a44      	ldr	r2, [pc, #272]	@ (8002b68 <HAL_ADC_Init+0x268>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_Init+0x15e>
 8002a5a:	4a44      	ldr	r2, [pc, #272]	@ (8002b6c <HAL_ADC_Init+0x26c>)
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_Init+0x160>
 8002a5e:	4a44      	ldr	r2, [pc, #272]	@ (8002b70 <HAL_ADC_Init+0x270>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f7ff fe4c 	bl	8002704 <LL_ADC_SetCommonClock>
 8002a6c:	e012      	b.n	8002a94 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7ff fe57 	bl	800272c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b70 <HAL_ADC_Init+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002a8e:	4938      	ldr	r1, [pc, #224]	@ (8002b70 <HAL_ADC_Init+0x270>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a30      	ldr	r2, [pc, #192]	@ (8002b5c <HAL_ADC_Init+0x25c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d010      	beq.n	8002ac0 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aa4:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002aaa:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002ab0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ab8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002aba:	4313      	orrs	r3, r2
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	e030      	b.n	8002b22 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7f1b      	ldrb	r3, [r3, #28]
 8002ac4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002acc:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ace:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_ADC_Init+0x1de>
 8002ad8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002adc:	e000      	b.n	8002ae0 <HAL_ADC_Init+0x1e0>
 8002ade:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ae0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002ae6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da04      	bge.n	8002afa <HAL_ADC_Init+0x1fa>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002af8:	e001      	b.n	8002afe <HAL_ADC_Init+0x1fe>
 8002afa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002afe:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4918      	ldr	r1, [pc, #96]	@ (8002b68 <HAL_ADC_Init+0x268>)
 8002b06:	428b      	cmp	r3, r1
 8002b08:	d103      	bne.n	8002b12 <HAL_ADC_Init+0x212>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_Init+0x21a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b18:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002b1a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b1c:	6a3a      	ldr	r2, [r7, #32]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d12f      	bne.n	8002b8c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <HAL_ADC_Init+0x25c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	045b      	lsls	r3, r3, #17
 8002b3e:	6a3a      	ldr	r2, [r7, #32]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	e022      	b.n	8002b8c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d111      	bne.n	8002b74 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	e018      	b.n	8002b8c <HAL_ADC_Init+0x28c>
 8002b5a:	bf00      	nop
 8002b5c:	46021000 	.word	0x46021000
 8002b60:	20000000 	.word	0x20000000
 8002b64:	053e2d63 	.word	0x053e2d63
 8002b68:	42028000 	.word	0x42028000
 8002b6c:	42028308 	.word	0x42028308
 8002b70:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a92      	ldr	r2, [pc, #584]	@ (8002ddc <HAL_ADC_Init+0x4dc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d018      	beq.n	8002bc8 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002baa:	4313      	orrs	r3, r2
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b89      	ldr	r3, [pc, #548]	@ (8002de0 <HAL_ADC_Init+0x4e0>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	60d3      	str	r3, [r2, #12]
 8002bc6:	e031      	b.n	8002c2c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d009      	beq.n	8002be4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	6a3a      	ldr	r2, [r7, #32]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	4b7e      	ldr	r3, [pc, #504]	@ (8002de4 <HAL_ADC_Init+0x4e4>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	6a39      	ldr	r1, [r7, #32]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6a      	ldr	r2, [pc, #424]	@ (8002ddc <HAL_ADC_Init+0x4dc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f000 8093 	beq.w	8002d5e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fe38 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 8002c42:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fe45 	bl	80028d8 <LL_ADC_INJ_IsConversionOngoing>
 8002c4e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d161      	bne.n	8002d1a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d15e      	bne.n	8002d1a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7f1b      	ldrb	r3, [r3, #28]
 8002c60:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4960      	ldr	r1, [pc, #384]	@ (8002de8 <HAL_ADC_Init+0x4e8>)
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	d102      	bne.n	8002c72 <HAL_ADC_Init+0x372>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_Init+0x378>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c76:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6812      	ldr	r2, [r2, #0]
 8002c8e:	6a39      	ldr	r1, [r7, #32]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f7ff fd60 	bl	800276c <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d11e      	bne.n	8002cf4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cba:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <HAL_ADC_Init+0x4ec>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002cca:	0411      	lsls	r1, r2, #16
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ce2:	0892      	lsrs	r2, r2, #2
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0201 	orr.w	r2, r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	e007      	b.n	8002d04 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10c      	bne.n	8002d3c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	f023 010f 	bic.w	r1, r3, #15
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d3a:	e007      	b.n	8002d4c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 020f 	bic.w	r2, r2, #15
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d50:	f023 0303 	bic.w	r3, r3, #3
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002d5c:	e092      	b.n	8002e84 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d111      	bne.n	8002d8c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002d70:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002d76:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002d7c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <HAL_ADC_Init+0x4f0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	69f9      	ldr	r1, [r7, #28]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da8:	461a      	mov	r2, r3
 8002daa:	2100      	movs	r1, #0
 8002dac:	f7ff fd01 	bl	80027b2 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db8:	461a      	mov	r2, r3
 8002dba:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002dbe:	f7ff fcf8 	bl	80027b2 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d114      	bne.n	8002df4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f062 020f 	orn	r2, r2, #15
 8002dd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dda:	e024      	b.n	8002e26 <HAL_ADC_Init+0x526>
 8002ddc:	46021000 	.word	0x46021000
 8002de0:	fff0c013 	.word	0xfff0c013
 8002de4:	ffde800d 	.word	0xffde800d
 8002de8:	42028000 	.word	0x42028000
 8002dec:	fc00f81e 	.word	0xfc00f81e
 8002df0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dfc:	d113      	bne.n	8002e26 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f003 031c 	and.w	r3, r3, #28
 8002e10:	f06f 020f 	mvn.w	r2, #15
 8002e14:	fa02 f103 	lsl.w	r1, r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <HAL_ADC_Init+0x590>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d10b      	bne.n	8002e4e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e40:	f023 0303 	bic.w	r3, r3, #3
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e4c:	e01a      	b.n	8002e84 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e52:	f023 0312 	bic.w	r3, r3, #18
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e70:	e008      	b.n	8002e84 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3728      	adds	r7, #40	@ 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	833ffff3 	.word	0x833ffff3

08002e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	@ (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	@ (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	@ (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
         );
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ff4c 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003012:	f7ff ff63 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003016:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	6978      	ldr	r0, [r7, #20]
 800301e:	f7ff ffb3 	bl	8002f88 <NVIC_EncodePriority>
 8003022:	4602      	mov	r2, r0
 8003024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff82 	bl	8002f34 <__NVIC_SetPriority>
}
 8003030:	bf00      	nop
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff56 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d844      	bhi.n	80030ec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003062:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	0800308b 	.word	0x0800308b
 800306c:	080030a9 	.word	0x080030a9
 8003070:	080030cb 	.word	0x080030cb
 8003074:	080030ed 	.word	0x080030ed
 8003078:	0800307d 	.word	0x0800307d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800307c:	4b1f      	ldr	r3, [pc, #124]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1e      	ldr	r2, [pc, #120]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	6013      	str	r3, [r2, #0]
      break;
 8003088:	e031      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800308a:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1b      	ldr	r2, [pc, #108]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003096:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800309c:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800309e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80030a6:	e022      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030a8:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030ae:	f023 0304 	bic.w	r3, r3, #4
 80030b2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80030b4:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030be:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80030c8:	e011      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030ca:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80030d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030dc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030e0:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80030ea:	e000      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80030ec:	bf00      	nop
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010
 8003100:	46020c00 	.word	0x46020c00

08003104 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e04f      	b.n	80031bc <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_DMA_Start_IT+0x26>
 8003126:	2302      	movs	r3, #2
 8003128:	e048      	b.n	80031bc <HAL_DMA_Start_IT+0xb8>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d136      	bne.n	80031ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fa78 	bl	8003648 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003166:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003196:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e007      	b.n	80031bc <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80031cc:	f7ff fa6a 	bl	80026a4 <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e06b      	b.n	80032b4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d008      	beq.n	80031fa <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e05c      	b.n	80032b4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0204 	orr.w	r2, r2, #4
 8003208:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003212:	e020      	b.n	8003256 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003214:	f7ff fa46 	bl	80026a4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b05      	cmp	r3, #5
 8003220:	d919      	bls.n	8003256 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2203      	movs	r2, #3
 8003232:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800323a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	2201      	movs	r2, #1
 8003248:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e02e      	b.n	80032b4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0d7      	beq.n	8003214 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0202 	orr.w	r2, r2, #2
 8003272:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2204      	movs	r2, #4
 8003278:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003284:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329e:	2201      	movs	r2, #1
 80032a0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e019      	b.n	8003302 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d004      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e00e      	b.n	8003302 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2204      	movs	r2, #4
 80032e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800331e:	f023 030f 	bic.w	r3, r3, #15
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	3b50      	subs	r3, #80	@ 0x50
 800332e:	09db      	lsrs	r3, r3, #7
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2201      	movs	r2, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 813b 	beq.w	80035c4 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d011      	beq.n	8003380 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003372:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338a:	2b00      	cmp	r3, #0
 800338c:	d011      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033a4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f043 0202 	orr.w	r2, r3, #2
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d011      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033d6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	f043 0204 	orr.w	r2, r3, #4
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d011      	beq.n	8003416 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003408:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	f043 0208 	orr.w	r2, r3, #8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800343a:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d04c      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d045      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003470:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b04      	cmp	r3, #4
 800347c:	d12e      	bne.n	80034dc <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800348c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0202 	orr.w	r2, r2, #2
 800349c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b6:	2201      	movs	r2, #1
 80034b8:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d07a      	beq.n	80035c8 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
        }

        return;
 80034da:	e075      	b.n	80035c8 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2205      	movs	r2, #5
 80034e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d039      	beq.n	8003576 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d032      	beq.n	8003576 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353c:	2201      	movs	r2, #1
 800353e:	731a      	strb	r2, [r3, #12]
 8003540:	e008      	b.n	8003554 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800355c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357a:	2b00      	cmp	r3, #0
 800357c:	d025      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0202 	orr.w	r2, r2, #2
 800358c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a6:	2201      	movs	r2, #1
 80035a8:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
 80035c2:	e002      	b.n	80035ca <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <HAL_DMA_IRQHandler+0x2bc>
        return;
 80035c8:	bf00      	nop
    }
  }
}
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e02b      	b.n	800363c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80035ec:	f023 030f 	bic.w	r3, r3, #15
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fa:	3b50      	subs	r3, #80	@ 0x50
 80035fc:	09db      	lsrs	r3, r3, #7
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2201      	movs	r2, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b00      	cmp	r3, #0
 8003612:	d012      	beq.n	800363a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f003 0311 	and.w	r3, r3, #17
 800361a:	2b11      	cmp	r3, #17
 800361c:	d106      	bne.n	800362c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e006      	b.n	800363a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	43db      	mvns	r3, r3
 8003634:	401a      	ands	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365c:	0c1b      	lsrs	r3, r3, #16
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b291      	uxth	r1, r2
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	430b      	orrs	r3, r1
 800366a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003674:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff f802 	bl	80026a4 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0db      	b.n	8003864 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6e      	ldr	r2, [pc, #440]	@ (800386c <HAL_DMAEx_List_Init+0x1d8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f000 809f 	beq.w	80037f6 <HAL_DMAEx_List_Init+0x162>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003870 <HAL_DMAEx_List_Init+0x1dc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	f000 8099 	beq.w	80037f6 <HAL_DMAEx_List_Init+0x162>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003874 <HAL_DMAEx_List_Init+0x1e0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f000 8093 	beq.w	80037f6 <HAL_DMAEx_List_Init+0x162>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a68      	ldr	r2, [pc, #416]	@ (8003878 <HAL_DMAEx_List_Init+0x1e4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f000 808d 	beq.w	80037f6 <HAL_DMAEx_List_Init+0x162>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a66      	ldr	r2, [pc, #408]	@ (800387c <HAL_DMAEx_List_Init+0x1e8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f000 8087 	beq.w	80037f6 <HAL_DMAEx_List_Init+0x162>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a64      	ldr	r2, [pc, #400]	@ (8003880 <HAL_DMAEx_List_Init+0x1ec>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	f000 8081 	beq.w	80037f6 <HAL_DMAEx_List_Init+0x162>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a62      	ldr	r2, [pc, #392]	@ (8003884 <HAL_DMAEx_List_Init+0x1f0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d07b      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a61      	ldr	r2, [pc, #388]	@ (8003888 <HAL_DMAEx_List_Init+0x1f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d076      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a5f      	ldr	r2, [pc, #380]	@ (800388c <HAL_DMAEx_List_Init+0x1f8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d071      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5e      	ldr	r2, [pc, #376]	@ (8003890 <HAL_DMAEx_List_Init+0x1fc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d06c      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5c      	ldr	r2, [pc, #368]	@ (8003894 <HAL_DMAEx_List_Init+0x200>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d067      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5b      	ldr	r2, [pc, #364]	@ (8003898 <HAL_DMAEx_List_Init+0x204>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d062      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a59      	ldr	r2, [pc, #356]	@ (800389c <HAL_DMAEx_List_Init+0x208>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d05d      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a58      	ldr	r2, [pc, #352]	@ (80038a0 <HAL_DMAEx_List_Init+0x20c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d058      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a56      	ldr	r2, [pc, #344]	@ (80038a4 <HAL_DMAEx_List_Init+0x210>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d053      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a55      	ldr	r2, [pc, #340]	@ (80038a8 <HAL_DMAEx_List_Init+0x214>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d04e      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a53      	ldr	r2, [pc, #332]	@ (80038ac <HAL_DMAEx_List_Init+0x218>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d049      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a52      	ldr	r2, [pc, #328]	@ (80038b0 <HAL_DMAEx_List_Init+0x21c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d044      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a50      	ldr	r2, [pc, #320]	@ (80038b4 <HAL_DMAEx_List_Init+0x220>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d03f      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a4f      	ldr	r2, [pc, #316]	@ (80038b8 <HAL_DMAEx_List_Init+0x224>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d03a      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a4d      	ldr	r2, [pc, #308]	@ (80038bc <HAL_DMAEx_List_Init+0x228>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d035      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4c      	ldr	r2, [pc, #304]	@ (80038c0 <HAL_DMAEx_List_Init+0x22c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d030      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a4a      	ldr	r2, [pc, #296]	@ (80038c4 <HAL_DMAEx_List_Init+0x230>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d02b      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a49      	ldr	r2, [pc, #292]	@ (80038c8 <HAL_DMAEx_List_Init+0x234>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d026      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a47      	ldr	r2, [pc, #284]	@ (80038cc <HAL_DMAEx_List_Init+0x238>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d021      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a46      	ldr	r2, [pc, #280]	@ (80038d0 <HAL_DMAEx_List_Init+0x23c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d01c      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a44      	ldr	r2, [pc, #272]	@ (80038d4 <HAL_DMAEx_List_Init+0x240>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d017      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a43      	ldr	r2, [pc, #268]	@ (80038d8 <HAL_DMAEx_List_Init+0x244>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d012      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a41      	ldr	r2, [pc, #260]	@ (80038dc <HAL_DMAEx_List_Init+0x248>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a40      	ldr	r2, [pc, #256]	@ (80038e0 <HAL_DMAEx_List_Init+0x24c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d008      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3e      	ldr	r2, [pc, #248]	@ (80038e4 <HAL_DMAEx_List_Init+0x250>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <HAL_DMAEx_List_Init+0x162>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a3d      	ldr	r2, [pc, #244]	@ (80038e8 <HAL_DMAEx_List_Init+0x254>)
 80037f4:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0206 	orr.w	r2, r2, #6
 8003814:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003816:	e00f      	b.n	8003838 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003818:	f7fe ff44 	bl	80026a4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b05      	cmp	r3, #5
 8003824:	d908      	bls.n	8003838 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2210      	movs	r2, #16
 800382a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2203      	movs	r2, #3
 8003830:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e015      	b.n	8003864 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e8      	bne.n	8003818 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 faba 	bl	8003dc0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40020050 	.word	0x40020050
 8003870:	50020050 	.word	0x50020050
 8003874:	400200d0 	.word	0x400200d0
 8003878:	500200d0 	.word	0x500200d0
 800387c:	40020150 	.word	0x40020150
 8003880:	50020150 	.word	0x50020150
 8003884:	400201d0 	.word	0x400201d0
 8003888:	500201d0 	.word	0x500201d0
 800388c:	40020250 	.word	0x40020250
 8003890:	50020250 	.word	0x50020250
 8003894:	400202d0 	.word	0x400202d0
 8003898:	500202d0 	.word	0x500202d0
 800389c:	40020350 	.word	0x40020350
 80038a0:	50020350 	.word	0x50020350
 80038a4:	400203d0 	.word	0x400203d0
 80038a8:	500203d0 	.word	0x500203d0
 80038ac:	40020450 	.word	0x40020450
 80038b0:	50020450 	.word	0x50020450
 80038b4:	400204d0 	.word	0x400204d0
 80038b8:	500204d0 	.word	0x500204d0
 80038bc:	40020550 	.word	0x40020550
 80038c0:	50020550 	.word	0x50020550
 80038c4:	400205d0 	.word	0x400205d0
 80038c8:	500205d0 	.word	0x500205d0
 80038cc:	40020650 	.word	0x40020650
 80038d0:	50020650 	.word	0x50020650
 80038d4:	400206d0 	.word	0x400206d0
 80038d8:	500206d0 	.word	0x500206d0
 80038dc:	40020750 	.word	0x40020750
 80038e0:	50020750 	.word	0x50020750
 80038e4:	400207d0 	.word	0x400207d0
 80038e8:	500207d0 	.word	0x500207d0

080038ec <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_DMAEx_List_Start_IT+0x16>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e082      	b.n	8003a0c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800390c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003918:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d005      	beq.n	800392c <HAL_DMAEx_List_Start_IT+0x40>
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d16a      	bne.n	80039fc <HAL_DMAEx_List_Start_IT+0x110>
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d067      	beq.n	80039fc <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d157      	bne.n	80039e8 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_DMAEx_List_Start_IT+0x5a>
 8003942:	2302      	movs	r3, #2
 8003944:	e062      	b.n	8003a0c <HAL_DMAEx_List_Start_IT+0x120>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395a:	2202      	movs	r2, #2
 800395c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003968:	2200      	movs	r2, #0
 800396a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800397a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003992:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039aa:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f107 010c 	add.w	r1, r7, #12
 80039b6:	2200      	movs	r2, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fd1d 	bl	80043f8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4619      	mov	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	0c0b      	lsrs	r3, r1, #16
 80039cc:	041b      	lsls	r3, r3, #16
 80039ce:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80039dc:	4013      	ands	r3, r2
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e007      	b.n	8003a0c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2240      	movs	r2, #64	@ 0x40
 8003a00:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_DMAEx_List_BuildNode+0x16>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e004      	b.n	8003a38 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003a2e:	6839      	ldr	r1, [r7, #0]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb1d 	bl	8004070 <DMA_List_BuildNode>

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	@ 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_DMAEx_List_InsertNode+0x18>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b6      	b.n	8003bca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d104      	bne.n	8003a6e <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2204      	movs	r2, #4
 8003a68:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e0ad      	b.n	8003bca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fc52 	bl	8004320 <DMA_List_CheckNodesBaseAddresses>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2205      	movs	r2, #5
 8003a86:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e09e      	b.n	8003bca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fc73 	bl	8004380 <DMA_List_CheckNodesTypes>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e08f      	b.n	8003bca <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2202      	movs	r2, #2
 8003aae:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003ab6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003aba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fc99 	bl	80043f8 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11a      	bne.n	8003b04 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	e06c      	b.n	8003bbc <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003aee:	4013      	ands	r3, r2
 8003af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003af4:	4319      	orrs	r1, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2202      	movs	r2, #2
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	e05b      	b.n	8003bbc <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b14:	4013      	ands	r3, r2
 8003b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b1a:	4319      	orrs	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e043      	b.n	8003bb2 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8003b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8003b2e:	f107 0314 	add.w	r3, r7, #20
 8003b32:	461a      	mov	r2, r3
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fc8e 	bl	8004458 <DMA_List_FindNode>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d132      	bne.n	8003ba8 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d11a      	bne.n	8003b82 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b5e:	4013      	ands	r3, r2
 8003b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b64:	4319      	orrs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b72:	4013      	ands	r3, r2
 8003b74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b78:	4319      	orrs	r1, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b80:	e017      	b.n	8003bb2 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8003b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003b98:	4013      	ands	r3, r2
 8003b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b9e:	4319      	orrs	r1, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003ba6:	e004      	b.n	8003bb2 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2206      	movs	r2, #6
 8003bac:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00b      	b.n	8003bca <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3730      	adds	r7, #48	@ 0x30
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08a      	sub	sp, #40	@ 0x28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e052      	b.n	8003c8a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e049      	b.n	8003c8a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d101      	bne.n	8003c0e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e03d      	b.n	8003c8a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2204      	movs	r2, #4
 8003c12:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e038      	b.n	8003c8a <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d104      	bne.n	8003c2a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02f      	b.n	8003c8a <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f107 0220 	add.w	r2, r7, #32
 8003c3e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fbd8 	bl	80043f8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	461a      	mov	r2, r3
 8003c52:	2100      	movs	r1, #0
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fbff 	bl	8004458 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003c64:	4013      	ands	r3, r2
 8003c66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003c6e:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003c70:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3728      	adds	r7, #40	@ 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_DMAEx_List_LinkQ+0x16>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e072      	b.n	8003d94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003cb4:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d002      	beq.n	8003cc8 <HAL_DMAEx_List_LinkQ+0x34>
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d108      	bne.n	8003cda <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2240      	movs	r2, #64	@ 0x40
 8003ccc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e05c      	b.n	8003d94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7b1b      	ldrb	r3, [r3, #12]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d104      	bne.n	8003cee <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e052      	b.n	8003d94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8003da0 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d022      	beq.n	8003d3e <HAL_DMAEx_List_LinkQ+0xaa>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a29      	ldr	r2, [pc, #164]	@ (8003da4 <HAL_DMAEx_List_LinkQ+0x110>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <HAL_DMAEx_List_LinkQ+0xaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a28      	ldr	r2, [pc, #160]	@ (8003da8 <HAL_DMAEx_List_LinkQ+0x114>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <HAL_DMAEx_List_LinkQ+0xaa>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a26      	ldr	r2, [pc, #152]	@ (8003dac <HAL_DMAEx_List_LinkQ+0x118>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_DMAEx_List_LinkQ+0xaa>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a25      	ldr	r2, [pc, #148]	@ (8003db0 <HAL_DMAEx_List_LinkQ+0x11c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_DMAEx_List_LinkQ+0xaa>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a23      	ldr	r2, [pc, #140]	@ (8003db4 <HAL_DMAEx_List_LinkQ+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_DMAEx_List_LinkQ+0xaa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a22      	ldr	r2, [pc, #136]	@ (8003db8 <HAL_DMAEx_List_LinkQ+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_DMAEx_List_LinkQ+0xaa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a20      	ldr	r2, [pc, #128]	@ (8003dbc <HAL_DMAEx_List_LinkQ+0x128>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_DMAEx_List_LinkQ+0xae>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_DMAEx_List_LinkQ+0xb0>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e019      	b.n	8003d94 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d64:	2b81      	cmp	r3, #129	@ 0x81
 8003d66:	d108      	bne.n	8003d7a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2204      	movs	r2, #4
 8003d74:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00c      	b.n	8003d94 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2204      	movs	r2, #4
 8003d86:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e003      	b.n	8003d94 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40020650 	.word	0x40020650
 8003da4:	50020650 	.word	0x50020650
 8003da8:	400206d0 	.word	0x400206d0
 8003dac:	500206d0 	.word	0x500206d0
 8003db0:	40020750 	.word	0x40020750
 8003db4:	50020750 	.word	0x50020750
 8003db8:	400207d0 	.word	0x400207d0
 8003dbc:	500207d0 	.word	0x500207d0

08003dc0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a85      	ldr	r2, [pc, #532]	@ (8003ff0 <DMA_List_Init+0x230>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	f000 80a0 	beq.w	8003f20 <DMA_List_Init+0x160>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a83      	ldr	r2, [pc, #524]	@ (8003ff4 <DMA_List_Init+0x234>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	f000 809a 	beq.w	8003f20 <DMA_List_Init+0x160>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a81      	ldr	r2, [pc, #516]	@ (8003ff8 <DMA_List_Init+0x238>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	f000 8094 	beq.w	8003f20 <DMA_List_Init+0x160>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7f      	ldr	r2, [pc, #508]	@ (8003ffc <DMA_List_Init+0x23c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	f000 808e 	beq.w	8003f20 <DMA_List_Init+0x160>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7d      	ldr	r2, [pc, #500]	@ (8004000 <DMA_List_Init+0x240>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f000 8088 	beq.w	8003f20 <DMA_List_Init+0x160>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a7b      	ldr	r2, [pc, #492]	@ (8004004 <DMA_List_Init+0x244>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	f000 8082 	beq.w	8003f20 <DMA_List_Init+0x160>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a79      	ldr	r2, [pc, #484]	@ (8004008 <DMA_List_Init+0x248>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d07c      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a78      	ldr	r2, [pc, #480]	@ (800400c <DMA_List_Init+0x24c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d077      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a76      	ldr	r2, [pc, #472]	@ (8004010 <DMA_List_Init+0x250>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d072      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a75      	ldr	r2, [pc, #468]	@ (8004014 <DMA_List_Init+0x254>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d06d      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a73      	ldr	r2, [pc, #460]	@ (8004018 <DMA_List_Init+0x258>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d068      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a72      	ldr	r2, [pc, #456]	@ (800401c <DMA_List_Init+0x25c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d063      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a70      	ldr	r2, [pc, #448]	@ (8004020 <DMA_List_Init+0x260>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d05e      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6f      	ldr	r2, [pc, #444]	@ (8004024 <DMA_List_Init+0x264>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d059      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6d      	ldr	r2, [pc, #436]	@ (8004028 <DMA_List_Init+0x268>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d054      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6c      	ldr	r2, [pc, #432]	@ (800402c <DMA_List_Init+0x26c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04f      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a6a      	ldr	r2, [pc, #424]	@ (8004030 <DMA_List_Init+0x270>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d04a      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a69      	ldr	r2, [pc, #420]	@ (8004034 <DMA_List_Init+0x274>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d045      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a67      	ldr	r2, [pc, #412]	@ (8004038 <DMA_List_Init+0x278>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d040      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a66      	ldr	r2, [pc, #408]	@ (800403c <DMA_List_Init+0x27c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d03b      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a64      	ldr	r2, [pc, #400]	@ (8004040 <DMA_List_Init+0x280>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d036      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a63      	ldr	r2, [pc, #396]	@ (8004044 <DMA_List_Init+0x284>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d031      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a61      	ldr	r2, [pc, #388]	@ (8004048 <DMA_List_Init+0x288>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02c      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a60      	ldr	r2, [pc, #384]	@ (800404c <DMA_List_Init+0x28c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d027      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8004050 <DMA_List_Init+0x290>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d022      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5d      	ldr	r2, [pc, #372]	@ (8004054 <DMA_List_Init+0x294>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d01d      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a5b      	ldr	r2, [pc, #364]	@ (8004058 <DMA_List_Init+0x298>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d018      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800405c <DMA_List_Init+0x29c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a58      	ldr	r2, [pc, #352]	@ (8004060 <DMA_List_Init+0x2a0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a57      	ldr	r2, [pc, #348]	@ (8004064 <DMA_List_Init+0x2a4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a55      	ldr	r2, [pc, #340]	@ (8004068 <DMA_List_Init+0x2a8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <DMA_List_Init+0x160>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a54      	ldr	r2, [pc, #336]	@ (800406c <DMA_List_Init+0x2ac>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <DMA_List_Init+0x164>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <DMA_List_Init+0x166>
 8003f24:	2300      	movs	r3, #0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2200      	movs	r2, #0
 8003f68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a36      	ldr	r2, [pc, #216]	@ (8004050 <DMA_List_Init+0x290>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d022      	beq.n	8003fc2 <DMA_List_Init+0x202>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a34      	ldr	r2, [pc, #208]	@ (8004054 <DMA_List_Init+0x294>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01d      	beq.n	8003fc2 <DMA_List_Init+0x202>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	@ (8004058 <DMA_List_Init+0x298>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d018      	beq.n	8003fc2 <DMA_List_Init+0x202>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a31      	ldr	r2, [pc, #196]	@ (800405c <DMA_List_Init+0x29c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <DMA_List_Init+0x202>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a30      	ldr	r2, [pc, #192]	@ (8004060 <DMA_List_Init+0x2a0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <DMA_List_Init+0x202>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8004064 <DMA_List_Init+0x2a4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <DMA_List_Init+0x202>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004068 <DMA_List_Init+0x2a8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <DMA_List_Init+0x202>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <DMA_List_Init+0x2ac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <DMA_List_Init+0x206>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <DMA_List_Init+0x208>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40020050 	.word	0x40020050
 8003ff4:	50020050 	.word	0x50020050
 8003ff8:	400200d0 	.word	0x400200d0
 8003ffc:	500200d0 	.word	0x500200d0
 8004000:	40020150 	.word	0x40020150
 8004004:	50020150 	.word	0x50020150
 8004008:	400201d0 	.word	0x400201d0
 800400c:	500201d0 	.word	0x500201d0
 8004010:	40020250 	.word	0x40020250
 8004014:	50020250 	.word	0x50020250
 8004018:	400202d0 	.word	0x400202d0
 800401c:	500202d0 	.word	0x500202d0
 8004020:	40020350 	.word	0x40020350
 8004024:	50020350 	.word	0x50020350
 8004028:	400203d0 	.word	0x400203d0
 800402c:	500203d0 	.word	0x500203d0
 8004030:	40020450 	.word	0x40020450
 8004034:	50020450 	.word	0x50020450
 8004038:	400204d0 	.word	0x400204d0
 800403c:	500204d0 	.word	0x500204d0
 8004040:	40020550 	.word	0x40020550
 8004044:	50020550 	.word	0x50020550
 8004048:	400205d0 	.word	0x400205d0
 800404c:	500205d0 	.word	0x500205d0
 8004050:	40020650 	.word	0x40020650
 8004054:	50020650 	.word	0x50020650
 8004058:	400206d0 	.word	0x400206d0
 800405c:	500206d0 	.word	0x500206d0
 8004060:	40020750 	.word	0x40020750
 8004064:	50020750 	.word	0x50020750
 8004068:	400207d0 	.word	0x400207d0
 800406c:	500207d0 	.word	0x500207d0

08004070 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004082:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8004088:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800408e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004094:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d017      	beq.n	80040d6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b2:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	3b01      	subs	r3, #1
 80040ba:	051b      	lsls	r3, r3, #20
 80040bc:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80040c0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	3b01      	subs	r3, #1
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80040ce:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80040d0:	431a      	orrs	r2, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6859      	ldr	r1, [r3, #4]
 80040de:	f240 237f 	movw	r3, #639	@ 0x27f
 80040e2:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80040e4:	431a      	orrs	r2, r3
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f2:	d10c      	bne.n	800410e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d011      	beq.n	8004124 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	e00a      	b.n	8004124 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004116:	d105      	bne.n	8004124 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00f      	beq.n	800414c <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004138:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004144:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004146:	431a      	orrs	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004150:	b29a      	uxth	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04e      	beq.n	8004200 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416a:	3b01      	subs	r3, #1
 800416c:	0419      	lsls	r1, r3, #16
 800416e:	4b6a      	ldr	r3, [pc, #424]	@ (8004318 <DMA_List_BuildNode+0x2a8>)
 8004170:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004172:	431a      	orrs	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417c:	2b00      	cmp	r3, #0
 800417e:	da06      	bge.n	800418e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	e005      	b.n	800419a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	da06      	bge.n	80041b0 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	609a      	str	r2, [r3, #8]
 80041ae:	e005      	b.n	80041bc <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	da06      	bge.n	80041d2 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e005      	b.n	80041de <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da06      	bge.n	80041f4 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	609a      	str	r2, [r3, #8]
 80041f2:	e005      	b.n	8004200 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05d      	beq.n	80042d8 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004220:	2b00      	cmp	r3, #0
 8004222:	da09      	bge.n	8004238 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004228:	425b      	negs	r3, r3
 800422a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	615a      	str	r2, [r3, #20]
 8004236:	e005      	b.n	8004244 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423c:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004248:	2b00      	cmp	r3, #0
 800424a:	da0d      	bge.n	8004268 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004250:	425b      	negs	r3, r3
 8004252:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	0419      	lsls	r1, r3, #16
 800425c:	4b2f      	ldr	r3, [pc, #188]	@ (800431c <DMA_List_BuildNode+0x2ac>)
 800425e:	400b      	ands	r3, r1
 8004260:	431a      	orrs	r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	615a      	str	r2, [r3, #20]
 8004266:	e009      	b.n	800427c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004270:	0419      	lsls	r1, r3, #16
 8004272:	4b2a      	ldr	r3, [pc, #168]	@ (800431c <DMA_List_BuildNode+0x2ac>)
 8004274:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004276:	431a      	orrs	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004280:	2b00      	cmp	r3, #0
 8004282:	da08      	bge.n	8004296 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004288:	425b      	negs	r3, r3
 800428a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	b29a      	uxth	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	619a      	str	r2, [r3, #24]
 8004294:	e004      	b.n	80042a0 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da0b      	bge.n	80042c0 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	425b      	negs	r3, r3
 80042ae:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80042b8:	431a      	orrs	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	619a      	str	r2, [r3, #24]
 80042be:	e007      	b.n	80042d0 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80042ca:	431a      	orrs	r2, r3
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	61da      	str	r2, [r3, #28]
 80042d6:	e002      	b.n	80042de <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80042fe:	e005      	b.n	800430c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	07ff0000 	.word	0x07ff0000
 800431c:	1fff0000 	.word	0x1fff0000

08004320 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4313      	orrs	r3, r2
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e00a      	b.n	8004362 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e004      	b.n	8004362 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	e00e      	b.n	80043be <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e006      	b.n	80043be <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80043d0:	2302      	movs	r3, #2
 80043d2:	e00b      	b.n	80043ec <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d001      	beq.n	80043ea <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e000      	b.n	80043ec <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4a0d      	ldr	r2, [pc, #52]	@ (8004450 <DMA_List_GetCLLRNodeInfo+0x58>)
 800441a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00f      	beq.n	8004442 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2207      	movs	r2, #7
 8004426:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004428:	e00b      	b.n	8004442 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004434:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2205      	movs	r2, #5
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	fe010000 	.word	0xfe010000
 8004454:	f8010000 	.word	0xf8010000

08004458 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	@ 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d142      	bne.n	8004502 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800447c:	e01d      	b.n	80044ba <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	e00f      	b.n	80044b4 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4413      	add	r3, r2
 80044a4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80044ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3dc      	bcc.n	800447e <DMA_List_FindNode+0x26>
 80044c4:	e029      	b.n	800451a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e00f      	b.n	80044fc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4413      	add	r3, r2
 80044ec:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80044f4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	3301      	adds	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	429a      	cmp	r2, r3
 800450a:	d206      	bcs.n	800451a <DMA_List_FindNode+0xc2>
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004512:	4013      	ands	r3, r2
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d1d5      	bne.n	80044c6 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004526:	4013      	ands	r3, r2
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800452e:	2301      	movs	r3, #1
 8004530:	e02b      	b.n	800458a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	461a      	mov	r2, r3
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00f      	beq.n	8004588 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	461a      	mov	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004574:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004578:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	@ 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	460b      	mov	r3, r1
 80045a0:	607a      	str	r2, [r7, #4]
 80045a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80045a8:	7afb      	ldrb	r3, [r7, #11]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d011      	beq.n	80045d2 <HAL_EXTI_RegisterCallback+0x3c>
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	dc13      	bgt.n	80045da <HAL_EXTI_RegisterCallback+0x44>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_EXTI_RegisterCallback+0x26>
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d007      	beq.n	80045ca <HAL_EXTI_RegisterCallback+0x34>
 80045ba:	e00e      	b.n	80045da <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
      break;
 80045c8:	e00a      	b.n	80045e0 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	605a      	str	r2, [r3, #4]
      break;
 80045d0:	e006      	b.n	80045e0 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	609a      	str	r2, [r3, #8]
      break;
 80045d8:	e002      	b.n	80045e0 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
      break;
 80045de:	bf00      	nop
  }

  return status;
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e003      	b.n	800460a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004608:	2300      	movs	r3, #0
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2201      	movs	r2, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <HAL_EXTI_IRQHandler+0x88>)
 8004642:	4413      	add	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <HAL_EXTI_IRQHandler+0x8c>)
 8004670:	4413      	add	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	4798      	blx	r3
    }
  }
}
 8004698:	bf00      	nop
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	4602200c 	.word	0x4602200c
 80046a4:	46022010 	.word	0x46022010

080046a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	@ 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80046ba:	e1ba      	b.n	8004a32 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 81aa 	beq.w	8004a2c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a55      	ldr	r2, [pc, #340]	@ (8004830 <HAL_GPIO_Init+0x188>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d15d      	bne.n	800479c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80046e6:	2201      	movs	r2, #1
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0201 	and.w	r2, r3, #1
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	4313      	orrs	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004710:	4a48      	ldr	r2, [pc, #288]	@ (8004834 <HAL_GPIO_Init+0x18c>)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004718:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800471a:	4a46      	ldr	r2, [pc, #280]	@ (8004834 <HAL_GPIO_Init+0x18c>)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3208      	adds	r2, #8
 800472e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004732:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	4013      	ands	r3, r2
 8004748:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	220b      	movs	r2, #11
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	4313      	orrs	r3, r2
 800475c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	08da      	lsrs	r2, r3, #3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3208      	adds	r2, #8
 8004766:	69f9      	ldr	r1, [r7, #28]
 8004768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	4013      	ands	r3, r2
 8004782:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	2202      	movs	r2, #2
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	4313      	orrs	r3, r2
 8004792:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e067      	b.n	800486c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x104>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b12      	cmp	r3, #18
 80047aa:	d145      	bne.n	8004838 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	08da      	lsrs	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3208      	adds	r2, #8
 80047b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220f      	movs	r2, #15
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	08da      	lsrs	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3208      	adds	r2, #8
 80047f2:	69f9      	ldr	r1, [r7, #28]
 80047f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2203      	movs	r2, #3
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	4013      	ands	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0203 	and.w	r2, r3, #3
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	4313      	orrs	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e01e      	b.n	800486c <HAL_GPIO_Init+0x1c4>
 800482e:	bf00      	nop
 8004830:	46020000 	.word	0x46020000
 8004834:	08010f54 	.word	0x08010f54
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	2203      	movs	r2, #3
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	4013      	ands	r3, r2
 800484e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0203 	and.w	r2, r3, #3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d00b      	beq.n	800488c <HAL_GPIO_Init+0x1e4>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d007      	beq.n	800488c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004880:	2b11      	cmp	r3, #17
 8004882:	d003      	beq.n	800488c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b12      	cmp	r3, #18
 800488a:	d130      	bne.n	80048ee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	2203      	movs	r2, #3
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80048c2:	2201      	movs	r2, #1
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	f003 0201 	and.w	r2, r3, #1
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d017      	beq.n	8004926 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	2203      	movs	r2, #3
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	4013      	ands	r3, r2
 800490c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	4313      	orrs	r3, r2
 800491e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d07c      	beq.n	8004a2c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004932:	4a47      	ldr	r2, [pc, #284]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	3318      	adds	r3, #24
 800493a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	220f      	movs	r2, #15
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43db      	mvns	r3, r3
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	4013      	ands	r3, r2
 8004954:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0a9a      	lsrs	r2, r3, #10
 800495a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a54 <HAL_GPIO_Init+0x3ac>)
 800495c:	4013      	ands	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	f002 0203 	and.w	r2, r2, #3
 8004964:	00d2      	lsls	r2, r2, #3
 8004966:	4093      	lsls	r3, r2
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	4313      	orrs	r3, r2
 800496c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800496e:	4938      	ldr	r1, [pc, #224]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	089b      	lsrs	r3, r3, #2
 8004974:	3318      	adds	r3, #24
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800497c:	4b34      	ldr	r3, [pc, #208]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	43db      	mvns	r3, r3
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	4013      	ands	r3, r2
 800498a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80049a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80049a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80049ca:	4a21      	ldr	r2, [pc, #132]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80049d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	4013      	ands	r3, r2
 80049e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80049f6:	4a16      	ldr	r2, [pc, #88]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80049fe:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 8004a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a04:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004a24:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <HAL_GPIO_Init+0x3a8>)
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f47f ae3d 	bne.w	80046bc <HAL_GPIO_Init+0x14>
  }
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	3724      	adds	r7, #36	@ 0x24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	46022000 	.word	0x46022000
 8004a54:	002f7f7f 	.word	0x002f7f7f

08004a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
 8004a64:	4613      	mov	r3, r2
 8004a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a6e:	887a      	ldrh	r2, [r7, #2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004a74:	e002      	b.n	8004a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004a76:	887a      	ldrh	r2, [r7, #2]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	041a      	lsls	r2, r3, #16
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	43d9      	mvns	r1, r3
 8004aa6:	887b      	ldrh	r3, [r7, #2]
 8004aa8:	400b      	ands	r3, r1
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e059      	b.n	8004b82 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fd fbb1 	bl	8002250 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a24      	ldr	r2, [pc, #144]	@ (8004b8c <HAL_HCD_Init+0xd0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d102      	bne.n	8004b04 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f006 fa32 	bl	800af72 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	7c1a      	ldrb	r2, [r3, #16]
 8004b16:	f88d 2000 	strb.w	r2, [sp]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b1e:	f006 f9fb 	bl	800af18 <USB_CoreInit>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e026      	b.n	8004b82 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f006 fa2a 	bl	800af94 <USB_SetCurrentMode>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e017      	b.n	8004b82 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7c1a      	ldrb	r2, [r3, #16]
 8004b5a:	f88d 2000 	strb.w	r2, [sp]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b62:	f006 fb03 	bl	800b16c <USB_HostInit>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e004      	b.n	8004b82 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	42040000 	.word	0x42040000

08004b90 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
 8004bac:	e007      	b.n	8004bbe <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004bae:	4b07      	ldr	r3, [pc, #28]	@ (8004bcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 0204 	bic.w	r2, r3, #4
 8004bb6:	4905      	ldr	r1, [pc, #20]	@ (8004bcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40030400 	.word	0x40030400

08004bd0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_ICACHE_Enable+0x1c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a04      	ldr	r2, [pc, #16]	@ (8004bec <HAL_ICACHE_Enable+0x1c>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40030400 	.word	0x40030400

08004bf0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004bf8:	4b39      	ldr	r3, [pc, #228]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c00:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10b      	bne.n	8004c22 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c10:	d905      	bls.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c12:	4b33      	ldr	r3, [pc, #204]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4a32      	ldr	r2, [pc, #200]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c1c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e057      	b.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c28:	d90a      	bls.n	8004c40 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c3c:	60d3      	str	r3, [r2, #12]
 8004c3e:	e007      	b.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004c40:	4b27      	ldr	r3, [pc, #156]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004c48:	4925      	ldr	r1, [pc, #148]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c50:	4b24      	ldr	r3, [pc, #144]	@ (8004ce4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a24      	ldr	r2, [pc, #144]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2232      	movs	r2, #50	@ 0x32
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	4a21      	ldr	r2, [pc, #132]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c6e:	e002      	b.n	8004c76 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f3      	bne.n	8004c70 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01b      	beq.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	099b      	lsrs	r3, r3, #6
 8004c9a:	2232      	movs	r2, #50	@ 0x32
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004cac:	e002      	b.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f3      	bne.n	8004cae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e000      	b.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	46020800 	.word	0x46020800
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	10624dd3 	.word	0x10624dd3

08004cec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	46020800 	.word	0x46020800

08004d08 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004d10:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <HAL_PWREx_ConfigSupply+0x94>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <HAL_PWREx_ConfigSupply+0x98>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	099b      	lsrs	r3, r3, #6
 8004d1c:	2232      	movs	r2, #50	@ 0x32
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	4a1f      	ldr	r2, [pc, #124]	@ (8004da0 <HAL_PWREx_ConfigSupply+0x98>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d113      	bne.n	8004d5c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004d34:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4a1a      	ldr	r2, [pc, #104]	@ (8004da4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d3a:	f023 0302 	bic.w	r3, r3, #2
 8004d3e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d40:	e002      	b.n	8004d48 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d48:	4b16      	ldr	r3, [pc, #88]	@ (8004da4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d116      	bne.n	8004d82 <HAL_PWREx_ConfigSupply+0x7a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f3      	bne.n	8004d42 <HAL_PWREx_ConfigSupply+0x3a>
 8004d5a:	e012      	b.n	8004d82 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004d5c:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4a10      	ldr	r2, [pc, #64]	@ (8004da4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d68:	e002      	b.n	8004d70 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d70:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_PWREx_ConfigSupply+0x7a>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f3      	bne.n	8004d6a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e000      	b.n	8004d8e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	10624dd3 	.word	0x10624dd3
 8004da4:	46020800 	.word	0x46020800

08004da8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	6113      	str	r3, [r2, #16]
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	46020800 	.word	0x46020800

08004dc8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004dcc:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4a04      	ldr	r2, [pc, #16]	@ (8004de4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004dd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004dd6:	6113      	str	r3, [r2, #16]
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	46020800 	.word	0x46020800

08004de8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <HAL_PWREx_EnableVddA+0x1c>)
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	4a04      	ldr	r2, [pc, #16]	@ (8004e04 <HAL_PWREx_EnableVddA+0x1c>)
 8004df2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004df6:	6113      	str	r3, [r2, #16]
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	46020800 	.word	0x46020800

08004e08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	4a04      	ldr	r2, [pc, #16]	@ (8004e24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	46020800 	.word	0x46020800

08004e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08e      	sub	sp, #56	@ 0x38
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d102      	bne.n	8004e42 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f000 bec8 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e42:	4b99      	ldr	r3, [pc, #612]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e4c:	4b96      	ldr	r3, [pc, #600]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 816c 	beq.w	800513c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_RCC_OscConfig+0x52>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	f040 80de 	bne.w	800502e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	f040 80da 	bne.w	800502e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f000 bea5 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e8c:	4b86      	ldr	r3, [pc, #536]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x7a>
 8004e98:	4b83      	ldr	r3, [pc, #524]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004ea0:	e005      	b.n	8004eae <HAL_RCC_OscConfig+0x86>
 8004ea2:	4b81      	ldr	r3, [pc, #516]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d255      	bcs.n	8004f5e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f001 fa11 	bl	80062e4 <RCC_SetFlashLatencyFromMSIRange>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f000 be82 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ece:	4b76      	ldr	r3, [pc, #472]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004ed4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ed8:	6093      	str	r3, [r2, #8]
 8004eda:	4b73      	ldr	r3, [pc, #460]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	4970      	ldr	r1, [pc, #448]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ef4:	d309      	bcc.n	8004f0a <HAL_RCC_OscConfig+0xe2>
 8004ef6:	4b6c      	ldr	r3, [pc, #432]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f023 021f 	bic.w	r2, r3, #31
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4969      	ldr	r1, [pc, #420]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60cb      	str	r3, [r1, #12]
 8004f08:	e07e      	b.n	8005008 <HAL_RCC_OscConfig+0x1e0>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da0a      	bge.n	8004f28 <HAL_RCC_OscConfig+0x100>
 8004f12:	4b65      	ldr	r3, [pc, #404]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	015b      	lsls	r3, r3, #5
 8004f20:	4961      	ldr	r1, [pc, #388]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60cb      	str	r3, [r1, #12]
 8004f26:	e06f      	b.n	8005008 <HAL_RCC_OscConfig+0x1e0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f30:	d30a      	bcc.n	8004f48 <HAL_RCC_OscConfig+0x120>
 8004f32:	4b5d      	ldr	r3, [pc, #372]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	029b      	lsls	r3, r3, #10
 8004f40:	4959      	ldr	r1, [pc, #356]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
 8004f46:	e05f      	b.n	8005008 <HAL_RCC_OscConfig+0x1e0>
 8004f48:	4b57      	ldr	r3, [pc, #348]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	03db      	lsls	r3, r3, #15
 8004f56:	4954      	ldr	r1, [pc, #336]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60cb      	str	r3, [r1, #12]
 8004f5c:	e054      	b.n	8005008 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f5e:	4b52      	ldr	r3, [pc, #328]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4a51      	ldr	r2, [pc, #324]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f68:	6093      	str	r3, [r2, #8]
 8004f6a:	4b4f      	ldr	r3, [pc, #316]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	494c      	ldr	r1, [pc, #304]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004f84:	d309      	bcc.n	8004f9a <HAL_RCC_OscConfig+0x172>
 8004f86:	4b48      	ldr	r3, [pc, #288]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f023 021f 	bic.w	r2, r3, #31
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4945      	ldr	r1, [pc, #276]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60cb      	str	r3, [r1, #12]
 8004f98:	e028      	b.n	8004fec <HAL_RCC_OscConfig+0x1c4>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	da0a      	bge.n	8004fb8 <HAL_RCC_OscConfig+0x190>
 8004fa2:	4b41      	ldr	r3, [pc, #260]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	015b      	lsls	r3, r3, #5
 8004fb0:	493d      	ldr	r1, [pc, #244]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60cb      	str	r3, [r1, #12]
 8004fb6:	e019      	b.n	8004fec <HAL_RCC_OscConfig+0x1c4>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc0:	d30a      	bcc.n	8004fd8 <HAL_RCC_OscConfig+0x1b0>
 8004fc2:	4b39      	ldr	r3, [pc, #228]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	029b      	lsls	r3, r3, #10
 8004fd0:	4935      	ldr	r1, [pc, #212]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60cb      	str	r3, [r1, #12]
 8004fd6:	e009      	b.n	8004fec <HAL_RCC_OscConfig+0x1c4>
 8004fd8:	4b33      	ldr	r3, [pc, #204]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	03db      	lsls	r3, r3, #15
 8004fe6:	4930      	ldr	r1, [pc, #192]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 f974 	bl	80062e4 <RCC_SetFlashLatencyFromMSIRange>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	f000 bde5 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005008:	f001 f8de 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800500c:	4b27      	ldr	r3, [pc, #156]	@ (80050ac <HAL_RCC_OscConfig+0x284>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fc fe73 	bl	8001cfc <HAL_InitTick>
 8005016:	4603      	mov	r3, r0
 8005018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800501c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 808a 	beq.w	800513a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800502a:	f000 bdd2 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d066      	beq.n	8005104 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005036:	4b1c      	ldr	r3, [pc, #112]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1b      	ldr	r2, [pc, #108]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005042:	f7fd fb2f 	bl	80026a4 <HAL_GetTick>
 8005046:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005048:	e009      	b.n	800505e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800504a:	f7fd fb2b 	bl	80026a4 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d902      	bls.n	800505e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	f000 bdba 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800505e:	4b12      	ldr	r3, [pc, #72]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ef      	beq.n	800504a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800506a:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4a0e      	ldr	r2, [pc, #56]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8005070:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005074:	6093      	str	r3, [r2, #8]
 8005076:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	4909      	ldr	r1, [pc, #36]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8005084:	4313      	orrs	r3, r2
 8005086:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005090:	d30e      	bcc.n	80050b0 <HAL_RCC_OscConfig+0x288>
 8005092:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f023 021f 	bic.w	r2, r3, #31
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	4902      	ldr	r1, [pc, #8]	@ (80050a8 <HAL_RCC_OscConfig+0x280>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60cb      	str	r3, [r1, #12]
 80050a4:	e04a      	b.n	800513c <HAL_RCC_OscConfig+0x314>
 80050a6:	bf00      	nop
 80050a8:	46020c00 	.word	0x46020c00
 80050ac:	2000001c 	.word	0x2000001c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	da0a      	bge.n	80050ce <HAL_RCC_OscConfig+0x2a6>
 80050b8:	4b98      	ldr	r3, [pc, #608]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	015b      	lsls	r3, r3, #5
 80050c6:	4995      	ldr	r1, [pc, #596]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60cb      	str	r3, [r1, #12]
 80050cc:	e036      	b.n	800513c <HAL_RCC_OscConfig+0x314>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d6:	d30a      	bcc.n	80050ee <HAL_RCC_OscConfig+0x2c6>
 80050d8:	4b90      	ldr	r3, [pc, #576]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	029b      	lsls	r3, r3, #10
 80050e6:	498d      	ldr	r1, [pc, #564]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60cb      	str	r3, [r1, #12]
 80050ec:	e026      	b.n	800513c <HAL_RCC_OscConfig+0x314>
 80050ee:	4b8b      	ldr	r3, [pc, #556]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	03db      	lsls	r3, r3, #15
 80050fc:	4987      	ldr	r1, [pc, #540]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	60cb      	str	r3, [r1, #12]
 8005102:	e01b      	b.n	800513c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005104:	4b85      	ldr	r3, [pc, #532]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a84      	ldr	r2, [pc, #528]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005110:	f7fd fac8 	bl	80026a4 <HAL_GetTick>
 8005114:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005116:	e009      	b.n	800512c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005118:	f7fd fac4 	bl	80026a4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	f000 bd53 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800512c:	4b7b      	ldr	r3, [pc, #492]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ef      	bne.n	8005118 <HAL_RCC_OscConfig+0x2f0>
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800513a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 808b 	beq.w	8005260 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	2b08      	cmp	r3, #8
 800514e:	d005      	beq.n	800515c <HAL_RCC_OscConfig+0x334>
 8005150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005152:	2b0c      	cmp	r3, #12
 8005154:	d109      	bne.n	800516a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005158:	2b03      	cmp	r3, #3
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d17d      	bne.n	8005260 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f000 bd34 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005172:	d106      	bne.n	8005182 <HAL_RCC_OscConfig+0x35a>
 8005174:	4b69      	ldr	r3, [pc, #420]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a68      	ldr	r2, [pc, #416]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800517a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e041      	b.n	8005206 <HAL_RCC_OscConfig+0x3de>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800518a:	d112      	bne.n	80051b2 <HAL_RCC_OscConfig+0x38a>
 800518c:	4b63      	ldr	r3, [pc, #396]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a62      	ldr	r2, [pc, #392]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 8005192:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b60      	ldr	r3, [pc, #384]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5f      	ldr	r2, [pc, #380]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800519e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b5d      	ldr	r3, [pc, #372]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5c      	ldr	r2, [pc, #368]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e029      	b.n	8005206 <HAL_RCC_OscConfig+0x3de>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80051ba:	d112      	bne.n	80051e2 <HAL_RCC_OscConfig+0x3ba>
 80051bc:	4b57      	ldr	r3, [pc, #348]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a56      	ldr	r2, [pc, #344]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	4b54      	ldr	r3, [pc, #336]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a53      	ldr	r2, [pc, #332]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	4b51      	ldr	r3, [pc, #324]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a50      	ldr	r2, [pc, #320]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e011      	b.n	8005206 <HAL_RCC_OscConfig+0x3de>
 80051e2:	4b4e      	ldr	r3, [pc, #312]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a4d      	ldr	r2, [pc, #308]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4b4b      	ldr	r3, [pc, #300]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a4a      	ldr	r2, [pc, #296]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4b48      	ldr	r3, [pc, #288]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a47      	ldr	r2, [pc, #284]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 8005200:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005204:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d014      	beq.n	8005238 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800520e:	f7fd fa49 	bl	80026a4 <HAL_GetTick>
 8005212:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005214:	e009      	b.n	800522a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005216:	f7fd fa45 	bl	80026a4 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b64      	cmp	r3, #100	@ 0x64
 8005222:	d902      	bls.n	800522a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	f000 bcd4 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800522a:	4b3c      	ldr	r3, [pc, #240]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ef      	beq.n	8005216 <HAL_RCC_OscConfig+0x3ee>
 8005236:	e013      	b.n	8005260 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005238:	f7fd fa34 	bl	80026a4 <HAL_GetTick>
 800523c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800523e:	e009      	b.n	8005254 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005240:	f7fd fa30 	bl	80026a4 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	@ 0x64
 800524c:	d902      	bls.n	8005254 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	f000 bcbf 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005254:	4b31      	ldr	r3, [pc, #196]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ef      	bne.n	8005240 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d05f      	beq.n	800532c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	2b04      	cmp	r3, #4
 8005270:	d005      	beq.n	800527e <HAL_RCC_OscConfig+0x456>
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d114      	bne.n	80052a2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	2b02      	cmp	r3, #2
 800527c:	d111      	bne.n	80052a2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f000 bca3 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800528c:	4b23      	ldr	r3, [pc, #140]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	4920      	ldr	r1, [pc, #128]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 800529c:	4313      	orrs	r3, r2
 800529e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80052a0:	e044      	b.n	800532c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d024      	beq.n	80052f4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80052aa:	4b1c      	ldr	r3, [pc, #112]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80052b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052b6:	f7fd f9f5 	bl	80026a4 <HAL_GetTick>
 80052ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052bc:	e009      	b.n	80052d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052be:	f7fd f9f1 	bl	80026a4 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d902      	bls.n	80052d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	f000 bc80 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d2:	4b12      	ldr	r3, [pc, #72]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ef      	beq.n	80052be <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80052de:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	490b      	ldr	r1, [pc, #44]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]
 80052f2:	e01b      	b.n	800532c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80052f4:	4b09      	ldr	r3, [pc, #36]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a08      	ldr	r2, [pc, #32]	@ (800531c <HAL_RCC_OscConfig+0x4f4>)
 80052fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005300:	f7fd f9d0 	bl	80026a4 <HAL_GetTick>
 8005304:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005308:	f7fd f9cc 	bl	80026a4 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d904      	bls.n	8005320 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	f000 bc5b 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
 800531c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005320:	4baf      	ldr	r3, [pc, #700]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1ed      	bne.n	8005308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80c8 	beq.w	80054ca <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005340:	4ba7      	ldr	r3, [pc, #668]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d111      	bne.n	8005372 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534e:	4ba4      	ldr	r3, [pc, #656]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005354:	4aa2      	ldr	r2, [pc, #648]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800535e:	4ba0      	ldr	r3, [pc, #640]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800536c:	2301      	movs	r3, #1
 800536e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005372:	4b9c      	ldr	r3, [pc, #624]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d119      	bne.n	80053b2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800537e:	4b99      	ldr	r3, [pc, #612]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005382:	4a98      	ldr	r2, [pc, #608]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538a:	f7fd f98b 	bl	80026a4 <HAL_GetTick>
 800538e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005390:	e009      	b.n	80053a6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005392:	f7fd f987 	bl	80026a4 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d902      	bls.n	80053a6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	f000 bc16 	b.w	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053a6:	4b8f      	ldr	r3, [pc, #572]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ef      	beq.n	8005392 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d05f      	beq.n	800547a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80053ba:	4b89      	ldr	r3, [pc, #548]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d037      	beq.n	8005440 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d006      	beq.n	80053e8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e3f4      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01b      	beq.n	800542a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80053f2:	4b7b      	ldr	r3, [pc, #492]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80053f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053f8:	4a79      	ldr	r2, [pc, #484]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80053fa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80053fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005402:	f7fd f94f 	bl	80026a4 <HAL_GetTick>
 8005406:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800540a:	f7fd f94b 	bl	80026a4 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b05      	cmp	r3, #5
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e3da      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800541c:	4b70      	ldr	r3, [pc, #448]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800541e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005422:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ef      	bne.n	800540a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800542a:	4b6d      	ldr	r3, [pc, #436]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800542c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005430:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	4969      	ldr	r1, [pc, #420]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005440:	4b67      	ldr	r3, [pc, #412]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005446:	4a66      	ldr	r2, [pc, #408]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005448:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800544c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005450:	f7fd f928 	bl	80026a4 <HAL_GetTick>
 8005454:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005458:	f7fd f924 	bl	80026a4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b05      	cmp	r3, #5
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e3b3      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800546a:	4b5d      	ldr	r3, [pc, #372]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800546c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ef      	beq.n	8005458 <HAL_RCC_OscConfig+0x630>
 8005478:	e01b      	b.n	80054b2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800547a:	4b59      	ldr	r3, [pc, #356]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800547c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005480:	4a57      	ldr	r2, [pc, #348]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005482:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005486:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800548a:	f7fd f90b 	bl	80026a4 <HAL_GetTick>
 800548e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005492:	f7fd f907 	bl	80026a4 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b05      	cmp	r3, #5
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e396      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80054a4:	4b4e      	ldr	r3, [pc, #312]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80054a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ef      	bne.n	8005492 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d107      	bne.n	80054ca <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ba:	4b49      	ldr	r3, [pc, #292]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80054bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c0:	4a47      	ldr	r2, [pc, #284]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80054c2:	f023 0304 	bic.w	r3, r3, #4
 80054c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8111 	beq.w	80056fa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054de:	4b40      	ldr	r3, [pc, #256]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80054e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d111      	bne.n	8005510 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ec:	4b3c      	ldr	r3, [pc, #240]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f2:	4a3b      	ldr	r2, [pc, #236]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054fc:	4b38      	ldr	r3, [pc, #224]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80054fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005510:	4b34      	ldr	r3, [pc, #208]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d118      	bne.n	800554e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800551c:	4b31      	ldr	r3, [pc, #196]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	4a30      	ldr	r2, [pc, #192]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005528:	f7fd f8bc 	bl	80026a4 <HAL_GetTick>
 800552c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005530:	f7fd f8b8 	bl	80026a4 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e347      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005542:	4b28      	ldr	r3, [pc, #160]	@ (80055e4 <HAL_RCC_OscConfig+0x7bc>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01f      	beq.n	800559a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d010      	beq.n	8005588 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005566:	4b1e      	ldr	r3, [pc, #120]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800556c:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800556e:	f043 0304 	orr.w	r3, r3, #4
 8005572:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005576:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800557c:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005586:	e018      	b.n	80055ba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005588:	4b15      	ldr	r3, [pc, #84]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800558a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800558e:	4a14      	ldr	r2, [pc, #80]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005598:	e00f      	b.n	80055ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800559a:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 800559c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055a0:	4a0f      	ldr	r2, [pc, #60]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80055aa:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80055ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055b0:	4a0b      	ldr	r2, [pc, #44]	@ (80055e0 <HAL_RCC_OscConfig+0x7b8>)
 80055b2:	f023 0304 	bic.w	r3, r3, #4
 80055b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d057      	beq.n	8005672 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80055c2:	f7fd f86f 	bl	80026a4 <HAL_GetTick>
 80055c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c8:	e00e      	b.n	80055e8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fd f86b 	bl	80026a4 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d905      	bls.n	80055e8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e2f8      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
 80055e0:	46020c00 	.word	0x46020c00
 80055e4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e8:	4b9c      	ldr	r3, [pc, #624]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80055ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0e9      	beq.n	80055ca <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01b      	beq.n	800563a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005602:	4b96      	ldr	r3, [pc, #600]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005608:	4a94      	ldr	r2, [pc, #592]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800560a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800560e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005612:	e00a      	b.n	800562a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fd f846 	bl	80026a4 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005622:	4293      	cmp	r3, r2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e2d3      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800562a:	4b8c      	ldr	r3, [pc, #560]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800562c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0ed      	beq.n	8005614 <HAL_RCC_OscConfig+0x7ec>
 8005638:	e053      	b.n	80056e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800563a:	4b88      	ldr	r3, [pc, #544]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800563c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005640:	4a86      	ldr	r2, [pc, #536]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800564a:	e00a      	b.n	8005662 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564c:	f7fd f82a 	bl	80026a4 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e2b7      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005662:	4b7e      	ldr	r3, [pc, #504]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ed      	bne.n	800564c <HAL_RCC_OscConfig+0x824>
 8005670:	e037      	b.n	80056e2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005672:	f7fd f817 	bl	80026a4 <HAL_GetTick>
 8005676:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005678:	e00a      	b.n	8005690 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd f813 	bl	80026a4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e2a0      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005690:	4b72      	ldr	r3, [pc, #456]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1ed      	bne.n	800567a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800569e:	4b6f      	ldr	r3, [pc, #444]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80056a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80056ac:	4b6b      	ldr	r3, [pc, #428]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80056ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056b2:	4a6a      	ldr	r2, [pc, #424]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80056b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056be:	f7fc fff1 	bl	80026a4 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e27e      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80056d4:	4b61      	ldr	r3, [pc, #388]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80056d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1ed      	bne.n	80056be <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d107      	bne.n	80056fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ea:	4b5c      	ldr	r3, [pc, #368]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80056ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056f0:	4a5a      	ldr	r2, [pc, #360]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80056f2:	f023 0304 	bic.w	r3, r3, #4
 80056f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d036      	beq.n	8005774 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d019      	beq.n	8005742 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800570e:	4b53      	ldr	r3, [pc, #332]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a52      	ldr	r2, [pc, #328]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005718:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800571a:	f7fc ffc3 	bl	80026a4 <HAL_GetTick>
 800571e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005722:	f7fc ffbf 	bl	80026a4 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e24e      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005734:	4b49      	ldr	r3, [pc, #292]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x8fa>
 8005740:	e018      	b.n	8005774 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005742:	4b46      	ldr	r3, [pc, #280]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a45      	ldr	r2, [pc, #276]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800574c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800574e:	f7fc ffa9 	bl	80026a4 <HAL_GetTick>
 8005752:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005756:	f7fc ffa5 	bl	80026a4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e234      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005768:	4b3c      	ldr	r3, [pc, #240]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577c:	2b00      	cmp	r3, #0
 800577e:	d036      	beq.n	80057ee <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d019      	beq.n	80057bc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005788:	4b34      	ldr	r3, [pc, #208]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a33      	ldr	r2, [pc, #204]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800578e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005792:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005794:	f7fc ff86 	bl	80026a4 <HAL_GetTick>
 8005798:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800579c:	f7fc ff82 	bl	80026a4 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e211      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80057ae:	4b2b      	ldr	r3, [pc, #172]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0x974>
 80057ba:	e018      	b.n	80057ee <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80057bc:	4b27      	ldr	r3, [pc, #156]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a26      	ldr	r2, [pc, #152]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80057c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057c8:	f7fc ff6c 	bl	80026a4 <HAL_GetTick>
 80057cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80057d0:	f7fc ff68 	bl	80026a4 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e1f7      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80057e2:	4b1e      	ldr	r3, [pc, #120]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d07f      	beq.n	80058fa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d062      	beq.n	80058c8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005802:	4b16      	ldr	r3, [pc, #88]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	4a15      	ldr	r2, [pc, #84]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005808:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800580c:	6093      	str	r3, [r2, #8]
 800580e:	4b13      	ldr	r3, [pc, #76]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	4910      	ldr	r1, [pc, #64]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800581c:	4313      	orrs	r3, r2
 800581e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005828:	d309      	bcc.n	800583e <HAL_RCC_OscConfig+0xa16>
 800582a:	4b0c      	ldr	r3, [pc, #48]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f023 021f 	bic.w	r2, r3, #31
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	4909      	ldr	r1, [pc, #36]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005838:	4313      	orrs	r3, r2
 800583a:	60cb      	str	r3, [r1, #12]
 800583c:	e02a      	b.n	8005894 <HAL_RCC_OscConfig+0xa6c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	da0c      	bge.n	8005860 <HAL_RCC_OscConfig+0xa38>
 8005846:	4b05      	ldr	r3, [pc, #20]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	015b      	lsls	r3, r3, #5
 8005854:	4901      	ldr	r1, [pc, #4]	@ (800585c <HAL_RCC_OscConfig+0xa34>)
 8005856:	4313      	orrs	r3, r2
 8005858:	60cb      	str	r3, [r1, #12]
 800585a:	e01b      	b.n	8005894 <HAL_RCC_OscConfig+0xa6c>
 800585c:	46020c00 	.word	0x46020c00
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005868:	d30a      	bcc.n	8005880 <HAL_RCC_OscConfig+0xa58>
 800586a:	4ba1      	ldr	r3, [pc, #644]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	029b      	lsls	r3, r3, #10
 8005878:	499d      	ldr	r1, [pc, #628]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 800587a:	4313      	orrs	r3, r2
 800587c:	60cb      	str	r3, [r1, #12]
 800587e:	e009      	b.n	8005894 <HAL_RCC_OscConfig+0xa6c>
 8005880:	4b9b      	ldr	r3, [pc, #620]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	03db      	lsls	r3, r3, #15
 800588e:	4998      	ldr	r1, [pc, #608]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005890:	4313      	orrs	r3, r2
 8005892:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005894:	4b96      	ldr	r3, [pc, #600]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a95      	ldr	r2, [pc, #596]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 800589a:	f043 0310 	orr.w	r3, r3, #16
 800589e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058a0:	f7fc ff00 	bl	80026a4 <HAL_GetTick>
 80058a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80058a8:	f7fc fefc 	bl	80026a4 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e18b      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80058ba:	4b8d      	ldr	r3, [pc, #564]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0xa80>
 80058c6:	e018      	b.n	80058fa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80058c8:	4b89      	ldr	r3, [pc, #548]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a88      	ldr	r2, [pc, #544]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 80058ce:	f023 0310 	bic.w	r3, r3, #16
 80058d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80058d4:	f7fc fee6 	bl	80026a4 <HAL_GetTick>
 80058d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80058dc:	f7fc fee2 	bl	80026a4 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e171      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80058ee:	4b80      	ldr	r3, [pc, #512]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 8166 	beq.w	8005bd0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005904:	2300      	movs	r3, #0
 8005906:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590a:	4b79      	ldr	r3, [pc, #484]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b0c      	cmp	r3, #12
 8005914:	f000 80f2 	beq.w	8005afc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	2b02      	cmp	r3, #2
 800591e:	f040 80c5 	bne.w	8005aac <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005922:	4b73      	ldr	r3, [pc, #460]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a72      	ldr	r2, [pc, #456]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005928:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800592c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800592e:	f7fc feb9 	bl	80026a4 <HAL_GetTick>
 8005932:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005936:	f7fc feb5 	bl	80026a4 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e144      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005948:	4b69      	ldr	r3, [pc, #420]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f0      	bne.n	8005936 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005954:	4b66      	ldr	r3, [pc, #408]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d111      	bne.n	8005986 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005962:	4b63      	ldr	r3, [pc, #396]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005968:	4a61      	ldr	r2, [pc, #388]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005972:	4b5f      	ldr	r3, [pc, #380]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005986:	4b5b      	ldr	r3, [pc, #364]	@ (8005af4 <HAL_RCC_OscConfig+0xccc>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800598e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005992:	d102      	bne.n	800599a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800599a:	4b56      	ldr	r3, [pc, #344]	@ (8005af4 <HAL_RCC_OscConfig+0xccc>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4a55      	ldr	r2, [pc, #340]	@ (8005af4 <HAL_RCC_OscConfig+0xccc>)
 80059a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059a4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80059a6:	4b52      	ldr	r3, [pc, #328]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80059ba:	3a01      	subs	r2, #1
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	4311      	orrs	r1, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80059c4:	430a      	orrs	r2, r1
 80059c6:	494a      	ldr	r1, [pc, #296]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80059cc:	4b48      	ldr	r3, [pc, #288]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 80059ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059d0:	4b49      	ldr	r3, [pc, #292]	@ (8005af8 <HAL_RCC_OscConfig+0xcd0>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059d8:	3a01      	subs	r2, #1
 80059da:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80059e2:	3a01      	subs	r2, #1
 80059e4:	0252      	lsls	r2, r2, #9
 80059e6:	b292      	uxth	r2, r2
 80059e8:	4311      	orrs	r1, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059ee:	3a01      	subs	r2, #1
 80059f0:	0412      	lsls	r2, r2, #16
 80059f2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80059f6:	4311      	orrs	r1, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80059fc:	3a01      	subs	r2, #1
 80059fe:	0612      	lsls	r2, r2, #24
 8005a00:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005a04:	430a      	orrs	r2, r1
 8005a06:	493a      	ldr	r1, [pc, #232]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005a0c:	4b38      	ldr	r3, [pc, #224]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	4a37      	ldr	r2, [pc, #220]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1c:	4a34      	ldr	r2, [pc, #208]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005a22:	4b33      	ldr	r3, [pc, #204]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	4a32      	ldr	r2, [pc, #200]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a28:	f043 0310 	orr.w	r3, r3, #16
 8005a2c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005a2e:	4b30      	ldr	r3, [pc, #192]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a32:	f023 020c 	bic.w	r2, r3, #12
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a3a:	492d      	ldr	r1, [pc, #180]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005a40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005a48:	4b2a      	ldr	r3, [pc, #168]	@ (8005af4 <HAL_RCC_OscConfig+0xccc>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a29      	ldr	r2, [pc, #164]	@ (8005af4 <HAL_RCC_OscConfig+0xccc>)
 8005a4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a52:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005a54:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005a5c:	4b24      	ldr	r3, [pc, #144]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a62:	4a23      	ldr	r2, [pc, #140]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a64:	f023 0304 	bic.w	r3, r3, #4
 8005a68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005a6c:	4b20      	ldr	r3, [pc, #128]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1f      	ldr	r2, [pc, #124]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a78:	f7fc fe14 	bl	80026a4 <HAL_GetTick>
 8005a7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fc fe10 	bl	80026a4 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e09f      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a92:	4b17      	ldr	r3, [pc, #92]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a9e:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	4a13      	ldr	r2, [pc, #76]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa8:	6293      	str	r3, [r2, #40]	@ 0x28
 8005aaa:	e091      	b.n	8005bd0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005aac:	4b10      	ldr	r3, [pc, #64]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005ab8:	f7fc fdf4 	bl	80026a4 <HAL_GetTick>
 8005abc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fc fdf0 	bl	80026a4 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e07f      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ad2:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005ade:	4b04      	ldr	r3, [pc, #16]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	4a03      	ldr	r2, [pc, #12]	@ (8005af0 <HAL_RCC_OscConfig+0xcc8>)
 8005ae4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005ae8:	f023 0303 	bic.w	r3, r3, #3
 8005aec:	6293      	str	r3, [r2, #40]	@ 0x28
 8005aee:	e06f      	b.n	8005bd0 <HAL_RCC_OscConfig+0xda8>
 8005af0:	46020c00 	.word	0x46020c00
 8005af4:	46020800 	.word	0x46020800
 8005af8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005afc:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b02:	4b36      	ldr	r3, [pc, #216]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b06:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d039      	beq.n	8005b84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0203 	and.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d132      	bne.n	8005b84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d129      	bne.n	8005b84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d122      	bne.n	8005b84 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b48:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d11a      	bne.n	8005b84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	0a5b      	lsrs	r3, r3, #9
 8005b52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d111      	bne.n	8005b84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	0c1b      	lsrs	r3, r3, #16
 8005b64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d108      	bne.n	8005b84 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	0e1b      	lsrs	r3, r3, #24
 8005b76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e024      	b.n	8005bd2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b88:	4b14      	ldr	r3, [pc, #80]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8c:	08db      	lsrs	r3, r3, #3
 8005b8e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d01a      	beq.n	8005bd0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005b9a:	4b10      	ldr	r3, [pc, #64]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005ba0:	f023 0310 	bic.w	r3, r3, #16
 8005ba4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba6:	f7fc fd7d 	bl	80026a4 <HAL_GetTick>
 8005baa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005bac:	bf00      	nop
 8005bae:	f7fc fd79 	bl	80026a4 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d0f9      	beq.n	8005bae <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bbe:	4a07      	ldr	r2, [pc, #28]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005bc4:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc8:	4a04      	ldr	r2, [pc, #16]	@ (8005bdc <HAL_RCC_OscConfig+0xdb4>)
 8005bca:	f043 0310 	orr.w	r3, r3, #16
 8005bce:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3738      	adds	r7, #56	@ 0x38
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	46020c00 	.word	0x46020c00

08005be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e1d9      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf4:	4b9b      	ldr	r3, [pc, #620]	@ (8005e64 <HAL_RCC_ClockConfig+0x284>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d910      	bls.n	8005c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c02:	4b98      	ldr	r3, [pc, #608]	@ (8005e64 <HAL_RCC_ClockConfig+0x284>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f023 020f 	bic.w	r2, r3, #15
 8005c0a:	4996      	ldr	r1, [pc, #600]	@ (8005e64 <HAL_RCC_ClockConfig+0x284>)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c12:	4b94      	ldr	r3, [pc, #592]	@ (8005e64 <HAL_RCC_ClockConfig+0x284>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e1c1      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	4b8c      	ldr	r3, [pc, #560]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d908      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005c40:	4b89      	ldr	r3, [pc, #548]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	4986      	ldr	r1, [pc, #536]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d012      	beq.n	8005c84 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	4b81      	ldr	r3, [pc, #516]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d909      	bls.n	8005c84 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005c70:	4b7d      	ldr	r3, [pc, #500]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	497a      	ldr	r1, [pc, #488]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	4b74      	ldr	r3, [pc, #464]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d908      	bls.n	8005cb2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ca0:	4b71      	ldr	r3, [pc, #452]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	496e      	ldr	r1, [pc, #440]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d010      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	4b69      	ldr	r3, [pc, #420]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d908      	bls.n	8005ce0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005cce:	4b66      	ldr	r3, [pc, #408]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 020f 	bic.w	r2, r3, #15
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	4963      	ldr	r1, [pc, #396]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80d2 	beq.w	8005e92 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d143      	bne.n	8005d82 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d110      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005d08:	4b57      	ldr	r3, [pc, #348]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d0e:	4a56      	ldr	r2, [pc, #344]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005d10:	f043 0304 	orr.w	r3, r3, #4
 8005d14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005d18:	4b53      	ldr	r3, [pc, #332]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005d26:	2301      	movs	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005d2a:	f7fc fcbb 	bl	80026a4 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005d30:	4b4e      	ldr	r3, [pc, #312]	@ (8005e6c <HAL_RCC_ClockConfig+0x28c>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00f      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005d3e:	f7fc fcb1 	bl	80026a4 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e12b      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005d50:	4b46      	ldr	r3, [pc, #280]	@ (8005e6c <HAL_RCC_ClockConfig+0x28c>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d107      	bne.n	8005d72 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d62:	4b41      	ldr	r3, [pc, #260]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d68:	4a3f      	ldr	r2, [pc, #252]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005d6a:	f023 0304 	bic.w	r3, r3, #4
 8005d6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005d72:	4b3d      	ldr	r3, [pc, #244]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d121      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e112      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d107      	bne.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d8a:	4b37      	ldr	r3, [pc, #220]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d115      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e106      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d107      	bne.n	8005db2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005da2:	4b31      	ldr	r3, [pc, #196]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0fa      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005db2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e0f2      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005dc2:	4b29      	ldr	r3, [pc, #164]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f023 0203 	bic.w	r2, r3, #3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4926      	ldr	r1, [pc, #152]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005dd4:	f7fc fc66 	bl	80026a4 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d112      	bne.n	8005e08 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de2:	e00a      	b.n	8005dfa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de4:	f7fc fc5e 	bl	80026a4 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e0d6      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
 8005e02:	2b0c      	cmp	r3, #12
 8005e04:	d1ee      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x204>
 8005e06:	e044      	b.n	8005e92 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d112      	bne.n	8005e36 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e12:	f7fc fc47 	bl	80026a4 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e0bf      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e28:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f003 030c 	and.w	r3, r3, #12
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d1ee      	bne.n	8005e12 <HAL_RCC_ClockConfig+0x232>
 8005e34:	e02d      	b.n	8005e92 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d123      	bne.n	8005e86 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e40:	f7fc fc30 	bl	80026a4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e0a8      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e56:	4b04      	ldr	r3, [pc, #16]	@ (8005e68 <HAL_RCC_ClockConfig+0x288>)
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1ee      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x260>
 8005e62:	e016      	b.n	8005e92 <HAL_RCC_ClockConfig+0x2b2>
 8005e64:	40022000 	.word	0x40022000
 8005e68:	46020c00 	.word	0x46020c00
 8005e6c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e70:	f7fc fc18 	bl	80026a4 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e090      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e86:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d1ee      	bne.n	8005e70 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d010      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d208      	bcs.n	8005ec0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005eae:	4b40      	ldr	r3, [pc, #256]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f023 020f 	bic.w	r2, r3, #15
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	493d      	ldr	r1, [pc, #244]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d210      	bcs.n	8005ef0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b39      	ldr	r3, [pc, #228]	@ (8005fb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 020f 	bic.w	r2, r3, #15
 8005ed6:	4937      	ldr	r1, [pc, #220]	@ (8005fb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b35      	ldr	r3, [pc, #212]	@ (8005fb4 <HAL_RCC_ClockConfig+0x3d4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e05b      	b.n	8005fa8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d010      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d208      	bcs.n	8005f1e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005f0c:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	4925      	ldr	r1, [pc, #148]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d209      	bcs.n	8005f50 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	4919      	ldr	r1, [pc, #100]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	4b13      	ldr	r3, [pc, #76]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d208      	bcs.n	8005f7e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005f6c:	4b10      	ldr	r3, [pc, #64]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	490d      	ldr	r1, [pc, #52]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005f7e:	f000 f821 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <HAL_RCC_ClockConfig+0x3d0>)
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	490a      	ldr	r1, [pc, #40]	@ (8005fb8 <HAL_RCC_ClockConfig+0x3d8>)
 8005f8e:	5ccb      	ldrb	r3, [r1, r3]
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	4a09      	ldr	r2, [pc, #36]	@ (8005fbc <HAL_RCC_ClockConfig+0x3dc>)
 8005f96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f98:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <HAL_RCC_ClockConfig+0x3e0>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fb fead 	bl	8001cfc <HAL_InitTick>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73fb      	strb	r3, [r7, #15]

  return status;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	46020c00 	.word	0x46020c00
 8005fb4:	40022000 	.word	0x40022000
 8005fb8:	08010ef0 	.word	0x08010ef0
 8005fbc:	20000000 	.word	0x20000000
 8005fc0:	2000001c 	.word	0x2000001c

08005fc4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	@ 0x2c
 8005fc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fd2:	4b78      	ldr	r3, [pc, #480]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fdc:	4b75      	ldr	r3, [pc, #468]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	2b0c      	cmp	r3, #12
 8005ff0:	d121      	bne.n	8006036 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d11e      	bne.n	8006036 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005ff8:	4b6e      	ldr	r3, [pc, #440]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d107      	bne.n	8006014 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006004:	4b6b      	ldr	r3, [pc, #428]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800600a:	0b1b      	lsrs	r3, r3, #12
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
 8006012:	e005      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006014:	4b67      	ldr	r3, [pc, #412]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	0f1b      	lsrs	r3, r3, #28
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006020:	4a65      	ldr	r2, [pc, #404]	@ (80061b8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d110      	bne.n	8006052 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006034:	e00d      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006036:	4b5f      	ldr	r3, [pc, #380]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 030c 	and.w	r3, r3, #12
 800603e:	2b04      	cmp	r3, #4
 8006040:	d102      	bne.n	8006048 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006042:	4b5e      	ldr	r3, [pc, #376]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006044:	623b      	str	r3, [r7, #32]
 8006046:	e004      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b08      	cmp	r3, #8
 800604c:	d101      	bne.n	8006052 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800604e:	4b5b      	ldr	r3, [pc, #364]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006050:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b0c      	cmp	r3, #12
 8006056:	f040 80a5 	bne.w	80061a4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800605a:	4b56      	ldr	r3, [pc, #344]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800605c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006064:	4b53      	ldr	r3, [pc, #332]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006072:	4b50      	ldr	r3, [pc, #320]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800607e:	4b4d      	ldr	r3, [pc, #308]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006082:	08db      	lsrs	r3, r3, #3
 8006084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d003      	beq.n	80060a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d022      	beq.n	80060ec <HAL_RCC_GetSysClockFreq+0x128>
 80060a6:	e043      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80061c0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80060b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ba:	4b3e      	ldr	r3, [pc, #248]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80060bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80060ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80060ce:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80061c4 <HAL_RCC_GetSysClockFreq+0x200>
 80060d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80060da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ea:	e046      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80061c0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80060fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fe:	4b2d      	ldr	r3, [pc, #180]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800610e:	ed97 6a01 	vldr	s12, [r7, #4]
 8006112:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80061c4 <HAL_RCC_GetSysClockFreq+0x200>
 8006116:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800611e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006122:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612e:	e024      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006148:	4b1a      	ldr	r3, [pc, #104]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006158:	ed97 6a01 	vldr	s12, [r7, #4]
 800615c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80061c4 <HAL_RCC_GetSysClockFreq+0x200>
 8006160:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006164:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006178:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800617a:	4b0e      	ldr	r3, [pc, #56]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800617c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617e:	0e1b      	lsrs	r3, r3, #24
 8006180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006184:	3301      	adds	r3, #1
 8006186:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006192:	edd7 6a07 	vldr	s13, [r7, #28]
 8006196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619e:	ee17 3a90 	vmov	r3, s15
 80061a2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80061a4:	6a3b      	ldr	r3, [r7, #32]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	372c      	adds	r7, #44	@ 0x2c
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	46020c00 	.word	0x46020c00
 80061b8:	08010f08 	.word	0x08010f08
 80061bc:	00f42400 	.word	0x00f42400
 80061c0:	4b742400 	.word	0x4b742400
 80061c4:	46000000 	.word	0x46000000

080061c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80061cc:	f7ff fefa 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 80061d0:	4602      	mov	r2, r0
 80061d2:	4b07      	ldr	r3, [pc, #28]	@ (80061f0 <HAL_RCC_GetHCLKFreq+0x28>)
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	4906      	ldr	r1, [pc, #24]	@ (80061f4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80061dc:	5ccb      	ldrb	r3, [r1, r3]
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	4a05      	ldr	r2, [pc, #20]	@ (80061f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80061e4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80061e6:	4b04      	ldr	r3, [pc, #16]	@ (80061f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80061e8:	681b      	ldr	r3, [r3, #0]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	46020c00 	.word	0x46020c00
 80061f4:	08010ef0 	.word	0x08010ef0
 80061f8:	20000000 	.word	0x20000000

080061fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006200:	f7ff ffe2 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 8006204:	4602      	mov	r2, r0
 8006206:	4b05      	ldr	r3, [pc, #20]	@ (800621c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	4903      	ldr	r1, [pc, #12]	@ (8006220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006212:	5ccb      	ldrb	r3, [r1, r3]
 8006214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006218:	4618      	mov	r0, r3
 800621a:	bd80      	pop	{r7, pc}
 800621c:	46020c00 	.word	0x46020c00
 8006220:	08010f00 	.word	0x08010f00

08006224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006228:	f7ff ffce 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 800622c:	4602      	mov	r2, r0
 800622e:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	4903      	ldr	r1, [pc, #12]	@ (8006248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800623a:	5ccb      	ldrb	r3, [r1, r3]
 800623c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006240:	4618      	mov	r0, r3
 8006242:	bd80      	pop	{r7, pc}
 8006244:	46020c00 	.word	0x46020c00
 8006248:	08010f00 	.word	0x08010f00

0800624c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006250:	f7ff ffba 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 8006254:	4602      	mov	r2, r0
 8006256:	4b05      	ldr	r3, [pc, #20]	@ (800626c <HAL_RCC_GetPCLK3Freq+0x20>)
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4903      	ldr	r1, [pc, #12]	@ (8006270 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006262:	5ccb      	ldrb	r3, [r1, r3]
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006268:	4618      	mov	r0, r3
 800626a:	bd80      	pop	{r7, pc}
 800626c:	46020c00 	.word	0x46020c00
 8006270:	08010f00 	.word	0x08010f00

08006274 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	221f      	movs	r2, #31
 8006282:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006284:	4b15      	ldr	r3, [pc, #84]	@ (80062dc <HAL_RCC_GetClockConfig+0x68>)
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f003 0203 	and.w	r2, r3, #3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006290:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <HAL_RCC_GetClockConfig+0x68>)
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800629c:	4b0f      	ldr	r3, [pc, #60]	@ (80062dc <HAL_RCC_GetClockConfig+0x68>)
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80062a8:	4b0c      	ldr	r3, [pc, #48]	@ (80062dc <HAL_RCC_GetClockConfig+0x68>)
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80062b6:	4b09      	ldr	r3, [pc, #36]	@ (80062dc <HAL_RCC_GetClockConfig+0x68>)
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062c2:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <HAL_RCC_GetClockConfig+0x6c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 020f 	and.w	r2, r3, #15
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	601a      	str	r2, [r3, #0]
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	46020c00 	.word	0x46020c00
 80062e0:	40022000 	.word	0x40022000

080062e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062ec:	4b3e      	ldr	r3, [pc, #248]	@ (80063e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80062ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062fa:	f7fe fcf7 	bl	8004cec <HAL_PWREx_GetVoltageRange>
 80062fe:	6178      	str	r0, [r7, #20]
 8006300:	e019      	b.n	8006336 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006302:	4b39      	ldr	r3, [pc, #228]	@ (80063e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006308:	4a37      	ldr	r2, [pc, #220]	@ (80063e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800630a:	f043 0304 	orr.w	r3, r3, #4
 800630e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006312:	4b35      	ldr	r3, [pc, #212]	@ (80063e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006320:	f7fe fce4 	bl	8004cec <HAL_PWREx_GetVoltageRange>
 8006324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006326:	4b30      	ldr	r3, [pc, #192]	@ (80063e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800632c:	4a2e      	ldr	r2, [pc, #184]	@ (80063e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800632e:	f023 0304 	bic.w	r3, r3, #4
 8006332:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800633c:	d003      	beq.n	8006346 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006344:	d109      	bne.n	800635a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800634c:	d202      	bcs.n	8006354 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800634e:	2301      	movs	r3, #1
 8006350:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006352:	e033      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006358:	e030      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006360:	d208      	bcs.n	8006374 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006368:	d102      	bne.n	8006370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800636a:	2303      	movs	r3, #3
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	e025      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e035      	b.n	80063e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800637a:	d90f      	bls.n	800639c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006388:	d902      	bls.n	8006390 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	e015      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006390:	2301      	movs	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e012      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	e00f      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063a2:	d109      	bne.n	80063b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063aa:	d102      	bne.n	80063b2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80063ac:	2301      	movs	r3, #1
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	e004      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80063b2:	2302      	movs	r3, #2
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	e001      	b.n	80063bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80063b8:	2301      	movs	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063bc:	4b0b      	ldr	r3, [pc, #44]	@ (80063ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 020f 	bic.w	r2, r3, #15
 80063c4:	4909      	ldr	r1, [pc, #36]	@ (80063ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d001      	beq.n	80063de <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	46020c00 	.word	0x46020c00
 80063ec:	40022000 	.word	0x40022000

080063f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80063f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f4:	b0b8      	sub	sp, #224	@ 0xe0
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006402:	2300      	movs	r3, #0
 8006404:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f002 0401 	and.w	r4, r2, #1
 8006414:	2500      	movs	r5, #0
 8006416:	ea54 0305 	orrs.w	r3, r4, r5
 800641a:	d00b      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800641c:	4bca      	ldr	r3, [pc, #808]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800641e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006422:	f023 0103 	bic.w	r1, r3, #3
 8006426:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800642a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642c:	4ac6      	ldr	r2, [pc, #792]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800642e:	430b      	orrs	r3, r1
 8006430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f002 0802 	and.w	r8, r2, #2
 8006440:	f04f 0900 	mov.w	r9, #0
 8006444:	ea58 0309 	orrs.w	r3, r8, r9
 8006448:	d00b      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800644a:	4bbf      	ldr	r3, [pc, #764]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800644c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006450:	f023 010c 	bic.w	r1, r3, #12
 8006454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645a:	4abb      	ldr	r2, [pc, #748]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800645c:	430b      	orrs	r3, r1
 800645e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f002 0a04 	and.w	sl, r2, #4
 800646e:	f04f 0b00 	mov.w	fp, #0
 8006472:	ea5a 030b 	orrs.w	r3, sl, fp
 8006476:	d00b      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006478:	4bb3      	ldr	r3, [pc, #716]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800647a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800647e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006488:	4aaf      	ldr	r2, [pc, #700]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800648a:	430b      	orrs	r3, r1
 800648c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f002 0308 	and.w	r3, r2, #8
 800649c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064a0:	2300      	movs	r3, #0
 80064a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80064b0:	4ba5      	ldr	r3, [pc, #660]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80064ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c0:	4aa1      	ldr	r2, [pc, #644]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064c2:	430b      	orrs	r3, r1
 80064c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f002 0310 	and.w	r3, r2, #16
 80064d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80064de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	d00b      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80064e8:	4b97      	ldr	r3, [pc, #604]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f8:	4a93      	ldr	r2, [pc, #588]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064fa:	430b      	orrs	r3, r1
 80064fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f002 0320 	and.w	r3, r2, #32
 800650c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006510:	2300      	movs	r3, #0
 8006512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006516:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800651a:	460b      	mov	r3, r1
 800651c:	4313      	orrs	r3, r2
 800651e:	d00b      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006520:	4b89      	ldr	r3, [pc, #548]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006526:	f023 0107 	bic.w	r1, r3, #7
 800652a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800652e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006530:	4a85      	ldr	r2, [pc, #532]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006532:	430b      	orrs	r3, r1
 8006534:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800654e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	d00b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006558:	4b7b      	ldr	r3, [pc, #492]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800655a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800655e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006566:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006568:	4a77      	ldr	r2, [pc, #476]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800656a:	430b      	orrs	r3, r1
 800656c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800657c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006586:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d00b      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006590:	4b6d      	ldr	r3, [pc, #436]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800659a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800659e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a0:	4a69      	ldr	r2, [pc, #420]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80065b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80065c8:	4b5f      	ldr	r3, [pc, #380]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80065d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d8:	4a5b      	ldr	r2, [pc, #364]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80065ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d00b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006600:	4b51      	ldr	r3, [pc, #324]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006606:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800660a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800660e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006610:	4a4d      	ldr	r2, [pc, #308]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006612:	430b      	orrs	r3, r1
 8006614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800662e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	d00b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006638:	4b43      	ldr	r3, [pc, #268]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800663a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800663e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006642:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006648:	4a3f      	ldr	r2, [pc, #252]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800665c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006660:	2300      	movs	r3, #0
 8006662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006666:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800666a:	460b      	mov	r3, r1
 800666c:	4313      	orrs	r3, r2
 800666e:	d00b      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006670:	4b35      	ldr	r3, [pc, #212]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006676:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800667a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800667e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006680:	4a31      	ldr	r2, [pc, #196]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006682:	430b      	orrs	r3, r1
 8006684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006696:	2300      	movs	r3, #0
 8006698:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800669a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800669e:	460b      	mov	r3, r1
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d00c      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80066a4:	4b28      	ldr	r3, [pc, #160]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066b6:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80066ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80066cc:	2300      	movs	r3, #0
 80066ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80066d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80066d4:	460b      	mov	r3, r1
 80066d6:	4313      	orrs	r3, r2
 80066d8:	d04f      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80066da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e2:	2b80      	cmp	r3, #128	@ 0x80
 80066e4:	d02d      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80066e6:	2b80      	cmp	r3, #128	@ 0x80
 80066e8:	d827      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80066ea:	2b60      	cmp	r3, #96	@ 0x60
 80066ec:	d02e      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80066ee:	2b60      	cmp	r3, #96	@ 0x60
 80066f0:	d823      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80066f2:	2b40      	cmp	r3, #64	@ 0x40
 80066f4:	d006      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80066f6:	2b40      	cmp	r3, #64	@ 0x40
 80066f8:	d81f      	bhi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d011      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006702:	e01a      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006704:	4b10      	ldr	r3, [pc, #64]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006708:	4a0f      	ldr	r2, [pc, #60]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800670a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800670e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006710:	e01d      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006712:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006716:	3308      	adds	r3, #8
 8006718:	4618      	mov	r0, r3
 800671a:	f002 f9d1 	bl	8008ac0 <RCCEx_PLL2_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006724:	e013      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800672a:	332c      	adds	r3, #44	@ 0x2c
 800672c:	4618      	mov	r0, r3
 800672e:	f002 fa5f 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006738:	e009      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006740:	e005      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006742:	bf00      	nop
 8006744:	e003      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006746:	bf00      	nop
 8006748:	46020c00 	.word	0x46020c00
        break;
 800674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006756:	4bb6      	ldr	r3, [pc, #728]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800675c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006768:	4ab1      	ldr	r2, [pc, #708]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800676a:	430b      	orrs	r3, r1
 800676c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006770:	e003      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006772:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006776:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800677a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006786:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006788:	2300      	movs	r3, #0
 800678a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800678c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006790:	460b      	mov	r3, r1
 8006792:	4313      	orrs	r3, r2
 8006794:	d053      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800679a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a2:	d033      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80067a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a8:	d82c      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80067aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ae:	d02f      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80067b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b4:	d826      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80067b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ba:	d008      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067c0:	d820      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80067c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ca:	d011      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80067cc:	e01a      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067ce:	4b98      	ldr	r3, [pc, #608]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80067d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d2:	4a97      	ldr	r2, [pc, #604]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80067d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80067da:	e01a      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067e0:	3308      	adds	r3, #8
 80067e2:	4618      	mov	r0, r3
 80067e4:	f002 f96c 	bl	8008ac0 <RCCEx_PLL2_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80067ee:	e010      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067f4:	332c      	adds	r3, #44	@ 0x2c
 80067f6:	4618      	mov	r0, r3
 80067f8:	f002 f9fa 	bl	8008bf0 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006802:	e006      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800680a:	e002      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800680c:	bf00      	nop
 800680e:	e000      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006812:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10d      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800681a:	4b85      	ldr	r3, [pc, #532]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800681c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006820:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800682c:	4a80      	ldr	r2, [pc, #512]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800682e:	430b      	orrs	r3, r1
 8006830:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006834:	e003      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006836:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800683a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800683e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800684a:	663b      	str	r3, [r7, #96]	@ 0x60
 800684c:	2300      	movs	r3, #0
 800684e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006850:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006854:	460b      	mov	r3, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	d046      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800685a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800685e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006862:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006866:	d028      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006868:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800686c:	d821      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800686e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006872:	d022      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006874:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006878:	d81b      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800687a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800687e:	d01c      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006880:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006884:	d815      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688a:	d008      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006890:	d80f      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d011      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689a:	d00e      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800689c:	e009      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800689e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068a2:	3308      	adds	r3, #8
 80068a4:	4618      	mov	r0, r3
 80068a6:	f002 f90b 	bl	8008ac0 <RCCEx_PLL2_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80068b0:	e004      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80068b8:	e000      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80068ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068bc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10d      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80068c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068ca:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80068ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068d6:	4a56      	ldr	r2, [pc, #344]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80068d8:	430b      	orrs	r3, r1
 80068da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80068de:	e003      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80068e4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80068e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80068f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068f6:	2300      	movs	r3, #0
 80068f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	d03f      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690c:	2b04      	cmp	r3, #4
 800690e:	d81e      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006910:	a201      	add	r2, pc, #4	@ (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	08006957 	.word	0x08006957
 800691c:	0800692d 	.word	0x0800692d
 8006920:	0800693b 	.word	0x0800693b
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800692c:	4b40      	ldr	r3, [pc, #256]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	4a3f      	ldr	r2, [pc, #252]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006936:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006938:	e00e      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800693a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800693e:	332c      	adds	r3, #44	@ 0x2c
 8006940:	4618      	mov	r0, r3
 8006942:	f002 f955 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800694c:	e004      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006954:	e000      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006956:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006958:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10d      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006960:	4b33      	ldr	r3, [pc, #204]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006966:	f023 0107 	bic.w	r1, r3, #7
 800696a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800696e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006972:	4a2f      	ldr	r2, [pc, #188]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006974:	430b      	orrs	r3, r1
 8006976:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800697a:	e003      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006980:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006990:	653b      	str	r3, [r7, #80]	@ 0x50
 8006992:	2300      	movs	r3, #0
 8006994:	657b      	str	r3, [r7, #84]	@ 0x54
 8006996:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800699a:	460b      	mov	r3, r1
 800699c:	4313      	orrs	r3, r2
 800699e:	d04d      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80069a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069ac:	d028      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x610>
 80069ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069b2:	d821      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80069b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069b8:	d024      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80069ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069be:	d81b      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80069c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c4:	d00e      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 80069c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069ca:	d815      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01b      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d4:	d110      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069d6:	4b16      	ldr	r3, [pc, #88]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	4a15      	ldr	r2, [pc, #84]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80069e2:	e012      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069e8:	332c      	adds	r3, #44	@ 0x2c
 80069ea:	4618      	mov	r0, r3
 80069ec:	f002 f900 	bl	8008bf0 <RCCEx_PLL3_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80069f6:	e008      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80069fe:	e004      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006a00:	bf00      	nop
 8006a02:	e002      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006a08:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a0a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d110      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006a12:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a18:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a24:	4a02      	ldr	r2, [pc, #8]	@ (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a26:	430b      	orrs	r3, r1
 8006a28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006a2c:	e006      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006a2e:	bf00      	nop
 8006a30:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a34:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a38:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a52:	460b      	mov	r3, r1
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f000 80b5 	beq.w	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a60:	4b9d      	ldr	r3, [pc, #628]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d113      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	4b9a      	ldr	r3, [pc, #616]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a74:	4a98      	ldr	r2, [pc, #608]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a76:	f043 0304 	orr.w	r3, r3, #4
 8006a7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006a7e:	4b96      	ldr	r3, [pc, #600]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006a96:	4b91      	ldr	r3, [pc, #580]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	4a90      	ldr	r2, [pc, #576]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aa2:	f7fb fdff 	bl	80026a4 <HAL_GetTick>
 8006aa6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006aaa:	e00b      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aac:	f7fb fdfa 	bl	80026a4 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d903      	bls.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006ac2:	e005      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ac4:	4b85      	ldr	r3, [pc, #532]	@ (8006cdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0ed      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006ad0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d165      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d023      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006af2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d01b      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006afe:	4b76      	ldr	r3, [pc, #472]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b0c:	4b72      	ldr	r3, [pc, #456]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b12:	4a71      	ldr	r2, [pc, #452]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b1c:	4b6e      	ldr	r3, [pc, #440]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b22:	4a6d      	ldr	r2, [pc, #436]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d019      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b42:	f7fb fdaf 	bl	80026a4 <HAL_GetTick>
 8006b46:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4a:	e00d      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4c:	f7fb fdaa 	bl	80026a4 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b56:	1ad2      	subs	r2, r2, r3
 8006b58:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d903      	bls.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006b66:	e006      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b68:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0ea      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006b76:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006b7e:	4b56      	ldr	r3, [pc, #344]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b84:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b90:	4a51      	ldr	r2, [pc, #324]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006b92:	430b      	orrs	r3, r1
 8006b94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b98:	e008      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b9e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006ba2:	e003      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ba8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bac:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bb4:	4b48      	ldr	r3, [pc, #288]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bba:	4a47      	ldr	r2, [pc, #284]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d042      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006be4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006be8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006bec:	d022      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006bee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006bf2:	d81b      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf8:	d011      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bfe:	d815      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d019      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c08:	d110      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c0e:	3308      	adds	r3, #8
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 ff55 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006c1c:	e00d      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c22:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c28:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006c2a:	e006      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006c32:	e002      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006c38:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006c3a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006c42:	4b25      	ldr	r3, [pc, #148]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c48:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c54:	4a20      	ldr	r2, [pc, #128]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c5c:	e003      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c62:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c74:	2300      	movs	r3, #0
 8006c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	d032      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c8e:	d00b      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c94:	d804      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9e:	d007      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006ca6:	e004      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006ca8:	bf00      	nop
 8006caa:	e002      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006cac:	bf00      	nop
 8006cae:	e000      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006cb0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006cb2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d112      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006cba:	4b07      	ldr	r3, [pc, #28]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006cc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ccc:	4a02      	ldr	r2, [pc, #8]	@ (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cce:	430b      	orrs	r3, r1
 8006cd0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006cd6:	bf00      	nop
 8006cd8:	46020c00 	.word	0x46020c00
 8006cdc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ce4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d019      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d10:	d105      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d12:	4b88      	ldr	r3, [pc, #544]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d16:	4a87      	ldr	r2, [pc, #540]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d1c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006d1e:	4b85      	ldr	r3, [pc, #532]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006d28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d30:	4a80      	ldr	r2, [pc, #512]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d32:	430b      	orrs	r3, r1
 8006d34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d46:	2300      	movs	r3, #0
 8006d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	d00c      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006d54:	4b77      	ldr	r3, [pc, #476]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d66:	4973      	ldr	r1, [pc, #460]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006d7a:	623b      	str	r3, [r7, #32]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d84:	460b      	mov	r3, r1
 8006d86:	4313      	orrs	r3, r2
 8006d88:	d00c      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d9c:	4965      	ldr	r1, [pc, #404]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d00c      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dc6:	f023 0218 	bic.w	r2, r3, #24
 8006dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006dd2:	4958      	ldr	r1, [pc, #352]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006dda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d032      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006df6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e02:	d105      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e04:	4b4b      	ldr	r3, [pc, #300]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	4a4a      	ldr	r2, [pc, #296]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e1c:	d108      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e22:	3308      	adds	r3, #8
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 fe4b 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8006e30:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10d      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006e38:	4b3e      	ldr	r3, [pc, #248]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e4a:	493a      	ldr	r1, [pc, #232]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006e58:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006e68:	60bb      	str	r3, [r7, #8]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d03a      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e84:	d00e      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006e86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e8a:	d815      	bhi.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d017      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e94:	d110      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e96:	4b27      	ldr	r3, [pc, #156]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9a:	4a26      	ldr	r2, [pc, #152]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ea2:	e00e      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 fe08 	bl	8008ac0 <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006eb6:	e004      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8006ec0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ec2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006eca:	4b1a      	ldr	r3, [pc, #104]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ed0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006edc:	4915      	ldr	r1, [pc, #84]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006ee4:	e003      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006eea:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006eee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	2300      	movs	r3, #0
 8006efe:	607b      	str	r3, [r7, #4]
 8006f00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f04:	460b      	mov	r3, r1
 8006f06:	4313      	orrs	r3, r2
 8006f08:	d00c      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f10:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f1c:	4905      	ldr	r1, [pc, #20]	@ (8006f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006f24:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	37e0      	adds	r7, #224	@ 0xe0
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f32:	bf00      	nop
 8006f34:	46020c00 	.word	0x46020c00

08006f38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	@ 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006f40:	4ba6      	ldr	r3, [pc, #664]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f48:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006f4a:	4ba4      	ldr	r3, [pc, #656]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006f54:	4ba1      	ldr	r3, [pc, #644]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	0a1b      	lsrs	r3, r3, #8
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	3301      	adds	r3, #1
 8006f60:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006f62:	4b9e      	ldr	r3, [pc, #632]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f66:	091b      	lsrs	r3, r3, #4
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006f6e:	4b9b      	ldr	r3, [pc, #620]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	08db      	lsrs	r3, r3, #3
 8006f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f86:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d062      	beq.n	8007056 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	f200 8081 	bhi.w	800709a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d024      	beq.n	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d17a      	bne.n	800709a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80071e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b89      	ldr	r3, [pc, #548]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80071e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fe6:	e08f      	b.n	8007108 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006ff4:	4b79      	ldr	r3, [pc, #484]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	0f1b      	lsrs	r3, r3, #28
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	e006      	b.n	800700e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007000:	4b76      	ldr	r3, [pc, #472]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007006:	041b      	lsls	r3, r3, #16
 8007008:	0f1b      	lsrs	r3, r3, #28
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	4a76      	ldr	r2, [pc, #472]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	ee07 3a90 	vmov	s15, r3
 8007030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007034:	ed97 6a02 	vldr	s12, [r7, #8]
 8007038:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80071e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800703c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007044:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007048:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800704c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007050:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007054:	e058      	b.n	8007108 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	ee07 3a90 	vmov	s15, r3
 800705c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007060:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007068:	4b5c      	ldr	r3, [pc, #368]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800706a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007078:	ed97 6a02 	vldr	s12, [r7, #8]
 800707c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80071e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007080:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007084:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007088:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800708c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007094:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007098:	e036      	b.n	8007108 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800709a:	4b50      	ldr	r3, [pc, #320]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d005      	beq.n	80070b2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80070a6:	4b4d      	ldr	r3, [pc, #308]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	0f1b      	lsrs	r3, r3, #28
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	e006      	b.n	80070c0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80070b2:	4b4a      	ldr	r3, [pc, #296]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80070b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070b8:	041b      	lsls	r3, r3, #16
 80070ba:	0f1b      	lsrs	r3, r3, #28
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	4a49      	ldr	r2, [pc, #292]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80070c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80071e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80070ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007106:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007108:	4b34      	ldr	r3, [pc, #208]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d017      	beq.n	8007144 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007114:	4b31      	ldr	r3, [pc, #196]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007118:	0a5b      	lsrs	r3, r3, #9
 800711a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800712a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800712e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800713a:	ee17 2a90 	vmov	r2, s15
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e002      	b.n	800714a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800714a:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800714c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d017      	beq.n	8007186 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007156:	4b21      	ldr	r3, [pc, #132]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007168:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800716c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007170:	edd7 6a07 	vldr	s13, [r7, #28]
 8007174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717c:	ee17 2a90 	vmov	r2, s15
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	e002      	b.n	800718c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800718c:	4b13      	ldr	r3, [pc, #76]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800718e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007190:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007198:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800719a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719c:	0e1b      	lsrs	r3, r3, #24
 800719e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80071aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80071b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071be:	ee17 2a90 	vmov	r2, s15
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071c6:	e002      	b.n	80071ce <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	609a      	str	r2, [r3, #8]
}
 80071ce:	bf00      	nop
 80071d0:	3724      	adds	r7, #36	@ 0x24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	46020c00 	.word	0x46020c00
 80071e0:	4b742400 	.word	0x4b742400
 80071e4:	46000000 	.word	0x46000000
 80071e8:	08010f08 	.word	0x08010f08

080071ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b089      	sub	sp, #36	@ 0x24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80071f4:	4ba6      	ldr	r3, [pc, #664]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80071f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80071fe:	4ba4      	ldr	r3, [pc, #656]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007208:	4ba1      	ldr	r3, [pc, #644]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	0a1b      	lsrs	r3, r3, #8
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	3301      	adds	r3, #1
 8007214:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007216:	4b9e      	ldr	r3, [pc, #632]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	091b      	lsrs	r3, r3, #4
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007222:	4b9b      	ldr	r3, [pc, #620]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007226:	08db      	lsrs	r3, r3, #3
 8007228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	fb02 f303 	mul.w	r3, r2, r3
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b03      	cmp	r3, #3
 8007242:	d062      	beq.n	800730a <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b03      	cmp	r3, #3
 8007248:	f200 8081 	bhi.w	800734e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d024      	beq.n	800729c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d17a      	bne.n	800734e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726a:	4b89      	ldr	r3, [pc, #548]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800726c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800727a:	ed97 6a02 	vldr	s12, [r7, #8]
 800727e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007282:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007286:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800728a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800729a:	e08f      	b.n	80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800729c:	4b7c      	ldr	r3, [pc, #496]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80072a8:	4b79      	ldr	r3, [pc, #484]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	0f1b      	lsrs	r3, r3, #28
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	e006      	b.n	80072c2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80072b4:	4b76      	ldr	r3, [pc, #472]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80072b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	0f1b      	lsrs	r3, r3, #28
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	4a76      	ldr	r2, [pc, #472]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80072c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80072f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007308:	e058      	b.n	80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007314:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731c:	4b5c      	ldr	r3, [pc, #368]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800731e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007324:	ee07 3a90 	vmov	s15, r3
 8007328:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800732c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007330:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007334:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007338:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800733c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007340:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800734c:	e036      	b.n	80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800734e:	4b50      	ldr	r3, [pc, #320]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800735a:	4b4d      	ldr	r3, [pc, #308]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	0f1b      	lsrs	r3, r3, #28
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	e006      	b.n	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007366:	4b4a      	ldr	r3, [pc, #296]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	0f1b      	lsrs	r3, r3, #28
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	4a49      	ldr	r2, [pc, #292]	@ (800749c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739a:	ed97 6a02 	vldr	s12, [r7, #8]
 800739e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80073a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80073b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ba:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80073bc:	4b34      	ldr	r3, [pc, #208]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d017      	beq.n	80073f8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073c8:	4b31      	ldr	r3, [pc, #196]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073cc:	0a5b      	lsrs	r3, r3, #9
 80073ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80073da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ee:	ee17 2a90 	vmov	r2, s15
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e002      	b.n	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80073fe:	4b24      	ldr	r3, [pc, #144]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d017      	beq.n	800743a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800740a:	4b21      	ldr	r3, [pc, #132]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800740c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800741c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007420:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007424:	edd7 6a07 	vldr	s13, [r7, #28]
 8007428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800742c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007430:	ee17 2a90 	vmov	r2, s15
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	605a      	str	r2, [r3, #4]
 8007438:	e002      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007440:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d017      	beq.n	800747c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800744c:	4b10      	ldr	r3, [pc, #64]	@ (8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800744e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007450:	0e1b      	lsrs	r3, r3, #24
 8007452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800745e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007462:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007466:	edd7 6a07 	vldr	s13, [r7, #28]
 800746a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007472:	ee17 2a90 	vmov	r2, s15
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	609a      	str	r2, [r3, #8]
}
 8007482:	bf00      	nop
 8007484:	3724      	adds	r7, #36	@ 0x24
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	46020c00 	.word	0x46020c00
 8007494:	4b742400 	.word	0x4b742400
 8007498:	46000000 	.word	0x46000000
 800749c:	08010f08 	.word	0x08010f08

080074a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b089      	sub	sp, #36	@ 0x24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80074a8:	4ba6      	ldr	r3, [pc, #664]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80074b2:	4ba4      	ldr	r3, [pc, #656]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80074bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	3301      	adds	r3, #1
 80074c8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80074ca:	4b9e      	ldr	r3, [pc, #632]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ce:	091b      	lsrs	r3, r3, #4
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80074d6:	4b9b      	ldr	r3, [pc, #620]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80074d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d062      	beq.n	80075be <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	f200 8081 	bhi.w	8007602 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d024      	beq.n	8007550 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b02      	cmp	r3, #2
 800750a:	d17a      	bne.n	8007602 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007516:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800751a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751e:	4b89      	ldr	r3, [pc, #548]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800752e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007532:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007536:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800753a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800753e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007542:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800754e:	e08f      	b.n	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007550:	4b7c      	ldr	r3, [pc, #496]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800755c:	4b79      	ldr	r3, [pc, #484]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	0f1b      	lsrs	r3, r3, #28
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	e006      	b.n	8007576 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007568:	4b76      	ldr	r3, [pc, #472]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800756a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	0f1b      	lsrs	r3, r3, #28
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	4a76      	ldr	r2, [pc, #472]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800757c:	ee07 3a90 	vmov	s15, r3
 8007580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	ee07 3a90 	vmov	s15, r3
 8007598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759c:	ed97 6a02 	vldr	s12, [r7, #8]
 80075a0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80075a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80075b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075bc:	e058      	b.n	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80075cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d0:	4b5c      	ldr	r3, [pc, #368]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80075d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80075e4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80075e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80075f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80075f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007600:	e036      	b.n	8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007602:	4b50      	ldr	r3, [pc, #320]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800760e:	4b4d      	ldr	r3, [pc, #308]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	0f1b      	lsrs	r3, r3, #28
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800761a:	4b4a      	ldr	r3, [pc, #296]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800761c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007620:	041b      	lsls	r3, r3, #16
 8007622:	0f1b      	lsrs	r3, r3, #28
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	4a49      	ldr	r2, [pc, #292]	@ (8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800762a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007652:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800766e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007670:	4b34      	ldr	r3, [pc, #208]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d017      	beq.n	80076ac <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800767c:	4b31      	ldr	r3, [pc, #196]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800767e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007680:	0a5b      	lsrs	r3, r3, #9
 8007682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800768e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007692:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007696:	edd7 6a07 	vldr	s13, [r7, #28]
 800769a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800769e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a2:	ee17 2a90 	vmov	r2, s15
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e002      	b.n	80076b2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80076b2:	4b24      	ldr	r3, [pc, #144]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d017      	beq.n	80076ee <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076be:	4b21      	ldr	r3, [pc, #132]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c2:	0c1b      	lsrs	r3, r3, #16
 80076c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80076d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076d4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80076d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e4:	ee17 2a90 	vmov	r2, s15
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	605a      	str	r2, [r3, #4]
 80076ec:	e002      	b.n	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80076f4:	4b13      	ldr	r3, [pc, #76]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d017      	beq.n	8007730 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007700:	4b10      	ldr	r3, [pc, #64]	@ (8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007704:	0e1b      	lsrs	r3, r3, #24
 8007706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007716:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800771a:	edd7 6a07 	vldr	s13, [r7, #28]
 800771e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007726:	ee17 2a90 	vmov	r2, s15
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	609a      	str	r2, [r3, #8]
}
 8007736:	bf00      	nop
 8007738:	3724      	adds	r7, #36	@ 0x24
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	46020c00 	.word	0x46020c00
 8007748:	4b742400 	.word	0x4b742400
 800774c:	46000000 	.word	0x46000000
 8007750:	08010f08 	.word	0x08010f08

08007754 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08e      	sub	sp, #56	@ 0x38
 8007758:	af00      	add	r7, sp, #0
 800775a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800775e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007762:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007766:	430b      	orrs	r3, r1
 8007768:	d145      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800776a:	4baa      	ldr	r3, [pc, #680]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800776c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007770:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007774:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007776:	4ba7      	ldr	r3, [pc, #668]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b02      	cmp	r3, #2
 8007782:	d108      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800778a:	d104      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800778c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
 8007792:	f001 b987 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007796:	4b9f      	ldr	r3, [pc, #636]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800779c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077a4:	d114      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077ac:	d110      	bne.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077ae:	4b99      	ldr	r3, [pc, #612]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80077b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077bc:	d103      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80077be:	23fa      	movs	r3, #250	@ 0xfa
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077c2:	f001 b96f 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80077c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077cc:	f001 b96a 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80077d0:	4b90      	ldr	r3, [pc, #576]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077dc:	d107      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077e4:	d103      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80077e6:	4b8c      	ldr	r3, [pc, #560]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077ea:	f001 b95b 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f2:	f001 b957 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077fa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80077fe:	430b      	orrs	r3, r1
 8007800:	d151      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007802:	4b84      	ldr	r3, [pc, #528]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007808:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800780c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800780e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007810:	2b80      	cmp	r3, #128	@ 0x80
 8007812:	d035      	beq.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	2b80      	cmp	r3, #128	@ 0x80
 8007818:	d841      	bhi.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	2b60      	cmp	r3, #96	@ 0x60
 800781e:	d02a      	beq.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	2b60      	cmp	r3, #96	@ 0x60
 8007824:	d83b      	bhi.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	2b40      	cmp	r3, #64	@ 0x40
 800782a:	d009      	beq.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	2b40      	cmp	r3, #64	@ 0x40
 8007830:	d835      	bhi.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00c      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	2b20      	cmp	r3, #32
 800783c:	d012      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800783e:	e02e      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff fb77 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800784e:	f001 b929 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007852:	f107 0318 	add.w	r3, r7, #24
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fcc8 	bl	80071ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007860:	f001 b920 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff fe19 	bl	80074a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007872:	f001 b917 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007876:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800787a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800787c:	f001 b912 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007880:	4b64      	ldr	r3, [pc, #400]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800788c:	d103      	bne.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800788e:	4b63      	ldr	r3, [pc, #396]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007890:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007892:	f001 b907 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800789a:	f001 b903 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078a2:	f001 b8ff 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80078a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078aa:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80078ae:	430b      	orrs	r3, r1
 80078b0:	d158      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80078b2:	4b58      	ldr	r3, [pc, #352]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80078be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c4:	d03b      	beq.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078cc:	d846      	bhi.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078d4:	d02e      	beq.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078dc:	d83e      	bhi.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078e4:	d00b      	beq.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078ec:	d836      	bhi.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00d      	beq.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078fa:	d012      	beq.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80078fc:	e02e      	b.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fb18 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800790c:	f001 b8ca 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007910:	f107 0318 	add.w	r3, r7, #24
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fc69 	bl	80071ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800791e:	f001 b8c1 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007922:	f107 030c 	add.w	r3, r7, #12
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fdba 	bl	80074a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007930:	f001 b8b8 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007934:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800793a:	f001 b8b3 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800793e:	4b35      	ldr	r3, [pc, #212]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800794a:	d103      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800794c:	4b33      	ldr	r3, [pc, #204]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800794e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007950:	f001 b8a8 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007958:	f001 b8a4 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007960:	f001 b8a0 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007968:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800796c:	430b      	orrs	r3, r1
 800796e:	d16e      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007970:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007976:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800797a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007982:	d034      	beq.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800798a:	d85c      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007992:	d00b      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800799a:	d854      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079a8:	d009      	beq.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80079aa:	e04c      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fac1 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80079b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ba:	f001 b873 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079be:	f107 0318 	add.w	r3, r7, #24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fc12 	bl	80071ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079cc:	f001 b86a 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80079d0:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079dc:	d103      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 80079de:	4b10      	ldr	r3, [pc, #64]	@ (8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079e2:	f001 b85f 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ea:	f001 b85b 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80079ee:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d121      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079fa:	4b06      	ldr	r3, [pc, #24]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007a06:	4b03      	ldr	r3, [pc, #12]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	0e1b      	lsrs	r3, r3, #24
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	e00f      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007a12:	bf00      	nop
 8007a14:	46020c00 	.word	0x46020c00
 8007a18:	0007a120 	.word	0x0007a120
 8007a1c:	00f42400 	.word	0x00f42400
 8007a20:	02dc6c00 	.word	0x02dc6c00
 8007a24:	4ba7      	ldr	r3, [pc, #668]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	0e1b      	lsrs	r3, r3, #24
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	4aa5      	ldr	r2, [pc, #660]	@ (8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a38:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a3a:	f001 b833 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a42:	f001 b82f 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a4a:	f001 b82b 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a52:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007a56:	430b      	orrs	r3, r1
 8007a58:	d17f      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007a5a:	4b9a      	ldr	r3, [pc, #616]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007a5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a64:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d165      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007a6c:	4b95      	ldr	r3, [pc, #596]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a72:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007a76:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a7e:	d034      	beq.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a86:	d853      	bhi.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a8e:	d00b      	beq.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a96:	d84b      	bhi.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007aa4:	d009      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007aa6:	e043      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fa43 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007ab6:	f000 bff5 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fb94 	bl	80071ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007ac8:	f000 bfec 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007acc:	4b7d      	ldr	r3, [pc, #500]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ad8:	d103      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8007ada:	4b7c      	ldr	r3, [pc, #496]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007ade:	f000 bfe1 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007ae6:	f000 bfdd 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007aea:	4b76      	ldr	r3, [pc, #472]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d118      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007af6:	4b73      	ldr	r3, [pc, #460]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007b02:	4b70      	ldr	r3, [pc, #448]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	0e1b      	lsrs	r3, r3, #24
 8007b08:	f003 030f 	and.w	r3, r3, #15
 8007b0c:	e006      	b.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	0e1b      	lsrs	r3, r3, #24
 8007b18:	f003 030f 	and.w	r3, r3, #15
 8007b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b22:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007b24:	f000 bfbe 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b2c:	f000 bfba 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007b34:	f000 bfb6 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b3e:	d108      	bne.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff f9f7 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4e:	f000 bfa9 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b56:	f000 bfa5 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5e:	1e51      	subs	r1, r2, #1
 8007b60:	430b      	orrs	r3, r1
 8007b62:	d136      	bne.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b64:	4b57      	ldr	r3, [pc, #348]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007b76:	f7fe fb55 	bl	8006224 <HAL_RCC_GetPCLK2Freq>
 8007b7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b7c:	f000 bf92 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d104      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b86:	f7fe fa1d 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8007b8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b8c:	f000 bf8a 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007b90:	4b4c      	ldr	r3, [pc, #304]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b9c:	d106      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d103      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba8:	f000 bf7c 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007bac:	4b45      	ldr	r3, [pc, #276]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d107      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d104      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007bc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc6:	f000 bf6d 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bce:	f000 bf69 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd6:	1e91      	subs	r1, r2, #2
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	d136      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007bdc:	4b39      	ldr	r3, [pc, #228]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007be2:	f003 030c 	and.w	r3, r3, #12
 8007be6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bee:	f7fe fb05 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8007bf2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007bf4:	f000 bf56 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d104      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bfe:	f7fe f9e1 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8007c02:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c04:	f000 bf4e 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007c08:	4b2e      	ldr	r3, [pc, #184]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c14:	d106      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	d103      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c20:	f000 bf40 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007c24:	4b27      	ldr	r3, [pc, #156]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d107      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	2b0c      	cmp	r3, #12
 8007c36:	d104      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007c38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	f000 bf31 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c46:	f000 bf2d 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c4e:	1f11      	subs	r1, r2, #4
 8007c50:	430b      	orrs	r3, r1
 8007c52:	d13f      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007c54:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c5a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d104      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c66:	f7fe fac9 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8007c6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c6c:	f000 bf1a 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	2b10      	cmp	r3, #16
 8007c74:	d104      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c76:	f7fe f9a5 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8007c7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c7c:	f000 bf12 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007c80:	4b10      	ldr	r3, [pc, #64]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8c:	d106      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d103      	bne.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007c94:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c98:	f000 bf04 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007c9c:	4b09      	ldr	r3, [pc, #36]	@ (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d107      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	2b30      	cmp	r3, #48	@ 0x30
 8007cae:	d104      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb6:	f000 bef5 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cbe:	f000 bef1 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007cc2:	bf00      	nop
 8007cc4:	46020c00 	.word	0x46020c00
 8007cc8:	08010f08 	.word	0x08010f08
 8007ccc:	02dc6c00 	.word	0x02dc6c00
 8007cd0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd8:	f1a2 0108 	sub.w	r1, r2, #8
 8007cdc:	430b      	orrs	r3, r1
 8007cde:	d136      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ce0:	4ba4      	ldr	r3, [pc, #656]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ce6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007cea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cf2:	f7fe fa83 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8007cf6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cf8:	f000 bed4 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfe:	2b40      	cmp	r3, #64	@ 0x40
 8007d00:	d104      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d02:	f7fe f95f 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8007d06:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d08:	f000 becc 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007d0c:	4b99      	ldr	r3, [pc, #612]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d18:	d106      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	2b80      	cmp	r3, #128	@ 0x80
 8007d1e:	d103      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007d20:	4b95      	ldr	r3, [pc, #596]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d24:	f000 bebe 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007d28:	4b92      	ldr	r3, [pc, #584]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d107      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d3a:	d104      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d42:	f000 beaf 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4a:	f000 beab 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d52:	f1a2 0110 	sub.w	r1, r2, #16
 8007d56:	430b      	orrs	r3, r1
 8007d58:	d139      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007d5a:	4b86      	ldr	r3, [pc, #536]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d6c:	f7fe fa46 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8007d70:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d72:	f000 be97 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d7c:	d104      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d7e:	f7fe f921 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8007d82:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d84:	f000 be8e 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007d88:	4b7a      	ldr	r3, [pc, #488]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d94:	d107      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9c:	d103      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007d9e:	4b76      	ldr	r3, [pc, #472]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da2:	f000 be7f 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007da6:	4b73      	ldr	r3, [pc, #460]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d108      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dba:	d104      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007dbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc2:	f000 be6f 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dca:	f000 be6b 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd2:	f1a2 0120 	sub.w	r1, r2, #32
 8007dd6:	430b      	orrs	r3, r1
 8007dd8:	d158      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007dda:	4b66      	ldr	r3, [pc, #408]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007dec:	f7fe fa2e 	bl	800624c <HAL_RCC_GetPCLK3Freq>
 8007df0:	6378      	str	r0, [r7, #52]	@ 0x34
 8007df2:	f000 be57 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d104      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dfc:	f7fe f8e2 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8007e00:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e02:	f000 be4f 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007e06:	4b5b      	ldr	r3, [pc, #364]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e12:	d106      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d103      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007e1a:	4b57      	ldr	r3, [pc, #348]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1e:	f000 be41 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007e22:	4b54      	ldr	r3, [pc, #336]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d107      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d104      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3c:	f000 be32 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007e40:	4b4c      	ldr	r3, [pc, #304]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d11b      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d118      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e52:	4b48      	ldr	r3, [pc, #288]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8007e5e:	4b45      	ldr	r3, [pc, #276]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	0e1b      	lsrs	r3, r3, #24
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	e006      	b.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007e6a:	4b42      	ldr	r3, [pc, #264]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	4a40      	ldr	r2, [pc, #256]	@ (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e80:	f000 be10 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e88:	f000 be0c 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e90:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e94:	430b      	orrs	r3, r1
 8007e96:	d173      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007e98:	4b36      	ldr	r3, [pc, #216]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e9e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007ea2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eaa:	d104      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007eac:	f7fe f88a 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8007eb0:	6378      	str	r0, [r7, #52]	@ 0x34
 8007eb2:	f000 bdf7 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ebc:	d108      	bne.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ebe:	f107 0318 	add.w	r3, r7, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff f992 	bl	80071ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ecc:	f000 bdea 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007ed6:	f7fe f977 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 8007eda:	6378      	str	r0, [r7, #52]	@ 0x34
 8007edc:	f000 bde2 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ee6:	d122      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ee8:	4b22      	ldr	r3, [pc, #136]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d118      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007f00:	4b1c      	ldr	r3, [pc, #112]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	0e1b      	lsrs	r3, r3, #24
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	e006      	b.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007f0c:	4b19      	ldr	r3, [pc, #100]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	0e1b      	lsrs	r3, r3, #24
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	4a18      	ldr	r2, [pc, #96]	@ (8007f7c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f22:	f000 bdbf 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2a:	f000 bdbb 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007f2e:	4b11      	ldr	r3, [pc, #68]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f3a:	d107      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f42:	d103      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007f44:	4b0c      	ldr	r3, [pc, #48]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f48:	f000 bdac 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007f4c:	4b09      	ldr	r3, [pc, #36]	@ (8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f58:	d107      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f60:	d103      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007f62:	4b05      	ldr	r3, [pc, #20]	@ (8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f66:	f000 bd9d 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f6e:	f000 bd99 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007f72:	bf00      	nop
 8007f74:	46020c00 	.word	0x46020c00
 8007f78:	00f42400 	.word	0x00f42400
 8007f7c:	08010f08 	.word	0x08010f08
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f84:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	d158      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007f8c:	4bad      	ldr	r3, [pc, #692]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007f8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d84b      	bhi.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08007fdd 	.word	0x08007fdd
 8007fa8:	08007fb9 	.word	0x08007fb9
 8007fac:	08007fcb 	.word	0x08007fcb
 8007fb0:	08007fe7 	.word	0x08007fe7
 8007fb4:	08007ff1 	.word	0x08007ff1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe ffbb 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fc6:	f000 bd6d 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fa66 	bl	80074a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fd8:	f000 bd64 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007fdc:	f7fe f8f4 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 8007fe0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fe2:	f000 bd5f 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007fe6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fec:	f000 bd5a 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ff0:	4b94      	ldr	r3, [pc, #592]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d118      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ffc:	4b91      	ldr	r3, [pc, #580]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8008008:	4b8e      	ldr	r3, [pc, #568]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	0e1b      	lsrs	r3, r3, #24
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	e006      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8008014:	4b8b      	ldr	r3, [pc, #556]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	0e1b      	lsrs	r3, r3, #24
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	4a89      	ldr	r2, [pc, #548]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008028:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800802a:	f000 bd3b 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008032:	f000 bd37 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800803a:	f000 bd33 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800803e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008042:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008046:	430b      	orrs	r3, r1
 8008048:	d167      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800804a:	4b7e      	ldr	r3, [pc, #504]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800804c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008050:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008054:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800805c:	d036      	beq.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008064:	d855      	bhi.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800806c:	d029      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008074:	d84d      	bhi.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800807c:	d013      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800807e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008084:	d845      	bhi.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d015      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008092:	d13e      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe ff4d 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080a2:	f000 bcff 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080a6:	f107 030c 	add.w	r3, r7, #12
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff f9f8 	bl	80074a0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080b4:	f000 bcf6 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80080b8:	f7fe f886 	bl	80061c8 <HAL_RCC_GetHCLKFreq>
 80080bc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80080be:	f000 bcf1 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80080c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80080c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080c8:	f000 bcec 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d118      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80080e4:	4b57      	ldr	r3, [pc, #348]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	0e1b      	lsrs	r3, r3, #24
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	e006      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80080f0:	4b54      	ldr	r3, [pc, #336]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80080f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	0e1b      	lsrs	r3, r3, #24
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	4a52      	ldr	r2, [pc, #328]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008106:	f000 bccd 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800810e:	f000 bcc9 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008116:	f000 bcc5 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800811a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800811e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008122:	430b      	orrs	r3, r1
 8008124:	d14c      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008126:	4b47      	ldr	r3, [pc, #284]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800812c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008130:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008138:	f7fe f860 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 800813c:	6378      	str	r0, [r7, #52]	@ 0x34
 800813e:	f000 bcb1 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008148:	d104      	bne.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800814a:	f7fd ff3b 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 800814e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008150:	f000 bca8 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008154:	4b3b      	ldr	r3, [pc, #236]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800815c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008160:	d107      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8008162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008168:	d103      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800816a:	4b38      	ldr	r3, [pc, #224]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800816c:	637b      	str	r3, [r7, #52]	@ 0x34
 800816e:	f000 bc99 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008172:	4b34      	ldr	r3, [pc, #208]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b20      	cmp	r3, #32
 800817c:	d11c      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008184:	d118      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008186:	4b2f      	ldr	r3, [pc, #188]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8008192:	4b2c      	ldr	r3, [pc, #176]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	0e1b      	lsrs	r3, r3, #24
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800819e:	4b29      	ldr	r3, [pc, #164]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081a4:	041b      	lsls	r3, r3, #16
 80081a6:	0e1b      	lsrs	r3, r3, #24
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	4a26      	ldr	r2, [pc, #152]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80081ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b4:	f000 bc76 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80081bc:	f000 bc72 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80081c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80081c8:	430b      	orrs	r3, r1
 80081ca:	d152      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80081cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80081d6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d104      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80081de:	f7fe f80d 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 80081e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80081e4:	f000 bc5e 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ee:	d104      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80081f0:	f7fd fee8 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 80081f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80081f6:	f000 bc55 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80081fa:	4b12      	ldr	r3, [pc, #72]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008206:	d107      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800820e:	d103      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8008210:	4b0e      	ldr	r3, [pc, #56]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008212:	637b      	str	r3, [r7, #52]	@ 0x34
 8008214:	f000 bc46 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008218:	4b0a      	ldr	r3, [pc, #40]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b20      	cmp	r3, #32
 8008222:	d122      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800822a:	d11e      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8008238:	4b02      	ldr	r3, [pc, #8]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	0e1b      	lsrs	r3, r3, #24
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	e00c      	b.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8008244:	46020c00 	.word	0x46020c00
 8008248:	08010f08 	.word	0x08010f08
 800824c:	00f42400 	.word	0x00f42400
 8008250:	4ba1      	ldr	r3, [pc, #644]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008256:	041b      	lsls	r3, r3, #16
 8008258:	0e1b      	lsrs	r3, r3, #24
 800825a:	f003 030f 	and.w	r3, r3, #15
 800825e:	4a9f      	ldr	r2, [pc, #636]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008264:	637b      	str	r3, [r7, #52]	@ 0x34
 8008266:	f000 bc1d 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
 800826e:	f000 bc19 	b.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008276:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800827a:	430b      	orrs	r3, r1
 800827c:	d151      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800827e:	4b96      	ldr	r3, [pc, #600]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008284:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008288:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800828a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828c:	2bc0      	cmp	r3, #192	@ 0xc0
 800828e:	d024      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	2bc0      	cmp	r3, #192	@ 0xc0
 8008294:	d842      	bhi.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	2b80      	cmp	r3, #128	@ 0x80
 800829a:	d00d      	beq.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800829c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829e:	2b80      	cmp	r3, #128	@ 0x80
 80082a0:	d83c      	bhi.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	2b40      	cmp	r3, #64	@ 0x40
 80082ac:	d011      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80082ae:	e035      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80082b0:	f7fd ffcc 	bl	800624c <HAL_RCC_GetPCLK3Freq>
 80082b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082b6:	e3f5      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082b8:	4b87      	ldr	r3, [pc, #540]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c4:	d102      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80082c6:	4b86      	ldr	r3, [pc, #536]	@ (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082ca:	e3eb      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082d0:	e3e8      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80082d2:	f7fd fe77 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 80082d6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082d8:	e3e4      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082da:	4b7f      	ldr	r3, [pc, #508]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d117      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082e6:	4b7c      	ldr	r3, [pc, #496]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d005      	beq.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80082f2:	4b79      	ldr	r3, [pc, #484]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	0e1b      	lsrs	r3, r3, #24
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	e006      	b.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80082fe:	4b76      	ldr	r3, [pc, #472]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008304:	041b      	lsls	r3, r3, #16
 8008306:	0e1b      	lsrs	r3, r3, #24
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	4a73      	ldr	r2, [pc, #460]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800830e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008314:	e3c6      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800831a:	e3c3      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008320:	e3c0      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008326:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800832a:	430b      	orrs	r3, r1
 800832c:	d147      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800832e:	4b6a      	ldr	r3, [pc, #424]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008334:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008338:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008340:	f7fd ff5c 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8008344:	6378      	str	r0, [r7, #52]	@ 0x34
 8008346:	e3ad      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800834e:	d103      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008350:	f7fd fe38 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8008354:	6378      	str	r0, [r7, #52]	@ 0x34
 8008356:	e3a5      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008358:	4b5f      	ldr	r3, [pc, #380]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008364:	d106      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800836c:	d102      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800836e:	4b5c      	ldr	r3, [pc, #368]	@ (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008370:	637b      	str	r3, [r7, #52]	@ 0x34
 8008372:	e397      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008374:	4b58      	ldr	r3, [pc, #352]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b20      	cmp	r3, #32
 800837e:	d11b      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8008380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008382:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008386:	d117      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008388:	4b53      	ldr	r3, [pc, #332]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8008394:	4b50      	ldr	r3, [pc, #320]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	0e1b      	lsrs	r3, r3, #24
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	e006      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80083a0:	4b4d      	ldr	r3, [pc, #308]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	0e1b      	lsrs	r3, r3, #24
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	4a4b      	ldr	r2, [pc, #300]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b6:	e375      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80083bc:	e372      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80083be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083c2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80083c6:	430b      	orrs	r3, r1
 80083c8:	d164      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80083ca:	4b43      	ldr	r3, [pc, #268]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d120      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083dc:	4b3e      	ldr	r3, [pc, #248]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d117      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083e8:	4b3b      	ldr	r3, [pc, #236]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80083f4:	4b38      	ldr	r3, [pc, #224]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	0e1b      	lsrs	r3, r3, #24
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	e006      	b.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8008400:	4b35      	ldr	r3, [pc, #212]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008406:	041b      	lsls	r3, r3, #16
 8008408:	0e1b      	lsrs	r3, r3, #24
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	4a33      	ldr	r2, [pc, #204]	@ (80084dc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
 8008416:	e345      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	637b      	str	r3, [r7, #52]	@ 0x34
 800841c:	e342      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800841e:	4b2e      	ldr	r3, [pc, #184]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800842c:	d112      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800842e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008434:	d10e      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008436:	4b28      	ldr	r3, [pc, #160]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800843c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008444:	d102      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8008446:	23fa      	movs	r3, #250	@ 0xfa
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800844a:	e32b      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800844c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008450:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008452:	e327      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008454:	4b20      	ldr	r3, [pc, #128]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800845c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008460:	d106      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8008462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008468:	d102      	bne.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800846a:	4b1d      	ldr	r3, [pc, #116]	@ (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
 800846e:	e319      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008470:	4b19      	ldr	r3, [pc, #100]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d107      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008484:	d103      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8008486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800848a:	637b      	str	r3, [r7, #52]	@ 0x34
 800848c:	e30a      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	637b      	str	r3, [r7, #52]	@ 0x34
 8008492:	e307      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008498:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800849c:	430b      	orrs	r3, r1
 800849e:	d16b      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80084a0:	4b0d      	ldr	r3, [pc, #52]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80084aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d127      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084b2:	4b09      	ldr	r3, [pc, #36]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d11e      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084be:	4b06      	ldr	r3, [pc, #24]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80084ca:	4b03      	ldr	r3, [pc, #12]	@ (80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	0e1b      	lsrs	r3, r3, #24
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	e00d      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80084d6:	bf00      	nop
 80084d8:	46020c00 	.word	0x46020c00
 80084dc:	08010f08 	.word	0x08010f08
 80084e0:	00f42400 	.word	0x00f42400
 80084e4:	4b94      	ldr	r3, [pc, #592]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80084e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084ea:	041b      	lsls	r3, r3, #16
 80084ec:	0e1b      	lsrs	r3, r3, #24
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	4a92      	ldr	r2, [pc, #584]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80084f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fa:	e2d3      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008500:	e2d0      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008502:	4b8d      	ldr	r3, [pc, #564]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800850c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008510:	d112      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008518:	d10e      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800851a:	4b87      	ldr	r3, [pc, #540]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800851c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008528:	d102      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800852a:	23fa      	movs	r3, #250	@ 0xfa
 800852c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800852e:	e2b9      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008530:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008534:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008536:	e2b5      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008538:	4b7f      	ldr	r3, [pc, #508]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008544:	d106      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800854c:	d102      	bne.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800854e:	4b7c      	ldr	r3, [pc, #496]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008550:	637b      	str	r3, [r7, #52]	@ 0x34
 8008552:	e2a7      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008554:	4b78      	ldr	r3, [pc, #480]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b02      	cmp	r3, #2
 8008560:	d107      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008568:	d103      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800856a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800856e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008570:	e298      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34
 8008576:	e295      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008580:	430b      	orrs	r3, r1
 8008582:	d147      	bne.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008584:	4b6c      	ldr	r3, [pc, #432]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800858a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800858e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008596:	f7fd fe31 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 800859a:	6378      	str	r0, [r7, #52]	@ 0x34
 800859c:	e282      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800859e:	4b66      	ldr	r3, [pc, #408]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ac:	d112      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085b4:	d10e      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085b6:	4b60      	ldr	r3, [pc, #384]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085c4:	d102      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80085c6:	23fa      	movs	r3, #250	@ 0xfa
 80085c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085ca:	e26b      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80085cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80085d2:	e267      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80085d4:	4b58      	ldr	r3, [pc, #352]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e0:	d106      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80085e8:	d102      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80085ea:	4b55      	ldr	r3, [pc, #340]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ee:	e259      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80085f0:	4b51      	ldr	r3, [pc, #324]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80085f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d107      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008604:	d103      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8008606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
 800860c:	e24a      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	637b      	str	r3, [r7, #52]	@ 0x34
 8008612:	e247      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008618:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800861c:	430b      	orrs	r3, r1
 800861e:	d12d      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008620:	4b45      	ldr	r3, [pc, #276]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008626:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800862a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800862c:	4b42      	ldr	r3, [pc, #264]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008638:	d105      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800863a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8008640:	4b3f      	ldr	r3, [pc, #252]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
 8008644:	e22e      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800864c:	d107      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800864e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fc70 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865a:	637b      	str	r3, [r7, #52]	@ 0x34
 800865c:	e222      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008664:	d107      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008666:	f107 0318 	add.w	r3, r7, #24
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fdbe 	bl	80071ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	637b      	str	r3, [r7, #52]	@ 0x34
 8008674:	e216      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	637b      	str	r3, [r7, #52]	@ 0x34
 800867a:	e213      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800867c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008680:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008684:	430b      	orrs	r3, r1
 8008686:	d15d      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008688:	4b2b      	ldr	r3, [pc, #172]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800868a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800868e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008692:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800869a:	d028      	beq.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086a2:	d845      	bhi.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086aa:	d013      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086b2:	d83d      	bhi.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d004      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086c0:	d004      	beq.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80086c2:	e035      	b.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80086c4:	f7fd fdae 	bl	8006224 <HAL_RCC_GetPCLK2Freq>
 80086c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80086ca:	e1eb      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80086cc:	f7fd fc7a 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 80086d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80086d2:	e1e7      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086d4:	4b18      	ldr	r3, [pc, #96]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e0:	d102      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80086e2:	4b17      	ldr	r3, [pc, #92]	@ (8008740 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086e6:	e1dd      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086ec:	e1da      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80086ee:	4b12      	ldr	r3, [pc, #72]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	d117      	bne.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008706:	4b0c      	ldr	r3, [pc, #48]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	0e1b      	lsrs	r3, r3, #24
 800870c:	f003 030f 	and.w	r3, r3, #15
 8008710:	e006      	b.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8008712:	4b09      	ldr	r3, [pc, #36]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008718:	041b      	lsls	r3, r3, #16
 800871a:	0e1b      	lsrs	r3, r3, #24
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	4a06      	ldr	r2, [pc, #24]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008726:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008728:	e1bc      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800872e:	e1b9      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008734:	e1b6      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008736:	bf00      	nop
 8008738:	46020c00 	.word	0x46020c00
 800873c:	08010f08 	.word	0x08010f08
 8008740:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008748:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800874c:	430b      	orrs	r3, r1
 800874e:	d156      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008750:	4ba5      	ldr	r3, [pc, #660]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800875a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008762:	d028      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8008764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008766:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800876a:	d845      	bhi.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008772:	d013      	beq.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008776:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800877a:	d83d      	bhi.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008788:	d004      	beq.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800878a:	e035      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800878c:	f7fd fd36 	bl	80061fc <HAL_RCC_GetPCLK1Freq>
 8008790:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008792:	e187      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008794:	f7fd fc16 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8008798:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800879a:	e183      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800879c:	4b92      	ldr	r3, [pc, #584]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a8:	d102      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80087aa:	4b90      	ldr	r3, [pc, #576]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80087ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087ae:	e179      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087b4:	e176      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087b6:	4b8c      	ldr	r3, [pc, #560]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0320 	and.w	r3, r3, #32
 80087be:	2b20      	cmp	r3, #32
 80087c0:	d117      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087c2:	4b89      	ldr	r3, [pc, #548]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d005      	beq.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80087ce:	4b86      	ldr	r3, [pc, #536]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	0e1b      	lsrs	r3, r3, #24
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	e006      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80087da:	4b83      	ldr	r3, [pc, #524]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80087dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087e0:	041b      	lsls	r3, r3, #16
 80087e2:	0e1b      	lsrs	r3, r3, #24
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	4a81      	ldr	r2, [pc, #516]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80087ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087f0:	e158      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087f6:	e155      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087fc:	e152      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80087fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008802:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008806:	430b      	orrs	r3, r1
 8008808:	d177      	bne.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800880a:	4b77      	ldr	r3, [pc, #476]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800880c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008810:	f003 0318 	and.w	r3, r3, #24
 8008814:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	2b18      	cmp	r3, #24
 800881a:	d86b      	bhi.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800881c:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008889 	.word	0x08008889
 8008828:	080088f5 	.word	0x080088f5
 800882c:	080088f5 	.word	0x080088f5
 8008830:	080088f5 	.word	0x080088f5
 8008834:	080088f5 	.word	0x080088f5
 8008838:	080088f5 	.word	0x080088f5
 800883c:	080088f5 	.word	0x080088f5
 8008840:	080088f5 	.word	0x080088f5
 8008844:	08008891 	.word	0x08008891
 8008848:	080088f5 	.word	0x080088f5
 800884c:	080088f5 	.word	0x080088f5
 8008850:	080088f5 	.word	0x080088f5
 8008854:	080088f5 	.word	0x080088f5
 8008858:	080088f5 	.word	0x080088f5
 800885c:	080088f5 	.word	0x080088f5
 8008860:	080088f5 	.word	0x080088f5
 8008864:	08008899 	.word	0x08008899
 8008868:	080088f5 	.word	0x080088f5
 800886c:	080088f5 	.word	0x080088f5
 8008870:	080088f5 	.word	0x080088f5
 8008874:	080088f5 	.word	0x080088f5
 8008878:	080088f5 	.word	0x080088f5
 800887c:	080088f5 	.word	0x080088f5
 8008880:	080088f5 	.word	0x080088f5
 8008884:	080088b3 	.word	0x080088b3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008888:	f7fd fce0 	bl	800624c <HAL_RCC_GetPCLK3Freq>
 800888c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800888e:	e109      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008890:	f7fd fb98 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8008894:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008896:	e105      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008898:	4b53      	ldr	r3, [pc, #332]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a4:	d102      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80088a6:	4b51      	ldr	r3, [pc, #324]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088aa:	e0fb      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b0:	e0f8      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088b2:	4b4d      	ldr	r3, [pc, #308]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d117      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088be:	4b4a      	ldr	r3, [pc, #296]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d005      	beq.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80088ca:	4b47      	ldr	r3, [pc, #284]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	0e1b      	lsrs	r3, r3, #24
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	e006      	b.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80088d6:	4b44      	ldr	r3, [pc, #272]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80088d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088dc:	041b      	lsls	r3, r3, #16
 80088de:	0e1b      	lsrs	r3, r3, #24
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	4a42      	ldr	r2, [pc, #264]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80088e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088ec:	e0da      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088f2:	e0d7      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088f8:	e0d4      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80088fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fe:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008902:	430b      	orrs	r3, r1
 8008904:	d155      	bne.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008906:	4b38      	ldr	r3, [pc, #224]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800890c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008910:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008918:	d013      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008920:	d844      	bhi.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008928:	d013      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008930:	d83c      	bhi.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	2b00      	cmp	r3, #0
 8008936:	d014      	beq.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800893e:	d014      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008940:	e034      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008942:	f107 0318 	add.w	r3, r7, #24
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fc50 	bl	80071ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008950:	e0a8      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe faee 	bl	8006f38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008960:	e0a0      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008962:	f7fd fb2f 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8008966:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008968:	e09c      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800896a:	4b1f      	ldr	r3, [pc, #124]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b20      	cmp	r3, #32
 8008974:	d117      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008976:	4b1c      	ldr	r3, [pc, #112]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008982:	4b19      	ldr	r3, [pc, #100]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	0e1b      	lsrs	r3, r3, #24
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	e006      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800898e:	4b16      	ldr	r3, [pc, #88]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008994:	041b      	lsls	r3, r3, #16
 8008996:	0e1b      	lsrs	r3, r3, #24
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	4a14      	ldr	r2, [pc, #80]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800899e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089a4:	e07e      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089aa:	e07b      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b0:	e078      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80089b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80089ba:	430b      	orrs	r3, r1
 80089bc:	d138      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80089be:	4b0a      	ldr	r3, [pc, #40]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089c8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80089ca:	4b07      	ldr	r3, [pc, #28]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d10d      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 80089de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089e4:	e05e      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80089e6:	bf00      	nop
 80089e8:	46020c00 	.word	0x46020c00
 80089ec:	00f42400 	.word	0x00f42400
 80089f0:	08010f08 	.word	0x08010f08
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80089f4:	4b2e      	ldr	r3, [pc, #184]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80089f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a02:	d112      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a0a:	d10e      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a0c:	4b28      	ldr	r3, [pc, #160]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a1a:	d102      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008a1c:	23fa      	movs	r3, #250	@ 0xfa
 8008a1e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a20:	e040      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008a22:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a26:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a28:	e03c      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2e:	e039      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a34:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	d131      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008a3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008a46:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008a48:	4b19      	ldr	r3, [pc, #100]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a54:	d105      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008a5c:	4b15      	ldr	r3, [pc, #84]	@ (8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a60:	e020      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008a62:	4b13      	ldr	r3, [pc, #76]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a76:	d102      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008a78:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8008a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7c:	e012      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a8a:	d106      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a92:	d102      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008a94:	4b09      	ldr	r3, [pc, #36]	@ (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a98:	e004      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9e:	e001      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3738      	adds	r7, #56	@ 0x38
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	46020c00 	.word	0x46020c00
 8008ab4:	02dc6c00 	.word	0x02dc6c00
 8008ab8:	016e3600 	.word	0x016e3600
 8008abc:	00f42400 	.word	0x00f42400

08008ac0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008ac8:	4b47      	ldr	r3, [pc, #284]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a46      	ldr	r2, [pc, #280]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008ace:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ad2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ad4:	f7f9 fde6 	bl	80026a4 <HAL_GetTick>
 8008ad8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ada:	e008      	b.n	8008aee <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008adc:	f7f9 fde2 	bl	80026a4 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d901      	bls.n	8008aee <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e077      	b.n	8008bde <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008aee:	4b3e      	ldr	r3, [pc, #248]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008afa:	4b3b      	ldr	r3, [pc, #236]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6811      	ldr	r1, [r2, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	6852      	ldr	r2, [r2, #4]
 8008b0e:	3a01      	subs	r2, #1
 8008b10:	0212      	lsls	r2, r2, #8
 8008b12:	430a      	orrs	r2, r1
 8008b14:	4934      	ldr	r1, [pc, #208]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008b1a:	4b33      	ldr	r3, [pc, #204]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b1e:	4b33      	ldr	r3, [pc, #204]	@ (8008bec <RCCEx_PLL2_Config+0x12c>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6892      	ldr	r2, [r2, #8]
 8008b26:	3a01      	subs	r2, #1
 8008b28:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	68d2      	ldr	r2, [r2, #12]
 8008b30:	3a01      	subs	r2, #1
 8008b32:	0252      	lsls	r2, r2, #9
 8008b34:	b292      	uxth	r2, r2
 8008b36:	4311      	orrs	r1, r2
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6912      	ldr	r2, [r2, #16]
 8008b3c:	3a01      	subs	r2, #1
 8008b3e:	0412      	lsls	r2, r2, #16
 8008b40:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008b44:	4311      	orrs	r1, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6952      	ldr	r2, [r2, #20]
 8008b4a:	3a01      	subs	r2, #1
 8008b4c:	0612      	lsls	r2, r2, #24
 8008b4e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008b52:	430a      	orrs	r2, r1
 8008b54:	4924      	ldr	r1, [pc, #144]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008b5a:	4b23      	ldr	r3, [pc, #140]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b5e:	f023 020c 	bic.w	r2, r3, #12
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	4920      	ldr	r1, [pc, #128]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	491c      	ldr	r1, [pc, #112]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b80:	f023 0310 	bic.w	r3, r3, #16
 8008b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b86:	4b18      	ldr	r3, [pc, #96]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b8e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	69d2      	ldr	r2, [r2, #28]
 8008b96:	00d2      	lsls	r2, r2, #3
 8008b98:	4913      	ldr	r1, [pc, #76]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008b9e:	4b12      	ldr	r3, [pc, #72]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	4a11      	ldr	r2, [pc, #68]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008ba4:	f043 0310 	orr.w	r3, r3, #16
 8008ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008baa:	4b0f      	ldr	r3, [pc, #60]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a0e      	ldr	r2, [pc, #56]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008bb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bb4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008bb6:	f7f9 fd75 	bl	80026a4 <HAL_GetTick>
 8008bba:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bbc:	e008      	b.n	8008bd0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bbe:	f7f9 fd71 	bl	80026a4 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e006      	b.n	8008bde <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bd0:	4b05      	ldr	r3, [pc, #20]	@ (8008be8 <RCCEx_PLL2_Config+0x128>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0

}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	46020c00 	.word	0x46020c00
 8008bec:	80800000 	.word	0x80800000

08008bf0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008bf8:	4b47      	ldr	r3, [pc, #284]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a46      	ldr	r2, [pc, #280]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c02:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c04:	f7f9 fd4e 	bl	80026a4 <HAL_GetTick>
 8008c08:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c0a:	e008      	b.n	8008c1e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c0c:	f7f9 fd4a 	bl	80026a4 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e077      	b.n	8008d0e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1f0      	bne.n	8008c0c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008c32:	f023 0303 	bic.w	r3, r3, #3
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6811      	ldr	r1, [r2, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6852      	ldr	r2, [r2, #4]
 8008c3e:	3a01      	subs	r2, #1
 8008c40:	0212      	lsls	r2, r2, #8
 8008c42:	430a      	orrs	r2, r1
 8008c44:	4934      	ldr	r1, [pc, #208]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	630b      	str	r3, [r1, #48]	@ 0x30
 8008c4a:	4b33      	ldr	r3, [pc, #204]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c4e:	4b33      	ldr	r3, [pc, #204]	@ (8008d1c <RCCEx_PLL3_Config+0x12c>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6892      	ldr	r2, [r2, #8]
 8008c56:	3a01      	subs	r2, #1
 8008c58:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	68d2      	ldr	r2, [r2, #12]
 8008c60:	3a01      	subs	r2, #1
 8008c62:	0252      	lsls	r2, r2, #9
 8008c64:	b292      	uxth	r2, r2
 8008c66:	4311      	orrs	r1, r2
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6912      	ldr	r2, [r2, #16]
 8008c6c:	3a01      	subs	r2, #1
 8008c6e:	0412      	lsls	r2, r2, #16
 8008c70:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008c74:	4311      	orrs	r1, r2
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6952      	ldr	r2, [r2, #20]
 8008c7a:	3a01      	subs	r2, #1
 8008c7c:	0612      	lsls	r2, r2, #24
 8008c7e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008c82:	430a      	orrs	r2, r1
 8008c84:	4924      	ldr	r1, [pc, #144]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008c8a:	4b23      	ldr	r3, [pc, #140]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8e:	f023 020c 	bic.w	r2, r3, #12
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	4920      	ldr	r1, [pc, #128]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	491c      	ldr	r1, [pc, #112]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008caa:	4b1b      	ldr	r3, [pc, #108]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cae:	4a1a      	ldr	r2, [pc, #104]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008cb0:	f023 0310 	bic.w	r3, r3, #16
 8008cb4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cb6:	4b18      	ldr	r3, [pc, #96]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cbe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	69d2      	ldr	r2, [r2, #28]
 8008cc6:	00d2      	lsls	r2, r2, #3
 8008cc8:	4913      	ldr	r1, [pc, #76]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008cce:	4b12      	ldr	r3, [pc, #72]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd2:	4a11      	ldr	r2, [pc, #68]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008cd4:	f043 0310 	orr.w	r3, r3, #16
 8008cd8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008cda:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a0e      	ldr	r2, [pc, #56]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ce4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ce6:	f7f9 fcdd 	bl	80026a4 <HAL_GetTick>
 8008cea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cec:	e008      	b.n	8008d00 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cee:	f7f9 fcd9 	bl	80026a4 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e006      	b.n	8008d0e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d00:	4b05      	ldr	r3, [pc, #20]	@ (8008d18 <RCCEx_PLL3_Config+0x128>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0f0      	beq.n	8008cee <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	46020c00 	.word	0x46020c00
 8008d1c:	80800000 	.word	0x80800000

08008d20 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d904      	bls.n	8008d3e <HAL_SAI_InitProtocol+0x1e>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3b03      	subs	r3, #3
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d812      	bhi.n	8008d62 <HAL_SAI_InitProtocol+0x42>
 8008d3c:	e008      	b.n	8008d50 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fd33 	bl	80097b0 <SAI_InitI2S>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d4e:	e00b      	b.n	8008d68 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fddc 	bl	8009914 <SAI_InitPCM>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d60:	e002      	b.n	8008d68 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
      break;
 8008d66:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d104      	bne.n	8008d78 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f808 	bl	8008d84 <HAL_SAI_Init>
 8008d74:	4603      	mov	r3, r0
 8008d76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08a      	sub	sp, #40	@ 0x28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e1ce      	b.n	8009134 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d10e      	bne.n	8008dbe <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a83      	ldr	r2, [pc, #524]	@ (8008fb4 <HAL_SAI_Init+0x230>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d107      	bne.n	8008dba <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d103      	bne.n	8008dba <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e1ba      	b.n	8009134 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d106      	bne.n	8008dd8 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7f8 fe16 	bl	8001a04 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fe55 	bl	8009a88 <SAI_Disable>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e1a5      	b.n	8009134 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d00c      	beq.n	8008e12 <HAL_SAI_Init+0x8e>
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d80d      	bhi.n	8008e18 <HAL_SAI_Init+0x94>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <HAL_SAI_Init+0x82>
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d003      	beq.n	8008e0c <HAL_SAI_Init+0x88>
 8008e04:	e008      	b.n	8008e18 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008e0a:	e008      	b.n	8008e1e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008e0c:	2310      	movs	r3, #16
 8008e0e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008e10:	e005      	b.n	8008e1e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008e12:	2320      	movs	r3, #32
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008e16:	e002      	b.n	8008e1e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008e1c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d81d      	bhi.n	8008e62 <HAL_SAI_Init+0xde>
 8008e26:	a201      	add	r2, pc, #4	@ (adr r2, 8008e2c <HAL_SAI_Init+0xa8>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e3d 	.word	0x08008e3d
 8008e30:	08008e43 	.word	0x08008e43
 8008e34:	08008e4b 	.word	0x08008e4b
 8008e38:	08008e53 	.word	0x08008e53
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61fb      	str	r3, [r7, #28]
      break;
 8008e40:	e012      	b.n	8008e68 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e46:	61fb      	str	r3, [r7, #28]
      break;
 8008e48:	e00e      	b.n	8008e68 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008e4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e4e:	61fb      	str	r3, [r7, #28]
      break;
 8008e50:	e00a      	b.n	8008e68 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008e52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e56:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5a:	f043 0301 	orr.w	r3, r3, #1
 8008e5e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008e60:	e002      	b.n	8008e68 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
      break;
 8008e66:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a51      	ldr	r2, [pc, #324]	@ (8008fb4 <HAL_SAI_Init+0x230>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <HAL_SAI_Init+0xf8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a50      	ldr	r2, [pc, #320]	@ (8008fb8 <HAL_SAI_Init+0x234>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d103      	bne.n	8008e84 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8008fbc <HAL_SAI_Init+0x238>)
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	e002      	b.n	8008e8a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008e84:	4a4e      	ldr	r2, [pc, #312]	@ (8008fc0 <HAL_SAI_Init+0x23c>)
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d077      	beq.n	8008f82 <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a47      	ldr	r2, [pc, #284]	@ (8008fb4 <HAL_SAI_Init+0x230>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d004      	beq.n	8008ea6 <HAL_SAI_Init+0x122>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a45      	ldr	r2, [pc, #276]	@ (8008fb8 <HAL_SAI_Init+0x234>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d107      	bne.n	8008eb6 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008ea6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008eaa:	f04f 0100 	mov.w	r1, #0
 8008eae:	f7fe fc51 	bl	8007754 <HAL_RCCEx_GetPeriphCLKFreq>
 8008eb2:	61b8      	str	r0, [r7, #24]
 8008eb4:	e006      	b.n	8008ec4 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008eb6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008eba:	f04f 0100 	mov.w	r1, #0
 8008ebe:	f7fe fc49 	bl	8007754 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ec2:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008ecc:	d120      	bne.n	8008f10 <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d102      	bne.n	8008edc <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008ed6:	2340      	movs	r3, #64	@ 0x40
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	e00a      	b.n	8008ef2 <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d103      	bne.n	8008eec <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ee8:	613b      	str	r3, [r7, #16]
 8008eea:	e002      	b.n	8008ef2 <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	4619      	mov	r1, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	fb02 f303 	mul.w	r3, r2, r3
 8008f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	e017      	b.n	8008f40 <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f18:	d101      	bne.n	8008f1e <HAL_SAI_Init+0x19a>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e000      	b.n	8008f20 <HAL_SAI_Init+0x19c>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	fb02 f303 	mul.w	r3, r2, r3
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f3e:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	4a20      	ldr	r2, [pc, #128]	@ (8008fc4 <HAL_SAI_Init+0x240>)
 8008f44:	fba2 2303 	umull	r2, r3, r2, r3
 8008f48:	08da      	lsrs	r2, r3, #3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008f4e:	6979      	ldr	r1, [r7, #20]
 8008f50:	4b1c      	ldr	r3, [pc, #112]	@ (8008fc4 <HAL_SAI_Init+0x240>)
 8008f52:	fba3 2301 	umull	r2, r3, r3, r1
 8008f56:	08da      	lsrs	r2, r3, #3
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	1aca      	subs	r2, r1, r3
 8008f62:	2a08      	cmp	r2, #8
 8008f64:	d904      	bls.n	8008f70 <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d104      	bne.n	8008f82 <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	085a      	lsrs	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <HAL_SAI_Init+0x20e>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d109      	bne.n	8008fa6 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <HAL_SAI_Init+0x21a>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e001      	b.n	8008fa2 <HAL_SAI_Init+0x21e>
 8008f9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fa2:	623b      	str	r3, [r7, #32]
 8008fa4:	e012      	b.n	8008fcc <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d10c      	bne.n	8008fc8 <HAL_SAI_Init+0x244>
 8008fae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fb2:	e00a      	b.n	8008fca <HAL_SAI_Init+0x246>
 8008fb4:	40015404 	.word	0x40015404
 8008fb8:	40015424 	.word	0x40015424
 8008fbc:	40015400 	.word	0x40015400
 8008fc0:	40015800 	.word	0x40015800
 8008fc4:	cccccccd 	.word	0xcccccccd
 8008fc8:	2300      	movs	r3, #0
 8008fca:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6819      	ldr	r1, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	4b59      	ldr	r3, [pc, #356]	@ (800913c <HAL_SAI_Init+0x3b8>)
 8008fd8:	400b      	ands	r3, r1
 8008fda:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fea:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ff0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8009004:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009010:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	051b      	lsls	r3, r3, #20
 8009018:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800901e:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	6812      	ldr	r2, [r2, #0]
 8009038:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800903c:	f023 030f 	bic.w	r3, r3, #15
 8009040:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6859      	ldr	r1, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6899      	ldr	r1, [r3, #8]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	4b35      	ldr	r3, [pc, #212]	@ (8009140 <HAL_SAI_Init+0x3bc>)
 800906c:	400b      	ands	r3, r1
 800906e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6899      	ldr	r1, [r3, #8]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800907a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009080:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8009086:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800908c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009092:	3b01      	subs	r3, #1
 8009094:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009096:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68d9      	ldr	r1, [r3, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80090ae:	400b      	ands	r3, r1
 80090b0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68d9      	ldr	r1, [r3, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090c0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80090c8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ce:	3b01      	subs	r3, #1
 80090d0:	021b      	lsls	r3, r3, #8
 80090d2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	430a      	orrs	r2, r1
 80090da:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a18      	ldr	r2, [pc, #96]	@ (8009144 <HAL_SAI_Init+0x3c0>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d119      	bne.n	800911a <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80090e6:	4b18      	ldr	r3, [pc, #96]	@ (8009148 <HAL_SAI_Init+0x3c4>)
 80090e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ea:	4a17      	ldr	r2, [pc, #92]	@ (8009148 <HAL_SAI_Init+0x3c4>)
 80090ec:	f023 0301 	bic.w	r3, r3, #1
 80090f0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d10e      	bne.n	800911a <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009104:	3b01      	subs	r3, #1
 8009106:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009108:	490f      	ldr	r1, [pc, #60]	@ (8009148 <HAL_SAI_Init+0x3c4>)
 800910a:	4313      	orrs	r3, r2
 800910c:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800910e:	4b0e      	ldr	r3, [pc, #56]	@ (8009148 <HAL_SAI_Init+0x3c4>)
 8009110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009112:	4a0d      	ldr	r2, [pc, #52]	@ (8009148 <HAL_SAI_Init+0x3c4>)
 8009114:	f043 0301 	orr.w	r3, r3, #1
 8009118:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3728      	adds	r7, #40	@ 0x28
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	f005c010 	.word	0xf005c010
 8009140:	fff88000 	.word	0xfff88000
 8009144:	40015404 	.word	0x40015404
 8009148:	40015400 	.word	0x40015400

0800914c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_SAI_Abort+0x1a>
 8009162:	2302      	movs	r3, #2
 8009164:	e07d      	b.n	8009262 <HAL_SAI_Abort+0x116>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fc8a 	bl	8009a88 <SAI_Disable>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800918c:	d14f      	bne.n	800922e <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800919c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b12      	cmp	r3, #18
 80091a8:	d11d      	bne.n	80091e6 <HAL_SAI_Abort+0x9a>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d018      	beq.n	80091e6 <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fa f802 	bl	80031c4 <HAL_DMA_Abort>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00f      	beq.n	80091e6 <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d009      	beq.n	80091e6 <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b22      	cmp	r3, #34	@ 0x22
 80091f0:	d11d      	bne.n	800922e <HAL_SAI_Abort+0xe2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d018      	beq.n	800922e <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009202:	4618      	mov	r0, r3
 8009204:	f7f9 ffde 	bl	80031c4 <HAL_DMA_Abort>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00f      	beq.n	800922e <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009216:	2b20      	cmp	r3, #32
 8009218:	d009      	beq.n	800922e <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009224:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f04f 32ff 	mov.w	r2, #4294967295
 800923e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0208 	orr.w	r2, r2, #8
 800924e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <HAL_SAI_Receive_DMA+0x1a>
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e0c6      	b.n	8009418 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b01      	cmp	r3, #1
 8009294:	f040 80bf 	bne.w	8009416 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_SAI_Receive_DMA+0x3a>
 80092a2:	2302      	movs	r3, #2
 80092a4:	e0b8      	b.n	8009418 <HAL_SAI_Receive_DMA+0x1ac>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	88fa      	ldrh	r2, [r7, #6]
 80092b8:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	88fa      	ldrh	r2, [r7, #6]
 80092c0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2222      	movs	r2, #34	@ 0x22
 80092d0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092da:	4a51      	ldr	r2, [pc, #324]	@ (8009420 <HAL_SAI_Receive_DMA+0x1b4>)
 80092dc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092e4:	4a4f      	ldr	r2, [pc, #316]	@ (8009424 <HAL_SAI_Receive_DMA+0x1b8>)
 80092e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009428 <HAL_SAI_Receive_DMA+0x1bc>)
 80092f0:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092f8:	2200      	movs	r2, #0
 80092fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009300:	2b40      	cmp	r3, #64	@ 0x40
 8009302:	d106      	bne.n	8009312 <HAL_SAI_Receive_DMA+0xa6>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	613b      	str	r3, [r7, #16]
 8009310:	e00a      	b.n	8009328 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009316:	2b80      	cmp	r3, #128	@ 0x80
 8009318:	d803      	bhi.n	8009322 <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 800931a:	88fb      	ldrh	r3, [r7, #6]
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	613b      	str	r3, [r7, #16]
 8009320:	e002      	b.n	8009328 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800932e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009334:	2b00      	cmp	r3, #0
 8009336:	d02d      	beq.n	8009394 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800933e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009340:	2b00      	cmp	r3, #0
 8009342:	d021      	beq.n	8009388 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800934a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f103 021c 	add.w	r2, r3, #28
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800937c:	4618      	mov	r0, r3
 800937e:	f7fa fab5 	bl	80038ec <HAL_DMAEx_List_Start_IT>
 8009382:	4603      	mov	r3, r0
 8009384:	75fb      	strb	r3, [r7, #23]
 8009386:	e014      	b.n	80093b2 <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e041      	b.n	8009418 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	331c      	adds	r3, #28
 80093a0:	4619      	mov	r1, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093a6:	461a      	mov	r2, r3
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f7f9 feab 	bl	8003104 <HAL_DMA_Start_IT>
 80093ae:	4603      	mov	r3, r0
 80093b0:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d005      	beq.n	80093c4 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e029      	b.n	8009418 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80093c4:	2100      	movs	r1, #0
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fb26 	bl	8009a18 <SAI_InterruptFlag>
 80093cc:	4601      	mov	r1, r0
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691a      	ldr	r2, [r3, #16]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80093ea:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d107      	bne.n	800940a <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009408:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	e000      	b.n	8009418 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 8009416:	2302      	movs	r3, #2
  }
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	08009b5b 	.word	0x08009b5b
 8009424:	08009afd 	.word	0x08009afd
 8009428:	08009b77 	.word	0x08009b77

0800942c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 81a7 	beq.w	8009790 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f003 0308 	and.w	r3, r3, #8
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00a      	beq.n	800947a <HAL_SAI_IRQHandler+0x4e>
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	4798      	blx	r3
 8009478:	e18a      	b.n	8009790 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01e      	beq.n	80094c2 <HAL_SAI_IRQHandler+0x96>
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	d019      	beq.n	80094c2 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2201      	movs	r2, #1
 8009494:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b22      	cmp	r3, #34	@ 0x22
 80094a0:	d101      	bne.n	80094a6 <HAL_SAI_IRQHandler+0x7a>
 80094a2:	2301      	movs	r3, #1
 80094a4:	e000      	b.n	80094a8 <HAL_SAI_IRQHandler+0x7c>
 80094a6:	2302      	movs	r3, #2
 80094a8:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f96e 	bl	800979c <HAL_SAI_ErrorCallback>
 80094c0:	e166      	b.n	8009790 <HAL_SAI_IRQHandler+0x364>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d013      	beq.n	80094f4 <HAL_SAI_IRQHandler+0xc8>
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00e      	beq.n	80094f4 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2202      	movs	r2, #2
 80094dc:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 8153 	beq.w	8009790 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f0:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80094f2:	e14d      	b.n	8009790 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d05b      	beq.n	80095b6 <HAL_SAI_IRQHandler+0x18a>
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d056      	beq.n	80095b6 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2220      	movs	r2, #32
 800950e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009516:	f043 0204 	orr.w	r2, r3, #4
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d03e      	beq.n	80095a8 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009530:	2b00      	cmp	r3, #0
 8009532:	d018      	beq.n	8009566 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800953a:	4a97      	ldr	r2, [pc, #604]	@ (8009798 <HAL_SAI_IRQHandler+0x36c>)
 800953c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009544:	4618      	mov	r0, r3
 8009546:	f7f9 feb9 	bl	80032bc <HAL_DMA_Abort_IT>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00a      	beq.n	8009566 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009556:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f91b 	bl	800979c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 810a 	beq.w	8009786 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009578:	4a87      	ldr	r2, [pc, #540]	@ (8009798 <HAL_SAI_IRQHandler+0x36c>)
 800957a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009582:	4618      	mov	r0, r3
 8009584:	f7f9 fe9a 	bl	80032bc <HAL_DMA_Abort_IT>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 80fb 	beq.w	8009786 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009596:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f8fb 	bl	800979c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095a6:	e0ee      	b.n	8009786 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff fdcf 	bl	800914c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f8f4 	bl	800979c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095b4:	e0e7      	b.n	8009786 <HAL_SAI_IRQHandler+0x35a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d05b      	beq.n	8009678 <HAL_SAI_IRQHandler+0x24c>
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d056      	beq.n	8009678 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2240      	movs	r2, #64	@ 0x40
 80095d0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095d8:	f043 0208 	orr.w	r2, r3, #8
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d03e      	beq.n	800966a <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d018      	beq.n	8009628 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095fc:	4a66      	ldr	r2, [pc, #408]	@ (8009798 <HAL_SAI_IRQHandler+0x36c>)
 80095fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009606:	4618      	mov	r0, r3
 8009608:	f7f9 fe58 	bl	80032bc <HAL_DMA_Abort_IT>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009618:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f8ba 	bl	800979c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 80ab 	beq.w	800978a <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800963a:	4a57      	ldr	r2, [pc, #348]	@ (8009798 <HAL_SAI_IRQHandler+0x36c>)
 800963c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009644:	4618      	mov	r0, r3
 8009646:	f7f9 fe39 	bl	80032bc <HAL_DMA_Abort_IT>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 809c 	beq.w	800978a <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009658:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f89a 	bl	800979c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009668:	e08f      	b.n	800978a <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff fd6e 	bl	800914c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f893 	bl	800979c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009676:	e088      	b.n	800978a <HAL_SAI_IRQHandler+0x35e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	d067      	beq.n	8009752 <HAL_SAI_IRQHandler+0x326>
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b00      	cmp	r3, #0
 800968a:	d062      	beq.n	8009752 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2204      	movs	r2, #4
 8009692:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800969a:	f043 0220 	orr.w	r2, r3, #32
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d03c      	beq.n	8009728 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d018      	beq.n	80096ea <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096be:	4a36      	ldr	r2, [pc, #216]	@ (8009798 <HAL_SAI_IRQHandler+0x36c>)
 80096c0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7f9 fdf7 	bl	80032bc <HAL_DMA_Abort_IT>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00a      	beq.n	80096ea <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f859 	bl	800979c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d04c      	beq.n	800978e <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096fa:	4a27      	ldr	r2, [pc, #156]	@ (8009798 <HAL_SAI_IRQHandler+0x36c>)
 80096fc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009704:	4618      	mov	r0, r3
 8009706:	f7f9 fdd9 	bl	80032bc <HAL_DMA_Abort_IT>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d03e      	beq.n	800978e <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009716:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f83b 	bl	800979c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009726:	e032      	b.n	800978e <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2200      	movs	r2, #0
 800972e:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f04f 32ff 	mov.w	r2, #4294967295
 8009738:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f826 	bl	800979c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009750:	e01d      	b.n	800978e <HAL_SAI_IRQHandler+0x362>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f003 0310 	and.w	r3, r3, #16
 8009758:	2b00      	cmp	r3, #0
 800975a:	d019      	beq.n	8009790 <HAL_SAI_IRQHandler+0x364>
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f003 0310 	and.w	r3, r3, #16
 8009762:	2b00      	cmp	r3, #0
 8009764:	d014      	beq.n	8009790 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2210      	movs	r2, #16
 800976c:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009774:	f043 0210 	orr.w	r2, r3, #16
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f80c 	bl	800979c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8009784:	e004      	b.n	8009790 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009786:	bf00      	nop
 8009788:	e002      	b.n	8009790 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800978a:	bf00      	nop
 800978c:	e000      	b.n	8009790 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800978e:	bf00      	nop
}
 8009790:	bf00      	nop
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	08009bc9 	.word	0x08009bc9

0800979c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <SAI_InitI2S+0x2e>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d103      	bne.n	80097e6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80097e4:	e002      	b.n	80097ec <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80097f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097fa:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e077      	b.n	8009906 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d107      	bne.n	800982c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009828:	665a      	str	r2, [r3, #100]	@ 0x64
 800982a:	e006      	b.n	800983a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009832:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b03      	cmp	r3, #3
 800983e:	d84f      	bhi.n	80098e0 <SAI_InitI2S+0x130>
 8009840:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <SAI_InitI2S+0x98>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	08009859 	.word	0x08009859
 800984c:	0800987b 	.word	0x0800987b
 8009850:	0800989d 	.word	0x0800989d
 8009854:	080098bf 	.word	0x080098bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2280      	movs	r2, #128	@ 0x80
 800985c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	085b      	lsrs	r3, r3, #1
 800986c:	011a      	lsls	r2, r3, #4
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2240      	movs	r2, #64	@ 0x40
 8009876:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009878:	e035      	b.n	80098e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2280      	movs	r2, #128	@ 0x80
 800987e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	085b      	lsrs	r3, r3, #1
 8009884:	019a      	lsls	r2, r3, #6
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	085b      	lsrs	r3, r3, #1
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2280      	movs	r2, #128	@ 0x80
 8009898:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800989a:	e024      	b.n	80098e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	22c0      	movs	r2, #192	@ 0xc0
 80098a0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	085b      	lsrs	r3, r3, #1
 80098a6:	019a      	lsls	r2, r3, #6
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	085b      	lsrs	r3, r3, #1
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2280      	movs	r2, #128	@ 0x80
 80098ba:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80098bc:	e013      	b.n	80098e6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	22e0      	movs	r2, #224	@ 0xe0
 80098c2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	085b      	lsrs	r3, r3, #1
 80098c8:	019a      	lsls	r2, r3, #6
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	085b      	lsrs	r3, r3, #1
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2280      	movs	r2, #128	@ 0x80
 80098dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80098de:	e002      	b.n	80098e6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]
      break;
 80098e4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d10b      	bne.n	8009904 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d102      	bne.n	80098f8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2210      	movs	r2, #16
 80098f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d102      	bne.n	8009904 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2208      	movs	r2, #8
 8009902:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
}
 8009906:	4618      	mov	r0, r3
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop

08009914 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <SAI_InitPCM+0x2e>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d103      	bne.n	800994a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	651a      	str	r2, [r3, #80]	@ 0x50
 8009948:	e002      	b.n	8009950 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800995c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009964:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009978:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b04      	cmp	r3, #4
 800997e:	d103      	bne.n	8009988 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	659a      	str	r2, [r3, #88]	@ 0x58
 8009986:	e002      	b.n	800998e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	220d      	movs	r2, #13
 800998c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b03      	cmp	r3, #3
 8009992:	d837      	bhi.n	8009a04 <SAI_InitPCM+0xf0>
 8009994:	a201      	add	r2, pc, #4	@ (adr r2, 800999c <SAI_InitPCM+0x88>)
 8009996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999a:	bf00      	nop
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099c3 	.word	0x080099c3
 80099a4:	080099d9 	.word	0x080099d9
 80099a8:	080099ef 	.word	0x080099ef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2280      	movs	r2, #128	@ 0x80
 80099b0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	011a      	lsls	r2, r3, #4
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2240      	movs	r2, #64	@ 0x40
 80099be:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80099c0:	e023      	b.n	8009a0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2280      	movs	r2, #128	@ 0x80
 80099c6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2280      	movs	r2, #128	@ 0x80
 80099d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80099d6:	e018      	b.n	8009a0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	22c0      	movs	r2, #192	@ 0xc0
 80099dc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2280      	movs	r2, #128	@ 0x80
 80099ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80099ec:	e00d      	b.n	8009a0a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	22e0      	movs	r2, #224	@ 0xe0
 80099f2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2280      	movs	r2, #128	@ 0x80
 8009a00:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009a02:	e002      	b.n	8009a0a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]
      break;
 8009a08:	bf00      	nop
  }

  return status;
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d103      	bne.n	8009a36 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f043 0308 	orr.w	r3, r3, #8
 8009a34:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a3a:	2b08      	cmp	r3, #8
 8009a3c:	d10b      	bne.n	8009a56 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d003      	beq.n	8009a4e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d103      	bne.n	8009a56 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f043 0310 	orr.w	r3, r3, #16
 8009a54:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d003      	beq.n	8009a66 <SAI_InterruptFlag+0x4e>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d104      	bne.n	8009a70 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	e003      	b.n	8009a78 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f043 0304 	orr.w	r3, r3, #4
 8009a76:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009a78:	68fb      	ldr	r3, [r7, #12]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
	...

08009a88 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009a90:	4b18      	ldr	r3, [pc, #96]	@ (8009af4 <SAI_Disable+0x6c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a18      	ldr	r2, [pc, #96]	@ (8009af8 <SAI_Disable+0x70>)
 8009a96:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9a:	0b1b      	lsrs	r3, r3, #12
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009ab2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10a      	bne.n	8009ad0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ac0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	72fb      	strb	r3, [r7, #11]
      break;
 8009ace:	e009      	b.n	8009ae4 <SAI_Disable+0x5c>
    }
    count--;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e7      	bne.n	8009ab4 <SAI_Disable+0x2c>

  return status;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000000 	.word	0x20000000
 8009af8:	95cbec1b 	.word	0x95cbec1b

08009afc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b0e:	2b81      	cmp	r3, #129	@ 0x81
 8009b10:	d01c      	beq.n	8009b4c <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009b20:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff ff73 	bl	8009a18 <SAI_InterruptFlag>
 8009b32:	4603      	mov	r3, r0
 8009b34:	43d9      	mvns	r1, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	691a      	ldr	r2, [r3, #16]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	400a      	ands	r2, r1
 8009b42:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7f7 fef5 	bl	800193c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009b52:	bf00      	nop
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b66:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f7f7 fed1 	bl	8001910 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009b6e:	bf00      	nop
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b82:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009ba2:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff ff6f 	bl	8009a88 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f7ff fdee 	bl	800979c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009bc0:	bf00      	nop
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bd4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009be4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2200      	movs	r2, #0
 8009bec:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf6:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d00a      	beq.n	8009c18 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff ff40 	bl	8009a88 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f042 0208 	orr.w	r2, r2, #8
 8009c16:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7ff fdb7 	bl	800979c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009c2e:	bf00      	nop
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e049      	b.n	8009cdc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d106      	bne.n	8009c62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f841 	bl	8009ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2202      	movs	r2, #2
 8009c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f000 fa57 	bl	800a128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d001      	beq.n	8009d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e072      	b.n	8009df6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0201 	orr.w	r2, r2, #1
 8009d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a35      	ldr	r2, [pc, #212]	@ (8009e04 <HAL_TIM_Base_Start_IT+0x10c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d040      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a34      	ldr	r2, [pc, #208]	@ (8009e08 <HAL_TIM_Base_Start_IT+0x110>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d03b      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d44:	d036      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d4e:	d031      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2d      	ldr	r2, [pc, #180]	@ (8009e0c <HAL_TIM_Base_Start_IT+0x114>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d02c      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8009e10 <HAL_TIM_Base_Start_IT+0x118>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d027      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a2a      	ldr	r2, [pc, #168]	@ (8009e14 <HAL_TIM_Base_Start_IT+0x11c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d022      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a29      	ldr	r2, [pc, #164]	@ (8009e18 <HAL_TIM_Base_Start_IT+0x120>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d01d      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a27      	ldr	r2, [pc, #156]	@ (8009e1c <HAL_TIM_Base_Start_IT+0x124>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d018      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a26      	ldr	r2, [pc, #152]	@ (8009e20 <HAL_TIM_Base_Start_IT+0x128>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d013      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a24      	ldr	r2, [pc, #144]	@ (8009e24 <HAL_TIM_Base_Start_IT+0x12c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d00e      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a23      	ldr	r2, [pc, #140]	@ (8009e28 <HAL_TIM_Base_Start_IT+0x130>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d009      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a21      	ldr	r2, [pc, #132]	@ (8009e2c <HAL_TIM_Base_Start_IT+0x134>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d004      	beq.n	8009db4 <HAL_TIM_Base_Start_IT+0xbc>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a20      	ldr	r2, [pc, #128]	@ (8009e30 <HAL_TIM_Base_Start_IT+0x138>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d115      	bne.n	8009de0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	4b1e      	ldr	r3, [pc, #120]	@ (8009e34 <HAL_TIM_Base_Start_IT+0x13c>)
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b06      	cmp	r3, #6
 8009dc4:	d015      	beq.n	8009df2 <HAL_TIM_Base_Start_IT+0xfa>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dcc:	d011      	beq.n	8009df2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0201 	orr.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dde:	e008      	b.n	8009df2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0201 	orr.w	r2, r2, #1
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	e000      	b.n	8009df4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	40012c00 	.word	0x40012c00
 8009e08:	50012c00 	.word	0x50012c00
 8009e0c:	40000400 	.word	0x40000400
 8009e10:	50000400 	.word	0x50000400
 8009e14:	40000800 	.word	0x40000800
 8009e18:	50000800 	.word	0x50000800
 8009e1c:	40000c00 	.word	0x40000c00
 8009e20:	50000c00 	.word	0x50000c00
 8009e24:	40013400 	.word	0x40013400
 8009e28:	50013400 	.word	0x50013400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	50014000 	.word	0x50014000
 8009e34:	00010007 	.word	0x00010007

08009e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d020      	beq.n	8009e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01b      	beq.n	8009e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f06f 0202 	mvn.w	r2, #2
 8009e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f931 	bl	800a0ea <HAL_TIM_IC_CaptureCallback>
 8009e88:	e005      	b.n	8009e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f923 	bl	800a0d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f934 	bl	800a0fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f003 0304 	and.w	r3, r3, #4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d020      	beq.n	8009ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d01b      	beq.n	8009ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0204 	mvn.w	r2, #4
 8009eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f90b 	bl	800a0ea <HAL_TIM_IC_CaptureCallback>
 8009ed4:	e005      	b.n	8009ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f8fd 	bl	800a0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f90e 	bl	800a0fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f003 0308 	and.w	r3, r3, #8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d020      	beq.n	8009f34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f003 0308 	and.w	r3, r3, #8
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01b      	beq.n	8009f34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f06f 0208 	mvn.w	r2, #8
 8009f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	f003 0303 	and.w	r3, r3, #3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f8e5 	bl	800a0ea <HAL_TIM_IC_CaptureCallback>
 8009f20:	e005      	b.n	8009f2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f8d7 	bl	800a0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f8e8 	bl	800a0fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f003 0310 	and.w	r3, r3, #16
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d020      	beq.n	8009f80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01b      	beq.n	8009f80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f06f 0210 	mvn.w	r2, #16
 8009f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2208      	movs	r2, #8
 8009f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f8bf 	bl	800a0ea <HAL_TIM_IC_CaptureCallback>
 8009f6c:	e005      	b.n	8009f7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8b1 	bl	800a0d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f8c2 	bl	800a0fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00c      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d007      	beq.n	8009fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f06f 0201 	mvn.w	r2, #1
 8009f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7f7 fce2 	bl	8001968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d104      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00c      	beq.n	8009fd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f9b5 	bl	800a33c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00c      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d007      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f9ad 	bl	800a350 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00c      	beq.n	800a01a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f87c 	bl	800a112 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f003 0320 	and.w	r3, r3, #32
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f003 0320 	and.w	r3, r3, #32
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d007      	beq.n	800a03e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f06f 0220 	mvn.w	r2, #32
 800a036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f975 	bl	800a328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00c      	beq.n	800a062 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a05a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f981 	bl	800a364 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00c      	beq.n	800a086 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d007      	beq.n	800a086 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a07e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f979 	bl	800a378 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00c      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f971 	bl	800a38c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00c      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a0c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f969 	bl	800a3a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0ce:	bf00      	nop
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0f2:	bf00      	nop
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a106:	bf00      	nop
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a6b      	ldr	r2, [pc, #428]	@ (800a2e8 <TIM_Base_SetConfig+0x1c0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d02b      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a6a      	ldr	r2, [pc, #424]	@ (800a2ec <TIM_Base_SetConfig+0x1c4>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d027      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a14e:	d023      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a156:	d01f      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a65      	ldr	r2, [pc, #404]	@ (800a2f0 <TIM_Base_SetConfig+0x1c8>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d01b      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a64      	ldr	r2, [pc, #400]	@ (800a2f4 <TIM_Base_SetConfig+0x1cc>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d017      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a63      	ldr	r2, [pc, #396]	@ (800a2f8 <TIM_Base_SetConfig+0x1d0>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d013      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a62      	ldr	r2, [pc, #392]	@ (800a2fc <TIM_Base_SetConfig+0x1d4>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d00f      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a61      	ldr	r2, [pc, #388]	@ (800a300 <TIM_Base_SetConfig+0x1d8>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00b      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a60      	ldr	r2, [pc, #384]	@ (800a304 <TIM_Base_SetConfig+0x1dc>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d007      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a5f      	ldr	r2, [pc, #380]	@ (800a308 <TIM_Base_SetConfig+0x1e0>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d003      	beq.n	800a198 <TIM_Base_SetConfig+0x70>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a5e      	ldr	r2, [pc, #376]	@ (800a30c <TIM_Base_SetConfig+0x1e4>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d108      	bne.n	800a1aa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a19e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a4e      	ldr	r2, [pc, #312]	@ (800a2e8 <TIM_Base_SetConfig+0x1c0>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d043      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a4d      	ldr	r2, [pc, #308]	@ (800a2ec <TIM_Base_SetConfig+0x1c4>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d03f      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1c0:	d03b      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1c8:	d037      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a48      	ldr	r2, [pc, #288]	@ (800a2f0 <TIM_Base_SetConfig+0x1c8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d033      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a47      	ldr	r2, [pc, #284]	@ (800a2f4 <TIM_Base_SetConfig+0x1cc>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d02f      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a46      	ldr	r2, [pc, #280]	@ (800a2f8 <TIM_Base_SetConfig+0x1d0>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d02b      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a45      	ldr	r2, [pc, #276]	@ (800a2fc <TIM_Base_SetConfig+0x1d4>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d027      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a44      	ldr	r2, [pc, #272]	@ (800a300 <TIM_Base_SetConfig+0x1d8>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d023      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a43      	ldr	r2, [pc, #268]	@ (800a304 <TIM_Base_SetConfig+0x1dc>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d01f      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a42      	ldr	r2, [pc, #264]	@ (800a308 <TIM_Base_SetConfig+0x1e0>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d01b      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a41      	ldr	r2, [pc, #260]	@ (800a30c <TIM_Base_SetConfig+0x1e4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d017      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a40      	ldr	r2, [pc, #256]	@ (800a310 <TIM_Base_SetConfig+0x1e8>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a3f      	ldr	r2, [pc, #252]	@ (800a314 <TIM_Base_SetConfig+0x1ec>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00f      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a3e      	ldr	r2, [pc, #248]	@ (800a318 <TIM_Base_SetConfig+0x1f0>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d00b      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a3d      	ldr	r2, [pc, #244]	@ (800a31c <TIM_Base_SetConfig+0x1f4>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d007      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a3c      	ldr	r2, [pc, #240]	@ (800a320 <TIM_Base_SetConfig+0x1f8>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d003      	beq.n	800a23a <TIM_Base_SetConfig+0x112>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a3b      	ldr	r2, [pc, #236]	@ (800a324 <TIM_Base_SetConfig+0x1fc>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d108      	bne.n	800a24c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4313      	orrs	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	4313      	orrs	r3, r2
 800a258:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	689a      	ldr	r2, [r3, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a1e      	ldr	r2, [pc, #120]	@ (800a2e8 <TIM_Base_SetConfig+0x1c0>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d023      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a1d      	ldr	r2, [pc, #116]	@ (800a2ec <TIM_Base_SetConfig+0x1c4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d01f      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a22      	ldr	r2, [pc, #136]	@ (800a308 <TIM_Base_SetConfig+0x1e0>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d01b      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a21      	ldr	r2, [pc, #132]	@ (800a30c <TIM_Base_SetConfig+0x1e4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d017      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a20      	ldr	r2, [pc, #128]	@ (800a310 <TIM_Base_SetConfig+0x1e8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d013      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a1f      	ldr	r2, [pc, #124]	@ (800a314 <TIM_Base_SetConfig+0x1ec>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00f      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a1e      	ldr	r2, [pc, #120]	@ (800a318 <TIM_Base_SetConfig+0x1f0>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00b      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a31c <TIM_Base_SetConfig+0x1f4>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d007      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a320 <TIM_Base_SetConfig+0x1f8>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d003      	beq.n	800a2ba <TIM_Base_SetConfig+0x192>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a324 <TIM_Base_SetConfig+0x1fc>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d103      	bne.n	800a2c2 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	691a      	ldr	r2, [r3, #16]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f043 0204 	orr.w	r2, r3, #4
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	601a      	str	r2, [r3, #0]
}
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	40012c00 	.word	0x40012c00
 800a2ec:	50012c00 	.word	0x50012c00
 800a2f0:	40000400 	.word	0x40000400
 800a2f4:	50000400 	.word	0x50000400
 800a2f8:	40000800 	.word	0x40000800
 800a2fc:	50000800 	.word	0x50000800
 800a300:	40000c00 	.word	0x40000c00
 800a304:	50000c00 	.word	0x50000c00
 800a308:	40013400 	.word	0x40013400
 800a30c:	50013400 	.word	0x50013400
 800a310:	40014000 	.word	0x40014000
 800a314:	50014000 	.word	0x50014000
 800a318:	40014400 	.word	0x40014400
 800a31c:	50014400 	.word	0x50014400
 800a320:	40014800 	.word	0x40014800
 800a324:	50014800 	.word	0x50014800

0800a328 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e042      	b.n	800a44c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d106      	bne.n	800a3de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7f7 feab 	bl	8002134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2224      	movs	r2, #36	@ 0x24
 800a3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 0201 	bic.w	r2, r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fa68 	bl	800a8d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f8c3 	bl	800a590 <UART_SetConfig>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d101      	bne.n	800a414 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e01b      	b.n	800a44c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f042 0201 	orr.w	r2, r2, #1
 800a442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fae7 	bl	800aa18 <UART_CheckIdleState>
 800a44a:	4603      	mov	r3, r0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	@ 0x28
 800a458:	af02      	add	r7, sp, #8
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	603b      	str	r3, [r7, #0]
 800a460:	4613      	mov	r3, r2
 800a462:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	f040 808b 	bne.w	800a586 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_UART_Transmit+0x28>
 800a476:	88fb      	ldrh	r3, [r7, #6]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e083      	b.n	800a588 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48a:	2b80      	cmp	r3, #128	@ 0x80
 800a48c:	d107      	bne.n	800a49e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a49c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2221      	movs	r2, #33	@ 0x21
 800a4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4ae:	f7f8 f8f9 	bl	80026a4 <HAL_GetTick>
 800a4b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	88fa      	ldrh	r2, [r7, #6]
 800a4b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	88fa      	ldrh	r2, [r7, #6]
 800a4c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4cc:	d108      	bne.n	800a4e0 <HAL_UART_Transmit+0x8c>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d104      	bne.n	800a4e0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	61bb      	str	r3, [r7, #24]
 800a4de:	e003      	b.n	800a4e8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a4e8:	e030      	b.n	800a54c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2180      	movs	r1, #128	@ 0x80
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fb39 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e03d      	b.n	800a588 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10b      	bne.n	800a52a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a520:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	3302      	adds	r3, #2
 800a526:	61bb      	str	r3, [r7, #24]
 800a528:	e007      	b.n	800a53a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	781a      	ldrb	r2, [r3, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	3301      	adds	r3, #1
 800a538:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a540:	b29b      	uxth	r3, r3
 800a542:	3b01      	subs	r3, #1
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a552:	b29b      	uxth	r3, r3
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1c8      	bne.n	800a4ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2200      	movs	r2, #0
 800a560:	2140      	movs	r1, #64	@ 0x40
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 fb02 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d005      	beq.n	800a57a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2220      	movs	r2, #32
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e006      	b.n	800a588 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2220      	movs	r2, #32
 800a57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	e000      	b.n	800a588 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a586:	2302      	movs	r3, #2
  }
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a594:	b094      	sub	sp, #80	@ 0x50
 800a596:	af00      	add	r7, sp, #0
 800a598:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	4b7e      	ldr	r3, [pc, #504]	@ (800a7a0 <UART_SetConfig+0x210>)
 800a5a6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	431a      	orrs	r2, r3
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4977      	ldr	r1, [pc, #476]	@ (800a7a4 <UART_SetConfig+0x214>)
 800a5c8:	4019      	ands	r1, r3
 800a5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e0:	68d9      	ldr	r1, [r3, #12]
 800a5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	ea40 0301 	orr.w	r3, r0, r1
 800a5ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	4b6a      	ldr	r3, [pc, #424]	@ (800a7a0 <UART_SetConfig+0x210>)
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d009      	beq.n	800a610 <UART_SetConfig+0x80>
 800a5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	4b69      	ldr	r3, [pc, #420]	@ (800a7a8 <UART_SetConfig+0x218>)
 800a602:	429a      	cmp	r2, r3
 800a604:	d004      	beq.n	800a610 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a608:	6a1a      	ldr	r2, [r3, #32]
 800a60a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a60c:	4313      	orrs	r3, r2
 800a60e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a61a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a624:	430b      	orrs	r3, r1
 800a626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62e:	f023 000f 	bic.w	r0, r3, #15
 800a632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a634:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	ea40 0301 	orr.w	r3, r0, r1
 800a63e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	4b59      	ldr	r3, [pc, #356]	@ (800a7ac <UART_SetConfig+0x21c>)
 800a646:	429a      	cmp	r2, r3
 800a648:	d102      	bne.n	800a650 <UART_SetConfig+0xc0>
 800a64a:	2301      	movs	r3, #1
 800a64c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a64e:	e029      	b.n	800a6a4 <UART_SetConfig+0x114>
 800a650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	4b56      	ldr	r3, [pc, #344]	@ (800a7b0 <UART_SetConfig+0x220>)
 800a656:	429a      	cmp	r2, r3
 800a658:	d102      	bne.n	800a660 <UART_SetConfig+0xd0>
 800a65a:	2302      	movs	r3, #2
 800a65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a65e:	e021      	b.n	800a6a4 <UART_SetConfig+0x114>
 800a660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	4b53      	ldr	r3, [pc, #332]	@ (800a7b4 <UART_SetConfig+0x224>)
 800a666:	429a      	cmp	r2, r3
 800a668:	d102      	bne.n	800a670 <UART_SetConfig+0xe0>
 800a66a:	2304      	movs	r3, #4
 800a66c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a66e:	e019      	b.n	800a6a4 <UART_SetConfig+0x114>
 800a670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	4b50      	ldr	r3, [pc, #320]	@ (800a7b8 <UART_SetConfig+0x228>)
 800a676:	429a      	cmp	r2, r3
 800a678:	d102      	bne.n	800a680 <UART_SetConfig+0xf0>
 800a67a:	2308      	movs	r3, #8
 800a67c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a67e:	e011      	b.n	800a6a4 <UART_SetConfig+0x114>
 800a680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	4b4d      	ldr	r3, [pc, #308]	@ (800a7bc <UART_SetConfig+0x22c>)
 800a686:	429a      	cmp	r2, r3
 800a688:	d102      	bne.n	800a690 <UART_SetConfig+0x100>
 800a68a:	2310      	movs	r3, #16
 800a68c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a68e:	e009      	b.n	800a6a4 <UART_SetConfig+0x114>
 800a690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	4b42      	ldr	r3, [pc, #264]	@ (800a7a0 <UART_SetConfig+0x210>)
 800a696:	429a      	cmp	r2, r3
 800a698:	d102      	bne.n	800a6a0 <UART_SetConfig+0x110>
 800a69a:	2320      	movs	r3, #32
 800a69c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a69e:	e001      	b.n	800a6a4 <UART_SetConfig+0x114>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	4b3d      	ldr	r3, [pc, #244]	@ (800a7a0 <UART_SetConfig+0x210>)
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d005      	beq.n	800a6ba <UART_SetConfig+0x12a>
 800a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	4b3d      	ldr	r3, [pc, #244]	@ (800a7a8 <UART_SetConfig+0x218>)
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	f040 8085 	bne.w	800a7c4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a6ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6bc:	2200      	movs	r2, #0
 800a6be:	623b      	str	r3, [r7, #32]
 800a6c0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a6c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a6c6:	f7fd f845 	bl	8007754 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6ca:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 80e8 	beq.w	800a8a4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d8:	4a39      	ldr	r2, [pc, #228]	@ (800a7c0 <UART_SetConfig+0x230>)
 800a6da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6e6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	4413      	add	r3, r2
 800a6f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d305      	bcc.n	800a704 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a700:	429a      	cmp	r2, r3
 800a702:	d903      	bls.n	800a70c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a70a:	e048      	b.n	800a79e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a70c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a70e:	2200      	movs	r2, #0
 800a710:	61bb      	str	r3, [r7, #24]
 800a712:	61fa      	str	r2, [r7, #28]
 800a714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a718:	4a29      	ldr	r2, [pc, #164]	@ (800a7c0 <UART_SetConfig+0x230>)
 800a71a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a71e:	b29b      	uxth	r3, r3
 800a720:	2200      	movs	r2, #0
 800a722:	613b      	str	r3, [r7, #16]
 800a724:	617a      	str	r2, [r7, #20]
 800a726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a72a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a72e:	f7f6 faaf 	bl	8000c90 <__aeabi_uldivmod>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4610      	mov	r0, r2
 800a738:	4619      	mov	r1, r3
 800a73a:	f04f 0200 	mov.w	r2, #0
 800a73e:	f04f 0300 	mov.w	r3, #0
 800a742:	020b      	lsls	r3, r1, #8
 800a744:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a748:	0202      	lsls	r2, r0, #8
 800a74a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a74c:	6849      	ldr	r1, [r1, #4]
 800a74e:	0849      	lsrs	r1, r1, #1
 800a750:	2000      	movs	r0, #0
 800a752:	460c      	mov	r4, r1
 800a754:	4605      	mov	r5, r0
 800a756:	eb12 0804 	adds.w	r8, r2, r4
 800a75a:	eb43 0905 	adc.w	r9, r3, r5
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	60bb      	str	r3, [r7, #8]
 800a766:	60fa      	str	r2, [r7, #12]
 800a768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a76c:	4640      	mov	r0, r8
 800a76e:	4649      	mov	r1, r9
 800a770:	f7f6 fa8e 	bl	8000c90 <__aeabi_uldivmod>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4613      	mov	r3, r2
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a77e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a782:	d308      	bcc.n	800a796 <UART_SetConfig+0x206>
 800a784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a78a:	d204      	bcs.n	800a796 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a792:	60da      	str	r2, [r3, #12]
 800a794:	e003      	b.n	800a79e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a79c:	e082      	b.n	800a8a4 <UART_SetConfig+0x314>
 800a79e:	e081      	b.n	800a8a4 <UART_SetConfig+0x314>
 800a7a0:	46002400 	.word	0x46002400
 800a7a4:	cfff69f3 	.word	0xcfff69f3
 800a7a8:	56002400 	.word	0x56002400
 800a7ac:	40013800 	.word	0x40013800
 800a7b0:	40004400 	.word	0x40004400
 800a7b4:	40004800 	.word	0x40004800
 800a7b8:	40004c00 	.word	0x40004c00
 800a7bc:	40005000 	.word	0x40005000
 800a7c0:	08010fd4 	.word	0x08010fd4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7cc:	d13c      	bne.n	800a848 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a7ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	607a      	str	r2, [r7, #4]
 800a7d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a7da:	f7fc ffbb 	bl	8007754 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d05e      	beq.n	800a8a4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ea:	4a39      	ldr	r2, [pc, #228]	@ (800a8d0 <UART_SetConfig+0x340>)
 800a7ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7f8:	005a      	lsls	r2, r3, #1
 800a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	085b      	lsrs	r3, r3, #1
 800a800:	441a      	add	r2, r3
 800a802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a80e:	2b0f      	cmp	r3, #15
 800a810:	d916      	bls.n	800a840 <UART_SetConfig+0x2b0>
 800a812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a818:	d212      	bcs.n	800a840 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	f023 030f 	bic.w	r3, r3, #15
 800a822:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a826:	085b      	lsrs	r3, r3, #1
 800a828:	b29b      	uxth	r3, r3
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	b29a      	uxth	r2, r3
 800a830:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a832:	4313      	orrs	r3, r2
 800a834:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a83c:	60da      	str	r2, [r3, #12]
 800a83e:	e031      	b.n	800a8a4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a846:	e02d      	b.n	800a8a4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a84a:	2200      	movs	r2, #0
 800a84c:	469a      	mov	sl, r3
 800a84e:	4693      	mov	fp, r2
 800a850:	4650      	mov	r0, sl
 800a852:	4659      	mov	r1, fp
 800a854:	f7fc ff7e 	bl	8007754 <HAL_RCCEx_GetPeriphCLKFreq>
 800a858:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d021      	beq.n	800a8a4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a864:	4a1a      	ldr	r2, [pc, #104]	@ (800a8d0 <UART_SetConfig+0x340>)
 800a866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a86a:	461a      	mov	r2, r3
 800a86c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a86e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	441a      	add	r2, r3
 800a87a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a886:	2b0f      	cmp	r3, #15
 800a888:	d909      	bls.n	800a89e <UART_SetConfig+0x30e>
 800a88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a890:	d205      	bcs.n	800a89e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a894:	b29a      	uxth	r2, r3
 800a896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60da      	str	r2, [r3, #12]
 800a89c:	e002      	b.n	800a8a4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8bc:	2200      	movs	r2, #0
 800a8be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a8c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3750      	adds	r7, #80	@ 0x50
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8ce:	bf00      	nop
 800a8d0:	08010fd4 	.word	0x08010fd4

0800a8d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e0:	f003 0308 	and.w	r3, r3, #8
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d01a      	beq.n	800a9ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9d2:	d10a      	bne.n	800a9ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	605a      	str	r2, [r3, #4]
  }
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b098      	sub	sp, #96	@ 0x60
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa28:	f7f7 fe3c 	bl	80026a4 <HAL_GetTick>
 800aa2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0308 	and.w	r3, r3, #8
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d12f      	bne.n	800aa9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa44:	2200      	movs	r2, #0
 800aa46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f88e 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d022      	beq.n	800aa9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5e:	e853 3f00 	ldrex	r3, [r3]
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	461a      	mov	r2, r3
 800aa72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa74:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa7c:	e841 2300 	strex	r3, r2, [r1]
 800aa80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e6      	bne.n	800aa56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e063      	b.n	800ab64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f003 0304 	and.w	r3, r3, #4
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d149      	bne.n	800ab3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaaa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aab2:	2200      	movs	r2, #0
 800aab4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f857 	bl	800ab6c <UART_WaitOnFlagUntilTimeout>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d03c      	beq.n	800ab3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	e853 3f00 	ldrex	r3, [r3]
 800aad0:	623b      	str	r3, [r7, #32]
   return(result);
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aae2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaea:	e841 2300 	strex	r3, r2, [r1]
 800aaee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1e6      	bne.n	800aac4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3308      	adds	r3, #8
 800aafc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	e853 3f00 	ldrex	r3, [r3]
 800ab04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f023 0301 	bic.w	r3, r3, #1
 800ab0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3308      	adds	r3, #8
 800ab14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab16:	61fa      	str	r2, [r7, #28]
 800ab18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	69b9      	ldr	r1, [r7, #24]
 800ab1c:	69fa      	ldr	r2, [r7, #28]
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	617b      	str	r3, [r7, #20]
   return(result);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e5      	bne.n	800aaf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e012      	b.n	800ab64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2220      	movs	r2, #32
 800ab42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3758      	adds	r7, #88	@ 0x58
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	603b      	str	r3, [r7, #0]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab7c:	e04f      	b.n	800ac1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d04b      	beq.n	800ac1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab86:	f7f7 fd8d 	bl	80026a4 <HAL_GetTick>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d302      	bcc.n	800ab9c <UART_WaitOnFlagUntilTimeout+0x30>
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e04e      	b.n	800ac3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 0304 	and.w	r3, r3, #4
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d037      	beq.n	800ac1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b80      	cmp	r3, #128	@ 0x80
 800abb2:	d034      	beq.n	800ac1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b40      	cmp	r3, #64	@ 0x40
 800abb8:	d031      	beq.n	800ac1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	f003 0308 	and.w	r3, r3, #8
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	d110      	bne.n	800abea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2208      	movs	r2, #8
 800abce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 f838 	bl	800ac46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2208      	movs	r2, #8
 800abda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e029      	b.n	800ac3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abf8:	d111      	bne.n	800ac1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f81e 	bl	800ac46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e00f      	b.n	800ac3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	69da      	ldr	r2, [r3, #28]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	4013      	ands	r3, r2
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	bf0c      	ite	eq
 800ac2e:	2301      	moveq	r3, #1
 800ac30:	2300      	movne	r3, #0
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	461a      	mov	r2, r3
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d0a0      	beq.n	800ab7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b095      	sub	sp, #84	@ 0x54
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac56:	e853 3f00 	ldrex	r3, [r3]
 800ac5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac74:	e841 2300 	strex	r3, r2, [r1]
 800ac78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1e6      	bne.n	800ac4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3308      	adds	r3, #8
 800ac86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac96:	f023 0301 	bic.w	r3, r3, #1
 800ac9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3308      	adds	r3, #8
 800aca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aca4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acac:	e841 2300 	strex	r3, r2, [r1]
 800acb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1e3      	bne.n	800ac80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d118      	bne.n	800acf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	60bb      	str	r3, [r7, #8]
   return(result);
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	f023 0310 	bic.w	r3, r3, #16
 800acd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acde:	61bb      	str	r3, [r7, #24]
 800ace0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6979      	ldr	r1, [r7, #20]
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	613b      	str	r3, [r7, #16]
   return(result);
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e6      	bne.n	800acc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ad06:	bf00      	nop
 800ad08:	3754      	adds	r7, #84	@ 0x54
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d101      	bne.n	800ad28 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad24:	2302      	movs	r3, #2
 800ad26:	e027      	b.n	800ad78 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2224      	movs	r2, #36	@ 0x24
 800ad34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f022 0201 	bic.w	r2, r2, #1
 800ad4e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e02d      	b.n	800adf8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2224      	movs	r2, #36	@ 0x24
 800ada8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f022 0201 	bic.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f84f 	bl	800ae7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2220      	movs	r2, #32
 800adea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d101      	bne.n	800ae18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae14:	2302      	movs	r3, #2
 800ae16:	e02d      	b.n	800ae74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2224      	movs	r2, #36	@ 0x24
 800ae24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f022 0201 	bic.w	r2, r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f811 	bl	800ae7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d108      	bne.n	800ae9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae9c:	e031      	b.n	800af02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae9e:	2308      	movs	r3, #8
 800aea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aea2:	2308      	movs	r3, #8
 800aea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	0e5b      	lsrs	r3, r3, #25
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	0f5b      	lsrs	r3, r3, #29
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	7b3a      	ldrb	r2, [r7, #12]
 800aeca:	4911      	ldr	r1, [pc, #68]	@ (800af10 <UARTEx_SetNbDataToProcess+0x94>)
 800aecc:	5c8a      	ldrb	r2, [r1, r2]
 800aece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aed2:	7b3a      	ldrb	r2, [r7, #12]
 800aed4:	490f      	ldr	r1, [pc, #60]	@ (800af14 <UARTEx_SetNbDataToProcess+0x98>)
 800aed6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aed8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aedc:	b29a      	uxth	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	7b7a      	ldrb	r2, [r7, #13]
 800aee8:	4909      	ldr	r1, [pc, #36]	@ (800af10 <UARTEx_SetNbDataToProcess+0x94>)
 800aeea:	5c8a      	ldrb	r2, [r1, r2]
 800aeec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aef0:	7b7a      	ldrb	r2, [r7, #13]
 800aef2:	4908      	ldr	r1, [pc, #32]	@ (800af14 <UARTEx_SetNbDataToProcess+0x98>)
 800aef4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aef6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af02:	bf00      	nop
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	08010fec 	.word	0x08010fec
 800af14:	08010ff4 	.word	0x08010ff4

0800af18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af18:	b084      	sub	sp, #16
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	f107 001c 	add.w	r0, r7, #28
 800af26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f8e6 	bl	800b108 <USB_CoreReset>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800af40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800af44:	2b00      	cmp	r3, #0
 800af46:	d106      	bne.n	800af56 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	639a      	str	r2, [r3, #56]	@ 0x38
 800af54:	e005      	b.n	800af62 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800af62:	7bfb      	ldrb	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af6e:	b004      	add	sp, #16
 800af70:	4770      	bx	lr

0800af72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af72:	b480      	push	{r7}
 800af74:	b083      	sub	sp, #12
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f023 0201 	bic.w	r2, r3, #1
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d115      	bne.n	800afe2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800afc2:	200a      	movs	r0, #10
 800afc4:	f7f7 fb7a 	bl	80026bc <HAL_Delay>
      ms += 10U;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	330a      	adds	r3, #10
 800afcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f88c 	bl	800b0ec <USB_GetMode>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d01e      	beq.n	800b018 <USB_SetCurrentMode+0x84>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2bc7      	cmp	r3, #199	@ 0xc7
 800afde:	d9f0      	bls.n	800afc2 <USB_SetCurrentMode+0x2e>
 800afe0:	e01a      	b.n	800b018 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800afe2:	78fb      	ldrb	r3, [r7, #3]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d115      	bne.n	800b014 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aff4:	200a      	movs	r0, #10
 800aff6:	f7f7 fb61 	bl	80026bc <HAL_Delay>
      ms += 10U;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	330a      	adds	r3, #10
 800affe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f873 	bl	800b0ec <USB_GetMode>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <USB_SetCurrentMode+0x84>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2bc7      	cmp	r3, #199	@ 0xc7
 800b010:	d9f0      	bls.n	800aff4 <USB_SetCurrentMode+0x60>
 800b012:	e001      	b.n	800b018 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e005      	b.n	800b024 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2bc8      	cmp	r3, #200	@ 0xc8
 800b01c:	d101      	bne.n	800b022 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e000      	b.n	800b024 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b036:	2300      	movs	r3, #0
 800b038:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b046:	d901      	bls.n	800b04c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e01b      	b.n	800b084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	daf2      	bge.n	800b03a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	019b      	lsls	r3, r3, #6
 800b05c:	f043 0220 	orr.w	r2, r3, #32
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b070:	d901      	bls.n	800b076 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e006      	b.n	800b084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	f003 0320 	and.w	r3, r3, #32
 800b07e:	2b20      	cmp	r3, #32
 800b080:	d0f0      	beq.n	800b064 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b098:	2300      	movs	r3, #0
 800b09a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0a8:	d901      	bls.n	800b0ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	e018      	b.n	800b0e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	daf2      	bge.n	800b09c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2210      	movs	r2, #16
 800b0be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0cc:	d901      	bls.n	800b0d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e006      	b.n	800b0e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	f003 0310 	and.w	r3, r3, #16
 800b0da:	2b10      	cmp	r3, #16
 800b0dc:	d0f0      	beq.n	800b0c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3714      	adds	r7, #20
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b110:	2300      	movs	r3, #0
 800b112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b120:	d901      	bls.n	800b126 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e01b      	b.n	800b15e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	daf2      	bge.n	800b114 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f043 0201 	orr.w	r2, r3, #1
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b14a:	d901      	bls.n	800b150 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e006      	b.n	800b15e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d0f0      	beq.n	800b13e <USB_CoreReset+0x36>

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b16c:	b084      	sub	sp, #16
 800b16e:	b580      	push	{r7, lr}
 800b170:	b086      	sub	sp, #24
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b17a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	60fb      	str	r3, [r7, #12]
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b18c:	461a      	mov	r2, r3
 800b18e:	2300      	movs	r3, #0
 800b190:	6013      	str	r3, [r2, #0]
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b196:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d119      	bne.n	800b1ea <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d10a      	bne.n	800b1d4 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1cc:	f043 0304 	orr.w	r3, r3, #4
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	e014      	b.n	800b1fe <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1e2:	f023 0304 	bic.w	r3, r3, #4
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	e009      	b.n	800b1fe <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b1f8:	f023 0304 	bic.w	r3, r3, #4
 800b1fc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b1fe:	2110      	movs	r1, #16
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7ff ff13 	bl	800b02c <USB_FlushTxFifo>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ff3d 	bl	800b090 <USB_FlushRxFifo>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b220:	2300      	movs	r3, #0
 800b222:	613b      	str	r3, [r7, #16]
 800b224:	e015      	b.n	800b252 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b232:	461a      	mov	r2, r3
 800b234:	f04f 33ff 	mov.w	r3, #4294967295
 800b238:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	015a      	lsls	r2, r3, #5
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	4413      	add	r3, r2
 800b242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b246:	461a      	mov	r2, r3
 800b248:	2300      	movs	r3, #0
 800b24a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	3301      	adds	r3, #1
 800b250:	613b      	str	r3, [r7, #16]
 800b252:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b256:	461a      	mov	r2, r3
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d3e3      	bcc.n	800b226 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f04f 32ff 	mov.w	r2, #4294967295
 800b26a:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2280      	movs	r2, #128	@ 0x80
 800b270:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a0e      	ldr	r2, [pc, #56]	@ (800b2b0 <USB_HostInit+0x144>)
 800b276:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a0e      	ldr	r2, [pc, #56]	@ (800b2b4 <USB_HostInit+0x148>)
 800b27c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b280:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b284:	2b00      	cmp	r3, #0
 800b286:	d105      	bne.n	800b294 <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	f043 0210 	orr.w	r2, r3, #16
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	699a      	ldr	r2, [r3, #24]
 800b298:	4b07      	ldr	r3, [pc, #28]	@ (800b2b8 <USB_HostInit+0x14c>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2ac:	b004      	add	sp, #16
 800b2ae:	4770      	bx	lr
 800b2b0:	00600080 	.word	0x00600080
 800b2b4:	004000e0 	.word	0x004000e0
 800b2b8:	a3200008 	.word	0xa3200008

0800b2bc <arm_max_f32>:
 800b2bc:	f101 3cff 	add.w	ip, r1, #4294967295
 800b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800b2c8:	ecf7 7a01 	vldmia	r7!, {s15}
 800b2cc:	d05d      	beq.n	800b38a <arm_max_f32+0xce>
 800b2ce:	f10e 0601 	add.w	r6, lr, #1
 800b2d2:	3014      	adds	r0, #20
 800b2d4:	2404      	movs	r4, #4
 800b2d6:	2500      	movs	r5, #0
 800b2d8:	00b6      	lsls	r6, r6, #2
 800b2da:	ed10 7a04 	vldr	s14, [r0, #-16]
 800b2de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e6:	d502      	bpl.n	800b2ee <arm_max_f32+0x32>
 800b2e8:	eef0 7a47 	vmov.f32	s15, s14
 800b2ec:	1ee5      	subs	r5, r4, #3
 800b2ee:	ed10 7a03 	vldr	s14, [r0, #-12]
 800b2f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fa:	d502      	bpl.n	800b302 <arm_max_f32+0x46>
 800b2fc:	eef0 7a47 	vmov.f32	s15, s14
 800b300:	1ea5      	subs	r5, r4, #2
 800b302:	ed10 7a02 	vldr	s14, [r0, #-8]
 800b306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b30e:	d502      	bpl.n	800b316 <arm_max_f32+0x5a>
 800b310:	eef0 7a47 	vmov.f32	s15, s14
 800b314:	1e65      	subs	r5, r4, #1
 800b316:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b31a:	3010      	adds	r0, #16
 800b31c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b324:	d502      	bpl.n	800b32c <arm_max_f32+0x70>
 800b326:	eef0 7a47 	vmov.f32	s15, s14
 800b32a:	4625      	mov	r5, r4
 800b32c:	3404      	adds	r4, #4
 800b32e:	42b4      	cmp	r4, r6
 800b330:	d1d3      	bne.n	800b2da <arm_max_f32+0x1e>
 800b332:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800b336:	f01c 0003 	ands.w	r0, ip, #3
 800b33a:	d01e      	beq.n	800b37a <arm_max_f32+0xbe>
 800b33c:	ed97 7a00 	vldr	s14, [r7]
 800b340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b348:	dc1b      	bgt.n	800b382 <arm_max_f32+0xc6>
 800b34a:	3801      	subs	r0, #1
 800b34c:	d015      	beq.n	800b37a <arm_max_f32+0xbe>
 800b34e:	ed97 7a01 	vldr	s14, [r7, #4]
 800b352:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35a:	d502      	bpl.n	800b362 <arm_max_f32+0xa6>
 800b35c:	eef0 7a47 	vmov.f32	s15, s14
 800b360:	1a0d      	subs	r5, r1, r0
 800b362:	2801      	cmp	r0, #1
 800b364:	d009      	beq.n	800b37a <arm_max_f32+0xbe>
 800b366:	ed97 7a02 	vldr	s14, [r7, #8]
 800b36a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b372:	d502      	bpl.n	800b37a <arm_max_f32+0xbe>
 800b374:	eef0 7a47 	vmov.f32	s15, s14
 800b378:	4665      	mov	r5, ip
 800b37a:	edc2 7a00 	vstr	s15, [r2]
 800b37e:	601d      	str	r5, [r3, #0]
 800b380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b382:	eef0 7a47 	vmov.f32	s15, s14
 800b386:	1a0d      	subs	r5, r1, r0
 800b388:	e7df      	b.n	800b34a <arm_max_f32+0x8e>
 800b38a:	4675      	mov	r5, lr
 800b38c:	e7d3      	b.n	800b336 <arm_max_f32+0x7a>
 800b38e:	bf00      	nop

0800b390 <arm_rfft_32_fast_init_f32>:
 800b390:	b150      	cbz	r0, 800b3a8 <arm_rfft_32_fast_init_f32+0x18>
 800b392:	2110      	movs	r1, #16
 800b394:	b510      	push	{r4, lr}
 800b396:	4604      	mov	r4, r0
 800b398:	f000 fd66 	bl	800be68 <arm_cfft_init_f32>
 800b39c:	b918      	cbnz	r0, 800b3a6 <arm_rfft_32_fast_init_f32+0x16>
 800b39e:	2220      	movs	r2, #32
 800b3a0:	4b03      	ldr	r3, [pc, #12]	@ (800b3b0 <arm_rfft_32_fast_init_f32+0x20>)
 800b3a2:	8222      	strh	r2, [r4, #16]
 800b3a4:	6163      	str	r3, [r4, #20]
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	08029a54 	.word	0x08029a54

0800b3b4 <arm_rfft_64_fast_init_f32>:
 800b3b4:	b150      	cbz	r0, 800b3cc <arm_rfft_64_fast_init_f32+0x18>
 800b3b6:	2120      	movs	r1, #32
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	f000 fd54 	bl	800be68 <arm_cfft_init_f32>
 800b3c0:	b918      	cbnz	r0, 800b3ca <arm_rfft_64_fast_init_f32+0x16>
 800b3c2:	2240      	movs	r2, #64	@ 0x40
 800b3c4:	4b03      	ldr	r3, [pc, #12]	@ (800b3d4 <arm_rfft_64_fast_init_f32+0x20>)
 800b3c6:	8222      	strh	r2, [r4, #16]
 800b3c8:	6163      	str	r3, [r4, #20]
 800b3ca:	bd10      	pop	{r4, pc}
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	0802e2d4 	.word	0x0802e2d4

0800b3d8 <arm_rfft_128_fast_init_f32>:
 800b3d8:	b150      	cbz	r0, 800b3f0 <arm_rfft_128_fast_init_f32+0x18>
 800b3da:	2140      	movs	r1, #64	@ 0x40
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	f000 fd42 	bl	800be68 <arm_cfft_init_f32>
 800b3e4:	b918      	cbnz	r0, 800b3ee <arm_rfft_128_fast_init_f32+0x16>
 800b3e6:	2280      	movs	r2, #128	@ 0x80
 800b3e8:	4b03      	ldr	r3, [pc, #12]	@ (800b3f8 <arm_rfft_128_fast_init_f32+0x20>)
 800b3ea:	8222      	strh	r2, [r4, #16]
 800b3ec:	6163      	str	r3, [r4, #20]
 800b3ee:	bd10      	pop	{r4, pc}
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	08027454 	.word	0x08027454

0800b3fc <arm_rfft_256_fast_init_f32>:
 800b3fc:	b158      	cbz	r0, 800b416 <arm_rfft_256_fast_init_f32+0x1a>
 800b3fe:	2180      	movs	r1, #128	@ 0x80
 800b400:	b510      	push	{r4, lr}
 800b402:	4604      	mov	r4, r0
 800b404:	f000 fd30 	bl	800be68 <arm_cfft_init_f32>
 800b408:	b920      	cbnz	r0, 800b414 <arm_rfft_256_fast_init_f32+0x18>
 800b40a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b40e:	4b03      	ldr	r3, [pc, #12]	@ (800b41c <arm_rfft_256_fast_init_f32+0x20>)
 800b410:	8222      	strh	r2, [r4, #16]
 800b412:	6163      	str	r3, [r4, #20]
 800b414:	bd10      	pop	{r4, pc}
 800b416:	f04f 30ff 	mov.w	r0, #4294967295
 800b41a:	4770      	bx	lr
 800b41c:	08029654 	.word	0x08029654

0800b420 <arm_rfft_512_fast_init_f32>:
 800b420:	b160      	cbz	r0, 800b43c <arm_rfft_512_fast_init_f32+0x1c>
 800b422:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b426:	b510      	push	{r4, lr}
 800b428:	4604      	mov	r4, r0
 800b42a:	f000 fd1d 	bl	800be68 <arm_cfft_init_f32>
 800b42e:	b920      	cbnz	r0, 800b43a <arm_rfft_512_fast_init_f32+0x1a>
 800b430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b434:	4b03      	ldr	r3, [pc, #12]	@ (800b444 <arm_rfft_512_fast_init_f32+0x24>)
 800b436:	8222      	strh	r2, [r4, #16]
 800b438:	6163      	str	r3, [r4, #20]
 800b43a:	bd10      	pop	{r4, pc}
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	0802dad4 	.word	0x0802dad4

0800b448 <arm_rfft_1024_fast_init_f32>:
 800b448:	b160      	cbz	r0, 800b464 <arm_rfft_1024_fast_init_f32+0x1c>
 800b44a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b44e:	b510      	push	{r4, lr}
 800b450:	4604      	mov	r4, r0
 800b452:	f000 fd09 	bl	800be68 <arm_cfft_init_f32>
 800b456:	b920      	cbnz	r0, 800b462 <arm_rfft_1024_fast_init_f32+0x1a>
 800b458:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b45c:	4b03      	ldr	r3, [pc, #12]	@ (800b46c <arm_rfft_1024_fast_init_f32+0x24>)
 800b45e:	8222      	strh	r2, [r4, #16]
 800b460:	6163      	str	r3, [r4, #20]
 800b462:	bd10      	pop	{r4, pc}
 800b464:	f04f 30ff 	mov.w	r0, #4294967295
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	08026454 	.word	0x08026454

0800b470 <arm_rfft_2048_fast_init_f32>:
 800b470:	b160      	cbz	r0, 800b48c <arm_rfft_2048_fast_init_f32+0x1c>
 800b472:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b476:	b510      	push	{r4, lr}
 800b478:	4604      	mov	r4, r0
 800b47a:	f000 fcf5 	bl	800be68 <arm_cfft_init_f32>
 800b47e:	b920      	cbnz	r0, 800b48a <arm_rfft_2048_fast_init_f32+0x1a>
 800b480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b484:	4b03      	ldr	r3, [pc, #12]	@ (800b494 <arm_rfft_2048_fast_init_f32+0x24>)
 800b486:	8222      	strh	r2, [r4, #16]
 800b488:	6163      	str	r3, [r4, #20]
 800b48a:	bd10      	pop	{r4, pc}
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	08027654 	.word	0x08027654

0800b498 <arm_rfft_4096_fast_init_f32>:
 800b498:	b160      	cbz	r0, 800b4b4 <arm_rfft_4096_fast_init_f32+0x1c>
 800b49a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	f000 fce1 	bl	800be68 <arm_cfft_init_f32>
 800b4a6:	b920      	cbnz	r0, 800b4b2 <arm_rfft_4096_fast_init_f32+0x1a>
 800b4a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b4ac:	4b03      	ldr	r3, [pc, #12]	@ (800b4bc <arm_rfft_4096_fast_init_f32+0x24>)
 800b4ae:	8222      	strh	r2, [r4, #16]
 800b4b0:	6163      	str	r3, [r4, #20]
 800b4b2:	bd10      	pop	{r4, pc}
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	08029ad4 	.word	0x08029ad4

0800b4c0 <arm_rfft_fast_init_f32>:
 800b4c0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b4c4:	d024      	beq.n	800b510 <arm_rfft_fast_init_f32+0x50>
 800b4c6:	d807      	bhi.n	800b4d8 <arm_rfft_fast_init_f32+0x18>
 800b4c8:	2980      	cmp	r1, #128	@ 0x80
 800b4ca:	d01c      	beq.n	800b506 <arm_rfft_fast_init_f32+0x46>
 800b4cc:	d90c      	bls.n	800b4e8 <arm_rfft_fast_init_f32+0x28>
 800b4ce:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b4d2:	d11a      	bne.n	800b50a <arm_rfft_fast_init_f32+0x4a>
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b514 <arm_rfft_fast_init_f32+0x54>)
 800b4d6:	4718      	bx	r3
 800b4d8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800b4dc:	d011      	beq.n	800b502 <arm_rfft_fast_init_f32+0x42>
 800b4de:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800b4e2:	d107      	bne.n	800b4f4 <arm_rfft_fast_init_f32+0x34>
 800b4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b518 <arm_rfft_fast_init_f32+0x58>)
 800b4e6:	4718      	bx	r3
 800b4e8:	2920      	cmp	r1, #32
 800b4ea:	d008      	beq.n	800b4fe <arm_rfft_fast_init_f32+0x3e>
 800b4ec:	2940      	cmp	r1, #64	@ 0x40
 800b4ee:	d10c      	bne.n	800b50a <arm_rfft_fast_init_f32+0x4a>
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b51c <arm_rfft_fast_init_f32+0x5c>)
 800b4f2:	e7f0      	b.n	800b4d6 <arm_rfft_fast_init_f32+0x16>
 800b4f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b4f8:	d107      	bne.n	800b50a <arm_rfft_fast_init_f32+0x4a>
 800b4fa:	4b09      	ldr	r3, [pc, #36]	@ (800b520 <arm_rfft_fast_init_f32+0x60>)
 800b4fc:	e7eb      	b.n	800b4d6 <arm_rfft_fast_init_f32+0x16>
 800b4fe:	4b09      	ldr	r3, [pc, #36]	@ (800b524 <arm_rfft_fast_init_f32+0x64>)
 800b500:	e7e9      	b.n	800b4d6 <arm_rfft_fast_init_f32+0x16>
 800b502:	4b09      	ldr	r3, [pc, #36]	@ (800b528 <arm_rfft_fast_init_f32+0x68>)
 800b504:	e7e7      	b.n	800b4d6 <arm_rfft_fast_init_f32+0x16>
 800b506:	4b09      	ldr	r3, [pc, #36]	@ (800b52c <arm_rfft_fast_init_f32+0x6c>)
 800b508:	e7e5      	b.n	800b4d6 <arm_rfft_fast_init_f32+0x16>
 800b50a:	f04f 30ff 	mov.w	r0, #4294967295
 800b50e:	4770      	bx	lr
 800b510:	4b07      	ldr	r3, [pc, #28]	@ (800b530 <arm_rfft_fast_init_f32+0x70>)
 800b512:	e7e0      	b.n	800b4d6 <arm_rfft_fast_init_f32+0x16>
 800b514:	0800b3fd 	.word	0x0800b3fd
 800b518:	0800b499 	.word	0x0800b499
 800b51c:	0800b3b5 	.word	0x0800b3b5
 800b520:	0800b449 	.word	0x0800b449
 800b524:	0800b391 	.word	0x0800b391
 800b528:	0800b471 	.word	0x0800b471
 800b52c:	0800b3d9 	.word	0x0800b3d9
 800b530:	0800b421 	.word	0x0800b421

0800b534 <stage_rfft_f32>:
 800b534:	b470      	push	{r4, r5, r6}
 800b536:	edd1 7a00 	vldr	s15, [r1]
 800b53a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b53e:	ed91 7a01 	vldr	s14, [r1, #4]
 800b542:	f101 0410 	add.w	r4, r1, #16
 800b546:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b54a:	8806      	ldrh	r6, [r0, #0]
 800b54c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b550:	6940      	ldr	r0, [r0, #20]
 800b552:	3e01      	subs	r6, #1
 800b554:	eeb0 4a46 	vmov.f32	s8, s12
 800b558:	f102 0510 	add.w	r5, r2, #16
 800b55c:	3010      	adds	r0, #16
 800b55e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b562:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b56a:	f1a1 0308 	sub.w	r3, r1, #8
 800b56e:	ee26 7a86 	vmul.f32	s14, s13, s12
 800b572:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b576:	ed82 7a00 	vstr	s14, [r2]
 800b57a:	edc2 7a01 	vstr	s15, [r2, #4]
 800b57e:	ed14 6a02 	vldr	s12, [r4, #-8]
 800b582:	3e01      	subs	r6, #1
 800b584:	ed93 7a02 	vldr	s14, [r3, #8]
 800b588:	f104 0408 	add.w	r4, r4, #8
 800b58c:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b590:	f1a3 0308 	sub.w	r3, r3, #8
 800b594:	ee77 5a46 	vsub.f32	s11, s14, s12
 800b598:	edd3 4a05 	vldr	s9, [r3, #20]
 800b59c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b5a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b5a4:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b5a8:	f105 0508 	add.w	r5, r5, #8
 800b5ac:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b5b0:	f100 0008 	add.w	r0, r0, #8
 800b5b4:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b5b8:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b5bc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b5c0:	ee37 7a23 	vadd.f32	s14, s14, s7
 800b5c4:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b5c8:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b5cc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b5d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b5d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b5d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b5dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b5e0:	ed05 7a04 	vstr	s14, [r5, #-16]
 800b5e4:	ed45 7a03 	vstr	s15, [r5, #-12]
 800b5e8:	d1c9      	bne.n	800b57e <stage_rfft_f32+0x4a>
 800b5ea:	bc70      	pop	{r4, r5, r6}
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop

0800b5f0 <merge_rfft_f32>:
 800b5f0:	b410      	push	{r4}
 800b5f2:	edd1 7a00 	vldr	s15, [r1]
 800b5f6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b5fa:	edd1 6a01 	vldr	s13, [r1, #4]
 800b5fe:	8804      	ldrh	r4, [r0, #0]
 800b600:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b604:	6940      	ldr	r0, [r0, #20]
 800b606:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b60a:	3c01      	subs	r4, #1
 800b60c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b610:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b614:	ed82 7a00 	vstr	s14, [r2]
 800b618:	edc2 7a01 	vstr	s15, [r2, #4]
 800b61c:	b3dc      	cbz	r4, 800b696 <merge_rfft_f32+0xa6>
 800b61e:	00e3      	lsls	r3, r4, #3
 800b620:	3010      	adds	r0, #16
 800b622:	3210      	adds	r2, #16
 800b624:	3b08      	subs	r3, #8
 800b626:	440b      	add	r3, r1
 800b628:	3110      	adds	r1, #16
 800b62a:	ed11 6a02 	vldr	s12, [r1, #-8]
 800b62e:	3c01      	subs	r4, #1
 800b630:	ed93 7a02 	vldr	s14, [r3, #8]
 800b634:	f101 0108 	add.w	r1, r1, #8
 800b638:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b63c:	f1a3 0308 	sub.w	r3, r3, #8
 800b640:	ee76 5a47 	vsub.f32	s11, s12, s14
 800b644:	edd3 4a05 	vldr	s9, [r3, #20]
 800b648:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b64c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b650:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b654:	f102 0208 	add.w	r2, r2, #8
 800b658:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b65c:	f100 0008 	add.w	r0, r0, #8
 800b660:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b664:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b668:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b66c:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b670:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b674:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b678:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b67c:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b680:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b684:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b688:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b68c:	ed02 7a04 	vstr	s14, [r2, #-16]
 800b690:	ed42 7a03 	vstr	s15, [r2, #-12]
 800b694:	d1c9      	bne.n	800b62a <merge_rfft_f32+0x3a>
 800b696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <arm_rfft_fast_f32>:
 800b69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a0:	461c      	mov	r4, r3
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	b14b      	cbz	r3, 800b6bc <arm_rfft_fast_f32+0x20>
 800b6a8:	f7ff ffa2 	bl	800b5f0 <merge_rfft_f32>
 800b6ac:	4622      	mov	r2, r4
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b8:	f000 bb38 	b.w	800bd2c <arm_cfft_f32>
 800b6bc:	460f      	mov	r7, r1
 800b6be:	461a      	mov	r2, r3
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	f000 fb33 	bl	800bd2c <arm_cfft_f32>
 800b6c6:	4632      	mov	r2, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d0:	f7ff bf30 	b.w	800b534 <stage_rfft_f32>

0800b6d4 <arm_cfft_radix8by2_f32>:
 800b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d8:	4607      	mov	r7, r0
 800b6da:	4608      	mov	r0, r1
 800b6dc:	ed2d 8b06 	vpush	{d8-d10}
 800b6e0:	f8b7 c000 	ldrh.w	ip, [r7]
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800b6ec:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800b6f0:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b6f4:	f000 80ac 	beq.w	800b850 <arm_cfft_radix8by2_f32+0x17c>
 800b6f8:	008c      	lsls	r4, r1, #2
 800b6fa:	f100 0310 	add.w	r3, r0, #16
 800b6fe:	3210      	adds	r2, #16
 800b700:	f108 0610 	add.w	r6, r8, #16
 800b704:	3410      	adds	r4, #16
 800b706:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800b70a:	1905      	adds	r5, r0, r4
 800b70c:	4444      	add	r4, r8
 800b70e:	ed16 7a04 	vldr	s14, [r6, #-16]
 800b712:	3310      	adds	r3, #16
 800b714:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 800b718:	3510      	adds	r5, #16
 800b71a:	ed56 0a03 	vldr	s1, [r6, #-12]
 800b71e:	3210      	adds	r2, #16
 800b720:	ee74 9a87 	vadd.f32	s19, s9, s14
 800b724:	ed56 7a02 	vldr	s15, [r6, #-8]
 800b728:	ed56 2a01 	vldr	s5, [r6, #-4]
 800b72c:	ee74 4ac7 	vsub.f32	s9, s9, s14
 800b730:	ed54 5a04 	vldr	s11, [r4, #-16]
 800b734:	3610      	adds	r6, #16
 800b736:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b73a:	3410      	adds	r4, #16
 800b73c:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 800b740:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 800b744:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 800b748:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 800b74c:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 800b750:	ee36 9aa5 	vadd.f32	s18, s13, s11
 800b754:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 800b758:	ee33 8a83 	vadd.f32	s16, s7, s6
 800b75c:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 800b760:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800b764:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800b768:	ee34 0a06 	vadd.f32	s0, s8, s12
 800b76c:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 800b770:	ee77 aa20 	vadd.f32	s21, s14, s1
 800b774:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 800b778:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800b77c:	ee72 9a22 	vadd.f32	s19, s4, s5
 800b780:	ee71 8a05 	vadd.f32	s17, s2, s10
 800b784:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 800b788:	ee37 7a60 	vsub.f32	s14, s14, s1
 800b78c:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 800b790:	ee35 5a41 	vsub.f32	s10, s10, s2
 800b794:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 800b798:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b79c:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 800b7a0:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 800b7a4:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800b7a8:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 800b7ac:	ee72 7a62 	vsub.f32	s15, s4, s5
 800b7b0:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 800b7b4:	ee73 2a63 	vsub.f32	s5, s6, s7
 800b7b8:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800b7bc:	4563      	cmp	r3, ip
 800b7be:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800b7c2:	ee24 3a84 	vmul.f32	s6, s9, s8
 800b7c6:	ee27 2a26 	vmul.f32	s4, s14, s13
 800b7ca:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800b7ce:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800b7d2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b7d6:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b7da:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b7de:	ee25 5a04 	vmul.f32	s10, s10, s8
 800b7e2:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b7e6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b7ea:	ee33 4a02 	vadd.f32	s8, s6, s4
 800b7ee:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800b7f2:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 800b7f6:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 800b7fa:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 800b7fe:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 800b802:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800b806:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800b80a:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800b80e:	ee27 4a87 	vmul.f32	s8, s15, s14
 800b812:	ee61 5a87 	vmul.f32	s11, s3, s14
 800b816:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b81a:	ee22 5a87 	vmul.f32	s10, s5, s14
 800b81e:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b822:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b826:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800b82a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800b82e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b832:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b836:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b83a:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 800b83e:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 800b842:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 800b846:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 800b84a:	f47f af60 	bne.w	800b70e <arm_cfft_radix8by2_f32+0x3a>
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	b289      	uxth	r1, r1
 800b852:	2302      	movs	r3, #2
 800b854:	9101      	str	r1, [sp, #4]
 800b856:	f000 fb57 	bl	800bf08 <arm_radix8_butterfly_f32>
 800b85a:	9901      	ldr	r1, [sp, #4]
 800b85c:	4640      	mov	r0, r8
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	2302      	movs	r3, #2
 800b862:	b002      	add	sp, #8
 800b864:	ecbd 8b06 	vpop	{d8-d10}
 800b868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b86c:	f000 bb4c 	b.w	800bf08 <arm_radix8_butterfly_f32>

0800b870 <arm_cfft_radix8by4_f32>:
 800b870:	4602      	mov	r2, r0
 800b872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b876:	ed2d 8b04 	vpush	{d8-d9}
 800b87a:	8813      	ldrh	r3, [r2, #0]
 800b87c:	b08d      	sub	sp, #52	@ 0x34
 800b87e:	edd1 7a00 	vldr	s15, [r1]
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	6852      	ldr	r2, [r2, #4]
 800b886:	edd1 5a01 	vldr	s11, [r1, #4]
 800b88a:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 800b88e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b890:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 800b894:	4608      	mov	r0, r1
 800b896:	ed98 6a00 	vldr	s12, [r8]
 800b89a:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 800b89e:	ed96 7a00 	vldr	s14, [r6]
 800b8a2:	f102 0108 	add.w	r1, r2, #8
 800b8a6:	ee77 6a86 	vadd.f32	s13, s15, s12
 800b8aa:	ed95 5a00 	vldr	s10, [r5]
 800b8ae:	edd8 4a01 	vldr	s9, [r8, #4]
 800b8b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b8b6:	9102      	str	r1, [sp, #8]
 800b8b8:	0859      	lsrs	r1, r3, #1
 800b8ba:	ee77 3a26 	vadd.f32	s7, s14, s13
 800b8be:	ed96 4a01 	vldr	s8, [r6, #4]
 800b8c2:	ee35 6aa4 	vadd.f32	s12, s11, s9
 800b8c6:	ed95 3a01 	vldr	s6, [r5, #4]
 800b8ca:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800b8ce:	9109      	str	r1, [sp, #36]	@ 0x24
 800b8d0:	ee73 3a85 	vadd.f32	s7, s7, s10
 800b8d4:	0859      	lsrs	r1, r3, #1
 800b8d6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800b8da:	4603      	mov	r3, r0
 800b8dc:	ee76 4a44 	vsub.f32	s9, s12, s8
 800b8e0:	f102 0c10 	add.w	ip, r2, #16
 800b8e4:	edc0 3a00 	vstr	s7, [r0]
 800b8e8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b8ec:	ed96 2a01 	vldr	s4, [r6, #4]
 800b8f0:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b8fa:	ee36 6a02 	vadd.f32	s12, s12, s4
 800b8fe:	edd5 2a01 	vldr	s5, [r5, #4]
 800b902:	ee35 4ac7 	vsub.f32	s8, s11, s14
 800b906:	9303      	str	r3, [sp, #12]
 800b908:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b90c:	4637      	mov	r7, r6
 800b90e:	462c      	mov	r4, r5
 800b910:	3902      	subs	r1, #2
 800b912:	4643      	mov	r3, r8
 800b914:	ee74 5ac3 	vsub.f32	s11, s9, s6
 800b918:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800b91c:	f8cd c000 	str.w	ip, [sp]
 800b920:	ee36 6a22 	vadd.f32	s12, s12, s5
 800b924:	f102 0c18 	add.w	ip, r2, #24
 800b928:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b92c:	3708      	adds	r7, #8
 800b92e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b932:	3308      	adds	r3, #8
 800b934:	ee74 4a05 	vadd.f32	s9, s8, s10
 800b938:	3408      	adds	r4, #8
 800b93a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b93e:	0849      	lsrs	r1, r1, #1
 800b940:	ed80 6a01 	vstr	s12, [r0, #4]
 800b944:	9508      	str	r5, [sp, #32]
 800b946:	edc6 3a00 	vstr	s7, [r6]
 800b94a:	edc6 4a01 	vstr	s9, [r6, #4]
 800b94e:	9607      	str	r6, [sp, #28]
 800b950:	edc8 6a00 	vstr	s13, [r8]
 800b954:	edc8 5a01 	vstr	s11, [r8, #4]
 800b958:	f8cd c004 	str.w	ip, [sp, #4]
 800b95c:	9706      	str	r7, [sp, #24]
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	edc5 7a00 	vstr	s15, [r5]
 800b964:	9404      	str	r4, [sp, #16]
 800b966:	ed85 7a01 	vstr	s14, [r5, #4]
 800b96a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b96c:	f000 813a 	beq.w	800bbe4 <arm_cfft_radix8by4_f32+0x374>
 800b970:	4637      	mov	r7, r6
 800b972:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b976:	462e      	mov	r6, r5
 800b978:	f1aa 030c 	sub.w	r3, sl, #12
 800b97c:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800b980:	f102 0a20 	add.w	sl, r2, #32
 800b984:	4632      	mov	r2, r6
 800b986:	442b      	add	r3, r5
 800b988:	f100 0e10 	add.w	lr, r0, #16
 800b98c:	f107 0510 	add.w	r5, r7, #16
 800b990:	f8dd b000 	ldr.w	fp, [sp]
 800b994:	f1a8 040c 	sub.w	r4, r8, #12
 800b998:	f108 0710 	add.w	r7, r8, #16
 800b99c:	3e0c      	subs	r6, #12
 800b99e:	3210      	adds	r2, #16
 800b9a0:	ed17 7a02 	vldr	s14, [r7, #-8]
 800b9a4:	3901      	subs	r1, #1
 800b9a6:	ed5e 7a02 	vldr	s15, [lr, #-8]
 800b9aa:	f1ac 0c08 	sub.w	ip, ip, #8
 800b9ae:	ed55 6a02 	vldr	s13, [r5, #-8]
 800b9b2:	f10e 0e08 	add.w	lr, lr, #8
 800b9b6:	ee77 1a87 	vadd.f32	s3, s15, s14
 800b9ba:	ed52 4a02 	vldr	s9, [r2, #-8]
 800b9be:	ed57 5a01 	vldr	s11, [r7, #-4]
 800b9c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9c6:	ed1e 7a03 	vldr	s14, [lr, #-12]
 800b9ca:	f10b 0b08 	add.w	fp, fp, #8
 800b9ce:	ee36 6aa1 	vadd.f32	s12, s13, s3
 800b9d2:	ed15 3a01 	vldr	s6, [r5, #-4]
 800b9d6:	ee37 4a25 	vadd.f32	s8, s14, s11
 800b9da:	ed52 3a01 	vldr	s7, [r2, #-4]
 800b9de:	ee37 7a65 	vsub.f32	s14, s14, s11
 800b9e2:	f105 0508 	add.w	r5, r5, #8
 800b9e6:	ee36 6a24 	vadd.f32	s12, s12, s9
 800b9ea:	f1a4 0408 	sub.w	r4, r4, #8
 800b9ee:	ee73 2a27 	vadd.f32	s5, s6, s15
 800b9f2:	f10a 0a10 	add.w	sl, sl, #16
 800b9f6:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b9fa:	f107 0708 	add.w	r7, r7, #8
 800b9fe:	ed0e 6a04 	vstr	s12, [lr, #-16]
 800ba02:	ee37 5a66 	vsub.f32	s10, s14, s13
 800ba06:	ed55 5a03 	vldr	s11, [r5, #-12]
 800ba0a:	ee71 1ae6 	vsub.f32	s3, s3, s13
 800ba0e:	ed12 6a01 	vldr	s12, [r2, #-4]
 800ba12:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ba16:	ee74 5a25 	vadd.f32	s11, s8, s11
 800ba1a:	f1a6 0608 	sub.w	r6, r6, #8
 800ba1e:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ba22:	f109 0918 	add.w	r9, r9, #24
 800ba26:	ee32 0ae3 	vsub.f32	s0, s5, s7
 800ba2a:	f102 0208 	add.w	r2, r2, #8
 800ba2e:	ee75 5a86 	vadd.f32	s11, s11, s12
 800ba32:	f1a3 0308 	sub.w	r3, r3, #8
 800ba36:	ee34 6a63 	vsub.f32	s12, s8, s7
 800ba3a:	ee77 3aa3 	vadd.f32	s7, s15, s7
 800ba3e:	ed4e 5a03 	vstr	s11, [lr, #-12]
 800ba42:	ee35 5a24 	vadd.f32	s10, s10, s9
 800ba46:	ed96 4a04 	vldr	s8, [r6, #16]
 800ba4a:	ee71 1ae4 	vsub.f32	s3, s3, s9
 800ba4e:	ed9c 3a04 	vldr	s6, [ip, #16]
 800ba52:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ba56:	edd4 7a04 	vldr	s15, [r4, #16]
 800ba5a:	ee73 6a04 	vadd.f32	s13, s6, s8
 800ba5e:	ed93 8a04 	vldr	s16, [r3, #16]
 800ba62:	edd6 5a03 	vldr	s11, [r6, #12]
 800ba66:	ee33 3a44 	vsub.f32	s6, s6, s8
 800ba6a:	ed9c 2a03 	vldr	s4, [ip, #12]
 800ba6e:	ee77 8ac8 	vsub.f32	s17, s15, s16
 800ba72:	ee77 0aa6 	vadd.f32	s1, s15, s13
 800ba76:	ed94 1a03 	vldr	s2, [r4, #12]
 800ba7a:	ee32 4a25 	vadd.f32	s8, s4, s11
 800ba7e:	edd3 2a03 	vldr	s5, [r3, #12]
 800ba82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ba86:	ee70 0a88 	vadd.f32	s1, s1, s16
 800ba8a:	ee73 4a41 	vsub.f32	s9, s6, s2
 800ba8e:	ee32 2a65 	vsub.f32	s4, s4, s11
 800ba92:	edcc 0a04 	vstr	s1, [ip, #16]
 800ba96:	ee74 0a41 	vsub.f32	s1, s8, s2
 800ba9a:	edd4 6a03 	vldr	s13, [r4, #12]
 800ba9e:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800baa2:	ed93 9a03 	vldr	s18, [r3, #12]
 800baa6:	ee78 5a82 	vadd.f32	s11, s17, s4
 800baaa:	ee34 4a26 	vadd.f32	s8, s8, s13
 800baae:	ee70 0ae2 	vsub.f32	s1, s1, s5
 800bab2:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800bab6:	ee34 4a09 	vadd.f32	s8, s8, s18
 800baba:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800babe:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800bac2:	ed8c 4a03 	vstr	s8, [ip, #12]
 800bac6:	ee38 2ac2 	vsub.f32	s4, s17, s4
 800baca:	ed1b 1a03 	vldr	s2, [fp, #-12]
 800bace:	ed1b 4a04 	vldr	s8, [fp, #-16]
 800bad2:	ee60 2a01 	vmul.f32	s5, s0, s2
 800bad6:	ee64 6a81 	vmul.f32	s13, s9, s2
 800bada:	ee20 8a04 	vmul.f32	s16, s0, s8
 800bade:	ee64 4a84 	vmul.f32	s9, s9, s8
 800bae2:	ee25 0a01 	vmul.f32	s0, s10, s2
 800bae6:	ee25 5a04 	vmul.f32	s10, s10, s8
 800baea:	ee25 4a84 	vmul.f32	s8, s11, s8
 800baee:	ee65 5a81 	vmul.f32	s11, s11, s2
 800baf2:	ee35 5a62 	vsub.f32	s10, s10, s5
 800baf6:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800bafa:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800bafe:	ee38 1a00 	vadd.f32	s2, s16, s0
 800bb02:	ed05 5a03 	vstr	s10, [r5, #-12]
 800bb06:	ed05 1a04 	vstr	s2, [r5, #-16]
 800bb0a:	ed84 4a04 	vstr	s8, [r4, #16]
 800bb0e:	edc4 5a03 	vstr	s11, [r4, #12]
 800bb12:	ed1a 5a08 	vldr	s10, [sl, #-32]	@ 0xffffffe0
 800bb16:	ed5a 5a07 	vldr	s11, [sl, #-28]	@ 0xffffffe4
 800bb1a:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 800bb1e:	ee66 2a25 	vmul.f32	s5, s12, s11
 800bb22:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800bb26:	ee21 4a85 	vmul.f32	s8, s3, s10
 800bb2a:	ee60 7a85 	vmul.f32	s15, s1, s10
 800bb2e:	ee61 1aa5 	vmul.f32	s3, s3, s11
 800bb32:	ee26 6a05 	vmul.f32	s12, s12, s10
 800bb36:	ee60 5aa5 	vmul.f32	s11, s1, s11
 800bb3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bb3e:	ee34 5a22 	vadd.f32	s10, s8, s5
 800bb42:	ee36 6a61 	vsub.f32	s12, s12, s3
 800bb46:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800bb4a:	ed07 5a04 	vstr	s10, [r7, #-16]
 800bb4e:	ed07 6a03 	vstr	s12, [r7, #-12]
 800bb52:	edc6 5a04 	vstr	s11, [r6, #16]
 800bb56:	edc6 6a03 	vstr	s13, [r6, #12]
 800bb5a:	ed59 2a0c 	vldr	s5, [r9, #-48]	@ 0xffffffd0
 800bb5e:	ed59 7a0b 	vldr	s15, [r9, #-44]	@ 0xffffffd4
 800bb62:	ee23 6aa2 	vmul.f32	s12, s7, s5
 800bb66:	ee67 5a27 	vmul.f32	s11, s14, s15
 800bb6a:	ee63 6a27 	vmul.f32	s13, s6, s15
 800bb6e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800bb72:	ee27 7a22 	vmul.f32	s14, s14, s5
 800bb76:	ee62 7a27 	vmul.f32	s15, s4, s15
 800bb7a:	ee23 3a22 	vmul.f32	s6, s6, s5
 800bb7e:	ee22 2a22 	vmul.f32	s4, s4, s5
 800bb82:	ee36 6a25 	vadd.f32	s12, s12, s11
 800bb86:	ee37 7a63 	vsub.f32	s14, s14, s7
 800bb8a:	ee36 2ac2 	vsub.f32	s4, s13, s4
 800bb8e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800bb92:	ed02 6a04 	vstr	s12, [r2, #-16]
 800bb96:	ed02 7a03 	vstr	s14, [r2, #-12]
 800bb9a:	ed83 2a04 	vstr	s4, [r3, #16]
 800bb9e:	edc3 7a03 	vstr	s15, [r3, #12]
 800bba2:	f47f aefd 	bne.w	800b9a0 <arm_cfft_radix8by4_f32+0x130>
 800bba6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bba8:	9903      	ldr	r1, [sp, #12]
 800bbaa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800bbae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bbb2:	9103      	str	r1, [sp, #12]
 800bbb4:	9902      	ldr	r1, [sp, #8]
 800bbb6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bbba:	9102      	str	r1, [sp, #8]
 800bbbc:	9906      	ldr	r1, [sp, #24]
 800bbbe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bbc2:	9106      	str	r1, [sp, #24]
 800bbc4:	9900      	ldr	r1, [sp, #0]
 800bbc6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800bbca:	9100      	str	r1, [sp, #0]
 800bbcc:	9905      	ldr	r1, [sp, #20]
 800bbce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bbd2:	9105      	str	r1, [sp, #20]
 800bbd4:	9904      	ldr	r1, [sp, #16]
 800bbd6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bbda:	9204      	str	r2, [sp, #16]
 800bbdc:	9a01      	ldr	r2, [sp, #4]
 800bbde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	9c03      	ldr	r4, [sp, #12]
 800bbe6:	2304      	movs	r3, #4
 800bbe8:	9e05      	ldr	r6, [sp, #20]
 800bbea:	ed94 7a00 	vldr	s14, [r4]
 800bbee:	edd6 7a00 	vldr	s15, [r6]
 800bbf2:	9a06      	ldr	r2, [sp, #24]
 800bbf4:	ee37 6a27 	vadd.f32	s12, s14, s15
 800bbf8:	9d04      	ldr	r5, [sp, #16]
 800bbfa:	edd2 6a00 	vldr	s13, [r2]
 800bbfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc02:	ed95 3a00 	vldr	s6, [r5]
 800bc06:	ee76 3a86 	vadd.f32	s7, s13, s12
 800bc0a:	ed96 5a01 	vldr	s10, [r6, #4]
 800bc0e:	ed94 4a01 	vldr	s8, [r4, #4]
 800bc12:	ee36 6a66 	vsub.f32	s12, s12, s13
 800bc16:	edd5 2a01 	vldr	s5, [r5, #4]
 800bc1a:	ee73 3a83 	vadd.f32	s7, s7, s6
 800bc1e:	edd2 7a01 	vldr	s15, [r2, #4]
 800bc22:	ee74 5a05 	vadd.f32	s11, s8, s10
 800bc26:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800bc2a:	ee34 4a45 	vsub.f32	s8, s8, s10
 800bc2e:	edc4 3a00 	vstr	s7, [r4]
 800bc32:	ee77 4a87 	vadd.f32	s9, s15, s14
 800bc36:	edd2 3a01 	vldr	s7, [r2, #4]
 800bc3a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800bc3e:	ed95 2a01 	vldr	s4, [r5, #4]
 800bc42:	ee34 5a66 	vsub.f32	s10, s8, s13
 800bc46:	ee75 3aa3 	vadd.f32	s7, s11, s7
 800bc4a:	9103      	str	r1, [sp, #12]
 800bc4c:	ee74 4ae2 	vsub.f32	s9, s9, s5
 800bc50:	ee35 5a03 	vadd.f32	s10, s10, s6
 800bc54:	ee73 3a82 	vadd.f32	s7, s7, s4
 800bc58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800bc5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc60:	edc4 3a01 	vstr	s7, [r4, #4]
 800bc64:	ee76 6a84 	vadd.f32	s13, s13, s8
 800bc68:	9c02      	ldr	r4, [sp, #8]
 800bc6a:	ee75 5ae2 	vsub.f32	s11, s11, s5
 800bc6e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800bc72:	edd4 3a00 	vldr	s7, [r4]
 800bc76:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bc7a:	ed94 7a01 	vldr	s14, [r4, #4]
 800bc7e:	ee24 4aa3 	vmul.f32	s8, s9, s7
 800bc82:	ee64 4a87 	vmul.f32	s9, s9, s14
 800bc86:	ee25 7a07 	vmul.f32	s14, s10, s14
 800bc8a:	ee25 5a23 	vmul.f32	s10, s10, s7
 800bc8e:	ee34 7a07 	vadd.f32	s14, s8, s14
 800bc92:	ee35 5a64 	vsub.f32	s10, s10, s9
 800bc96:	ed82 7a00 	vstr	s14, [r2]
 800bc9a:	ed82 5a01 	vstr	s10, [r2, #4]
 800bc9e:	9a00      	ldr	r2, [sp, #0]
 800bca0:	edd2 4a01 	vldr	s9, [r2, #4]
 800bca4:	ed92 7a00 	vldr	s14, [r2]
 800bca8:	9a01      	ldr	r2, [sp, #4]
 800bcaa:	ee26 5a07 	vmul.f32	s10, s12, s14
 800bcae:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bcb2:	ee25 7a87 	vmul.f32	s14, s11, s14
 800bcb6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800bcba:	ee37 6a46 	vsub.f32	s12, s14, s12
 800bcbe:	ee75 5a25 	vadd.f32	s11, s10, s11
 800bcc2:	ed86 6a01 	vstr	s12, [r6, #4]
 800bcc6:	edc6 5a00 	vstr	s11, [r6]
 800bcca:	edd2 5a01 	vldr	s11, [r2, #4]
 800bcce:	ed92 7a00 	vldr	s14, [r2]
 800bcd2:	ee27 6a87 	vmul.f32	s12, s15, s14
 800bcd6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800bcda:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bcde:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800bce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bce6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bcea:	edc5 6a00 	vstr	s13, [r5]
 800bcee:	edc5 7a01 	vstr	s15, [r5, #4]
 800bcf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bcf4:	6862      	ldr	r2, [r4, #4]
 800bcf6:	f000 f907 	bl	800bf08 <arm_radix8_butterfly_f32>
 800bcfa:	9903      	ldr	r1, [sp, #12]
 800bcfc:	9807      	ldr	r0, [sp, #28]
 800bcfe:	2304      	movs	r3, #4
 800bd00:	6862      	ldr	r2, [r4, #4]
 800bd02:	9100      	str	r1, [sp, #0]
 800bd04:	f000 f900 	bl	800bf08 <arm_radix8_butterfly_f32>
 800bd08:	4640      	mov	r0, r8
 800bd0a:	9900      	ldr	r1, [sp, #0]
 800bd0c:	6862      	ldr	r2, [r4, #4]
 800bd0e:	2304      	movs	r3, #4
 800bd10:	f000 f8fa 	bl	800bf08 <arm_radix8_butterfly_f32>
 800bd14:	9900      	ldr	r1, [sp, #0]
 800bd16:	6862      	ldr	r2, [r4, #4]
 800bd18:	2304      	movs	r3, #4
 800bd1a:	9808      	ldr	r0, [sp, #32]
 800bd1c:	b00d      	add	sp, #52	@ 0x34
 800bd1e:	ecbd 8b04 	vpop	{d8-d9}
 800bd22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd26:	f000 b8ef 	b.w	800bf08 <arm_radix8_butterfly_f32>
 800bd2a:	bf00      	nop

0800bd2c <arm_cfft_f32>:
 800bd2c:	2a01      	cmp	r2, #1
 800bd2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd32:	4607      	mov	r7, r0
 800bd34:	4690      	mov	r8, r2
 800bd36:	460c      	mov	r4, r1
 800bd38:	4699      	mov	r9, r3
 800bd3a:	8805      	ldrh	r5, [r0, #0]
 800bd3c:	d05b      	beq.n	800bdf6 <arm_cfft_f32+0xca>
 800bd3e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800bd42:	d053      	beq.n	800bdec <arm_cfft_f32+0xc0>
 800bd44:	d810      	bhi.n	800bd68 <arm_cfft_f32+0x3c>
 800bd46:	2d40      	cmp	r5, #64	@ 0x40
 800bd48:	d015      	beq.n	800bd76 <arm_cfft_f32+0x4a>
 800bd4a:	d94b      	bls.n	800bde4 <arm_cfft_f32+0xb8>
 800bd4c:	2d80      	cmp	r5, #128	@ 0x80
 800bd4e:	d103      	bne.n	800bd58 <arm_cfft_f32+0x2c>
 800bd50:	4621      	mov	r1, r4
 800bd52:	4638      	mov	r0, r7
 800bd54:	f7ff fcbe 	bl	800b6d4 <arm_cfft_radix8by2_f32>
 800bd58:	f1b9 0f00 	cmp.w	r9, #0
 800bd5c:	d114      	bne.n	800bd88 <arm_cfft_f32+0x5c>
 800bd5e:	f1b8 0f01 	cmp.w	r8, #1
 800bd62:	d019      	beq.n	800bd98 <arm_cfft_f32+0x6c>
 800bd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd68:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800bd6c:	d03e      	beq.n	800bdec <arm_cfft_f32+0xc0>
 800bd6e:	d932      	bls.n	800bdd6 <arm_cfft_f32+0xaa>
 800bd70:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800bd74:	d1f0      	bne.n	800bd58 <arm_cfft_f32+0x2c>
 800bd76:	2301      	movs	r3, #1
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 f8c3 	bl	800bf08 <arm_radix8_butterfly_f32>
 800bd82:	f1b9 0f00 	cmp.w	r9, #0
 800bd86:	d0ea      	beq.n	800bd5e <arm_cfft_f32+0x32>
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	89b9      	ldrh	r1, [r7, #12]
 800bd8e:	f000 f843 	bl	800be18 <arm_bitreversal_32>
 800bd92:	f1b8 0f01 	cmp.w	r8, #1
 800bd96:	d1e5      	bne.n	800bd64 <arm_cfft_f32+0x38>
 800bd98:	ee07 5a90 	vmov	s15, r5
 800bd9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bda8:	2d00      	cmp	r5, #0
 800bdaa:	d0db      	beq.n	800bd64 <arm_cfft_f32+0x38>
 800bdac:	f104 0108 	add.w	r1, r4, #8
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	ed11 7a02 	vldr	s14, [r1, #-8]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	ed51 7a01 	vldr	s15, [r1, #-4]
 800bdbc:	3108      	adds	r1, #8
 800bdbe:	429d      	cmp	r5, r3
 800bdc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bdc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bdc8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800bdcc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800bdd0:	d1ef      	bne.n	800bdb2 <arm_cfft_f32+0x86>
 800bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800bdda:	d0cc      	beq.n	800bd76 <arm_cfft_f32+0x4a>
 800bddc:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800bde0:	d0b6      	beq.n	800bd50 <arm_cfft_f32+0x24>
 800bde2:	e7b9      	b.n	800bd58 <arm_cfft_f32+0x2c>
 800bde4:	2d10      	cmp	r5, #16
 800bde6:	d0b3      	beq.n	800bd50 <arm_cfft_f32+0x24>
 800bde8:	2d20      	cmp	r5, #32
 800bdea:	d1b5      	bne.n	800bd58 <arm_cfft_f32+0x2c>
 800bdec:	4621      	mov	r1, r4
 800bdee:	4638      	mov	r0, r7
 800bdf0:	f7ff fd3e 	bl	800b870 <arm_cfft_radix8by4_f32>
 800bdf4:	e7b0      	b.n	800bd58 <arm_cfft_f32+0x2c>
 800bdf6:	b165      	cbz	r5, 800be12 <arm_cfft_f32+0xe6>
 800bdf8:	310c      	adds	r1, #12
 800bdfa:	2600      	movs	r6, #0
 800bdfc:	ed51 7a02 	vldr	s15, [r1, #-8]
 800be00:	3601      	adds	r6, #1
 800be02:	3108      	adds	r1, #8
 800be04:	eef1 7a67 	vneg.f32	s15, s15
 800be08:	42b5      	cmp	r5, r6
 800be0a:	ed41 7a04 	vstr	s15, [r1, #-16]
 800be0e:	d1f5      	bne.n	800bdfc <arm_cfft_f32+0xd0>
 800be10:	e795      	b.n	800bd3e <arm_cfft_f32+0x12>
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0a6      	beq.n	800bd64 <arm_cfft_f32+0x38>
 800be16:	e7b7      	b.n	800bd88 <arm_cfft_f32+0x5c>

0800be18 <arm_bitreversal_32>:
 800be18:	b321      	cbz	r1, 800be64 <arm_bitreversal_32+0x4c>
 800be1a:	f102 0c02 	add.w	ip, r2, #2
 800be1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be22:	4690      	mov	r8, r2
 800be24:	2500      	movs	r5, #0
 800be26:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 800be2a:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 800be2e:	3502      	adds	r5, #2
 800be30:	08a4      	lsrs	r4, r4, #2
 800be32:	089b      	lsrs	r3, r3, #2
 800be34:	428d      	cmp	r5, r1
 800be36:	ea4f 0784 	mov.w	r7, r4, lsl #2
 800be3a:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 800be3e:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800be42:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800be46:	f107 0704 	add.w	r7, r7, #4
 800be4a:	f106 0604 	add.w	r6, r6, #4
 800be4e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800be52:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800be56:	59c4      	ldr	r4, [r0, r7]
 800be58:	5983      	ldr	r3, [r0, r6]
 800be5a:	51c3      	str	r3, [r0, r7]
 800be5c:	5184      	str	r4, [r0, r6]
 800be5e:	d3e2      	bcc.n	800be26 <arm_bitreversal_32+0xe>
 800be60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop

0800be68 <arm_cfft_init_f32>:
 800be68:	2200      	movs	r2, #0
 800be6a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800be6e:	4603      	mov	r3, r0
 800be70:	b430      	push	{r4, r5}
 800be72:	6042      	str	r2, [r0, #4]
 800be74:	8001      	strh	r1, [r0, #0]
 800be76:	d032      	beq.n	800bede <arm_cfft_init_f32+0x76>
 800be78:	d918      	bls.n	800beac <arm_cfft_init_f32+0x44>
 800be7a:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800be7e:	d026      	beq.n	800bece <arm_cfft_init_f32+0x66>
 800be80:	d90c      	bls.n	800be9c <arm_cfft_init_f32+0x34>
 800be82:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800be86:	d11e      	bne.n	800bec6 <arm_cfft_init_f32+0x5e>
 800be88:	4916      	ldr	r1, [pc, #88]	@ (800bee4 <arm_cfft_init_f32+0x7c>)
 800be8a:	4610      	mov	r0, r2
 800be8c:	898d      	ldrh	r5, [r1, #12]
 800be8e:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
 800be92:	819d      	strh	r5, [r3, #12]
 800be94:	e9c3 2401 	strd	r2, r4, [r3, #4]
 800be98:	bc30      	pop	{r4, r5}
 800be9a:	4770      	bx	lr
 800be9c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bea0:	d017      	beq.n	800bed2 <arm_cfft_init_f32+0x6a>
 800bea2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bea6:	d10e      	bne.n	800bec6 <arm_cfft_init_f32+0x5e>
 800bea8:	490f      	ldr	r1, [pc, #60]	@ (800bee8 <arm_cfft_init_f32+0x80>)
 800beaa:	e7ee      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800beac:	2940      	cmp	r1, #64	@ 0x40
 800beae:	d012      	beq.n	800bed6 <arm_cfft_init_f32+0x6e>
 800beb0:	d903      	bls.n	800beba <arm_cfft_init_f32+0x52>
 800beb2:	2980      	cmp	r1, #128	@ 0x80
 800beb4:	d107      	bne.n	800bec6 <arm_cfft_init_f32+0x5e>
 800beb6:	490d      	ldr	r1, [pc, #52]	@ (800beec <arm_cfft_init_f32+0x84>)
 800beb8:	e7e7      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800beba:	2910      	cmp	r1, #16
 800bebc:	d00d      	beq.n	800beda <arm_cfft_init_f32+0x72>
 800bebe:	2920      	cmp	r1, #32
 800bec0:	d101      	bne.n	800bec6 <arm_cfft_init_f32+0x5e>
 800bec2:	490b      	ldr	r1, [pc, #44]	@ (800bef0 <arm_cfft_init_f32+0x88>)
 800bec4:	e7e1      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800bec6:	f04f 30ff 	mov.w	r0, #4294967295
 800beca:	bc30      	pop	{r4, r5}
 800becc:	4770      	bx	lr
 800bece:	4909      	ldr	r1, [pc, #36]	@ (800bef4 <arm_cfft_init_f32+0x8c>)
 800bed0:	e7db      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800bed2:	4909      	ldr	r1, [pc, #36]	@ (800bef8 <arm_cfft_init_f32+0x90>)
 800bed4:	e7d9      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800bed6:	4909      	ldr	r1, [pc, #36]	@ (800befc <arm_cfft_init_f32+0x94>)
 800bed8:	e7d7      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800beda:	4909      	ldr	r1, [pc, #36]	@ (800bf00 <arm_cfft_init_f32+0x98>)
 800bedc:	e7d5      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800bede:	4909      	ldr	r1, [pc, #36]	@ (800bf04 <arm_cfft_init_f32+0x9c>)
 800bee0:	e7d3      	b.n	800be8a <arm_cfft_init_f32+0x22>
 800bee2:	bf00      	nop
 800bee4:	0802e434 	.word	0x0802e434
 800bee8:	0802e3d4 	.word	0x0802e3d4
 800beec:	0802e3e4 	.word	0x0802e3e4
 800bef0:	0802e424 	.word	0x0802e424
 800bef4:	0802e404 	.word	0x0802e404
 800bef8:	0802e444 	.word	0x0802e444
 800befc:	0802e454 	.word	0x0802e454
 800bf00:	0802e3f4 	.word	0x0802e3f4
 800bf04:	0802e414 	.word	0x0802e414

0800bf08 <arm_radix8_butterfly_f32>:
 800bf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0c:	ed2d 8b10 	vpush	{d8-d15}
 800bf10:	b093      	sub	sp, #76	@ 0x4c
 800bf12:	468a      	mov	sl, r1
 800bf14:	eddf 8aba 	vldr	s17, [pc, #744]	@ 800c200 <arm_radix8_butterfly_f32+0x2f8>
 800bf18:	468b      	mov	fp, r1
 800bf1a:	9010      	str	r0, [sp, #64]	@ 0x40
 800bf1c:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800bf20:	4603      	mov	r3, r0
 800bf22:	3304      	adds	r3, #4
 800bf24:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf26:	ea4f 06da 	mov.w	r6, sl, lsr #3
 800bf2a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bf2c:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 800bf30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bf34:	eb05 1146 	add.w	r1, r5, r6, lsl #5
 800bf38:	960d      	str	r6, [sp, #52]	@ 0x34
 800bf3a:	00f0      	lsls	r0, r6, #3
 800bf3c:	f04f 0e00 	mov.w	lr, #0
 800bf40:	eb01 1406 	add.w	r4, r1, r6, lsl #4
 800bf44:	0137      	lsls	r7, r6, #4
 800bf46:	9003      	str	r0, [sp, #12]
 800bf48:	eba6 0286 	sub.w	r2, r6, r6, lsl #2
 800bf4c:	9400      	str	r4, [sp, #0]
 800bf4e:	9702      	str	r7, [sp, #8]
 800bf50:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800bf54:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800bf58:	1d04      	adds	r4, r0, #4
 800bf5a:	1d38      	adds	r0, r7, #4
 800bf5c:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800bf60:	442c      	add	r4, r5
 800bf62:	ebc6 09c6 	rsb	r9, r6, r6, lsl #3
 800bf66:	9701      	str	r7, [sp, #4]
 800bf68:	4428      	add	r0, r5
 800bf6a:	9d01      	ldr	r5, [sp, #4]
 800bf6c:	eb02 1746 	add.w	r7, r2, r6, lsl #5
 800bf70:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800bf74:	00ed      	lsls	r5, r5, #3
 800bf76:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800bf7a:	9501      	str	r5, [sp, #4]
 800bf7c:	ea4f 1508 	mov.w	r5, r8, lsl #4
 800bf80:	9504      	str	r5, [sp, #16]
 800bf82:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 800bf86:	9505      	str	r5, [sp, #20]
 800bf88:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bf8a:	ea4f 1845 	mov.w	r8, r5, lsl #5
 800bf8e:	9d00      	ldr	r5, [sp, #0]
 800bf90:	edd1 6a00 	vldr	s13, [r1]
 800bf94:	44d6      	add	lr, sl
 800bf96:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800bf9a:	ed95 7a00 	vldr	s14, [r5]
 800bf9e:	45f3      	cmp	fp, lr
 800bfa0:	ed14 6a01 	vldr	s12, [r4, #-4]
 800bfa4:	ee37 2aa6 	vadd.f32	s4, s15, s13
 800bfa8:	edd6 2a00 	vldr	s5, [r6]
 800bfac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bfb0:	edd7 3a00 	vldr	s7, [r7]
 800bfb4:	ed10 5a01 	vldr	s10, [r0, #-4]
 800bfb8:	ee36 3a22 	vadd.f32	s6, s12, s5
 800bfbc:	edd2 6a00 	vldr	s13, [r2]
 800bfc0:	ee75 5a07 	vadd.f32	s11, s10, s14
 800bfc4:	ee36 4aa3 	vadd.f32	s8, s13, s7
 800bfc8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800bfcc:	ee72 4a25 	vadd.f32	s9, s4, s11
 800bfd0:	ee73 3a04 	vadd.f32	s7, s6, s8
 800bfd4:	ee35 5a47 	vsub.f32	s10, s10, s14
 800bfd8:	ee36 7a62 	vsub.f32	s14, s12, s5
 800bfdc:	ee32 2a65 	vsub.f32	s4, s4, s11
 800bfe0:	ee74 5aa3 	vadd.f32	s11, s9, s7
 800bfe4:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800bfe8:	ee37 6a66 	vsub.f32	s12, s14, s13
 800bfec:	ed4c 5a01 	vstr	s11, [ip, #-4]
 800bff0:	ee33 3a44 	vsub.f32	s6, s6, s8
 800bff4:	edc1 4a00 	vstr	s9, [r1]
 800bff8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bffc:	ed97 4a01 	vldr	s8, [r7, #4]
 800c000:	ee66 6a28 	vmul.f32	s13, s12, s17
 800c004:	edd4 5a00 	vldr	s11, [r4]
 800c008:	ed96 6a01 	vldr	s12, [r6, #4]
 800c00c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800c010:	edd2 3a01 	vldr	s7, [r2, #4]
 800c014:	ee77 2aa6 	vadd.f32	s5, s15, s13
 800c018:	ee75 4ac6 	vsub.f32	s9, s11, s12
 800c01c:	ed91 1a01 	vldr	s2, [r1, #4]
 800c020:	ee33 0ac4 	vsub.f32	s0, s7, s8
 800c024:	edd5 0a01 	vldr	s1, [r5, #4]
 800c028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c02c:	eddc 6a00 	vldr	s13, [ip]
 800c030:	ee75 5a86 	vadd.f32	s11, s11, s12
 800c034:	ed90 6a00 	vldr	s12, [r0]
 800c038:	ee73 3a84 	vadd.f32	s7, s7, s8
 800c03c:	ee74 1a80 	vadd.f32	s3, s9, s0
 800c040:	ee36 4a81 	vadd.f32	s8, s13, s2
 800c044:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800c048:	ee76 6ac1 	vsub.f32	s13, s13, s2
 800c04c:	ee36 1a20 	vadd.f32	s2, s12, s1
 800c050:	ee61 1aa8 	vmul.f32	s3, s3, s17
 800c054:	ee36 6a60 	vsub.f32	s12, s12, s1
 800c058:	ee64 4aa8 	vmul.f32	s9, s9, s17
 800c05c:	ee75 0aa3 	vadd.f32	s1, s11, s7
 800c060:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800c064:	ee74 3a01 	vadd.f32	s7, s8, s2
 800c068:	ee34 4a41 	vsub.f32	s8, s8, s2
 800c06c:	ee36 1a21 	vadd.f32	s2, s12, s3
 800c070:	ee33 0aa0 	vadd.f32	s0, s7, s1
 800c074:	ee36 6a61 	vsub.f32	s12, s12, s3
 800c078:	ee73 3ae0 	vsub.f32	s7, s7, s1
 800c07c:	ee76 1aa4 	vadd.f32	s3, s13, s9
 800c080:	ed8c 0a00 	vstr	s0, [ip]
 800c084:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800c088:	449c      	add	ip, r3
 800c08a:	ee75 4a07 	vadd.f32	s9, s10, s14
 800c08e:	edc1 3a01 	vstr	s7, [r1, #4]
 800c092:	ee35 7a47 	vsub.f32	s14, s10, s14
 800c096:	4419      	add	r1, r3
 800c098:	ee32 5a25 	vadd.f32	s10, s4, s11
 800c09c:	ee72 5a65 	vsub.f32	s11, s4, s11
 800c0a0:	ee72 3a81 	vadd.f32	s7, s5, s2
 800c0a4:	ed00 5a01 	vstr	s10, [r0, #-4]
 800c0a8:	ee34 2a43 	vsub.f32	s4, s8, s6
 800c0ac:	edc5 5a00 	vstr	s11, [r5]
 800c0b0:	ee37 5a86 	vadd.f32	s10, s15, s12
 800c0b4:	ee71 5ae4 	vsub.f32	s11, s3, s9
 800c0b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c0bc:	ed80 2a00 	vstr	s4, [r0]
 800c0c0:	ee36 6ac7 	vsub.f32	s12, s13, s14
 800c0c4:	4418      	add	r0, r3
 800c0c6:	ee33 4a04 	vadd.f32	s8, s6, s8
 800c0ca:	ee72 2ac1 	vsub.f32	s5, s5, s2
 800c0ce:	ee74 4aa1 	vadd.f32	s9, s9, s3
 800c0d2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c0d6:	ed85 4a01 	vstr	s8, [r5, #4]
 800c0da:	ed44 3a01 	vstr	s7, [r4, #-4]
 800c0de:	441d      	add	r5, r3
 800c0e0:	edc7 2a00 	vstr	s5, [r7]
 800c0e4:	ed86 5a00 	vstr	s10, [r6]
 800c0e8:	edc2 7a00 	vstr	s15, [r2]
 800c0ec:	edc4 5a00 	vstr	s11, [r4]
 800c0f0:	441c      	add	r4, r3
 800c0f2:	edc7 4a01 	vstr	s9, [r7, #4]
 800c0f6:	441f      	add	r7, r3
 800c0f8:	ed86 6a01 	vstr	s12, [r6, #4]
 800c0fc:	441e      	add	r6, r3
 800c0fe:	ed82 7a01 	vstr	s14, [r2, #4]
 800c102:	441a      	add	r2, r3
 800c104:	f63f af44 	bhi.w	800bf90 <arm_radix8_butterfly_f32+0x88>
 800c108:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c10a:	2a07      	cmp	r2, #7
 800c10c:	f240 81b7 	bls.w	800c47e <arm_radix8_butterfly_f32+0x576>
 800c110:	9a03      	ldr	r2, [sp, #12]
 800c112:	f108 0808 	add.w	r8, r8, #8
 800c116:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c118:	f109 0008 	add.w	r0, r9, #8
 800c11c:	3208      	adds	r2, #8
 800c11e:	9e01      	ldr	r6, [sp, #4]
 800c120:	9d04      	ldr	r5, [sp, #16]
 800c122:	4694      	mov	ip, r2
 800c124:	463a      	mov	r2, r7
 800c126:	3608      	adds	r6, #8
 800c128:	9c05      	ldr	r4, [sp, #20]
 800c12a:	4442      	add	r2, r8
 800c12c:	3508      	adds	r5, #8
 800c12e:	3408      	adds	r4, #8
 800c130:	9902      	ldr	r1, [sp, #8]
 800c132:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c134:	eb07 020c 	add.w	r2, r7, ip
 800c138:	310c      	adds	r1, #12
 800c13a:	f04f 0800 	mov.w	r8, #0
 800c13e:	920a      	str	r2, [sp, #40]	@ 0x28
 800c140:	19ba      	adds	r2, r7, r6
 800c142:	9209      	str	r2, [sp, #36]	@ 0x24
 800c144:	197a      	adds	r2, r7, r5
 800c146:	9208      	str	r2, [sp, #32]
 800c148:	193a      	adds	r2, r7, r4
 800c14a:	9207      	str	r2, [sp, #28]
 800c14c:	183a      	adds	r2, r7, r0
 800c14e:	9206      	str	r2, [sp, #24]
 800c150:	187a      	adds	r2, r7, r1
 800c152:	9204      	str	r2, [sp, #16]
 800c154:	f107 020c 	add.w	r2, r7, #12
 800c158:	9205      	str	r2, [sp, #20]
 800c15a:	2201      	movs	r2, #1
 800c15c:	9203      	str	r2, [sp, #12]
 800c15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c160:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c164:	4490      	add	r8, r2
 800c166:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c168:	9f05      	ldr	r7, [sp, #20]
 800c16a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800c16e:	9e06      	ldr	r6, [sp, #24]
 800c170:	eba8 0e88 	sub.w	lr, r8, r8, lsl #2
 800c174:	9d07      	ldr	r5, [sp, #28]
 800c176:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800c17a:	ed92 ea00 	vldr	s28, [r2]
 800c17e:	9c08      	ldr	r4, [sp, #32]
 800c180:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800c184:	edd1 da00 	vldr	s27, [r1]
 800c188:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c18a:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800c18e:	ed92 da00 	vldr	s26, [r2]
 800c192:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800c196:	edd1 ca00 	vldr	s25, [r1]
 800c19a:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 800c19e:	ed92 ca00 	vldr	s24, [r2]
 800c1a2:	eb01 02c8 	add.w	r2, r1, r8, lsl #3
 800c1a6:	edd1 ba00 	vldr	s23, [r1]
 800c1aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c1ac:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 800c1b0:	ed92 ba00 	vldr	s22, [r2]
 800c1b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1b6:	eb0e 09c8 	add.w	r9, lr, r8, lsl #3
 800c1ba:	910c      	str	r1, [sp, #48]	@ 0x30
 800c1bc:	9200      	str	r2, [sp, #0]
 800c1be:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800c1c2:	ed99 aa01 	vldr	s20, [r9, #4]
 800c1c6:	edde aa01 	vldr	s21, [lr, #4]
 800c1ca:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800c1ce:	edd2 9a01 	vldr	s19, [r2, #4]
 800c1d2:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800c1d6:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800c1da:	ed99 9a01 	vldr	s18, [r9, #4]
 800c1de:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c1e0:	eb02 09c8 	add.w	r9, r2, r8, lsl #3
 800c1e4:	ed92 8a01 	vldr	s16, [r2, #4]
 800c1e8:	edd9 7a01 	vldr	s15, [r9, #4]
 800c1ec:	eb09 02c8 	add.w	r2, r9, r8, lsl #3
 800c1f0:	edcd 7a01 	vstr	s15, [sp, #4]
 800c1f4:	edd2 7a01 	vldr	s15, [r2, #4]
 800c1f8:	9a00      	ldr	r2, [sp, #0]
 800c1fa:	edcd 7a02 	vstr	s15, [sp, #8]
 800c1fe:	e001      	b.n	800c204 <arm_radix8_butterfly_f32+0x2fc>
 800c200:	3f3504f3 	.word	0x3f3504f3
 800c204:	ed92 7a00 	vldr	s14, [r2]
 800c208:	44d6      	add	lr, sl
 800c20a:	ed17 1a01 	vldr	s2, [r7, #-4]
 800c20e:	ed90 5a00 	vldr	s10, [r0]
 800c212:	45f3      	cmp	fp, lr
 800c214:	ed1c fa01 	vldr	s30, [ip, #-4]
 800c218:	ee31 3a07 	vadd.f32	s6, s2, s14
 800c21c:	edd6 5a00 	vldr	s11, [r6]
 800c220:	ee31 1a47 	vsub.f32	s2, s2, s14
 800c224:	edd4 7a00 	vldr	s15, [r4]
 800c228:	ed95 7a00 	vldr	s14, [r5]
 800c22c:	ed91 4a00 	vldr	s8, [r1]
 800c230:	ee3f 6a27 	vadd.f32	s12, s30, s15
 800c234:	ee77 6a25 	vadd.f32	s13, s14, s11
 800c238:	edd7 ea00 	vldr	s29, [r7]
 800c23c:	ee74 fa05 	vadd.f32	s31, s8, s10
 800c240:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c244:	ee34 4a45 	vsub.f32	s8, s8, s10
 800c248:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 800c24c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c250:	ee33 3a46 	vsub.f32	s6, s6, s12
 800c254:	ee31 6a85 	vadd.f32	s12, s3, s10
 800c258:	ee7f 7a67 	vsub.f32	s15, s30, s15
 800c25c:	ee34 fa07 	vadd.f32	s30, s8, s14
 800c260:	ed07 6a01 	vstr	s12, [r7, #-4]
 800c264:	ee34 4a47 	vsub.f32	s8, s8, s14
 800c268:	edd5 3a01 	vldr	s7, [r5, #4]
 800c26c:	ee7f fae6 	vsub.f32	s31, s31, s13
 800c270:	ed90 7a01 	vldr	s14, [r0, #4]
 800c274:	ee2f fa28 	vmul.f32	s30, s30, s17
 800c278:	edd1 5a01 	vldr	s11, [r1, #4]
 800c27c:	ee24 4a28 	vmul.f32	s8, s8, s17
 800c280:	ed96 6a01 	vldr	s12, [r6, #4]
 800c284:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800c288:	ee75 0ac7 	vsub.f32	s1, s11, s14
 800c28c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c290:	ee73 2ac6 	vsub.f32	s5, s7, s12
 800c294:	edd4 4a01 	vldr	s9, [r4, #4]
 800c298:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c29c:	ed9c 7a00 	vldr	s14, [ip]
 800c2a0:	ee37 2a8f 	vadd.f32	s4, s15, s30
 800c2a4:	ee33 6a86 	vadd.f32	s12, s7, s12
 800c2a8:	ee37 facf 	vsub.f32	s30, s15, s30
 800c2ac:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 800c2b0:	ee70 7ae2 	vsub.f32	s15, s1, s5
 800c2b4:	ee7e eae6 	vsub.f32	s29, s29, s13
 800c2b8:	ee70 2aa2 	vadd.f32	s5, s1, s5
 800c2bc:	ee77 6a24 	vadd.f32	s13, s14, s9
 800c2c0:	ee75 0a86 	vadd.f32	s1, s11, s12
 800c2c4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c2c8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800c2cc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c2d0:	ee62 2aa8 	vmul.f32	s5, s5, s17
 800c2d4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c2d8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800c2dc:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 800c2e0:	ee77 4a22 	vadd.f32	s9, s14, s5
 800c2e4:	ee7e eae7 	vsub.f32	s29, s29, s15
 800c2e8:	ee77 7a62 	vsub.f32	s15, s14, s5
 800c2ec:	ee71 2a04 	vadd.f32	s5, s2, s8
 800c2f0:	ee31 7a44 	vsub.f32	s14, s2, s8
 800c2f4:	ee30 1a60 	vsub.f32	s2, s0, s1
 800c2f8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800c2fc:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c300:	ee33 3aef 	vsub.f32	s6, s7, s31
 800c304:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 800c308:	ee3e 4acf 	vsub.f32	s8, s29, s30
 800c30c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800c310:	ee72 5a25 	vadd.f32	s11, s4, s11
 800c314:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800c318:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800c31c:	ee77 2a27 	vadd.f32	s5, s14, s15
 800c320:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c324:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 800c328:	ee2c fa85 	vmul.f32	s30, s25, s10
 800c32c:	ee69 ea01 	vmul.f32	s29, s18, s2
 800c330:	ee29 5a05 	vmul.f32	s10, s18, s10
 800c334:	ee2c 1a81 	vmul.f32	s2, s25, s2
 800c338:	ee6d faa1 	vmul.f32	s31, s27, s3
 800c33c:	ee70 0a20 	vadd.f32	s1, s0, s1
 800c340:	ee6a 1a21 	vmul.f32	s3, s20, s3
 800c344:	ee2a 0a03 	vmul.f32	s0, s20, s6
 800c348:	ee2d 3a83 	vmul.f32	s6, s27, s6
 800c34c:	edc7 0a00 	vstr	s1, [r7]
 800c350:	ee7f ea2e 	vadd.f32	s29, s30, s29
 800c354:	441f      	add	r7, r3
 800c356:	ee2a faa3 	vmul.f32	s30, s21, s7
 800c35a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800c35e:	ee6e 3a23 	vmul.f32	s7, s28, s7
 800c362:	edc2 ea00 	vstr	s29, [r2]
 800c366:	ee3f 0a80 	vadd.f32	s0, s31, s0
 800c36a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c36e:	ed82 5a01 	vstr	s10, [r2, #4]
 800c372:	ee6e 0a02 	vmul.f32	s1, s28, s4
 800c376:	ed9d 5a02 	vldr	s10, [sp, #8]
 800c37a:	edcd 3a00 	vstr	s7, [sp]
 800c37e:	ee6b ea86 	vmul.f32	s29, s23, s12
 800c382:	eddd 3a01 	vldr	s7, [sp, #4]
 800c386:	ee6b fa24 	vmul.f32	s31, s22, s9
 800c38a:	ed0c 0a01 	vstr	s0, [ip, #-4]
 800c38e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c392:	ed8c 3a00 	vstr	s6, [ip]
 800c396:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800c39a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800c39e:	eddd 3a00 	vldr	s7, [sp]
 800c3a2:	ee25 5a25 	vmul.f32	s10, s10, s11
 800c3a6:	441a      	add	r2, r3
 800c3a8:	ee2c 0a22 	vmul.f32	s0, s24, s5
 800c3ac:	449c      	add	ip, r3
 800c3ae:	ee68 1a04 	vmul.f32	s3, s16, s8
 800c3b2:	ee70 0a8f 	vadd.f32	s1, s1, s30
 800c3b6:	ee2d 3a07 	vmul.f32	s6, s26, s14
 800c3ba:	ee29 faa7 	vmul.f32	s30, s19, s15
 800c3be:	ee2a 2a82 	vmul.f32	s4, s21, s4
 800c3c2:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 800c3c6:	ee6b 5a25 	vmul.f32	s11, s22, s11
 800c3ca:	ee68 2a22 	vmul.f32	s5, s16, s5
 800c3ce:	ee2c 4a04 	vmul.f32	s8, s24, s8
 800c3d2:	ee29 7a87 	vmul.f32	s14, s19, s14
 800c3d6:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800c3da:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c3de:	ee7e ea81 	vadd.f32	s29, s29, s2
 800c3e2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c3e6:	ee3f 5a85 	vadd.f32	s10, s31, s10
 800c3ea:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800c3ee:	edc4 ea00 	vstr	s29, [r4]
 800c3f2:	ee30 0a21 	vadd.f32	s0, s0, s3
 800c3f6:	ed84 6a01 	vstr	s12, [r4, #4]
 800c3fa:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c3fe:	edc1 0a00 	vstr	s1, [r1]
 800c402:	ee33 3a0f 	vadd.f32	s6, s6, s30
 800c406:	edc1 3a01 	vstr	s7, [r1, #4]
 800c40a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c40e:	ed86 5a00 	vstr	s10, [r6]
 800c412:	edc6 4a01 	vstr	s9, [r6, #4]
 800c416:	4419      	add	r1, r3
 800c418:	ed80 0a00 	vstr	s0, [r0]
 800c41c:	441c      	add	r4, r3
 800c41e:	edc0 2a01 	vstr	s5, [r0, #4]
 800c422:	441e      	add	r6, r3
 800c424:	ed85 3a00 	vstr	s6, [r5]
 800c428:	4418      	add	r0, r3
 800c42a:	ed85 7a01 	vstr	s14, [r5, #4]
 800c42e:	441d      	add	r5, r3
 800c430:	f63f aee8 	bhi.w	800c204 <arm_radix8_butterfly_f32+0x2fc>
 800c434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c436:	9a03      	ldr	r2, [sp, #12]
 800c438:	3108      	adds	r1, #8
 800c43a:	3201      	adds	r2, #1
 800c43c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c43e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c440:	9203      	str	r2, [sp, #12]
 800c442:	3108      	adds	r1, #8
 800c444:	910a      	str	r1, [sp, #40]	@ 0x28
 800c446:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c448:	3108      	adds	r1, #8
 800c44a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c44c:	9908      	ldr	r1, [sp, #32]
 800c44e:	3108      	adds	r1, #8
 800c450:	9108      	str	r1, [sp, #32]
 800c452:	9907      	ldr	r1, [sp, #28]
 800c454:	3108      	adds	r1, #8
 800c456:	9107      	str	r1, [sp, #28]
 800c458:	9906      	ldr	r1, [sp, #24]
 800c45a:	3108      	adds	r1, #8
 800c45c:	9106      	str	r1, [sp, #24]
 800c45e:	9905      	ldr	r1, [sp, #20]
 800c460:	3108      	adds	r1, #8
 800c462:	9105      	str	r1, [sp, #20]
 800c464:	9904      	ldr	r1, [sp, #16]
 800c466:	3108      	adds	r1, #8
 800c468:	9104      	str	r1, [sp, #16]
 800c46a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c46c:	4291      	cmp	r1, r2
 800c46e:	f47f ae76 	bne.w	800c15e <arm_radix8_butterfly_f32+0x256>
 800c472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c474:	468a      	mov	sl, r1
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	b29b      	uxth	r3, r3
 800c47a:	930e      	str	r3, [sp, #56]	@ 0x38
 800c47c:	e553      	b.n	800bf26 <arm_radix8_butterfly_f32+0x1e>
 800c47e:	b013      	add	sp, #76	@ 0x4c
 800c480:	ecbd 8b10 	vpop	{d8-d15}
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c488 <__cvt>:
 800c488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c48c:	ec57 6b10 	vmov	r6, r7, d0
 800c490:	2f00      	cmp	r7, #0
 800c492:	460c      	mov	r4, r1
 800c494:	4619      	mov	r1, r3
 800c496:	463b      	mov	r3, r7
 800c498:	bfb4      	ite	lt
 800c49a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c49e:	2300      	movge	r3, #0
 800c4a0:	4691      	mov	r9, r2
 800c4a2:	bfbf      	itttt	lt
 800c4a4:	4632      	movlt	r2, r6
 800c4a6:	461f      	movlt	r7, r3
 800c4a8:	232d      	movlt	r3, #45	@ 0x2d
 800c4aa:	4616      	movlt	r6, r2
 800c4ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c4b0:	700b      	strb	r3, [r1, #0]
 800c4b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4b4:	f023 0820 	bic.w	r8, r3, #32
 800c4b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4bc:	d005      	beq.n	800c4ca <__cvt+0x42>
 800c4be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c4c2:	d100      	bne.n	800c4c6 <__cvt+0x3e>
 800c4c4:	3401      	adds	r4, #1
 800c4c6:	2102      	movs	r1, #2
 800c4c8:	e000      	b.n	800c4cc <__cvt+0x44>
 800c4ca:	2103      	movs	r1, #3
 800c4cc:	ab03      	add	r3, sp, #12
 800c4ce:	4622      	mov	r2, r4
 800c4d0:	9301      	str	r3, [sp, #4]
 800c4d2:	ab02      	add	r3, sp, #8
 800c4d4:	ec47 6b10 	vmov	d0, r6, r7
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	4653      	mov	r3, sl
 800c4dc:	f001 f890 	bl	800d600 <_dtoa_r>
 800c4e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	d119      	bne.n	800c51c <__cvt+0x94>
 800c4e8:	f019 0f01 	tst.w	r9, #1
 800c4ec:	d00e      	beq.n	800c50c <__cvt+0x84>
 800c4ee:	eb00 0904 	add.w	r9, r0, r4
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	f7f4 fae9 	bl	8000ad0 <__aeabi_dcmpeq>
 800c4fe:	b108      	cbz	r0, 800c504 <__cvt+0x7c>
 800c500:	f8cd 900c 	str.w	r9, [sp, #12]
 800c504:	2230      	movs	r2, #48	@ 0x30
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	454b      	cmp	r3, r9
 800c50a:	d31e      	bcc.n	800c54a <__cvt+0xc2>
 800c50c:	9b03      	ldr	r3, [sp, #12]
 800c50e:	4628      	mov	r0, r5
 800c510:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c512:	1b5b      	subs	r3, r3, r5
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	b004      	add	sp, #16
 800c518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c51c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c520:	eb00 0904 	add.w	r9, r0, r4
 800c524:	d1e5      	bne.n	800c4f2 <__cvt+0x6a>
 800c526:	7803      	ldrb	r3, [r0, #0]
 800c528:	2b30      	cmp	r3, #48	@ 0x30
 800c52a:	d10a      	bne.n	800c542 <__cvt+0xba>
 800c52c:	2200      	movs	r2, #0
 800c52e:	2300      	movs	r3, #0
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f4 facc 	bl	8000ad0 <__aeabi_dcmpeq>
 800c538:	b918      	cbnz	r0, 800c542 <__cvt+0xba>
 800c53a:	f1c4 0401 	rsb	r4, r4, #1
 800c53e:	f8ca 4000 	str.w	r4, [sl]
 800c542:	f8da 3000 	ldr.w	r3, [sl]
 800c546:	4499      	add	r9, r3
 800c548:	e7d3      	b.n	800c4f2 <__cvt+0x6a>
 800c54a:	1c59      	adds	r1, r3, #1
 800c54c:	9103      	str	r1, [sp, #12]
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	e7d9      	b.n	800c506 <__cvt+0x7e>

0800c552 <__exponent>:
 800c552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c554:	2900      	cmp	r1, #0
 800c556:	7002      	strb	r2, [r0, #0]
 800c558:	bfba      	itte	lt
 800c55a:	4249      	neglt	r1, r1
 800c55c:	232d      	movlt	r3, #45	@ 0x2d
 800c55e:	232b      	movge	r3, #43	@ 0x2b
 800c560:	2909      	cmp	r1, #9
 800c562:	7043      	strb	r3, [r0, #1]
 800c564:	dd28      	ble.n	800c5b8 <__exponent+0x66>
 800c566:	f10d 0307 	add.w	r3, sp, #7
 800c56a:	270a      	movs	r7, #10
 800c56c:	461d      	mov	r5, r3
 800c56e:	461a      	mov	r2, r3
 800c570:	3b01      	subs	r3, #1
 800c572:	fbb1 f6f7 	udiv	r6, r1, r7
 800c576:	fb07 1416 	mls	r4, r7, r6, r1
 800c57a:	3430      	adds	r4, #48	@ 0x30
 800c57c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c580:	460c      	mov	r4, r1
 800c582:	4631      	mov	r1, r6
 800c584:	2c63      	cmp	r4, #99	@ 0x63
 800c586:	dcf2      	bgt.n	800c56e <__exponent+0x1c>
 800c588:	3130      	adds	r1, #48	@ 0x30
 800c58a:	1e94      	subs	r4, r2, #2
 800c58c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c590:	1c41      	adds	r1, r0, #1
 800c592:	4623      	mov	r3, r4
 800c594:	42ab      	cmp	r3, r5
 800c596:	d30a      	bcc.n	800c5ae <__exponent+0x5c>
 800c598:	f10d 0309 	add.w	r3, sp, #9
 800c59c:	1a9b      	subs	r3, r3, r2
 800c59e:	42ac      	cmp	r4, r5
 800c5a0:	bf88      	it	hi
 800c5a2:	2300      	movhi	r3, #0
 800c5a4:	3302      	adds	r3, #2
 800c5a6:	4403      	add	r3, r0
 800c5a8:	1a18      	subs	r0, r3, r0
 800c5aa:	b003      	add	sp, #12
 800c5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c5b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c5b6:	e7ed      	b.n	800c594 <__exponent+0x42>
 800c5b8:	2330      	movs	r3, #48	@ 0x30
 800c5ba:	3130      	adds	r1, #48	@ 0x30
 800c5bc:	7083      	strb	r3, [r0, #2]
 800c5be:	1d03      	adds	r3, r0, #4
 800c5c0:	70c1      	strb	r1, [r0, #3]
 800c5c2:	e7f1      	b.n	800c5a8 <__exponent+0x56>

0800c5c4 <_printf_float>:
 800c5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c8:	b08d      	sub	sp, #52	@ 0x34
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	461f      	mov	r7, r3
 800c5d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	f000 feed 	bl	800d3b4 <_localeconv_r>
 800c5da:	6803      	ldr	r3, [r0, #0]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	f7f3 fe4a 	bl	8000278 <strlen>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	9005      	str	r0, [sp, #20]
 800c5e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ea:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ee:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5f2:	3307      	adds	r3, #7
 800c5f4:	f8d4 b000 	ldr.w	fp, [r4]
 800c5f8:	f023 0307 	bic.w	r3, r3, #7
 800c5fc:	f103 0208 	add.w	r2, r3, #8
 800c600:	f8c8 2000 	str.w	r2, [r8]
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c60c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c610:	f8cd 8018 	str.w	r8, [sp, #24]
 800c614:	9307      	str	r3, [sp, #28]
 800c616:	4b9d      	ldr	r3, [pc, #628]	@ (800c88c <_printf_float+0x2c8>)
 800c618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c61c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c620:	f7f4 fa88 	bl	8000b34 <__aeabi_dcmpun>
 800c624:	bb70      	cbnz	r0, 800c684 <_printf_float+0xc0>
 800c626:	f04f 32ff 	mov.w	r2, #4294967295
 800c62a:	4b98      	ldr	r3, [pc, #608]	@ (800c88c <_printf_float+0x2c8>)
 800c62c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c630:	f7f4 fa62 	bl	8000af8 <__aeabi_dcmple>
 800c634:	bb30      	cbnz	r0, 800c684 <_printf_float+0xc0>
 800c636:	2200      	movs	r2, #0
 800c638:	2300      	movs	r3, #0
 800c63a:	4640      	mov	r0, r8
 800c63c:	4649      	mov	r1, r9
 800c63e:	f7f4 fa51 	bl	8000ae4 <__aeabi_dcmplt>
 800c642:	b110      	cbz	r0, 800c64a <_printf_float+0x86>
 800c644:	232d      	movs	r3, #45	@ 0x2d
 800c646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c64a:	4a91      	ldr	r2, [pc, #580]	@ (800c890 <_printf_float+0x2cc>)
 800c64c:	4b91      	ldr	r3, [pc, #580]	@ (800c894 <_printf_float+0x2d0>)
 800c64e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c652:	bf8c      	ite	hi
 800c654:	4690      	movhi	r8, r2
 800c656:	4698      	movls	r8, r3
 800c658:	2303      	movs	r3, #3
 800c65a:	f04f 0900 	mov.w	r9, #0
 800c65e:	6123      	str	r3, [r4, #16]
 800c660:	f02b 0304 	bic.w	r3, fp, #4
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	4633      	mov	r3, r6
 800c668:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c66a:	4621      	mov	r1, r4
 800c66c:	4628      	mov	r0, r5
 800c66e:	9700      	str	r7, [sp, #0]
 800c670:	f000 f9d2 	bl	800ca18 <_printf_common>
 800c674:	3001      	adds	r0, #1
 800c676:	f040 808d 	bne.w	800c794 <_printf_float+0x1d0>
 800c67a:	f04f 30ff 	mov.w	r0, #4294967295
 800c67e:	b00d      	add	sp, #52	@ 0x34
 800c680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c684:	4642      	mov	r2, r8
 800c686:	464b      	mov	r3, r9
 800c688:	4640      	mov	r0, r8
 800c68a:	4649      	mov	r1, r9
 800c68c:	f7f4 fa52 	bl	8000b34 <__aeabi_dcmpun>
 800c690:	b140      	cbz	r0, 800c6a4 <_printf_float+0xe0>
 800c692:	464b      	mov	r3, r9
 800c694:	4a80      	ldr	r2, [pc, #512]	@ (800c898 <_printf_float+0x2d4>)
 800c696:	2b00      	cmp	r3, #0
 800c698:	bfbc      	itt	lt
 800c69a:	232d      	movlt	r3, #45	@ 0x2d
 800c69c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c6a0:	4b7e      	ldr	r3, [pc, #504]	@ (800c89c <_printf_float+0x2d8>)
 800c6a2:	e7d4      	b.n	800c64e <_printf_float+0x8a>
 800c6a4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c6a8:	6863      	ldr	r3, [r4, #4]
 800c6aa:	9206      	str	r2, [sp, #24]
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	d13b      	bne.n	800c728 <_printf_float+0x164>
 800c6b0:	2306      	movs	r3, #6
 800c6b2:	6063      	str	r3, [r4, #4]
 800c6b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	6022      	str	r2, [r4, #0]
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6c2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c6c6:	ab09      	add	r3, sp, #36	@ 0x24
 800c6c8:	ec49 8b10 	vmov	d0, r8, r9
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c6d2:	6861      	ldr	r1, [r4, #4]
 800c6d4:	f7ff fed8 	bl	800c488 <__cvt>
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	4680      	mov	r8, r0
 800c6dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6de:	2b47      	cmp	r3, #71	@ 0x47
 800c6e0:	d129      	bne.n	800c736 <_printf_float+0x172>
 800c6e2:	1cc8      	adds	r0, r1, #3
 800c6e4:	db02      	blt.n	800c6ec <_printf_float+0x128>
 800c6e6:	6863      	ldr	r3, [r4, #4]
 800c6e8:	4299      	cmp	r1, r3
 800c6ea:	dd41      	ble.n	800c770 <_printf_float+0x1ac>
 800c6ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800c6f0:	fa5f fa8a 	uxtb.w	sl, sl
 800c6f4:	3901      	subs	r1, #1
 800c6f6:	4652      	mov	r2, sl
 800c6f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c6fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c6fe:	f7ff ff28 	bl	800c552 <__exponent>
 800c702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c704:	4681      	mov	r9, r0
 800c706:	1813      	adds	r3, r2, r0
 800c708:	2a01      	cmp	r2, #1
 800c70a:	6123      	str	r3, [r4, #16]
 800c70c:	dc02      	bgt.n	800c714 <_printf_float+0x150>
 800c70e:	6822      	ldr	r2, [r4, #0]
 800c710:	07d2      	lsls	r2, r2, #31
 800c712:	d501      	bpl.n	800c718 <_printf_float+0x154>
 800c714:	3301      	adds	r3, #1
 800c716:	6123      	str	r3, [r4, #16]
 800c718:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d0a2      	beq.n	800c666 <_printf_float+0xa2>
 800c720:	232d      	movs	r3, #45	@ 0x2d
 800c722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c726:	e79e      	b.n	800c666 <_printf_float+0xa2>
 800c728:	9a06      	ldr	r2, [sp, #24]
 800c72a:	2a47      	cmp	r2, #71	@ 0x47
 800c72c:	d1c2      	bne.n	800c6b4 <_printf_float+0xf0>
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1c0      	bne.n	800c6b4 <_printf_float+0xf0>
 800c732:	2301      	movs	r3, #1
 800c734:	e7bd      	b.n	800c6b2 <_printf_float+0xee>
 800c736:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c73a:	d9db      	bls.n	800c6f4 <_printf_float+0x130>
 800c73c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c740:	d118      	bne.n	800c774 <_printf_float+0x1b0>
 800c742:	2900      	cmp	r1, #0
 800c744:	6863      	ldr	r3, [r4, #4]
 800c746:	dd0b      	ble.n	800c760 <_printf_float+0x19c>
 800c748:	6121      	str	r1, [r4, #16]
 800c74a:	b913      	cbnz	r3, 800c752 <_printf_float+0x18e>
 800c74c:	6822      	ldr	r2, [r4, #0]
 800c74e:	07d0      	lsls	r0, r2, #31
 800c750:	d502      	bpl.n	800c758 <_printf_float+0x194>
 800c752:	3301      	adds	r3, #1
 800c754:	440b      	add	r3, r1
 800c756:	6123      	str	r3, [r4, #16]
 800c758:	f04f 0900 	mov.w	r9, #0
 800c75c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c75e:	e7db      	b.n	800c718 <_printf_float+0x154>
 800c760:	b913      	cbnz	r3, 800c768 <_printf_float+0x1a4>
 800c762:	6822      	ldr	r2, [r4, #0]
 800c764:	07d2      	lsls	r2, r2, #31
 800c766:	d501      	bpl.n	800c76c <_printf_float+0x1a8>
 800c768:	3302      	adds	r3, #2
 800c76a:	e7f4      	b.n	800c756 <_printf_float+0x192>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e7f2      	b.n	800c756 <_printf_float+0x192>
 800c770:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c776:	4299      	cmp	r1, r3
 800c778:	db05      	blt.n	800c786 <_printf_float+0x1c2>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	6121      	str	r1, [r4, #16]
 800c77e:	07d8      	lsls	r0, r3, #31
 800c780:	d5ea      	bpl.n	800c758 <_printf_float+0x194>
 800c782:	1c4b      	adds	r3, r1, #1
 800c784:	e7e7      	b.n	800c756 <_printf_float+0x192>
 800c786:	2900      	cmp	r1, #0
 800c788:	bfd4      	ite	le
 800c78a:	f1c1 0202 	rsble	r2, r1, #2
 800c78e:	2201      	movgt	r2, #1
 800c790:	4413      	add	r3, r2
 800c792:	e7e0      	b.n	800c756 <_printf_float+0x192>
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	055a      	lsls	r2, r3, #21
 800c798:	d407      	bmi.n	800c7aa <_printf_float+0x1e6>
 800c79a:	6923      	ldr	r3, [r4, #16]
 800c79c:	4642      	mov	r2, r8
 800c79e:	4631      	mov	r1, r6
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	47b8      	blx	r7
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d12b      	bne.n	800c800 <_printf_float+0x23c>
 800c7a8:	e767      	b.n	800c67a <_printf_float+0xb6>
 800c7aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c7ae:	f240 80dd 	bls.w	800c96c <_printf_float+0x3a8>
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c7ba:	f7f4 f989 	bl	8000ad0 <__aeabi_dcmpeq>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d033      	beq.n	800c82a <_printf_float+0x266>
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	4a36      	ldr	r2, [pc, #216]	@ (800c8a0 <_printf_float+0x2dc>)
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	47b8      	blx	r7
 800c7cc:	3001      	adds	r0, #1
 800c7ce:	f43f af54 	beq.w	800c67a <_printf_float+0xb6>
 800c7d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c7d6:	4543      	cmp	r3, r8
 800c7d8:	db02      	blt.n	800c7e0 <_printf_float+0x21c>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	07d8      	lsls	r0, r3, #31
 800c7de:	d50f      	bpl.n	800c800 <_printf_float+0x23c>
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7e8:	47b8      	blx	r7
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	f43f af45 	beq.w	800c67a <_printf_float+0xb6>
 800c7f0:	f04f 0900 	mov.w	r9, #0
 800c7f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7f8:	f104 0a1a 	add.w	sl, r4, #26
 800c7fc:	45c8      	cmp	r8, r9
 800c7fe:	dc09      	bgt.n	800c814 <_printf_float+0x250>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	079b      	lsls	r3, r3, #30
 800c804:	f100 8103 	bmi.w	800ca0e <_printf_float+0x44a>
 800c808:	68e0      	ldr	r0, [r4, #12]
 800c80a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c80c:	4298      	cmp	r0, r3
 800c80e:	bfb8      	it	lt
 800c810:	4618      	movlt	r0, r3
 800c812:	e734      	b.n	800c67e <_printf_float+0xba>
 800c814:	2301      	movs	r3, #1
 800c816:	4652      	mov	r2, sl
 800c818:	4631      	mov	r1, r6
 800c81a:	4628      	mov	r0, r5
 800c81c:	47b8      	blx	r7
 800c81e:	3001      	adds	r0, #1
 800c820:	f43f af2b 	beq.w	800c67a <_printf_float+0xb6>
 800c824:	f109 0901 	add.w	r9, r9, #1
 800c828:	e7e8      	b.n	800c7fc <_printf_float+0x238>
 800c82a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dc39      	bgt.n	800c8a4 <_printf_float+0x2e0>
 800c830:	2301      	movs	r3, #1
 800c832:	4a1b      	ldr	r2, [pc, #108]	@ (800c8a0 <_printf_float+0x2dc>)
 800c834:	4631      	mov	r1, r6
 800c836:	4628      	mov	r0, r5
 800c838:	47b8      	blx	r7
 800c83a:	3001      	adds	r0, #1
 800c83c:	f43f af1d 	beq.w	800c67a <_printf_float+0xb6>
 800c840:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c844:	ea59 0303 	orrs.w	r3, r9, r3
 800c848:	d102      	bne.n	800c850 <_printf_float+0x28c>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	07d9      	lsls	r1, r3, #31
 800c84e:	d5d7      	bpl.n	800c800 <_printf_float+0x23c>
 800c850:	4631      	mov	r1, r6
 800c852:	4628      	mov	r0, r5
 800c854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c858:	47b8      	blx	r7
 800c85a:	3001      	adds	r0, #1
 800c85c:	f43f af0d 	beq.w	800c67a <_printf_float+0xb6>
 800c860:	f04f 0a00 	mov.w	sl, #0
 800c864:	f104 0b1a 	add.w	fp, r4, #26
 800c868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c86a:	425b      	negs	r3, r3
 800c86c:	4553      	cmp	r3, sl
 800c86e:	dc01      	bgt.n	800c874 <_printf_float+0x2b0>
 800c870:	464b      	mov	r3, r9
 800c872:	e793      	b.n	800c79c <_printf_float+0x1d8>
 800c874:	2301      	movs	r3, #1
 800c876:	465a      	mov	r2, fp
 800c878:	4631      	mov	r1, r6
 800c87a:	4628      	mov	r0, r5
 800c87c:	47b8      	blx	r7
 800c87e:	3001      	adds	r0, #1
 800c880:	f43f aefb 	beq.w	800c67a <_printf_float+0xb6>
 800c884:	f10a 0a01 	add.w	sl, sl, #1
 800c888:	e7ee      	b.n	800c868 <_printf_float+0x2a4>
 800c88a:	bf00      	nop
 800c88c:	7fefffff 	.word	0x7fefffff
 800c890:	0802e468 	.word	0x0802e468
 800c894:	0802e464 	.word	0x0802e464
 800c898:	0802e470 	.word	0x0802e470
 800c89c:	0802e46c 	.word	0x0802e46c
 800c8a0:	0802e474 	.word	0x0802e474
 800c8a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c8a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c8aa:	4553      	cmp	r3, sl
 800c8ac:	bfa8      	it	ge
 800c8ae:	4653      	movge	r3, sl
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	4699      	mov	r9, r3
 800c8b4:	dc36      	bgt.n	800c924 <_printf_float+0x360>
 800c8b6:	f04f 0b00 	mov.w	fp, #0
 800c8ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8be:	f104 021a 	add.w	r2, r4, #26
 800c8c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c8c4:	9306      	str	r3, [sp, #24]
 800c8c6:	eba3 0309 	sub.w	r3, r3, r9
 800c8ca:	455b      	cmp	r3, fp
 800c8cc:	dc31      	bgt.n	800c932 <_printf_float+0x36e>
 800c8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d0:	459a      	cmp	sl, r3
 800c8d2:	dc3a      	bgt.n	800c94a <_printf_float+0x386>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	07da      	lsls	r2, r3, #31
 800c8d8:	d437      	bmi.n	800c94a <_printf_float+0x386>
 800c8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8dc:	ebaa 0903 	sub.w	r9, sl, r3
 800c8e0:	9b06      	ldr	r3, [sp, #24]
 800c8e2:	ebaa 0303 	sub.w	r3, sl, r3
 800c8e6:	4599      	cmp	r9, r3
 800c8e8:	bfa8      	it	ge
 800c8ea:	4699      	movge	r9, r3
 800c8ec:	f1b9 0f00 	cmp.w	r9, #0
 800c8f0:	dc33      	bgt.n	800c95a <_printf_float+0x396>
 800c8f2:	f04f 0800 	mov.w	r8, #0
 800c8f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8fa:	f104 0b1a 	add.w	fp, r4, #26
 800c8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c900:	ebaa 0303 	sub.w	r3, sl, r3
 800c904:	eba3 0309 	sub.w	r3, r3, r9
 800c908:	4543      	cmp	r3, r8
 800c90a:	f77f af79 	ble.w	800c800 <_printf_float+0x23c>
 800c90e:	2301      	movs	r3, #1
 800c910:	465a      	mov	r2, fp
 800c912:	4631      	mov	r1, r6
 800c914:	4628      	mov	r0, r5
 800c916:	47b8      	blx	r7
 800c918:	3001      	adds	r0, #1
 800c91a:	f43f aeae 	beq.w	800c67a <_printf_float+0xb6>
 800c91e:	f108 0801 	add.w	r8, r8, #1
 800c922:	e7ec      	b.n	800c8fe <_printf_float+0x33a>
 800c924:	4642      	mov	r2, r8
 800c926:	4631      	mov	r1, r6
 800c928:	4628      	mov	r0, r5
 800c92a:	47b8      	blx	r7
 800c92c:	3001      	adds	r0, #1
 800c92e:	d1c2      	bne.n	800c8b6 <_printf_float+0x2f2>
 800c930:	e6a3      	b.n	800c67a <_printf_float+0xb6>
 800c932:	2301      	movs	r3, #1
 800c934:	4631      	mov	r1, r6
 800c936:	4628      	mov	r0, r5
 800c938:	9206      	str	r2, [sp, #24]
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	f43f ae9c 	beq.w	800c67a <_printf_float+0xb6>
 800c942:	f10b 0b01 	add.w	fp, fp, #1
 800c946:	9a06      	ldr	r2, [sp, #24]
 800c948:	e7bb      	b.n	800c8c2 <_printf_float+0x2fe>
 800c94a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c94e:	4631      	mov	r1, r6
 800c950:	4628      	mov	r0, r5
 800c952:	47b8      	blx	r7
 800c954:	3001      	adds	r0, #1
 800c956:	d1c0      	bne.n	800c8da <_printf_float+0x316>
 800c958:	e68f      	b.n	800c67a <_printf_float+0xb6>
 800c95a:	9a06      	ldr	r2, [sp, #24]
 800c95c:	464b      	mov	r3, r9
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	4442      	add	r2, r8
 800c964:	47b8      	blx	r7
 800c966:	3001      	adds	r0, #1
 800c968:	d1c3      	bne.n	800c8f2 <_printf_float+0x32e>
 800c96a:	e686      	b.n	800c67a <_printf_float+0xb6>
 800c96c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c970:	f1ba 0f01 	cmp.w	sl, #1
 800c974:	dc01      	bgt.n	800c97a <_printf_float+0x3b6>
 800c976:	07db      	lsls	r3, r3, #31
 800c978:	d536      	bpl.n	800c9e8 <_printf_float+0x424>
 800c97a:	2301      	movs	r3, #1
 800c97c:	4642      	mov	r2, r8
 800c97e:	4631      	mov	r1, r6
 800c980:	4628      	mov	r0, r5
 800c982:	47b8      	blx	r7
 800c984:	3001      	adds	r0, #1
 800c986:	f43f ae78 	beq.w	800c67a <_printf_float+0xb6>
 800c98a:	4631      	mov	r1, r6
 800c98c:	4628      	mov	r0, r5
 800c98e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c992:	47b8      	blx	r7
 800c994:	3001      	adds	r0, #1
 800c996:	f43f ae70 	beq.w	800c67a <_printf_float+0xb6>
 800c99a:	2200      	movs	r2, #0
 800c99c:	2300      	movs	r3, #0
 800c99e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c9a6:	f7f4 f893 	bl	8000ad0 <__aeabi_dcmpeq>
 800c9aa:	b9c0      	cbnz	r0, 800c9de <_printf_float+0x41a>
 800c9ac:	4653      	mov	r3, sl
 800c9ae:	f108 0201 	add.w	r2, r8, #1
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	47b8      	blx	r7
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d10c      	bne.n	800c9d6 <_printf_float+0x412>
 800c9bc:	e65d      	b.n	800c67a <_printf_float+0xb6>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	465a      	mov	r2, fp
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	47b8      	blx	r7
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	f43f ae56 	beq.w	800c67a <_printf_float+0xb6>
 800c9ce:	f108 0801 	add.w	r8, r8, #1
 800c9d2:	45d0      	cmp	r8, sl
 800c9d4:	dbf3      	blt.n	800c9be <_printf_float+0x3fa>
 800c9d6:	464b      	mov	r3, r9
 800c9d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c9dc:	e6df      	b.n	800c79e <_printf_float+0x1da>
 800c9de:	f04f 0800 	mov.w	r8, #0
 800c9e2:	f104 0b1a 	add.w	fp, r4, #26
 800c9e6:	e7f4      	b.n	800c9d2 <_printf_float+0x40e>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	4642      	mov	r2, r8
 800c9ec:	e7e1      	b.n	800c9b2 <_printf_float+0x3ee>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	464a      	mov	r2, r9
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	47b8      	blx	r7
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f43f ae3e 	beq.w	800c67a <_printf_float+0xb6>
 800c9fe:	f108 0801 	add.w	r8, r8, #1
 800ca02:	68e3      	ldr	r3, [r4, #12]
 800ca04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca06:	1a5b      	subs	r3, r3, r1
 800ca08:	4543      	cmp	r3, r8
 800ca0a:	dcf0      	bgt.n	800c9ee <_printf_float+0x42a>
 800ca0c:	e6fc      	b.n	800c808 <_printf_float+0x244>
 800ca0e:	f04f 0800 	mov.w	r8, #0
 800ca12:	f104 0919 	add.w	r9, r4, #25
 800ca16:	e7f4      	b.n	800ca02 <_printf_float+0x43e>

0800ca18 <_printf_common>:
 800ca18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1c:	4616      	mov	r6, r2
 800ca1e:	4698      	mov	r8, r3
 800ca20:	688a      	ldr	r2, [r1, #8]
 800ca22:	4607      	mov	r7, r0
 800ca24:	690b      	ldr	r3, [r1, #16]
 800ca26:	460c      	mov	r4, r1
 800ca28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bfb8      	it	lt
 800ca30:	4613      	movlt	r3, r2
 800ca32:	6033      	str	r3, [r6, #0]
 800ca34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca38:	b10a      	cbz	r2, 800ca3e <_printf_common+0x26>
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	6033      	str	r3, [r6, #0]
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	0699      	lsls	r1, r3, #26
 800ca42:	bf42      	ittt	mi
 800ca44:	6833      	ldrmi	r3, [r6, #0]
 800ca46:	3302      	addmi	r3, #2
 800ca48:	6033      	strmi	r3, [r6, #0]
 800ca4a:	6825      	ldr	r5, [r4, #0]
 800ca4c:	f015 0506 	ands.w	r5, r5, #6
 800ca50:	d106      	bne.n	800ca60 <_printf_common+0x48>
 800ca52:	f104 0a19 	add.w	sl, r4, #25
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	6832      	ldr	r2, [r6, #0]
 800ca5a:	1a9b      	subs	r3, r3, r2
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	dc2b      	bgt.n	800cab8 <_printf_common+0xa0>
 800ca60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca64:	6822      	ldr	r2, [r4, #0]
 800ca66:	3b00      	subs	r3, #0
 800ca68:	bf18      	it	ne
 800ca6a:	2301      	movne	r3, #1
 800ca6c:	0692      	lsls	r2, r2, #26
 800ca6e:	d430      	bmi.n	800cad2 <_printf_common+0xba>
 800ca70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca74:	4641      	mov	r1, r8
 800ca76:	4638      	mov	r0, r7
 800ca78:	47c8      	blx	r9
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	d023      	beq.n	800cac6 <_printf_common+0xae>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	341a      	adds	r4, #26
 800ca82:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ca86:	f003 0306 	and.w	r3, r3, #6
 800ca8a:	2b04      	cmp	r3, #4
 800ca8c:	bf0a      	itet	eq
 800ca8e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ca92:	2500      	movne	r5, #0
 800ca94:	6833      	ldreq	r3, [r6, #0]
 800ca96:	f04f 0600 	mov.w	r6, #0
 800ca9a:	bf08      	it	eq
 800ca9c:	1aed      	subeq	r5, r5, r3
 800ca9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800caa2:	bf08      	it	eq
 800caa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caa8:	4293      	cmp	r3, r2
 800caaa:	bfc4      	itt	gt
 800caac:	1a9b      	subgt	r3, r3, r2
 800caae:	18ed      	addgt	r5, r5, r3
 800cab0:	42b5      	cmp	r5, r6
 800cab2:	d11a      	bne.n	800caea <_printf_common+0xd2>
 800cab4:	2000      	movs	r0, #0
 800cab6:	e008      	b.n	800caca <_printf_common+0xb2>
 800cab8:	2301      	movs	r3, #1
 800caba:	4652      	mov	r2, sl
 800cabc:	4641      	mov	r1, r8
 800cabe:	4638      	mov	r0, r7
 800cac0:	47c8      	blx	r9
 800cac2:	3001      	adds	r0, #1
 800cac4:	d103      	bne.n	800cace <_printf_common+0xb6>
 800cac6:	f04f 30ff 	mov.w	r0, #4294967295
 800caca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cace:	3501      	adds	r5, #1
 800cad0:	e7c1      	b.n	800ca56 <_printf_common+0x3e>
 800cad2:	18e1      	adds	r1, r4, r3
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	2030      	movs	r0, #48	@ 0x30
 800cad8:	3302      	adds	r3, #2
 800cada:	4422      	add	r2, r4
 800cadc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cae4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cae8:	e7c2      	b.n	800ca70 <_printf_common+0x58>
 800caea:	2301      	movs	r3, #1
 800caec:	4622      	mov	r2, r4
 800caee:	4641      	mov	r1, r8
 800caf0:	4638      	mov	r0, r7
 800caf2:	47c8      	blx	r9
 800caf4:	3001      	adds	r0, #1
 800caf6:	d0e6      	beq.n	800cac6 <_printf_common+0xae>
 800caf8:	3601      	adds	r6, #1
 800cafa:	e7d9      	b.n	800cab0 <_printf_common+0x98>

0800cafc <_printf_i>:
 800cafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb00:	7e0f      	ldrb	r7, [r1, #24]
 800cb02:	4691      	mov	r9, r2
 800cb04:	4680      	mov	r8, r0
 800cb06:	460c      	mov	r4, r1
 800cb08:	2f78      	cmp	r7, #120	@ 0x78
 800cb0a:	469a      	mov	sl, r3
 800cb0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cb0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cb12:	d807      	bhi.n	800cb24 <_printf_i+0x28>
 800cb14:	2f62      	cmp	r7, #98	@ 0x62
 800cb16:	d80a      	bhi.n	800cb2e <_printf_i+0x32>
 800cb18:	2f00      	cmp	r7, #0
 800cb1a:	f000 80d1 	beq.w	800ccc0 <_printf_i+0x1c4>
 800cb1e:	2f58      	cmp	r7, #88	@ 0x58
 800cb20:	f000 80b8 	beq.w	800cc94 <_printf_i+0x198>
 800cb24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb2c:	e03a      	b.n	800cba4 <_printf_i+0xa8>
 800cb2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb32:	2b15      	cmp	r3, #21
 800cb34:	d8f6      	bhi.n	800cb24 <_printf_i+0x28>
 800cb36:	a101      	add	r1, pc, #4	@ (adr r1, 800cb3c <_printf_i+0x40>)
 800cb38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb3c:	0800cb95 	.word	0x0800cb95
 800cb40:	0800cba9 	.word	0x0800cba9
 800cb44:	0800cb25 	.word	0x0800cb25
 800cb48:	0800cb25 	.word	0x0800cb25
 800cb4c:	0800cb25 	.word	0x0800cb25
 800cb50:	0800cb25 	.word	0x0800cb25
 800cb54:	0800cba9 	.word	0x0800cba9
 800cb58:	0800cb25 	.word	0x0800cb25
 800cb5c:	0800cb25 	.word	0x0800cb25
 800cb60:	0800cb25 	.word	0x0800cb25
 800cb64:	0800cb25 	.word	0x0800cb25
 800cb68:	0800cca7 	.word	0x0800cca7
 800cb6c:	0800cbd3 	.word	0x0800cbd3
 800cb70:	0800cc61 	.word	0x0800cc61
 800cb74:	0800cb25 	.word	0x0800cb25
 800cb78:	0800cb25 	.word	0x0800cb25
 800cb7c:	0800ccc9 	.word	0x0800ccc9
 800cb80:	0800cb25 	.word	0x0800cb25
 800cb84:	0800cbd3 	.word	0x0800cbd3
 800cb88:	0800cb25 	.word	0x0800cb25
 800cb8c:	0800cb25 	.word	0x0800cb25
 800cb90:	0800cc69 	.word	0x0800cc69
 800cb94:	6833      	ldr	r3, [r6, #0]
 800cb96:	1d1a      	adds	r2, r3, #4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	6032      	str	r2, [r6, #0]
 800cb9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cba4:	2301      	movs	r3, #1
 800cba6:	e09c      	b.n	800cce2 <_printf_i+0x1e6>
 800cba8:	6833      	ldr	r3, [r6, #0]
 800cbaa:	6820      	ldr	r0, [r4, #0]
 800cbac:	1d19      	adds	r1, r3, #4
 800cbae:	6031      	str	r1, [r6, #0]
 800cbb0:	0606      	lsls	r6, r0, #24
 800cbb2:	d501      	bpl.n	800cbb8 <_printf_i+0xbc>
 800cbb4:	681d      	ldr	r5, [r3, #0]
 800cbb6:	e003      	b.n	800cbc0 <_printf_i+0xc4>
 800cbb8:	0645      	lsls	r5, r0, #25
 800cbba:	d5fb      	bpl.n	800cbb4 <_printf_i+0xb8>
 800cbbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	da03      	bge.n	800cbcc <_printf_i+0xd0>
 800cbc4:	232d      	movs	r3, #45	@ 0x2d
 800cbc6:	426d      	negs	r5, r5
 800cbc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbcc:	4858      	ldr	r0, [pc, #352]	@ (800cd30 <_printf_i+0x234>)
 800cbce:	230a      	movs	r3, #10
 800cbd0:	e011      	b.n	800cbf6 <_printf_i+0xfa>
 800cbd2:	6821      	ldr	r1, [r4, #0]
 800cbd4:	6833      	ldr	r3, [r6, #0]
 800cbd6:	0608      	lsls	r0, r1, #24
 800cbd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbdc:	d402      	bmi.n	800cbe4 <_printf_i+0xe8>
 800cbde:	0649      	lsls	r1, r1, #25
 800cbe0:	bf48      	it	mi
 800cbe2:	b2ad      	uxthmi	r5, r5
 800cbe4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbe6:	6033      	str	r3, [r6, #0]
 800cbe8:	4851      	ldr	r0, [pc, #324]	@ (800cd30 <_printf_i+0x234>)
 800cbea:	bf14      	ite	ne
 800cbec:	230a      	movne	r3, #10
 800cbee:	2308      	moveq	r3, #8
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cbf6:	6866      	ldr	r6, [r4, #4]
 800cbf8:	2e00      	cmp	r6, #0
 800cbfa:	60a6      	str	r6, [r4, #8]
 800cbfc:	db05      	blt.n	800cc0a <_printf_i+0x10e>
 800cbfe:	6821      	ldr	r1, [r4, #0]
 800cc00:	432e      	orrs	r6, r5
 800cc02:	f021 0104 	bic.w	r1, r1, #4
 800cc06:	6021      	str	r1, [r4, #0]
 800cc08:	d04b      	beq.n	800cca2 <_printf_i+0x1a6>
 800cc0a:	4616      	mov	r6, r2
 800cc0c:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc10:	fb03 5711 	mls	r7, r3, r1, r5
 800cc14:	5dc7      	ldrb	r7, [r0, r7]
 800cc16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc1a:	462f      	mov	r7, r5
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	42bb      	cmp	r3, r7
 800cc20:	d9f4      	bls.n	800cc0c <_printf_i+0x110>
 800cc22:	2b08      	cmp	r3, #8
 800cc24:	d10b      	bne.n	800cc3e <_printf_i+0x142>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	07df      	lsls	r7, r3, #31
 800cc2a:	d508      	bpl.n	800cc3e <_printf_i+0x142>
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	6861      	ldr	r1, [r4, #4]
 800cc30:	4299      	cmp	r1, r3
 800cc32:	bfde      	ittt	le
 800cc34:	2330      	movle	r3, #48	@ 0x30
 800cc36:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc3e:	1b92      	subs	r2, r2, r6
 800cc40:	6122      	str	r2, [r4, #16]
 800cc42:	464b      	mov	r3, r9
 800cc44:	aa03      	add	r2, sp, #12
 800cc46:	4621      	mov	r1, r4
 800cc48:	4640      	mov	r0, r8
 800cc4a:	f8cd a000 	str.w	sl, [sp]
 800cc4e:	f7ff fee3 	bl	800ca18 <_printf_common>
 800cc52:	3001      	adds	r0, #1
 800cc54:	d14a      	bne.n	800ccec <_printf_i+0x1f0>
 800cc56:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5a:	b004      	add	sp, #16
 800cc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	f043 0320 	orr.w	r3, r3, #32
 800cc66:	6023      	str	r3, [r4, #0]
 800cc68:	2778      	movs	r7, #120	@ 0x78
 800cc6a:	4832      	ldr	r0, [pc, #200]	@ (800cd34 <_printf_i+0x238>)
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc72:	061f      	lsls	r7, r3, #24
 800cc74:	6831      	ldr	r1, [r6, #0]
 800cc76:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc7a:	d402      	bmi.n	800cc82 <_printf_i+0x186>
 800cc7c:	065f      	lsls	r7, r3, #25
 800cc7e:	bf48      	it	mi
 800cc80:	b2ad      	uxthmi	r5, r5
 800cc82:	6031      	str	r1, [r6, #0]
 800cc84:	07d9      	lsls	r1, r3, #31
 800cc86:	bf44      	itt	mi
 800cc88:	f043 0320 	orrmi.w	r3, r3, #32
 800cc8c:	6023      	strmi	r3, [r4, #0]
 800cc8e:	b11d      	cbz	r5, 800cc98 <_printf_i+0x19c>
 800cc90:	2310      	movs	r3, #16
 800cc92:	e7ad      	b.n	800cbf0 <_printf_i+0xf4>
 800cc94:	4826      	ldr	r0, [pc, #152]	@ (800cd30 <_printf_i+0x234>)
 800cc96:	e7e9      	b.n	800cc6c <_printf_i+0x170>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	f023 0320 	bic.w	r3, r3, #32
 800cc9e:	6023      	str	r3, [r4, #0]
 800cca0:	e7f6      	b.n	800cc90 <_printf_i+0x194>
 800cca2:	4616      	mov	r6, r2
 800cca4:	e7bd      	b.n	800cc22 <_printf_i+0x126>
 800cca6:	6833      	ldr	r3, [r6, #0]
 800cca8:	6825      	ldr	r5, [r4, #0]
 800ccaa:	1d18      	adds	r0, r3, #4
 800ccac:	6961      	ldr	r1, [r4, #20]
 800ccae:	6030      	str	r0, [r6, #0]
 800ccb0:	062e      	lsls	r6, r5, #24
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	d501      	bpl.n	800ccba <_printf_i+0x1be>
 800ccb6:	6019      	str	r1, [r3, #0]
 800ccb8:	e002      	b.n	800ccc0 <_printf_i+0x1c4>
 800ccba:	0668      	lsls	r0, r5, #25
 800ccbc:	d5fb      	bpl.n	800ccb6 <_printf_i+0x1ba>
 800ccbe:	8019      	strh	r1, [r3, #0]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4616      	mov	r6, r2
 800ccc4:	6123      	str	r3, [r4, #16]
 800ccc6:	e7bc      	b.n	800cc42 <_printf_i+0x146>
 800ccc8:	6833      	ldr	r3, [r6, #0]
 800ccca:	2100      	movs	r1, #0
 800cccc:	1d1a      	adds	r2, r3, #4
 800ccce:	6032      	str	r2, [r6, #0]
 800ccd0:	681e      	ldr	r6, [r3, #0]
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f000 fbe4 	bl	800d4a2 <memchr>
 800ccda:	b108      	cbz	r0, 800cce0 <_printf_i+0x1e4>
 800ccdc:	1b80      	subs	r0, r0, r6
 800ccde:	6060      	str	r0, [r4, #4]
 800cce0:	6863      	ldr	r3, [r4, #4]
 800cce2:	6123      	str	r3, [r4, #16]
 800cce4:	2300      	movs	r3, #0
 800cce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccea:	e7aa      	b.n	800cc42 <_printf_i+0x146>
 800ccec:	6923      	ldr	r3, [r4, #16]
 800ccee:	4632      	mov	r2, r6
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	47d0      	blx	sl
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	d0ad      	beq.n	800cc56 <_printf_i+0x15a>
 800ccfa:	6823      	ldr	r3, [r4, #0]
 800ccfc:	079b      	lsls	r3, r3, #30
 800ccfe:	d413      	bmi.n	800cd28 <_printf_i+0x22c>
 800cd00:	68e0      	ldr	r0, [r4, #12]
 800cd02:	9b03      	ldr	r3, [sp, #12]
 800cd04:	4298      	cmp	r0, r3
 800cd06:	bfb8      	it	lt
 800cd08:	4618      	movlt	r0, r3
 800cd0a:	e7a6      	b.n	800cc5a <_printf_i+0x15e>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4632      	mov	r2, r6
 800cd10:	4649      	mov	r1, r9
 800cd12:	4640      	mov	r0, r8
 800cd14:	47d0      	blx	sl
 800cd16:	3001      	adds	r0, #1
 800cd18:	d09d      	beq.n	800cc56 <_printf_i+0x15a>
 800cd1a:	3501      	adds	r5, #1
 800cd1c:	68e3      	ldr	r3, [r4, #12]
 800cd1e:	9903      	ldr	r1, [sp, #12]
 800cd20:	1a5b      	subs	r3, r3, r1
 800cd22:	42ab      	cmp	r3, r5
 800cd24:	dcf2      	bgt.n	800cd0c <_printf_i+0x210>
 800cd26:	e7eb      	b.n	800cd00 <_printf_i+0x204>
 800cd28:	2500      	movs	r5, #0
 800cd2a:	f104 0619 	add.w	r6, r4, #25
 800cd2e:	e7f5      	b.n	800cd1c <_printf_i+0x220>
 800cd30:	0802e476 	.word	0x0802e476
 800cd34:	0802e487 	.word	0x0802e487

0800cd38 <_scanf_float>:
 800cd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd3c:	b087      	sub	sp, #28
 800cd3e:	4691      	mov	r9, r2
 800cd40:	4680      	mov	r8, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	688b      	ldr	r3, [r1, #8]
 800cd48:	1e5a      	subs	r2, r3, #1
 800cd4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cd4e:	460a      	mov	r2, r1
 800cd50:	bf89      	itett	hi
 800cd52:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cd56:	f04f 0b00 	movls.w	fp, #0
 800cd5a:	eb03 0b05 	addhi.w	fp, r3, r5
 800cd5e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cd62:	f04f 0500 	mov.w	r5, #0
 800cd66:	bf88      	it	hi
 800cd68:	608b      	strhi	r3, [r1, #8]
 800cd6a:	680b      	ldr	r3, [r1, #0]
 800cd6c:	46aa      	mov	sl, r5
 800cd6e:	462f      	mov	r7, r5
 800cd70:	9502      	str	r5, [sp, #8]
 800cd72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cd76:	f842 3b1c 	str.w	r3, [r2], #28
 800cd7a:	4616      	mov	r6, r2
 800cd7c:	9201      	str	r2, [sp, #4]
 800cd7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cd82:	68a2      	ldr	r2, [r4, #8]
 800cd84:	b15a      	cbz	r2, 800cd9e <_scanf_float+0x66>
 800cd86:	f8d9 3000 	ldr.w	r3, [r9]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	2b4e      	cmp	r3, #78	@ 0x4e
 800cd8e:	d863      	bhi.n	800ce58 <_scanf_float+0x120>
 800cd90:	2b40      	cmp	r3, #64	@ 0x40
 800cd92:	d83b      	bhi.n	800ce0c <_scanf_float+0xd4>
 800cd94:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cd98:	b2c8      	uxtb	r0, r1
 800cd9a:	280e      	cmp	r0, #14
 800cd9c:	d939      	bls.n	800ce12 <_scanf_float+0xda>
 800cd9e:	b11f      	cbz	r7, 800cda8 <_scanf_float+0x70>
 800cda0:	6823      	ldr	r3, [r4, #0]
 800cda2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cda6:	6023      	str	r3, [r4, #0]
 800cda8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdac:	f1ba 0f01 	cmp.w	sl, #1
 800cdb0:	f200 8115 	bhi.w	800cfde <_scanf_float+0x2a6>
 800cdb4:	9b01      	ldr	r3, [sp, #4]
 800cdb6:	429e      	cmp	r6, r3
 800cdb8:	f200 8106 	bhi.w	800cfc8 <_scanf_float+0x290>
 800cdbc:	2001      	movs	r0, #1
 800cdbe:	b007      	add	sp, #28
 800cdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cdc8:	2a0d      	cmp	r2, #13
 800cdca:	d8e8      	bhi.n	800cd9e <_scanf_float+0x66>
 800cdcc:	a101      	add	r1, pc, #4	@ (adr r1, 800cdd4 <_scanf_float+0x9c>)
 800cdce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cdd2:	bf00      	nop
 800cdd4:	0800cf1d 	.word	0x0800cf1d
 800cdd8:	0800cd9f 	.word	0x0800cd9f
 800cddc:	0800cd9f 	.word	0x0800cd9f
 800cde0:	0800cd9f 	.word	0x0800cd9f
 800cde4:	0800cf79 	.word	0x0800cf79
 800cde8:	0800cf53 	.word	0x0800cf53
 800cdec:	0800cd9f 	.word	0x0800cd9f
 800cdf0:	0800cd9f 	.word	0x0800cd9f
 800cdf4:	0800cf2b 	.word	0x0800cf2b
 800cdf8:	0800cd9f 	.word	0x0800cd9f
 800cdfc:	0800cd9f 	.word	0x0800cd9f
 800ce00:	0800cd9f 	.word	0x0800cd9f
 800ce04:	0800cd9f 	.word	0x0800cd9f
 800ce08:	0800cee7 	.word	0x0800cee7
 800ce0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ce10:	e7da      	b.n	800cdc8 <_scanf_float+0x90>
 800ce12:	290e      	cmp	r1, #14
 800ce14:	d8c3      	bhi.n	800cd9e <_scanf_float+0x66>
 800ce16:	a001      	add	r0, pc, #4	@ (adr r0, 800ce1c <_scanf_float+0xe4>)
 800ce18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ce1c:	0800ced7 	.word	0x0800ced7
 800ce20:	0800cd9f 	.word	0x0800cd9f
 800ce24:	0800ced7 	.word	0x0800ced7
 800ce28:	0800cf67 	.word	0x0800cf67
 800ce2c:	0800cd9f 	.word	0x0800cd9f
 800ce30:	0800ce79 	.word	0x0800ce79
 800ce34:	0800cebd 	.word	0x0800cebd
 800ce38:	0800cebd 	.word	0x0800cebd
 800ce3c:	0800cebd 	.word	0x0800cebd
 800ce40:	0800cebd 	.word	0x0800cebd
 800ce44:	0800cebd 	.word	0x0800cebd
 800ce48:	0800cebd 	.word	0x0800cebd
 800ce4c:	0800cebd 	.word	0x0800cebd
 800ce50:	0800cebd 	.word	0x0800cebd
 800ce54:	0800cebd 	.word	0x0800cebd
 800ce58:	2b6e      	cmp	r3, #110	@ 0x6e
 800ce5a:	d809      	bhi.n	800ce70 <_scanf_float+0x138>
 800ce5c:	2b60      	cmp	r3, #96	@ 0x60
 800ce5e:	d8b1      	bhi.n	800cdc4 <_scanf_float+0x8c>
 800ce60:	2b54      	cmp	r3, #84	@ 0x54
 800ce62:	d07b      	beq.n	800cf5c <_scanf_float+0x224>
 800ce64:	2b59      	cmp	r3, #89	@ 0x59
 800ce66:	d19a      	bne.n	800cd9e <_scanf_float+0x66>
 800ce68:	2d07      	cmp	r5, #7
 800ce6a:	d198      	bne.n	800cd9e <_scanf_float+0x66>
 800ce6c:	2508      	movs	r5, #8
 800ce6e:	e02f      	b.n	800ced0 <_scanf_float+0x198>
 800ce70:	2b74      	cmp	r3, #116	@ 0x74
 800ce72:	d073      	beq.n	800cf5c <_scanf_float+0x224>
 800ce74:	2b79      	cmp	r3, #121	@ 0x79
 800ce76:	e7f6      	b.n	800ce66 <_scanf_float+0x12e>
 800ce78:	6821      	ldr	r1, [r4, #0]
 800ce7a:	05c8      	lsls	r0, r1, #23
 800ce7c:	d51e      	bpl.n	800cebc <_scanf_float+0x184>
 800ce7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ce82:	3701      	adds	r7, #1
 800ce84:	6021      	str	r1, [r4, #0]
 800ce86:	f1bb 0f00 	cmp.w	fp, #0
 800ce8a:	d003      	beq.n	800ce94 <_scanf_float+0x15c>
 800ce8c:	3201      	adds	r2, #1
 800ce8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce92:	60a2      	str	r2, [r4, #8]
 800ce94:	68a3      	ldr	r3, [r4, #8]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	60a3      	str	r3, [r4, #8]
 800ce9a:	6923      	ldr	r3, [r4, #16]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	6123      	str	r3, [r4, #16]
 800cea0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cea4:	3b01      	subs	r3, #1
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f8c9 3004 	str.w	r3, [r9, #4]
 800ceac:	f340 8083 	ble.w	800cfb6 <_scanf_float+0x27e>
 800ceb0:	f8d9 3000 	ldr.w	r3, [r9]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	f8c9 3000 	str.w	r3, [r9]
 800ceba:	e762      	b.n	800cd82 <_scanf_float+0x4a>
 800cebc:	eb1a 0105 	adds.w	r1, sl, r5
 800cec0:	f47f af6d 	bne.w	800cd9e <_scanf_float+0x66>
 800cec4:	6822      	ldr	r2, [r4, #0]
 800cec6:	460d      	mov	r5, r1
 800cec8:	468a      	mov	sl, r1
 800ceca:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cece:	6022      	str	r2, [r4, #0]
 800ced0:	f806 3b01 	strb.w	r3, [r6], #1
 800ced4:	e7de      	b.n	800ce94 <_scanf_float+0x15c>
 800ced6:	6822      	ldr	r2, [r4, #0]
 800ced8:	0610      	lsls	r0, r2, #24
 800ceda:	f57f af60 	bpl.w	800cd9e <_scanf_float+0x66>
 800cede:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cee2:	6022      	str	r2, [r4, #0]
 800cee4:	e7f4      	b.n	800ced0 <_scanf_float+0x198>
 800cee6:	f1ba 0f00 	cmp.w	sl, #0
 800ceea:	d10c      	bne.n	800cf06 <_scanf_float+0x1ce>
 800ceec:	b977      	cbnz	r7, 800cf0c <_scanf_float+0x1d4>
 800ceee:	6822      	ldr	r2, [r4, #0]
 800cef0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cef4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cef8:	d108      	bne.n	800cf0c <_scanf_float+0x1d4>
 800cefa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cefe:	f04f 0a01 	mov.w	sl, #1
 800cf02:	6022      	str	r2, [r4, #0]
 800cf04:	e7e4      	b.n	800ced0 <_scanf_float+0x198>
 800cf06:	f1ba 0f02 	cmp.w	sl, #2
 800cf0a:	d051      	beq.n	800cfb0 <_scanf_float+0x278>
 800cf0c:	2d01      	cmp	r5, #1
 800cf0e:	d002      	beq.n	800cf16 <_scanf_float+0x1de>
 800cf10:	2d04      	cmp	r5, #4
 800cf12:	f47f af44 	bne.w	800cd9e <_scanf_float+0x66>
 800cf16:	3501      	adds	r5, #1
 800cf18:	b2ed      	uxtb	r5, r5
 800cf1a:	e7d9      	b.n	800ced0 <_scanf_float+0x198>
 800cf1c:	f1ba 0f01 	cmp.w	sl, #1
 800cf20:	f47f af3d 	bne.w	800cd9e <_scanf_float+0x66>
 800cf24:	f04f 0a02 	mov.w	sl, #2
 800cf28:	e7d2      	b.n	800ced0 <_scanf_float+0x198>
 800cf2a:	b975      	cbnz	r5, 800cf4a <_scanf_float+0x212>
 800cf2c:	2f00      	cmp	r7, #0
 800cf2e:	f47f af37 	bne.w	800cda0 <_scanf_float+0x68>
 800cf32:	6822      	ldr	r2, [r4, #0]
 800cf34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cf38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cf3c:	f040 8103 	bne.w	800d146 <_scanf_float+0x40e>
 800cf40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cf44:	2501      	movs	r5, #1
 800cf46:	6022      	str	r2, [r4, #0]
 800cf48:	e7c2      	b.n	800ced0 <_scanf_float+0x198>
 800cf4a:	2d03      	cmp	r5, #3
 800cf4c:	d0e3      	beq.n	800cf16 <_scanf_float+0x1de>
 800cf4e:	2d05      	cmp	r5, #5
 800cf50:	e7df      	b.n	800cf12 <_scanf_float+0x1da>
 800cf52:	2d02      	cmp	r5, #2
 800cf54:	f47f af23 	bne.w	800cd9e <_scanf_float+0x66>
 800cf58:	2503      	movs	r5, #3
 800cf5a:	e7b9      	b.n	800ced0 <_scanf_float+0x198>
 800cf5c:	2d06      	cmp	r5, #6
 800cf5e:	f47f af1e 	bne.w	800cd9e <_scanf_float+0x66>
 800cf62:	2507      	movs	r5, #7
 800cf64:	e7b4      	b.n	800ced0 <_scanf_float+0x198>
 800cf66:	6822      	ldr	r2, [r4, #0]
 800cf68:	0591      	lsls	r1, r2, #22
 800cf6a:	f57f af18 	bpl.w	800cd9e <_scanf_float+0x66>
 800cf6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cf72:	9702      	str	r7, [sp, #8]
 800cf74:	6022      	str	r2, [r4, #0]
 800cf76:	e7ab      	b.n	800ced0 <_scanf_float+0x198>
 800cf78:	6822      	ldr	r2, [r4, #0]
 800cf7a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cf7e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cf82:	d005      	beq.n	800cf90 <_scanf_float+0x258>
 800cf84:	0550      	lsls	r0, r2, #21
 800cf86:	f57f af0a 	bpl.w	800cd9e <_scanf_float+0x66>
 800cf8a:	2f00      	cmp	r7, #0
 800cf8c:	f000 80db 	beq.w	800d146 <_scanf_float+0x40e>
 800cf90:	0591      	lsls	r1, r2, #22
 800cf92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cf96:	bf58      	it	pl
 800cf98:	9902      	ldrpl	r1, [sp, #8]
 800cf9a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cf9e:	bf58      	it	pl
 800cfa0:	1a79      	subpl	r1, r7, r1
 800cfa2:	6022      	str	r2, [r4, #0]
 800cfa4:	f04f 0700 	mov.w	r7, #0
 800cfa8:	bf58      	it	pl
 800cfaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cfae:	e78f      	b.n	800ced0 <_scanf_float+0x198>
 800cfb0:	f04f 0a03 	mov.w	sl, #3
 800cfb4:	e78c      	b.n	800ced0 <_scanf_float+0x198>
 800cfb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cfba:	4649      	mov	r1, r9
 800cfbc:	4640      	mov	r0, r8
 800cfbe:	4798      	blx	r3
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	f43f aede 	beq.w	800cd82 <_scanf_float+0x4a>
 800cfc6:	e6ea      	b.n	800cd9e <_scanf_float+0x66>
 800cfc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cfcc:	464a      	mov	r2, r9
 800cfce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	4798      	blx	r3
 800cfd6:	6923      	ldr	r3, [r4, #16]
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	6123      	str	r3, [r4, #16]
 800cfdc:	e6ea      	b.n	800cdb4 <_scanf_float+0x7c>
 800cfde:	1e6b      	subs	r3, r5, #1
 800cfe0:	2b06      	cmp	r3, #6
 800cfe2:	d824      	bhi.n	800d02e <_scanf_float+0x2f6>
 800cfe4:	2d02      	cmp	r5, #2
 800cfe6:	d836      	bhi.n	800d056 <_scanf_float+0x31e>
 800cfe8:	9b01      	ldr	r3, [sp, #4]
 800cfea:	429e      	cmp	r6, r3
 800cfec:	f67f aee6 	bls.w	800cdbc <_scanf_float+0x84>
 800cff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cff4:	464a      	mov	r2, r9
 800cff6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cffa:	4640      	mov	r0, r8
 800cffc:	4798      	blx	r3
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	3b01      	subs	r3, #1
 800d002:	6123      	str	r3, [r4, #16]
 800d004:	e7f0      	b.n	800cfe8 <_scanf_float+0x2b0>
 800d006:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d00a:	464a      	mov	r2, r9
 800d00c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d010:	4640      	mov	r0, r8
 800d012:	4798      	blx	r3
 800d014:	6923      	ldr	r3, [r4, #16]
 800d016:	3b01      	subs	r3, #1
 800d018:	6123      	str	r3, [r4, #16]
 800d01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d01e:	fa5f fa8a 	uxtb.w	sl, sl
 800d022:	f1ba 0f02 	cmp.w	sl, #2
 800d026:	d1ee      	bne.n	800d006 <_scanf_float+0x2ce>
 800d028:	3d03      	subs	r5, #3
 800d02a:	b2ed      	uxtb	r5, r5
 800d02c:	1b76      	subs	r6, r6, r5
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	05da      	lsls	r2, r3, #23
 800d032:	d52f      	bpl.n	800d094 <_scanf_float+0x35c>
 800d034:	055b      	lsls	r3, r3, #21
 800d036:	d511      	bpl.n	800d05c <_scanf_float+0x324>
 800d038:	9b01      	ldr	r3, [sp, #4]
 800d03a:	429e      	cmp	r6, r3
 800d03c:	f67f aebe 	bls.w	800cdbc <_scanf_float+0x84>
 800d040:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d044:	464a      	mov	r2, r9
 800d046:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d04a:	4640      	mov	r0, r8
 800d04c:	4798      	blx	r3
 800d04e:	6923      	ldr	r3, [r4, #16]
 800d050:	3b01      	subs	r3, #1
 800d052:	6123      	str	r3, [r4, #16]
 800d054:	e7f0      	b.n	800d038 <_scanf_float+0x300>
 800d056:	46aa      	mov	sl, r5
 800d058:	46b3      	mov	fp, r6
 800d05a:	e7de      	b.n	800d01a <_scanf_float+0x2e2>
 800d05c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d060:	1e75      	subs	r5, r6, #1
 800d062:	6923      	ldr	r3, [r4, #16]
 800d064:	2965      	cmp	r1, #101	@ 0x65
 800d066:	f103 33ff 	add.w	r3, r3, #4294967295
 800d06a:	6123      	str	r3, [r4, #16]
 800d06c:	d00c      	beq.n	800d088 <_scanf_float+0x350>
 800d06e:	2945      	cmp	r1, #69	@ 0x45
 800d070:	d00a      	beq.n	800d088 <_scanf_float+0x350>
 800d072:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d076:	464a      	mov	r2, r9
 800d078:	4640      	mov	r0, r8
 800d07a:	1eb5      	subs	r5, r6, #2
 800d07c:	4798      	blx	r3
 800d07e:	6923      	ldr	r3, [r4, #16]
 800d080:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d084:	3b01      	subs	r3, #1
 800d086:	6123      	str	r3, [r4, #16]
 800d088:	462e      	mov	r6, r5
 800d08a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d08e:	464a      	mov	r2, r9
 800d090:	4640      	mov	r0, r8
 800d092:	4798      	blx	r3
 800d094:	6822      	ldr	r2, [r4, #0]
 800d096:	f012 0210 	ands.w	r2, r2, #16
 800d09a:	d001      	beq.n	800d0a0 <_scanf_float+0x368>
 800d09c:	2000      	movs	r0, #0
 800d09e:	e68e      	b.n	800cdbe <_scanf_float+0x86>
 800d0a0:	7032      	strb	r2, [r6, #0]
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d0a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0ac:	d125      	bne.n	800d0fa <_scanf_float+0x3c2>
 800d0ae:	9b02      	ldr	r3, [sp, #8]
 800d0b0:	429f      	cmp	r7, r3
 800d0b2:	d00a      	beq.n	800d0ca <_scanf_float+0x392>
 800d0b4:	1bda      	subs	r2, r3, r7
 800d0b6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d0ba:	4924      	ldr	r1, [pc, #144]	@ (800d14c <_scanf_float+0x414>)
 800d0bc:	429e      	cmp	r6, r3
 800d0be:	bf28      	it	cs
 800d0c0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 f907 	bl	800d2d8 <siprintf>
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	9901      	ldr	r1, [sp, #4]
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	f002 fc22 	bl	800f918 <_strtod_r>
 800d0d4:	6821      	ldr	r1, [r4, #0]
 800d0d6:	9b03      	ldr	r3, [sp, #12]
 800d0d8:	f011 0f02 	tst.w	r1, #2
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	ec57 6b10 	vmov	r6, r7, d0
 800d0e2:	f103 0204 	add.w	r2, r3, #4
 800d0e6:	d015      	beq.n	800d114 <_scanf_float+0x3dc>
 800d0e8:	9903      	ldr	r1, [sp, #12]
 800d0ea:	600a      	str	r2, [r1, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	e9c3 6700 	strd	r6, r7, [r3]
 800d0f2:	68e3      	ldr	r3, [r4, #12]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	60e3      	str	r3, [r4, #12]
 800d0f8:	e7d0      	b.n	800d09c <_scanf_float+0x364>
 800d0fa:	9b04      	ldr	r3, [sp, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0e4      	beq.n	800d0ca <_scanf_float+0x392>
 800d100:	9905      	ldr	r1, [sp, #20]
 800d102:	230a      	movs	r3, #10
 800d104:	4640      	mov	r0, r8
 800d106:	3101      	adds	r1, #1
 800d108:	f002 fc86 	bl	800fa18 <_strtol_r>
 800d10c:	9b04      	ldr	r3, [sp, #16]
 800d10e:	9e05      	ldr	r6, [sp, #20]
 800d110:	1ac2      	subs	r2, r0, r3
 800d112:	e7d0      	b.n	800d0b6 <_scanf_float+0x37e>
 800d114:	f011 0f04 	tst.w	r1, #4
 800d118:	9903      	ldr	r1, [sp, #12]
 800d11a:	600a      	str	r2, [r1, #0]
 800d11c:	d1e6      	bne.n	800d0ec <_scanf_float+0x3b4>
 800d11e:	681d      	ldr	r5, [r3, #0]
 800d120:	4632      	mov	r2, r6
 800d122:	463b      	mov	r3, r7
 800d124:	4630      	mov	r0, r6
 800d126:	4639      	mov	r1, r7
 800d128:	f7f3 fd04 	bl	8000b34 <__aeabi_dcmpun>
 800d12c:	b128      	cbz	r0, 800d13a <_scanf_float+0x402>
 800d12e:	4808      	ldr	r0, [pc, #32]	@ (800d150 <_scanf_float+0x418>)
 800d130:	f000 f9d2 	bl	800d4d8 <nanf>
 800d134:	ed85 0a00 	vstr	s0, [r5]
 800d138:	e7db      	b.n	800d0f2 <_scanf_float+0x3ba>
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 fd57 	bl	8000bf0 <__aeabi_d2f>
 800d142:	6028      	str	r0, [r5, #0]
 800d144:	e7d5      	b.n	800d0f2 <_scanf_float+0x3ba>
 800d146:	2700      	movs	r7, #0
 800d148:	e62e      	b.n	800cda8 <_scanf_float+0x70>
 800d14a:	bf00      	nop
 800d14c:	0802e498 	.word	0x0802e498
 800d150:	0802e5d9 	.word	0x0802e5d9

0800d154 <std>:
 800d154:	2300      	movs	r3, #0
 800d156:	b510      	push	{r4, lr}
 800d158:	4604      	mov	r4, r0
 800d15a:	6083      	str	r3, [r0, #8]
 800d15c:	8181      	strh	r1, [r0, #12]
 800d15e:	4619      	mov	r1, r3
 800d160:	6643      	str	r3, [r0, #100]	@ 0x64
 800d162:	81c2      	strh	r2, [r0, #14]
 800d164:	2208      	movs	r2, #8
 800d166:	6183      	str	r3, [r0, #24]
 800d168:	e9c0 3300 	strd	r3, r3, [r0]
 800d16c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d170:	305c      	adds	r0, #92	@ 0x5c
 800d172:	f000 f916 	bl	800d3a2 <memset>
 800d176:	4b0d      	ldr	r3, [pc, #52]	@ (800d1ac <std+0x58>)
 800d178:	6224      	str	r4, [r4, #32]
 800d17a:	6263      	str	r3, [r4, #36]	@ 0x24
 800d17c:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b0 <std+0x5c>)
 800d17e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d180:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b4 <std+0x60>)
 800d182:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d184:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b8 <std+0x64>)
 800d186:	6323      	str	r3, [r4, #48]	@ 0x30
 800d188:	4b0c      	ldr	r3, [pc, #48]	@ (800d1bc <std+0x68>)
 800d18a:	429c      	cmp	r4, r3
 800d18c:	d006      	beq.n	800d19c <std+0x48>
 800d18e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d192:	4294      	cmp	r4, r2
 800d194:	d002      	beq.n	800d19c <std+0x48>
 800d196:	33d0      	adds	r3, #208	@ 0xd0
 800d198:	429c      	cmp	r4, r3
 800d19a:	d105      	bne.n	800d1a8 <std+0x54>
 800d19c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a4:	f000 b97a 	b.w	800d49c <__retarget_lock_init_recursive>
 800d1a8:	bd10      	pop	{r4, pc}
 800d1aa:	bf00      	nop
 800d1ac:	0800d31d 	.word	0x0800d31d
 800d1b0:	0800d33f 	.word	0x0800d33f
 800d1b4:	0800d377 	.word	0x0800d377
 800d1b8:	0800d39b 	.word	0x0800d39b
 800d1bc:	2000cb5c 	.word	0x2000cb5c

0800d1c0 <stdio_exit_handler>:
 800d1c0:	4a02      	ldr	r2, [pc, #8]	@ (800d1cc <stdio_exit_handler+0xc>)
 800d1c2:	4903      	ldr	r1, [pc, #12]	@ (800d1d0 <stdio_exit_handler+0x10>)
 800d1c4:	4803      	ldr	r0, [pc, #12]	@ (800d1d4 <stdio_exit_handler+0x14>)
 800d1c6:	f000 b869 	b.w	800d29c <_fwalk_sglue>
 800d1ca:	bf00      	nop
 800d1cc:	20000024 	.word	0x20000024
 800d1d0:	0800fdd5 	.word	0x0800fdd5
 800d1d4:	20000034 	.word	0x20000034

0800d1d8 <cleanup_stdio>:
 800d1d8:	6841      	ldr	r1, [r0, #4]
 800d1da:	4b0c      	ldr	r3, [pc, #48]	@ (800d20c <cleanup_stdio+0x34>)
 800d1dc:	4299      	cmp	r1, r3
 800d1de:	b510      	push	{r4, lr}
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	d001      	beq.n	800d1e8 <cleanup_stdio+0x10>
 800d1e4:	f002 fdf6 	bl	800fdd4 <_fflush_r>
 800d1e8:	68a1      	ldr	r1, [r4, #8]
 800d1ea:	4b09      	ldr	r3, [pc, #36]	@ (800d210 <cleanup_stdio+0x38>)
 800d1ec:	4299      	cmp	r1, r3
 800d1ee:	d002      	beq.n	800d1f6 <cleanup_stdio+0x1e>
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f002 fdef 	bl	800fdd4 <_fflush_r>
 800d1f6:	68e1      	ldr	r1, [r4, #12]
 800d1f8:	4b06      	ldr	r3, [pc, #24]	@ (800d214 <cleanup_stdio+0x3c>)
 800d1fa:	4299      	cmp	r1, r3
 800d1fc:	d004      	beq.n	800d208 <cleanup_stdio+0x30>
 800d1fe:	4620      	mov	r0, r4
 800d200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d204:	f002 bde6 	b.w	800fdd4 <_fflush_r>
 800d208:	bd10      	pop	{r4, pc}
 800d20a:	bf00      	nop
 800d20c:	2000cb5c 	.word	0x2000cb5c
 800d210:	2000cbc4 	.word	0x2000cbc4
 800d214:	2000cc2c 	.word	0x2000cc2c

0800d218 <global_stdio_init.part.0>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	4b0b      	ldr	r3, [pc, #44]	@ (800d248 <global_stdio_init.part.0+0x30>)
 800d21c:	2104      	movs	r1, #4
 800d21e:	4c0b      	ldr	r4, [pc, #44]	@ (800d24c <global_stdio_init.part.0+0x34>)
 800d220:	4a0b      	ldr	r2, [pc, #44]	@ (800d250 <global_stdio_init.part.0+0x38>)
 800d222:	4620      	mov	r0, r4
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	2200      	movs	r2, #0
 800d228:	f7ff ff94 	bl	800d154 <std>
 800d22c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d230:	2201      	movs	r2, #1
 800d232:	2109      	movs	r1, #9
 800d234:	f7ff ff8e 	bl	800d154 <std>
 800d238:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d23c:	2202      	movs	r2, #2
 800d23e:	2112      	movs	r1, #18
 800d240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d244:	f7ff bf86 	b.w	800d154 <std>
 800d248:	2000cc94 	.word	0x2000cc94
 800d24c:	2000cb5c 	.word	0x2000cb5c
 800d250:	0800d1c1 	.word	0x0800d1c1

0800d254 <__sfp_lock_acquire>:
 800d254:	4801      	ldr	r0, [pc, #4]	@ (800d25c <__sfp_lock_acquire+0x8>)
 800d256:	f000 b922 	b.w	800d49e <__retarget_lock_acquire_recursive>
 800d25a:	bf00      	nop
 800d25c:	2000cc9d 	.word	0x2000cc9d

0800d260 <__sfp_lock_release>:
 800d260:	4801      	ldr	r0, [pc, #4]	@ (800d268 <__sfp_lock_release+0x8>)
 800d262:	f000 b91d 	b.w	800d4a0 <__retarget_lock_release_recursive>
 800d266:	bf00      	nop
 800d268:	2000cc9d 	.word	0x2000cc9d

0800d26c <__sinit>:
 800d26c:	b510      	push	{r4, lr}
 800d26e:	4604      	mov	r4, r0
 800d270:	f7ff fff0 	bl	800d254 <__sfp_lock_acquire>
 800d274:	6a23      	ldr	r3, [r4, #32]
 800d276:	b11b      	cbz	r3, 800d280 <__sinit+0x14>
 800d278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d27c:	f7ff bff0 	b.w	800d260 <__sfp_lock_release>
 800d280:	4b04      	ldr	r3, [pc, #16]	@ (800d294 <__sinit+0x28>)
 800d282:	6223      	str	r3, [r4, #32]
 800d284:	4b04      	ldr	r3, [pc, #16]	@ (800d298 <__sinit+0x2c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f5      	bne.n	800d278 <__sinit+0xc>
 800d28c:	f7ff ffc4 	bl	800d218 <global_stdio_init.part.0>
 800d290:	e7f2      	b.n	800d278 <__sinit+0xc>
 800d292:	bf00      	nop
 800d294:	0800d1d9 	.word	0x0800d1d9
 800d298:	2000cc94 	.word	0x2000cc94

0800d29c <_fwalk_sglue>:
 800d29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	4688      	mov	r8, r1
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	2600      	movs	r6, #0
 800d2a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2ac:	f1b9 0901 	subs.w	r9, r9, #1
 800d2b0:	d505      	bpl.n	800d2be <_fwalk_sglue+0x22>
 800d2b2:	6824      	ldr	r4, [r4, #0]
 800d2b4:	2c00      	cmp	r4, #0
 800d2b6:	d1f7      	bne.n	800d2a8 <_fwalk_sglue+0xc>
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d907      	bls.n	800d2d4 <_fwalk_sglue+0x38>
 800d2c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	d003      	beq.n	800d2d4 <_fwalk_sglue+0x38>
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	47c0      	blx	r8
 800d2d2:	4306      	orrs	r6, r0
 800d2d4:	3568      	adds	r5, #104	@ 0x68
 800d2d6:	e7e9      	b.n	800d2ac <_fwalk_sglue+0x10>

0800d2d8 <siprintf>:
 800d2d8:	b40e      	push	{r1, r2, r3}
 800d2da:	b510      	push	{r4, lr}
 800d2dc:	b09d      	sub	sp, #116	@ 0x74
 800d2de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d2e2:	2400      	movs	r4, #0
 800d2e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d2e6:	9002      	str	r0, [sp, #8]
 800d2e8:	9006      	str	r0, [sp, #24]
 800d2ea:	9107      	str	r1, [sp, #28]
 800d2ec:	9104      	str	r1, [sp, #16]
 800d2ee:	4809      	ldr	r0, [pc, #36]	@ (800d314 <siprintf+0x3c>)
 800d2f0:	4909      	ldr	r1, [pc, #36]	@ (800d318 <siprintf+0x40>)
 800d2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f6:	9105      	str	r1, [sp, #20]
 800d2f8:	a902      	add	r1, sp, #8
 800d2fa:	6800      	ldr	r0, [r0, #0]
 800d2fc:	9301      	str	r3, [sp, #4]
 800d2fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d300:	f002 fbe8 	bl	800fad4 <_svfiprintf_r>
 800d304:	9b02      	ldr	r3, [sp, #8]
 800d306:	701c      	strb	r4, [r3, #0]
 800d308:	b01d      	add	sp, #116	@ 0x74
 800d30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d30e:	b003      	add	sp, #12
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	20000030 	.word	0x20000030
 800d318:	ffff0208 	.word	0xffff0208

0800d31c <__sread>:
 800d31c:	b510      	push	{r4, lr}
 800d31e:	460c      	mov	r4, r1
 800d320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d324:	f000 f86c 	bl	800d400 <_read_r>
 800d328:	2800      	cmp	r0, #0
 800d32a:	bfab      	itete	ge
 800d32c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d32e:	89a3      	ldrhlt	r3, [r4, #12]
 800d330:	181b      	addge	r3, r3, r0
 800d332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d336:	bfac      	ite	ge
 800d338:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d33a:	81a3      	strhlt	r3, [r4, #12]
 800d33c:	bd10      	pop	{r4, pc}

0800d33e <__swrite>:
 800d33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d342:	461f      	mov	r7, r3
 800d344:	898b      	ldrh	r3, [r1, #12]
 800d346:	4605      	mov	r5, r0
 800d348:	460c      	mov	r4, r1
 800d34a:	05db      	lsls	r3, r3, #23
 800d34c:	4616      	mov	r6, r2
 800d34e:	d505      	bpl.n	800d35c <__swrite+0x1e>
 800d350:	2302      	movs	r3, #2
 800d352:	2200      	movs	r2, #0
 800d354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d358:	f000 f840 	bl	800d3dc <_lseek_r>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	4632      	mov	r2, r6
 800d360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d364:	4628      	mov	r0, r5
 800d366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d36a:	81a3      	strh	r3, [r4, #12]
 800d36c:	463b      	mov	r3, r7
 800d36e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d372:	f000 b857 	b.w	800d424 <_write_r>

0800d376 <__sseek>:
 800d376:	b510      	push	{r4, lr}
 800d378:	460c      	mov	r4, r1
 800d37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d37e:	f000 f82d 	bl	800d3dc <_lseek_r>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	bf15      	itete	ne
 800d388:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d38a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d38e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d392:	81a3      	strheq	r3, [r4, #12]
 800d394:	bf18      	it	ne
 800d396:	81a3      	strhne	r3, [r4, #12]
 800d398:	bd10      	pop	{r4, pc}

0800d39a <__sclose>:
 800d39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d39e:	f000 b80d 	b.w	800d3bc <_close_r>

0800d3a2 <memset>:
 800d3a2:	4402      	add	r2, r0
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d100      	bne.n	800d3ac <memset+0xa>
 800d3aa:	4770      	bx	lr
 800d3ac:	f803 1b01 	strb.w	r1, [r3], #1
 800d3b0:	e7f9      	b.n	800d3a6 <memset+0x4>
	...

0800d3b4 <_localeconv_r>:
 800d3b4:	4800      	ldr	r0, [pc, #0]	@ (800d3b8 <_localeconv_r+0x4>)
 800d3b6:	4770      	bx	lr
 800d3b8:	20000170 	.word	0x20000170

0800d3bc <_close_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4d05      	ldr	r5, [pc, #20]	@ (800d3d8 <_close_r+0x1c>)
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	602b      	str	r3, [r5, #0]
 800d3c8:	f7f4 fdc4 	bl	8001f54 <_close>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_close_r+0x1a>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_close_r+0x1a>
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	2000cc98 	.word	0x2000cc98

0800d3dc <_lseek_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4604      	mov	r4, r0
 800d3e0:	4d06      	ldr	r5, [pc, #24]	@ (800d3fc <_lseek_r+0x20>)
 800d3e2:	4608      	mov	r0, r1
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	602a      	str	r2, [r5, #0]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	f7f4 fdd9 	bl	8001fa2 <_lseek>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_lseek_r+0x1e>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_lseek_r+0x1e>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	2000cc98 	.word	0x2000cc98

0800d400 <_read_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4604      	mov	r4, r0
 800d404:	4d06      	ldr	r5, [pc, #24]	@ (800d420 <_read_r+0x20>)
 800d406:	4608      	mov	r0, r1
 800d408:	4611      	mov	r1, r2
 800d40a:	2200      	movs	r2, #0
 800d40c:	602a      	str	r2, [r5, #0]
 800d40e:	461a      	mov	r2, r3
 800d410:	f7f4 fd67 	bl	8001ee2 <_read>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_read_r+0x1e>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_read_r+0x1e>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	2000cc98 	.word	0x2000cc98

0800d424 <_write_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4604      	mov	r4, r0
 800d428:	4d06      	ldr	r5, [pc, #24]	@ (800d444 <_write_r+0x20>)
 800d42a:	4608      	mov	r0, r1
 800d42c:	4611      	mov	r1, r2
 800d42e:	2200      	movs	r2, #0
 800d430:	602a      	str	r2, [r5, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	f7f4 fd72 	bl	8001f1c <_write>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_write_r+0x1e>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_write_r+0x1e>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	2000cc98 	.word	0x2000cc98

0800d448 <__errno>:
 800d448:	4b01      	ldr	r3, [pc, #4]	@ (800d450 <__errno+0x8>)
 800d44a:	6818      	ldr	r0, [r3, #0]
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	20000030 	.word	0x20000030

0800d454 <__libc_init_array>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	4d0d      	ldr	r5, [pc, #52]	@ (800d48c <__libc_init_array+0x38>)
 800d458:	2600      	movs	r6, #0
 800d45a:	4c0d      	ldr	r4, [pc, #52]	@ (800d490 <__libc_init_array+0x3c>)
 800d45c:	1b64      	subs	r4, r4, r5
 800d45e:	10a4      	asrs	r4, r4, #2
 800d460:	42a6      	cmp	r6, r4
 800d462:	d109      	bne.n	800d478 <__libc_init_array+0x24>
 800d464:	4d0b      	ldr	r5, [pc, #44]	@ (800d494 <__libc_init_array+0x40>)
 800d466:	2600      	movs	r6, #0
 800d468:	4c0b      	ldr	r4, [pc, #44]	@ (800d498 <__libc_init_array+0x44>)
 800d46a:	f003 fd35 	bl	8010ed8 <_init>
 800d46e:	1b64      	subs	r4, r4, r5
 800d470:	10a4      	asrs	r4, r4, #2
 800d472:	42a6      	cmp	r6, r4
 800d474:	d105      	bne.n	800d482 <__libc_init_array+0x2e>
 800d476:	bd70      	pop	{r4, r5, r6, pc}
 800d478:	f855 3b04 	ldr.w	r3, [r5], #4
 800d47c:	3601      	adds	r6, #1
 800d47e:	4798      	blx	r3
 800d480:	e7ee      	b.n	800d460 <__libc_init_array+0xc>
 800d482:	f855 3b04 	ldr.w	r3, [r5], #4
 800d486:	3601      	adds	r6, #1
 800d488:	4798      	blx	r3
 800d48a:	e7f2      	b.n	800d472 <__libc_init_array+0x1e>
 800d48c:	0802e894 	.word	0x0802e894
 800d490:	0802e894 	.word	0x0802e894
 800d494:	0802e894 	.word	0x0802e894
 800d498:	0802e898 	.word	0x0802e898

0800d49c <__retarget_lock_init_recursive>:
 800d49c:	4770      	bx	lr

0800d49e <__retarget_lock_acquire_recursive>:
 800d49e:	4770      	bx	lr

0800d4a0 <__retarget_lock_release_recursive>:
 800d4a0:	4770      	bx	lr

0800d4a2 <memchr>:
 800d4a2:	b2c9      	uxtb	r1, r1
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	4402      	add	r2, r0
 800d4a8:	b510      	push	{r4, lr}
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	d101      	bne.n	800d4b4 <memchr+0x12>
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e003      	b.n	800d4bc <memchr+0x1a>
 800d4b4:	7804      	ldrb	r4, [r0, #0]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	428c      	cmp	r4, r1
 800d4ba:	d1f6      	bne.n	800d4aa <memchr+0x8>
 800d4bc:	bd10      	pop	{r4, pc}

0800d4be <memcpy>:
 800d4be:	440a      	add	r2, r1
 800d4c0:	1e43      	subs	r3, r0, #1
 800d4c2:	4291      	cmp	r1, r2
 800d4c4:	d100      	bne.n	800d4c8 <memcpy+0xa>
 800d4c6:	4770      	bx	lr
 800d4c8:	b510      	push	{r4, lr}
 800d4ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ce:	4291      	cmp	r1, r2
 800d4d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4d4:	d1f9      	bne.n	800d4ca <memcpy+0xc>
 800d4d6:	bd10      	pop	{r4, pc}

0800d4d8 <nanf>:
 800d4d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d4e0 <nanf+0x8>
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	7fc00000 	.word	0x7fc00000

0800d4e4 <quorem>:
 800d4e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e8:	6903      	ldr	r3, [r0, #16]
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	690c      	ldr	r4, [r1, #16]
 800d4ee:	42a3      	cmp	r3, r4
 800d4f0:	f2c0 8083 	blt.w	800d5fa <quorem+0x116>
 800d4f4:	3c01      	subs	r4, #1
 800d4f6:	f100 0514 	add.w	r5, r0, #20
 800d4fa:	f101 0814 	add.w	r8, r1, #20
 800d4fe:	00a3      	lsls	r3, r4, #2
 800d500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d504:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d50e:	9301      	str	r3, [sp, #4]
 800d510:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d514:	3301      	adds	r3, #1
 800d516:	429a      	cmp	r2, r3
 800d518:	fbb2 f6f3 	udiv	r6, r2, r3
 800d51c:	d331      	bcc.n	800d582 <quorem+0x9e>
 800d51e:	f04f 0a00 	mov.w	sl, #0
 800d522:	46c4      	mov	ip, r8
 800d524:	46ae      	mov	lr, r5
 800d526:	46d3      	mov	fp, sl
 800d528:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d52c:	b298      	uxth	r0, r3
 800d52e:	45e1      	cmp	r9, ip
 800d530:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d534:	fb06 a000 	mla	r0, r6, r0, sl
 800d538:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d53c:	b280      	uxth	r0, r0
 800d53e:	fb06 2303 	mla	r3, r6, r3, r2
 800d542:	f8de 2000 	ldr.w	r2, [lr]
 800d546:	b292      	uxth	r2, r2
 800d548:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d54c:	eba2 0200 	sub.w	r2, r2, r0
 800d550:	b29b      	uxth	r3, r3
 800d552:	f8de 0000 	ldr.w	r0, [lr]
 800d556:	445a      	add	r2, fp
 800d558:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d55c:	b292      	uxth	r2, r2
 800d55e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d562:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d566:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d56a:	f84e 2b04 	str.w	r2, [lr], #4
 800d56e:	d2db      	bcs.n	800d528 <quorem+0x44>
 800d570:	9b00      	ldr	r3, [sp, #0]
 800d572:	58eb      	ldr	r3, [r5, r3]
 800d574:	b92b      	cbnz	r3, 800d582 <quorem+0x9e>
 800d576:	9b01      	ldr	r3, [sp, #4]
 800d578:	3b04      	subs	r3, #4
 800d57a:	429d      	cmp	r5, r3
 800d57c:	461a      	mov	r2, r3
 800d57e:	d330      	bcc.n	800d5e2 <quorem+0xfe>
 800d580:	613c      	str	r4, [r7, #16]
 800d582:	4638      	mov	r0, r7
 800d584:	f001 f9ce 	bl	800e924 <__mcmp>
 800d588:	2800      	cmp	r0, #0
 800d58a:	db26      	blt.n	800d5da <quorem+0xf6>
 800d58c:	4629      	mov	r1, r5
 800d58e:	2000      	movs	r0, #0
 800d590:	f858 2b04 	ldr.w	r2, [r8], #4
 800d594:	f8d1 c000 	ldr.w	ip, [r1]
 800d598:	fa1f fe82 	uxth.w	lr, r2
 800d59c:	45c1      	cmp	r9, r8
 800d59e:	fa1f f38c 	uxth.w	r3, ip
 800d5a2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d5a6:	eba3 030e 	sub.w	r3, r3, lr
 800d5aa:	4403      	add	r3, r0
 800d5ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d5be:	f841 3b04 	str.w	r3, [r1], #4
 800d5c2:	d2e5      	bcs.n	800d590 <quorem+0xac>
 800d5c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5cc:	b922      	cbnz	r2, 800d5d8 <quorem+0xf4>
 800d5ce:	3b04      	subs	r3, #4
 800d5d0:	429d      	cmp	r5, r3
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	d30b      	bcc.n	800d5ee <quorem+0x10a>
 800d5d6:	613c      	str	r4, [r7, #16]
 800d5d8:	3601      	adds	r6, #1
 800d5da:	4630      	mov	r0, r6
 800d5dc:	b003      	add	sp, #12
 800d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e2:	6812      	ldr	r2, [r2, #0]
 800d5e4:	3b04      	subs	r3, #4
 800d5e6:	2a00      	cmp	r2, #0
 800d5e8:	d1ca      	bne.n	800d580 <quorem+0x9c>
 800d5ea:	3c01      	subs	r4, #1
 800d5ec:	e7c5      	b.n	800d57a <quorem+0x96>
 800d5ee:	6812      	ldr	r2, [r2, #0]
 800d5f0:	3b04      	subs	r3, #4
 800d5f2:	2a00      	cmp	r2, #0
 800d5f4:	d1ef      	bne.n	800d5d6 <quorem+0xf2>
 800d5f6:	3c01      	subs	r4, #1
 800d5f8:	e7ea      	b.n	800d5d0 <quorem+0xec>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	e7ee      	b.n	800d5dc <quorem+0xf8>
	...

0800d600 <_dtoa_r>:
 800d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	69c7      	ldr	r7, [r0, #28]
 800d606:	b097      	sub	sp, #92	@ 0x5c
 800d608:	4681      	mov	r9, r0
 800d60a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d60c:	9107      	str	r1, [sp, #28]
 800d60e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d610:	9311      	str	r3, [sp, #68]	@ 0x44
 800d612:	ec55 4b10 	vmov	r4, r5, d0
 800d616:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d61a:	b97f      	cbnz	r7, 800d63c <_dtoa_r+0x3c>
 800d61c:	2010      	movs	r0, #16
 800d61e:	f000 fe0b 	bl	800e238 <malloc>
 800d622:	4602      	mov	r2, r0
 800d624:	f8c9 001c 	str.w	r0, [r9, #28]
 800d628:	b920      	cbnz	r0, 800d634 <_dtoa_r+0x34>
 800d62a:	4ba9      	ldr	r3, [pc, #676]	@ (800d8d0 <_dtoa_r+0x2d0>)
 800d62c:	21ef      	movs	r1, #239	@ 0xef
 800d62e:	48a9      	ldr	r0, [pc, #676]	@ (800d8d4 <_dtoa_r+0x2d4>)
 800d630:	f002 fc3e 	bl	800feb0 <__assert_func>
 800d634:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d638:	6007      	str	r7, [r0, #0]
 800d63a:	60c7      	str	r7, [r0, #12]
 800d63c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d640:	6819      	ldr	r1, [r3, #0]
 800d642:	b159      	cbz	r1, 800d65c <_dtoa_r+0x5c>
 800d644:	685a      	ldr	r2, [r3, #4]
 800d646:	2301      	movs	r3, #1
 800d648:	4648      	mov	r0, r9
 800d64a:	4093      	lsls	r3, r2
 800d64c:	604a      	str	r2, [r1, #4]
 800d64e:	608b      	str	r3, [r1, #8]
 800d650:	f000 fee8 	bl	800e424 <_Bfree>
 800d654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d658:	2200      	movs	r2, #0
 800d65a:	601a      	str	r2, [r3, #0]
 800d65c:	1e2b      	subs	r3, r5, #0
 800d65e:	bfb7      	itett	lt
 800d660:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d664:	2300      	movge	r3, #0
 800d666:	2201      	movlt	r2, #1
 800d668:	9305      	strlt	r3, [sp, #20]
 800d66a:	bfa8      	it	ge
 800d66c:	6033      	strge	r3, [r6, #0]
 800d66e:	9f05      	ldr	r7, [sp, #20]
 800d670:	4b99      	ldr	r3, [pc, #612]	@ (800d8d8 <_dtoa_r+0x2d8>)
 800d672:	bfb8      	it	lt
 800d674:	6032      	strlt	r2, [r6, #0]
 800d676:	43bb      	bics	r3, r7
 800d678:	d112      	bne.n	800d6a0 <_dtoa_r+0xa0>
 800d67a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d67e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d686:	4323      	orrs	r3, r4
 800d688:	f000 855a 	beq.w	800e140 <_dtoa_r+0xb40>
 800d68c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d68e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d8ec <_dtoa_r+0x2ec>
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 855c 	beq.w	800e150 <_dtoa_r+0xb50>
 800d698:	f10a 0303 	add.w	r3, sl, #3
 800d69c:	f000 bd56 	b.w	800e14c <_dtoa_r+0xb4c>
 800d6a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	ec51 0b17 	vmov	r0, r1, d7
 800d6ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d6b0:	f7f3 fa0e 	bl	8000ad0 <__aeabi_dcmpeq>
 800d6b4:	4680      	mov	r8, r0
 800d6b6:	b158      	cbz	r0, 800d6d0 <_dtoa_r+0xd0>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d6c0:	b113      	cbz	r3, 800d6c8 <_dtoa_r+0xc8>
 800d6c2:	4b86      	ldr	r3, [pc, #536]	@ (800d8dc <_dtoa_r+0x2dc>)
 800d6c4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800d8f0 <_dtoa_r+0x2f0>
 800d6cc:	f000 bd40 	b.w	800e150 <_dtoa_r+0xb50>
 800d6d0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d6d4:	aa14      	add	r2, sp, #80	@ 0x50
 800d6d6:	a915      	add	r1, sp, #84	@ 0x54
 800d6d8:	4648      	mov	r0, r9
 800d6da:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d6de:	f001 fa49 	bl	800eb74 <__d2b>
 800d6e2:	9002      	str	r0, [sp, #8]
 800d6e4:	2e00      	cmp	r6, #0
 800d6e6:	d076      	beq.n	800d7d6 <_dtoa_r+0x1d6>
 800d6e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6ea:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d6ee:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d6f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6f6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d6fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6fe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d702:	4619      	mov	r1, r3
 800d704:	2200      	movs	r2, #0
 800d706:	4b76      	ldr	r3, [pc, #472]	@ (800d8e0 <_dtoa_r+0x2e0>)
 800d708:	f7f2 fdc2 	bl	8000290 <__aeabi_dsub>
 800d70c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d8b8 <_dtoa_r+0x2b8>)
 800d70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d712:	f7f2 ff75 	bl	8000600 <__aeabi_dmul>
 800d716:	a36a      	add	r3, pc, #424	@ (adr r3, 800d8c0 <_dtoa_r+0x2c0>)
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	f7f2 fdba 	bl	8000294 <__adddf3>
 800d720:	4604      	mov	r4, r0
 800d722:	460d      	mov	r5, r1
 800d724:	4630      	mov	r0, r6
 800d726:	f7f2 ff01 	bl	800052c <__aeabi_i2d>
 800d72a:	a367      	add	r3, pc, #412	@ (adr r3, 800d8c8 <_dtoa_r+0x2c8>)
 800d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d730:	f7f2 ff66 	bl	8000600 <__aeabi_dmul>
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	4620      	mov	r0, r4
 800d73a:	4629      	mov	r1, r5
 800d73c:	f7f2 fdaa 	bl	8000294 <__adddf3>
 800d740:	4604      	mov	r4, r0
 800d742:	460d      	mov	r5, r1
 800d744:	f7f3 fa0c 	bl	8000b60 <__aeabi_d2iz>
 800d748:	2200      	movs	r2, #0
 800d74a:	4607      	mov	r7, r0
 800d74c:	2300      	movs	r3, #0
 800d74e:	4620      	mov	r0, r4
 800d750:	4629      	mov	r1, r5
 800d752:	f7f3 f9c7 	bl	8000ae4 <__aeabi_dcmplt>
 800d756:	b140      	cbz	r0, 800d76a <_dtoa_r+0x16a>
 800d758:	4638      	mov	r0, r7
 800d75a:	f7f2 fee7 	bl	800052c <__aeabi_i2d>
 800d75e:	4622      	mov	r2, r4
 800d760:	462b      	mov	r3, r5
 800d762:	f7f3 f9b5 	bl	8000ad0 <__aeabi_dcmpeq>
 800d766:	b900      	cbnz	r0, 800d76a <_dtoa_r+0x16a>
 800d768:	3f01      	subs	r7, #1
 800d76a:	2f16      	cmp	r7, #22
 800d76c:	d852      	bhi.n	800d814 <_dtoa_r+0x214>
 800d76e:	4b5d      	ldr	r3, [pc, #372]	@ (800d8e4 <_dtoa_r+0x2e4>)
 800d770:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d774:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f7f3 f9b2 	bl	8000ae4 <__aeabi_dcmplt>
 800d780:	2800      	cmp	r0, #0
 800d782:	d049      	beq.n	800d818 <_dtoa_r+0x218>
 800d784:	3f01      	subs	r7, #1
 800d786:	2300      	movs	r3, #0
 800d788:	9310      	str	r3, [sp, #64]	@ 0x40
 800d78a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d78c:	1b9b      	subs	r3, r3, r6
 800d78e:	1e5a      	subs	r2, r3, #1
 800d790:	bf4c      	ite	mi
 800d792:	f1c3 0301 	rsbmi	r3, r3, #1
 800d796:	2300      	movpl	r3, #0
 800d798:	9206      	str	r2, [sp, #24]
 800d79a:	bf45      	ittet	mi
 800d79c:	9300      	strmi	r3, [sp, #0]
 800d79e:	2300      	movmi	r3, #0
 800d7a0:	9300      	strpl	r3, [sp, #0]
 800d7a2:	9306      	strmi	r3, [sp, #24]
 800d7a4:	2f00      	cmp	r7, #0
 800d7a6:	db39      	blt.n	800d81c <_dtoa_r+0x21c>
 800d7a8:	9b06      	ldr	r3, [sp, #24]
 800d7aa:	970d      	str	r7, [sp, #52]	@ 0x34
 800d7ac:	443b      	add	r3, r7
 800d7ae:	9306      	str	r3, [sp, #24]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9308      	str	r3, [sp, #32]
 800d7b4:	9b07      	ldr	r3, [sp, #28]
 800d7b6:	2b09      	cmp	r3, #9
 800d7b8:	d863      	bhi.n	800d882 <_dtoa_r+0x282>
 800d7ba:	2b05      	cmp	r3, #5
 800d7bc:	bfc5      	ittet	gt
 800d7be:	3b04      	subgt	r3, #4
 800d7c0:	2400      	movgt	r4, #0
 800d7c2:	2401      	movle	r4, #1
 800d7c4:	9307      	strgt	r3, [sp, #28]
 800d7c6:	9b07      	ldr	r3, [sp, #28]
 800d7c8:	3b02      	subs	r3, #2
 800d7ca:	2b03      	cmp	r3, #3
 800d7cc:	d865      	bhi.n	800d89a <_dtoa_r+0x29a>
 800d7ce:	e8df f003 	tbb	[pc, r3]
 800d7d2:	5654      	.short	0x5654
 800d7d4:	2d39      	.short	0x2d39
 800d7d6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d7da:	441e      	add	r6, r3
 800d7dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d7e0:	2b20      	cmp	r3, #32
 800d7e2:	bfc9      	itett	gt
 800d7e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d7e8:	f1c3 0320 	rsble	r3, r3, #32
 800d7ec:	409f      	lslgt	r7, r3
 800d7ee:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d7f2:	bfd8      	it	le
 800d7f4:	fa04 f003 	lslle.w	r0, r4, r3
 800d7f8:	f106 36ff 	add.w	r6, r6, #4294967295
 800d7fc:	bfc4      	itt	gt
 800d7fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d802:	ea47 0003 	orrgt.w	r0, r7, r3
 800d806:	f7f2 fe81 	bl	800050c <__aeabi_ui2d>
 800d80a:	2201      	movs	r2, #1
 800d80c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d810:	9212      	str	r2, [sp, #72]	@ 0x48
 800d812:	e776      	b.n	800d702 <_dtoa_r+0x102>
 800d814:	2301      	movs	r3, #1
 800d816:	e7b7      	b.n	800d788 <_dtoa_r+0x188>
 800d818:	9010      	str	r0, [sp, #64]	@ 0x40
 800d81a:	e7b6      	b.n	800d78a <_dtoa_r+0x18a>
 800d81c:	9b00      	ldr	r3, [sp, #0]
 800d81e:	1bdb      	subs	r3, r3, r7
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	427b      	negs	r3, r7
 800d824:	9308      	str	r3, [sp, #32]
 800d826:	2300      	movs	r3, #0
 800d828:	930d      	str	r3, [sp, #52]	@ 0x34
 800d82a:	e7c3      	b.n	800d7b4 <_dtoa_r+0x1b4>
 800d82c:	2301      	movs	r3, #1
 800d82e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d832:	eb07 0b03 	add.w	fp, r7, r3
 800d836:	f10b 0301 	add.w	r3, fp, #1
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	9303      	str	r3, [sp, #12]
 800d83e:	bfb8      	it	lt
 800d840:	2301      	movlt	r3, #1
 800d842:	e006      	b.n	800d852 <_dtoa_r+0x252>
 800d844:	2301      	movs	r3, #1
 800d846:	9309      	str	r3, [sp, #36]	@ 0x24
 800d848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	dd28      	ble.n	800d8a0 <_dtoa_r+0x2a0>
 800d84e:	469b      	mov	fp, r3
 800d850:	9303      	str	r3, [sp, #12]
 800d852:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d856:	2100      	movs	r1, #0
 800d858:	2204      	movs	r2, #4
 800d85a:	f102 0514 	add.w	r5, r2, #20
 800d85e:	429d      	cmp	r5, r3
 800d860:	d926      	bls.n	800d8b0 <_dtoa_r+0x2b0>
 800d862:	6041      	str	r1, [r0, #4]
 800d864:	4648      	mov	r0, r9
 800d866:	f000 fd9d 	bl	800e3a4 <_Balloc>
 800d86a:	4682      	mov	sl, r0
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d141      	bne.n	800d8f4 <_dtoa_r+0x2f4>
 800d870:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e8 <_dtoa_r+0x2e8>)
 800d872:	4602      	mov	r2, r0
 800d874:	f240 11af 	movw	r1, #431	@ 0x1af
 800d878:	e6d9      	b.n	800d62e <_dtoa_r+0x2e>
 800d87a:	2300      	movs	r3, #0
 800d87c:	e7e3      	b.n	800d846 <_dtoa_r+0x246>
 800d87e:	2300      	movs	r3, #0
 800d880:	e7d5      	b.n	800d82e <_dtoa_r+0x22e>
 800d882:	2401      	movs	r4, #1
 800d884:	2300      	movs	r3, #0
 800d886:	9409      	str	r4, [sp, #36]	@ 0x24
 800d888:	9307      	str	r3, [sp, #28]
 800d88a:	f04f 3bff 	mov.w	fp, #4294967295
 800d88e:	2200      	movs	r2, #0
 800d890:	2312      	movs	r3, #18
 800d892:	f8cd b00c 	str.w	fp, [sp, #12]
 800d896:	920c      	str	r2, [sp, #48]	@ 0x30
 800d898:	e7db      	b.n	800d852 <_dtoa_r+0x252>
 800d89a:	2301      	movs	r3, #1
 800d89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d89e:	e7f4      	b.n	800d88a <_dtoa_r+0x28a>
 800d8a0:	f04f 0b01 	mov.w	fp, #1
 800d8a4:	465b      	mov	r3, fp
 800d8a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d8aa:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d8ae:	e7d0      	b.n	800d852 <_dtoa_r+0x252>
 800d8b0:	3101      	adds	r1, #1
 800d8b2:	0052      	lsls	r2, r2, #1
 800d8b4:	e7d1      	b.n	800d85a <_dtoa_r+0x25a>
 800d8b6:	bf00      	nop
 800d8b8:	636f4361 	.word	0x636f4361
 800d8bc:	3fd287a7 	.word	0x3fd287a7
 800d8c0:	8b60c8b3 	.word	0x8b60c8b3
 800d8c4:	3fc68a28 	.word	0x3fc68a28
 800d8c8:	509f79fb 	.word	0x509f79fb
 800d8cc:	3fd34413 	.word	0x3fd34413
 800d8d0:	0802e4aa 	.word	0x0802e4aa
 800d8d4:	0802e4c1 	.word	0x0802e4c1
 800d8d8:	7ff00000 	.word	0x7ff00000
 800d8dc:	0802e475 	.word	0x0802e475
 800d8e0:	3ff80000 	.word	0x3ff80000
 800d8e4:	0802e670 	.word	0x0802e670
 800d8e8:	0802e519 	.word	0x0802e519
 800d8ec:	0802e4a6 	.word	0x0802e4a6
 800d8f0:	0802e474 	.word	0x0802e474
 800d8f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d8f8:	6018      	str	r0, [r3, #0]
 800d8fa:	9b03      	ldr	r3, [sp, #12]
 800d8fc:	2b0e      	cmp	r3, #14
 800d8fe:	f200 80a1 	bhi.w	800da44 <_dtoa_r+0x444>
 800d902:	2c00      	cmp	r4, #0
 800d904:	f000 809e 	beq.w	800da44 <_dtoa_r+0x444>
 800d908:	2f00      	cmp	r7, #0
 800d90a:	dd33      	ble.n	800d974 <_dtoa_r+0x374>
 800d90c:	f007 020f 	and.w	r2, r7, #15
 800d910:	4b9b      	ldr	r3, [pc, #620]	@ (800db80 <_dtoa_r+0x580>)
 800d912:	05f8      	lsls	r0, r7, #23
 800d914:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d91c:	ed93 7b00 	vldr	d7, [r3]
 800d920:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d924:	d516      	bpl.n	800d954 <_dtoa_r+0x354>
 800d926:	4b97      	ldr	r3, [pc, #604]	@ (800db84 <_dtoa_r+0x584>)
 800d928:	f004 040f 	and.w	r4, r4, #15
 800d92c:	2603      	movs	r6, #3
 800d92e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d936:	f7f2 ff8d 	bl	8000854 <__aeabi_ddiv>
 800d93a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d93e:	4d91      	ldr	r5, [pc, #580]	@ (800db84 <_dtoa_r+0x584>)
 800d940:	b954      	cbnz	r4, 800d958 <_dtoa_r+0x358>
 800d942:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d94a:	f7f2 ff83 	bl	8000854 <__aeabi_ddiv>
 800d94e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d952:	e028      	b.n	800d9a6 <_dtoa_r+0x3a6>
 800d954:	2602      	movs	r6, #2
 800d956:	e7f2      	b.n	800d93e <_dtoa_r+0x33e>
 800d958:	07e1      	lsls	r1, r4, #31
 800d95a:	d508      	bpl.n	800d96e <_dtoa_r+0x36e>
 800d95c:	3601      	adds	r6, #1
 800d95e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d962:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d966:	f7f2 fe4b 	bl	8000600 <__aeabi_dmul>
 800d96a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d96e:	1064      	asrs	r4, r4, #1
 800d970:	3508      	adds	r5, #8
 800d972:	e7e5      	b.n	800d940 <_dtoa_r+0x340>
 800d974:	f000 80af 	beq.w	800dad6 <_dtoa_r+0x4d6>
 800d978:	427c      	negs	r4, r7
 800d97a:	4b81      	ldr	r3, [pc, #516]	@ (800db80 <_dtoa_r+0x580>)
 800d97c:	4d81      	ldr	r5, [pc, #516]	@ (800db84 <_dtoa_r+0x584>)
 800d97e:	2602      	movs	r6, #2
 800d980:	f004 020f 	and.w	r2, r4, #15
 800d984:	1124      	asrs	r4, r4, #4
 800d986:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d98a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d992:	f7f2 fe35 	bl	8000600 <__aeabi_dmul>
 800d996:	2300      	movs	r3, #0
 800d998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d99c:	2c00      	cmp	r4, #0
 800d99e:	f040 808f 	bne.w	800dac0 <_dtoa_r+0x4c0>
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1d3      	bne.n	800d94e <_dtoa_r+0x34e>
 800d9a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d9a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 8094 	beq.w	800dada <_dtoa_r+0x4da>
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4b74      	ldr	r3, [pc, #464]	@ (800db88 <_dtoa_r+0x588>)
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f3 f893 	bl	8000ae4 <__aeabi_dcmplt>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	f000 808b 	beq.w	800dada <_dtoa_r+0x4da>
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 8087 	beq.w	800dada <_dtoa_r+0x4da>
 800d9cc:	f1bb 0f00 	cmp.w	fp, #0
 800d9d0:	dd34      	ble.n	800da3c <_dtoa_r+0x43c>
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f107 38ff 	add.w	r8, r7, #4294967295
 800d9d8:	3601      	adds	r6, #1
 800d9da:	465c      	mov	r4, fp
 800d9dc:	2200      	movs	r2, #0
 800d9de:	4b6b      	ldr	r3, [pc, #428]	@ (800db8c <_dtoa_r+0x58c>)
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	f7f2 fe0d 	bl	8000600 <__aeabi_dmul>
 800d9e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	f7f2 fd9e 	bl	800052c <__aeabi_i2d>
 800d9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9f4:	f7f2 fe04 	bl	8000600 <__aeabi_dmul>
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	4b65      	ldr	r3, [pc, #404]	@ (800db90 <_dtoa_r+0x590>)
 800d9fc:	f7f2 fc4a 	bl	8000294 <__adddf3>
 800da00:	4605      	mov	r5, r0
 800da02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800da06:	2c00      	cmp	r4, #0
 800da08:	d16a      	bne.n	800dae0 <_dtoa_r+0x4e0>
 800da0a:	2200      	movs	r2, #0
 800da0c:	4b61      	ldr	r3, [pc, #388]	@ (800db94 <_dtoa_r+0x594>)
 800da0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da12:	f7f2 fc3d 	bl	8000290 <__aeabi_dsub>
 800da16:	4602      	mov	r2, r0
 800da18:	460b      	mov	r3, r1
 800da1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da1e:	462a      	mov	r2, r5
 800da20:	4633      	mov	r3, r6
 800da22:	f7f3 f87d 	bl	8000b20 <__aeabi_dcmpgt>
 800da26:	2800      	cmp	r0, #0
 800da28:	f040 8298 	bne.w	800df5c <_dtoa_r+0x95c>
 800da2c:	462a      	mov	r2, r5
 800da2e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800da32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da36:	f7f3 f855 	bl	8000ae4 <__aeabi_dcmplt>
 800da3a:	bb38      	cbnz	r0, 800da8c <_dtoa_r+0x48c>
 800da3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800da40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800da44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800da46:	2b00      	cmp	r3, #0
 800da48:	f2c0 8157 	blt.w	800dcfa <_dtoa_r+0x6fa>
 800da4c:	2f0e      	cmp	r7, #14
 800da4e:	f300 8154 	bgt.w	800dcfa <_dtoa_r+0x6fa>
 800da52:	4b4b      	ldr	r3, [pc, #300]	@ (800db80 <_dtoa_r+0x580>)
 800da54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da58:	ed93 7b00 	vldr	d7, [r3]
 800da5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da5e:	2b00      	cmp	r3, #0
 800da60:	ed8d 7b00 	vstr	d7, [sp]
 800da64:	f280 80e5 	bge.w	800dc32 <_dtoa_r+0x632>
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f300 80e1 	bgt.w	800dc32 <_dtoa_r+0x632>
 800da70:	d10c      	bne.n	800da8c <_dtoa_r+0x48c>
 800da72:	2200      	movs	r2, #0
 800da74:	4b47      	ldr	r3, [pc, #284]	@ (800db94 <_dtoa_r+0x594>)
 800da76:	ec51 0b17 	vmov	r0, r1, d7
 800da7a:	f7f2 fdc1 	bl	8000600 <__aeabi_dmul>
 800da7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da82:	f7f3 f843 	bl	8000b0c <__aeabi_dcmpge>
 800da86:	2800      	cmp	r0, #0
 800da88:	f000 8266 	beq.w	800df58 <_dtoa_r+0x958>
 800da8c:	2400      	movs	r4, #0
 800da8e:	4625      	mov	r5, r4
 800da90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da92:	4656      	mov	r6, sl
 800da94:	ea6f 0803 	mvn.w	r8, r3
 800da98:	2700      	movs	r7, #0
 800da9a:	4621      	mov	r1, r4
 800da9c:	4648      	mov	r0, r9
 800da9e:	f000 fcc1 	bl	800e424 <_Bfree>
 800daa2:	2d00      	cmp	r5, #0
 800daa4:	f000 80bd 	beq.w	800dc22 <_dtoa_r+0x622>
 800daa8:	b12f      	cbz	r7, 800dab6 <_dtoa_r+0x4b6>
 800daaa:	42af      	cmp	r7, r5
 800daac:	d003      	beq.n	800dab6 <_dtoa_r+0x4b6>
 800daae:	4639      	mov	r1, r7
 800dab0:	4648      	mov	r0, r9
 800dab2:	f000 fcb7 	bl	800e424 <_Bfree>
 800dab6:	4629      	mov	r1, r5
 800dab8:	4648      	mov	r0, r9
 800daba:	f000 fcb3 	bl	800e424 <_Bfree>
 800dabe:	e0b0      	b.n	800dc22 <_dtoa_r+0x622>
 800dac0:	07e2      	lsls	r2, r4, #31
 800dac2:	d505      	bpl.n	800dad0 <_dtoa_r+0x4d0>
 800dac4:	3601      	adds	r6, #1
 800dac6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800daca:	f7f2 fd99 	bl	8000600 <__aeabi_dmul>
 800dace:	2301      	movs	r3, #1
 800dad0:	1064      	asrs	r4, r4, #1
 800dad2:	3508      	adds	r5, #8
 800dad4:	e762      	b.n	800d99c <_dtoa_r+0x39c>
 800dad6:	2602      	movs	r6, #2
 800dad8:	e765      	b.n	800d9a6 <_dtoa_r+0x3a6>
 800dada:	46b8      	mov	r8, r7
 800dadc:	9c03      	ldr	r4, [sp, #12]
 800dade:	e784      	b.n	800d9ea <_dtoa_r+0x3ea>
 800dae0:	4b27      	ldr	r3, [pc, #156]	@ (800db80 <_dtoa_r+0x580>)
 800dae2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dae8:	4454      	add	r4, sl
 800daea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800daee:	2900      	cmp	r1, #0
 800daf0:	d054      	beq.n	800db9c <_dtoa_r+0x59c>
 800daf2:	2000      	movs	r0, #0
 800daf4:	4928      	ldr	r1, [pc, #160]	@ (800db98 <_dtoa_r+0x598>)
 800daf6:	f7f2 fead 	bl	8000854 <__aeabi_ddiv>
 800dafa:	4633      	mov	r3, r6
 800dafc:	4656      	mov	r6, sl
 800dafe:	462a      	mov	r2, r5
 800db00:	f7f2 fbc6 	bl	8000290 <__aeabi_dsub>
 800db04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800db08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db0c:	f7f3 f828 	bl	8000b60 <__aeabi_d2iz>
 800db10:	4605      	mov	r5, r0
 800db12:	f7f2 fd0b 	bl	800052c <__aeabi_i2d>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	3530      	adds	r5, #48	@ 0x30
 800db1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db20:	f7f2 fbb6 	bl	8000290 <__aeabi_dsub>
 800db24:	4602      	mov	r2, r0
 800db26:	460b      	mov	r3, r1
 800db28:	f806 5b01 	strb.w	r5, [r6], #1
 800db2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800db34:	f7f2 ffd6 	bl	8000ae4 <__aeabi_dcmplt>
 800db38:	2800      	cmp	r0, #0
 800db3a:	d172      	bne.n	800dc22 <_dtoa_r+0x622>
 800db3c:	2000      	movs	r0, #0
 800db3e:	4912      	ldr	r1, [pc, #72]	@ (800db88 <_dtoa_r+0x588>)
 800db40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db44:	f7f2 fba4 	bl	8000290 <__aeabi_dsub>
 800db48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800db4c:	f7f2 ffca 	bl	8000ae4 <__aeabi_dcmplt>
 800db50:	2800      	cmp	r0, #0
 800db52:	f040 80b4 	bne.w	800dcbe <_dtoa_r+0x6be>
 800db56:	42a6      	cmp	r6, r4
 800db58:	f43f af70 	beq.w	800da3c <_dtoa_r+0x43c>
 800db5c:	2200      	movs	r2, #0
 800db5e:	4b0b      	ldr	r3, [pc, #44]	@ (800db8c <_dtoa_r+0x58c>)
 800db60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800db64:	f7f2 fd4c 	bl	8000600 <__aeabi_dmul>
 800db68:	2200      	movs	r2, #0
 800db6a:	4b08      	ldr	r3, [pc, #32]	@ (800db8c <_dtoa_r+0x58c>)
 800db6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800db70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db74:	f7f2 fd44 	bl	8000600 <__aeabi_dmul>
 800db78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db7c:	e7c4      	b.n	800db08 <_dtoa_r+0x508>
 800db7e:	bf00      	nop
 800db80:	0802e670 	.word	0x0802e670
 800db84:	0802e648 	.word	0x0802e648
 800db88:	3ff00000 	.word	0x3ff00000
 800db8c:	40240000 	.word	0x40240000
 800db90:	401c0000 	.word	0x401c0000
 800db94:	40140000 	.word	0x40140000
 800db98:	3fe00000 	.word	0x3fe00000
 800db9c:	4631      	mov	r1, r6
 800db9e:	4656      	mov	r6, sl
 800dba0:	4628      	mov	r0, r5
 800dba2:	f7f2 fd2d 	bl	8000600 <__aeabi_dmul>
 800dba6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dba8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dbac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbb0:	f7f2 ffd6 	bl	8000b60 <__aeabi_d2iz>
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	f7f2 fcb9 	bl	800052c <__aeabi_i2d>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	3530      	adds	r5, #48	@ 0x30
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbc4:	f7f2 fb64 	bl	8000290 <__aeabi_dsub>
 800dbc8:	f806 5b01 	strb.w	r5, [r6], #1
 800dbcc:	4602      	mov	r2, r0
 800dbce:	460b      	mov	r3, r1
 800dbd0:	42a6      	cmp	r6, r4
 800dbd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dbd6:	f04f 0200 	mov.w	r2, #0
 800dbda:	d124      	bne.n	800dc26 <_dtoa_r+0x626>
 800dbdc:	4baf      	ldr	r3, [pc, #700]	@ (800de9c <_dtoa_r+0x89c>)
 800dbde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dbe2:	f7f2 fb57 	bl	8000294 <__adddf3>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbee:	f7f2 ff97 	bl	8000b20 <__aeabi_dcmpgt>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d163      	bne.n	800dcbe <_dtoa_r+0x6be>
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	49a8      	ldr	r1, [pc, #672]	@ (800de9c <_dtoa_r+0x89c>)
 800dbfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dbfe:	f7f2 fb47 	bl	8000290 <__aeabi_dsub>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc0a:	f7f2 ff6b 	bl	8000ae4 <__aeabi_dcmplt>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f43f af14 	beq.w	800da3c <_dtoa_r+0x43c>
 800dc14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800dc16:	1e73      	subs	r3, r6, #1
 800dc18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc1e:	2b30      	cmp	r3, #48	@ 0x30
 800dc20:	d0f8      	beq.n	800dc14 <_dtoa_r+0x614>
 800dc22:	4647      	mov	r7, r8
 800dc24:	e03b      	b.n	800dc9e <_dtoa_r+0x69e>
 800dc26:	4b9e      	ldr	r3, [pc, #632]	@ (800dea0 <_dtoa_r+0x8a0>)
 800dc28:	f7f2 fcea 	bl	8000600 <__aeabi_dmul>
 800dc2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc30:	e7bc      	b.n	800dbac <_dtoa_r+0x5ac>
 800dc32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dc36:	4656      	mov	r6, sl
 800dc38:	4620      	mov	r0, r4
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc40:	f7f2 fe08 	bl	8000854 <__aeabi_ddiv>
 800dc44:	f7f2 ff8c 	bl	8000b60 <__aeabi_d2iz>
 800dc48:	4680      	mov	r8, r0
 800dc4a:	f7f2 fc6f 	bl	800052c <__aeabi_i2d>
 800dc4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc52:	f7f2 fcd5 	bl	8000600 <__aeabi_dmul>
 800dc56:	4602      	mov	r2, r0
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dc5e:	460b      	mov	r3, r1
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 fb15 	bl	8000290 <__aeabi_dsub>
 800dc66:	9d03      	ldr	r5, [sp, #12]
 800dc68:	f806 4b01 	strb.w	r4, [r6], #1
 800dc6c:	eba6 040a 	sub.w	r4, r6, sl
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	42a5      	cmp	r5, r4
 800dc76:	d133      	bne.n	800dce0 <_dtoa_r+0x6e0>
 800dc78:	f7f2 fb0c 	bl	8000294 <__adddf3>
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	460d      	mov	r5, r1
 800dc80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc84:	f7f2 ff4c 	bl	8000b20 <__aeabi_dcmpgt>
 800dc88:	b9c0      	cbnz	r0, 800dcbc <_dtoa_r+0x6bc>
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc92:	f7f2 ff1d 	bl	8000ad0 <__aeabi_dcmpeq>
 800dc96:	b110      	cbz	r0, 800dc9e <_dtoa_r+0x69e>
 800dc98:	f018 0f01 	tst.w	r8, #1
 800dc9c:	d10e      	bne.n	800dcbc <_dtoa_r+0x6bc>
 800dc9e:	9902      	ldr	r1, [sp, #8]
 800dca0:	4648      	mov	r0, r9
 800dca2:	f000 fbbf 	bl	800e424 <_Bfree>
 800dca6:	2300      	movs	r3, #0
 800dca8:	3701      	adds	r7, #1
 800dcaa:	7033      	strb	r3, [r6, #0]
 800dcac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dcae:	601f      	str	r7, [r3, #0]
 800dcb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 824c 	beq.w	800e150 <_dtoa_r+0xb50>
 800dcb8:	601e      	str	r6, [r3, #0]
 800dcba:	e249      	b.n	800e150 <_dtoa_r+0xb50>
 800dcbc:	46b8      	mov	r8, r7
 800dcbe:	4633      	mov	r3, r6
 800dcc0:	461e      	mov	r6, r3
 800dcc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcc6:	2a39      	cmp	r2, #57	@ 0x39
 800dcc8:	d106      	bne.n	800dcd8 <_dtoa_r+0x6d8>
 800dcca:	459a      	cmp	sl, r3
 800dccc:	d1f8      	bne.n	800dcc0 <_dtoa_r+0x6c0>
 800dcce:	2230      	movs	r2, #48	@ 0x30
 800dcd0:	f108 0801 	add.w	r8, r8, #1
 800dcd4:	f88a 2000 	strb.w	r2, [sl]
 800dcd8:	781a      	ldrb	r2, [r3, #0]
 800dcda:	3201      	adds	r2, #1
 800dcdc:	701a      	strb	r2, [r3, #0]
 800dcde:	e7a0      	b.n	800dc22 <_dtoa_r+0x622>
 800dce0:	2200      	movs	r2, #0
 800dce2:	4b6f      	ldr	r3, [pc, #444]	@ (800dea0 <_dtoa_r+0x8a0>)
 800dce4:	f7f2 fc8c 	bl	8000600 <__aeabi_dmul>
 800dce8:	2200      	movs	r2, #0
 800dcea:	2300      	movs	r3, #0
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	f7f2 feee 	bl	8000ad0 <__aeabi_dcmpeq>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d09f      	beq.n	800dc38 <_dtoa_r+0x638>
 800dcf8:	e7d1      	b.n	800dc9e <_dtoa_r+0x69e>
 800dcfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcfc:	2a00      	cmp	r2, #0
 800dcfe:	f000 80ea 	beq.w	800ded6 <_dtoa_r+0x8d6>
 800dd02:	9a07      	ldr	r2, [sp, #28]
 800dd04:	2a01      	cmp	r2, #1
 800dd06:	f300 80cd 	bgt.w	800dea4 <_dtoa_r+0x8a4>
 800dd0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dd0c:	2a00      	cmp	r2, #0
 800dd0e:	f000 80c1 	beq.w	800de94 <_dtoa_r+0x894>
 800dd12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dd16:	9c08      	ldr	r4, [sp, #32]
 800dd18:	9e00      	ldr	r6, [sp, #0]
 800dd1a:	9a00      	ldr	r2, [sp, #0]
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	4648      	mov	r0, r9
 800dd20:	441a      	add	r2, r3
 800dd22:	9200      	str	r2, [sp, #0]
 800dd24:	9a06      	ldr	r2, [sp, #24]
 800dd26:	441a      	add	r2, r3
 800dd28:	9206      	str	r2, [sp, #24]
 800dd2a:	f000 fc7b 	bl	800e624 <__i2b>
 800dd2e:	4605      	mov	r5, r0
 800dd30:	b166      	cbz	r6, 800dd4c <_dtoa_r+0x74c>
 800dd32:	9b06      	ldr	r3, [sp, #24]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	dd09      	ble.n	800dd4c <_dtoa_r+0x74c>
 800dd38:	42b3      	cmp	r3, r6
 800dd3a:	9a00      	ldr	r2, [sp, #0]
 800dd3c:	bfa8      	it	ge
 800dd3e:	4633      	movge	r3, r6
 800dd40:	1ad2      	subs	r2, r2, r3
 800dd42:	1af6      	subs	r6, r6, r3
 800dd44:	9200      	str	r2, [sp, #0]
 800dd46:	9a06      	ldr	r2, [sp, #24]
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	9306      	str	r3, [sp, #24]
 800dd4c:	9b08      	ldr	r3, [sp, #32]
 800dd4e:	b30b      	cbz	r3, 800dd94 <_dtoa_r+0x794>
 800dd50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 80c6 	beq.w	800dee4 <_dtoa_r+0x8e4>
 800dd58:	2c00      	cmp	r4, #0
 800dd5a:	f000 80c0 	beq.w	800dede <_dtoa_r+0x8de>
 800dd5e:	4629      	mov	r1, r5
 800dd60:	4622      	mov	r2, r4
 800dd62:	4648      	mov	r0, r9
 800dd64:	f000 fd18 	bl	800e798 <__pow5mult>
 800dd68:	9a02      	ldr	r2, [sp, #8]
 800dd6a:	4601      	mov	r1, r0
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	4648      	mov	r0, r9
 800dd70:	f000 fc6e 	bl	800e650 <__multiply>
 800dd74:	9902      	ldr	r1, [sp, #8]
 800dd76:	4680      	mov	r8, r0
 800dd78:	4648      	mov	r0, r9
 800dd7a:	f000 fb53 	bl	800e424 <_Bfree>
 800dd7e:	9b08      	ldr	r3, [sp, #32]
 800dd80:	1b1b      	subs	r3, r3, r4
 800dd82:	9308      	str	r3, [sp, #32]
 800dd84:	f000 80b1 	beq.w	800deea <_dtoa_r+0x8ea>
 800dd88:	9a08      	ldr	r2, [sp, #32]
 800dd8a:	4641      	mov	r1, r8
 800dd8c:	4648      	mov	r0, r9
 800dd8e:	f000 fd03 	bl	800e798 <__pow5mult>
 800dd92:	9002      	str	r0, [sp, #8]
 800dd94:	2101      	movs	r1, #1
 800dd96:	4648      	mov	r0, r9
 800dd98:	f000 fc44 	bl	800e624 <__i2b>
 800dd9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd9e:	4604      	mov	r4, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 81d9 	beq.w	800e158 <_dtoa_r+0xb58>
 800dda6:	461a      	mov	r2, r3
 800dda8:	4601      	mov	r1, r0
 800ddaa:	4648      	mov	r0, r9
 800ddac:	f000 fcf4 	bl	800e798 <__pow5mult>
 800ddb0:	9b07      	ldr	r3, [sp, #28]
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	f300 809f 	bgt.w	800def8 <_dtoa_r+0x8f8>
 800ddba:	9b04      	ldr	r3, [sp, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f040 8097 	bne.w	800def0 <_dtoa_r+0x8f0>
 800ddc2:	9b05      	ldr	r3, [sp, #20]
 800ddc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f040 8093 	bne.w	800def4 <_dtoa_r+0x8f4>
 800ddce:	9b05      	ldr	r3, [sp, #20]
 800ddd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ddd4:	0d1b      	lsrs	r3, r3, #20
 800ddd6:	051b      	lsls	r3, r3, #20
 800ddd8:	b133      	cbz	r3, 800dde8 <_dtoa_r+0x7e8>
 800ddda:	9b00      	ldr	r3, [sp, #0]
 800dddc:	3301      	adds	r3, #1
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	9b06      	ldr	r3, [sp, #24]
 800dde2:	3301      	adds	r3, #1
 800dde4:	9306      	str	r3, [sp, #24]
 800dde6:	2301      	movs	r3, #1
 800dde8:	9308      	str	r3, [sp, #32]
 800ddea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 81b9 	beq.w	800e164 <_dtoa_r+0xb64>
 800ddf2:	6923      	ldr	r3, [r4, #16]
 800ddf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ddf8:	6918      	ldr	r0, [r3, #16]
 800ddfa:	f000 fbc7 	bl	800e58c <__hi0bits>
 800ddfe:	f1c0 0020 	rsb	r0, r0, #32
 800de02:	9b06      	ldr	r3, [sp, #24]
 800de04:	4418      	add	r0, r3
 800de06:	f010 001f 	ands.w	r0, r0, #31
 800de0a:	f000 8082 	beq.w	800df12 <_dtoa_r+0x912>
 800de0e:	f1c0 0320 	rsb	r3, r0, #32
 800de12:	2b04      	cmp	r3, #4
 800de14:	dd73      	ble.n	800defe <_dtoa_r+0x8fe>
 800de16:	f1c0 001c 	rsb	r0, r0, #28
 800de1a:	9b00      	ldr	r3, [sp, #0]
 800de1c:	4403      	add	r3, r0
 800de1e:	4406      	add	r6, r0
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	9b06      	ldr	r3, [sp, #24]
 800de24:	4403      	add	r3, r0
 800de26:	9306      	str	r3, [sp, #24]
 800de28:	9b00      	ldr	r3, [sp, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dd05      	ble.n	800de3a <_dtoa_r+0x83a>
 800de2e:	461a      	mov	r2, r3
 800de30:	9902      	ldr	r1, [sp, #8]
 800de32:	4648      	mov	r0, r9
 800de34:	f000 fd0a 	bl	800e84c <__lshift>
 800de38:	9002      	str	r0, [sp, #8]
 800de3a:	9b06      	ldr	r3, [sp, #24]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	dd05      	ble.n	800de4c <_dtoa_r+0x84c>
 800de40:	4621      	mov	r1, r4
 800de42:	461a      	mov	r2, r3
 800de44:	4648      	mov	r0, r9
 800de46:	f000 fd01 	bl	800e84c <__lshift>
 800de4a:	4604      	mov	r4, r0
 800de4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d061      	beq.n	800df16 <_dtoa_r+0x916>
 800de52:	4621      	mov	r1, r4
 800de54:	9802      	ldr	r0, [sp, #8]
 800de56:	f000 fd65 	bl	800e924 <__mcmp>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	da5b      	bge.n	800df16 <_dtoa_r+0x916>
 800de5e:	2300      	movs	r3, #0
 800de60:	220a      	movs	r2, #10
 800de62:	9902      	ldr	r1, [sp, #8]
 800de64:	4648      	mov	r0, r9
 800de66:	f000 faff 	bl	800e468 <__multadd>
 800de6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de6c:	f107 38ff 	add.w	r8, r7, #4294967295
 800de70:	9002      	str	r0, [sp, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f000 8178 	beq.w	800e168 <_dtoa_r+0xb68>
 800de78:	4629      	mov	r1, r5
 800de7a:	2300      	movs	r3, #0
 800de7c:	220a      	movs	r2, #10
 800de7e:	4648      	mov	r0, r9
 800de80:	f000 faf2 	bl	800e468 <__multadd>
 800de84:	f1bb 0f00 	cmp.w	fp, #0
 800de88:	4605      	mov	r5, r0
 800de8a:	dc6f      	bgt.n	800df6c <_dtoa_r+0x96c>
 800de8c:	9b07      	ldr	r3, [sp, #28]
 800de8e:	2b02      	cmp	r3, #2
 800de90:	dc49      	bgt.n	800df26 <_dtoa_r+0x926>
 800de92:	e06b      	b.n	800df6c <_dtoa_r+0x96c>
 800de94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800de96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800de9a:	e73c      	b.n	800dd16 <_dtoa_r+0x716>
 800de9c:	3fe00000 	.word	0x3fe00000
 800dea0:	40240000 	.word	0x40240000
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	1e5c      	subs	r4, r3, #1
 800dea8:	9b08      	ldr	r3, [sp, #32]
 800deaa:	42a3      	cmp	r3, r4
 800deac:	db09      	blt.n	800dec2 <_dtoa_r+0x8c2>
 800deae:	1b1c      	subs	r4, r3, r4
 800deb0:	9b03      	ldr	r3, [sp, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f6bf af30 	bge.w	800dd18 <_dtoa_r+0x718>
 800deb8:	9b00      	ldr	r3, [sp, #0]
 800deba:	9a03      	ldr	r2, [sp, #12]
 800debc:	1a9e      	subs	r6, r3, r2
 800debe:	2300      	movs	r3, #0
 800dec0:	e72b      	b.n	800dd1a <_dtoa_r+0x71a>
 800dec2:	9b08      	ldr	r3, [sp, #32]
 800dec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dec6:	1ae3      	subs	r3, r4, r3
 800dec8:	9408      	str	r4, [sp, #32]
 800deca:	9e00      	ldr	r6, [sp, #0]
 800decc:	2400      	movs	r4, #0
 800dece:	441a      	add	r2, r3
 800ded0:	9b03      	ldr	r3, [sp, #12]
 800ded2:	920d      	str	r2, [sp, #52]	@ 0x34
 800ded4:	e721      	b.n	800dd1a <_dtoa_r+0x71a>
 800ded6:	9c08      	ldr	r4, [sp, #32]
 800ded8:	9e00      	ldr	r6, [sp, #0]
 800deda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800dedc:	e728      	b.n	800dd30 <_dtoa_r+0x730>
 800dede:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800dee2:	e751      	b.n	800dd88 <_dtoa_r+0x788>
 800dee4:	9a08      	ldr	r2, [sp, #32]
 800dee6:	9902      	ldr	r1, [sp, #8]
 800dee8:	e750      	b.n	800dd8c <_dtoa_r+0x78c>
 800deea:	f8cd 8008 	str.w	r8, [sp, #8]
 800deee:	e751      	b.n	800dd94 <_dtoa_r+0x794>
 800def0:	2300      	movs	r3, #0
 800def2:	e779      	b.n	800dde8 <_dtoa_r+0x7e8>
 800def4:	9b04      	ldr	r3, [sp, #16]
 800def6:	e777      	b.n	800dde8 <_dtoa_r+0x7e8>
 800def8:	2300      	movs	r3, #0
 800defa:	9308      	str	r3, [sp, #32]
 800defc:	e779      	b.n	800ddf2 <_dtoa_r+0x7f2>
 800defe:	d093      	beq.n	800de28 <_dtoa_r+0x828>
 800df00:	331c      	adds	r3, #28
 800df02:	9a00      	ldr	r2, [sp, #0]
 800df04:	441a      	add	r2, r3
 800df06:	441e      	add	r6, r3
 800df08:	9200      	str	r2, [sp, #0]
 800df0a:	9a06      	ldr	r2, [sp, #24]
 800df0c:	441a      	add	r2, r3
 800df0e:	9206      	str	r2, [sp, #24]
 800df10:	e78a      	b.n	800de28 <_dtoa_r+0x828>
 800df12:	4603      	mov	r3, r0
 800df14:	e7f4      	b.n	800df00 <_dtoa_r+0x900>
 800df16:	9b03      	ldr	r3, [sp, #12]
 800df18:	46b8      	mov	r8, r7
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	dc20      	bgt.n	800df60 <_dtoa_r+0x960>
 800df1e:	469b      	mov	fp, r3
 800df20:	9b07      	ldr	r3, [sp, #28]
 800df22:	2b02      	cmp	r3, #2
 800df24:	dd1e      	ble.n	800df64 <_dtoa_r+0x964>
 800df26:	f1bb 0f00 	cmp.w	fp, #0
 800df2a:	f47f adb1 	bne.w	800da90 <_dtoa_r+0x490>
 800df2e:	4621      	mov	r1, r4
 800df30:	465b      	mov	r3, fp
 800df32:	2205      	movs	r2, #5
 800df34:	4648      	mov	r0, r9
 800df36:	f000 fa97 	bl	800e468 <__multadd>
 800df3a:	4601      	mov	r1, r0
 800df3c:	4604      	mov	r4, r0
 800df3e:	9802      	ldr	r0, [sp, #8]
 800df40:	f000 fcf0 	bl	800e924 <__mcmp>
 800df44:	2800      	cmp	r0, #0
 800df46:	f77f ada3 	ble.w	800da90 <_dtoa_r+0x490>
 800df4a:	4656      	mov	r6, sl
 800df4c:	2331      	movs	r3, #49	@ 0x31
 800df4e:	f108 0801 	add.w	r8, r8, #1
 800df52:	f806 3b01 	strb.w	r3, [r6], #1
 800df56:	e59f      	b.n	800da98 <_dtoa_r+0x498>
 800df58:	46b8      	mov	r8, r7
 800df5a:	9c03      	ldr	r4, [sp, #12]
 800df5c:	4625      	mov	r5, r4
 800df5e:	e7f4      	b.n	800df4a <_dtoa_r+0x94a>
 800df60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800df64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	f000 8102 	beq.w	800e170 <_dtoa_r+0xb70>
 800df6c:	2e00      	cmp	r6, #0
 800df6e:	dd05      	ble.n	800df7c <_dtoa_r+0x97c>
 800df70:	4629      	mov	r1, r5
 800df72:	4632      	mov	r2, r6
 800df74:	4648      	mov	r0, r9
 800df76:	f000 fc69 	bl	800e84c <__lshift>
 800df7a:	4605      	mov	r5, r0
 800df7c:	9b08      	ldr	r3, [sp, #32]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d05c      	beq.n	800e03c <_dtoa_r+0xa3c>
 800df82:	6869      	ldr	r1, [r5, #4]
 800df84:	4648      	mov	r0, r9
 800df86:	f000 fa0d 	bl	800e3a4 <_Balloc>
 800df8a:	4606      	mov	r6, r0
 800df8c:	b928      	cbnz	r0, 800df9a <_dtoa_r+0x99a>
 800df8e:	4b83      	ldr	r3, [pc, #524]	@ (800e19c <_dtoa_r+0xb9c>)
 800df90:	4602      	mov	r2, r0
 800df92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800df96:	f7ff bb4a 	b.w	800d62e <_dtoa_r+0x2e>
 800df9a:	692a      	ldr	r2, [r5, #16]
 800df9c:	f105 010c 	add.w	r1, r5, #12
 800dfa0:	300c      	adds	r0, #12
 800dfa2:	3202      	adds	r2, #2
 800dfa4:	0092      	lsls	r2, r2, #2
 800dfa6:	f7ff fa8a 	bl	800d4be <memcpy>
 800dfaa:	2201      	movs	r2, #1
 800dfac:	4631      	mov	r1, r6
 800dfae:	4648      	mov	r0, r9
 800dfb0:	f000 fc4c 	bl	800e84c <__lshift>
 800dfb4:	f10a 0301 	add.w	r3, sl, #1
 800dfb8:	462f      	mov	r7, r5
 800dfba:	4605      	mov	r5, r0
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	eb0a 030b 	add.w	r3, sl, fp
 800dfc2:	9308      	str	r3, [sp, #32]
 800dfc4:	9b04      	ldr	r3, [sp, #16]
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	9306      	str	r3, [sp, #24]
 800dfcc:	9b00      	ldr	r3, [sp, #0]
 800dfce:	4621      	mov	r1, r4
 800dfd0:	9802      	ldr	r0, [sp, #8]
 800dfd2:	f103 3bff 	add.w	fp, r3, #4294967295
 800dfd6:	f7ff fa85 	bl	800d4e4 <quorem>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	4639      	mov	r1, r7
 800dfde:	9003      	str	r0, [sp, #12]
 800dfe0:	3330      	adds	r3, #48	@ 0x30
 800dfe2:	9802      	ldr	r0, [sp, #8]
 800dfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe6:	f000 fc9d 	bl	800e924 <__mcmp>
 800dfea:	462a      	mov	r2, r5
 800dfec:	9004      	str	r0, [sp, #16]
 800dfee:	4621      	mov	r1, r4
 800dff0:	4648      	mov	r0, r9
 800dff2:	f000 fcb3 	bl	800e95c <__mdiff>
 800dff6:	68c2      	ldr	r2, [r0, #12]
 800dff8:	4606      	mov	r6, r0
 800dffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dffc:	bb02      	cbnz	r2, 800e040 <_dtoa_r+0xa40>
 800dffe:	4601      	mov	r1, r0
 800e000:	9802      	ldr	r0, [sp, #8]
 800e002:	f000 fc8f 	bl	800e924 <__mcmp>
 800e006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e008:	4602      	mov	r2, r0
 800e00a:	4631      	mov	r1, r6
 800e00c:	4648      	mov	r0, r9
 800e00e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e010:	9309      	str	r3, [sp, #36]	@ 0x24
 800e012:	f000 fa07 	bl	800e424 <_Bfree>
 800e016:	9b07      	ldr	r3, [sp, #28]
 800e018:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e01a:	9e00      	ldr	r6, [sp, #0]
 800e01c:	ea42 0103 	orr.w	r1, r2, r3
 800e020:	9b06      	ldr	r3, [sp, #24]
 800e022:	4319      	orrs	r1, r3
 800e024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e026:	d10d      	bne.n	800e044 <_dtoa_r+0xa44>
 800e028:	2b39      	cmp	r3, #57	@ 0x39
 800e02a:	d027      	beq.n	800e07c <_dtoa_r+0xa7c>
 800e02c:	9a04      	ldr	r2, [sp, #16]
 800e02e:	2a00      	cmp	r2, #0
 800e030:	dd01      	ble.n	800e036 <_dtoa_r+0xa36>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	3331      	adds	r3, #49	@ 0x31
 800e036:	f88b 3000 	strb.w	r3, [fp]
 800e03a:	e52e      	b.n	800da9a <_dtoa_r+0x49a>
 800e03c:	4628      	mov	r0, r5
 800e03e:	e7b9      	b.n	800dfb4 <_dtoa_r+0x9b4>
 800e040:	2201      	movs	r2, #1
 800e042:	e7e2      	b.n	800e00a <_dtoa_r+0xa0a>
 800e044:	9904      	ldr	r1, [sp, #16]
 800e046:	2900      	cmp	r1, #0
 800e048:	db04      	blt.n	800e054 <_dtoa_r+0xa54>
 800e04a:	9807      	ldr	r0, [sp, #28]
 800e04c:	4301      	orrs	r1, r0
 800e04e:	9806      	ldr	r0, [sp, #24]
 800e050:	4301      	orrs	r1, r0
 800e052:	d120      	bne.n	800e096 <_dtoa_r+0xa96>
 800e054:	2a00      	cmp	r2, #0
 800e056:	ddee      	ble.n	800e036 <_dtoa_r+0xa36>
 800e058:	2201      	movs	r2, #1
 800e05a:	9902      	ldr	r1, [sp, #8]
 800e05c:	4648      	mov	r0, r9
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	f000 fbf4 	bl	800e84c <__lshift>
 800e064:	4621      	mov	r1, r4
 800e066:	9002      	str	r0, [sp, #8]
 800e068:	f000 fc5c 	bl	800e924 <__mcmp>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	9b00      	ldr	r3, [sp, #0]
 800e070:	dc02      	bgt.n	800e078 <_dtoa_r+0xa78>
 800e072:	d1e0      	bne.n	800e036 <_dtoa_r+0xa36>
 800e074:	07da      	lsls	r2, r3, #31
 800e076:	d5de      	bpl.n	800e036 <_dtoa_r+0xa36>
 800e078:	2b39      	cmp	r3, #57	@ 0x39
 800e07a:	d1da      	bne.n	800e032 <_dtoa_r+0xa32>
 800e07c:	2339      	movs	r3, #57	@ 0x39
 800e07e:	f88b 3000 	strb.w	r3, [fp]
 800e082:	4633      	mov	r3, r6
 800e084:	461e      	mov	r6, r3
 800e086:	3b01      	subs	r3, #1
 800e088:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e08c:	2a39      	cmp	r2, #57	@ 0x39
 800e08e:	d04f      	beq.n	800e130 <_dtoa_r+0xb30>
 800e090:	3201      	adds	r2, #1
 800e092:	701a      	strb	r2, [r3, #0]
 800e094:	e501      	b.n	800da9a <_dtoa_r+0x49a>
 800e096:	2a00      	cmp	r2, #0
 800e098:	dd03      	ble.n	800e0a2 <_dtoa_r+0xaa2>
 800e09a:	2b39      	cmp	r3, #57	@ 0x39
 800e09c:	d0ee      	beq.n	800e07c <_dtoa_r+0xa7c>
 800e09e:	3301      	adds	r3, #1
 800e0a0:	e7c9      	b.n	800e036 <_dtoa_r+0xa36>
 800e0a2:	9a00      	ldr	r2, [sp, #0]
 800e0a4:	9908      	ldr	r1, [sp, #32]
 800e0a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e0aa:	428a      	cmp	r2, r1
 800e0ac:	d029      	beq.n	800e102 <_dtoa_r+0xb02>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	220a      	movs	r2, #10
 800e0b2:	9902      	ldr	r1, [sp, #8]
 800e0b4:	4648      	mov	r0, r9
 800e0b6:	f000 f9d7 	bl	800e468 <__multadd>
 800e0ba:	42af      	cmp	r7, r5
 800e0bc:	9002      	str	r0, [sp, #8]
 800e0be:	f04f 0300 	mov.w	r3, #0
 800e0c2:	f04f 020a 	mov.w	r2, #10
 800e0c6:	4639      	mov	r1, r7
 800e0c8:	4648      	mov	r0, r9
 800e0ca:	d107      	bne.n	800e0dc <_dtoa_r+0xadc>
 800e0cc:	f000 f9cc 	bl	800e468 <__multadd>
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	4605      	mov	r5, r0
 800e0d4:	9b00      	ldr	r3, [sp, #0]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	e777      	b.n	800dfcc <_dtoa_r+0x9cc>
 800e0dc:	f000 f9c4 	bl	800e468 <__multadd>
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	4607      	mov	r7, r0
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	220a      	movs	r2, #10
 800e0e8:	4648      	mov	r0, r9
 800e0ea:	f000 f9bd 	bl	800e468 <__multadd>
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	e7f0      	b.n	800e0d4 <_dtoa_r+0xad4>
 800e0f2:	f1bb 0f00 	cmp.w	fp, #0
 800e0f6:	f04f 0700 	mov.w	r7, #0
 800e0fa:	bfcc      	ite	gt
 800e0fc:	465e      	movgt	r6, fp
 800e0fe:	2601      	movle	r6, #1
 800e100:	4456      	add	r6, sl
 800e102:	2201      	movs	r2, #1
 800e104:	9902      	ldr	r1, [sp, #8]
 800e106:	4648      	mov	r0, r9
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	f000 fb9f 	bl	800e84c <__lshift>
 800e10e:	4621      	mov	r1, r4
 800e110:	9002      	str	r0, [sp, #8]
 800e112:	f000 fc07 	bl	800e924 <__mcmp>
 800e116:	2800      	cmp	r0, #0
 800e118:	dcb3      	bgt.n	800e082 <_dtoa_r+0xa82>
 800e11a:	d102      	bne.n	800e122 <_dtoa_r+0xb22>
 800e11c:	9b00      	ldr	r3, [sp, #0]
 800e11e:	07db      	lsls	r3, r3, #31
 800e120:	d4af      	bmi.n	800e082 <_dtoa_r+0xa82>
 800e122:	4633      	mov	r3, r6
 800e124:	461e      	mov	r6, r3
 800e126:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e12a:	2a30      	cmp	r2, #48	@ 0x30
 800e12c:	d0fa      	beq.n	800e124 <_dtoa_r+0xb24>
 800e12e:	e4b4      	b.n	800da9a <_dtoa_r+0x49a>
 800e130:	459a      	cmp	sl, r3
 800e132:	d1a7      	bne.n	800e084 <_dtoa_r+0xa84>
 800e134:	2331      	movs	r3, #49	@ 0x31
 800e136:	f108 0801 	add.w	r8, r8, #1
 800e13a:	f88a 3000 	strb.w	r3, [sl]
 800e13e:	e4ac      	b.n	800da9a <_dtoa_r+0x49a>
 800e140:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e142:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e1a0 <_dtoa_r+0xba0>
 800e146:	b11b      	cbz	r3, 800e150 <_dtoa_r+0xb50>
 800e148:	f10a 0308 	add.w	r3, sl, #8
 800e14c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e14e:	6013      	str	r3, [r2, #0]
 800e150:	4650      	mov	r0, sl
 800e152:	b017      	add	sp, #92	@ 0x5c
 800e154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e158:	9b07      	ldr	r3, [sp, #28]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	f77f ae2d 	ble.w	800ddba <_dtoa_r+0x7ba>
 800e160:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e162:	9308      	str	r3, [sp, #32]
 800e164:	2001      	movs	r0, #1
 800e166:	e64c      	b.n	800de02 <_dtoa_r+0x802>
 800e168:	f1bb 0f00 	cmp.w	fp, #0
 800e16c:	f77f aed8 	ble.w	800df20 <_dtoa_r+0x920>
 800e170:	4656      	mov	r6, sl
 800e172:	4621      	mov	r1, r4
 800e174:	9802      	ldr	r0, [sp, #8]
 800e176:	f7ff f9b5 	bl	800d4e4 <quorem>
 800e17a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e17e:	f806 3b01 	strb.w	r3, [r6], #1
 800e182:	eba6 020a 	sub.w	r2, r6, sl
 800e186:	4593      	cmp	fp, r2
 800e188:	ddb3      	ble.n	800e0f2 <_dtoa_r+0xaf2>
 800e18a:	2300      	movs	r3, #0
 800e18c:	220a      	movs	r2, #10
 800e18e:	9902      	ldr	r1, [sp, #8]
 800e190:	4648      	mov	r0, r9
 800e192:	f000 f969 	bl	800e468 <__multadd>
 800e196:	9002      	str	r0, [sp, #8]
 800e198:	e7eb      	b.n	800e172 <_dtoa_r+0xb72>
 800e19a:	bf00      	nop
 800e19c:	0802e519 	.word	0x0802e519
 800e1a0:	0802e49d 	.word	0x0802e49d

0800e1a4 <_free_r>:
 800e1a4:	b538      	push	{r3, r4, r5, lr}
 800e1a6:	4605      	mov	r5, r0
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	d041      	beq.n	800e230 <_free_r+0x8c>
 800e1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1b0:	1f0c      	subs	r4, r1, #4
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	bfb8      	it	lt
 800e1b6:	18e4      	addlt	r4, r4, r3
 800e1b8:	f000 f8e8 	bl	800e38c <__malloc_lock>
 800e1bc:	4a1d      	ldr	r2, [pc, #116]	@ (800e234 <_free_r+0x90>)
 800e1be:	6813      	ldr	r3, [r2, #0]
 800e1c0:	b933      	cbnz	r3, 800e1d0 <_free_r+0x2c>
 800e1c2:	6063      	str	r3, [r4, #4]
 800e1c4:	6014      	str	r4, [r2, #0]
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1cc:	f000 b8e4 	b.w	800e398 <__malloc_unlock>
 800e1d0:	42a3      	cmp	r3, r4
 800e1d2:	d908      	bls.n	800e1e6 <_free_r+0x42>
 800e1d4:	6820      	ldr	r0, [r4, #0]
 800e1d6:	1821      	adds	r1, r4, r0
 800e1d8:	428b      	cmp	r3, r1
 800e1da:	bf01      	itttt	eq
 800e1dc:	6819      	ldreq	r1, [r3, #0]
 800e1de:	685b      	ldreq	r3, [r3, #4]
 800e1e0:	1809      	addeq	r1, r1, r0
 800e1e2:	6021      	streq	r1, [r4, #0]
 800e1e4:	e7ed      	b.n	800e1c2 <_free_r+0x1e>
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	b10b      	cbz	r3, 800e1f0 <_free_r+0x4c>
 800e1ec:	42a3      	cmp	r3, r4
 800e1ee:	d9fa      	bls.n	800e1e6 <_free_r+0x42>
 800e1f0:	6811      	ldr	r1, [r2, #0]
 800e1f2:	1850      	adds	r0, r2, r1
 800e1f4:	42a0      	cmp	r0, r4
 800e1f6:	d10b      	bne.n	800e210 <_free_r+0x6c>
 800e1f8:	6820      	ldr	r0, [r4, #0]
 800e1fa:	4401      	add	r1, r0
 800e1fc:	1850      	adds	r0, r2, r1
 800e1fe:	6011      	str	r1, [r2, #0]
 800e200:	4283      	cmp	r3, r0
 800e202:	d1e0      	bne.n	800e1c6 <_free_r+0x22>
 800e204:	6818      	ldr	r0, [r3, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	4408      	add	r0, r1
 800e20a:	6053      	str	r3, [r2, #4]
 800e20c:	6010      	str	r0, [r2, #0]
 800e20e:	e7da      	b.n	800e1c6 <_free_r+0x22>
 800e210:	d902      	bls.n	800e218 <_free_r+0x74>
 800e212:	230c      	movs	r3, #12
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	e7d6      	b.n	800e1c6 <_free_r+0x22>
 800e218:	6820      	ldr	r0, [r4, #0]
 800e21a:	1821      	adds	r1, r4, r0
 800e21c:	428b      	cmp	r3, r1
 800e21e:	bf02      	ittt	eq
 800e220:	6819      	ldreq	r1, [r3, #0]
 800e222:	685b      	ldreq	r3, [r3, #4]
 800e224:	1809      	addeq	r1, r1, r0
 800e226:	6063      	str	r3, [r4, #4]
 800e228:	bf08      	it	eq
 800e22a:	6021      	streq	r1, [r4, #0]
 800e22c:	6054      	str	r4, [r2, #4]
 800e22e:	e7ca      	b.n	800e1c6 <_free_r+0x22>
 800e230:	bd38      	pop	{r3, r4, r5, pc}
 800e232:	bf00      	nop
 800e234:	2000cca4 	.word	0x2000cca4

0800e238 <malloc>:
 800e238:	4b02      	ldr	r3, [pc, #8]	@ (800e244 <malloc+0xc>)
 800e23a:	4601      	mov	r1, r0
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	f000 b825 	b.w	800e28c <_malloc_r>
 800e242:	bf00      	nop
 800e244:	20000030 	.word	0x20000030

0800e248 <sbrk_aligned>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	4e0f      	ldr	r6, [pc, #60]	@ (800e288 <sbrk_aligned+0x40>)
 800e24c:	460c      	mov	r4, r1
 800e24e:	4605      	mov	r5, r0
 800e250:	6831      	ldr	r1, [r6, #0]
 800e252:	b911      	cbnz	r1, 800e25a <sbrk_aligned+0x12>
 800e254:	f001 fe12 	bl	800fe7c <_sbrk_r>
 800e258:	6030      	str	r0, [r6, #0]
 800e25a:	4621      	mov	r1, r4
 800e25c:	4628      	mov	r0, r5
 800e25e:	f001 fe0d 	bl	800fe7c <_sbrk_r>
 800e262:	1c43      	adds	r3, r0, #1
 800e264:	d103      	bne.n	800e26e <sbrk_aligned+0x26>
 800e266:	f04f 34ff 	mov.w	r4, #4294967295
 800e26a:	4620      	mov	r0, r4
 800e26c:	bd70      	pop	{r4, r5, r6, pc}
 800e26e:	1cc4      	adds	r4, r0, #3
 800e270:	f024 0403 	bic.w	r4, r4, #3
 800e274:	42a0      	cmp	r0, r4
 800e276:	d0f8      	beq.n	800e26a <sbrk_aligned+0x22>
 800e278:	1a21      	subs	r1, r4, r0
 800e27a:	4628      	mov	r0, r5
 800e27c:	f001 fdfe 	bl	800fe7c <_sbrk_r>
 800e280:	3001      	adds	r0, #1
 800e282:	d1f2      	bne.n	800e26a <sbrk_aligned+0x22>
 800e284:	e7ef      	b.n	800e266 <sbrk_aligned+0x1e>
 800e286:	bf00      	nop
 800e288:	2000cca0 	.word	0x2000cca0

0800e28c <_malloc_r>:
 800e28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e290:	1ccd      	adds	r5, r1, #3
 800e292:	4606      	mov	r6, r0
 800e294:	f025 0503 	bic.w	r5, r5, #3
 800e298:	3508      	adds	r5, #8
 800e29a:	2d0c      	cmp	r5, #12
 800e29c:	bf38      	it	cc
 800e29e:	250c      	movcc	r5, #12
 800e2a0:	2d00      	cmp	r5, #0
 800e2a2:	db01      	blt.n	800e2a8 <_malloc_r+0x1c>
 800e2a4:	42a9      	cmp	r1, r5
 800e2a6:	d904      	bls.n	800e2b2 <_malloc_r+0x26>
 800e2a8:	230c      	movs	r3, #12
 800e2aa:	6033      	str	r3, [r6, #0]
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e388 <_malloc_r+0xfc>
 800e2b6:	f000 f869 	bl	800e38c <__malloc_lock>
 800e2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800e2be:	461c      	mov	r4, r3
 800e2c0:	bb44      	cbnz	r4, 800e314 <_malloc_r+0x88>
 800e2c2:	4629      	mov	r1, r5
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7ff ffbf 	bl	800e248 <sbrk_aligned>
 800e2ca:	1c43      	adds	r3, r0, #1
 800e2cc:	4604      	mov	r4, r0
 800e2ce:	d158      	bne.n	800e382 <_malloc_r+0xf6>
 800e2d0:	f8d8 4000 	ldr.w	r4, [r8]
 800e2d4:	4627      	mov	r7, r4
 800e2d6:	2f00      	cmp	r7, #0
 800e2d8:	d143      	bne.n	800e362 <_malloc_r+0xd6>
 800e2da:	2c00      	cmp	r4, #0
 800e2dc:	d04b      	beq.n	800e376 <_malloc_r+0xea>
 800e2de:	6823      	ldr	r3, [r4, #0]
 800e2e0:	4639      	mov	r1, r7
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	eb04 0903 	add.w	r9, r4, r3
 800e2e8:	f001 fdc8 	bl	800fe7c <_sbrk_r>
 800e2ec:	4581      	cmp	r9, r0
 800e2ee:	d142      	bne.n	800e376 <_malloc_r+0xea>
 800e2f0:	6821      	ldr	r1, [r4, #0]
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	1a6d      	subs	r5, r5, r1
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	f7ff ffa6 	bl	800e248 <sbrk_aligned>
 800e2fc:	3001      	adds	r0, #1
 800e2fe:	d03a      	beq.n	800e376 <_malloc_r+0xea>
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	442b      	add	r3, r5
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	f8d8 3000 	ldr.w	r3, [r8]
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	bb62      	cbnz	r2, 800e368 <_malloc_r+0xdc>
 800e30e:	f8c8 7000 	str.w	r7, [r8]
 800e312:	e00f      	b.n	800e334 <_malloc_r+0xa8>
 800e314:	6822      	ldr	r2, [r4, #0]
 800e316:	1b52      	subs	r2, r2, r5
 800e318:	d420      	bmi.n	800e35c <_malloc_r+0xd0>
 800e31a:	2a0b      	cmp	r2, #11
 800e31c:	d917      	bls.n	800e34e <_malloc_r+0xc2>
 800e31e:	1961      	adds	r1, r4, r5
 800e320:	42a3      	cmp	r3, r4
 800e322:	6025      	str	r5, [r4, #0]
 800e324:	bf18      	it	ne
 800e326:	6059      	strne	r1, [r3, #4]
 800e328:	6863      	ldr	r3, [r4, #4]
 800e32a:	bf08      	it	eq
 800e32c:	f8c8 1000 	streq.w	r1, [r8]
 800e330:	5162      	str	r2, [r4, r5]
 800e332:	604b      	str	r3, [r1, #4]
 800e334:	4630      	mov	r0, r6
 800e336:	f000 f82f 	bl	800e398 <__malloc_unlock>
 800e33a:	f104 000b 	add.w	r0, r4, #11
 800e33e:	1d23      	adds	r3, r4, #4
 800e340:	f020 0007 	bic.w	r0, r0, #7
 800e344:	1ac2      	subs	r2, r0, r3
 800e346:	bf1c      	itt	ne
 800e348:	1a1b      	subne	r3, r3, r0
 800e34a:	50a3      	strne	r3, [r4, r2]
 800e34c:	e7af      	b.n	800e2ae <_malloc_r+0x22>
 800e34e:	6862      	ldr	r2, [r4, #4]
 800e350:	42a3      	cmp	r3, r4
 800e352:	bf0c      	ite	eq
 800e354:	f8c8 2000 	streq.w	r2, [r8]
 800e358:	605a      	strne	r2, [r3, #4]
 800e35a:	e7eb      	b.n	800e334 <_malloc_r+0xa8>
 800e35c:	4623      	mov	r3, r4
 800e35e:	6864      	ldr	r4, [r4, #4]
 800e360:	e7ae      	b.n	800e2c0 <_malloc_r+0x34>
 800e362:	463c      	mov	r4, r7
 800e364:	687f      	ldr	r7, [r7, #4]
 800e366:	e7b6      	b.n	800e2d6 <_malloc_r+0x4a>
 800e368:	461a      	mov	r2, r3
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	42a3      	cmp	r3, r4
 800e36e:	d1fb      	bne.n	800e368 <_malloc_r+0xdc>
 800e370:	2300      	movs	r3, #0
 800e372:	6053      	str	r3, [r2, #4]
 800e374:	e7de      	b.n	800e334 <_malloc_r+0xa8>
 800e376:	230c      	movs	r3, #12
 800e378:	4630      	mov	r0, r6
 800e37a:	6033      	str	r3, [r6, #0]
 800e37c:	f000 f80c 	bl	800e398 <__malloc_unlock>
 800e380:	e794      	b.n	800e2ac <_malloc_r+0x20>
 800e382:	6005      	str	r5, [r0, #0]
 800e384:	e7d6      	b.n	800e334 <_malloc_r+0xa8>
 800e386:	bf00      	nop
 800e388:	2000cca4 	.word	0x2000cca4

0800e38c <__malloc_lock>:
 800e38c:	4801      	ldr	r0, [pc, #4]	@ (800e394 <__malloc_lock+0x8>)
 800e38e:	f7ff b886 	b.w	800d49e <__retarget_lock_acquire_recursive>
 800e392:	bf00      	nop
 800e394:	2000cc9c 	.word	0x2000cc9c

0800e398 <__malloc_unlock>:
 800e398:	4801      	ldr	r0, [pc, #4]	@ (800e3a0 <__malloc_unlock+0x8>)
 800e39a:	f7ff b881 	b.w	800d4a0 <__retarget_lock_release_recursive>
 800e39e:	bf00      	nop
 800e3a0:	2000cc9c 	.word	0x2000cc9c

0800e3a4 <_Balloc>:
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	69c6      	ldr	r6, [r0, #28]
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	460d      	mov	r5, r1
 800e3ac:	b976      	cbnz	r6, 800e3cc <_Balloc+0x28>
 800e3ae:	2010      	movs	r0, #16
 800e3b0:	f7ff ff42 	bl	800e238 <malloc>
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	61e0      	str	r0, [r4, #28]
 800e3b8:	b920      	cbnz	r0, 800e3c4 <_Balloc+0x20>
 800e3ba:	4b18      	ldr	r3, [pc, #96]	@ (800e41c <_Balloc+0x78>)
 800e3bc:	216b      	movs	r1, #107	@ 0x6b
 800e3be:	4818      	ldr	r0, [pc, #96]	@ (800e420 <_Balloc+0x7c>)
 800e3c0:	f001 fd76 	bl	800feb0 <__assert_func>
 800e3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3c8:	6006      	str	r6, [r0, #0]
 800e3ca:	60c6      	str	r6, [r0, #12]
 800e3cc:	69e6      	ldr	r6, [r4, #28]
 800e3ce:	68f3      	ldr	r3, [r6, #12]
 800e3d0:	b183      	cbz	r3, 800e3f4 <_Balloc+0x50>
 800e3d2:	69e3      	ldr	r3, [r4, #28]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3da:	b9b8      	cbnz	r0, 800e40c <_Balloc+0x68>
 800e3dc:	2101      	movs	r1, #1
 800e3de:	4620      	mov	r0, r4
 800e3e0:	fa01 f605 	lsl.w	r6, r1, r5
 800e3e4:	1d72      	adds	r2, r6, #5
 800e3e6:	0092      	lsls	r2, r2, #2
 800e3e8:	f001 fd80 	bl	800feec <_calloc_r>
 800e3ec:	b160      	cbz	r0, 800e408 <_Balloc+0x64>
 800e3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3f2:	e00e      	b.n	800e412 <_Balloc+0x6e>
 800e3f4:	2221      	movs	r2, #33	@ 0x21
 800e3f6:	2104      	movs	r1, #4
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f001 fd77 	bl	800feec <_calloc_r>
 800e3fe:	69e3      	ldr	r3, [r4, #28]
 800e400:	60f0      	str	r0, [r6, #12]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1e4      	bne.n	800e3d2 <_Balloc+0x2e>
 800e408:	2000      	movs	r0, #0
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
 800e40c:	6802      	ldr	r2, [r0, #0]
 800e40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e412:	2300      	movs	r3, #0
 800e414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e418:	e7f7      	b.n	800e40a <_Balloc+0x66>
 800e41a:	bf00      	nop
 800e41c:	0802e4aa 	.word	0x0802e4aa
 800e420:	0802e52a 	.word	0x0802e52a

0800e424 <_Bfree>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	69c6      	ldr	r6, [r0, #28]
 800e428:	4605      	mov	r5, r0
 800e42a:	460c      	mov	r4, r1
 800e42c:	b976      	cbnz	r6, 800e44c <_Bfree+0x28>
 800e42e:	2010      	movs	r0, #16
 800e430:	f7ff ff02 	bl	800e238 <malloc>
 800e434:	4602      	mov	r2, r0
 800e436:	61e8      	str	r0, [r5, #28]
 800e438:	b920      	cbnz	r0, 800e444 <_Bfree+0x20>
 800e43a:	4b09      	ldr	r3, [pc, #36]	@ (800e460 <_Bfree+0x3c>)
 800e43c:	218f      	movs	r1, #143	@ 0x8f
 800e43e:	4809      	ldr	r0, [pc, #36]	@ (800e464 <_Bfree+0x40>)
 800e440:	f001 fd36 	bl	800feb0 <__assert_func>
 800e444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e448:	6006      	str	r6, [r0, #0]
 800e44a:	60c6      	str	r6, [r0, #12]
 800e44c:	b13c      	cbz	r4, 800e45e <_Bfree+0x3a>
 800e44e:	69eb      	ldr	r3, [r5, #28]
 800e450:	6862      	ldr	r2, [r4, #4]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e458:	6021      	str	r1, [r4, #0]
 800e45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e45e:	bd70      	pop	{r4, r5, r6, pc}
 800e460:	0802e4aa 	.word	0x0802e4aa
 800e464:	0802e52a 	.word	0x0802e52a

0800e468 <__multadd>:
 800e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46c:	f101 0c14 	add.w	ip, r1, #20
 800e470:	4607      	mov	r7, r0
 800e472:	460c      	mov	r4, r1
 800e474:	461e      	mov	r6, r3
 800e476:	690d      	ldr	r5, [r1, #16]
 800e478:	2000      	movs	r0, #0
 800e47a:	f8dc 3000 	ldr.w	r3, [ip]
 800e47e:	3001      	adds	r0, #1
 800e480:	b299      	uxth	r1, r3
 800e482:	4285      	cmp	r5, r0
 800e484:	fb02 6101 	mla	r1, r2, r1, r6
 800e488:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e48c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e490:	b289      	uxth	r1, r1
 800e492:	fb02 3306 	mla	r3, r2, r6, r3
 800e496:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e49e:	f84c 1b04 	str.w	r1, [ip], #4
 800e4a2:	dcea      	bgt.n	800e47a <__multadd+0x12>
 800e4a4:	b30e      	cbz	r6, 800e4ea <__multadd+0x82>
 800e4a6:	68a3      	ldr	r3, [r4, #8]
 800e4a8:	42ab      	cmp	r3, r5
 800e4aa:	dc19      	bgt.n	800e4e0 <__multadd+0x78>
 800e4ac:	6861      	ldr	r1, [r4, #4]
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	3101      	adds	r1, #1
 800e4b2:	f7ff ff77 	bl	800e3a4 <_Balloc>
 800e4b6:	4680      	mov	r8, r0
 800e4b8:	b928      	cbnz	r0, 800e4c6 <__multadd+0x5e>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e4f0 <__multadd+0x88>)
 800e4be:	21ba      	movs	r1, #186	@ 0xba
 800e4c0:	480c      	ldr	r0, [pc, #48]	@ (800e4f4 <__multadd+0x8c>)
 800e4c2:	f001 fcf5 	bl	800feb0 <__assert_func>
 800e4c6:	6922      	ldr	r2, [r4, #16]
 800e4c8:	f104 010c 	add.w	r1, r4, #12
 800e4cc:	300c      	adds	r0, #12
 800e4ce:	3202      	adds	r2, #2
 800e4d0:	0092      	lsls	r2, r2, #2
 800e4d2:	f7fe fff4 	bl	800d4be <memcpy>
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	4644      	mov	r4, r8
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f7ff ffa2 	bl	800e424 <_Bfree>
 800e4e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e4e4:	3501      	adds	r5, #1
 800e4e6:	615e      	str	r6, [r3, #20]
 800e4e8:	6125      	str	r5, [r4, #16]
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f0:	0802e519 	.word	0x0802e519
 800e4f4:	0802e52a 	.word	0x0802e52a

0800e4f8 <__s2b>:
 800e4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4fc:	4615      	mov	r5, r2
 800e4fe:	461f      	mov	r7, r3
 800e500:	2209      	movs	r2, #9
 800e502:	3308      	adds	r3, #8
 800e504:	460c      	mov	r4, r1
 800e506:	4606      	mov	r6, r0
 800e508:	2100      	movs	r1, #0
 800e50a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e50e:	2201      	movs	r2, #1
 800e510:	429a      	cmp	r2, r3
 800e512:	db09      	blt.n	800e528 <__s2b+0x30>
 800e514:	4630      	mov	r0, r6
 800e516:	f7ff ff45 	bl	800e3a4 <_Balloc>
 800e51a:	b940      	cbnz	r0, 800e52e <__s2b+0x36>
 800e51c:	4602      	mov	r2, r0
 800e51e:	4b19      	ldr	r3, [pc, #100]	@ (800e584 <__s2b+0x8c>)
 800e520:	21d3      	movs	r1, #211	@ 0xd3
 800e522:	4819      	ldr	r0, [pc, #100]	@ (800e588 <__s2b+0x90>)
 800e524:	f001 fcc4 	bl	800feb0 <__assert_func>
 800e528:	0052      	lsls	r2, r2, #1
 800e52a:	3101      	adds	r1, #1
 800e52c:	e7f0      	b.n	800e510 <__s2b+0x18>
 800e52e:	9b08      	ldr	r3, [sp, #32]
 800e530:	2d09      	cmp	r5, #9
 800e532:	6143      	str	r3, [r0, #20]
 800e534:	f04f 0301 	mov.w	r3, #1
 800e538:	6103      	str	r3, [r0, #16]
 800e53a:	dd16      	ble.n	800e56a <__s2b+0x72>
 800e53c:	f104 0909 	add.w	r9, r4, #9
 800e540:	442c      	add	r4, r5
 800e542:	46c8      	mov	r8, r9
 800e544:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e548:	4601      	mov	r1, r0
 800e54a:	220a      	movs	r2, #10
 800e54c:	4630      	mov	r0, r6
 800e54e:	3b30      	subs	r3, #48	@ 0x30
 800e550:	f7ff ff8a 	bl	800e468 <__multadd>
 800e554:	45a0      	cmp	r8, r4
 800e556:	d1f5      	bne.n	800e544 <__s2b+0x4c>
 800e558:	f1a5 0408 	sub.w	r4, r5, #8
 800e55c:	444c      	add	r4, r9
 800e55e:	1b2d      	subs	r5, r5, r4
 800e560:	1963      	adds	r3, r4, r5
 800e562:	42bb      	cmp	r3, r7
 800e564:	db04      	blt.n	800e570 <__s2b+0x78>
 800e566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e56a:	340a      	adds	r4, #10
 800e56c:	2509      	movs	r5, #9
 800e56e:	e7f6      	b.n	800e55e <__s2b+0x66>
 800e570:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e574:	4601      	mov	r1, r0
 800e576:	220a      	movs	r2, #10
 800e578:	4630      	mov	r0, r6
 800e57a:	3b30      	subs	r3, #48	@ 0x30
 800e57c:	f7ff ff74 	bl	800e468 <__multadd>
 800e580:	e7ee      	b.n	800e560 <__s2b+0x68>
 800e582:	bf00      	nop
 800e584:	0802e519 	.word	0x0802e519
 800e588:	0802e52a 	.word	0x0802e52a

0800e58c <__hi0bits>:
 800e58c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e590:	4603      	mov	r3, r0
 800e592:	bf36      	itet	cc
 800e594:	0403      	lslcc	r3, r0, #16
 800e596:	2000      	movcs	r0, #0
 800e598:	2010      	movcc	r0, #16
 800e59a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e59e:	bf3c      	itt	cc
 800e5a0:	021b      	lslcc	r3, r3, #8
 800e5a2:	3008      	addcc	r0, #8
 800e5a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e5a8:	bf3c      	itt	cc
 800e5aa:	011b      	lslcc	r3, r3, #4
 800e5ac:	3004      	addcc	r0, #4
 800e5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5b2:	bf3c      	itt	cc
 800e5b4:	009b      	lslcc	r3, r3, #2
 800e5b6:	3002      	addcc	r0, #2
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	db05      	blt.n	800e5c8 <__hi0bits+0x3c>
 800e5bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e5c0:	f100 0001 	add.w	r0, r0, #1
 800e5c4:	bf08      	it	eq
 800e5c6:	2020      	moveq	r0, #32
 800e5c8:	4770      	bx	lr

0800e5ca <__lo0bits>:
 800e5ca:	6803      	ldr	r3, [r0, #0]
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	f013 0007 	ands.w	r0, r3, #7
 800e5d2:	d00b      	beq.n	800e5ec <__lo0bits+0x22>
 800e5d4:	07d9      	lsls	r1, r3, #31
 800e5d6:	d421      	bmi.n	800e61c <__lo0bits+0x52>
 800e5d8:	0798      	lsls	r0, r3, #30
 800e5da:	bf47      	ittee	mi
 800e5dc:	085b      	lsrmi	r3, r3, #1
 800e5de:	2001      	movmi	r0, #1
 800e5e0:	089b      	lsrpl	r3, r3, #2
 800e5e2:	2002      	movpl	r0, #2
 800e5e4:	bf4c      	ite	mi
 800e5e6:	6013      	strmi	r3, [r2, #0]
 800e5e8:	6013      	strpl	r3, [r2, #0]
 800e5ea:	4770      	bx	lr
 800e5ec:	b299      	uxth	r1, r3
 800e5ee:	b909      	cbnz	r1, 800e5f4 <__lo0bits+0x2a>
 800e5f0:	0c1b      	lsrs	r3, r3, #16
 800e5f2:	2010      	movs	r0, #16
 800e5f4:	b2d9      	uxtb	r1, r3
 800e5f6:	b909      	cbnz	r1, 800e5fc <__lo0bits+0x32>
 800e5f8:	3008      	adds	r0, #8
 800e5fa:	0a1b      	lsrs	r3, r3, #8
 800e5fc:	0719      	lsls	r1, r3, #28
 800e5fe:	bf04      	itt	eq
 800e600:	091b      	lsreq	r3, r3, #4
 800e602:	3004      	addeq	r0, #4
 800e604:	0799      	lsls	r1, r3, #30
 800e606:	bf04      	itt	eq
 800e608:	089b      	lsreq	r3, r3, #2
 800e60a:	3002      	addeq	r0, #2
 800e60c:	07d9      	lsls	r1, r3, #31
 800e60e:	d403      	bmi.n	800e618 <__lo0bits+0x4e>
 800e610:	085b      	lsrs	r3, r3, #1
 800e612:	f100 0001 	add.w	r0, r0, #1
 800e616:	d003      	beq.n	800e620 <__lo0bits+0x56>
 800e618:	6013      	str	r3, [r2, #0]
 800e61a:	4770      	bx	lr
 800e61c:	2000      	movs	r0, #0
 800e61e:	4770      	bx	lr
 800e620:	2020      	movs	r0, #32
 800e622:	4770      	bx	lr

0800e624 <__i2b>:
 800e624:	b510      	push	{r4, lr}
 800e626:	460c      	mov	r4, r1
 800e628:	2101      	movs	r1, #1
 800e62a:	f7ff febb 	bl	800e3a4 <_Balloc>
 800e62e:	4602      	mov	r2, r0
 800e630:	b928      	cbnz	r0, 800e63e <__i2b+0x1a>
 800e632:	4b05      	ldr	r3, [pc, #20]	@ (800e648 <__i2b+0x24>)
 800e634:	f240 1145 	movw	r1, #325	@ 0x145
 800e638:	4804      	ldr	r0, [pc, #16]	@ (800e64c <__i2b+0x28>)
 800e63a:	f001 fc39 	bl	800feb0 <__assert_func>
 800e63e:	2301      	movs	r3, #1
 800e640:	6144      	str	r4, [r0, #20]
 800e642:	6103      	str	r3, [r0, #16]
 800e644:	bd10      	pop	{r4, pc}
 800e646:	bf00      	nop
 800e648:	0802e519 	.word	0x0802e519
 800e64c:	0802e52a 	.word	0x0802e52a

0800e650 <__multiply>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	4617      	mov	r7, r2
 800e656:	690a      	ldr	r2, [r1, #16]
 800e658:	4689      	mov	r9, r1
 800e65a:	b085      	sub	sp, #20
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	429a      	cmp	r2, r3
 800e660:	bfa2      	ittt	ge
 800e662:	463b      	movge	r3, r7
 800e664:	460f      	movge	r7, r1
 800e666:	4699      	movge	r9, r3
 800e668:	693d      	ldr	r5, [r7, #16]
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	eb05 060a 	add.w	r6, r5, sl
 800e676:	42b3      	cmp	r3, r6
 800e678:	bfb8      	it	lt
 800e67a:	3101      	addlt	r1, #1
 800e67c:	f7ff fe92 	bl	800e3a4 <_Balloc>
 800e680:	b930      	cbnz	r0, 800e690 <__multiply+0x40>
 800e682:	4602      	mov	r2, r0
 800e684:	4b42      	ldr	r3, [pc, #264]	@ (800e790 <__multiply+0x140>)
 800e686:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e68a:	4842      	ldr	r0, [pc, #264]	@ (800e794 <__multiply+0x144>)
 800e68c:	f001 fc10 	bl	800feb0 <__assert_func>
 800e690:	f100 0414 	add.w	r4, r0, #20
 800e694:	2200      	movs	r2, #0
 800e696:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e69a:	4623      	mov	r3, r4
 800e69c:	4573      	cmp	r3, lr
 800e69e:	d320      	bcc.n	800e6e2 <__multiply+0x92>
 800e6a0:	f107 0814 	add.w	r8, r7, #20
 800e6a4:	f109 0114 	add.w	r1, r9, #20
 800e6a8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e6ac:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e6b0:	9302      	str	r3, [sp, #8]
 800e6b2:	1beb      	subs	r3, r5, r7
 800e6b4:	3715      	adds	r7, #21
 800e6b6:	3b15      	subs	r3, #21
 800e6b8:	f023 0303 	bic.w	r3, r3, #3
 800e6bc:	3304      	adds	r3, #4
 800e6be:	42bd      	cmp	r5, r7
 800e6c0:	bf38      	it	cc
 800e6c2:	2304      	movcc	r3, #4
 800e6c4:	9301      	str	r3, [sp, #4]
 800e6c6:	9b02      	ldr	r3, [sp, #8]
 800e6c8:	9103      	str	r1, [sp, #12]
 800e6ca:	428b      	cmp	r3, r1
 800e6cc:	d80c      	bhi.n	800e6e8 <__multiply+0x98>
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	dd03      	ble.n	800e6da <__multiply+0x8a>
 800e6d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d057      	beq.n	800e78a <__multiply+0x13a>
 800e6da:	6106      	str	r6, [r0, #16]
 800e6dc:	b005      	add	sp, #20
 800e6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e2:	f843 2b04 	str.w	r2, [r3], #4
 800e6e6:	e7d9      	b.n	800e69c <__multiply+0x4c>
 800e6e8:	f8b1 a000 	ldrh.w	sl, [r1]
 800e6ec:	f1ba 0f00 	cmp.w	sl, #0
 800e6f0:	d021      	beq.n	800e736 <__multiply+0xe6>
 800e6f2:	46c4      	mov	ip, r8
 800e6f4:	46a1      	mov	r9, r4
 800e6f6:	2700      	movs	r7, #0
 800e6f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e6fc:	f8d9 3000 	ldr.w	r3, [r9]
 800e700:	fa1f fb82 	uxth.w	fp, r2
 800e704:	4565      	cmp	r5, ip
 800e706:	b29b      	uxth	r3, r3
 800e708:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e70c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e710:	443b      	add	r3, r7
 800e712:	f8d9 7000 	ldr.w	r7, [r9]
 800e716:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800e71a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e71e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e722:	b29b      	uxth	r3, r3
 800e724:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e72c:	f849 3b04 	str.w	r3, [r9], #4
 800e730:	d8e2      	bhi.n	800e6f8 <__multiply+0xa8>
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	50e7      	str	r7, [r4, r3]
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	3104      	adds	r1, #4
 800e73a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e73e:	f1b9 0f00 	cmp.w	r9, #0
 800e742:	d020      	beq.n	800e786 <__multiply+0x136>
 800e744:	6823      	ldr	r3, [r4, #0]
 800e746:	4647      	mov	r7, r8
 800e748:	46a4      	mov	ip, r4
 800e74a:	f04f 0a00 	mov.w	sl, #0
 800e74e:	f8b7 b000 	ldrh.w	fp, [r7]
 800e752:	b29b      	uxth	r3, r3
 800e754:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e758:	fb09 220b 	mla	r2, r9, fp, r2
 800e75c:	4452      	add	r2, sl
 800e75e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e762:	f84c 3b04 	str.w	r3, [ip], #4
 800e766:	f857 3b04 	ldr.w	r3, [r7], #4
 800e76a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e76e:	f8bc 3000 	ldrh.w	r3, [ip]
 800e772:	42bd      	cmp	r5, r7
 800e774:	fb09 330a 	mla	r3, r9, sl, r3
 800e778:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e77c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e780:	d8e5      	bhi.n	800e74e <__multiply+0xfe>
 800e782:	9a01      	ldr	r2, [sp, #4]
 800e784:	50a3      	str	r3, [r4, r2]
 800e786:	3404      	adds	r4, #4
 800e788:	e79d      	b.n	800e6c6 <__multiply+0x76>
 800e78a:	3e01      	subs	r6, #1
 800e78c:	e79f      	b.n	800e6ce <__multiply+0x7e>
 800e78e:	bf00      	nop
 800e790:	0802e519 	.word	0x0802e519
 800e794:	0802e52a 	.word	0x0802e52a

0800e798 <__pow5mult>:
 800e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4615      	mov	r5, r2
 800e79e:	f012 0203 	ands.w	r2, r2, #3
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	460e      	mov	r6, r1
 800e7a6:	d007      	beq.n	800e7b8 <__pow5mult+0x20>
 800e7a8:	3a01      	subs	r2, #1
 800e7aa:	4c25      	ldr	r4, [pc, #148]	@ (800e840 <__pow5mult+0xa8>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7b2:	f7ff fe59 	bl	800e468 <__multadd>
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	10ad      	asrs	r5, r5, #2
 800e7ba:	d03d      	beq.n	800e838 <__pow5mult+0xa0>
 800e7bc:	69fc      	ldr	r4, [r7, #28]
 800e7be:	b97c      	cbnz	r4, 800e7e0 <__pow5mult+0x48>
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	f7ff fd39 	bl	800e238 <malloc>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	61f8      	str	r0, [r7, #28]
 800e7ca:	b928      	cbnz	r0, 800e7d8 <__pow5mult+0x40>
 800e7cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e844 <__pow5mult+0xac>)
 800e7ce:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e7d2:	481d      	ldr	r0, [pc, #116]	@ (800e848 <__pow5mult+0xb0>)
 800e7d4:	f001 fb6c 	bl	800feb0 <__assert_func>
 800e7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7dc:	6004      	str	r4, [r0, #0]
 800e7de:	60c4      	str	r4, [r0, #12]
 800e7e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e7e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7e8:	b94c      	cbnz	r4, 800e7fe <__pow5mult+0x66>
 800e7ea:	f240 2171 	movw	r1, #625	@ 0x271
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	f7ff ff18 	bl	800e624 <__i2b>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7fc:	6003      	str	r3, [r0, #0]
 800e7fe:	f04f 0900 	mov.w	r9, #0
 800e802:	07eb      	lsls	r3, r5, #31
 800e804:	d50a      	bpl.n	800e81c <__pow5mult+0x84>
 800e806:	4631      	mov	r1, r6
 800e808:	4622      	mov	r2, r4
 800e80a:	4638      	mov	r0, r7
 800e80c:	f7ff ff20 	bl	800e650 <__multiply>
 800e810:	4680      	mov	r8, r0
 800e812:	4631      	mov	r1, r6
 800e814:	4638      	mov	r0, r7
 800e816:	4646      	mov	r6, r8
 800e818:	f7ff fe04 	bl	800e424 <_Bfree>
 800e81c:	106d      	asrs	r5, r5, #1
 800e81e:	d00b      	beq.n	800e838 <__pow5mult+0xa0>
 800e820:	6820      	ldr	r0, [r4, #0]
 800e822:	b938      	cbnz	r0, 800e834 <__pow5mult+0x9c>
 800e824:	4622      	mov	r2, r4
 800e826:	4621      	mov	r1, r4
 800e828:	4638      	mov	r0, r7
 800e82a:	f7ff ff11 	bl	800e650 <__multiply>
 800e82e:	6020      	str	r0, [r4, #0]
 800e830:	f8c0 9000 	str.w	r9, [r0]
 800e834:	4604      	mov	r4, r0
 800e836:	e7e4      	b.n	800e802 <__pow5mult+0x6a>
 800e838:	4630      	mov	r0, r6
 800e83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e83e:	bf00      	nop
 800e840:	0802e63c 	.word	0x0802e63c
 800e844:	0802e4aa 	.word	0x0802e4aa
 800e848:	0802e52a 	.word	0x0802e52a

0800e84c <__lshift>:
 800e84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e850:	460c      	mov	r4, r1
 800e852:	4607      	mov	r7, r0
 800e854:	4691      	mov	r9, r2
 800e856:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e85a:	6923      	ldr	r3, [r4, #16]
 800e85c:	6849      	ldr	r1, [r1, #4]
 800e85e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	f108 0601 	add.w	r6, r8, #1
 800e868:	42b3      	cmp	r3, r6
 800e86a:	db0b      	blt.n	800e884 <__lshift+0x38>
 800e86c:	4638      	mov	r0, r7
 800e86e:	f7ff fd99 	bl	800e3a4 <_Balloc>
 800e872:	4605      	mov	r5, r0
 800e874:	b948      	cbnz	r0, 800e88a <__lshift+0x3e>
 800e876:	4602      	mov	r2, r0
 800e878:	4b28      	ldr	r3, [pc, #160]	@ (800e91c <__lshift+0xd0>)
 800e87a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e87e:	4828      	ldr	r0, [pc, #160]	@ (800e920 <__lshift+0xd4>)
 800e880:	f001 fb16 	bl	800feb0 <__assert_func>
 800e884:	3101      	adds	r1, #1
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	e7ee      	b.n	800e868 <__lshift+0x1c>
 800e88a:	2300      	movs	r3, #0
 800e88c:	f100 0114 	add.w	r1, r0, #20
 800e890:	f100 0210 	add.w	r2, r0, #16
 800e894:	4618      	mov	r0, r3
 800e896:	4553      	cmp	r3, sl
 800e898:	db33      	blt.n	800e902 <__lshift+0xb6>
 800e89a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e89e:	f104 0314 	add.w	r3, r4, #20
 800e8a2:	6920      	ldr	r0, [r4, #16]
 800e8a4:	f019 091f 	ands.w	r9, r9, #31
 800e8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8b0:	d02b      	beq.n	800e90a <__lshift+0xbe>
 800e8b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e8b6:	468a      	mov	sl, r1
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	6818      	ldr	r0, [r3, #0]
 800e8bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e8c0:	4310      	orrs	r0, r2
 800e8c2:	f84a 0b04 	str.w	r0, [sl], #4
 800e8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ca:	459c      	cmp	ip, r3
 800e8cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8d0:	d8f3      	bhi.n	800e8ba <__lshift+0x6e>
 800e8d2:	ebac 0304 	sub.w	r3, ip, r4
 800e8d6:	f104 0015 	add.w	r0, r4, #21
 800e8da:	3b15      	subs	r3, #21
 800e8dc:	f023 0303 	bic.w	r3, r3, #3
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	4560      	cmp	r0, ip
 800e8e4:	bf88      	it	hi
 800e8e6:	2304      	movhi	r3, #4
 800e8e8:	50ca      	str	r2, [r1, r3]
 800e8ea:	b10a      	cbz	r2, 800e8f0 <__lshift+0xa4>
 800e8ec:	f108 0602 	add.w	r6, r8, #2
 800e8f0:	3e01      	subs	r6, #1
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	612e      	str	r6, [r5, #16]
 800e8f8:	f7ff fd94 	bl	800e424 <_Bfree>
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	3301      	adds	r3, #1
 800e904:	f842 0f04 	str.w	r0, [r2, #4]!
 800e908:	e7c5      	b.n	800e896 <__lshift+0x4a>
 800e90a:	3904      	subs	r1, #4
 800e90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e910:	459c      	cmp	ip, r3
 800e912:	f841 2f04 	str.w	r2, [r1, #4]!
 800e916:	d8f9      	bhi.n	800e90c <__lshift+0xc0>
 800e918:	e7ea      	b.n	800e8f0 <__lshift+0xa4>
 800e91a:	bf00      	nop
 800e91c:	0802e519 	.word	0x0802e519
 800e920:	0802e52a 	.word	0x0802e52a

0800e924 <__mcmp>:
 800e924:	4603      	mov	r3, r0
 800e926:	690a      	ldr	r2, [r1, #16]
 800e928:	6900      	ldr	r0, [r0, #16]
 800e92a:	1a80      	subs	r0, r0, r2
 800e92c:	b530      	push	{r4, r5, lr}
 800e92e:	d10e      	bne.n	800e94e <__mcmp+0x2a>
 800e930:	3314      	adds	r3, #20
 800e932:	3114      	adds	r1, #20
 800e934:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e938:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e93c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e944:	4295      	cmp	r5, r2
 800e946:	d003      	beq.n	800e950 <__mcmp+0x2c>
 800e948:	d205      	bcs.n	800e956 <__mcmp+0x32>
 800e94a:	f04f 30ff 	mov.w	r0, #4294967295
 800e94e:	bd30      	pop	{r4, r5, pc}
 800e950:	42a3      	cmp	r3, r4
 800e952:	d3f3      	bcc.n	800e93c <__mcmp+0x18>
 800e954:	e7fb      	b.n	800e94e <__mcmp+0x2a>
 800e956:	2001      	movs	r0, #1
 800e958:	e7f9      	b.n	800e94e <__mcmp+0x2a>
	...

0800e95c <__mdiff>:
 800e95c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e960:	4689      	mov	r9, r1
 800e962:	4606      	mov	r6, r0
 800e964:	4611      	mov	r1, r2
 800e966:	4614      	mov	r4, r2
 800e968:	4648      	mov	r0, r9
 800e96a:	f7ff ffdb 	bl	800e924 <__mcmp>
 800e96e:	1e05      	subs	r5, r0, #0
 800e970:	d112      	bne.n	800e998 <__mdiff+0x3c>
 800e972:	4629      	mov	r1, r5
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff fd15 	bl	800e3a4 <_Balloc>
 800e97a:	4602      	mov	r2, r0
 800e97c:	b928      	cbnz	r0, 800e98a <__mdiff+0x2e>
 800e97e:	4b41      	ldr	r3, [pc, #260]	@ (800ea84 <__mdiff+0x128>)
 800e980:	f240 2137 	movw	r1, #567	@ 0x237
 800e984:	4840      	ldr	r0, [pc, #256]	@ (800ea88 <__mdiff+0x12c>)
 800e986:	f001 fa93 	bl	800feb0 <__assert_func>
 800e98a:	2301      	movs	r3, #1
 800e98c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e990:	4610      	mov	r0, r2
 800e992:	b003      	add	sp, #12
 800e994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e998:	bfbc      	itt	lt
 800e99a:	464b      	movlt	r3, r9
 800e99c:	46a1      	movlt	r9, r4
 800e99e:	4630      	mov	r0, r6
 800e9a0:	bfb8      	it	lt
 800e9a2:	2501      	movlt	r5, #1
 800e9a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e9a8:	bfb4      	ite	lt
 800e9aa:	461c      	movlt	r4, r3
 800e9ac:	2500      	movge	r5, #0
 800e9ae:	f7ff fcf9 	bl	800e3a4 <_Balloc>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	b918      	cbnz	r0, 800e9be <__mdiff+0x62>
 800e9b6:	4b33      	ldr	r3, [pc, #204]	@ (800ea84 <__mdiff+0x128>)
 800e9b8:	f240 2145 	movw	r1, #581	@ 0x245
 800e9bc:	e7e2      	b.n	800e984 <__mdiff+0x28>
 800e9be:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e9c2:	f104 0e14 	add.w	lr, r4, #20
 800e9c6:	6926      	ldr	r6, [r4, #16]
 800e9c8:	f100 0b14 	add.w	fp, r0, #20
 800e9cc:	60c5      	str	r5, [r0, #12]
 800e9ce:	f109 0514 	add.w	r5, r9, #20
 800e9d2:	f109 0310 	add.w	r3, r9, #16
 800e9d6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e9da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e9de:	46d9      	mov	r9, fp
 800e9e0:	f04f 0c00 	mov.w	ip, #0
 800e9e4:	9301      	str	r3, [sp, #4]
 800e9e6:	9b01      	ldr	r3, [sp, #4]
 800e9e8:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e9ec:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e9f0:	4576      	cmp	r6, lr
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	fa1f f38a 	uxth.w	r3, sl
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	b283      	uxth	r3, r0
 800e9fc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800ea00:	eba1 0303 	sub.w	r3, r1, r3
 800ea04:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea08:	4463      	add	r3, ip
 800ea0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea18:	f849 3b04 	str.w	r3, [r9], #4
 800ea1c:	d8e3      	bhi.n	800e9e6 <__mdiff+0x8a>
 800ea1e:	1b33      	subs	r3, r6, r4
 800ea20:	3415      	adds	r4, #21
 800ea22:	3b15      	subs	r3, #21
 800ea24:	f023 0303 	bic.w	r3, r3, #3
 800ea28:	3304      	adds	r3, #4
 800ea2a:	42a6      	cmp	r6, r4
 800ea2c:	bf38      	it	cc
 800ea2e:	2304      	movcc	r3, #4
 800ea30:	441d      	add	r5, r3
 800ea32:	445b      	add	r3, fp
 800ea34:	462c      	mov	r4, r5
 800ea36:	461e      	mov	r6, r3
 800ea38:	4544      	cmp	r4, r8
 800ea3a:	d30e      	bcc.n	800ea5a <__mdiff+0xfe>
 800ea3c:	f108 0103 	add.w	r1, r8, #3
 800ea40:	1b49      	subs	r1, r1, r5
 800ea42:	3d03      	subs	r5, #3
 800ea44:	f021 0103 	bic.w	r1, r1, #3
 800ea48:	45a8      	cmp	r8, r5
 800ea4a:	bf38      	it	cc
 800ea4c:	2100      	movcc	r1, #0
 800ea4e:	440b      	add	r3, r1
 800ea50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea54:	b199      	cbz	r1, 800ea7e <__mdiff+0x122>
 800ea56:	6117      	str	r7, [r2, #16]
 800ea58:	e79a      	b.n	800e990 <__mdiff+0x34>
 800ea5a:	f854 1b04 	ldr.w	r1, [r4], #4
 800ea5e:	46e6      	mov	lr, ip
 800ea60:	fa1f fc81 	uxth.w	ip, r1
 800ea64:	0c08      	lsrs	r0, r1, #16
 800ea66:	4471      	add	r1, lr
 800ea68:	44f4      	add	ip, lr
 800ea6a:	b289      	uxth	r1, r1
 800ea6c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ea70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ea74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea78:	f846 1b04 	str.w	r1, [r6], #4
 800ea7c:	e7dc      	b.n	800ea38 <__mdiff+0xdc>
 800ea7e:	3f01      	subs	r7, #1
 800ea80:	e7e6      	b.n	800ea50 <__mdiff+0xf4>
 800ea82:	bf00      	nop
 800ea84:	0802e519 	.word	0x0802e519
 800ea88:	0802e52a 	.word	0x0802e52a

0800ea8c <__ulp>:
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	4b11      	ldr	r3, [pc, #68]	@ (800ead4 <__ulp+0x48>)
 800ea90:	ed8d 0b00 	vstr	d0, [sp]
 800ea94:	9a01      	ldr	r2, [sp, #4]
 800ea96:	4013      	ands	r3, r2
 800ea98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	dc08      	bgt.n	800eab2 <__ulp+0x26>
 800eaa0:	425b      	negs	r3, r3
 800eaa2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eaa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eaaa:	da04      	bge.n	800eab6 <__ulp+0x2a>
 800eaac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eab0:	4113      	asrs	r3, r2
 800eab2:	2200      	movs	r2, #0
 800eab4:	e008      	b.n	800eac8 <__ulp+0x3c>
 800eab6:	f1a2 0314 	sub.w	r3, r2, #20
 800eaba:	2b1e      	cmp	r3, #30
 800eabc:	bfd6      	itet	le
 800eabe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eac2:	2201      	movgt	r2, #1
 800eac4:	40da      	lsrle	r2, r3
 800eac6:	2300      	movs	r3, #0
 800eac8:	4619      	mov	r1, r3
 800eaca:	4610      	mov	r0, r2
 800eacc:	ec41 0b10 	vmov	d0, r0, r1
 800ead0:	b002      	add	sp, #8
 800ead2:	4770      	bx	lr
 800ead4:	7ff00000 	.word	0x7ff00000

0800ead8 <__b2d>:
 800ead8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eadc:	6906      	ldr	r6, [r0, #16]
 800eade:	f100 0814 	add.w	r8, r0, #20
 800eae2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eae6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eaea:	1f37      	subs	r7, r6, #4
 800eaec:	4610      	mov	r0, r2
 800eaee:	f7ff fd4d 	bl	800e58c <__hi0bits>
 800eaf2:	f1c0 0320 	rsb	r3, r0, #32
 800eaf6:	280a      	cmp	r0, #10
 800eaf8:	600b      	str	r3, [r1, #0]
 800eafa:	491d      	ldr	r1, [pc, #116]	@ (800eb70 <__b2d+0x98>)
 800eafc:	dc16      	bgt.n	800eb2c <__b2d+0x54>
 800eafe:	f1c0 0c0b 	rsb	ip, r0, #11
 800eb02:	45b8      	cmp	r8, r7
 800eb04:	f100 0015 	add.w	r0, r0, #21
 800eb08:	fa22 f30c 	lsr.w	r3, r2, ip
 800eb0c:	fa02 f000 	lsl.w	r0, r2, r0
 800eb10:	ea43 0501 	orr.w	r5, r3, r1
 800eb14:	bf34      	ite	cc
 800eb16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eb1a:	2300      	movcs	r3, #0
 800eb1c:	fa23 f30c 	lsr.w	r3, r3, ip
 800eb20:	4303      	orrs	r3, r0
 800eb22:	461c      	mov	r4, r3
 800eb24:	ec45 4b10 	vmov	d0, r4, r5
 800eb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb2c:	45b8      	cmp	r8, r7
 800eb2e:	bf3a      	itte	cc
 800eb30:	f1a6 0708 	subcc.w	r7, r6, #8
 800eb34:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eb38:	2300      	movcs	r3, #0
 800eb3a:	380b      	subs	r0, #11
 800eb3c:	d014      	beq.n	800eb68 <__b2d+0x90>
 800eb3e:	f1c0 0120 	rsb	r1, r0, #32
 800eb42:	4082      	lsls	r2, r0
 800eb44:	4547      	cmp	r7, r8
 800eb46:	fa23 f401 	lsr.w	r4, r3, r1
 800eb4a:	fa03 f300 	lsl.w	r3, r3, r0
 800eb4e:	ea42 0204 	orr.w	r2, r2, r4
 800eb52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800eb56:	bf8c      	ite	hi
 800eb58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eb5c:	2200      	movls	r2, #0
 800eb5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800eb62:	40ca      	lsrs	r2, r1
 800eb64:	4313      	orrs	r3, r2
 800eb66:	e7dc      	b.n	800eb22 <__b2d+0x4a>
 800eb68:	ea42 0501 	orr.w	r5, r2, r1
 800eb6c:	e7d9      	b.n	800eb22 <__b2d+0x4a>
 800eb6e:	bf00      	nop
 800eb70:	3ff00000 	.word	0x3ff00000

0800eb74 <__d2b>:
 800eb74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb78:	460f      	mov	r7, r1
 800eb7a:	2101      	movs	r1, #1
 800eb7c:	4616      	mov	r6, r2
 800eb7e:	ec59 8b10 	vmov	r8, r9, d0
 800eb82:	f7ff fc0f 	bl	800e3a4 <_Balloc>
 800eb86:	4604      	mov	r4, r0
 800eb88:	b930      	cbnz	r0, 800eb98 <__d2b+0x24>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	4b23      	ldr	r3, [pc, #140]	@ (800ec1c <__d2b+0xa8>)
 800eb8e:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb92:	4823      	ldr	r0, [pc, #140]	@ (800ec20 <__d2b+0xac>)
 800eb94:	f001 f98c 	bl	800feb0 <__assert_func>
 800eb98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eba0:	b10d      	cbz	r5, 800eba6 <__d2b+0x32>
 800eba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	f1b8 0300 	subs.w	r3, r8, #0
 800ebac:	d023      	beq.n	800ebf6 <__d2b+0x82>
 800ebae:	4668      	mov	r0, sp
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	f7ff fd0a 	bl	800e5ca <__lo0bits>
 800ebb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ebba:	b1d0      	cbz	r0, 800ebf2 <__d2b+0x7e>
 800ebbc:	f1c0 0320 	rsb	r3, r0, #32
 800ebc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc4:	40c2      	lsrs	r2, r0
 800ebc6:	430b      	orrs	r3, r1
 800ebc8:	9201      	str	r2, [sp, #4]
 800ebca:	6163      	str	r3, [r4, #20]
 800ebcc:	9b01      	ldr	r3, [sp, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	61a3      	str	r3, [r4, #24]
 800ebd2:	bf0c      	ite	eq
 800ebd4:	2201      	moveq	r2, #1
 800ebd6:	2202      	movne	r2, #2
 800ebd8:	6122      	str	r2, [r4, #16]
 800ebda:	b1a5      	cbz	r5, 800ec06 <__d2b+0x92>
 800ebdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ebe0:	4405      	add	r5, r0
 800ebe2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ebe6:	603d      	str	r5, [r7, #0]
 800ebe8:	6030      	str	r0, [r6, #0]
 800ebea:	4620      	mov	r0, r4
 800ebec:	b003      	add	sp, #12
 800ebee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebf2:	6161      	str	r1, [r4, #20]
 800ebf4:	e7ea      	b.n	800ebcc <__d2b+0x58>
 800ebf6:	a801      	add	r0, sp, #4
 800ebf8:	f7ff fce7 	bl	800e5ca <__lo0bits>
 800ebfc:	9b01      	ldr	r3, [sp, #4]
 800ebfe:	3020      	adds	r0, #32
 800ec00:	2201      	movs	r2, #1
 800ec02:	6163      	str	r3, [r4, #20]
 800ec04:	e7e8      	b.n	800ebd8 <__d2b+0x64>
 800ec06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ec0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec0e:	6038      	str	r0, [r7, #0]
 800ec10:	6918      	ldr	r0, [r3, #16]
 800ec12:	f7ff fcbb 	bl	800e58c <__hi0bits>
 800ec16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec1a:	e7e5      	b.n	800ebe8 <__d2b+0x74>
 800ec1c:	0802e519 	.word	0x0802e519
 800ec20:	0802e52a 	.word	0x0802e52a

0800ec24 <__ratio>:
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	e9cd 1000 	strd	r1, r0, [sp]
 800ec2e:	a902      	add	r1, sp, #8
 800ec30:	f7ff ff52 	bl	800ead8 <__b2d>
 800ec34:	a903      	add	r1, sp, #12
 800ec36:	9800      	ldr	r0, [sp, #0]
 800ec38:	ec55 4b10 	vmov	r4, r5, d0
 800ec3c:	f7ff ff4c 	bl	800ead8 <__b2d>
 800ec40:	9b01      	ldr	r3, [sp, #4]
 800ec42:	462f      	mov	r7, r5
 800ec44:	4620      	mov	r0, r4
 800ec46:	6919      	ldr	r1, [r3, #16]
 800ec48:	9b00      	ldr	r3, [sp, #0]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	1ac9      	subs	r1, r1, r3
 800ec4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ec52:	ec5b ab10 	vmov	sl, fp, d0
 800ec56:	1a9b      	subs	r3, r3, r2
 800ec58:	46d9      	mov	r9, fp
 800ec5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	bfcd      	iteet	gt
 800ec62:	462a      	movgt	r2, r5
 800ec64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec68:	465a      	movle	r2, fp
 800ec6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ec6e:	bfd8      	it	le
 800ec70:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ec74:	4652      	mov	r2, sl
 800ec76:	4639      	mov	r1, r7
 800ec78:	464b      	mov	r3, r9
 800ec7a:	f7f1 fdeb 	bl	8000854 <__aeabi_ddiv>
 800ec7e:	ec41 0b10 	vmov	d0, r0, r1
 800ec82:	b005      	add	sp, #20
 800ec84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec88 <__copybits>:
 800ec88:	3901      	subs	r1, #1
 800ec8a:	f102 0314 	add.w	r3, r2, #20
 800ec8e:	1149      	asrs	r1, r1, #5
 800ec90:	b570      	push	{r4, r5, r6, lr}
 800ec92:	3101      	adds	r1, #1
 800ec94:	6914      	ldr	r4, [r2, #16]
 800ec96:	1f05      	subs	r5, r0, #4
 800ec98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ec9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eca0:	42a3      	cmp	r3, r4
 800eca2:	d30c      	bcc.n	800ecbe <__copybits+0x36>
 800eca4:	1aa3      	subs	r3, r4, r2
 800eca6:	3211      	adds	r2, #17
 800eca8:	3b11      	subs	r3, #17
 800ecaa:	f023 0303 	bic.w	r3, r3, #3
 800ecae:	42a2      	cmp	r2, r4
 800ecb0:	bf88      	it	hi
 800ecb2:	2300      	movhi	r3, #0
 800ecb4:	4418      	add	r0, r3
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	4288      	cmp	r0, r1
 800ecba:	d305      	bcc.n	800ecc8 <__copybits+0x40>
 800ecbc:	bd70      	pop	{r4, r5, r6, pc}
 800ecbe:	f853 6b04 	ldr.w	r6, [r3], #4
 800ecc2:	f845 6f04 	str.w	r6, [r5, #4]!
 800ecc6:	e7eb      	b.n	800eca0 <__copybits+0x18>
 800ecc8:	f840 3b04 	str.w	r3, [r0], #4
 800eccc:	e7f4      	b.n	800ecb8 <__copybits+0x30>

0800ecce <__any_on>:
 800ecce:	f100 0214 	add.w	r2, r0, #20
 800ecd2:	114b      	asrs	r3, r1, #5
 800ecd4:	6900      	ldr	r0, [r0, #16]
 800ecd6:	4298      	cmp	r0, r3
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	db11      	blt.n	800ed00 <__any_on+0x32>
 800ecdc:	dd0a      	ble.n	800ecf4 <__any_on+0x26>
 800ecde:	f011 011f 	ands.w	r1, r1, #31
 800ece2:	d007      	beq.n	800ecf4 <__any_on+0x26>
 800ece4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ece8:	fa24 f001 	lsr.w	r0, r4, r1
 800ecec:	fa00 f101 	lsl.w	r1, r0, r1
 800ecf0:	428c      	cmp	r4, r1
 800ecf2:	d10b      	bne.n	800ed0c <__any_on+0x3e>
 800ecf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d803      	bhi.n	800ed04 <__any_on+0x36>
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	bd10      	pop	{r4, pc}
 800ed00:	4603      	mov	r3, r0
 800ed02:	e7f7      	b.n	800ecf4 <__any_on+0x26>
 800ed04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed08:	2900      	cmp	r1, #0
 800ed0a:	d0f5      	beq.n	800ecf8 <__any_on+0x2a>
 800ed0c:	2001      	movs	r0, #1
 800ed0e:	e7f6      	b.n	800ecfe <__any_on+0x30>

0800ed10 <sulp>:
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	4604      	mov	r4, r0
 800ed14:	460d      	mov	r5, r1
 800ed16:	4616      	mov	r6, r2
 800ed18:	ec45 4b10 	vmov	d0, r4, r5
 800ed1c:	f7ff feb6 	bl	800ea8c <__ulp>
 800ed20:	ec51 0b10 	vmov	r0, r1, d0
 800ed24:	b17e      	cbz	r6, 800ed46 <sulp+0x36>
 800ed26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ed2a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	dd09      	ble.n	800ed46 <sulp+0x36>
 800ed32:	051b      	lsls	r3, r3, #20
 800ed34:	2400      	movs	r4, #0
 800ed36:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ed3a:	4622      	mov	r2, r4
 800ed3c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ed40:	462b      	mov	r3, r5
 800ed42:	f7f1 fc5d 	bl	8000600 <__aeabi_dmul>
 800ed46:	ec41 0b10 	vmov	d0, r0, r1
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}
 800ed4c:	0000      	movs	r0, r0
	...

0800ed50 <_strtod_l>:
 800ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	b09f      	sub	sp, #124	@ 0x7c
 800ed56:	460c      	mov	r4, r1
 800ed58:	f04f 0a00 	mov.w	sl, #0
 800ed5c:	f04f 0b00 	mov.w	fp, #0
 800ed60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ed62:	2200      	movs	r2, #0
 800ed64:	9005      	str	r0, [sp, #20]
 800ed66:	921a      	str	r2, [sp, #104]	@ 0x68
 800ed68:	460a      	mov	r2, r1
 800ed6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed6c:	7811      	ldrb	r1, [r2, #0]
 800ed6e:	292b      	cmp	r1, #43	@ 0x2b
 800ed70:	d04a      	beq.n	800ee08 <_strtod_l+0xb8>
 800ed72:	d838      	bhi.n	800ede6 <_strtod_l+0x96>
 800ed74:	290d      	cmp	r1, #13
 800ed76:	d832      	bhi.n	800edde <_strtod_l+0x8e>
 800ed78:	2908      	cmp	r1, #8
 800ed7a:	d832      	bhi.n	800ede2 <_strtod_l+0x92>
 800ed7c:	2900      	cmp	r1, #0
 800ed7e:	d03b      	beq.n	800edf8 <_strtod_l+0xa8>
 800ed80:	2200      	movs	r2, #0
 800ed82:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ed86:	782a      	ldrb	r2, [r5, #0]
 800ed88:	2a30      	cmp	r2, #48	@ 0x30
 800ed8a:	f040 80b2 	bne.w	800eef2 <_strtod_l+0x1a2>
 800ed8e:	786a      	ldrb	r2, [r5, #1]
 800ed90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ed94:	2a58      	cmp	r2, #88	@ 0x58
 800ed96:	d16e      	bne.n	800ee76 <_strtod_l+0x126>
 800ed98:	9302      	str	r3, [sp, #8]
 800ed9a:	a919      	add	r1, sp, #100	@ 0x64
 800ed9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed9e:	4a90      	ldr	r2, [pc, #576]	@ (800efe0 <_strtod_l+0x290>)
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	ab1a      	add	r3, sp, #104	@ 0x68
 800eda4:	9805      	ldr	r0, [sp, #20]
 800eda6:	9300      	str	r3, [sp, #0]
 800eda8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800edaa:	f001 f919 	bl	800ffe0 <__gethex>
 800edae:	f010 060f 	ands.w	r6, r0, #15
 800edb2:	4604      	mov	r4, r0
 800edb4:	d005      	beq.n	800edc2 <_strtod_l+0x72>
 800edb6:	2e06      	cmp	r6, #6
 800edb8:	d128      	bne.n	800ee0c <_strtod_l+0xbc>
 800edba:	3501      	adds	r5, #1
 800edbc:	2300      	movs	r3, #0
 800edbe:	9519      	str	r5, [sp, #100]	@ 0x64
 800edc0:	930e      	str	r3, [sp, #56]	@ 0x38
 800edc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 858e 	bne.w	800f8e6 <_strtod_l+0xb96>
 800edca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edcc:	b1cb      	cbz	r3, 800ee02 <_strtod_l+0xb2>
 800edce:	4652      	mov	r2, sl
 800edd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800edd4:	ec43 2b10 	vmov	d0, r2, r3
 800edd8:	b01f      	add	sp, #124	@ 0x7c
 800edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edde:	2920      	cmp	r1, #32
 800ede0:	d1ce      	bne.n	800ed80 <_strtod_l+0x30>
 800ede2:	3201      	adds	r2, #1
 800ede4:	e7c1      	b.n	800ed6a <_strtod_l+0x1a>
 800ede6:	292d      	cmp	r1, #45	@ 0x2d
 800ede8:	d1ca      	bne.n	800ed80 <_strtod_l+0x30>
 800edea:	2101      	movs	r1, #1
 800edec:	910e      	str	r1, [sp, #56]	@ 0x38
 800edee:	1c51      	adds	r1, r2, #1
 800edf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800edf2:	7852      	ldrb	r2, [r2, #1]
 800edf4:	2a00      	cmp	r2, #0
 800edf6:	d1c5      	bne.n	800ed84 <_strtod_l+0x34>
 800edf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800edfa:	9419      	str	r4, [sp, #100]	@ 0x64
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f040 8570 	bne.w	800f8e2 <_strtod_l+0xb92>
 800ee02:	4652      	mov	r2, sl
 800ee04:	465b      	mov	r3, fp
 800ee06:	e7e5      	b.n	800edd4 <_strtod_l+0x84>
 800ee08:	2100      	movs	r1, #0
 800ee0a:	e7ef      	b.n	800edec <_strtod_l+0x9c>
 800ee0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ee0e:	b13a      	cbz	r2, 800ee20 <_strtod_l+0xd0>
 800ee10:	2135      	movs	r1, #53	@ 0x35
 800ee12:	a81c      	add	r0, sp, #112	@ 0x70
 800ee14:	f7ff ff38 	bl	800ec88 <__copybits>
 800ee18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee1a:	9805      	ldr	r0, [sp, #20]
 800ee1c:	f7ff fb02 	bl	800e424 <_Bfree>
 800ee20:	3e01      	subs	r6, #1
 800ee22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ee24:	2e04      	cmp	r6, #4
 800ee26:	d806      	bhi.n	800ee36 <_strtod_l+0xe6>
 800ee28:	e8df f006 	tbb	[pc, r6]
 800ee2c:	201d0314 	.word	0x201d0314
 800ee30:	14          	.byte	0x14
 800ee31:	00          	.byte	0x00
 800ee32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ee36:	05e1      	lsls	r1, r4, #23
 800ee38:	bf48      	it	mi
 800ee3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ee3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ee42:	0d1b      	lsrs	r3, r3, #20
 800ee44:	051b      	lsls	r3, r3, #20
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1bb      	bne.n	800edc2 <_strtod_l+0x72>
 800ee4a:	f7fe fafd 	bl	800d448 <__errno>
 800ee4e:	2322      	movs	r3, #34	@ 0x22
 800ee50:	6003      	str	r3, [r0, #0]
 800ee52:	e7b6      	b.n	800edc2 <_strtod_l+0x72>
 800ee54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ee58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ee5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ee60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ee64:	e7e7      	b.n	800ee36 <_strtod_l+0xe6>
 800ee66:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800efe8 <_strtod_l+0x298>
 800ee6a:	e7e4      	b.n	800ee36 <_strtod_l+0xe6>
 800ee6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ee70:	f04f 3aff 	mov.w	sl, #4294967295
 800ee74:	e7df      	b.n	800ee36 <_strtod_l+0xe6>
 800ee76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee78:	1c5a      	adds	r2, r3, #1
 800ee7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee7c:	785b      	ldrb	r3, [r3, #1]
 800ee7e:	2b30      	cmp	r3, #48	@ 0x30
 800ee80:	d0f9      	beq.n	800ee76 <_strtod_l+0x126>
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d09d      	beq.n	800edc2 <_strtod_l+0x72>
 800ee86:	2301      	movs	r3, #1
 800ee88:	2700      	movs	r7, #0
 800ee8a:	9308      	str	r3, [sp, #32]
 800ee8c:	220a      	movs	r2, #10
 800ee8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee90:	46b9      	mov	r9, r7
 800ee92:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ee94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee96:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ee98:	7805      	ldrb	r5, [r0, #0]
 800ee9a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ee9e:	b2d9      	uxtb	r1, r3
 800eea0:	2909      	cmp	r1, #9
 800eea2:	d928      	bls.n	800eef6 <_strtod_l+0x1a6>
 800eea4:	2201      	movs	r2, #1
 800eea6:	494f      	ldr	r1, [pc, #316]	@ (800efe4 <_strtod_l+0x294>)
 800eea8:	f000 ffd6 	bl	800fe58 <strncmp>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d032      	beq.n	800ef16 <_strtod_l+0x1c6>
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	462a      	mov	r2, r5
 800eeb4:	464d      	mov	r5, r9
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	900a      	str	r0, [sp, #40]	@ 0x28
 800eeba:	2a65      	cmp	r2, #101	@ 0x65
 800eebc:	d001      	beq.n	800eec2 <_strtod_l+0x172>
 800eebe:	2a45      	cmp	r2, #69	@ 0x45
 800eec0:	d114      	bne.n	800eeec <_strtod_l+0x19c>
 800eec2:	b91d      	cbnz	r5, 800eecc <_strtod_l+0x17c>
 800eec4:	9a08      	ldr	r2, [sp, #32]
 800eec6:	4302      	orrs	r2, r0
 800eec8:	d096      	beq.n	800edf8 <_strtod_l+0xa8>
 800eeca:	2500      	movs	r5, #0
 800eecc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800eece:	1c62      	adds	r2, r4, #1
 800eed0:	9219      	str	r2, [sp, #100]	@ 0x64
 800eed2:	7862      	ldrb	r2, [r4, #1]
 800eed4:	2a2b      	cmp	r2, #43	@ 0x2b
 800eed6:	d079      	beq.n	800efcc <_strtod_l+0x27c>
 800eed8:	2a2d      	cmp	r2, #45	@ 0x2d
 800eeda:	d07d      	beq.n	800efd8 <_strtod_l+0x288>
 800eedc:	f04f 0c00 	mov.w	ip, #0
 800eee0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eee4:	2909      	cmp	r1, #9
 800eee6:	f240 8085 	bls.w	800eff4 <_strtod_l+0x2a4>
 800eeea:	9419      	str	r4, [sp, #100]	@ 0x64
 800eeec:	f04f 0800 	mov.w	r8, #0
 800eef0:	e0a5      	b.n	800f03e <_strtod_l+0x2ee>
 800eef2:	2300      	movs	r3, #0
 800eef4:	e7c8      	b.n	800ee88 <_strtod_l+0x138>
 800eef6:	f1b9 0f08 	cmp.w	r9, #8
 800eefa:	f100 0001 	add.w	r0, r0, #1
 800eefe:	f109 0901 	add.w	r9, r9, #1
 800ef02:	bfd4      	ite	le
 800ef04:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ef06:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ef0a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ef0c:	bfdc      	itt	le
 800ef0e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ef12:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ef14:	e7bf      	b.n	800ee96 <_strtod_l+0x146>
 800ef16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef1c:	785a      	ldrb	r2, [r3, #1]
 800ef1e:	f1b9 0f00 	cmp.w	r9, #0
 800ef22:	d03a      	beq.n	800ef9a <_strtod_l+0x24a>
 800ef24:	464d      	mov	r5, r9
 800ef26:	900a      	str	r0, [sp, #40]	@ 0x28
 800ef28:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ef2c:	2b09      	cmp	r3, #9
 800ef2e:	d912      	bls.n	800ef56 <_strtod_l+0x206>
 800ef30:	2301      	movs	r3, #1
 800ef32:	e7c2      	b.n	800eeba <_strtod_l+0x16a>
 800ef34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef36:	3001      	adds	r0, #1
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef3c:	785a      	ldrb	r2, [r3, #1]
 800ef3e:	2a30      	cmp	r2, #48	@ 0x30
 800ef40:	d0f8      	beq.n	800ef34 <_strtod_l+0x1e4>
 800ef42:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ef46:	2b08      	cmp	r3, #8
 800ef48:	f200 84d2 	bhi.w	800f8f0 <_strtod_l+0xba0>
 800ef4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ef4e:	2000      	movs	r0, #0
 800ef50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef52:	4605      	mov	r5, r0
 800ef54:	930c      	str	r3, [sp, #48]	@ 0x30
 800ef56:	3a30      	subs	r2, #48	@ 0x30
 800ef58:	f100 0301 	add.w	r3, r0, #1
 800ef5c:	d017      	beq.n	800ef8e <_strtod_l+0x23e>
 800ef5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ef60:	462e      	mov	r6, r5
 800ef62:	f04f 0e0a 	mov.w	lr, #10
 800ef66:	4419      	add	r1, r3
 800ef68:	910a      	str	r1, [sp, #40]	@ 0x28
 800ef6a:	1c71      	adds	r1, r6, #1
 800ef6c:	eba1 0c05 	sub.w	ip, r1, r5
 800ef70:	4563      	cmp	r3, ip
 800ef72:	dc14      	bgt.n	800ef9e <_strtod_l+0x24e>
 800ef74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ef78:	182b      	adds	r3, r5, r0
 800ef7a:	3501      	adds	r5, #1
 800ef7c:	2b08      	cmp	r3, #8
 800ef7e:	4405      	add	r5, r0
 800ef80:	dc1a      	bgt.n	800efb8 <_strtod_l+0x268>
 800ef82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef84:	230a      	movs	r3, #10
 800ef86:	fb03 2301 	mla	r3, r3, r1, r2
 800ef8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef90:	4618      	mov	r0, r3
 800ef92:	1c51      	adds	r1, r2, #1
 800ef94:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef96:	7852      	ldrb	r2, [r2, #1]
 800ef98:	e7c6      	b.n	800ef28 <_strtod_l+0x1d8>
 800ef9a:	4648      	mov	r0, r9
 800ef9c:	e7cf      	b.n	800ef3e <_strtod_l+0x1ee>
 800ef9e:	2e08      	cmp	r6, #8
 800efa0:	dc05      	bgt.n	800efae <_strtod_l+0x25e>
 800efa2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800efa4:	fb0e f606 	mul.w	r6, lr, r6
 800efa8:	960b      	str	r6, [sp, #44]	@ 0x2c
 800efaa:	460e      	mov	r6, r1
 800efac:	e7dd      	b.n	800ef6a <_strtod_l+0x21a>
 800efae:	2910      	cmp	r1, #16
 800efb0:	bfd8      	it	le
 800efb2:	fb0e f707 	mulle.w	r7, lr, r7
 800efb6:	e7f8      	b.n	800efaa <_strtod_l+0x25a>
 800efb8:	2b0f      	cmp	r3, #15
 800efba:	bfdc      	itt	le
 800efbc:	230a      	movle	r3, #10
 800efbe:	fb03 2707 	mlale	r7, r3, r7, r2
 800efc2:	e7e3      	b.n	800ef8c <_strtod_l+0x23c>
 800efc4:	2300      	movs	r3, #0
 800efc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800efc8:	2301      	movs	r3, #1
 800efca:	e77b      	b.n	800eec4 <_strtod_l+0x174>
 800efcc:	f04f 0c00 	mov.w	ip, #0
 800efd0:	1ca2      	adds	r2, r4, #2
 800efd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800efd4:	78a2      	ldrb	r2, [r4, #2]
 800efd6:	e783      	b.n	800eee0 <_strtod_l+0x190>
 800efd8:	f04f 0c01 	mov.w	ip, #1
 800efdc:	e7f8      	b.n	800efd0 <_strtod_l+0x280>
 800efde:	bf00      	nop
 800efe0:	0802e74c 	.word	0x0802e74c
 800efe4:	0802e583 	.word	0x0802e583
 800efe8:	7ff00000 	.word	0x7ff00000
 800efec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800efee:	1c51      	adds	r1, r2, #1
 800eff0:	9119      	str	r1, [sp, #100]	@ 0x64
 800eff2:	7852      	ldrb	r2, [r2, #1]
 800eff4:	2a30      	cmp	r2, #48	@ 0x30
 800eff6:	d0f9      	beq.n	800efec <_strtod_l+0x29c>
 800eff8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800effc:	2908      	cmp	r1, #8
 800effe:	f63f af75 	bhi.w	800eeec <_strtod_l+0x19c>
 800f002:	3a30      	subs	r2, #48	@ 0x30
 800f004:	f04f 080a 	mov.w	r8, #10
 800f008:	9209      	str	r2, [sp, #36]	@ 0x24
 800f00a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f00c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f00e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f010:	1c56      	adds	r6, r2, #1
 800f012:	9619      	str	r6, [sp, #100]	@ 0x64
 800f014:	7852      	ldrb	r2, [r2, #1]
 800f016:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f01a:	f1be 0f09 	cmp.w	lr, #9
 800f01e:	d939      	bls.n	800f094 <_strtod_l+0x344>
 800f020:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f022:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f026:	1a76      	subs	r6, r6, r1
 800f028:	2e08      	cmp	r6, #8
 800f02a:	dc03      	bgt.n	800f034 <_strtod_l+0x2e4>
 800f02c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f02e:	4588      	cmp	r8, r1
 800f030:	bfa8      	it	ge
 800f032:	4688      	movge	r8, r1
 800f034:	f1bc 0f00 	cmp.w	ip, #0
 800f038:	d001      	beq.n	800f03e <_strtod_l+0x2ee>
 800f03a:	f1c8 0800 	rsb	r8, r8, #0
 800f03e:	2d00      	cmp	r5, #0
 800f040:	d14e      	bne.n	800f0e0 <_strtod_l+0x390>
 800f042:	9908      	ldr	r1, [sp, #32]
 800f044:	4308      	orrs	r0, r1
 800f046:	f47f aebc 	bne.w	800edc2 <_strtod_l+0x72>
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f47f aed4 	bne.w	800edf8 <_strtod_l+0xa8>
 800f050:	2a69      	cmp	r2, #105	@ 0x69
 800f052:	d028      	beq.n	800f0a6 <_strtod_l+0x356>
 800f054:	dc25      	bgt.n	800f0a2 <_strtod_l+0x352>
 800f056:	2a49      	cmp	r2, #73	@ 0x49
 800f058:	d025      	beq.n	800f0a6 <_strtod_l+0x356>
 800f05a:	2a4e      	cmp	r2, #78	@ 0x4e
 800f05c:	f47f aecc 	bne.w	800edf8 <_strtod_l+0xa8>
 800f060:	499a      	ldr	r1, [pc, #616]	@ (800f2cc <_strtod_l+0x57c>)
 800f062:	a819      	add	r0, sp, #100	@ 0x64
 800f064:	f001 f9dc 	bl	8010420 <__match>
 800f068:	2800      	cmp	r0, #0
 800f06a:	f43f aec5 	beq.w	800edf8 <_strtod_l+0xa8>
 800f06e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b28      	cmp	r3, #40	@ 0x28
 800f074:	d12e      	bne.n	800f0d4 <_strtod_l+0x384>
 800f076:	aa1c      	add	r2, sp, #112	@ 0x70
 800f078:	4995      	ldr	r1, [pc, #596]	@ (800f2d0 <_strtod_l+0x580>)
 800f07a:	a819      	add	r0, sp, #100	@ 0x64
 800f07c:	f001 f9e4 	bl	8010448 <__hexnan>
 800f080:	2805      	cmp	r0, #5
 800f082:	d127      	bne.n	800f0d4 <_strtod_l+0x384>
 800f084:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f086:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f08a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f08e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f092:	e696      	b.n	800edc2 <_strtod_l+0x72>
 800f094:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f096:	fb08 2101 	mla	r1, r8, r1, r2
 800f09a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f09e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0a0:	e7b5      	b.n	800f00e <_strtod_l+0x2be>
 800f0a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800f0a4:	e7da      	b.n	800f05c <_strtod_l+0x30c>
 800f0a6:	498b      	ldr	r1, [pc, #556]	@ (800f2d4 <_strtod_l+0x584>)
 800f0a8:	a819      	add	r0, sp, #100	@ 0x64
 800f0aa:	f001 f9b9 	bl	8010420 <__match>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	f43f aea2 	beq.w	800edf8 <_strtod_l+0xa8>
 800f0b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0b6:	a819      	add	r0, sp, #100	@ 0x64
 800f0b8:	4987      	ldr	r1, [pc, #540]	@ (800f2d8 <_strtod_l+0x588>)
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800f0be:	f001 f9af 	bl	8010420 <__match>
 800f0c2:	b910      	cbnz	r0, 800f0ca <_strtod_l+0x37a>
 800f0c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f0ca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f2e8 <_strtod_l+0x598>
 800f0ce:	f04f 0a00 	mov.w	sl, #0
 800f0d2:	e676      	b.n	800edc2 <_strtod_l+0x72>
 800f0d4:	4881      	ldr	r0, [pc, #516]	@ (800f2dc <_strtod_l+0x58c>)
 800f0d6:	f000 fee3 	bl	800fea0 <nan>
 800f0da:	ec5b ab10 	vmov	sl, fp, d0
 800f0de:	e670      	b.n	800edc2 <_strtod_l+0x72>
 800f0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0e2:	f1b9 0f00 	cmp.w	r9, #0
 800f0e6:	bf08      	it	eq
 800f0e8:	46a9      	moveq	r9, r5
 800f0ea:	2d10      	cmp	r5, #16
 800f0ec:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f0ee:	eba8 0303 	sub.w	r3, r8, r3
 800f0f2:	462c      	mov	r4, r5
 800f0f4:	bfa8      	it	ge
 800f0f6:	2410      	movge	r4, #16
 800f0f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0fa:	f7f1 fa07 	bl	800050c <__aeabi_ui2d>
 800f0fe:	2d09      	cmp	r5, #9
 800f100:	4682      	mov	sl, r0
 800f102:	468b      	mov	fp, r1
 800f104:	dc13      	bgt.n	800f12e <_strtod_l+0x3de>
 800f106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f43f ae5a 	beq.w	800edc2 <_strtod_l+0x72>
 800f10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f110:	dd78      	ble.n	800f204 <_strtod_l+0x4b4>
 800f112:	2b16      	cmp	r3, #22
 800f114:	dc5f      	bgt.n	800f1d6 <_strtod_l+0x486>
 800f116:	4972      	ldr	r1, [pc, #456]	@ (800f2e0 <_strtod_l+0x590>)
 800f118:	4652      	mov	r2, sl
 800f11a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f11e:	465b      	mov	r3, fp
 800f120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f124:	f7f1 fa6c 	bl	8000600 <__aeabi_dmul>
 800f128:	4682      	mov	sl, r0
 800f12a:	468b      	mov	fp, r1
 800f12c:	e649      	b.n	800edc2 <_strtod_l+0x72>
 800f12e:	4b6c      	ldr	r3, [pc, #432]	@ (800f2e0 <_strtod_l+0x590>)
 800f130:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f134:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f138:	f7f1 fa62 	bl	8000600 <__aeabi_dmul>
 800f13c:	4682      	mov	sl, r0
 800f13e:	468b      	mov	fp, r1
 800f140:	4638      	mov	r0, r7
 800f142:	f7f1 f9e3 	bl	800050c <__aeabi_ui2d>
 800f146:	4602      	mov	r2, r0
 800f148:	460b      	mov	r3, r1
 800f14a:	4650      	mov	r0, sl
 800f14c:	4659      	mov	r1, fp
 800f14e:	f7f1 f8a1 	bl	8000294 <__adddf3>
 800f152:	2d0f      	cmp	r5, #15
 800f154:	4682      	mov	sl, r0
 800f156:	468b      	mov	fp, r1
 800f158:	ddd5      	ble.n	800f106 <_strtod_l+0x3b6>
 800f15a:	1b2c      	subs	r4, r5, r4
 800f15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f15e:	441c      	add	r4, r3
 800f160:	2c00      	cmp	r4, #0
 800f162:	f340 8093 	ble.w	800f28c <_strtod_l+0x53c>
 800f166:	f014 030f 	ands.w	r3, r4, #15
 800f16a:	d00a      	beq.n	800f182 <_strtod_l+0x432>
 800f16c:	495c      	ldr	r1, [pc, #368]	@ (800f2e0 <_strtod_l+0x590>)
 800f16e:	4652      	mov	r2, sl
 800f170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f174:	465b      	mov	r3, fp
 800f176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17a:	f7f1 fa41 	bl	8000600 <__aeabi_dmul>
 800f17e:	4682      	mov	sl, r0
 800f180:	468b      	mov	fp, r1
 800f182:	f034 040f 	bics.w	r4, r4, #15
 800f186:	d073      	beq.n	800f270 <_strtod_l+0x520>
 800f188:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f18c:	dd49      	ble.n	800f222 <_strtod_l+0x4d2>
 800f18e:	2400      	movs	r4, #0
 800f190:	46a0      	mov	r8, r4
 800f192:	46a1      	mov	r9, r4
 800f194:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f196:	2322      	movs	r3, #34	@ 0x22
 800f198:	9a05      	ldr	r2, [sp, #20]
 800f19a:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f2e8 <_strtod_l+0x598>
 800f19e:	f04f 0a00 	mov.w	sl, #0
 800f1a2:	6013      	str	r3, [r2, #0]
 800f1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f43f ae0b 	beq.w	800edc2 <_strtod_l+0x72>
 800f1ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1ae:	9805      	ldr	r0, [sp, #20]
 800f1b0:	f7ff f938 	bl	800e424 <_Bfree>
 800f1b4:	4649      	mov	r1, r9
 800f1b6:	9805      	ldr	r0, [sp, #20]
 800f1b8:	f7ff f934 	bl	800e424 <_Bfree>
 800f1bc:	4641      	mov	r1, r8
 800f1be:	9805      	ldr	r0, [sp, #20]
 800f1c0:	f7ff f930 	bl	800e424 <_Bfree>
 800f1c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1c6:	9805      	ldr	r0, [sp, #20]
 800f1c8:	f7ff f92c 	bl	800e424 <_Bfree>
 800f1cc:	4621      	mov	r1, r4
 800f1ce:	9805      	ldr	r0, [sp, #20]
 800f1d0:	f7ff f928 	bl	800e424 <_Bfree>
 800f1d4:	e5f5      	b.n	800edc2 <_strtod_l+0x72>
 800f1d6:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f1da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	dbbc      	blt.n	800f15a <_strtod_l+0x40a>
 800f1e0:	f1c5 050f 	rsb	r5, r5, #15
 800f1e4:	4c3e      	ldr	r4, [pc, #248]	@ (800f2e0 <_strtod_l+0x590>)
 800f1e6:	4652      	mov	r2, sl
 800f1e8:	465b      	mov	r3, fp
 800f1ea:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1f2:	f7f1 fa05 	bl	8000600 <__aeabi_dmul>
 800f1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f8:	1b5d      	subs	r5, r3, r5
 800f1fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f1fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f202:	e78f      	b.n	800f124 <_strtod_l+0x3d4>
 800f204:	3316      	adds	r3, #22
 800f206:	dba8      	blt.n	800f15a <_strtod_l+0x40a>
 800f208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f20a:	4650      	mov	r0, sl
 800f20c:	4659      	mov	r1, fp
 800f20e:	eba3 0808 	sub.w	r8, r3, r8
 800f212:	4b33      	ldr	r3, [pc, #204]	@ (800f2e0 <_strtod_l+0x590>)
 800f214:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f218:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f21c:	f7f1 fb1a 	bl	8000854 <__aeabi_ddiv>
 800f220:	e782      	b.n	800f128 <_strtod_l+0x3d8>
 800f222:	2300      	movs	r3, #0
 800f224:	1124      	asrs	r4, r4, #4
 800f226:	4650      	mov	r0, sl
 800f228:	4659      	mov	r1, fp
 800f22a:	4f2e      	ldr	r7, [pc, #184]	@ (800f2e4 <_strtod_l+0x594>)
 800f22c:	461e      	mov	r6, r3
 800f22e:	2c01      	cmp	r4, #1
 800f230:	dc21      	bgt.n	800f276 <_strtod_l+0x526>
 800f232:	b10b      	cbz	r3, 800f238 <_strtod_l+0x4e8>
 800f234:	4682      	mov	sl, r0
 800f236:	468b      	mov	fp, r1
 800f238:	492a      	ldr	r1, [pc, #168]	@ (800f2e4 <_strtod_l+0x594>)
 800f23a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f23e:	4652      	mov	r2, sl
 800f240:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f244:	465b      	mov	r3, fp
 800f246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f24a:	f7f1 f9d9 	bl	8000600 <__aeabi_dmul>
 800f24e:	4b26      	ldr	r3, [pc, #152]	@ (800f2e8 <_strtod_l+0x598>)
 800f250:	460a      	mov	r2, r1
 800f252:	4682      	mov	sl, r0
 800f254:	400b      	ands	r3, r1
 800f256:	4925      	ldr	r1, [pc, #148]	@ (800f2ec <_strtod_l+0x59c>)
 800f258:	428b      	cmp	r3, r1
 800f25a:	d898      	bhi.n	800f18e <_strtod_l+0x43e>
 800f25c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f260:	428b      	cmp	r3, r1
 800f262:	bf86      	itte	hi
 800f264:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f2f0 <_strtod_l+0x5a0>
 800f268:	f04f 3aff 	movhi.w	sl, #4294967295
 800f26c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f270:	2300      	movs	r3, #0
 800f272:	9308      	str	r3, [sp, #32]
 800f274:	e076      	b.n	800f364 <_strtod_l+0x614>
 800f276:	07e2      	lsls	r2, r4, #31
 800f278:	d504      	bpl.n	800f284 <_strtod_l+0x534>
 800f27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f27e:	f7f1 f9bf 	bl	8000600 <__aeabi_dmul>
 800f282:	2301      	movs	r3, #1
 800f284:	3601      	adds	r6, #1
 800f286:	1064      	asrs	r4, r4, #1
 800f288:	3708      	adds	r7, #8
 800f28a:	e7d0      	b.n	800f22e <_strtod_l+0x4de>
 800f28c:	d0f0      	beq.n	800f270 <_strtod_l+0x520>
 800f28e:	4264      	negs	r4, r4
 800f290:	f014 020f 	ands.w	r2, r4, #15
 800f294:	d00a      	beq.n	800f2ac <_strtod_l+0x55c>
 800f296:	4b12      	ldr	r3, [pc, #72]	@ (800f2e0 <_strtod_l+0x590>)
 800f298:	4650      	mov	r0, sl
 800f29a:	4659      	mov	r1, fp
 800f29c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a4:	f7f1 fad6 	bl	8000854 <__aeabi_ddiv>
 800f2a8:	4682      	mov	sl, r0
 800f2aa:	468b      	mov	fp, r1
 800f2ac:	1124      	asrs	r4, r4, #4
 800f2ae:	d0df      	beq.n	800f270 <_strtod_l+0x520>
 800f2b0:	2c1f      	cmp	r4, #31
 800f2b2:	dd1f      	ble.n	800f2f4 <_strtod_l+0x5a4>
 800f2b4:	2400      	movs	r4, #0
 800f2b6:	46a0      	mov	r8, r4
 800f2b8:	46a1      	mov	r9, r4
 800f2ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f2bc:	2322      	movs	r3, #34	@ 0x22
 800f2be:	9a05      	ldr	r2, [sp, #20]
 800f2c0:	f04f 0a00 	mov.w	sl, #0
 800f2c4:	f04f 0b00 	mov.w	fp, #0
 800f2c8:	6013      	str	r3, [r2, #0]
 800f2ca:	e76b      	b.n	800f1a4 <_strtod_l+0x454>
 800f2cc:	0802e471 	.word	0x0802e471
 800f2d0:	0802e738 	.word	0x0802e738
 800f2d4:	0802e469 	.word	0x0802e469
 800f2d8:	0802e4a0 	.word	0x0802e4a0
 800f2dc:	0802e5d9 	.word	0x0802e5d9
 800f2e0:	0802e670 	.word	0x0802e670
 800f2e4:	0802e648 	.word	0x0802e648
 800f2e8:	7ff00000 	.word	0x7ff00000
 800f2ec:	7ca00000 	.word	0x7ca00000
 800f2f0:	7fefffff 	.word	0x7fefffff
 800f2f4:	f014 0310 	ands.w	r3, r4, #16
 800f2f8:	4650      	mov	r0, sl
 800f2fa:	4659      	mov	r1, fp
 800f2fc:	4ea9      	ldr	r6, [pc, #676]	@ (800f5a4 <_strtod_l+0x854>)
 800f2fe:	bf18      	it	ne
 800f300:	236a      	movne	r3, #106	@ 0x6a
 800f302:	9308      	str	r3, [sp, #32]
 800f304:	2300      	movs	r3, #0
 800f306:	07e7      	lsls	r7, r4, #31
 800f308:	d504      	bpl.n	800f314 <_strtod_l+0x5c4>
 800f30a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f30e:	f7f1 f977 	bl	8000600 <__aeabi_dmul>
 800f312:	2301      	movs	r3, #1
 800f314:	1064      	asrs	r4, r4, #1
 800f316:	f106 0608 	add.w	r6, r6, #8
 800f31a:	d1f4      	bne.n	800f306 <_strtod_l+0x5b6>
 800f31c:	b10b      	cbz	r3, 800f322 <_strtod_l+0x5d2>
 800f31e:	4682      	mov	sl, r0
 800f320:	468b      	mov	fp, r1
 800f322:	9b08      	ldr	r3, [sp, #32]
 800f324:	b1b3      	cbz	r3, 800f354 <_strtod_l+0x604>
 800f326:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f32a:	4659      	mov	r1, fp
 800f32c:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f330:	2b00      	cmp	r3, #0
 800f332:	dd0f      	ble.n	800f354 <_strtod_l+0x604>
 800f334:	2b1f      	cmp	r3, #31
 800f336:	dd56      	ble.n	800f3e6 <_strtod_l+0x696>
 800f338:	2b34      	cmp	r3, #52	@ 0x34
 800f33a:	f04f 0a00 	mov.w	sl, #0
 800f33e:	bfdb      	ittet	le
 800f340:	f04f 33ff 	movle.w	r3, #4294967295
 800f344:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f348:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f34c:	4093      	lslle	r3, r2
 800f34e:	bfd8      	it	le
 800f350:	ea03 0b01 	andle.w	fp, r3, r1
 800f354:	2200      	movs	r2, #0
 800f356:	2300      	movs	r3, #0
 800f358:	4650      	mov	r0, sl
 800f35a:	4659      	mov	r1, fp
 800f35c:	f7f1 fbb8 	bl	8000ad0 <__aeabi_dcmpeq>
 800f360:	2800      	cmp	r0, #0
 800f362:	d1a7      	bne.n	800f2b4 <_strtod_l+0x564>
 800f364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f366:	464a      	mov	r2, r9
 800f368:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	462b      	mov	r3, r5
 800f36e:	9805      	ldr	r0, [sp, #20]
 800f370:	f7ff f8c2 	bl	800e4f8 <__s2b>
 800f374:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f376:	2800      	cmp	r0, #0
 800f378:	f43f af09 	beq.w	800f18e <_strtod_l+0x43e>
 800f37c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f37e:	2400      	movs	r4, #0
 800f380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f382:	2a00      	cmp	r2, #0
 800f384:	eba3 0308 	sub.w	r3, r3, r8
 800f388:	46a0      	mov	r8, r4
 800f38a:	bfa8      	it	ge
 800f38c:	2300      	movge	r3, #0
 800f38e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f390:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f394:	9316      	str	r3, [sp, #88]	@ 0x58
 800f396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f398:	9805      	ldr	r0, [sp, #20]
 800f39a:	6859      	ldr	r1, [r3, #4]
 800f39c:	f7ff f802 	bl	800e3a4 <_Balloc>
 800f3a0:	4681      	mov	r9, r0
 800f3a2:	2800      	cmp	r0, #0
 800f3a4:	f43f aef7 	beq.w	800f196 <_strtod_l+0x446>
 800f3a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3aa:	300c      	adds	r0, #12
 800f3ac:	691a      	ldr	r2, [r3, #16]
 800f3ae:	f103 010c 	add.w	r1, r3, #12
 800f3b2:	3202      	adds	r2, #2
 800f3b4:	0092      	lsls	r2, r2, #2
 800f3b6:	f7fe f882 	bl	800d4be <memcpy>
 800f3ba:	aa1c      	add	r2, sp, #112	@ 0x70
 800f3bc:	a91b      	add	r1, sp, #108	@ 0x6c
 800f3be:	9805      	ldr	r0, [sp, #20]
 800f3c0:	ec4b ab10 	vmov	d0, sl, fp
 800f3c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f3c8:	f7ff fbd4 	bl	800eb74 <__d2b>
 800f3cc:	901a      	str	r0, [sp, #104]	@ 0x68
 800f3ce:	2800      	cmp	r0, #0
 800f3d0:	f43f aee1 	beq.w	800f196 <_strtod_l+0x446>
 800f3d4:	2101      	movs	r1, #1
 800f3d6:	9805      	ldr	r0, [sp, #20]
 800f3d8:	f7ff f924 	bl	800e624 <__i2b>
 800f3dc:	4680      	mov	r8, r0
 800f3de:	b948      	cbnz	r0, 800f3f4 <_strtod_l+0x6a4>
 800f3e0:	f04f 0800 	mov.w	r8, #0
 800f3e4:	e6d7      	b.n	800f196 <_strtod_l+0x446>
 800f3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ee:	ea03 0a0a 	and.w	sl, r3, sl
 800f3f2:	e7af      	b.n	800f354 <_strtod_l+0x604>
 800f3f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f3f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f3f8:	2d00      	cmp	r5, #0
 800f3fa:	bfa9      	itett	ge
 800f3fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f3fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f400:	18ef      	addge	r7, r5, r3
 800f402:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f404:	bfb8      	it	lt
 800f406:	1b5e      	sublt	r6, r3, r5
 800f408:	9b08      	ldr	r3, [sp, #32]
 800f40a:	bfb8      	it	lt
 800f40c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f40e:	1aed      	subs	r5, r5, r3
 800f410:	4b65      	ldr	r3, [pc, #404]	@ (800f5a8 <_strtod_l+0x858>)
 800f412:	4415      	add	r5, r2
 800f414:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f418:	3d01      	subs	r5, #1
 800f41a:	429d      	cmp	r5, r3
 800f41c:	da4f      	bge.n	800f4be <_strtod_l+0x76e>
 800f41e:	1b5b      	subs	r3, r3, r5
 800f420:	2101      	movs	r1, #1
 800f422:	2b1f      	cmp	r3, #31
 800f424:	eba2 0203 	sub.w	r2, r2, r3
 800f428:	dc3d      	bgt.n	800f4a6 <_strtod_l+0x756>
 800f42a:	fa01 f303 	lsl.w	r3, r1, r3
 800f42e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f430:	2300      	movs	r3, #0
 800f432:	9310      	str	r3, [sp, #64]	@ 0x40
 800f434:	18bd      	adds	r5, r7, r2
 800f436:	9b08      	ldr	r3, [sp, #32]
 800f438:	4416      	add	r6, r2
 800f43a:	42af      	cmp	r7, r5
 800f43c:	441e      	add	r6, r3
 800f43e:	463b      	mov	r3, r7
 800f440:	bfa8      	it	ge
 800f442:	462b      	movge	r3, r5
 800f444:	42b3      	cmp	r3, r6
 800f446:	bfa8      	it	ge
 800f448:	4633      	movge	r3, r6
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	bfc2      	ittt	gt
 800f44e:	1aed      	subgt	r5, r5, r3
 800f450:	1af6      	subgt	r6, r6, r3
 800f452:	1aff      	subgt	r7, r7, r3
 800f454:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f456:	2b00      	cmp	r3, #0
 800f458:	dd16      	ble.n	800f488 <_strtod_l+0x738>
 800f45a:	4641      	mov	r1, r8
 800f45c:	461a      	mov	r2, r3
 800f45e:	9805      	ldr	r0, [sp, #20]
 800f460:	f7ff f99a 	bl	800e798 <__pow5mult>
 800f464:	4680      	mov	r8, r0
 800f466:	2800      	cmp	r0, #0
 800f468:	d0ba      	beq.n	800f3e0 <_strtod_l+0x690>
 800f46a:	4601      	mov	r1, r0
 800f46c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f46e:	9805      	ldr	r0, [sp, #20]
 800f470:	f7ff f8ee 	bl	800e650 <__multiply>
 800f474:	900a      	str	r0, [sp, #40]	@ 0x28
 800f476:	2800      	cmp	r0, #0
 800f478:	f43f ae8d 	beq.w	800f196 <_strtod_l+0x446>
 800f47c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f47e:	9805      	ldr	r0, [sp, #20]
 800f480:	f7fe ffd0 	bl	800e424 <_Bfree>
 800f484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f486:	931a      	str	r3, [sp, #104]	@ 0x68
 800f488:	2d00      	cmp	r5, #0
 800f48a:	dc1d      	bgt.n	800f4c8 <_strtod_l+0x778>
 800f48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f48e:	2b00      	cmp	r3, #0
 800f490:	dd23      	ble.n	800f4da <_strtod_l+0x78a>
 800f492:	4649      	mov	r1, r9
 800f494:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f496:	9805      	ldr	r0, [sp, #20]
 800f498:	f7ff f97e 	bl	800e798 <__pow5mult>
 800f49c:	4681      	mov	r9, r0
 800f49e:	b9e0      	cbnz	r0, 800f4da <_strtod_l+0x78a>
 800f4a0:	f04f 0900 	mov.w	r9, #0
 800f4a4:	e677      	b.n	800f196 <_strtod_l+0x446>
 800f4a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f4aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f4ac:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f4b0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f4b4:	35e2      	adds	r5, #226	@ 0xe2
 800f4b6:	fa01 f305 	lsl.w	r3, r1, r5
 800f4ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800f4bc:	e7ba      	b.n	800f434 <_strtod_l+0x6e4>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f4c6:	e7b5      	b.n	800f434 <_strtod_l+0x6e4>
 800f4c8:	462a      	mov	r2, r5
 800f4ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f4cc:	9805      	ldr	r0, [sp, #20]
 800f4ce:	f7ff f9bd 	bl	800e84c <__lshift>
 800f4d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	d1d9      	bne.n	800f48c <_strtod_l+0x73c>
 800f4d8:	e65d      	b.n	800f196 <_strtod_l+0x446>
 800f4da:	2e00      	cmp	r6, #0
 800f4dc:	dd07      	ble.n	800f4ee <_strtod_l+0x79e>
 800f4de:	4649      	mov	r1, r9
 800f4e0:	4632      	mov	r2, r6
 800f4e2:	9805      	ldr	r0, [sp, #20]
 800f4e4:	f7ff f9b2 	bl	800e84c <__lshift>
 800f4e8:	4681      	mov	r9, r0
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d0d8      	beq.n	800f4a0 <_strtod_l+0x750>
 800f4ee:	2f00      	cmp	r7, #0
 800f4f0:	dd08      	ble.n	800f504 <_strtod_l+0x7b4>
 800f4f2:	4641      	mov	r1, r8
 800f4f4:	463a      	mov	r2, r7
 800f4f6:	9805      	ldr	r0, [sp, #20]
 800f4f8:	f7ff f9a8 	bl	800e84c <__lshift>
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	2800      	cmp	r0, #0
 800f500:	f43f ae49 	beq.w	800f196 <_strtod_l+0x446>
 800f504:	464a      	mov	r2, r9
 800f506:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f508:	9805      	ldr	r0, [sp, #20]
 800f50a:	f7ff fa27 	bl	800e95c <__mdiff>
 800f50e:	4604      	mov	r4, r0
 800f510:	2800      	cmp	r0, #0
 800f512:	f43f ae40 	beq.w	800f196 <_strtod_l+0x446>
 800f516:	68c3      	ldr	r3, [r0, #12]
 800f518:	4641      	mov	r1, r8
 800f51a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f51c:	2300      	movs	r3, #0
 800f51e:	60c3      	str	r3, [r0, #12]
 800f520:	f7ff fa00 	bl	800e924 <__mcmp>
 800f524:	2800      	cmp	r0, #0
 800f526:	da45      	bge.n	800f5b4 <_strtod_l+0x864>
 800f528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f52a:	ea53 030a 	orrs.w	r3, r3, sl
 800f52e:	d16b      	bne.n	800f608 <_strtod_l+0x8b8>
 800f530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f534:	2b00      	cmp	r3, #0
 800f536:	d167      	bne.n	800f608 <_strtod_l+0x8b8>
 800f538:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f53c:	0d1b      	lsrs	r3, r3, #20
 800f53e:	051b      	lsls	r3, r3, #20
 800f540:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f544:	d960      	bls.n	800f608 <_strtod_l+0x8b8>
 800f546:	6963      	ldr	r3, [r4, #20]
 800f548:	b913      	cbnz	r3, 800f550 <_strtod_l+0x800>
 800f54a:	6923      	ldr	r3, [r4, #16]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	dd5b      	ble.n	800f608 <_strtod_l+0x8b8>
 800f550:	4621      	mov	r1, r4
 800f552:	2201      	movs	r2, #1
 800f554:	9805      	ldr	r0, [sp, #20]
 800f556:	f7ff f979 	bl	800e84c <__lshift>
 800f55a:	4641      	mov	r1, r8
 800f55c:	4604      	mov	r4, r0
 800f55e:	f7ff f9e1 	bl	800e924 <__mcmp>
 800f562:	2800      	cmp	r0, #0
 800f564:	dd50      	ble.n	800f608 <_strtod_l+0x8b8>
 800f566:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f56a:	9a08      	ldr	r2, [sp, #32]
 800f56c:	0d1b      	lsrs	r3, r3, #20
 800f56e:	051b      	lsls	r3, r3, #20
 800f570:	2a00      	cmp	r2, #0
 800f572:	d06a      	beq.n	800f64a <_strtod_l+0x8fa>
 800f574:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f578:	d867      	bhi.n	800f64a <_strtod_l+0x8fa>
 800f57a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f57e:	f67f ae9d 	bls.w	800f2bc <_strtod_l+0x56c>
 800f582:	4b0a      	ldr	r3, [pc, #40]	@ (800f5ac <_strtod_l+0x85c>)
 800f584:	4650      	mov	r0, sl
 800f586:	4659      	mov	r1, fp
 800f588:	2200      	movs	r2, #0
 800f58a:	f7f1 f839 	bl	8000600 <__aeabi_dmul>
 800f58e:	4b08      	ldr	r3, [pc, #32]	@ (800f5b0 <_strtod_l+0x860>)
 800f590:	4682      	mov	sl, r0
 800f592:	468b      	mov	fp, r1
 800f594:	400b      	ands	r3, r1
 800f596:	2b00      	cmp	r3, #0
 800f598:	f47f ae08 	bne.w	800f1ac <_strtod_l+0x45c>
 800f59c:	2322      	movs	r3, #34	@ 0x22
 800f59e:	9a05      	ldr	r2, [sp, #20]
 800f5a0:	6013      	str	r3, [r2, #0]
 800f5a2:	e603      	b.n	800f1ac <_strtod_l+0x45c>
 800f5a4:	0802e760 	.word	0x0802e760
 800f5a8:	fffffc02 	.word	0xfffffc02
 800f5ac:	39500000 	.word	0x39500000
 800f5b0:	7ff00000 	.word	0x7ff00000
 800f5b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f5b8:	d165      	bne.n	800f686 <_strtod_l+0x936>
 800f5ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f5bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5c0:	b35a      	cbz	r2, 800f61a <_strtod_l+0x8ca>
 800f5c2:	4a9f      	ldr	r2, [pc, #636]	@ (800f840 <_strtod_l+0xaf0>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d12b      	bne.n	800f620 <_strtod_l+0x8d0>
 800f5c8:	9b08      	ldr	r3, [sp, #32]
 800f5ca:	4651      	mov	r1, sl
 800f5cc:	b303      	cbz	r3, 800f610 <_strtod_l+0x8c0>
 800f5ce:	465a      	mov	r2, fp
 800f5d0:	4b9c      	ldr	r3, [pc, #624]	@ (800f844 <_strtod_l+0xaf4>)
 800f5d2:	4013      	ands	r3, r2
 800f5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d8:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f5dc:	d81b      	bhi.n	800f616 <_strtod_l+0x8c6>
 800f5de:	0d1b      	lsrs	r3, r3, #20
 800f5e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f5e8:	4299      	cmp	r1, r3
 800f5ea:	d119      	bne.n	800f620 <_strtod_l+0x8d0>
 800f5ec:	4b96      	ldr	r3, [pc, #600]	@ (800f848 <_strtod_l+0xaf8>)
 800f5ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d102      	bne.n	800f5fa <_strtod_l+0x8aa>
 800f5f4:	3101      	adds	r1, #1
 800f5f6:	f43f adce 	beq.w	800f196 <_strtod_l+0x446>
 800f5fa:	4b92      	ldr	r3, [pc, #584]	@ (800f844 <_strtod_l+0xaf4>)
 800f5fc:	f04f 0a00 	mov.w	sl, #0
 800f600:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f602:	401a      	ands	r2, r3
 800f604:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f608:	9b08      	ldr	r3, [sp, #32]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d1b9      	bne.n	800f582 <_strtod_l+0x832>
 800f60e:	e5cd      	b.n	800f1ac <_strtod_l+0x45c>
 800f610:	f04f 33ff 	mov.w	r3, #4294967295
 800f614:	e7e8      	b.n	800f5e8 <_strtod_l+0x898>
 800f616:	4613      	mov	r3, r2
 800f618:	e7e6      	b.n	800f5e8 <_strtod_l+0x898>
 800f61a:	ea53 030a 	orrs.w	r3, r3, sl
 800f61e:	d0a2      	beq.n	800f566 <_strtod_l+0x816>
 800f620:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f622:	b1db      	cbz	r3, 800f65c <_strtod_l+0x90c>
 800f624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f626:	4213      	tst	r3, r2
 800f628:	d0ee      	beq.n	800f608 <_strtod_l+0x8b8>
 800f62a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f62c:	4650      	mov	r0, sl
 800f62e:	9a08      	ldr	r2, [sp, #32]
 800f630:	4659      	mov	r1, fp
 800f632:	b1bb      	cbz	r3, 800f664 <_strtod_l+0x914>
 800f634:	f7ff fb6c 	bl	800ed10 <sulp>
 800f638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f63c:	ec53 2b10 	vmov	r2, r3, d0
 800f640:	f7f0 fe28 	bl	8000294 <__adddf3>
 800f644:	4682      	mov	sl, r0
 800f646:	468b      	mov	fp, r1
 800f648:	e7de      	b.n	800f608 <_strtod_l+0x8b8>
 800f64a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f64e:	f04f 3aff 	mov.w	sl, #4294967295
 800f652:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f656:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f65a:	e7d5      	b.n	800f608 <_strtod_l+0x8b8>
 800f65c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f65e:	ea13 0f0a 	tst.w	r3, sl
 800f662:	e7e1      	b.n	800f628 <_strtod_l+0x8d8>
 800f664:	f7ff fb54 	bl	800ed10 <sulp>
 800f668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f66c:	ec53 2b10 	vmov	r2, r3, d0
 800f670:	f7f0 fe0e 	bl	8000290 <__aeabi_dsub>
 800f674:	2200      	movs	r2, #0
 800f676:	2300      	movs	r3, #0
 800f678:	4682      	mov	sl, r0
 800f67a:	468b      	mov	fp, r1
 800f67c:	f7f1 fa28 	bl	8000ad0 <__aeabi_dcmpeq>
 800f680:	2800      	cmp	r0, #0
 800f682:	d0c1      	beq.n	800f608 <_strtod_l+0x8b8>
 800f684:	e61a      	b.n	800f2bc <_strtod_l+0x56c>
 800f686:	4641      	mov	r1, r8
 800f688:	4620      	mov	r0, r4
 800f68a:	f7ff facb 	bl	800ec24 <__ratio>
 800f68e:	2200      	movs	r2, #0
 800f690:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f694:	ec57 6b10 	vmov	r6, r7, d0
 800f698:	4630      	mov	r0, r6
 800f69a:	4639      	mov	r1, r7
 800f69c:	f7f1 fa2c 	bl	8000af8 <__aeabi_dcmple>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d06f      	beq.n	800f784 <_strtod_l+0xa34>
 800f6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d17a      	bne.n	800f7a0 <_strtod_l+0xa50>
 800f6aa:	f1ba 0f00 	cmp.w	sl, #0
 800f6ae:	d158      	bne.n	800f762 <_strtod_l+0xa12>
 800f6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d15a      	bne.n	800f770 <_strtod_l+0xa20>
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	4b63      	ldr	r3, [pc, #396]	@ (800f84c <_strtod_l+0xafc>)
 800f6be:	4630      	mov	r0, r6
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f7f1 fa0f 	bl	8000ae4 <__aeabi_dcmplt>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d159      	bne.n	800f77e <_strtod_l+0xa2e>
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	4639      	mov	r1, r7
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	4b5f      	ldr	r3, [pc, #380]	@ (800f850 <_strtod_l+0xb00>)
 800f6d2:	f7f0 ff95 	bl	8000600 <__aeabi_dmul>
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	460f      	mov	r7, r1
 800f6da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f6de:	9606      	str	r6, [sp, #24]
 800f6e0:	9307      	str	r3, [sp, #28]
 800f6e2:	4d58      	ldr	r5, [pc, #352]	@ (800f844 <_strtod_l+0xaf4>)
 800f6e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6ee:	401d      	ands	r5, r3
 800f6f0:	4b58      	ldr	r3, [pc, #352]	@ (800f854 <_strtod_l+0xb04>)
 800f6f2:	429d      	cmp	r5, r3
 800f6f4:	f040 80b2 	bne.w	800f85c <_strtod_l+0xb0c>
 800f6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f6fe:	ec4b ab10 	vmov	d0, sl, fp
 800f702:	f7ff f9c3 	bl	800ea8c <__ulp>
 800f706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f70a:	ec51 0b10 	vmov	r0, r1, d0
 800f70e:	f7f0 ff77 	bl	8000600 <__aeabi_dmul>
 800f712:	4652      	mov	r2, sl
 800f714:	465b      	mov	r3, fp
 800f716:	f7f0 fdbd 	bl	8000294 <__adddf3>
 800f71a:	460b      	mov	r3, r1
 800f71c:	4949      	ldr	r1, [pc, #292]	@ (800f844 <_strtod_l+0xaf4>)
 800f71e:	4682      	mov	sl, r0
 800f720:	4a4d      	ldr	r2, [pc, #308]	@ (800f858 <_strtod_l+0xb08>)
 800f722:	4019      	ands	r1, r3
 800f724:	4291      	cmp	r1, r2
 800f726:	d942      	bls.n	800f7ae <_strtod_l+0xa5e>
 800f728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f72a:	4b47      	ldr	r3, [pc, #284]	@ (800f848 <_strtod_l+0xaf8>)
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d103      	bne.n	800f738 <_strtod_l+0x9e8>
 800f730:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f732:	3301      	adds	r3, #1
 800f734:	f43f ad2f 	beq.w	800f196 <_strtod_l+0x446>
 800f738:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f848 <_strtod_l+0xaf8>
 800f73c:	f04f 3aff 	mov.w	sl, #4294967295
 800f740:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f742:	9805      	ldr	r0, [sp, #20]
 800f744:	f7fe fe6e 	bl	800e424 <_Bfree>
 800f748:	4649      	mov	r1, r9
 800f74a:	9805      	ldr	r0, [sp, #20]
 800f74c:	f7fe fe6a 	bl	800e424 <_Bfree>
 800f750:	4641      	mov	r1, r8
 800f752:	9805      	ldr	r0, [sp, #20]
 800f754:	f7fe fe66 	bl	800e424 <_Bfree>
 800f758:	4621      	mov	r1, r4
 800f75a:	9805      	ldr	r0, [sp, #20]
 800f75c:	f7fe fe62 	bl	800e424 <_Bfree>
 800f760:	e619      	b.n	800f396 <_strtod_l+0x646>
 800f762:	f1ba 0f01 	cmp.w	sl, #1
 800f766:	d103      	bne.n	800f770 <_strtod_l+0xa20>
 800f768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f43f ada6 	beq.w	800f2bc <_strtod_l+0x56c>
 800f770:	2600      	movs	r6, #0
 800f772:	4f36      	ldr	r7, [pc, #216]	@ (800f84c <_strtod_l+0xafc>)
 800f774:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f820 <_strtod_l+0xad0>
 800f778:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f77c:	e7b1      	b.n	800f6e2 <_strtod_l+0x992>
 800f77e:	2600      	movs	r6, #0
 800f780:	4f33      	ldr	r7, [pc, #204]	@ (800f850 <_strtod_l+0xb00>)
 800f782:	e7aa      	b.n	800f6da <_strtod_l+0x98a>
 800f784:	4b32      	ldr	r3, [pc, #200]	@ (800f850 <_strtod_l+0xb00>)
 800f786:	4630      	mov	r0, r6
 800f788:	4639      	mov	r1, r7
 800f78a:	2200      	movs	r2, #0
 800f78c:	f7f0 ff38 	bl	8000600 <__aeabi_dmul>
 800f790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f792:	4606      	mov	r6, r0
 800f794:	460f      	mov	r7, r1
 800f796:	2b00      	cmp	r3, #0
 800f798:	d09f      	beq.n	800f6da <_strtod_l+0x98a>
 800f79a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f79e:	e7a0      	b.n	800f6e2 <_strtod_l+0x992>
 800f7a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f828 <_strtod_l+0xad8>
 800f7a4:	ec57 6b17 	vmov	r6, r7, d7
 800f7a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f7ac:	e799      	b.n	800f6e2 <_strtod_l+0x992>
 800f7ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f7b2:	9b08      	ldr	r3, [sp, #32]
 800f7b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d1c1      	bne.n	800f740 <_strtod_l+0x9f0>
 800f7bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f7c0:	0d1b      	lsrs	r3, r3, #20
 800f7c2:	051b      	lsls	r3, r3, #20
 800f7c4:	429d      	cmp	r5, r3
 800f7c6:	d1bb      	bne.n	800f740 <_strtod_l+0x9f0>
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	f7f1 fa78 	bl	8000cc0 <__aeabi_d2lz>
 800f7d0:	f7f0 fee8 	bl	80005a4 <__aeabi_l2d>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	4630      	mov	r0, r6
 800f7da:	4639      	mov	r1, r7
 800f7dc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f7e0:	f7f0 fd56 	bl	8000290 <__aeabi_dsub>
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	ea46 060a 	orr.w	r6, r6, sl
 800f7ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7f2:	431e      	orrs	r6, r3
 800f7f4:	d06f      	beq.n	800f8d6 <_strtod_l+0xb86>
 800f7f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f830 <_strtod_l+0xae0>)
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	f7f1 f972 	bl	8000ae4 <__aeabi_dcmplt>
 800f800:	2800      	cmp	r0, #0
 800f802:	f47f acd3 	bne.w	800f1ac <_strtod_l+0x45c>
 800f806:	a30c      	add	r3, pc, #48	@ (adr r3, 800f838 <_strtod_l+0xae8>)
 800f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f810:	f7f1 f986 	bl	8000b20 <__aeabi_dcmpgt>
 800f814:	2800      	cmp	r0, #0
 800f816:	d093      	beq.n	800f740 <_strtod_l+0x9f0>
 800f818:	e4c8      	b.n	800f1ac <_strtod_l+0x45c>
 800f81a:	bf00      	nop
 800f81c:	f3af 8000 	nop.w
 800f820:	00000000 	.word	0x00000000
 800f824:	bff00000 	.word	0xbff00000
 800f828:	00000000 	.word	0x00000000
 800f82c:	3ff00000 	.word	0x3ff00000
 800f830:	94a03595 	.word	0x94a03595
 800f834:	3fdfffff 	.word	0x3fdfffff
 800f838:	35afe535 	.word	0x35afe535
 800f83c:	3fe00000 	.word	0x3fe00000
 800f840:	000fffff 	.word	0x000fffff
 800f844:	7ff00000 	.word	0x7ff00000
 800f848:	7fefffff 	.word	0x7fefffff
 800f84c:	3ff00000 	.word	0x3ff00000
 800f850:	3fe00000 	.word	0x3fe00000
 800f854:	7fe00000 	.word	0x7fe00000
 800f858:	7c9fffff 	.word	0x7c9fffff
 800f85c:	9b08      	ldr	r3, [sp, #32]
 800f85e:	b323      	cbz	r3, 800f8aa <_strtod_l+0xb5a>
 800f860:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f864:	d821      	bhi.n	800f8aa <_strtod_l+0xb5a>
 800f866:	4630      	mov	r0, r6
 800f868:	4639      	mov	r1, r7
 800f86a:	a327      	add	r3, pc, #156	@ (adr r3, 800f908 <_strtod_l+0xbb8>)
 800f86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f870:	f7f1 f942 	bl	8000af8 <__aeabi_dcmple>
 800f874:	b1a0      	cbz	r0, 800f8a0 <_strtod_l+0xb50>
 800f876:	4639      	mov	r1, r7
 800f878:	4630      	mov	r0, r6
 800f87a:	f7f1 f999 	bl	8000bb0 <__aeabi_d2uiz>
 800f87e:	2801      	cmp	r0, #1
 800f880:	bf38      	it	cc
 800f882:	2001      	movcc	r0, #1
 800f884:	f7f0 fe42 	bl	800050c <__aeabi_ui2d>
 800f888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f88a:	4606      	mov	r6, r0
 800f88c:	460f      	mov	r7, r1
 800f88e:	b9fb      	cbnz	r3, 800f8d0 <_strtod_l+0xb80>
 800f890:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f894:	9014      	str	r0, [sp, #80]	@ 0x50
 800f896:	9315      	str	r3, [sp, #84]	@ 0x54
 800f898:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f89c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f8a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f8a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f8a6:	1b5b      	subs	r3, r3, r5
 800f8a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f8aa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f8ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f8b2:	f7ff f8eb 	bl	800ea8c <__ulp>
 800f8b6:	4650      	mov	r0, sl
 800f8b8:	4659      	mov	r1, fp
 800f8ba:	ec53 2b10 	vmov	r2, r3, d0
 800f8be:	f7f0 fe9f 	bl	8000600 <__aeabi_dmul>
 800f8c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f8c6:	f7f0 fce5 	bl	8000294 <__adddf3>
 800f8ca:	4682      	mov	sl, r0
 800f8cc:	468b      	mov	fp, r1
 800f8ce:	e770      	b.n	800f7b2 <_strtod_l+0xa62>
 800f8d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f8d4:	e7e0      	b.n	800f898 <_strtod_l+0xb48>
 800f8d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800f910 <_strtod_l+0xbc0>)
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	f7f1 f902 	bl	8000ae4 <__aeabi_dcmplt>
 800f8e0:	e798      	b.n	800f814 <_strtod_l+0xac4>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800f8e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8e8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	f7ff ba6d 	b.w	800edca <_strtod_l+0x7a>
 800f8f0:	2a65      	cmp	r2, #101	@ 0x65
 800f8f2:	f43f ab67 	beq.w	800efc4 <_strtod_l+0x274>
 800f8f6:	2a45      	cmp	r2, #69	@ 0x45
 800f8f8:	f43f ab64 	beq.w	800efc4 <_strtod_l+0x274>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	f7ff bba0 	b.w	800f042 <_strtod_l+0x2f2>
 800f902:	bf00      	nop
 800f904:	f3af 8000 	nop.w
 800f908:	ffc00000 	.word	0xffc00000
 800f90c:	41dfffff 	.word	0x41dfffff
 800f910:	94a03595 	.word	0x94a03595
 800f914:	3fcfffff 	.word	0x3fcfffff

0800f918 <_strtod_r>:
 800f918:	4b01      	ldr	r3, [pc, #4]	@ (800f920 <_strtod_r+0x8>)
 800f91a:	f7ff ba19 	b.w	800ed50 <_strtod_l>
 800f91e:	bf00      	nop
 800f920:	20000080 	.word	0x20000080

0800f924 <_strtol_l.isra.0>:
 800f924:	2b24      	cmp	r3, #36	@ 0x24
 800f926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f92a:	4686      	mov	lr, r0
 800f92c:	4690      	mov	r8, r2
 800f92e:	d801      	bhi.n	800f934 <_strtol_l.isra.0+0x10>
 800f930:	2b01      	cmp	r3, #1
 800f932:	d106      	bne.n	800f942 <_strtol_l.isra.0+0x1e>
 800f934:	f7fd fd88 	bl	800d448 <__errno>
 800f938:	2316      	movs	r3, #22
 800f93a:	6003      	str	r3, [r0, #0]
 800f93c:	2000      	movs	r0, #0
 800f93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f942:	460d      	mov	r5, r1
 800f944:	4833      	ldr	r0, [pc, #204]	@ (800fa14 <_strtol_l.isra.0+0xf0>)
 800f946:	462a      	mov	r2, r5
 800f948:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f94c:	5d06      	ldrb	r6, [r0, r4]
 800f94e:	f016 0608 	ands.w	r6, r6, #8
 800f952:	d1f8      	bne.n	800f946 <_strtol_l.isra.0+0x22>
 800f954:	2c2d      	cmp	r4, #45	@ 0x2d
 800f956:	d110      	bne.n	800f97a <_strtol_l.isra.0+0x56>
 800f958:	782c      	ldrb	r4, [r5, #0]
 800f95a:	2601      	movs	r6, #1
 800f95c:	1c95      	adds	r5, r2, #2
 800f95e:	f033 0210 	bics.w	r2, r3, #16
 800f962:	d115      	bne.n	800f990 <_strtol_l.isra.0+0x6c>
 800f964:	2c30      	cmp	r4, #48	@ 0x30
 800f966:	d10d      	bne.n	800f984 <_strtol_l.isra.0+0x60>
 800f968:	782a      	ldrb	r2, [r5, #0]
 800f96a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f96e:	2a58      	cmp	r2, #88	@ 0x58
 800f970:	d108      	bne.n	800f984 <_strtol_l.isra.0+0x60>
 800f972:	786c      	ldrb	r4, [r5, #1]
 800f974:	3502      	adds	r5, #2
 800f976:	2310      	movs	r3, #16
 800f978:	e00a      	b.n	800f990 <_strtol_l.isra.0+0x6c>
 800f97a:	2c2b      	cmp	r4, #43	@ 0x2b
 800f97c:	bf04      	itt	eq
 800f97e:	782c      	ldrbeq	r4, [r5, #0]
 800f980:	1c95      	addeq	r5, r2, #2
 800f982:	e7ec      	b.n	800f95e <_strtol_l.isra.0+0x3a>
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1f6      	bne.n	800f976 <_strtol_l.isra.0+0x52>
 800f988:	2c30      	cmp	r4, #48	@ 0x30
 800f98a:	bf14      	ite	ne
 800f98c:	230a      	movne	r3, #10
 800f98e:	2308      	moveq	r3, #8
 800f990:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f994:	2200      	movs	r2, #0
 800f996:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f99a:	4610      	mov	r0, r2
 800f99c:	fbbc f9f3 	udiv	r9, ip, r3
 800f9a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f9a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f9a8:	2f09      	cmp	r7, #9
 800f9aa:	d80f      	bhi.n	800f9cc <_strtol_l.isra.0+0xa8>
 800f9ac:	463c      	mov	r4, r7
 800f9ae:	42a3      	cmp	r3, r4
 800f9b0:	dd1b      	ble.n	800f9ea <_strtol_l.isra.0+0xc6>
 800f9b2:	1c57      	adds	r7, r2, #1
 800f9b4:	d007      	beq.n	800f9c6 <_strtol_l.isra.0+0xa2>
 800f9b6:	4581      	cmp	r9, r0
 800f9b8:	d314      	bcc.n	800f9e4 <_strtol_l.isra.0+0xc0>
 800f9ba:	d101      	bne.n	800f9c0 <_strtol_l.isra.0+0x9c>
 800f9bc:	45a2      	cmp	sl, r4
 800f9be:	db11      	blt.n	800f9e4 <_strtol_l.isra.0+0xc0>
 800f9c0:	fb00 4003 	mla	r0, r0, r3, r4
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9ca:	e7eb      	b.n	800f9a4 <_strtol_l.isra.0+0x80>
 800f9cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f9d0:	2f19      	cmp	r7, #25
 800f9d2:	d801      	bhi.n	800f9d8 <_strtol_l.isra.0+0xb4>
 800f9d4:	3c37      	subs	r4, #55	@ 0x37
 800f9d6:	e7ea      	b.n	800f9ae <_strtol_l.isra.0+0x8a>
 800f9d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f9dc:	2f19      	cmp	r7, #25
 800f9de:	d804      	bhi.n	800f9ea <_strtol_l.isra.0+0xc6>
 800f9e0:	3c57      	subs	r4, #87	@ 0x57
 800f9e2:	e7e4      	b.n	800f9ae <_strtol_l.isra.0+0x8a>
 800f9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e8:	e7ed      	b.n	800f9c6 <_strtol_l.isra.0+0xa2>
 800f9ea:	1c53      	adds	r3, r2, #1
 800f9ec:	d108      	bne.n	800fa00 <_strtol_l.isra.0+0xdc>
 800f9ee:	2322      	movs	r3, #34	@ 0x22
 800f9f0:	4660      	mov	r0, ip
 800f9f2:	f8ce 3000 	str.w	r3, [lr]
 800f9f6:	f1b8 0f00 	cmp.w	r8, #0
 800f9fa:	d0a0      	beq.n	800f93e <_strtol_l.isra.0+0x1a>
 800f9fc:	1e69      	subs	r1, r5, #1
 800f9fe:	e006      	b.n	800fa0e <_strtol_l.isra.0+0xea>
 800fa00:	b106      	cbz	r6, 800fa04 <_strtol_l.isra.0+0xe0>
 800fa02:	4240      	negs	r0, r0
 800fa04:	f1b8 0f00 	cmp.w	r8, #0
 800fa08:	d099      	beq.n	800f93e <_strtol_l.isra.0+0x1a>
 800fa0a:	2a00      	cmp	r2, #0
 800fa0c:	d1f6      	bne.n	800f9fc <_strtol_l.isra.0+0xd8>
 800fa0e:	f8c8 1000 	str.w	r1, [r8]
 800fa12:	e794      	b.n	800f93e <_strtol_l.isra.0+0x1a>
 800fa14:	0802e789 	.word	0x0802e789

0800fa18 <_strtol_r>:
 800fa18:	f7ff bf84 	b.w	800f924 <_strtol_l.isra.0>

0800fa1c <__ssputs_r>:
 800fa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa20:	461f      	mov	r7, r3
 800fa22:	688e      	ldr	r6, [r1, #8]
 800fa24:	4682      	mov	sl, r0
 800fa26:	460c      	mov	r4, r1
 800fa28:	42be      	cmp	r6, r7
 800fa2a:	4690      	mov	r8, r2
 800fa2c:	680b      	ldr	r3, [r1, #0]
 800fa2e:	d82d      	bhi.n	800fa8c <__ssputs_r+0x70>
 800fa30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fa38:	d026      	beq.n	800fa88 <__ssputs_r+0x6c>
 800fa3a:	6965      	ldr	r5, [r4, #20]
 800fa3c:	6909      	ldr	r1, [r1, #16]
 800fa3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa42:	eba3 0901 	sub.w	r9, r3, r1
 800fa46:	1c7b      	adds	r3, r7, #1
 800fa48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa4c:	444b      	add	r3, r9
 800fa4e:	106d      	asrs	r5, r5, #1
 800fa50:	429d      	cmp	r5, r3
 800fa52:	bf38      	it	cc
 800fa54:	461d      	movcc	r5, r3
 800fa56:	0553      	lsls	r3, r2, #21
 800fa58:	d527      	bpl.n	800faaa <__ssputs_r+0x8e>
 800fa5a:	4629      	mov	r1, r5
 800fa5c:	f7fe fc16 	bl	800e28c <_malloc_r>
 800fa60:	4606      	mov	r6, r0
 800fa62:	b360      	cbz	r0, 800fabe <__ssputs_r+0xa2>
 800fa64:	464a      	mov	r2, r9
 800fa66:	6921      	ldr	r1, [r4, #16]
 800fa68:	f7fd fd29 	bl	800d4be <memcpy>
 800fa6c:	89a3      	ldrh	r3, [r4, #12]
 800fa6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fa72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa76:	81a3      	strh	r3, [r4, #12]
 800fa78:	6126      	str	r6, [r4, #16]
 800fa7a:	444e      	add	r6, r9
 800fa7c:	6165      	str	r5, [r4, #20]
 800fa7e:	eba5 0509 	sub.w	r5, r5, r9
 800fa82:	6026      	str	r6, [r4, #0]
 800fa84:	463e      	mov	r6, r7
 800fa86:	60a5      	str	r5, [r4, #8]
 800fa88:	42be      	cmp	r6, r7
 800fa8a:	d900      	bls.n	800fa8e <__ssputs_r+0x72>
 800fa8c:	463e      	mov	r6, r7
 800fa8e:	4632      	mov	r2, r6
 800fa90:	4641      	mov	r1, r8
 800fa92:	6820      	ldr	r0, [r4, #0]
 800fa94:	f000 f9c6 	bl	800fe24 <memmove>
 800fa98:	68a3      	ldr	r3, [r4, #8]
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	1b9b      	subs	r3, r3, r6
 800fa9e:	60a3      	str	r3, [r4, #8]
 800faa0:	6823      	ldr	r3, [r4, #0]
 800faa2:	4433      	add	r3, r6
 800faa4:	6023      	str	r3, [r4, #0]
 800faa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faaa:	462a      	mov	r2, r5
 800faac:	f000 fd79 	bl	80105a2 <_realloc_r>
 800fab0:	4606      	mov	r6, r0
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d1e0      	bne.n	800fa78 <__ssputs_r+0x5c>
 800fab6:	6921      	ldr	r1, [r4, #16]
 800fab8:	4650      	mov	r0, sl
 800faba:	f7fe fb73 	bl	800e1a4 <_free_r>
 800fabe:	230c      	movs	r3, #12
 800fac0:	f04f 30ff 	mov.w	r0, #4294967295
 800fac4:	f8ca 3000 	str.w	r3, [sl]
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800face:	81a3      	strh	r3, [r4, #12]
 800fad0:	e7e9      	b.n	800faa6 <__ssputs_r+0x8a>
	...

0800fad4 <_svfiprintf_r>:
 800fad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad8:	4698      	mov	r8, r3
 800fada:	898b      	ldrh	r3, [r1, #12]
 800fadc:	b09d      	sub	sp, #116	@ 0x74
 800fade:	4607      	mov	r7, r0
 800fae0:	061b      	lsls	r3, r3, #24
 800fae2:	460d      	mov	r5, r1
 800fae4:	4614      	mov	r4, r2
 800fae6:	d510      	bpl.n	800fb0a <_svfiprintf_r+0x36>
 800fae8:	690b      	ldr	r3, [r1, #16]
 800faea:	b973      	cbnz	r3, 800fb0a <_svfiprintf_r+0x36>
 800faec:	2140      	movs	r1, #64	@ 0x40
 800faee:	f7fe fbcd 	bl	800e28c <_malloc_r>
 800faf2:	6028      	str	r0, [r5, #0]
 800faf4:	6128      	str	r0, [r5, #16]
 800faf6:	b930      	cbnz	r0, 800fb06 <_svfiprintf_r+0x32>
 800faf8:	230c      	movs	r3, #12
 800fafa:	603b      	str	r3, [r7, #0]
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295
 800fb00:	b01d      	add	sp, #116	@ 0x74
 800fb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb06:	2340      	movs	r3, #64	@ 0x40
 800fb08:	616b      	str	r3, [r5, #20]
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb10:	f04f 0901 	mov.w	r9, #1
 800fb14:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800fcb8 <_svfiprintf_r+0x1e4>
 800fb18:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb1a:	2320      	movs	r3, #32
 800fb1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb20:	2330      	movs	r3, #48	@ 0x30
 800fb22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb26:	4623      	mov	r3, r4
 800fb28:	469a      	mov	sl, r3
 800fb2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb2e:	b10a      	cbz	r2, 800fb34 <_svfiprintf_r+0x60>
 800fb30:	2a25      	cmp	r2, #37	@ 0x25
 800fb32:	d1f9      	bne.n	800fb28 <_svfiprintf_r+0x54>
 800fb34:	ebba 0b04 	subs.w	fp, sl, r4
 800fb38:	d00b      	beq.n	800fb52 <_svfiprintf_r+0x7e>
 800fb3a:	465b      	mov	r3, fp
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	4638      	mov	r0, r7
 800fb42:	f7ff ff6b 	bl	800fa1c <__ssputs_r>
 800fb46:	3001      	adds	r0, #1
 800fb48:	f000 80a7 	beq.w	800fc9a <_svfiprintf_r+0x1c6>
 800fb4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb4e:	445a      	add	r2, fp
 800fb50:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb52:	f89a 3000 	ldrb.w	r3, [sl]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f000 809f 	beq.w	800fc9a <_svfiprintf_r+0x1c6>
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb62:	f10a 0a01 	add.w	sl, sl, #1
 800fb66:	9304      	str	r3, [sp, #16]
 800fb68:	9307      	str	r3, [sp, #28]
 800fb6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb74:	4654      	mov	r4, sl
 800fb76:	2205      	movs	r2, #5
 800fb78:	484f      	ldr	r0, [pc, #316]	@ (800fcb8 <_svfiprintf_r+0x1e4>)
 800fb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb7e:	f7fd fc90 	bl	800d4a2 <memchr>
 800fb82:	9a04      	ldr	r2, [sp, #16]
 800fb84:	b9d8      	cbnz	r0, 800fbbe <_svfiprintf_r+0xea>
 800fb86:	06d0      	lsls	r0, r2, #27
 800fb88:	bf44      	itt	mi
 800fb8a:	2320      	movmi	r3, #32
 800fb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb90:	0711      	lsls	r1, r2, #28
 800fb92:	bf44      	itt	mi
 800fb94:	232b      	movmi	r3, #43	@ 0x2b
 800fb96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fba0:	d015      	beq.n	800fbce <_svfiprintf_r+0xfa>
 800fba2:	9a07      	ldr	r2, [sp, #28]
 800fba4:	4654      	mov	r4, sl
 800fba6:	2000      	movs	r0, #0
 800fba8:	f04f 0c0a 	mov.w	ip, #10
 800fbac:	4621      	mov	r1, r4
 800fbae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbb2:	3b30      	subs	r3, #48	@ 0x30
 800fbb4:	2b09      	cmp	r3, #9
 800fbb6:	d94b      	bls.n	800fc50 <_svfiprintf_r+0x17c>
 800fbb8:	b1b0      	cbz	r0, 800fbe8 <_svfiprintf_r+0x114>
 800fbba:	9207      	str	r2, [sp, #28]
 800fbbc:	e014      	b.n	800fbe8 <_svfiprintf_r+0x114>
 800fbbe:	eba0 0308 	sub.w	r3, r0, r8
 800fbc2:	46a2      	mov	sl, r4
 800fbc4:	fa09 f303 	lsl.w	r3, r9, r3
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	9304      	str	r3, [sp, #16]
 800fbcc:	e7d2      	b.n	800fb74 <_svfiprintf_r+0xa0>
 800fbce:	9b03      	ldr	r3, [sp, #12]
 800fbd0:	1d19      	adds	r1, r3, #4
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	9103      	str	r1, [sp, #12]
 800fbd8:	bfbb      	ittet	lt
 800fbda:	425b      	neglt	r3, r3
 800fbdc:	f042 0202 	orrlt.w	r2, r2, #2
 800fbe0:	9307      	strge	r3, [sp, #28]
 800fbe2:	9307      	strlt	r3, [sp, #28]
 800fbe4:	bfb8      	it	lt
 800fbe6:	9204      	strlt	r2, [sp, #16]
 800fbe8:	7823      	ldrb	r3, [r4, #0]
 800fbea:	2b2e      	cmp	r3, #46	@ 0x2e
 800fbec:	d10a      	bne.n	800fc04 <_svfiprintf_r+0x130>
 800fbee:	7863      	ldrb	r3, [r4, #1]
 800fbf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbf2:	d132      	bne.n	800fc5a <_svfiprintf_r+0x186>
 800fbf4:	9b03      	ldr	r3, [sp, #12]
 800fbf6:	3402      	adds	r4, #2
 800fbf8:	1d1a      	adds	r2, r3, #4
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc00:	9203      	str	r2, [sp, #12]
 800fc02:	9305      	str	r3, [sp, #20]
 800fc04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fcc8 <_svfiprintf_r+0x1f4>
 800fc08:	2203      	movs	r2, #3
 800fc0a:	7821      	ldrb	r1, [r4, #0]
 800fc0c:	4650      	mov	r0, sl
 800fc0e:	f7fd fc48 	bl	800d4a2 <memchr>
 800fc12:	b138      	cbz	r0, 800fc24 <_svfiprintf_r+0x150>
 800fc14:	eba0 000a 	sub.w	r0, r0, sl
 800fc18:	2240      	movs	r2, #64	@ 0x40
 800fc1a:	9b04      	ldr	r3, [sp, #16]
 800fc1c:	3401      	adds	r4, #1
 800fc1e:	4082      	lsls	r2, r0
 800fc20:	4313      	orrs	r3, r2
 800fc22:	9304      	str	r3, [sp, #16]
 800fc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc28:	2206      	movs	r2, #6
 800fc2a:	4824      	ldr	r0, [pc, #144]	@ (800fcbc <_svfiprintf_r+0x1e8>)
 800fc2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc30:	f7fd fc37 	bl	800d4a2 <memchr>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d036      	beq.n	800fca6 <_svfiprintf_r+0x1d2>
 800fc38:	4b21      	ldr	r3, [pc, #132]	@ (800fcc0 <_svfiprintf_r+0x1ec>)
 800fc3a:	bb1b      	cbnz	r3, 800fc84 <_svfiprintf_r+0x1b0>
 800fc3c:	9b03      	ldr	r3, [sp, #12]
 800fc3e:	3307      	adds	r3, #7
 800fc40:	f023 0307 	bic.w	r3, r3, #7
 800fc44:	3308      	adds	r3, #8
 800fc46:	9303      	str	r3, [sp, #12]
 800fc48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc4a:	4433      	add	r3, r6
 800fc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc4e:	e76a      	b.n	800fb26 <_svfiprintf_r+0x52>
 800fc50:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc54:	460c      	mov	r4, r1
 800fc56:	2001      	movs	r0, #1
 800fc58:	e7a8      	b.n	800fbac <_svfiprintf_r+0xd8>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	3401      	adds	r4, #1
 800fc5e:	f04f 0c0a 	mov.w	ip, #10
 800fc62:	4619      	mov	r1, r3
 800fc64:	9305      	str	r3, [sp, #20]
 800fc66:	4620      	mov	r0, r4
 800fc68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc6c:	3a30      	subs	r2, #48	@ 0x30
 800fc6e:	2a09      	cmp	r2, #9
 800fc70:	d903      	bls.n	800fc7a <_svfiprintf_r+0x1a6>
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d0c6      	beq.n	800fc04 <_svfiprintf_r+0x130>
 800fc76:	9105      	str	r1, [sp, #20]
 800fc78:	e7c4      	b.n	800fc04 <_svfiprintf_r+0x130>
 800fc7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc7e:	4604      	mov	r4, r0
 800fc80:	2301      	movs	r3, #1
 800fc82:	e7f0      	b.n	800fc66 <_svfiprintf_r+0x192>
 800fc84:	ab03      	add	r3, sp, #12
 800fc86:	462a      	mov	r2, r5
 800fc88:	a904      	add	r1, sp, #16
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	9300      	str	r3, [sp, #0]
 800fc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800fcc4 <_svfiprintf_r+0x1f0>)
 800fc90:	f7fc fc98 	bl	800c5c4 <_printf_float>
 800fc94:	1c42      	adds	r2, r0, #1
 800fc96:	4606      	mov	r6, r0
 800fc98:	d1d6      	bne.n	800fc48 <_svfiprintf_r+0x174>
 800fc9a:	89ab      	ldrh	r3, [r5, #12]
 800fc9c:	065b      	lsls	r3, r3, #25
 800fc9e:	f53f af2d 	bmi.w	800fafc <_svfiprintf_r+0x28>
 800fca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fca4:	e72c      	b.n	800fb00 <_svfiprintf_r+0x2c>
 800fca6:	ab03      	add	r3, sp, #12
 800fca8:	462a      	mov	r2, r5
 800fcaa:	a904      	add	r1, sp, #16
 800fcac:	4638      	mov	r0, r7
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	4b04      	ldr	r3, [pc, #16]	@ (800fcc4 <_svfiprintf_r+0x1f0>)
 800fcb2:	f7fc ff23 	bl	800cafc <_printf_i>
 800fcb6:	e7ed      	b.n	800fc94 <_svfiprintf_r+0x1c0>
 800fcb8:	0802e585 	.word	0x0802e585
 800fcbc:	0802e58f 	.word	0x0802e58f
 800fcc0:	0800c5c5 	.word	0x0800c5c5
 800fcc4:	0800fa1d 	.word	0x0800fa1d
 800fcc8:	0802e58b 	.word	0x0802e58b

0800fccc <__sflush_r>:
 800fccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd4:	0716      	lsls	r6, r2, #28
 800fcd6:	4605      	mov	r5, r0
 800fcd8:	460c      	mov	r4, r1
 800fcda:	d454      	bmi.n	800fd86 <__sflush_r+0xba>
 800fcdc:	684b      	ldr	r3, [r1, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	dc02      	bgt.n	800fce8 <__sflush_r+0x1c>
 800fce2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	dd48      	ble.n	800fd7a <__sflush_r+0xae>
 800fce8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fcea:	2e00      	cmp	r6, #0
 800fcec:	d045      	beq.n	800fd7a <__sflush_r+0xae>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fcf4:	682f      	ldr	r7, [r5, #0]
 800fcf6:	6a21      	ldr	r1, [r4, #32]
 800fcf8:	602b      	str	r3, [r5, #0]
 800fcfa:	d030      	beq.n	800fd5e <__sflush_r+0x92>
 800fcfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fcfe:	89a3      	ldrh	r3, [r4, #12]
 800fd00:	0759      	lsls	r1, r3, #29
 800fd02:	d505      	bpl.n	800fd10 <__sflush_r+0x44>
 800fd04:	6863      	ldr	r3, [r4, #4]
 800fd06:	1ad2      	subs	r2, r2, r3
 800fd08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd0a:	b10b      	cbz	r3, 800fd10 <__sflush_r+0x44>
 800fd0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fd0e:	1ad2      	subs	r2, r2, r3
 800fd10:	2300      	movs	r3, #0
 800fd12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd14:	6a21      	ldr	r1, [r4, #32]
 800fd16:	4628      	mov	r0, r5
 800fd18:	47b0      	blx	r6
 800fd1a:	1c43      	adds	r3, r0, #1
 800fd1c:	89a3      	ldrh	r3, [r4, #12]
 800fd1e:	d106      	bne.n	800fd2e <__sflush_r+0x62>
 800fd20:	6829      	ldr	r1, [r5, #0]
 800fd22:	291d      	cmp	r1, #29
 800fd24:	d82b      	bhi.n	800fd7e <__sflush_r+0xb2>
 800fd26:	4a2a      	ldr	r2, [pc, #168]	@ (800fdd0 <__sflush_r+0x104>)
 800fd28:	40ca      	lsrs	r2, r1
 800fd2a:	07d6      	lsls	r6, r2, #31
 800fd2c:	d527      	bpl.n	800fd7e <__sflush_r+0xb2>
 800fd2e:	2200      	movs	r2, #0
 800fd30:	04d9      	lsls	r1, r3, #19
 800fd32:	6062      	str	r2, [r4, #4]
 800fd34:	6922      	ldr	r2, [r4, #16]
 800fd36:	6022      	str	r2, [r4, #0]
 800fd38:	d504      	bpl.n	800fd44 <__sflush_r+0x78>
 800fd3a:	1c42      	adds	r2, r0, #1
 800fd3c:	d101      	bne.n	800fd42 <__sflush_r+0x76>
 800fd3e:	682b      	ldr	r3, [r5, #0]
 800fd40:	b903      	cbnz	r3, 800fd44 <__sflush_r+0x78>
 800fd42:	6560      	str	r0, [r4, #84]	@ 0x54
 800fd44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd46:	602f      	str	r7, [r5, #0]
 800fd48:	b1b9      	cbz	r1, 800fd7a <__sflush_r+0xae>
 800fd4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd4e:	4299      	cmp	r1, r3
 800fd50:	d002      	beq.n	800fd58 <__sflush_r+0x8c>
 800fd52:	4628      	mov	r0, r5
 800fd54:	f7fe fa26 	bl	800e1a4 <_free_r>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd5c:	e00d      	b.n	800fd7a <__sflush_r+0xae>
 800fd5e:	2301      	movs	r3, #1
 800fd60:	4628      	mov	r0, r5
 800fd62:	47b0      	blx	r6
 800fd64:	4602      	mov	r2, r0
 800fd66:	1c50      	adds	r0, r2, #1
 800fd68:	d1c9      	bne.n	800fcfe <__sflush_r+0x32>
 800fd6a:	682b      	ldr	r3, [r5, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d0c6      	beq.n	800fcfe <__sflush_r+0x32>
 800fd70:	2b1d      	cmp	r3, #29
 800fd72:	d001      	beq.n	800fd78 <__sflush_r+0xac>
 800fd74:	2b16      	cmp	r3, #22
 800fd76:	d11d      	bne.n	800fdb4 <__sflush_r+0xe8>
 800fd78:	602f      	str	r7, [r5, #0]
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	e021      	b.n	800fdc2 <__sflush_r+0xf6>
 800fd7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd82:	b21b      	sxth	r3, r3
 800fd84:	e01a      	b.n	800fdbc <__sflush_r+0xf0>
 800fd86:	690f      	ldr	r7, [r1, #16]
 800fd88:	2f00      	cmp	r7, #0
 800fd8a:	d0f6      	beq.n	800fd7a <__sflush_r+0xae>
 800fd8c:	0793      	lsls	r3, r2, #30
 800fd8e:	680e      	ldr	r6, [r1, #0]
 800fd90:	600f      	str	r7, [r1, #0]
 800fd92:	bf0c      	ite	eq
 800fd94:	694b      	ldreq	r3, [r1, #20]
 800fd96:	2300      	movne	r3, #0
 800fd98:	eba6 0807 	sub.w	r8, r6, r7
 800fd9c:	608b      	str	r3, [r1, #8]
 800fd9e:	f1b8 0f00 	cmp.w	r8, #0
 800fda2:	ddea      	ble.n	800fd7a <__sflush_r+0xae>
 800fda4:	4643      	mov	r3, r8
 800fda6:	463a      	mov	r2, r7
 800fda8:	6a21      	ldr	r1, [r4, #32]
 800fdaa:	4628      	mov	r0, r5
 800fdac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fdae:	47b0      	blx	r6
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	dc08      	bgt.n	800fdc6 <__sflush_r+0xfa>
 800fdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc0:	81a3      	strh	r3, [r4, #12]
 800fdc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc6:	4407      	add	r7, r0
 800fdc8:	eba8 0800 	sub.w	r8, r8, r0
 800fdcc:	e7e7      	b.n	800fd9e <__sflush_r+0xd2>
 800fdce:	bf00      	nop
 800fdd0:	20400001 	.word	0x20400001

0800fdd4 <_fflush_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	690b      	ldr	r3, [r1, #16]
 800fdd8:	4605      	mov	r5, r0
 800fdda:	460c      	mov	r4, r1
 800fddc:	b913      	cbnz	r3, 800fde4 <_fflush_r+0x10>
 800fdde:	2500      	movs	r5, #0
 800fde0:	4628      	mov	r0, r5
 800fde2:	bd38      	pop	{r3, r4, r5, pc}
 800fde4:	b118      	cbz	r0, 800fdee <_fflush_r+0x1a>
 800fde6:	6a03      	ldr	r3, [r0, #32]
 800fde8:	b90b      	cbnz	r3, 800fdee <_fflush_r+0x1a>
 800fdea:	f7fd fa3f 	bl	800d26c <__sinit>
 800fdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d0f3      	beq.n	800fdde <_fflush_r+0xa>
 800fdf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fdf8:	07d0      	lsls	r0, r2, #31
 800fdfa:	d404      	bmi.n	800fe06 <_fflush_r+0x32>
 800fdfc:	0599      	lsls	r1, r3, #22
 800fdfe:	d402      	bmi.n	800fe06 <_fflush_r+0x32>
 800fe00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe02:	f7fd fb4c 	bl	800d49e <__retarget_lock_acquire_recursive>
 800fe06:	4628      	mov	r0, r5
 800fe08:	4621      	mov	r1, r4
 800fe0a:	f7ff ff5f 	bl	800fccc <__sflush_r>
 800fe0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe10:	4605      	mov	r5, r0
 800fe12:	07da      	lsls	r2, r3, #31
 800fe14:	d4e4      	bmi.n	800fde0 <_fflush_r+0xc>
 800fe16:	89a3      	ldrh	r3, [r4, #12]
 800fe18:	059b      	lsls	r3, r3, #22
 800fe1a:	d4e1      	bmi.n	800fde0 <_fflush_r+0xc>
 800fe1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe1e:	f7fd fb3f 	bl	800d4a0 <__retarget_lock_release_recursive>
 800fe22:	e7dd      	b.n	800fde0 <_fflush_r+0xc>

0800fe24 <memmove>:
 800fe24:	4288      	cmp	r0, r1
 800fe26:	b510      	push	{r4, lr}
 800fe28:	eb01 0402 	add.w	r4, r1, r2
 800fe2c:	d902      	bls.n	800fe34 <memmove+0x10>
 800fe2e:	4284      	cmp	r4, r0
 800fe30:	4623      	mov	r3, r4
 800fe32:	d807      	bhi.n	800fe44 <memmove+0x20>
 800fe34:	1e43      	subs	r3, r0, #1
 800fe36:	42a1      	cmp	r1, r4
 800fe38:	d008      	beq.n	800fe4c <memmove+0x28>
 800fe3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe42:	e7f8      	b.n	800fe36 <memmove+0x12>
 800fe44:	4402      	add	r2, r0
 800fe46:	4601      	mov	r1, r0
 800fe48:	428a      	cmp	r2, r1
 800fe4a:	d100      	bne.n	800fe4e <memmove+0x2a>
 800fe4c:	bd10      	pop	{r4, pc}
 800fe4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe56:	e7f7      	b.n	800fe48 <memmove+0x24>

0800fe58 <strncmp>:
 800fe58:	b510      	push	{r4, lr}
 800fe5a:	b16a      	cbz	r2, 800fe78 <strncmp+0x20>
 800fe5c:	3901      	subs	r1, #1
 800fe5e:	1884      	adds	r4, r0, r2
 800fe60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d103      	bne.n	800fe74 <strncmp+0x1c>
 800fe6c:	42a0      	cmp	r0, r4
 800fe6e:	d001      	beq.n	800fe74 <strncmp+0x1c>
 800fe70:	2a00      	cmp	r2, #0
 800fe72:	d1f5      	bne.n	800fe60 <strncmp+0x8>
 800fe74:	1ad0      	subs	r0, r2, r3
 800fe76:	bd10      	pop	{r4, pc}
 800fe78:	4610      	mov	r0, r2
 800fe7a:	e7fc      	b.n	800fe76 <strncmp+0x1e>

0800fe7c <_sbrk_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	2300      	movs	r3, #0
 800fe80:	4d05      	ldr	r5, [pc, #20]	@ (800fe98 <_sbrk_r+0x1c>)
 800fe82:	4604      	mov	r4, r0
 800fe84:	4608      	mov	r0, r1
 800fe86:	602b      	str	r3, [r5, #0]
 800fe88:	f7f2 f898 	bl	8001fbc <_sbrk>
 800fe8c:	1c43      	adds	r3, r0, #1
 800fe8e:	d102      	bne.n	800fe96 <_sbrk_r+0x1a>
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	b103      	cbz	r3, 800fe96 <_sbrk_r+0x1a>
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	bd38      	pop	{r3, r4, r5, pc}
 800fe98:	2000cc98 	.word	0x2000cc98
 800fe9c:	00000000 	.word	0x00000000

0800fea0 <nan>:
 800fea0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fea8 <nan+0x8>
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	00000000 	.word	0x00000000
 800feac:	7ff80000 	.word	0x7ff80000

0800feb0 <__assert_func>:
 800feb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feb2:	4614      	mov	r4, r2
 800feb4:	461a      	mov	r2, r3
 800feb6:	4b09      	ldr	r3, [pc, #36]	@ (800fedc <__assert_func+0x2c>)
 800feb8:	4605      	mov	r5, r0
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	68d8      	ldr	r0, [r3, #12]
 800febe:	b14c      	cbz	r4, 800fed4 <__assert_func+0x24>
 800fec0:	4b07      	ldr	r3, [pc, #28]	@ (800fee0 <__assert_func+0x30>)
 800fec2:	9100      	str	r1, [sp, #0]
 800fec4:	4907      	ldr	r1, [pc, #28]	@ (800fee4 <__assert_func+0x34>)
 800fec6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800feca:	462b      	mov	r3, r5
 800fecc:	f000 fba4 	bl	8010618 <fiprintf>
 800fed0:	f000 fbb4 	bl	801063c <abort>
 800fed4:	4b04      	ldr	r3, [pc, #16]	@ (800fee8 <__assert_func+0x38>)
 800fed6:	461c      	mov	r4, r3
 800fed8:	e7f3      	b.n	800fec2 <__assert_func+0x12>
 800feda:	bf00      	nop
 800fedc:	20000030 	.word	0x20000030
 800fee0:	0802e59e 	.word	0x0802e59e
 800fee4:	0802e5ab 	.word	0x0802e5ab
 800fee8:	0802e5d9 	.word	0x0802e5d9

0800feec <_calloc_r>:
 800feec:	b570      	push	{r4, r5, r6, lr}
 800feee:	fba1 5402 	umull	r5, r4, r1, r2
 800fef2:	b934      	cbnz	r4, 800ff02 <_calloc_r+0x16>
 800fef4:	4629      	mov	r1, r5
 800fef6:	f7fe f9c9 	bl	800e28c <_malloc_r>
 800fefa:	4606      	mov	r6, r0
 800fefc:	b928      	cbnz	r0, 800ff0a <_calloc_r+0x1e>
 800fefe:	4630      	mov	r0, r6
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	220c      	movs	r2, #12
 800ff04:	2600      	movs	r6, #0
 800ff06:	6002      	str	r2, [r0, #0]
 800ff08:	e7f9      	b.n	800fefe <_calloc_r+0x12>
 800ff0a:	462a      	mov	r2, r5
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	f7fd fa48 	bl	800d3a2 <memset>
 800ff12:	e7f4      	b.n	800fefe <_calloc_r+0x12>

0800ff14 <rshift>:
 800ff14:	6903      	ldr	r3, [r0, #16]
 800ff16:	114a      	asrs	r2, r1, #5
 800ff18:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff20:	f100 0414 	add.w	r4, r0, #20
 800ff24:	dd45      	ble.n	800ffb2 <rshift+0x9e>
 800ff26:	f011 011f 	ands.w	r1, r1, #31
 800ff2a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff2e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff32:	d10c      	bne.n	800ff4e <rshift+0x3a>
 800ff34:	f100 0710 	add.w	r7, r0, #16
 800ff38:	4629      	mov	r1, r5
 800ff3a:	42b1      	cmp	r1, r6
 800ff3c:	d334      	bcc.n	800ffa8 <rshift+0x94>
 800ff3e:	1a9b      	subs	r3, r3, r2
 800ff40:	1eea      	subs	r2, r5, #3
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	4296      	cmp	r6, r2
 800ff46:	bf38      	it	cc
 800ff48:	2300      	movcc	r3, #0
 800ff4a:	4423      	add	r3, r4
 800ff4c:	e015      	b.n	800ff7a <rshift+0x66>
 800ff4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff52:	f1c1 0820 	rsb	r8, r1, #32
 800ff56:	f105 0e04 	add.w	lr, r5, #4
 800ff5a:	46a1      	mov	r9, r4
 800ff5c:	40cf      	lsrs	r7, r1
 800ff5e:	4576      	cmp	r6, lr
 800ff60:	46f4      	mov	ip, lr
 800ff62:	d815      	bhi.n	800ff90 <rshift+0x7c>
 800ff64:	1a9a      	subs	r2, r3, r2
 800ff66:	3501      	adds	r5, #1
 800ff68:	0092      	lsls	r2, r2, #2
 800ff6a:	3a04      	subs	r2, #4
 800ff6c:	42ae      	cmp	r6, r5
 800ff6e:	bf38      	it	cc
 800ff70:	2200      	movcc	r2, #0
 800ff72:	18a3      	adds	r3, r4, r2
 800ff74:	50a7      	str	r7, [r4, r2]
 800ff76:	b107      	cbz	r7, 800ff7a <rshift+0x66>
 800ff78:	3304      	adds	r3, #4
 800ff7a:	1b1a      	subs	r2, r3, r4
 800ff7c:	42a3      	cmp	r3, r4
 800ff7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff82:	bf08      	it	eq
 800ff84:	2300      	moveq	r3, #0
 800ff86:	6102      	str	r2, [r0, #16]
 800ff88:	bf08      	it	eq
 800ff8a:	6143      	streq	r3, [r0, #20]
 800ff8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff90:	f8dc c000 	ldr.w	ip, [ip]
 800ff94:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff98:	ea4c 0707 	orr.w	r7, ip, r7
 800ff9c:	f849 7b04 	str.w	r7, [r9], #4
 800ffa0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffa4:	40cf      	lsrs	r7, r1
 800ffa6:	e7da      	b.n	800ff5e <rshift+0x4a>
 800ffa8:	f851 cb04 	ldr.w	ip, [r1], #4
 800ffac:	f847 cf04 	str.w	ip, [r7, #4]!
 800ffb0:	e7c3      	b.n	800ff3a <rshift+0x26>
 800ffb2:	4623      	mov	r3, r4
 800ffb4:	e7e1      	b.n	800ff7a <rshift+0x66>

0800ffb6 <__hexdig_fun>:
 800ffb6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ffba:	2b09      	cmp	r3, #9
 800ffbc:	d802      	bhi.n	800ffc4 <__hexdig_fun+0xe>
 800ffbe:	3820      	subs	r0, #32
 800ffc0:	b2c0      	uxtb	r0, r0
 800ffc2:	4770      	bx	lr
 800ffc4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ffc8:	2b05      	cmp	r3, #5
 800ffca:	d801      	bhi.n	800ffd0 <__hexdig_fun+0x1a>
 800ffcc:	3847      	subs	r0, #71	@ 0x47
 800ffce:	e7f7      	b.n	800ffc0 <__hexdig_fun+0xa>
 800ffd0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ffd4:	2b05      	cmp	r3, #5
 800ffd6:	d801      	bhi.n	800ffdc <__hexdig_fun+0x26>
 800ffd8:	3827      	subs	r0, #39	@ 0x27
 800ffda:	e7f1      	b.n	800ffc0 <__hexdig_fun+0xa>
 800ffdc:	2000      	movs	r0, #0
 800ffde:	4770      	bx	lr

0800ffe0 <__gethex>:
 800ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe4:	b085      	sub	sp, #20
 800ffe6:	468a      	mov	sl, r1
 800ffe8:	4690      	mov	r8, r2
 800ffea:	9302      	str	r3, [sp, #8]
 800ffec:	680b      	ldr	r3, [r1, #0]
 800ffee:	9001      	str	r0, [sp, #4]
 800fff0:	1c9c      	adds	r4, r3, #2
 800fff2:	46a1      	mov	r9, r4
 800fff4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fff8:	2830      	cmp	r0, #48	@ 0x30
 800fffa:	d0fa      	beq.n	800fff2 <__gethex+0x12>
 800fffc:	eba9 0303 	sub.w	r3, r9, r3
 8010000:	f1a3 0b02 	sub.w	fp, r3, #2
 8010004:	f7ff ffd7 	bl	800ffb6 <__hexdig_fun>
 8010008:	4605      	mov	r5, r0
 801000a:	2800      	cmp	r0, #0
 801000c:	d166      	bne.n	80100dc <__gethex+0xfc>
 801000e:	2201      	movs	r2, #1
 8010010:	499e      	ldr	r1, [pc, #632]	@ (801028c <__gethex+0x2ac>)
 8010012:	4648      	mov	r0, r9
 8010014:	f7ff ff20 	bl	800fe58 <strncmp>
 8010018:	4607      	mov	r7, r0
 801001a:	2800      	cmp	r0, #0
 801001c:	d165      	bne.n	80100ea <__gethex+0x10a>
 801001e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010022:	4626      	mov	r6, r4
 8010024:	f7ff ffc7 	bl	800ffb6 <__hexdig_fun>
 8010028:	2800      	cmp	r0, #0
 801002a:	d060      	beq.n	80100ee <__gethex+0x10e>
 801002c:	4623      	mov	r3, r4
 801002e:	7818      	ldrb	r0, [r3, #0]
 8010030:	4699      	mov	r9, r3
 8010032:	3301      	adds	r3, #1
 8010034:	2830      	cmp	r0, #48	@ 0x30
 8010036:	d0fa      	beq.n	801002e <__gethex+0x4e>
 8010038:	f7ff ffbd 	bl	800ffb6 <__hexdig_fun>
 801003c:	fab0 f580 	clz	r5, r0
 8010040:	f04f 0b01 	mov.w	fp, #1
 8010044:	096d      	lsrs	r5, r5, #5
 8010046:	464a      	mov	r2, r9
 8010048:	4616      	mov	r6, r2
 801004a:	3201      	adds	r2, #1
 801004c:	7830      	ldrb	r0, [r6, #0]
 801004e:	f7ff ffb2 	bl	800ffb6 <__hexdig_fun>
 8010052:	2800      	cmp	r0, #0
 8010054:	d1f8      	bne.n	8010048 <__gethex+0x68>
 8010056:	2201      	movs	r2, #1
 8010058:	498c      	ldr	r1, [pc, #560]	@ (801028c <__gethex+0x2ac>)
 801005a:	4630      	mov	r0, r6
 801005c:	f7ff fefc 	bl	800fe58 <strncmp>
 8010060:	2800      	cmp	r0, #0
 8010062:	d13e      	bne.n	80100e2 <__gethex+0x102>
 8010064:	b944      	cbnz	r4, 8010078 <__gethex+0x98>
 8010066:	1c74      	adds	r4, r6, #1
 8010068:	4622      	mov	r2, r4
 801006a:	4616      	mov	r6, r2
 801006c:	3201      	adds	r2, #1
 801006e:	7830      	ldrb	r0, [r6, #0]
 8010070:	f7ff ffa1 	bl	800ffb6 <__hexdig_fun>
 8010074:	2800      	cmp	r0, #0
 8010076:	d1f8      	bne.n	801006a <__gethex+0x8a>
 8010078:	1ba4      	subs	r4, r4, r6
 801007a:	00a7      	lsls	r7, r4, #2
 801007c:	7833      	ldrb	r3, [r6, #0]
 801007e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010082:	2b50      	cmp	r3, #80	@ 0x50
 8010084:	d13d      	bne.n	8010102 <__gethex+0x122>
 8010086:	7873      	ldrb	r3, [r6, #1]
 8010088:	2b2b      	cmp	r3, #43	@ 0x2b
 801008a:	d032      	beq.n	80100f2 <__gethex+0x112>
 801008c:	2b2d      	cmp	r3, #45	@ 0x2d
 801008e:	d033      	beq.n	80100f8 <__gethex+0x118>
 8010090:	1c71      	adds	r1, r6, #1
 8010092:	2400      	movs	r4, #0
 8010094:	7808      	ldrb	r0, [r1, #0]
 8010096:	f7ff ff8e 	bl	800ffb6 <__hexdig_fun>
 801009a:	1e43      	subs	r3, r0, #1
 801009c:	b2db      	uxtb	r3, r3
 801009e:	2b18      	cmp	r3, #24
 80100a0:	d82f      	bhi.n	8010102 <__gethex+0x122>
 80100a2:	f1a0 0210 	sub.w	r2, r0, #16
 80100a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80100aa:	f7ff ff84 	bl	800ffb6 <__hexdig_fun>
 80100ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80100b2:	230a      	movs	r3, #10
 80100b4:	fa5f fc8c 	uxtb.w	ip, ip
 80100b8:	f1bc 0f18 	cmp.w	ip, #24
 80100bc:	d91e      	bls.n	80100fc <__gethex+0x11c>
 80100be:	b104      	cbz	r4, 80100c2 <__gethex+0xe2>
 80100c0:	4252      	negs	r2, r2
 80100c2:	4417      	add	r7, r2
 80100c4:	f8ca 1000 	str.w	r1, [sl]
 80100c8:	b1ed      	cbz	r5, 8010106 <__gethex+0x126>
 80100ca:	f1bb 0f00 	cmp.w	fp, #0
 80100ce:	bf0c      	ite	eq
 80100d0:	2506      	moveq	r5, #6
 80100d2:	2500      	movne	r5, #0
 80100d4:	4628      	mov	r0, r5
 80100d6:	b005      	add	sp, #20
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	2500      	movs	r5, #0
 80100de:	462c      	mov	r4, r5
 80100e0:	e7b1      	b.n	8010046 <__gethex+0x66>
 80100e2:	2c00      	cmp	r4, #0
 80100e4:	d1c8      	bne.n	8010078 <__gethex+0x98>
 80100e6:	4627      	mov	r7, r4
 80100e8:	e7c8      	b.n	801007c <__gethex+0x9c>
 80100ea:	464e      	mov	r6, r9
 80100ec:	462f      	mov	r7, r5
 80100ee:	2501      	movs	r5, #1
 80100f0:	e7c4      	b.n	801007c <__gethex+0x9c>
 80100f2:	2400      	movs	r4, #0
 80100f4:	1cb1      	adds	r1, r6, #2
 80100f6:	e7cd      	b.n	8010094 <__gethex+0xb4>
 80100f8:	2401      	movs	r4, #1
 80100fa:	e7fb      	b.n	80100f4 <__gethex+0x114>
 80100fc:	fb03 0002 	mla	r0, r3, r2, r0
 8010100:	e7cf      	b.n	80100a2 <__gethex+0xc2>
 8010102:	4631      	mov	r1, r6
 8010104:	e7de      	b.n	80100c4 <__gethex+0xe4>
 8010106:	eba6 0309 	sub.w	r3, r6, r9
 801010a:	4629      	mov	r1, r5
 801010c:	3b01      	subs	r3, #1
 801010e:	2b07      	cmp	r3, #7
 8010110:	dc0a      	bgt.n	8010128 <__gethex+0x148>
 8010112:	9801      	ldr	r0, [sp, #4]
 8010114:	f7fe f946 	bl	800e3a4 <_Balloc>
 8010118:	4604      	mov	r4, r0
 801011a:	b940      	cbnz	r0, 801012e <__gethex+0x14e>
 801011c:	4b5c      	ldr	r3, [pc, #368]	@ (8010290 <__gethex+0x2b0>)
 801011e:	4602      	mov	r2, r0
 8010120:	21e4      	movs	r1, #228	@ 0xe4
 8010122:	485c      	ldr	r0, [pc, #368]	@ (8010294 <__gethex+0x2b4>)
 8010124:	f7ff fec4 	bl	800feb0 <__assert_func>
 8010128:	3101      	adds	r1, #1
 801012a:	105b      	asrs	r3, r3, #1
 801012c:	e7ef      	b.n	801010e <__gethex+0x12e>
 801012e:	f100 0a14 	add.w	sl, r0, #20
 8010132:	2300      	movs	r3, #0
 8010134:	4655      	mov	r5, sl
 8010136:	469b      	mov	fp, r3
 8010138:	45b1      	cmp	r9, r6
 801013a:	d337      	bcc.n	80101ac <__gethex+0x1cc>
 801013c:	f845 bb04 	str.w	fp, [r5], #4
 8010140:	eba5 050a 	sub.w	r5, r5, sl
 8010144:	4658      	mov	r0, fp
 8010146:	10ad      	asrs	r5, r5, #2
 8010148:	6125      	str	r5, [r4, #16]
 801014a:	016d      	lsls	r5, r5, #5
 801014c:	f7fe fa1e 	bl	800e58c <__hi0bits>
 8010150:	f8d8 6000 	ldr.w	r6, [r8]
 8010154:	1a2d      	subs	r5, r5, r0
 8010156:	42b5      	cmp	r5, r6
 8010158:	dd54      	ble.n	8010204 <__gethex+0x224>
 801015a:	1bad      	subs	r5, r5, r6
 801015c:	4620      	mov	r0, r4
 801015e:	4629      	mov	r1, r5
 8010160:	f7fe fdb5 	bl	800ecce <__any_on>
 8010164:	4681      	mov	r9, r0
 8010166:	b178      	cbz	r0, 8010188 <__gethex+0x1a8>
 8010168:	1e6b      	subs	r3, r5, #1
 801016a:	f04f 0901 	mov.w	r9, #1
 801016e:	1159      	asrs	r1, r3, #5
 8010170:	f003 021f 	and.w	r2, r3, #31
 8010174:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010178:	fa09 f202 	lsl.w	r2, r9, r2
 801017c:	420a      	tst	r2, r1
 801017e:	d003      	beq.n	8010188 <__gethex+0x1a8>
 8010180:	454b      	cmp	r3, r9
 8010182:	dc36      	bgt.n	80101f2 <__gethex+0x212>
 8010184:	f04f 0902 	mov.w	r9, #2
 8010188:	442f      	add	r7, r5
 801018a:	4629      	mov	r1, r5
 801018c:	4620      	mov	r0, r4
 801018e:	f7ff fec1 	bl	800ff14 <rshift>
 8010192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010196:	42bb      	cmp	r3, r7
 8010198:	da42      	bge.n	8010220 <__gethex+0x240>
 801019a:	4621      	mov	r1, r4
 801019c:	9801      	ldr	r0, [sp, #4]
 801019e:	f7fe f941 	bl	800e424 <_Bfree>
 80101a2:	2300      	movs	r3, #0
 80101a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101a6:	25a3      	movs	r5, #163	@ 0xa3
 80101a8:	6013      	str	r3, [r2, #0]
 80101aa:	e793      	b.n	80100d4 <__gethex+0xf4>
 80101ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80101b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80101b2:	d012      	beq.n	80101da <__gethex+0x1fa>
 80101b4:	2b20      	cmp	r3, #32
 80101b6:	d104      	bne.n	80101c2 <__gethex+0x1e2>
 80101b8:	f845 bb04 	str.w	fp, [r5], #4
 80101bc:	f04f 0b00 	mov.w	fp, #0
 80101c0:	465b      	mov	r3, fp
 80101c2:	7830      	ldrb	r0, [r6, #0]
 80101c4:	9303      	str	r3, [sp, #12]
 80101c6:	f7ff fef6 	bl	800ffb6 <__hexdig_fun>
 80101ca:	9b03      	ldr	r3, [sp, #12]
 80101cc:	f000 000f 	and.w	r0, r0, #15
 80101d0:	4098      	lsls	r0, r3
 80101d2:	3304      	adds	r3, #4
 80101d4:	ea4b 0b00 	orr.w	fp, fp, r0
 80101d8:	e7ae      	b.n	8010138 <__gethex+0x158>
 80101da:	45b1      	cmp	r9, r6
 80101dc:	d8ea      	bhi.n	80101b4 <__gethex+0x1d4>
 80101de:	2201      	movs	r2, #1
 80101e0:	492a      	ldr	r1, [pc, #168]	@ (801028c <__gethex+0x2ac>)
 80101e2:	4630      	mov	r0, r6
 80101e4:	9303      	str	r3, [sp, #12]
 80101e6:	f7ff fe37 	bl	800fe58 <strncmp>
 80101ea:	9b03      	ldr	r3, [sp, #12]
 80101ec:	2800      	cmp	r0, #0
 80101ee:	d1e1      	bne.n	80101b4 <__gethex+0x1d4>
 80101f0:	e7a2      	b.n	8010138 <__gethex+0x158>
 80101f2:	1ea9      	subs	r1, r5, #2
 80101f4:	4620      	mov	r0, r4
 80101f6:	f7fe fd6a 	bl	800ecce <__any_on>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d0c2      	beq.n	8010184 <__gethex+0x1a4>
 80101fe:	f04f 0903 	mov.w	r9, #3
 8010202:	e7c1      	b.n	8010188 <__gethex+0x1a8>
 8010204:	da09      	bge.n	801021a <__gethex+0x23a>
 8010206:	1b75      	subs	r5, r6, r5
 8010208:	4621      	mov	r1, r4
 801020a:	9801      	ldr	r0, [sp, #4]
 801020c:	462a      	mov	r2, r5
 801020e:	1b7f      	subs	r7, r7, r5
 8010210:	f7fe fb1c 	bl	800e84c <__lshift>
 8010214:	4604      	mov	r4, r0
 8010216:	f100 0a14 	add.w	sl, r0, #20
 801021a:	f04f 0900 	mov.w	r9, #0
 801021e:	e7b8      	b.n	8010192 <__gethex+0x1b2>
 8010220:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010224:	42bd      	cmp	r5, r7
 8010226:	dd6f      	ble.n	8010308 <__gethex+0x328>
 8010228:	1bed      	subs	r5, r5, r7
 801022a:	42ae      	cmp	r6, r5
 801022c:	dc34      	bgt.n	8010298 <__gethex+0x2b8>
 801022e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010232:	2b02      	cmp	r3, #2
 8010234:	d022      	beq.n	801027c <__gethex+0x29c>
 8010236:	2b03      	cmp	r3, #3
 8010238:	d024      	beq.n	8010284 <__gethex+0x2a4>
 801023a:	2b01      	cmp	r3, #1
 801023c:	d115      	bne.n	801026a <__gethex+0x28a>
 801023e:	42ae      	cmp	r6, r5
 8010240:	d113      	bne.n	801026a <__gethex+0x28a>
 8010242:	2e01      	cmp	r6, #1
 8010244:	d10b      	bne.n	801025e <__gethex+0x27e>
 8010246:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801024a:	2562      	movs	r5, #98	@ 0x62
 801024c:	9a02      	ldr	r2, [sp, #8]
 801024e:	6013      	str	r3, [r2, #0]
 8010250:	2301      	movs	r3, #1
 8010252:	6123      	str	r3, [r4, #16]
 8010254:	f8ca 3000 	str.w	r3, [sl]
 8010258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801025a:	601c      	str	r4, [r3, #0]
 801025c:	e73a      	b.n	80100d4 <__gethex+0xf4>
 801025e:	1e71      	subs	r1, r6, #1
 8010260:	4620      	mov	r0, r4
 8010262:	f7fe fd34 	bl	800ecce <__any_on>
 8010266:	2800      	cmp	r0, #0
 8010268:	d1ed      	bne.n	8010246 <__gethex+0x266>
 801026a:	4621      	mov	r1, r4
 801026c:	9801      	ldr	r0, [sp, #4]
 801026e:	f7fe f8d9 	bl	800e424 <_Bfree>
 8010272:	2300      	movs	r3, #0
 8010274:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010276:	2550      	movs	r5, #80	@ 0x50
 8010278:	6013      	str	r3, [r2, #0]
 801027a:	e72b      	b.n	80100d4 <__gethex+0xf4>
 801027c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1f3      	bne.n	801026a <__gethex+0x28a>
 8010282:	e7e0      	b.n	8010246 <__gethex+0x266>
 8010284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1dd      	bne.n	8010246 <__gethex+0x266>
 801028a:	e7ee      	b.n	801026a <__gethex+0x28a>
 801028c:	0802e583 	.word	0x0802e583
 8010290:	0802e519 	.word	0x0802e519
 8010294:	0802e5da 	.word	0x0802e5da
 8010298:	1e6f      	subs	r7, r5, #1
 801029a:	f1b9 0f00 	cmp.w	r9, #0
 801029e:	d130      	bne.n	8010302 <__gethex+0x322>
 80102a0:	b127      	cbz	r7, 80102ac <__gethex+0x2cc>
 80102a2:	4639      	mov	r1, r7
 80102a4:	4620      	mov	r0, r4
 80102a6:	f7fe fd12 	bl	800ecce <__any_on>
 80102aa:	4681      	mov	r9, r0
 80102ac:	117a      	asrs	r2, r7, #5
 80102ae:	2301      	movs	r3, #1
 80102b0:	f007 071f 	and.w	r7, r7, #31
 80102b4:	4629      	mov	r1, r5
 80102b6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80102ba:	4620      	mov	r0, r4
 80102bc:	40bb      	lsls	r3, r7
 80102be:	1b76      	subs	r6, r6, r5
 80102c0:	2502      	movs	r5, #2
 80102c2:	4213      	tst	r3, r2
 80102c4:	bf18      	it	ne
 80102c6:	f049 0902 	orrne.w	r9, r9, #2
 80102ca:	f7ff fe23 	bl	800ff14 <rshift>
 80102ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80102d2:	f1b9 0f00 	cmp.w	r9, #0
 80102d6:	d047      	beq.n	8010368 <__gethex+0x388>
 80102d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102dc:	2b02      	cmp	r3, #2
 80102de:	d015      	beq.n	801030c <__gethex+0x32c>
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d017      	beq.n	8010314 <__gethex+0x334>
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d109      	bne.n	80102fc <__gethex+0x31c>
 80102e8:	f019 0f02 	tst.w	r9, #2
 80102ec:	d006      	beq.n	80102fc <__gethex+0x31c>
 80102ee:	f8da 3000 	ldr.w	r3, [sl]
 80102f2:	ea49 0903 	orr.w	r9, r9, r3
 80102f6:	f019 0f01 	tst.w	r9, #1
 80102fa:	d10e      	bne.n	801031a <__gethex+0x33a>
 80102fc:	f045 0510 	orr.w	r5, r5, #16
 8010300:	e032      	b.n	8010368 <__gethex+0x388>
 8010302:	f04f 0901 	mov.w	r9, #1
 8010306:	e7d1      	b.n	80102ac <__gethex+0x2cc>
 8010308:	2501      	movs	r5, #1
 801030a:	e7e2      	b.n	80102d2 <__gethex+0x2f2>
 801030c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801030e:	f1c3 0301 	rsb	r3, r3, #1
 8010312:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010316:	2b00      	cmp	r3, #0
 8010318:	d0f0      	beq.n	80102fc <__gethex+0x31c>
 801031a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801031e:	f104 0314 	add.w	r3, r4, #20
 8010322:	f04f 0c00 	mov.w	ip, #0
 8010326:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801032a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801032e:	4618      	mov	r0, r3
 8010330:	f853 2b04 	ldr.w	r2, [r3], #4
 8010334:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010338:	d01b      	beq.n	8010372 <__gethex+0x392>
 801033a:	3201      	adds	r2, #1
 801033c:	6002      	str	r2, [r0, #0]
 801033e:	2d02      	cmp	r5, #2
 8010340:	f104 0314 	add.w	r3, r4, #20
 8010344:	d13c      	bne.n	80103c0 <__gethex+0x3e0>
 8010346:	f8d8 2000 	ldr.w	r2, [r8]
 801034a:	3a01      	subs	r2, #1
 801034c:	42b2      	cmp	r2, r6
 801034e:	d109      	bne.n	8010364 <__gethex+0x384>
 8010350:	1171      	asrs	r1, r6, #5
 8010352:	2201      	movs	r2, #1
 8010354:	f006 061f 	and.w	r6, r6, #31
 8010358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801035c:	fa02 f606 	lsl.w	r6, r2, r6
 8010360:	421e      	tst	r6, r3
 8010362:	d13a      	bne.n	80103da <__gethex+0x3fa>
 8010364:	f045 0520 	orr.w	r5, r5, #32
 8010368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801036a:	601c      	str	r4, [r3, #0]
 801036c:	9b02      	ldr	r3, [sp, #8]
 801036e:	601f      	str	r7, [r3, #0]
 8010370:	e6b0      	b.n	80100d4 <__gethex+0xf4>
 8010372:	4299      	cmp	r1, r3
 8010374:	f843 cc04 	str.w	ip, [r3, #-4]
 8010378:	d8d9      	bhi.n	801032e <__gethex+0x34e>
 801037a:	68a3      	ldr	r3, [r4, #8]
 801037c:	459b      	cmp	fp, r3
 801037e:	db17      	blt.n	80103b0 <__gethex+0x3d0>
 8010380:	6861      	ldr	r1, [r4, #4]
 8010382:	9801      	ldr	r0, [sp, #4]
 8010384:	3101      	adds	r1, #1
 8010386:	f7fe f80d 	bl	800e3a4 <_Balloc>
 801038a:	4681      	mov	r9, r0
 801038c:	b918      	cbnz	r0, 8010396 <__gethex+0x3b6>
 801038e:	4b1a      	ldr	r3, [pc, #104]	@ (80103f8 <__gethex+0x418>)
 8010390:	4602      	mov	r2, r0
 8010392:	2184      	movs	r1, #132	@ 0x84
 8010394:	e6c5      	b.n	8010122 <__gethex+0x142>
 8010396:	6922      	ldr	r2, [r4, #16]
 8010398:	f104 010c 	add.w	r1, r4, #12
 801039c:	300c      	adds	r0, #12
 801039e:	3202      	adds	r2, #2
 80103a0:	0092      	lsls	r2, r2, #2
 80103a2:	f7fd f88c 	bl	800d4be <memcpy>
 80103a6:	4621      	mov	r1, r4
 80103a8:	464c      	mov	r4, r9
 80103aa:	9801      	ldr	r0, [sp, #4]
 80103ac:	f7fe f83a 	bl	800e424 <_Bfree>
 80103b0:	6923      	ldr	r3, [r4, #16]
 80103b2:	1c5a      	adds	r2, r3, #1
 80103b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103b8:	6122      	str	r2, [r4, #16]
 80103ba:	2201      	movs	r2, #1
 80103bc:	615a      	str	r2, [r3, #20]
 80103be:	e7be      	b.n	801033e <__gethex+0x35e>
 80103c0:	6922      	ldr	r2, [r4, #16]
 80103c2:	455a      	cmp	r2, fp
 80103c4:	dd0b      	ble.n	80103de <__gethex+0x3fe>
 80103c6:	2101      	movs	r1, #1
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff fda3 	bl	800ff14 <rshift>
 80103ce:	3701      	adds	r7, #1
 80103d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103d4:	42bb      	cmp	r3, r7
 80103d6:	f6ff aee0 	blt.w	801019a <__gethex+0x1ba>
 80103da:	2501      	movs	r5, #1
 80103dc:	e7c2      	b.n	8010364 <__gethex+0x384>
 80103de:	f016 061f 	ands.w	r6, r6, #31
 80103e2:	d0fa      	beq.n	80103da <__gethex+0x3fa>
 80103e4:	4453      	add	r3, sl
 80103e6:	f1c6 0620 	rsb	r6, r6, #32
 80103ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80103ee:	f7fe f8cd 	bl	800e58c <__hi0bits>
 80103f2:	42b0      	cmp	r0, r6
 80103f4:	dbe7      	blt.n	80103c6 <__gethex+0x3e6>
 80103f6:	e7f0      	b.n	80103da <__gethex+0x3fa>
 80103f8:	0802e519 	.word	0x0802e519

080103fc <L_shift>:
 80103fc:	f1c2 0208 	rsb	r2, r2, #8
 8010400:	0092      	lsls	r2, r2, #2
 8010402:	b570      	push	{r4, r5, r6, lr}
 8010404:	f1c2 0620 	rsb	r6, r2, #32
 8010408:	6843      	ldr	r3, [r0, #4]
 801040a:	6804      	ldr	r4, [r0, #0]
 801040c:	fa03 f506 	lsl.w	r5, r3, r6
 8010410:	40d3      	lsrs	r3, r2
 8010412:	432c      	orrs	r4, r5
 8010414:	6004      	str	r4, [r0, #0]
 8010416:	f840 3f04 	str.w	r3, [r0, #4]!
 801041a:	4288      	cmp	r0, r1
 801041c:	d3f4      	bcc.n	8010408 <L_shift+0xc>
 801041e:	bd70      	pop	{r4, r5, r6, pc}

08010420 <__match>:
 8010420:	6803      	ldr	r3, [r0, #0]
 8010422:	3301      	adds	r3, #1
 8010424:	b530      	push	{r4, r5, lr}
 8010426:	f811 4b01 	ldrb.w	r4, [r1], #1
 801042a:	b914      	cbnz	r4, 8010432 <__match+0x12>
 801042c:	6003      	str	r3, [r0, #0]
 801042e:	2001      	movs	r0, #1
 8010430:	bd30      	pop	{r4, r5, pc}
 8010432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010436:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801043a:	2d19      	cmp	r5, #25
 801043c:	bf98      	it	ls
 801043e:	3220      	addls	r2, #32
 8010440:	42a2      	cmp	r2, r4
 8010442:	d0f0      	beq.n	8010426 <__match+0x6>
 8010444:	2000      	movs	r0, #0
 8010446:	e7f3      	b.n	8010430 <__match+0x10>

08010448 <__hexnan>:
 8010448:	680b      	ldr	r3, [r1, #0]
 801044a:	6801      	ldr	r1, [r0, #0]
 801044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010450:	115e      	asrs	r6, r3, #5
 8010452:	f013 031f 	ands.w	r3, r3, #31
 8010456:	f04f 0500 	mov.w	r5, #0
 801045a:	b087      	sub	sp, #28
 801045c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010460:	4682      	mov	sl, r0
 8010462:	4690      	mov	r8, r2
 8010464:	46ab      	mov	fp, r5
 8010466:	bf18      	it	ne
 8010468:	3604      	addne	r6, #4
 801046a:	9301      	str	r3, [sp, #4]
 801046c:	9502      	str	r5, [sp, #8]
 801046e:	1f37      	subs	r7, r6, #4
 8010470:	f846 5c04 	str.w	r5, [r6, #-4]
 8010474:	46b9      	mov	r9, r7
 8010476:	463c      	mov	r4, r7
 8010478:	1c4b      	adds	r3, r1, #1
 801047a:	784a      	ldrb	r2, [r1, #1]
 801047c:	9303      	str	r3, [sp, #12]
 801047e:	b342      	cbz	r2, 80104d2 <__hexnan+0x8a>
 8010480:	4610      	mov	r0, r2
 8010482:	9105      	str	r1, [sp, #20]
 8010484:	9204      	str	r2, [sp, #16]
 8010486:	f7ff fd96 	bl	800ffb6 <__hexdig_fun>
 801048a:	2800      	cmp	r0, #0
 801048c:	d151      	bne.n	8010532 <__hexnan+0xea>
 801048e:	9a04      	ldr	r2, [sp, #16]
 8010490:	9905      	ldr	r1, [sp, #20]
 8010492:	2a20      	cmp	r2, #32
 8010494:	d818      	bhi.n	80104c8 <__hexnan+0x80>
 8010496:	9b02      	ldr	r3, [sp, #8]
 8010498:	459b      	cmp	fp, r3
 801049a:	dd13      	ble.n	80104c4 <__hexnan+0x7c>
 801049c:	454c      	cmp	r4, r9
 801049e:	d206      	bcs.n	80104ae <__hexnan+0x66>
 80104a0:	2d07      	cmp	r5, #7
 80104a2:	dc04      	bgt.n	80104ae <__hexnan+0x66>
 80104a4:	462a      	mov	r2, r5
 80104a6:	4649      	mov	r1, r9
 80104a8:	4620      	mov	r0, r4
 80104aa:	f7ff ffa7 	bl	80103fc <L_shift>
 80104ae:	4544      	cmp	r4, r8
 80104b0:	d951      	bls.n	8010556 <__hexnan+0x10e>
 80104b2:	2300      	movs	r3, #0
 80104b4:	f1a4 0904 	sub.w	r9, r4, #4
 80104b8:	f8cd b008 	str.w	fp, [sp, #8]
 80104bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80104c0:	461d      	mov	r5, r3
 80104c2:	464c      	mov	r4, r9
 80104c4:	9903      	ldr	r1, [sp, #12]
 80104c6:	e7d7      	b.n	8010478 <__hexnan+0x30>
 80104c8:	2a29      	cmp	r2, #41	@ 0x29
 80104ca:	d156      	bne.n	801057a <__hexnan+0x132>
 80104cc:	3102      	adds	r1, #2
 80104ce:	f8ca 1000 	str.w	r1, [sl]
 80104d2:	f1bb 0f00 	cmp.w	fp, #0
 80104d6:	d050      	beq.n	801057a <__hexnan+0x132>
 80104d8:	454c      	cmp	r4, r9
 80104da:	d206      	bcs.n	80104ea <__hexnan+0xa2>
 80104dc:	2d07      	cmp	r5, #7
 80104de:	dc04      	bgt.n	80104ea <__hexnan+0xa2>
 80104e0:	462a      	mov	r2, r5
 80104e2:	4649      	mov	r1, r9
 80104e4:	4620      	mov	r0, r4
 80104e6:	f7ff ff89 	bl	80103fc <L_shift>
 80104ea:	4544      	cmp	r4, r8
 80104ec:	d935      	bls.n	801055a <__hexnan+0x112>
 80104ee:	f1a8 0204 	sub.w	r2, r8, #4
 80104f2:	4623      	mov	r3, r4
 80104f4:	f853 1b04 	ldr.w	r1, [r3], #4
 80104f8:	429f      	cmp	r7, r3
 80104fa:	f842 1f04 	str.w	r1, [r2, #4]!
 80104fe:	d2f9      	bcs.n	80104f4 <__hexnan+0xac>
 8010500:	1b3b      	subs	r3, r7, r4
 8010502:	3e03      	subs	r6, #3
 8010504:	3401      	adds	r4, #1
 8010506:	2200      	movs	r2, #0
 8010508:	f023 0303 	bic.w	r3, r3, #3
 801050c:	3304      	adds	r3, #4
 801050e:	42b4      	cmp	r4, r6
 8010510:	bf88      	it	hi
 8010512:	2304      	movhi	r3, #4
 8010514:	4443      	add	r3, r8
 8010516:	f843 2b04 	str.w	r2, [r3], #4
 801051a:	429f      	cmp	r7, r3
 801051c:	d2fb      	bcs.n	8010516 <__hexnan+0xce>
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	b91b      	cbnz	r3, 801052a <__hexnan+0xe2>
 8010522:	4547      	cmp	r7, r8
 8010524:	d127      	bne.n	8010576 <__hexnan+0x12e>
 8010526:	2301      	movs	r3, #1
 8010528:	603b      	str	r3, [r7, #0]
 801052a:	2005      	movs	r0, #5
 801052c:	b007      	add	sp, #28
 801052e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010532:	3501      	adds	r5, #1
 8010534:	f10b 0b01 	add.w	fp, fp, #1
 8010538:	2d08      	cmp	r5, #8
 801053a:	dd05      	ble.n	8010548 <__hexnan+0x100>
 801053c:	4544      	cmp	r4, r8
 801053e:	d9c1      	bls.n	80104c4 <__hexnan+0x7c>
 8010540:	2300      	movs	r3, #0
 8010542:	3c04      	subs	r4, #4
 8010544:	2501      	movs	r5, #1
 8010546:	6023      	str	r3, [r4, #0]
 8010548:	6822      	ldr	r2, [r4, #0]
 801054a:	f000 000f 	and.w	r0, r0, #15
 801054e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010552:	6020      	str	r0, [r4, #0]
 8010554:	e7b6      	b.n	80104c4 <__hexnan+0x7c>
 8010556:	2508      	movs	r5, #8
 8010558:	e7b4      	b.n	80104c4 <__hexnan+0x7c>
 801055a:	9b01      	ldr	r3, [sp, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d0de      	beq.n	801051e <__hexnan+0xd6>
 8010560:	f1c3 0320 	rsb	r3, r3, #32
 8010564:	f04f 32ff 	mov.w	r2, #4294967295
 8010568:	40da      	lsrs	r2, r3
 801056a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801056e:	4013      	ands	r3, r2
 8010570:	f846 3c04 	str.w	r3, [r6, #-4]
 8010574:	e7d3      	b.n	801051e <__hexnan+0xd6>
 8010576:	3f04      	subs	r7, #4
 8010578:	e7d1      	b.n	801051e <__hexnan+0xd6>
 801057a:	2004      	movs	r0, #4
 801057c:	e7d6      	b.n	801052c <__hexnan+0xe4>

0801057e <__ascii_mbtowc>:
 801057e:	b082      	sub	sp, #8
 8010580:	b901      	cbnz	r1, 8010584 <__ascii_mbtowc+0x6>
 8010582:	a901      	add	r1, sp, #4
 8010584:	b142      	cbz	r2, 8010598 <__ascii_mbtowc+0x1a>
 8010586:	b14b      	cbz	r3, 801059c <__ascii_mbtowc+0x1e>
 8010588:	7813      	ldrb	r3, [r2, #0]
 801058a:	600b      	str	r3, [r1, #0]
 801058c:	7812      	ldrb	r2, [r2, #0]
 801058e:	1e10      	subs	r0, r2, #0
 8010590:	bf18      	it	ne
 8010592:	2001      	movne	r0, #1
 8010594:	b002      	add	sp, #8
 8010596:	4770      	bx	lr
 8010598:	4610      	mov	r0, r2
 801059a:	e7fb      	b.n	8010594 <__ascii_mbtowc+0x16>
 801059c:	f06f 0001 	mvn.w	r0, #1
 80105a0:	e7f8      	b.n	8010594 <__ascii_mbtowc+0x16>

080105a2 <_realloc_r>:
 80105a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a6:	4607      	mov	r7, r0
 80105a8:	4614      	mov	r4, r2
 80105aa:	460d      	mov	r5, r1
 80105ac:	b921      	cbnz	r1, 80105b8 <_realloc_r+0x16>
 80105ae:	4611      	mov	r1, r2
 80105b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105b4:	f7fd be6a 	b.w	800e28c <_malloc_r>
 80105b8:	b92a      	cbnz	r2, 80105c6 <_realloc_r+0x24>
 80105ba:	4625      	mov	r5, r4
 80105bc:	f7fd fdf2 	bl	800e1a4 <_free_r>
 80105c0:	4628      	mov	r0, r5
 80105c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c6:	f000 f840 	bl	801064a <_malloc_usable_size_r>
 80105ca:	4284      	cmp	r4, r0
 80105cc:	4606      	mov	r6, r0
 80105ce:	d802      	bhi.n	80105d6 <_realloc_r+0x34>
 80105d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80105d4:	d8f4      	bhi.n	80105c0 <_realloc_r+0x1e>
 80105d6:	4621      	mov	r1, r4
 80105d8:	4638      	mov	r0, r7
 80105da:	f7fd fe57 	bl	800e28c <_malloc_r>
 80105de:	4680      	mov	r8, r0
 80105e0:	b908      	cbnz	r0, 80105e6 <_realloc_r+0x44>
 80105e2:	4645      	mov	r5, r8
 80105e4:	e7ec      	b.n	80105c0 <_realloc_r+0x1e>
 80105e6:	42b4      	cmp	r4, r6
 80105e8:	4622      	mov	r2, r4
 80105ea:	4629      	mov	r1, r5
 80105ec:	bf28      	it	cs
 80105ee:	4632      	movcs	r2, r6
 80105f0:	f7fc ff65 	bl	800d4be <memcpy>
 80105f4:	4629      	mov	r1, r5
 80105f6:	4638      	mov	r0, r7
 80105f8:	f7fd fdd4 	bl	800e1a4 <_free_r>
 80105fc:	e7f1      	b.n	80105e2 <_realloc_r+0x40>

080105fe <__ascii_wctomb>:
 80105fe:	4603      	mov	r3, r0
 8010600:	4608      	mov	r0, r1
 8010602:	b141      	cbz	r1, 8010616 <__ascii_wctomb+0x18>
 8010604:	2aff      	cmp	r2, #255	@ 0xff
 8010606:	d904      	bls.n	8010612 <__ascii_wctomb+0x14>
 8010608:	228a      	movs	r2, #138	@ 0x8a
 801060a:	f04f 30ff 	mov.w	r0, #4294967295
 801060e:	601a      	str	r2, [r3, #0]
 8010610:	4770      	bx	lr
 8010612:	2001      	movs	r0, #1
 8010614:	700a      	strb	r2, [r1, #0]
 8010616:	4770      	bx	lr

08010618 <fiprintf>:
 8010618:	b40e      	push	{r1, r2, r3}
 801061a:	b503      	push	{r0, r1, lr}
 801061c:	ab03      	add	r3, sp, #12
 801061e:	4601      	mov	r1, r0
 8010620:	4805      	ldr	r0, [pc, #20]	@ (8010638 <fiprintf+0x20>)
 8010622:	f853 2b04 	ldr.w	r2, [r3], #4
 8010626:	6800      	ldr	r0, [r0, #0]
 8010628:	9301      	str	r3, [sp, #4]
 801062a:	f000 f83f 	bl	80106ac <_vfiprintf_r>
 801062e:	b002      	add	sp, #8
 8010630:	f85d eb04 	ldr.w	lr, [sp], #4
 8010634:	b003      	add	sp, #12
 8010636:	4770      	bx	lr
 8010638:	20000030 	.word	0x20000030

0801063c <abort>:
 801063c:	2006      	movs	r0, #6
 801063e:	b508      	push	{r3, lr}
 8010640:	f000 fa08 	bl	8010a54 <raise>
 8010644:	2001      	movs	r0, #1
 8010646:	f7f1 fc41 	bl	8001ecc <_exit>

0801064a <_malloc_usable_size_r>:
 801064a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801064e:	1f18      	subs	r0, r3, #4
 8010650:	2b00      	cmp	r3, #0
 8010652:	bfbc      	itt	lt
 8010654:	580b      	ldrlt	r3, [r1, r0]
 8010656:	18c0      	addlt	r0, r0, r3
 8010658:	4770      	bx	lr

0801065a <__sfputc_r>:
 801065a:	6893      	ldr	r3, [r2, #8]
 801065c:	3b01      	subs	r3, #1
 801065e:	2b00      	cmp	r3, #0
 8010660:	b410      	push	{r4}
 8010662:	6093      	str	r3, [r2, #8]
 8010664:	da08      	bge.n	8010678 <__sfputc_r+0x1e>
 8010666:	6994      	ldr	r4, [r2, #24]
 8010668:	42a3      	cmp	r3, r4
 801066a:	db01      	blt.n	8010670 <__sfputc_r+0x16>
 801066c:	290a      	cmp	r1, #10
 801066e:	d103      	bne.n	8010678 <__sfputc_r+0x1e>
 8010670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010674:	f000 b932 	b.w	80108dc <__swbuf_r>
 8010678:	6813      	ldr	r3, [r2, #0]
 801067a:	1c58      	adds	r0, r3, #1
 801067c:	6010      	str	r0, [r2, #0]
 801067e:	4608      	mov	r0, r1
 8010680:	7019      	strb	r1, [r3, #0]
 8010682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010686:	4770      	bx	lr

08010688 <__sfputs_r>:
 8010688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801068a:	4606      	mov	r6, r0
 801068c:	460f      	mov	r7, r1
 801068e:	4614      	mov	r4, r2
 8010690:	18d5      	adds	r5, r2, r3
 8010692:	42ac      	cmp	r4, r5
 8010694:	d101      	bne.n	801069a <__sfputs_r+0x12>
 8010696:	2000      	movs	r0, #0
 8010698:	e007      	b.n	80106aa <__sfputs_r+0x22>
 801069a:	463a      	mov	r2, r7
 801069c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106a0:	4630      	mov	r0, r6
 80106a2:	f7ff ffda 	bl	801065a <__sfputc_r>
 80106a6:	1c43      	adds	r3, r0, #1
 80106a8:	d1f3      	bne.n	8010692 <__sfputs_r+0xa>
 80106aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080106ac <_vfiprintf_r>:
 80106ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b0:	460d      	mov	r5, r1
 80106b2:	b09d      	sub	sp, #116	@ 0x74
 80106b4:	4614      	mov	r4, r2
 80106b6:	4698      	mov	r8, r3
 80106b8:	4606      	mov	r6, r0
 80106ba:	b118      	cbz	r0, 80106c4 <_vfiprintf_r+0x18>
 80106bc:	6a03      	ldr	r3, [r0, #32]
 80106be:	b90b      	cbnz	r3, 80106c4 <_vfiprintf_r+0x18>
 80106c0:	f7fc fdd4 	bl	800d26c <__sinit>
 80106c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106c6:	07d9      	lsls	r1, r3, #31
 80106c8:	d405      	bmi.n	80106d6 <_vfiprintf_r+0x2a>
 80106ca:	89ab      	ldrh	r3, [r5, #12]
 80106cc:	059a      	lsls	r2, r3, #22
 80106ce:	d402      	bmi.n	80106d6 <_vfiprintf_r+0x2a>
 80106d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106d2:	f7fc fee4 	bl	800d49e <__retarget_lock_acquire_recursive>
 80106d6:	89ab      	ldrh	r3, [r5, #12]
 80106d8:	071b      	lsls	r3, r3, #28
 80106da:	d501      	bpl.n	80106e0 <_vfiprintf_r+0x34>
 80106dc:	692b      	ldr	r3, [r5, #16]
 80106de:	b99b      	cbnz	r3, 8010708 <_vfiprintf_r+0x5c>
 80106e0:	4629      	mov	r1, r5
 80106e2:	4630      	mov	r0, r6
 80106e4:	f000 f938 	bl	8010958 <__swsetup_r>
 80106e8:	b170      	cbz	r0, 8010708 <_vfiprintf_r+0x5c>
 80106ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106ec:	07dc      	lsls	r4, r3, #31
 80106ee:	d504      	bpl.n	80106fa <_vfiprintf_r+0x4e>
 80106f0:	f04f 30ff 	mov.w	r0, #4294967295
 80106f4:	b01d      	add	sp, #116	@ 0x74
 80106f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fa:	89ab      	ldrh	r3, [r5, #12]
 80106fc:	0598      	lsls	r0, r3, #22
 80106fe:	d4f7      	bmi.n	80106f0 <_vfiprintf_r+0x44>
 8010700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010702:	f7fc fecd 	bl	800d4a0 <__retarget_lock_release_recursive>
 8010706:	e7f3      	b.n	80106f0 <_vfiprintf_r+0x44>
 8010708:	2300      	movs	r3, #0
 801070a:	f8cd 800c 	str.w	r8, [sp, #12]
 801070e:	f04f 0901 	mov.w	r9, #1
 8010712:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80108c8 <_vfiprintf_r+0x21c>
 8010716:	9309      	str	r3, [sp, #36]	@ 0x24
 8010718:	2320      	movs	r3, #32
 801071a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801071e:	2330      	movs	r3, #48	@ 0x30
 8010720:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010724:	4623      	mov	r3, r4
 8010726:	469a      	mov	sl, r3
 8010728:	f813 2b01 	ldrb.w	r2, [r3], #1
 801072c:	b10a      	cbz	r2, 8010732 <_vfiprintf_r+0x86>
 801072e:	2a25      	cmp	r2, #37	@ 0x25
 8010730:	d1f9      	bne.n	8010726 <_vfiprintf_r+0x7a>
 8010732:	ebba 0b04 	subs.w	fp, sl, r4
 8010736:	d00b      	beq.n	8010750 <_vfiprintf_r+0xa4>
 8010738:	465b      	mov	r3, fp
 801073a:	4622      	mov	r2, r4
 801073c:	4629      	mov	r1, r5
 801073e:	4630      	mov	r0, r6
 8010740:	f7ff ffa2 	bl	8010688 <__sfputs_r>
 8010744:	3001      	adds	r0, #1
 8010746:	f000 80a7 	beq.w	8010898 <_vfiprintf_r+0x1ec>
 801074a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801074c:	445a      	add	r2, fp
 801074e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010750:	f89a 3000 	ldrb.w	r3, [sl]
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 809f 	beq.w	8010898 <_vfiprintf_r+0x1ec>
 801075a:	2300      	movs	r3, #0
 801075c:	f04f 32ff 	mov.w	r2, #4294967295
 8010760:	f10a 0a01 	add.w	sl, sl, #1
 8010764:	9304      	str	r3, [sp, #16]
 8010766:	9307      	str	r3, [sp, #28]
 8010768:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801076c:	931a      	str	r3, [sp, #104]	@ 0x68
 801076e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010772:	4654      	mov	r4, sl
 8010774:	2205      	movs	r2, #5
 8010776:	4854      	ldr	r0, [pc, #336]	@ (80108c8 <_vfiprintf_r+0x21c>)
 8010778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801077c:	f7fc fe91 	bl	800d4a2 <memchr>
 8010780:	9a04      	ldr	r2, [sp, #16]
 8010782:	b9d8      	cbnz	r0, 80107bc <_vfiprintf_r+0x110>
 8010784:	06d1      	lsls	r1, r2, #27
 8010786:	bf44      	itt	mi
 8010788:	2320      	movmi	r3, #32
 801078a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801078e:	0713      	lsls	r3, r2, #28
 8010790:	bf44      	itt	mi
 8010792:	232b      	movmi	r3, #43	@ 0x2b
 8010794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010798:	f89a 3000 	ldrb.w	r3, [sl]
 801079c:	2b2a      	cmp	r3, #42	@ 0x2a
 801079e:	d015      	beq.n	80107cc <_vfiprintf_r+0x120>
 80107a0:	9a07      	ldr	r2, [sp, #28]
 80107a2:	4654      	mov	r4, sl
 80107a4:	2000      	movs	r0, #0
 80107a6:	f04f 0c0a 	mov.w	ip, #10
 80107aa:	4621      	mov	r1, r4
 80107ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107b0:	3b30      	subs	r3, #48	@ 0x30
 80107b2:	2b09      	cmp	r3, #9
 80107b4:	d94b      	bls.n	801084e <_vfiprintf_r+0x1a2>
 80107b6:	b1b0      	cbz	r0, 80107e6 <_vfiprintf_r+0x13a>
 80107b8:	9207      	str	r2, [sp, #28]
 80107ba:	e014      	b.n	80107e6 <_vfiprintf_r+0x13a>
 80107bc:	eba0 0308 	sub.w	r3, r0, r8
 80107c0:	46a2      	mov	sl, r4
 80107c2:	fa09 f303 	lsl.w	r3, r9, r3
 80107c6:	4313      	orrs	r3, r2
 80107c8:	9304      	str	r3, [sp, #16]
 80107ca:	e7d2      	b.n	8010772 <_vfiprintf_r+0xc6>
 80107cc:	9b03      	ldr	r3, [sp, #12]
 80107ce:	1d19      	adds	r1, r3, #4
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	9103      	str	r1, [sp, #12]
 80107d6:	bfbb      	ittet	lt
 80107d8:	425b      	neglt	r3, r3
 80107da:	f042 0202 	orrlt.w	r2, r2, #2
 80107de:	9307      	strge	r3, [sp, #28]
 80107e0:	9307      	strlt	r3, [sp, #28]
 80107e2:	bfb8      	it	lt
 80107e4:	9204      	strlt	r2, [sp, #16]
 80107e6:	7823      	ldrb	r3, [r4, #0]
 80107e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80107ea:	d10a      	bne.n	8010802 <_vfiprintf_r+0x156>
 80107ec:	7863      	ldrb	r3, [r4, #1]
 80107ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80107f0:	d132      	bne.n	8010858 <_vfiprintf_r+0x1ac>
 80107f2:	9b03      	ldr	r3, [sp, #12]
 80107f4:	3402      	adds	r4, #2
 80107f6:	1d1a      	adds	r2, r3, #4
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107fe:	9203      	str	r2, [sp, #12]
 8010800:	9305      	str	r3, [sp, #20]
 8010802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80108d8 <_vfiprintf_r+0x22c>
 8010806:	2203      	movs	r2, #3
 8010808:	7821      	ldrb	r1, [r4, #0]
 801080a:	4650      	mov	r0, sl
 801080c:	f7fc fe49 	bl	800d4a2 <memchr>
 8010810:	b138      	cbz	r0, 8010822 <_vfiprintf_r+0x176>
 8010812:	eba0 000a 	sub.w	r0, r0, sl
 8010816:	2240      	movs	r2, #64	@ 0x40
 8010818:	9b04      	ldr	r3, [sp, #16]
 801081a:	3401      	adds	r4, #1
 801081c:	4082      	lsls	r2, r0
 801081e:	4313      	orrs	r3, r2
 8010820:	9304      	str	r3, [sp, #16]
 8010822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010826:	2206      	movs	r2, #6
 8010828:	4828      	ldr	r0, [pc, #160]	@ (80108cc <_vfiprintf_r+0x220>)
 801082a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801082e:	f7fc fe38 	bl	800d4a2 <memchr>
 8010832:	2800      	cmp	r0, #0
 8010834:	d03f      	beq.n	80108b6 <_vfiprintf_r+0x20a>
 8010836:	4b26      	ldr	r3, [pc, #152]	@ (80108d0 <_vfiprintf_r+0x224>)
 8010838:	bb1b      	cbnz	r3, 8010882 <_vfiprintf_r+0x1d6>
 801083a:	9b03      	ldr	r3, [sp, #12]
 801083c:	3307      	adds	r3, #7
 801083e:	f023 0307 	bic.w	r3, r3, #7
 8010842:	3308      	adds	r3, #8
 8010844:	9303      	str	r3, [sp, #12]
 8010846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010848:	443b      	add	r3, r7
 801084a:	9309      	str	r3, [sp, #36]	@ 0x24
 801084c:	e76a      	b.n	8010724 <_vfiprintf_r+0x78>
 801084e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010852:	460c      	mov	r4, r1
 8010854:	2001      	movs	r0, #1
 8010856:	e7a8      	b.n	80107aa <_vfiprintf_r+0xfe>
 8010858:	2300      	movs	r3, #0
 801085a:	3401      	adds	r4, #1
 801085c:	f04f 0c0a 	mov.w	ip, #10
 8010860:	4619      	mov	r1, r3
 8010862:	9305      	str	r3, [sp, #20]
 8010864:	4620      	mov	r0, r4
 8010866:	f810 2b01 	ldrb.w	r2, [r0], #1
 801086a:	3a30      	subs	r2, #48	@ 0x30
 801086c:	2a09      	cmp	r2, #9
 801086e:	d903      	bls.n	8010878 <_vfiprintf_r+0x1cc>
 8010870:	2b00      	cmp	r3, #0
 8010872:	d0c6      	beq.n	8010802 <_vfiprintf_r+0x156>
 8010874:	9105      	str	r1, [sp, #20]
 8010876:	e7c4      	b.n	8010802 <_vfiprintf_r+0x156>
 8010878:	fb0c 2101 	mla	r1, ip, r1, r2
 801087c:	4604      	mov	r4, r0
 801087e:	2301      	movs	r3, #1
 8010880:	e7f0      	b.n	8010864 <_vfiprintf_r+0x1b8>
 8010882:	ab03      	add	r3, sp, #12
 8010884:	462a      	mov	r2, r5
 8010886:	a904      	add	r1, sp, #16
 8010888:	4630      	mov	r0, r6
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	4b11      	ldr	r3, [pc, #68]	@ (80108d4 <_vfiprintf_r+0x228>)
 801088e:	f7fb fe99 	bl	800c5c4 <_printf_float>
 8010892:	4607      	mov	r7, r0
 8010894:	1c78      	adds	r0, r7, #1
 8010896:	d1d6      	bne.n	8010846 <_vfiprintf_r+0x19a>
 8010898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801089a:	07d9      	lsls	r1, r3, #31
 801089c:	d405      	bmi.n	80108aa <_vfiprintf_r+0x1fe>
 801089e:	89ab      	ldrh	r3, [r5, #12]
 80108a0:	059a      	lsls	r2, r3, #22
 80108a2:	d402      	bmi.n	80108aa <_vfiprintf_r+0x1fe>
 80108a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108a6:	f7fc fdfb 	bl	800d4a0 <__retarget_lock_release_recursive>
 80108aa:	89ab      	ldrh	r3, [r5, #12]
 80108ac:	065b      	lsls	r3, r3, #25
 80108ae:	f53f af1f 	bmi.w	80106f0 <_vfiprintf_r+0x44>
 80108b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108b4:	e71e      	b.n	80106f4 <_vfiprintf_r+0x48>
 80108b6:	ab03      	add	r3, sp, #12
 80108b8:	462a      	mov	r2, r5
 80108ba:	a904      	add	r1, sp, #16
 80108bc:	4630      	mov	r0, r6
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	4b04      	ldr	r3, [pc, #16]	@ (80108d4 <_vfiprintf_r+0x228>)
 80108c2:	f7fc f91b 	bl	800cafc <_printf_i>
 80108c6:	e7e4      	b.n	8010892 <_vfiprintf_r+0x1e6>
 80108c8:	0802e585 	.word	0x0802e585
 80108cc:	0802e58f 	.word	0x0802e58f
 80108d0:	0800c5c5 	.word	0x0800c5c5
 80108d4:	08010689 	.word	0x08010689
 80108d8:	0802e58b 	.word	0x0802e58b

080108dc <__swbuf_r>:
 80108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108de:	460e      	mov	r6, r1
 80108e0:	4614      	mov	r4, r2
 80108e2:	4605      	mov	r5, r0
 80108e4:	b118      	cbz	r0, 80108ee <__swbuf_r+0x12>
 80108e6:	6a03      	ldr	r3, [r0, #32]
 80108e8:	b90b      	cbnz	r3, 80108ee <__swbuf_r+0x12>
 80108ea:	f7fc fcbf 	bl	800d26c <__sinit>
 80108ee:	69a3      	ldr	r3, [r4, #24]
 80108f0:	60a3      	str	r3, [r4, #8]
 80108f2:	89a3      	ldrh	r3, [r4, #12]
 80108f4:	071a      	lsls	r2, r3, #28
 80108f6:	d501      	bpl.n	80108fc <__swbuf_r+0x20>
 80108f8:	6923      	ldr	r3, [r4, #16]
 80108fa:	b943      	cbnz	r3, 801090e <__swbuf_r+0x32>
 80108fc:	4621      	mov	r1, r4
 80108fe:	4628      	mov	r0, r5
 8010900:	f000 f82a 	bl	8010958 <__swsetup_r>
 8010904:	b118      	cbz	r0, 801090e <__swbuf_r+0x32>
 8010906:	f04f 37ff 	mov.w	r7, #4294967295
 801090a:	4638      	mov	r0, r7
 801090c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	b2f6      	uxtb	r6, r6
 8010912:	6922      	ldr	r2, [r4, #16]
 8010914:	4637      	mov	r7, r6
 8010916:	1a98      	subs	r0, r3, r2
 8010918:	6963      	ldr	r3, [r4, #20]
 801091a:	4283      	cmp	r3, r0
 801091c:	dc05      	bgt.n	801092a <__swbuf_r+0x4e>
 801091e:	4621      	mov	r1, r4
 8010920:	4628      	mov	r0, r5
 8010922:	f7ff fa57 	bl	800fdd4 <_fflush_r>
 8010926:	2800      	cmp	r0, #0
 8010928:	d1ed      	bne.n	8010906 <__swbuf_r+0x2a>
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	3b01      	subs	r3, #1
 801092e:	60a3      	str	r3, [r4, #8]
 8010930:	6823      	ldr	r3, [r4, #0]
 8010932:	1c5a      	adds	r2, r3, #1
 8010934:	6022      	str	r2, [r4, #0]
 8010936:	701e      	strb	r6, [r3, #0]
 8010938:	1c43      	adds	r3, r0, #1
 801093a:	6962      	ldr	r2, [r4, #20]
 801093c:	429a      	cmp	r2, r3
 801093e:	d004      	beq.n	801094a <__swbuf_r+0x6e>
 8010940:	89a3      	ldrh	r3, [r4, #12]
 8010942:	07db      	lsls	r3, r3, #31
 8010944:	d5e1      	bpl.n	801090a <__swbuf_r+0x2e>
 8010946:	2e0a      	cmp	r6, #10
 8010948:	d1df      	bne.n	801090a <__swbuf_r+0x2e>
 801094a:	4621      	mov	r1, r4
 801094c:	4628      	mov	r0, r5
 801094e:	f7ff fa41 	bl	800fdd4 <_fflush_r>
 8010952:	2800      	cmp	r0, #0
 8010954:	d0d9      	beq.n	801090a <__swbuf_r+0x2e>
 8010956:	e7d6      	b.n	8010906 <__swbuf_r+0x2a>

08010958 <__swsetup_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4b29      	ldr	r3, [pc, #164]	@ (8010a00 <__swsetup_r+0xa8>)
 801095c:	4605      	mov	r5, r0
 801095e:	460c      	mov	r4, r1
 8010960:	6818      	ldr	r0, [r3, #0]
 8010962:	b118      	cbz	r0, 801096c <__swsetup_r+0x14>
 8010964:	6a03      	ldr	r3, [r0, #32]
 8010966:	b90b      	cbnz	r3, 801096c <__swsetup_r+0x14>
 8010968:	f7fc fc80 	bl	800d26c <__sinit>
 801096c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010970:	0719      	lsls	r1, r3, #28
 8010972:	d422      	bmi.n	80109ba <__swsetup_r+0x62>
 8010974:	06da      	lsls	r2, r3, #27
 8010976:	d407      	bmi.n	8010988 <__swsetup_r+0x30>
 8010978:	2209      	movs	r2, #9
 801097a:	602a      	str	r2, [r5, #0]
 801097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010980:	f04f 30ff 	mov.w	r0, #4294967295
 8010984:	81a3      	strh	r3, [r4, #12]
 8010986:	e033      	b.n	80109f0 <__swsetup_r+0x98>
 8010988:	0758      	lsls	r0, r3, #29
 801098a:	d512      	bpl.n	80109b2 <__swsetup_r+0x5a>
 801098c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801098e:	b141      	cbz	r1, 80109a2 <__swsetup_r+0x4a>
 8010990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010994:	4299      	cmp	r1, r3
 8010996:	d002      	beq.n	801099e <__swsetup_r+0x46>
 8010998:	4628      	mov	r0, r5
 801099a:	f7fd fc03 	bl	800e1a4 <_free_r>
 801099e:	2300      	movs	r3, #0
 80109a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80109a2:	89a3      	ldrh	r3, [r4, #12]
 80109a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80109a8:	81a3      	strh	r3, [r4, #12]
 80109aa:	2300      	movs	r3, #0
 80109ac:	6063      	str	r3, [r4, #4]
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	f043 0308 	orr.w	r3, r3, #8
 80109b8:	81a3      	strh	r3, [r4, #12]
 80109ba:	6923      	ldr	r3, [r4, #16]
 80109bc:	b94b      	cbnz	r3, 80109d2 <__swsetup_r+0x7a>
 80109be:	89a3      	ldrh	r3, [r4, #12]
 80109c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80109c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80109c8:	d003      	beq.n	80109d2 <__swsetup_r+0x7a>
 80109ca:	4621      	mov	r1, r4
 80109cc:	4628      	mov	r0, r5
 80109ce:	f000 f882 	bl	8010ad6 <__smakebuf_r>
 80109d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109d6:	f013 0201 	ands.w	r2, r3, #1
 80109da:	d00a      	beq.n	80109f2 <__swsetup_r+0x9a>
 80109dc:	2200      	movs	r2, #0
 80109de:	60a2      	str	r2, [r4, #8]
 80109e0:	6962      	ldr	r2, [r4, #20]
 80109e2:	4252      	negs	r2, r2
 80109e4:	61a2      	str	r2, [r4, #24]
 80109e6:	6922      	ldr	r2, [r4, #16]
 80109e8:	b942      	cbnz	r2, 80109fc <__swsetup_r+0xa4>
 80109ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80109ee:	d1c5      	bne.n	801097c <__swsetup_r+0x24>
 80109f0:	bd38      	pop	{r3, r4, r5, pc}
 80109f2:	0799      	lsls	r1, r3, #30
 80109f4:	bf58      	it	pl
 80109f6:	6962      	ldrpl	r2, [r4, #20]
 80109f8:	60a2      	str	r2, [r4, #8]
 80109fa:	e7f4      	b.n	80109e6 <__swsetup_r+0x8e>
 80109fc:	2000      	movs	r0, #0
 80109fe:	e7f7      	b.n	80109f0 <__swsetup_r+0x98>
 8010a00:	20000030 	.word	0x20000030

08010a04 <_raise_r>:
 8010a04:	291f      	cmp	r1, #31
 8010a06:	b538      	push	{r3, r4, r5, lr}
 8010a08:	4605      	mov	r5, r0
 8010a0a:	460c      	mov	r4, r1
 8010a0c:	d904      	bls.n	8010a18 <_raise_r+0x14>
 8010a0e:	2316      	movs	r3, #22
 8010a10:	6003      	str	r3, [r0, #0]
 8010a12:	f04f 30ff 	mov.w	r0, #4294967295
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
 8010a18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a1a:	b112      	cbz	r2, 8010a22 <_raise_r+0x1e>
 8010a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a20:	b94b      	cbnz	r3, 8010a36 <_raise_r+0x32>
 8010a22:	4628      	mov	r0, r5
 8010a24:	f000 f830 	bl	8010a88 <_getpid_r>
 8010a28:	4622      	mov	r2, r4
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a32:	f000 b817 	b.w	8010a64 <_kill_r>
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	d00a      	beq.n	8010a50 <_raise_r+0x4c>
 8010a3a:	1c59      	adds	r1, r3, #1
 8010a3c:	d103      	bne.n	8010a46 <_raise_r+0x42>
 8010a3e:	2316      	movs	r3, #22
 8010a40:	6003      	str	r3, [r0, #0]
 8010a42:	2001      	movs	r0, #1
 8010a44:	e7e7      	b.n	8010a16 <_raise_r+0x12>
 8010a46:	2100      	movs	r1, #0
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010a4e:	4798      	blx	r3
 8010a50:	2000      	movs	r0, #0
 8010a52:	e7e0      	b.n	8010a16 <_raise_r+0x12>

08010a54 <raise>:
 8010a54:	4b02      	ldr	r3, [pc, #8]	@ (8010a60 <raise+0xc>)
 8010a56:	4601      	mov	r1, r0
 8010a58:	6818      	ldr	r0, [r3, #0]
 8010a5a:	f7ff bfd3 	b.w	8010a04 <_raise_r>
 8010a5e:	bf00      	nop
 8010a60:	20000030 	.word	0x20000030

08010a64 <_kill_r>:
 8010a64:	b538      	push	{r3, r4, r5, lr}
 8010a66:	2300      	movs	r3, #0
 8010a68:	4d06      	ldr	r5, [pc, #24]	@ (8010a84 <_kill_r+0x20>)
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	4608      	mov	r0, r1
 8010a6e:	4611      	mov	r1, r2
 8010a70:	602b      	str	r3, [r5, #0]
 8010a72:	f7f1 fa1b 	bl	8001eac <_kill>
 8010a76:	1c43      	adds	r3, r0, #1
 8010a78:	d102      	bne.n	8010a80 <_kill_r+0x1c>
 8010a7a:	682b      	ldr	r3, [r5, #0]
 8010a7c:	b103      	cbz	r3, 8010a80 <_kill_r+0x1c>
 8010a7e:	6023      	str	r3, [r4, #0]
 8010a80:	bd38      	pop	{r3, r4, r5, pc}
 8010a82:	bf00      	nop
 8010a84:	2000cc98 	.word	0x2000cc98

08010a88 <_getpid_r>:
 8010a88:	f7f1 ba08 	b.w	8001e9c <_getpid>

08010a8c <__swhatbuf_r>:
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	460c      	mov	r4, r1
 8010a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a94:	b096      	sub	sp, #88	@ 0x58
 8010a96:	4615      	mov	r5, r2
 8010a98:	2900      	cmp	r1, #0
 8010a9a:	461e      	mov	r6, r3
 8010a9c:	da0c      	bge.n	8010ab8 <__swhatbuf_r+0x2c>
 8010a9e:	89a3      	ldrh	r3, [r4, #12]
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010aa6:	bf14      	ite	ne
 8010aa8:	2340      	movne	r3, #64	@ 0x40
 8010aaa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010aae:	2000      	movs	r0, #0
 8010ab0:	6031      	str	r1, [r6, #0]
 8010ab2:	602b      	str	r3, [r5, #0]
 8010ab4:	b016      	add	sp, #88	@ 0x58
 8010ab6:	bd70      	pop	{r4, r5, r6, pc}
 8010ab8:	466a      	mov	r2, sp
 8010aba:	f000 f849 	bl	8010b50 <_fstat_r>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	dbed      	blt.n	8010a9e <__swhatbuf_r+0x12>
 8010ac2:	9901      	ldr	r1, [sp, #4]
 8010ac4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010ac8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010acc:	4259      	negs	r1, r3
 8010ace:	4159      	adcs	r1, r3
 8010ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ad4:	e7eb      	b.n	8010aae <__swhatbuf_r+0x22>

08010ad6 <__smakebuf_r>:
 8010ad6:	898b      	ldrh	r3, [r1, #12]
 8010ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ada:	079d      	lsls	r5, r3, #30
 8010adc:	4606      	mov	r6, r0
 8010ade:	460c      	mov	r4, r1
 8010ae0:	d507      	bpl.n	8010af2 <__smakebuf_r+0x1c>
 8010ae2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ae6:	6023      	str	r3, [r4, #0]
 8010ae8:	6123      	str	r3, [r4, #16]
 8010aea:	2301      	movs	r3, #1
 8010aec:	6163      	str	r3, [r4, #20]
 8010aee:	b003      	add	sp, #12
 8010af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010af2:	ab01      	add	r3, sp, #4
 8010af4:	466a      	mov	r2, sp
 8010af6:	f7ff ffc9 	bl	8010a8c <__swhatbuf_r>
 8010afa:	9f00      	ldr	r7, [sp, #0]
 8010afc:	4605      	mov	r5, r0
 8010afe:	4630      	mov	r0, r6
 8010b00:	4639      	mov	r1, r7
 8010b02:	f7fd fbc3 	bl	800e28c <_malloc_r>
 8010b06:	b948      	cbnz	r0, 8010b1c <__smakebuf_r+0x46>
 8010b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b0c:	059a      	lsls	r2, r3, #22
 8010b0e:	d4ee      	bmi.n	8010aee <__smakebuf_r+0x18>
 8010b10:	f023 0303 	bic.w	r3, r3, #3
 8010b14:	f043 0302 	orr.w	r3, r3, #2
 8010b18:	81a3      	strh	r3, [r4, #12]
 8010b1a:	e7e2      	b.n	8010ae2 <__smakebuf_r+0xc>
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	6020      	str	r0, [r4, #0]
 8010b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b24:	81a3      	strh	r3, [r4, #12]
 8010b26:	9b01      	ldr	r3, [sp, #4]
 8010b28:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010b2c:	b15b      	cbz	r3, 8010b46 <__smakebuf_r+0x70>
 8010b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b32:	4630      	mov	r0, r6
 8010b34:	f000 f81e 	bl	8010b74 <_isatty_r>
 8010b38:	b128      	cbz	r0, 8010b46 <__smakebuf_r+0x70>
 8010b3a:	89a3      	ldrh	r3, [r4, #12]
 8010b3c:	f023 0303 	bic.w	r3, r3, #3
 8010b40:	f043 0301 	orr.w	r3, r3, #1
 8010b44:	81a3      	strh	r3, [r4, #12]
 8010b46:	89a3      	ldrh	r3, [r4, #12]
 8010b48:	431d      	orrs	r5, r3
 8010b4a:	81a5      	strh	r5, [r4, #12]
 8010b4c:	e7cf      	b.n	8010aee <__smakebuf_r+0x18>
	...

08010b50 <_fstat_r>:
 8010b50:	b538      	push	{r3, r4, r5, lr}
 8010b52:	2300      	movs	r3, #0
 8010b54:	4d06      	ldr	r5, [pc, #24]	@ (8010b70 <_fstat_r+0x20>)
 8010b56:	4604      	mov	r4, r0
 8010b58:	4608      	mov	r0, r1
 8010b5a:	4611      	mov	r1, r2
 8010b5c:	602b      	str	r3, [r5, #0]
 8010b5e:	f7f1 fa05 	bl	8001f6c <_fstat>
 8010b62:	1c43      	adds	r3, r0, #1
 8010b64:	d102      	bne.n	8010b6c <_fstat_r+0x1c>
 8010b66:	682b      	ldr	r3, [r5, #0]
 8010b68:	b103      	cbz	r3, 8010b6c <_fstat_r+0x1c>
 8010b6a:	6023      	str	r3, [r4, #0]
 8010b6c:	bd38      	pop	{r3, r4, r5, pc}
 8010b6e:	bf00      	nop
 8010b70:	2000cc98 	.word	0x2000cc98

08010b74 <_isatty_r>:
 8010b74:	b538      	push	{r3, r4, r5, lr}
 8010b76:	2300      	movs	r3, #0
 8010b78:	4d05      	ldr	r5, [pc, #20]	@ (8010b90 <_isatty_r+0x1c>)
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	4608      	mov	r0, r1
 8010b7e:	602b      	str	r3, [r5, #0]
 8010b80:	f7f1 fa04 	bl	8001f8c <_isatty>
 8010b84:	1c43      	adds	r3, r0, #1
 8010b86:	d102      	bne.n	8010b8e <_isatty_r+0x1a>
 8010b88:	682b      	ldr	r3, [r5, #0]
 8010b8a:	b103      	cbz	r3, 8010b8e <_isatty_r+0x1a>
 8010b8c:	6023      	str	r3, [r4, #0]
 8010b8e:	bd38      	pop	{r3, r4, r5, pc}
 8010b90:	2000cc98 	.word	0x2000cc98

08010b94 <acosf>:
 8010b94:	b508      	push	{r3, lr}
 8010b96:	ed2d 8b02 	vpush	{d8}
 8010b9a:	eeb0 8a40 	vmov.f32	s16, s0
 8010b9e:	f000 f8a5 	bl	8010cec <__ieee754_acosf>
 8010ba2:	eef0 8a40 	vmov.f32	s17, s0
 8010ba6:	eeb4 8a48 	vcmp.f32	s16, s16
 8010baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bae:	d615      	bvs.n	8010bdc <acosf+0x48>
 8010bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8010bb4:	f000 f838 	bl	8010c28 <fabsf>
 8010bb8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010bbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc4:	dd0a      	ble.n	8010bdc <acosf+0x48>
 8010bc6:	f7fc fc3f 	bl	800d448 <__errno>
 8010bca:	2321      	movs	r3, #33	@ 0x21
 8010bcc:	ecbd 8b02 	vpop	{d8}
 8010bd0:	6003      	str	r3, [r0, #0]
 8010bd2:	4805      	ldr	r0, [pc, #20]	@ (8010be8 <acosf+0x54>)
 8010bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010bd8:	f7fc bc7e 	b.w	800d4d8 <nanf>
 8010bdc:	eeb0 0a68 	vmov.f32	s0, s17
 8010be0:	ecbd 8b02 	vpop	{d8}
 8010be4:	bd08      	pop	{r3, pc}
 8010be6:	bf00      	nop
 8010be8:	0802e5d9 	.word	0x0802e5d9

08010bec <sqrtf>:
 8010bec:	b508      	push	{r3, lr}
 8010bee:	ed2d 8b02 	vpush	{d8}
 8010bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8010bf6:	f000 f875 	bl	8010ce4 <__ieee754_sqrtf>
 8010bfa:	eeb4 8a48 	vcmp.f32	s16, s16
 8010bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c02:	d60c      	bvs.n	8010c1e <sqrtf+0x32>
 8010c04:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010c24 <sqrtf+0x38>
 8010c08:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c10:	d505      	bpl.n	8010c1e <sqrtf+0x32>
 8010c12:	f7fc fc19 	bl	800d448 <__errno>
 8010c16:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010c1a:	2321      	movs	r3, #33	@ 0x21
 8010c1c:	6003      	str	r3, [r0, #0]
 8010c1e:	ecbd 8b02 	vpop	{d8}
 8010c22:	bd08      	pop	{r3, pc}
 8010c24:	00000000 	.word	0x00000000

08010c28 <fabsf>:
 8010c28:	ee10 3a10 	vmov	r3, s0
 8010c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c30:	ee00 3a10 	vmov	s0, r3
 8010c34:	4770      	bx	lr

08010c36 <fmaxf>:
 8010c36:	b508      	push	{r3, lr}
 8010c38:	ed2d 8b02 	vpush	{d8}
 8010c3c:	eeb0 8a40 	vmov.f32	s16, s0
 8010c40:	eef0 8a60 	vmov.f32	s17, s1
 8010c44:	f000 f832 	bl	8010cac <__fpclassifyf>
 8010c48:	b930      	cbnz	r0, 8010c58 <fmaxf+0x22>
 8010c4a:	eeb0 8a68 	vmov.f32	s16, s17
 8010c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8010c52:	ecbd 8b02 	vpop	{d8}
 8010c56:	bd08      	pop	{r3, pc}
 8010c58:	eeb0 0a68 	vmov.f32	s0, s17
 8010c5c:	f000 f826 	bl	8010cac <__fpclassifyf>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	d0f4      	beq.n	8010c4e <fmaxf+0x18>
 8010c64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c6c:	dded      	ble.n	8010c4a <fmaxf+0x14>
 8010c6e:	e7ee      	b.n	8010c4e <fmaxf+0x18>

08010c70 <fminf>:
 8010c70:	b508      	push	{r3, lr}
 8010c72:	ed2d 8b02 	vpush	{d8}
 8010c76:	eeb0 8a40 	vmov.f32	s16, s0
 8010c7a:	eef0 8a60 	vmov.f32	s17, s1
 8010c7e:	f000 f815 	bl	8010cac <__fpclassifyf>
 8010c82:	b930      	cbnz	r0, 8010c92 <fminf+0x22>
 8010c84:	eeb0 8a68 	vmov.f32	s16, s17
 8010c88:	eeb0 0a48 	vmov.f32	s0, s16
 8010c8c:	ecbd 8b02 	vpop	{d8}
 8010c90:	bd08      	pop	{r3, pc}
 8010c92:	eeb0 0a68 	vmov.f32	s0, s17
 8010c96:	f000 f809 	bl	8010cac <__fpclassifyf>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	d0f4      	beq.n	8010c88 <fminf+0x18>
 8010c9e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca6:	d5ed      	bpl.n	8010c84 <fminf+0x14>
 8010ca8:	e7ee      	b.n	8010c88 <fminf+0x18>
	...

08010cac <__fpclassifyf>:
 8010cac:	ee10 3a10 	vmov	r3, s0
 8010cb0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010cb4:	d00d      	beq.n	8010cd2 <__fpclassifyf+0x26>
 8010cb6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010cba:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010cbe:	d30a      	bcc.n	8010cd6 <__fpclassifyf+0x2a>
 8010cc0:	1e42      	subs	r2, r0, #1
 8010cc2:	4b07      	ldr	r3, [pc, #28]	@ (8010ce0 <__fpclassifyf+0x34>)
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d908      	bls.n	8010cda <__fpclassifyf+0x2e>
 8010cc8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010ccc:	4258      	negs	r0, r3
 8010cce:	4158      	adcs	r0, r3
 8010cd0:	4770      	bx	lr
 8010cd2:	2002      	movs	r0, #2
 8010cd4:	4770      	bx	lr
 8010cd6:	2004      	movs	r0, #4
 8010cd8:	4770      	bx	lr
 8010cda:	2003      	movs	r0, #3
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	007ffffe 	.word	0x007ffffe

08010ce4 <__ieee754_sqrtf>:
 8010ce4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ce8:	4770      	bx	lr
	...

08010cec <__ieee754_acosf>:
 8010cec:	b508      	push	{r3, lr}
 8010cee:	ee10 3a10 	vmov	r3, s0
 8010cf2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010cf6:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010cfa:	ed2d 8b0c 	vpush	{d8-d13}
 8010cfe:	d109      	bne.n	8010d14 <__ieee754_acosf+0x28>
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8010e94 <__ieee754_acosf+0x1a8>
 8010d06:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8010e98 <__ieee754_acosf+0x1ac>
 8010d0a:	fe37 0a80 	vselgt.f32	s0, s15, s0
 8010d0e:	ecbd 8b0c 	vpop	{d8-d13}
 8010d12:	bd08      	pop	{r3, pc}
 8010d14:	d904      	bls.n	8010d20 <__ieee754_acosf+0x34>
 8010d16:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010d1a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010d1e:	e7f6      	b.n	8010d0e <__ieee754_acosf+0x22>
 8010d20:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8010d24:	d23c      	bcs.n	8010da0 <__ieee754_acosf+0xb4>
 8010d26:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8010d2a:	f240 80af 	bls.w	8010e8c <__ieee754_acosf+0x1a0>
 8010d2e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010d32:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8010e9c <__ieee754_acosf+0x1b0>
 8010d36:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8010ea0 <__ieee754_acosf+0x1b4>
 8010d3a:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8010ea4 <__ieee754_acosf+0x1b8>
 8010d3e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010d42:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8010ea8 <__ieee754_acosf+0x1bc>
 8010d46:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010d4a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010eac <__ieee754_acosf+0x1c0>
 8010d4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d52:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8010eb0 <__ieee754_acosf+0x1c4>
 8010d56:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010d5a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8010eb4 <__ieee754_acosf+0x1c8>
 8010d5e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010d62:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8010eb8 <__ieee754_acosf+0x1cc>
 8010d66:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010d6a:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010ebc <__ieee754_acosf+0x1d0>
 8010d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d72:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010d76:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8010ec0 <__ieee754_acosf+0x1d4>
 8010d7a:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010d82:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010d86:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8010ec4 <__ieee754_acosf+0x1d8>
 8010d8a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010d8e:	eee0 7a46 	vfms.f32	s15, s0, s12
 8010d92:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010d96:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8010ec8 <__ieee754_acosf+0x1dc>
 8010d9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010d9e:	e7b6      	b.n	8010d0e <__ieee754_acosf+0x22>
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010da6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010daa:	eddf da3c 	vldr	s27, [pc, #240]	@ 8010e9c <__ieee754_acosf+0x1b0>
 8010dae:	eddf ca3c 	vldr	s25, [pc, #240]	@ 8010ea0 <__ieee754_acosf+0x1b4>
 8010db2:	ed9f ca3d 	vldr	s24, [pc, #244]	@ 8010ea8 <__ieee754_acosf+0x1bc>
 8010db6:	eddf ba3d 	vldr	s23, [pc, #244]	@ 8010eac <__ieee754_acosf+0x1c0>
 8010dba:	ed9f ba3d 	vldr	s22, [pc, #244]	@ 8010eb0 <__ieee754_acosf+0x1c4>
 8010dbe:	eddf 8a3d 	vldr	s17, [pc, #244]	@ 8010eb4 <__ieee754_acosf+0x1c8>
 8010dc2:	ed9f da3d 	vldr	s26, [pc, #244]	@ 8010eb8 <__ieee754_acosf+0x1cc>
 8010dc6:	eddf aa37 	vldr	s21, [pc, #220]	@ 8010ea4 <__ieee754_acosf+0x1b8>
 8010dca:	ed9f aa3c 	vldr	s20, [pc, #240]	@ 8010ebc <__ieee754_acosf+0x1d0>
 8010dce:	eddf 9a3c 	vldr	s19, [pc, #240]	@ 8010ec0 <__ieee754_acosf+0x1d4>
 8010dd2:	da28      	bge.n	8010e26 <__ieee754_acosf+0x13a>
 8010dd4:	ee30 8a09 	vadd.f32	s16, s0, s18
 8010dd8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010ddc:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8010de0:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8010de4:	eeac ca80 	vfma.f32	s24, s25, s0
 8010de8:	eeaa aa80 	vfma.f32	s20, s21, s0
 8010dec:	eeec ba00 	vfma.f32	s23, s24, s0
 8010df0:	eeea 9a00 	vfma.f32	s19, s20, s0
 8010df4:	eeab ba80 	vfma.f32	s22, s23, s0
 8010df8:	eea9 9a80 	vfma.f32	s18, s19, s0
 8010dfc:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8010e00:	ee68 8a80 	vmul.f32	s17, s17, s0
 8010e04:	f7ff ff6e 	bl	8010ce4 <__ieee754_sqrtf>
 8010e08:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010ecc <__ieee754_acosf+0x1e0>
 8010e0c:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8010e10:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010e14:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8010e18:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010e1c:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010ed0 <__ieee754_acosf+0x1e4>
 8010e20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010e24:	e773      	b.n	8010d0e <__ieee754_acosf+0x22>
 8010e26:	ee39 8a40 	vsub.f32	s16, s18, s0
 8010e2a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010e2e:	eeb0 0a48 	vmov.f32	s0, s16
 8010e32:	f7ff ff57 	bl	8010ce4 <__ieee754_sqrtf>
 8010e36:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8010e3a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8010e3e:	ee10 3a10 	vmov	r3, s0
 8010e42:	eeb0 6a48 	vmov.f32	s12, s16
 8010e46:	f36f 030b 	bfc	r3, #0, #12
 8010e4a:	ee07 3a90 	vmov	s15, r3
 8010e4e:	eeac ca88 	vfma.f32	s24, s25, s16
 8010e52:	eeaa aa88 	vfma.f32	s20, s21, s16
 8010e56:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010e5a:	ee70 6a27 	vadd.f32	s13, s0, s15
 8010e5e:	eeec ba08 	vfma.f32	s23, s24, s16
 8010e62:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010e66:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010e6a:	eeab ba88 	vfma.f32	s22, s23, s16
 8010e6e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010e72:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8010e76:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010e7a:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010e7e:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010e82:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010e86:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010e8a:	e740      	b.n	8010d0e <__ieee754_acosf+0x22>
 8010e8c:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8010ed4 <__ieee754_acosf+0x1e8>
 8010e90:	e73d      	b.n	8010d0e <__ieee754_acosf+0x22>
 8010e92:	bf00      	nop
 8010e94:	40490fdb 	.word	0x40490fdb
 8010e98:	00000000 	.word	0x00000000
 8010e9c:	3811ef08 	.word	0x3811ef08
 8010ea0:	3a4f7f04 	.word	0x3a4f7f04
 8010ea4:	bf303361 	.word	0xbf303361
 8010ea8:	bd241146 	.word	0xbd241146
 8010eac:	3e4e0aa8 	.word	0x3e4e0aa8
 8010eb0:	bea6b090 	.word	0xbea6b090
 8010eb4:	3e2aaaab 	.word	0x3e2aaaab
 8010eb8:	3d9dc62e 	.word	0x3d9dc62e
 8010ebc:	4001572d 	.word	0x4001572d
 8010ec0:	c019d139 	.word	0xc019d139
 8010ec4:	33a22168 	.word	0x33a22168
 8010ec8:	3fc90fda 	.word	0x3fc90fda
 8010ecc:	b3a22168 	.word	0xb3a22168
 8010ed0:	40490fda 	.word	0x40490fda
 8010ed4:	3fc90fdb 	.word	0x3fc90fdb

08010ed8 <_init>:
 8010ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eda:	bf00      	nop
 8010edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ede:	bc08      	pop	{r3}
 8010ee0:	469e      	mov	lr, r3
 8010ee2:	4770      	bx	lr

08010ee4 <_fini>:
 8010ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee6:	bf00      	nop
 8010ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eea:	bc08      	pop	{r3}
 8010eec:	469e      	mov	lr, r3
 8010eee:	4770      	bx	lr
