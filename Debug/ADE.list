
ADE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f4  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054e  0800f530  0800f530  00010530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa80  0800fa80  00010a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa88  0800fa88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800fa8c  0800fa8c  00010a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  0800fa90  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000860  200001ec  0800fc7c  000111ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000a4c  0800fc7c  00011a4c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025b58  00000000  00000000  00011222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004839  00000000  00000000  00036d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e10  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001752  00000000  00000000  0003d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039201  00000000  00000000  0003eb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029d69  00000000  00000000  00077d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162e5c  00000000  00000000  000a1a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002048e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000956c  00000000  00000000  00204924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0020de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001ec 	.word	0x200001ec
 8000254:	00000000 	.word	0x00000000
 8000258:	0800f514 	.word	0x0800f514

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f0 	.word	0x200001f0
 8000274:	0800f514 	.word	0x0800f514

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b4 	b.w	8001010 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	460c      	mov	r4, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14d      	bne.n	8000dd4 <__udivmoddi4+0xa8>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4696      	mov	lr, r2
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	d960      	bls.n	8000e08 <__udivmoddi4+0xdc>
 8000d46:	b14b      	cbz	r3, 8000d5c <__udivmoddi4+0x30>
 8000d48:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d56:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5a:	4317      	orrs	r7, r2
 8000d5c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d60:	fa1f f48e 	uxth.w	r4, lr
 8000d64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d68:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d6c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d70:	fb01 f004 	mul.w	r0, r1, r4
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x62>
 8000d7c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x60>
 8000d86:	4290      	cmp	r0, r2
 8000d88:	f200 812d 	bhi.w	8000fe6 <__udivmoddi4+0x2ba>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	fa1f fc8c 	uxth.w	ip, ip
 8000d94:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d98:	fb06 2210 	mls	r2, r6, r0, r2
 8000d9c:	fb00 f404 	mul.w	r4, r0, r4
 8000da0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da4:	4564      	cmp	r4, ip
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	4564      	cmp	r4, ip
 8000db4:	f200 811a 	bhi.w	8000fec <__udivmoddi4+0x2c0>
 8000db8:	4610      	mov	r0, r2
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	ebac 0c04 	sub.w	ip, ip, r4
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b125      	cbz	r5, 8000dd0 <__udivmoddi4+0xa4>
 8000dc6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d905      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd8:	b10d      	cbz	r5, 8000dde <__udivmoddi4+0xb2>
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4608      	mov	r0, r1
 8000de2:	e7f5      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d14d      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4290      	cmp	r0, r2
 8000df4:	f080 80ef 	bcs.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0e6      	beq.n	8000dd0 <__udivmoddi4+0xa4>
 8000e02:	e9c5 6300 	strd	r6, r3, [r5]
 8000e06:	e7e3      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80a2 	bne.w	8000f52 <__udivmoddi4+0x226>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa1f f68e 	uxth.w	r6, lr
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2a:	fb06 f004 	mul.w	r0, r6, r4
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80c8 	beq.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e50:	4644      	mov	r4, r8
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	fa1f fc8c 	uxth.w	ip, ip
 8000e58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e60:	fb00 f606 	mul.w	r6, r0, r6
 8000e64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e68:	4566      	cmp	r6, ip
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x150>
 8000e76:	4566      	cmp	r6, ip
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2c6>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e92:	fa22 f706 	lsr.w	r7, r2, r6
 8000e96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e9a:	40f4      	lsrs	r4, r6
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ea4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ea8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb8:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ec4:	45a1      	cmp	r9, r4
 8000ec6:	d90e      	bls.n	8000ee6 <__udivmoddi4+0x1ba>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ece:	bf2c      	ite	cs
 8000ed0:	f04f 0b01 	movcs.w	fp, #1
 8000ed4:	f04f 0b00 	movcc.w	fp, #0
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d903      	bls.n	8000ee4 <__udivmoddi4+0x1b8>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	f000 8093 	beq.w	800100a <__udivmoddi4+0x2de>
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	eba4 0409 	sub.w	r4, r4, r9
 8000eea:	fa1f f983 	uxth.w	r9, r3
 8000eee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ef2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ef6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d906      	bls.n	8000f10 <__udivmoddi4+0x1e4>
 8000f02:	193c      	adds	r4, r7, r4
 8000f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x1e2>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d87a      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	eba4 040c 	sub.w	r4, r4, ip
 8000f18:	fba0 9802 	umull	r9, r8, r0, r2
 8000f1c:	4544      	cmp	r4, r8
 8000f1e:	46cc      	mov	ip, r9
 8000f20:	4643      	mov	r3, r8
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0x1fe>
 8000f24:	d106      	bne.n	8000f34 <__udivmoddi4+0x208>
 8000f26:	45ce      	cmp	lr, r9
 8000f28:	d204      	bcs.n	8000f34 <__udivmoddi4+0x208>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f30:	eb68 0307 	sbc.w	r3, r8, r7
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x222>
 8000f36:	ebbe 020c 	subs.w	r2, lr, ip
 8000f3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f42:	fa22 f301 	lsr.w	r3, r2, r1
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	431e      	orrs	r6, r3
 8000f4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e73e      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000f52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f56:	f1c3 0120 	rsb	r1, r3, #32
 8000f5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f68:	fa20 f101 	lsr.w	r1, r0, r1
 8000f6c:	fa1f f68e 	uxth.w	r6, lr
 8000f70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f74:	430a      	orrs	r2, r1
 8000f76:	fb07 4410 	mls	r4, r7, r0, r4
 8000f7a:	0c11      	lsrs	r1, r2, #16
 8000f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f80:	fb00 f406 	mul.w	r4, r0, r6
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d90e      	bls.n	8000fa6 <__udivmoddi4+0x27a>
 8000f88:	eb1e 0101 	adds.w	r1, lr, r1
 8000f8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f90:	bf2c      	ite	cs
 8000f92:	f04f 0901 	movcs.w	r9, #1
 8000f96:	f04f 0900 	movcc.w	r9, #0
 8000f9a:	428c      	cmp	r4, r1
 8000f9c:	d902      	bls.n	8000fa4 <__udivmoddi4+0x278>
 8000f9e:	f1b9 0f00 	cmp.w	r9, #0
 8000fa2:	d02c      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	1b09      	subs	r1, r1, r4
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x2a2>
 8000fbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000fc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fc6:	d201      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d815      	bhi.n	8000ff8 <__udivmoddi4+0x2cc>
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fd4:	e721      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fd6:	1a86      	subs	r6, r0, r2
 8000fd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e70e      	b.n	8000dfe <__udivmoddi4+0xd2>
 8000fe0:	3c02      	subs	r4, #2
 8000fe2:	4472      	add	r2, lr
 8000fe4:	e735      	b.n	8000e52 <__udivmoddi4+0x126>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4472      	add	r2, lr
 8000fea:	e6d0      	b.n	8000d8e <__udivmoddi4+0x62>
 8000fec:	44f4      	add	ip, lr
 8000fee:	3802      	subs	r0, #2
 8000ff0:	e6e3      	b.n	8000dba <__udivmoddi4+0x8e>
 8000ff2:	44f4      	add	ip, lr
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x152>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e7e7      	b.n	8000fce <__udivmoddi4+0x2a2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4471      	add	r1, lr
 8001002:	e7d0      	b.n	8000fa6 <__udivmoddi4+0x27a>
 8001004:	3b02      	subs	r3, #2
 8001006:	443c      	add	r4, r7
 8001008:	e782      	b.n	8000f10 <__udivmoddi4+0x1e4>
 800100a:	3802      	subs	r0, #2
 800100c:	443c      	add	r4, r7
 800100e:	e76a      	b.n	8000ee6 <__udivmoddi4+0x1ba>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001018:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <MX_ADC1_Init+0x80>)
 800101a:	4a1f      	ldr	r2, [pc, #124]	@ (8001098 <MX_ADC1_Init+0x84>)
 800101c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_ADC1_Init+0x80>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001038:	2204      	movs	r2, #4
 800103a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_ADC1_Init+0x80>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_ADC1_Init+0x80>)
 800104c:	2201      	movs	r2, #1
 800104e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b10      	ldr	r3, [pc, #64]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <MX_ADC1_Init+0x80>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001062:	2200      	movs	r2, #0
 8001064:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001066:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <MX_ADC1_Init+0x80>)
 800106e:	2200      	movs	r2, #0
 8001070:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001074:	2200      	movs	r2, #0
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MX_ADC1_Init+0x80>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	@ (8001094 <MX_ADC1_Init+0x80>)
 8001082:	f001 f9f5 	bl	8002470 <HAL_ADC_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 fa5e 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000208 	.word	0x20000208
 8001098:	42028000 	.word	0x42028000

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ba      	sub	sp, #232	@ 0xe8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f00a fe36 	bl	800bd2e <memset>
  if(adcHandle->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a24      	ldr	r2, [pc, #144]	@ (8001158 <HAL_ADC_MspInit+0xbc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d140      	bne.n	800114e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80010cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80010d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f004 ff21 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80010f0:	f000 fa2c 	bl	800154c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_ADC_MspInit+0xc0>)
 80010f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010fa:	4a18      	ldr	r2, [pc, #96]	@ (800115c <HAL_ADC_MspInit+0xc0>)
 80010fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001100:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HAL_ADC_MspInit+0xc0>)
 8001106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800110a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_ADC_MspInit+0xc0>)
 8001114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001118:	4a10      	ldr	r2, [pc, #64]	@ (800115c <HAL_ADC_MspInit+0xc0>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_ADC_MspInit+0xc0>)
 8001124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001130:	2301      	movs	r3, #1
 8001132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <HAL_ADC_MspInit+0xc4>)
 800114a:	f003 f865 	bl	8004218 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	37e8      	adds	r7, #232	@ 0xe8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	42028000 	.word	0x42028000
 800115c:	46020c00 	.word	0x46020c00
 8001160:	42020800 	.word	0x42020800

08001164 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <MX_GPDMA1_Init+0x3c>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <MX_GPDMA1_Init+0x3c>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <MX_GPDMA1_Init+0x3c>)
 800117c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel14_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2056      	movs	r0, #86	@ 0x56
 800118e:	f001 fcf1 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel14_IRQn);
 8001192:	2056      	movs	r0, #86	@ 0x56
 8001194:	f001 fd08 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	46020c00 	.word	0x46020c00

080011a4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c0:	4a31      	ldr	r2, [pc, #196]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011de:	4a2a      	ldr	r2, [pc, #168]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011e8:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fc:	4a22      	ldr	r2, [pc, #136]	@ (8001288 <MX_GPIO_Init+0xe4>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <MX_GPIO_Init+0xe4>)
 8001208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_GPIO_Init+0xe4>)
 8001216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121a:	4a1b      	ldr	r2, [pc, #108]	@ (8001288 <MX_GPIO_Init+0xe4>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_GPIO_Init+0xe4>)
 8001226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2104      	movs	r1, #4
 8001236:	4815      	ldr	r0, [pc, #84]	@ (800128c <MX_GPIO_Init+0xe8>)
 8001238:	f003 f9c6 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(m2_lr_sel_GPIO_Port, m2_lr_sel_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4813      	ldr	r0, [pc, #76]	@ (8001290 <MX_GPIO_Init+0xec>)
 8001242:	f003 f9c1 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : m1_lr_sel_Pin */
  GPIO_InitStruct.Pin = m1_lr_sel_Pin;
 8001246:	2304      	movs	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(m1_lr_sel_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480b      	ldr	r0, [pc, #44]	@ (800128c <MX_GPIO_Init+0xe8>)
 800125e:	f002 ffdb 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : m2_lr_sel_Pin */
  GPIO_InitStruct.Pin = m2_lr_sel_Pin;
 8001262:	2304      	movs	r3, #4
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(m2_lr_sel_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_GPIO_Init+0xec>)
 800127a:	f002 ffcd 	bl	8004218 <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	@ 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	46020c00 	.word	0x46020c00
 800128c:	42021000 	.word	0x42021000
 8001290:	42020400 	.word	0x42020400

08001294 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001298:	2000      	movs	r0, #0
 800129a:	f003 fa17 	bl	80046cc <HAL_ICACHE_ConfigAssociativityMode>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80012a4:	f000 f952 	bl	800154c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80012a8:	f003 fa30 	bl	800470c <HAL_ICACHE_Enable>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80012b2:	f000 f94b 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}

080012ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d013      	beq.n	80012fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80012d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80012da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012e2:	e000      	b.n	80012e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f9      	beq.n	80012e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012fa:	687b      	ldr	r3, [r7, #4]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_SAI_RxCpltCallback>:





void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai){
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]

  timestamp = HAL_GetTick();
 8001310:	f000 ff80 	bl	8002214 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	4a16      	ldr	r2, [pc, #88]	@ (8001370 <HAL_SAI_RxCpltCallback+0x68>)
 8001318:	6013      	str	r3, [r2, #0]
  l_sample = (int) (audio_buffer[0] << 16) | (audio_buffer[1]);
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_SAI_RxCpltCallback+0x6c>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	041b      	lsls	r3, r3, #16
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <HAL_SAI_RxCpltCallback+0x6c>)
 8001322:	8852      	ldrh	r2, [r2, #2]
 8001324:	4313      	orrs	r3, r2
 8001326:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <HAL_SAI_RxCpltCallback+0x70>)
 8001328:	6013      	str	r3, [r2, #0]
  r_sample = (int) (audio_buffer[2] << 16) | (audio_buffer[3]);
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_SAI_RxCpltCallback+0x6c>)
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	041b      	lsls	r3, r3, #16
 8001330:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <HAL_SAI_RxCpltCallback+0x6c>)
 8001332:	88d2      	ldrh	r2, [r2, #6]
 8001334:	4313      	orrs	r3, r2
 8001336:	4a11      	ldr	r2, [pc, #68]	@ (800137c <HAL_SAI_RxCpltCallback+0x74>)
 8001338:	6013      	str	r3, [r2, #0]
  sprintf(serial_Buffer, "left=%d,right=%d,%lu\n", l_sample, r_sample,timestamp);
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_SAI_RxCpltCallback+0x70>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_SAI_RxCpltCallback+0x74>)
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_SAI_RxCpltCallback+0x68>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	460b      	mov	r3, r1
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <HAL_SAI_RxCpltCallback+0x78>)
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <HAL_SAI_RxCpltCallback+0x7c>)
 800134e:	f00a fc8b 	bl	800bc68 <siprintf>
  HAL_UART_Transmit(&huart1, serial_Buffer, strlen(serial_Buffer), 250);
 8001352:	480c      	ldr	r0, [pc, #48]	@ (8001384 <HAL_SAI_RxCpltCallback+0x7c>)
 8001354:	f7fe ff90 	bl	8000278 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	23fa      	movs	r3, #250	@ 0xfa
 800135e:	4909      	ldr	r1, [pc, #36]	@ (8001384 <HAL_SAI_RxCpltCallback+0x7c>)
 8001360:	4809      	ldr	r0, [pc, #36]	@ (8001388 <HAL_SAI_RxCpltCallback+0x80>)
 8001362:	f008 fe1f 	bl	8009fa4 <HAL_UART_Transmit>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002d8 	.word	0x200002d8
 8001374:	20000294 	.word	0x20000294
 8001378:	2000029c 	.word	0x2000029c
 800137c:	200002a0 	.word	0x200002a0
 8001380:	0800f530 	.word	0x0800f530
 8001384:	200002a4 	.word	0x200002a4
 8001388:	2000047c 	.word	0x2000047c

0800138c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001390:	f000 fefc 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001394:	f000 f89e 	bl	80014d4 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 f838 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f7ff ff02 	bl	80011a4 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80013a0:	f7ff fee0 	bl	8001164 <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 80013a4:	f7ff ff76 	bl	8001294 <MX_ICACHE_Init>
  MX_SAI1_Init();
 80013a8:	f000 f8d6 	bl	8001558 <MX_SAI1_Init>
  MX_USB_OTG_FS_HCD_Init();
 80013ac:	f000 fce2 	bl	8001d74 <MX_USB_OTG_FS_HCD_Init>
  MX_USART1_UART_Init();
 80013b0:	f000 fc2a 	bl	8001c08 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80013b4:	f7ff fe2e 	bl	8001014 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 fdb7 	bl	8001f2c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 fdb4 	bl	8001f2c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f000 fdb1 	bl	8001f2c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80013ca:	2101      	movs	r1, #1
 80013cc:	2000      	movs	r0, #0
 80013ce:	f000 fe3d 	bl	800204c <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Set Mics SAI1 A Left and Right
  HAL_GPIO_WritePin(m1_lr_sel_GPIO_Port, m1_lr_sel_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2104      	movs	r1, #4
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <main+0x70>)
 80013d8:	f003 f8f6 	bl	80045c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(m2_lr_sel_GPIO_Port, m2_lr_sel_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2104      	movs	r1, #4
 80013e0:	4807      	ldr	r0, [pc, #28]	@ (8001400 <main+0x74>)
 80013e2:	f003 f8f1 	bl	80045c8 <HAL_GPIO_WritePin>

  if (HAL_SAI_Receive_DMA(&hsai_BlockA1, audio_buffer, AUDIO_BUFFER_SIZE) != HAL_OK)
 80013e6:	2204      	movs	r2, #4
 80013e8:	4906      	ldr	r1, [pc, #24]	@ (8001404 <main+0x78>)
 80013ea:	4807      	ldr	r0, [pc, #28]	@ (8001408 <main+0x7c>)
 80013ec:	f007 fcdc 	bl	8008da8 <HAL_SAI_Receive_DMA>
  {

//	   sprintf(serial_Buffer, "left=%d,right=%d\n", l_sample, r_sample);
//	   HAL_UART_Transmit(hcom_uart, serial_Buffer, strlen(serial_Buffer), 250);
       //printf("hello world\n");
	   HAL_Delay(500);
 80013f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013f4:	f000 ff1a 	bl	800222c <HAL_Delay>
 80013f8:	e7fa      	b.n	80013f0 <main+0x64>
 80013fa:	bf00      	nop
 80013fc:	42021000 	.word	0x42021000
 8001400:	42020400 	.word	0x42020400
 8001404:	20000294 	.word	0x20000294
 8001408:	200002dc 	.word	0x200002dc

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b09e      	sub	sp, #120	@ 0x78
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	2260      	movs	r2, #96	@ 0x60
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f00a fc87 	bl	800bd2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
 800142e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001430:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001434:	f003 f97a 	bl	800472c <HAL_PWREx_ControlVoltageScaling>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800143e:	f000 f885 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001442:	2332      	movs	r3, #50	@ 0x32
 8001444:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001446:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001452:	2310      	movs	r3, #16
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001456:	2301      	movs	r3, #1
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800145a:	2310      	movs	r3, #16
 800145c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800145e:	2300      	movs	r3, #0
 8001460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2302      	movs	r3, #2
 8001464:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001466:	2301      	movs	r3, #1
 8001468:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800146a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800146e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001470:	2303      	movs	r3, #3
 8001472:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001474:	230a      	movs	r3, #10
 8001476:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001478:	2302      	movs	r3, #2
 800147a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800147c:	2302      	movs	r3, #2
 800147e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001484:	230c      	movs	r3, #12
 8001486:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fa67 	bl	8004964 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800149c:	f000 f856 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	231f      	movs	r3, #31
 80014a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2303      	movs	r3, #3
 80014a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	2104      	movs	r1, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f004 f92d 	bl	800571c <HAL_RCC_ClockConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014c8:	f000 f840 	bl	800154c <Error_Handler>
  }
}
 80014cc:	bf00      	nop
 80014ce:	3778      	adds	r7, #120	@ 0x78
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014d8:	f003 fa34 	bl	8004944 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80014dc:	2002      	movs	r0, #2
 80014de:	f003 f9b1 	bl	8004844 <HAL_PWREx_ConfigSupply>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemPower_Config+0x18>
  {
    Error_Handler();
 80014e8:	f000 f830 	bl	800154c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e009      	b.n	8001516 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	60ba      	str	r2, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fed5 	bl	80012ba <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	dbf1      	blt.n	8001502 <_write+0x12>
  }
  return len;
 800151e:	687b      	ldr	r3, [r7, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800153a:	f000 fe57 	bl	80021ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40014800 	.word	0x40014800

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <MX_SAI1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel14;
DMA_HandleTypeDef handle_GPDMA1_Channel14;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_SAI1_Init+0x64>)
 800155e:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <MX_SAI1_Init+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_SAI1_Init+0x64>)
 8001564:	2201      	movs	r2, #1
 8001566:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_SAI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_SAI1_Init+0x64>)
 8001570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001574:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_SAI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_SAI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_SAI1_Init+0x64>)
 8001584:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001588:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_SAI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_SAI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_SAI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <MX_SAI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80015a2:	2302      	movs	r3, #2
 80015a4:	2202      	movs	r2, #2
 80015a6:	2100      	movs	r1, #0
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_SAI1_Init+0x64>)
 80015aa:	f007 f957 	bl	800885c <HAL_SAI_InitProtocol>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 80015b4:	f7ff ffca 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002dc 	.word	0x200002dc
 80015c0:	40015404 	.word	0x40015404

080015c4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0d4      	sub	sp, #336	@ 0x150
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80015ce:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015d2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80015d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015dc:	4618      	mov	r0, r3
 80015de:	23c0      	movs	r3, #192	@ 0xc0
 80015e0:	461a      	mov	r2, r3
 80015e2:	2100      	movs	r1, #0
 80015e4:	f00a fba3 	bl	800bd2e <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80015e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80015ec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a98      	ldr	r2, [pc, #608]	@ (8001858 <HAL_SAI_MspInit+0x294>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	f040 8128 	bne.w	800184c <HAL_SAI_MspInit+0x288>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80015fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001600:	f5a3 71a0 	sub.w	r1, r3, #320	@ 0x140
 8001604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001610:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001614:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001618:	2200      	movs	r2, #0
 800161a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_MSI;
 800161e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001622:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001626:	2201      	movs	r2, #1
 8001628:	609a      	str	r2, [r3, #8]
    PeriphClkInit.PLL2.PLL2M = 3;
 800162a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800162e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001632:	2203      	movs	r2, #3
 8001634:	60da      	str	r2, [r3, #12]
    PeriphClkInit.PLL2.PLL2N = 8;
 8001636:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800163a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800163e:	2208      	movs	r2, #8
 8001640:	611a      	str	r2, [r3, #16]
    PeriphClkInit.PLL2.PLL2P = 1;
 8001642:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001646:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800164a:	2201      	movs	r2, #1
 800164c:	615a      	str	r2, [r3, #20]
    PeriphClkInit.PLL2.PLL2Q = 2;
 800164e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001652:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001656:	2202      	movs	r2, #2
 8001658:	619a      	str	r2, [r3, #24]
    PeriphClkInit.PLL2.PLL2R = 2;
 800165a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800165e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001662:	2202      	movs	r2, #2
 8001664:	61da      	str	r2, [r3, #28]
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8001666:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800166a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800166e:	220c      	movs	r2, #12
 8001670:	621a      	str	r2, [r3, #32]
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 8001672:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001676:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 800167e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001682:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001686:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4618      	mov	r0, r3
 8001692:	f004 fc4b 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_SAI_MspInit+0xdc>
    {
      Error_Handler();
 800169c:	f7ff ff56 	bl	800154c <Error_Handler>
    }

    if (SAI1_client == 0)
 80016a0:	4b6e      	ldr	r3, [pc, #440]	@ (800185c <HAL_SAI_MspInit+0x298>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11e      	bne.n	80016e6 <HAL_SAI_MspInit+0x122>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80016a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001860 <HAL_SAI_MspInit+0x29c>)
 80016aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001860 <HAL_SAI_MspInit+0x29c>)
 80016b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016b8:	4b69      	ldr	r3, [pc, #420]	@ (8001860 <HAL_SAI_MspInit+0x29c>)
 80016ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016be:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80016c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80016d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016d4:	681b      	ldr	r3, [r3, #0]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	205a      	movs	r0, #90	@ 0x5a
 80016dc:	f001 fa4a 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80016e0:	205a      	movs	r0, #90	@ 0x5a
 80016e2:	f001 fa61 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 80016e6:	4b5d      	ldr	r3, [pc, #372]	@ (800185c <HAL_SAI_MspInit+0x298>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a5b      	ldr	r2, [pc, #364]	@ (800185c <HAL_SAI_MspInit+0x298>)
 80016ee:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016f0:	2370      	movs	r3, #112	@ 0x70
 80016f2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001708:	230d      	movs	r3, #13
 800170a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170e:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001712:	4619      	mov	r1, r3
 8001714:	4853      	ldr	r0, [pc, #332]	@ (8001864 <HAL_SAI_MspInit+0x2a0>)
 8001716:	f002 fd7f 	bl	8004218 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 800171a:	2322      	movs	r3, #34	@ 0x22
 800171c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Request = GPDMA1_REQUEST_SAI1_A;
 8001720:	2324      	movs	r3, #36	@ 0x24
 8001722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001738:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800173c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001740:	2301      	movs	r3, #1
 8001742:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001746:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800174a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcBurstLength = 1;
 800174e:	2301      	movs	r3, #1
 8001750:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.DestBurstLength = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 800176c:	2301      	movs	r3, #1
 800176e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel14) != HAL_OK)
 800179c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80017a0:	4931      	ldr	r1, [pc, #196]	@ (8001868 <HAL_SAI_MspInit+0x2a4>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 feee 	bl	8003584 <HAL_DMAEx_List_BuildNode>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_SAI_MspInit+0x1ee>
    {
      Error_Handler();
 80017ae:	f7ff fecd 	bl	800154c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel14, NULL, &Node_GPDMA1_Channel14) != HAL_OK)
 80017b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001868 <HAL_SAI_MspInit+0x2a4>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	482d      	ldr	r0, [pc, #180]	@ (800186c <HAL_SAI_MspInit+0x2a8>)
 80017b8:	f001 fefa 	bl	80035b0 <HAL_DMAEx_List_InsertNode>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_SAI_MspInit+0x202>
    {
      Error_Handler();
 80017c2:	f7ff fec3 	bl	800154c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel14) != HAL_OK)
 80017c6:	4829      	ldr	r0, [pc, #164]	@ (800186c <HAL_SAI_MspInit+0x2a8>)
 80017c8:	f001 ffbb 	bl	8003742 <HAL_DMAEx_List_SetCircularMode>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_SAI_MspInit+0x212>
    {
      Error_Handler();
 80017d2:	f7ff febb 	bl	800154c <Error_Handler>
    }

    handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 80017d6:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 80017d8:	4a26      	ldr	r2, [pc, #152]	@ (8001874 <HAL_SAI_MspInit+0x2b0>)
 80017da:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel14.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80017dc:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 80017de:	2200      	movs	r2, #0
 80017e0:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel14.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80017e2:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel14.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80017e8:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel14.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017ee:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel14.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80017f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 80017f6:	2281      	movs	r2, #129	@ 0x81
 80017f8:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 80017fa:	481d      	ldr	r0, [pc, #116]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 80017fc:	f001 fd02 	bl	8003204 <HAL_DMAEx_List_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_SAI_MspInit+0x246>
    {
      Error_Handler();
 8001806:	f7ff fea1 	bl	800154c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel14, &List_GPDMA1_Channel14) != HAL_OK)
 800180a:	4918      	ldr	r1, [pc, #96]	@ (800186c <HAL_SAI_MspInit+0x2a8>)
 800180c:	4818      	ldr	r0, [pc, #96]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 800180e:	f001 fff9 	bl	8003804 <HAL_DMAEx_List_LinkQ>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_SAI_MspInit+0x258>
    {
      Error_Handler();
 8001818:	f7ff fe98 	bl	800154c <Error_Handler>
    }

    __HAL_LINKDMA(saiHandle, hdmarx, handle_GPDMA1_Channel14);
 800181c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001820:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 8001828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800182c:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 800182e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001832:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 800183a:	2110      	movs	r1, #16
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <HAL_SAI_MspInit+0x2ac>)
 800183e:	f001 fc7f 	bl	8003140 <HAL_DMA_ConfigChannelAttributes>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_SAI_MspInit+0x288>
    {
      Error_Handler();
 8001848:	f7ff fe80 	bl	800154c <Error_Handler>
    }

    }
}
 800184c:	bf00      	nop
 800184e:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40015404 	.word	0x40015404
 800185c:	20000428 	.word	0x20000428
 8001860:	46020c00 	.word	0x46020c00
 8001864:	42021000 	.word	0x42021000
 8001868:	20000374 	.word	0x20000374
 800186c:	20000398 	.word	0x20000398
 8001870:	200003b0 	.word	0x200003b0
 8001874:	40020750 	.word	0x40020750

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_MspInit+0x3c>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001884:	4a0b      	ldr	r2, [pc, #44]	@ (80018b4 <HAL_MspInit+0x3c>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_MspInit+0x3c>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 800189c:	f003 f822 	bl	80048e4 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddA();
 80018a0:	f003 f840 	bl	8004924 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80018a4:	2004      	movs	r0, #4
 80018a6:	f001 f95a 	bl	8002b5e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	46020c00 	.word	0x46020c00

080018b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80018c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_InitTick+0xcc>)
 80018ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <HAL_InitTick+0xcc>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <HAL_InitTick+0xcc>)
 80018da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e6:	f107 0210 	add.w	r2, r7, #16
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 fa5d 	bl	8005db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018f6:	f004 fa33 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 80018fa:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018fe:	4a22      	ldr	r2, [pc, #136]	@ (8001988 <HAL_InitTick+0xd0>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	3b01      	subs	r3, #1
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_InitTick+0xd4>)
 800190c:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <HAL_InitTick+0xd8>)
 800190e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001910:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <HAL_InitTick+0xd4>)
 8001912:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001916:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001918:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_InitTick+0xd4>)
 800191a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_InitTick+0xd4>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_InitTick+0xd4>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800192a:	4818      	ldr	r0, [pc, #96]	@ (800198c <HAL_InitTick+0xd4>)
 800192c:	f007 ff2b 	bl	8009786 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001936:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800193e:	4813      	ldr	r0, [pc, #76]	@ (800198c <HAL_InitTick+0xd4>)
 8001940:	f007 ff82 	bl	8009848 <HAL_TIM_Base_Start_IT>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800194a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10e      	bne.n	8001970 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d808      	bhi.n	800196a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	2047      	movs	r0, #71	@ 0x47
 800195e:	f001 f909 	bl	8002b74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001962:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <HAL_InitTick+0xdc>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e002      	b.n	8001970 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001970:	2047      	movs	r0, #71	@ 0x47
 8001972:	f001 f919 	bl	8002ba8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001976:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800197a:	4618      	mov	r0, r3
 800197c:	3738      	adds	r7, #56	@ 0x38
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	46020c00 	.word	0x46020c00
 8001988:	431bde83 	.word	0x431bde83
 800198c:	2000042c 	.word	0x2000042c
 8001990:	40014800 	.word	0x40014800
 8001994:	2000001c 	.word	0x2000001c

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <NMI_Handler+0x4>

080019a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <MemManage_Handler+0x4>

080019b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <UsageFault_Handler+0x4>

080019c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 fb9d 	bl	800213c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <TIM17_IRQHandler+0x10>)
 8001a0e:	f007 ffbb 	bl	8009988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000042c 	.word	0x2000042c

08001a1c <GPDMA1_Channel14_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 14 global interrupt.
  */
void GPDMA1_Channel14_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 0 */

  /* USER CODE END GPDMA1_Channel14_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel14);
 8001a20:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <GPDMA1_Channel14_IRQHandler+0x10>)
 8001a22:	f001 fa2c 	bl	8002e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 1 */

  /* USER CODE END GPDMA1_Channel14_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200003b0 	.word	0x200003b0

08001a30 <SAI1_IRQHandler>:

/**
  * @brief This function handles Serial Audio Interface 1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <SAI1_IRQHandler+0x10>)
 8001a36:	f007 fa97 	bl	8008f68 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002dc 	.word	0x200002dc

08001a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_kill>:

int _kill(int pid, int sig)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5e:	f00a f9b9 	bl	800bdd4 <__errno>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2216      	movs	r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
  return -1;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_exit>:

void _exit (int status)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe7 	bl	8001a54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a86:	bf00      	nop
 8001a88:	e7fd      	b.n	8001a86 <_exit+0x12>

08001a8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e00a      	b.n	8001ab2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	60ba      	str	r2, [r7, #8]
 8001aa8:	b2ca      	uxtb	r2, r1
 8001aaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbf0      	blt.n	8001a9c <_read+0x12>
  }

  return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aec:	605a      	str	r2, [r3, #4]
  return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_isatty>:

int _isatty(int file)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f00a f93a 	bl	800bdd4 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200c0000 	.word	0x200c0000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	20000478 	.word	0x20000478
 8001b94:	20000a50 	.word	0x20000a50

08001b98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <SystemInit+0x68>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	4a17      	ldr	r2, [pc, #92]	@ (8001c00 <SystemInit+0x68>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <SystemInit+0x6c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <SystemInit+0x6c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <SystemInit+0x6c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <SystemInit+0x6c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <SystemInit+0x6c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c04 <SystemInit+0x6c>)
 8001bca:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001bce:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <SystemInit+0x6c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <SystemInit+0x6c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <SystemInit+0x6c>)
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <SystemInit+0x6c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <SystemInit+0x68>)
 8001bee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bf2:	609a      	str	r2, [r3, #8]
  #endif
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	46020c00 	.word	0x46020c00

08001c08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c0e:	4a23      	ldr	r2, [pc, #140]	@ (8001c9c <MX_USART1_UART_Init+0x94>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001c12:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c14:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <MX_USART1_UART_Init+0x98>)
 8001c16:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4e:	4812      	ldr	r0, [pc, #72]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c50:	f008 f958 	bl	8009f04 <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001c5a:	f7ff fc77 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c62:	f008 fe37 	bl	800a8d4 <HAL_UARTEx_SetTxFifoThreshold>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001c6c:	f7ff fc6e 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	4809      	ldr	r0, [pc, #36]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c74:	f008 fe6c 	bl	800a950 <HAL_UARTEx_SetRxFifoThreshold>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001c7e:	f7ff fc65 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_USART1_UART_Init+0x90>)
 8001c84:	f008 fded 	bl	800a862 <HAL_UARTEx_DisableFifoMode>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001c8e:	f7ff fc5d 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000047c 	.word	0x2000047c
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	001e8480 	.word	0x001e8480

08001ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	22c0      	movs	r2, #192	@ 0xc0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00a f832 	bl	800bd2e <memset>
  if(uartHandle->Instance==USART1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_UART_MspInit+0xc4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d145      	bne.n	8001d60 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cd4:	f04f 0201 	mov.w	r2, #1
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 f91f 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001cf4:	f7ff fc2a 	bl	800154c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <HAL_UART_MspInit+0xc8>)
 8001cfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <HAL_UART_MspInit+0xc8>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d04:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_UART_MspInit+0xc8>)
 8001d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_UART_MspInit+0xc8>)
 8001d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d1c:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <HAL_UART_MspInit+0xc8>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <HAL_UART_MspInit+0xc8>)
 8001d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <HAL_UART_MspInit+0xcc>)
 8001d5c:	f002 fa5c 	bl	8004218 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d60:	bf00      	nop
 8001d62:	37e8      	adds	r7, #232	@ 0xe8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	46020c00 	.word	0x46020c00
 8001d70:	42020000 	.word	0x42020000

08001d74 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <MX_USB_OTG_FS_HCD_Init+0x48>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001d80:	220c      	movs	r2, #12
 8001d82:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001d92:	2202      	movs	r2, #2
 8001d94:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	739a      	strb	r2, [r3, #14]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8001da4:	f002 fc28 	bl	80045f8 <HAL_HCD_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USB_OTG_FS_HCD_Init+0x3e>
  {
    Error_Handler();
 8001dae:	f7ff fbcd 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000510 	.word	0x20000510
 8001dbc:	42040000 	.word	0x42040000

08001dc0 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0bc      	sub	sp, #240	@ 0xf0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	22c0      	movs	r2, #192	@ 0xc0
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f009 ffa4 	bl	800bd2e <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a38      	ldr	r2, [pc, #224]	@ (8001ecc <HAL_HCD_MspInit+0x10c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d169      	bne.n	8001ec4 <HAL_HCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001df0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 f890 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 8001e12:	f7ff fb9b 	bl	800154c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e34:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001e38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e4e:	230a      	movs	r3, #10
 8001e50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481e      	ldr	r0, [pc, #120]	@ (8001ed4 <HAL_HCD_MspInit+0x114>)
 8001e5c:	f002 f9dc 	bl	8004218 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e66:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d119      	bne.n	8001ec0 <HAL_HCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e92:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001eaa:	f002 fd1b 	bl	80048e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <HAL_HCD_MspInit+0x110>)
 8001eb6:	f023 0304 	bic.w	r3, r3, #4
 8001eba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ebe:	e001      	b.n	8001ec4 <HAL_HCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001ec0:	f002 fd10 	bl	80048e4 <HAL_PWREx_EnableVddUSB>
}
 8001ec4:	bf00      	nop
 8001ec6:	37f0      	adds	r7, #240	@ 0xf0
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	42040000 	.word	0x42040000
 8001ed0:	46020c00 	.word	0x46020c00
 8001ed4:	42020000 	.word	0x42020000

08001ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f10 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001edc:	f7ff fe5c 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ee0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ee2:	e003      	b.n	8001eec <LoopCopyDataInit>

08001ee4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ee6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ee8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001eea:	3104      	adds	r1, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001eec:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ef0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ef2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ef4:	d3f6      	bcc.n	8001ee4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ef8:	e002      	b.n	8001f00 <LoopFillZerobss>

08001efa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001efa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001efc:	f842 3b04 	str.w	r3, [r2], #4

08001f00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <LoopForever+0x16>)
	cmp	r2, r3
 8001f02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f04:	d3f9      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f06:	f009 ff6b 	bl	800bde0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0a:	f7ff fa3f 	bl	800138c <main>

08001f0e <LoopForever>:

LoopForever:
    b LoopForever
 8001f0e:	e7fe      	b.n	8001f0e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f10:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001f14:	0800fa90 	.word	0x0800fa90
	ldr	r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f1c:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8001f20:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8001f24:	20000a4c 	.word	0x20000a4c

08001f28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC1_IRQHandler>
	...

08001f2c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	@ 0x38
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d009      	beq.n	8001f58 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <BSP_LED_Init+0x2c>
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d003      	beq.n	8001f58 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f50:	f06f 0301 	mvn.w	r3, #1
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f56:	e06e      	b.n	8002036 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10f      	bne.n	8001f7e <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001f5e:	4b38      	ldr	r3, [pc, #224]	@ (8002040 <BSP_LED_Init+0x114>)
 8001f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f64:	4a36      	ldr	r2, [pc, #216]	@ (8002040 <BSP_LED_Init+0x114>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f6e:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <BSP_LED_Init+0x114>)
 8001f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	e046      	b.n	800200c <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10f      	bne.n	8001fa4 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001f84:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <BSP_LED_Init+0x114>)
 8001f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002040 <BSP_LED_Init+0x114>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f94:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <BSP_LED_Init+0x114>)
 8001f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	e033      	b.n	800200c <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa4:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <BSP_LED_Init+0x114>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d110      	bne.n	8001fd4 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <BSP_LED_Init+0x114>)
 8001fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb8:	4a21      	ldr	r2, [pc, #132]	@ (8002040 <BSP_LED_Init+0x114>)
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <BSP_LED_Init+0x114>)
 8001fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001fd4:	f002 fc96 	bl	8004904 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d107      	bne.n	8001fee <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <BSP_LED_Init+0x114>)
 8001fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe4:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <BSP_LED_Init+0x114>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001fee:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <BSP_LED_Init+0x114>)
 8001ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff4:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <BSP_LED_Init+0x114>)
 8001ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ffa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <BSP_LED_Init+0x114>)
 8002000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4a0d      	ldr	r2, [pc, #52]	@ (8002044 <BSP_LED_Init+0x118>)
 8002010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002014:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	4a08      	ldr	r2, [pc, #32]	@ (8002048 <BSP_LED_Init+0x11c>)
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	f107 021c 	add.w	r2, r7, #28
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f002 f8f1 	bl	8004218 <HAL_GPIO_Init>
  }

  return ret;
 8002036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002038:	4618      	mov	r0, r3
 800203a:	3738      	adds	r7, #56	@ 0x38
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	46020c00 	.word	0x46020c00
 8002044:	0800f5a0 	.word	0x0800f5a0
 8002048:	20000004 	.word	0x20000004

0800204c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	460a      	mov	r2, r1
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	4613      	mov	r3, r2
 800205a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800205c:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <BSP_PB_Init+0xd4>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002062:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <BSP_PB_Init+0xd4>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800206c:	4b2c      	ldr	r3, [pc, #176]	@ (8002120 <BSP_PB_Init+0xd4>)
 800206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800207a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002080:	2302      	movs	r3, #2
 8002082:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a23      	ldr	r2, [pc, #140]	@ (8002124 <BSP_PB_Init+0xd8>)
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 f8b9 	bl	8004218 <HAL_GPIO_Init>
 80020a6:	e036      	b.n	8002116 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <BSP_PB_Init+0xdc>)
 80020aa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002124 <BSP_PB_Init+0xd8>)
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	f107 020c 	add.w	r2, r7, #12
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 f8ac 	bl	8004218 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4a18      	ldr	r2, [pc, #96]	@ (800212c <BSP_PB_Init+0xe0>)
 80020cc:	441a      	add	r2, r3
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4917      	ldr	r1, [pc, #92]	@ (8002130 <BSP_PB_Init+0xe4>)
 80020d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f002 f840 	bl	800415e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4a10      	ldr	r2, [pc, #64]	@ (800212c <BSP_PB_Init+0xe0>)
 80020ea:	1898      	adds	r0, r3, r2
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4a11      	ldr	r2, [pc, #68]	@ (8002134 <BSP_PB_Init+0xe8>)
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	461a      	mov	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	f002 f805 	bl	8004106 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80020fc:	2018      	movs	r0, #24
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	4a0d      	ldr	r2, [pc, #52]	@ (8002138 <BSP_PB_Init+0xec>)
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	f000 fd33 	bl	8002b74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800210e:	2318      	movs	r3, #24
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fd49 	bl	8002ba8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	46020c00 	.word	0x46020c00
 8002124:	20000010 	.word	0x20000010
 8002128:	10110000 	.word	0x10110000
 800212c:	200008f0 	.word	0x200008f0
 8002130:	0800f5a8 	.word	0x0800f5a8
 8002134:	20000014 	.word	0x20000014
 8002138:	20000018 	.word	0x20000018

0800213c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002146:	79fa      	ldrb	r2, [r7, #7]
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <BSP_PB_IRQHandler+0x28>)
 8002152:	4413      	add	r3, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f002 f817 	bl	8004188 <HAL_EXTI_IRQHandler>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200008f0 	.word	0x200008f0

08002168 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff fff0 	bl	8002168 <BSP_PB_Callback>
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <HAL_Init+0x50>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_Init+0x50>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 fcde 	bl	8002b5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021a2:	f003 fcad 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0d      	ldr	r3, [pc, #52]	@ (80021e0 <HAL_Init+0x54>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	490c      	ldr	r1, [pc, #48]	@ (80021e4 <HAL_Init+0x58>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	4a0b      	ldr	r2, [pc, #44]	@ (80021e8 <HAL_Init+0x5c>)
 80021ba:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80021bc:	2004      	movs	r0, #4
 80021be:	f000 fd01 	bl	8002bc4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fb78 	bl	80018b8 <HAL_InitTick>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e002      	b.n	80021d8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021d2:	f7ff fb51 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40022000 	.word	0x40022000
 80021e0:	46020c00 	.word	0x46020c00
 80021e4:	0800f548 	.word	0x0800f548
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000020 	.word	0x20000020
 8002210:	200008fc 	.word	0x200008fc

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200008fc 	.word	0x200008fc

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff ffee 	bl	8002214 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002252:	bf00      	nop
 8002254:	f7ff ffde 	bl	8002214 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000020 	.word	0x20000020

08002274 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <LL_ADC_SetResolution+0x3c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d104      	bne.n	80022bc <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f023 020c 	bic.w	r2, r3, #12
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	46021000 	.word	0x46021000

080022dc <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	2a00      	cmp	r2, #0
 8002306:	d002      	beq.n	800230e <LL_ADC_SetGainCompensation+0x32>
 8002308:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800230c:	e000      	b.n	8002310 <LL_ADC_SetGainCompensation+0x34>
 800230e:	2200      	movs	r2, #0
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2107      	movs	r1, #7
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	401a      	ands	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002370:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6093      	str	r3, [r2, #8]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002398:	d101      	bne.n	800239e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023e8:	d101      	bne.n	80023ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <LL_ADC_IsEnabled+0x18>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <LL_ADC_IsEnabled+0x1a>
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b04      	cmp	r3, #4
 8002434:	d101      	bne.n	800243a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b08      	cmp	r3, #8
 800245a:	d101      	bne.n	8002460 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e2b3      	b.n	80029f8 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a8b      	ldr	r2, [pc, #556]	@ (80026cc <HAL_ADC_Init+0x25c>)
 800249e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fe fdf7 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff5f 	bl	8002384 <LL_ADC_IsDeepPowerDownEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff45 	bl	8002360 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff7a 	bl	80023d4 <LL_ADC_IsInternalRegulatorEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d115      	bne.n	8002512 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff5e 	bl	80023ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f0:	4b77      	ldr	r3, [pc, #476]	@ (80026d0 <HAL_ADC_Init+0x260>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	4a77      	ldr	r2, [pc, #476]	@ (80026d4 <HAL_ADC_Init+0x264>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002504:	e002      	b.n	800250c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3b01      	subs	r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f9      	bne.n	8002506 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff5c 	bl	80023d4 <LL_ADC_IsInternalRegulatorEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002526:	f043 0210 	orr.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff6c 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 800254a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 8244 	bne.w	80029e2 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8240 	bne.w	80029e2 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002566:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800256a:	f043 0202 	orr.w	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff40 	bl	80023fc <LL_ADC_IsEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d140      	bne.n	8002604 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a51      	ldr	r2, [pc, #324]	@ (80026cc <HAL_ADC_Init+0x25c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d028      	beq.n	80025de <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a51      	ldr	r2, [pc, #324]	@ (80026d8 <HAL_ADC_Init+0x268>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d109      	bne.n	80025aa <HAL_ADC_Init+0x13a>
 8002596:	4850      	ldr	r0, [pc, #320]	@ (80026d8 <HAL_ADC_Init+0x268>)
 8002598:	f7ff ff30 	bl	80023fc <LL_ADC_IsEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e008      	b.n	80025bc <HAL_ADC_Init+0x14c>
 80025aa:	4848      	ldr	r0, [pc, #288]	@ (80026cc <HAL_ADC_Init+0x25c>)
 80025ac:	f7ff ff26 	bl	80023fc <LL_ADC_IsEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d021      	beq.n	8002604 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a44      	ldr	r2, [pc, #272]	@ (80026d8 <HAL_ADC_Init+0x268>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Init+0x15e>
 80025ca:	4a44      	ldr	r2, [pc, #272]	@ (80026dc <HAL_ADC_Init+0x26c>)
 80025cc:	e000      	b.n	80025d0 <HAL_ADC_Init+0x160>
 80025ce:	4a44      	ldr	r2, [pc, #272]	@ (80026e0 <HAL_ADC_Init+0x270>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7ff fe4c 	bl	8002274 <LL_ADC_SetCommonClock>
 80025dc:	e012      	b.n	8002604 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7ff fe57 	bl	800229c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80025ee:	4b3c      	ldr	r3, [pc, #240]	@ (80026e0 <HAL_ADC_Init+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80025fe:	4938      	ldr	r1, [pc, #224]	@ (80026e0 <HAL_ADC_Init+0x270>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_ADC_Init+0x25c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d010      	beq.n	8002630 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002614:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800261a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8002620:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002628:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800262a:	4313      	orrs	r3, r2
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	e030      	b.n	8002692 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7f1b      	ldrb	r3, [r3, #28]
 8002634:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800263c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800263e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002644:	2a00      	cmp	r2, #0
 8002646:	d002      	beq.n	800264e <HAL_ADC_Init+0x1de>
 8002648:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800264c:	e000      	b.n	8002650 <HAL_ADC_Init+0x1e0>
 800264e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002650:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002656:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da04      	bge.n	800266a <HAL_ADC_Init+0x1fa>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002668:	e001      	b.n	800266e <HAL_ADC_Init+0x1fe>
 800266a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800266e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4918      	ldr	r1, [pc, #96]	@ (80026d8 <HAL_ADC_Init+0x268>)
 8002676:	428b      	cmp	r3, r1
 8002678:	d103      	bne.n	8002682 <HAL_ADC_Init+0x212>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002680:	e003      	b.n	800268a <HAL_ADC_Init+0x21a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002688:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800268a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800268c:	6a3a      	ldr	r2, [r7, #32]
 800268e:	4313      	orrs	r3, r2
 8002690:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d12f      	bne.n	80026fc <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	@ (80026cc <HAL_ADC_Init+0x25c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	3b01      	subs	r3, #1
 80026ac:	045b      	lsls	r3, r3, #17
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	e022      	b.n	80026fc <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d111      	bne.n	80026e4 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	e018      	b.n	80026fc <HAL_ADC_Init+0x28c>
 80026ca:	bf00      	nop
 80026cc:	46021000 	.word	0x46021000
 80026d0:	20000000 	.word	0x20000000
 80026d4:	053e2d63 	.word	0x053e2d63
 80026d8:	42028000 	.word	0x42028000
 80026dc:	42028308 	.word	0x42028308
 80026e0:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a92      	ldr	r2, [pc, #584]	@ (800294c <HAL_ADC_Init+0x4dc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d018      	beq.n	8002738 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002712:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	4313      	orrs	r3, r2
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	4313      	orrs	r3, r2
 8002720:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <HAL_ADC_Init+0x4e0>)
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	6a39      	ldr	r1, [r7, #32]
 8002732:	430b      	orrs	r3, r1
 8002734:	60d3      	str	r3, [r2, #12]
 8002736:	e031      	b.n	800279c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002744:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	4313      	orrs	r3, r2
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	4313      	orrs	r3, r2
 8002752:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b7e      	ldr	r3, [pc, #504]	@ (8002954 <HAL_ADC_Init+0x4e4>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	6a39      	ldr	r1, [r7, #32]
 8002764:	430b      	orrs	r3, r1
 8002766:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	@ (800294c <HAL_ADC_Init+0x4dc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	f000 8093 	beq.w	80028ce <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fe38 	bl	8002422 <LL_ADC_REG_IsConversionOngoing>
 80027b2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fe45 	bl	8002448 <LL_ADC_INJ_IsConversionOngoing>
 80027be:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d161      	bne.n	800288a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d15e      	bne.n	800288a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7f1b      	ldrb	r3, [r3, #28]
 80027d0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4960      	ldr	r1, [pc, #384]	@ (8002958 <HAL_ADC_Init+0x4e8>)
 80027d8:	428b      	cmp	r3, r1
 80027da:	d102      	bne.n	80027e2 <HAL_ADC_Init+0x372>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e0:	e002      	b.n	80027e8 <HAL_ADC_Init+0x378>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e6:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	430b      	orrs	r3, r1
 8002802:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7ff fd60 	bl	80022dc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002822:	2b01      	cmp	r3, #1
 8002824:	d11e      	bne.n	8002864 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	4b4a      	ldr	r3, [pc, #296]	@ (800295c <HAL_ADC_Init+0x4ec>)
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800283a:	0411      	lsls	r1, r2, #16
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002840:	4311      	orrs	r1, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800284c:	4311      	orrs	r1, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002852:	0892      	lsrs	r2, r2, #2
 8002854:	430a      	orrs	r2, r1
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	e007      	b.n	8002874 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10c      	bne.n	80028ac <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002898:	f023 010f 	bic.w	r1, r3, #15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028aa:	e007      	b.n	80028bc <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 020f 	bic.w	r2, r2, #15
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028cc:	e092      	b.n	80029f4 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d111      	bne.n	80028fc <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028e0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80028e6:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80028ec:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <HAL_ADC_Init+0x4f0>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	69f9      	ldr	r1, [r7, #28]
 800290c:	430b      	orrs	r3, r1
 800290e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002918:	461a      	mov	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	f7ff fd01 	bl	8002322 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002928:	461a      	mov	r2, r3
 800292a:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800292e:	f7ff fcf8 	bl	8002322 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f062 020f 	orn	r2, r2, #15
 8002948:	629a      	str	r2, [r3, #40]	@ 0x28
 800294a:	e024      	b.n	8002996 <HAL_ADC_Init+0x526>
 800294c:	46021000 	.word	0x46021000
 8002950:	fff0c013 	.word	0xfff0c013
 8002954:	ffde800d 	.word	0xffde800d
 8002958:	42028000 	.word	0x42028000
 800295c:	fc00f81e 	.word	0xfc00f81e
 8002960:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800296c:	d113      	bne.n	8002996 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f003 031c 	and.w	r3, r3, #28
 8002980:	f06f 020f 	mvn.w	r2, #15
 8002984:	fa02 f103 	lsl.w	r1, r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <HAL_ADC_Init+0x590>)
 800299e:	4013      	ands	r3, r2
 80029a0:	6a3a      	ldr	r2, [r7, #32]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d10b      	bne.n	80029be <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029b0:	f023 0303 	bic.w	r3, r3, #3
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029bc:	e01a      	b.n	80029f4 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029c2:	f023 0312 	bic.w	r3, r3, #18
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80029e0:	e008      	b.n	80029f4 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029e6:	f043 0210 	orr.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3728      	adds	r7, #40	@ 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	833ffff3 	.word	0x833ffff3

08002a04 <__NVIC_SetPriorityGrouping>:
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4907      	ldr	r1, [pc, #28]	@ (8002aa0 <__NVIC_EnableIRQ+0x38>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000e100 	.word	0xe000e100

08002aa4 <__NVIC_SetPriority>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	db0a      	blt.n	8002ace <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	490c      	ldr	r1, [pc, #48]	@ (8002af0 <__NVIC_SetPriority+0x4c>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	0112      	lsls	r2, r2, #4
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002acc:	e00a      	b.n	8002ae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4908      	ldr	r1, [pc, #32]	@ (8002af4 <__NVIC_SetPriority+0x50>)
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	3b04      	subs	r3, #4
 8002adc:	0112      	lsls	r2, r2, #4
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	761a      	strb	r2, [r3, #24]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000e100 	.word	0xe000e100
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <NVIC_EncodePriority>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f1c3 0307 	rsb	r3, r3, #7
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	bf28      	it	cs
 8002b16:	2304      	movcs	r3, #4
 8002b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d902      	bls.n	8002b28 <NVIC_EncodePriority+0x30>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3b03      	subs	r3, #3
 8002b26:	e000      	b.n	8002b2a <NVIC_EncodePriority+0x32>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b40:	f04f 31ff 	mov.w	r1, #4294967295
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	4313      	orrs	r3, r2
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3724      	adds	r7, #36	@ 0x24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff4c 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b82:	f7ff ff63 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	6978      	ldr	r0, [r7, #20]
 8002b8e:	f7ff ffb3 	bl	8002af8 <NVIC_EncodePriority>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff82 	bl	8002aa4 <__NVIC_SetPriority>
}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff56 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d844      	bhi.n	8002c5c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002bfb 	.word	0x08002bfb
 8002bdc:	08002c19 	.word	0x08002c19
 8002be0:	08002c3b 	.word	0x08002c3b
 8002be4:	08002c5d 	.word	0x08002c5d
 8002be8:	08002bed 	.word	0x08002bed
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002bec:	4b1f      	ldr	r3, [pc, #124]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6013      	str	r3, [r2, #0]
      break;
 8002bf8:	e031      	b.n	8002c5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c00:	f023 0304 	bic.w	r3, r3, #4
 8002c04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002c06:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c0c:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c0e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c16:	e022      	b.n	8002c5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c18:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c1e:	f023 0304 	bic.w	r3, r3, #4
 8002c22:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c2a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c2e:	4a10      	ldr	r2, [pc, #64]	@ (8002c70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c38:	e011      	b.n	8002c5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c6c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c50:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c5a:	e000      	b.n	8002c5e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002c5c:	bf00      	nop
  }
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010
 8002c70:	46020c00 	.word	0x46020c00

08002c74 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04f      	b.n	8002d2c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_DMA_Start_IT+0x26>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e048      	b.n	8002d2c <HAL_DMA_Start_IT+0xb8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d136      	bne.n	8002d1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fa78 	bl	80031b8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8002cd6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cee:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d06:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e007      	b.n	8002d2c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	@ 0x40
 8002d20:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002d3c:	f7ff fa6a 	bl	8002214 <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e06b      	b.n	8002e24 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d008      	beq.n	8002d6a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e05c      	b.n	8002e24 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0204 	orr.w	r2, r2, #4
 8002d78:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2205      	movs	r2, #5
 8002d7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002d82:	e020      	b.n	8002dc6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002d84:	f7ff fa46 	bl	8002214 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d919      	bls.n	8002dc6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2203      	movs	r2, #3
 8002da2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db6:	2201      	movs	r2, #1
 8002db8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e02e      	b.n	8002e24 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0d7      	beq.n	8002d84 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0202 	orr.w	r2, r2, #2
 8002de2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2204      	movs	r2, #4
 8002de8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002df4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0e:	2201      	movs	r2, #1
 8002e10:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e019      	b.n	8002e72 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d004      	beq.n	8002e54 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e00e      	b.n	8002e72 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002e8e:	f023 030f 	bic.w	r3, r3, #15
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	3b50      	subs	r3, #80	@ 0x50
 8002e9e:	09db      	lsrs	r3, r3, #7
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 813b 	beq.w	8003134 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ee2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f14:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d011      	beq.n	8002f54 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f46:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d011      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f78:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f043 0208 	orr.w	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002faa:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d04c      	beq.n	8003064 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d045      	beq.n	8003064 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fe0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d12e      	bne.n	800304c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0202 	orr.w	r2, r2, #2
 800300c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003026:	2201      	movs	r2, #1
 8003028:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d07a      	beq.n	8003138 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	4798      	blx	r3
        }

        return;
 800304a:	e075      	b.n	8003138 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2205      	movs	r2, #5
 8003050:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d039      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d032      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d116      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	2201      	movs	r2, #1
 80030ae:	731a      	strb	r2, [r3, #12]
 80030b0:	e008      	b.n	80030c4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80030cc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d025      	beq.n	800313a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0202 	orr.w	r2, r2, #2
 80030fc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800310a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003116:	2201      	movs	r2, #1
 8003118:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	4798      	blx	r3
 8003132:	e002      	b.n	800313a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003134:	bf00      	nop
 8003136:	e000      	b.n	800313a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003138:	bf00      	nop
    }
  }
}
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e02b      	b.n	80031ac <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800315c:	f023 030f 	bic.w	r3, r3, #15
 8003160:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316a:	3b50      	subs	r3, #80	@ 0x50
 800316c:	09db      	lsrs	r3, r3, #7
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	2201      	movs	r2, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f003 0311 	and.w	r3, r3, #17
 800318a:	2b11      	cmp	r3, #17
 800318c:	d106      	bne.n	800319c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	431a      	orrs	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e006      	b.n	80031aa <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	401a      	ands	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	041b      	lsls	r3, r3, #16
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b291      	uxth	r1, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	430b      	orrs	r3, r1
 80031da:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80031e4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff f802 	bl	8002214 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0db      	b.n	80033d4 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6e      	ldr	r2, [pc, #440]	@ (80033dc <HAL_DMAEx_List_Init+0x1d8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	f000 809f 	beq.w	8003366 <HAL_DMAEx_List_Init+0x162>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a6c      	ldr	r2, [pc, #432]	@ (80033e0 <HAL_DMAEx_List_Init+0x1dc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	f000 8099 	beq.w	8003366 <HAL_DMAEx_List_Init+0x162>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6a      	ldr	r2, [pc, #424]	@ (80033e4 <HAL_DMAEx_List_Init+0x1e0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	f000 8093 	beq.w	8003366 <HAL_DMAEx_List_Init+0x162>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a68      	ldr	r2, [pc, #416]	@ (80033e8 <HAL_DMAEx_List_Init+0x1e4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	f000 808d 	beq.w	8003366 <HAL_DMAEx_List_Init+0x162>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a66      	ldr	r2, [pc, #408]	@ (80033ec <HAL_DMAEx_List_Init+0x1e8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	f000 8087 	beq.w	8003366 <HAL_DMAEx_List_Init+0x162>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a64      	ldr	r2, [pc, #400]	@ (80033f0 <HAL_DMAEx_List_Init+0x1ec>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f000 8081 	beq.w	8003366 <HAL_DMAEx_List_Init+0x162>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a62      	ldr	r2, [pc, #392]	@ (80033f4 <HAL_DMAEx_List_Init+0x1f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d07b      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a61      	ldr	r2, [pc, #388]	@ (80033f8 <HAL_DMAEx_List_Init+0x1f4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d076      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5f      	ldr	r2, [pc, #380]	@ (80033fc <HAL_DMAEx_List_Init+0x1f8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d071      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5e      	ldr	r2, [pc, #376]	@ (8003400 <HAL_DMAEx_List_Init+0x1fc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d06c      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5c      	ldr	r2, [pc, #368]	@ (8003404 <HAL_DMAEx_List_Init+0x200>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d067      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a5b      	ldr	r2, [pc, #364]	@ (8003408 <HAL_DMAEx_List_Init+0x204>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d062      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a59      	ldr	r2, [pc, #356]	@ (800340c <HAL_DMAEx_List_Init+0x208>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d05d      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a58      	ldr	r2, [pc, #352]	@ (8003410 <HAL_DMAEx_List_Init+0x20c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d058      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a56      	ldr	r2, [pc, #344]	@ (8003414 <HAL_DMAEx_List_Init+0x210>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d053      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a55      	ldr	r2, [pc, #340]	@ (8003418 <HAL_DMAEx_List_Init+0x214>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04e      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a53      	ldr	r2, [pc, #332]	@ (800341c <HAL_DMAEx_List_Init+0x218>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d049      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a52      	ldr	r2, [pc, #328]	@ (8003420 <HAL_DMAEx_List_Init+0x21c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d044      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a50      	ldr	r2, [pc, #320]	@ (8003424 <HAL_DMAEx_List_Init+0x220>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03f      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a4f      	ldr	r2, [pc, #316]	@ (8003428 <HAL_DMAEx_List_Init+0x224>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d03a      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_DMAEx_List_Init+0x228>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d035      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003430 <HAL_DMAEx_List_Init+0x22c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d030      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4a      	ldr	r2, [pc, #296]	@ (8003434 <HAL_DMAEx_List_Init+0x230>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02b      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a49      	ldr	r2, [pc, #292]	@ (8003438 <HAL_DMAEx_List_Init+0x234>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d026      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a47      	ldr	r2, [pc, #284]	@ (800343c <HAL_DMAEx_List_Init+0x238>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d021      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a46      	ldr	r2, [pc, #280]	@ (8003440 <HAL_DMAEx_List_Init+0x23c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01c      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a44      	ldr	r2, [pc, #272]	@ (8003444 <HAL_DMAEx_List_Init+0x240>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d017      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a43      	ldr	r2, [pc, #268]	@ (8003448 <HAL_DMAEx_List_Init+0x244>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d012      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a41      	ldr	r2, [pc, #260]	@ (800344c <HAL_DMAEx_List_Init+0x248>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00d      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a40      	ldr	r2, [pc, #256]	@ (8003450 <HAL_DMAEx_List_Init+0x24c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d008      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3e      	ldr	r2, [pc, #248]	@ (8003454 <HAL_DMAEx_List_Init+0x250>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <HAL_DMAEx_List_Init+0x162>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a3d      	ldr	r2, [pc, #244]	@ (8003458 <HAL_DMAEx_List_Init+0x254>)
 8003364:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0206 	orr.w	r2, r2, #6
 8003384:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003386:	e00f      	b.n	80033a8 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003388:	f7fe ff44 	bl	8002214 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b05      	cmp	r3, #5
 8003394:	d908      	bls.n	80033a8 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2210      	movs	r2, #16
 800339a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2203      	movs	r2, #3
 80033a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e015      	b.n	80033d4 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e8      	bne.n	8003388 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 faba 	bl	8003930 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40020050 	.word	0x40020050
 80033e0:	50020050 	.word	0x50020050
 80033e4:	400200d0 	.word	0x400200d0
 80033e8:	500200d0 	.word	0x500200d0
 80033ec:	40020150 	.word	0x40020150
 80033f0:	50020150 	.word	0x50020150
 80033f4:	400201d0 	.word	0x400201d0
 80033f8:	500201d0 	.word	0x500201d0
 80033fc:	40020250 	.word	0x40020250
 8003400:	50020250 	.word	0x50020250
 8003404:	400202d0 	.word	0x400202d0
 8003408:	500202d0 	.word	0x500202d0
 800340c:	40020350 	.word	0x40020350
 8003410:	50020350 	.word	0x50020350
 8003414:	400203d0 	.word	0x400203d0
 8003418:	500203d0 	.word	0x500203d0
 800341c:	40020450 	.word	0x40020450
 8003420:	50020450 	.word	0x50020450
 8003424:	400204d0 	.word	0x400204d0
 8003428:	500204d0 	.word	0x500204d0
 800342c:	40020550 	.word	0x40020550
 8003430:	50020550 	.word	0x50020550
 8003434:	400205d0 	.word	0x400205d0
 8003438:	500205d0 	.word	0x500205d0
 800343c:	40020650 	.word	0x40020650
 8003440:	50020650 	.word	0x50020650
 8003444:	400206d0 	.word	0x400206d0
 8003448:	500206d0 	.word	0x500206d0
 800344c:	40020750 	.word	0x40020750
 8003450:	50020750 	.word	0x50020750
 8003454:	400207d0 	.word	0x400207d0
 8003458:	500207d0 	.word	0x500207d0

0800345c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_DMAEx_List_Start_IT+0x16>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e082      	b.n	800357c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800347c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003488:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d005      	beq.n	800349c <HAL_DMAEx_List_Start_IT+0x40>
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d16a      	bne.n	800356c <HAL_DMAEx_List_Start_IT+0x110>
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d067      	beq.n	800356c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d157      	bne.n	8003558 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_DMAEx_List_Start_IT+0x5a>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e062      	b.n	800357c <HAL_DMAEx_List_Start_IT+0x120>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ca:	2202      	movs	r2, #2
 80034cc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80034ea:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003502:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f107 010c 	add.w	r1, r7, #12
 8003526:	2200      	movs	r2, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fd1d 	bl	8003f68 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	0c0b      	lsrs	r3, r1, #16
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800354c:	4013      	ands	r3, r2
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e007      	b.n	800357c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2240      	movs	r2, #64	@ 0x40
 8003570:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_DMAEx_List_BuildNode+0x16>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e004      	b.n	80035a8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fb1d 	bl	8003be0 <DMA_List_BuildNode>

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08c      	sub	sp, #48	@ 0x30
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_DMAEx_List_InsertNode+0x18>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b6      	b.n	800373a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d104      	bne.n	80035de <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2204      	movs	r2, #4
 80035d8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0ad      	b.n	800373a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fc52 	bl	8003e90 <DMA_List_CheckNodesBaseAddresses>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2205      	movs	r2, #5
 80035f6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e09e      	b.n	800373a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fc73 	bl	8003ef0 <DMA_List_CheckNodesTypes>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2204      	movs	r2, #4
 8003614:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e08f      	b.n	800373a <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003626:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800362a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fc99 	bl	8003f68 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11a      	bne.n	8003674 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e06c      	b.n	800372c <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800365e:	4013      	ands	r3, r2
 8003660:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003664:	4319      	orrs	r1, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2202      	movs	r2, #2
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	e05b      	b.n	800372c <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003684:	4013      	ands	r3, r2
 8003686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800368a:	4319      	orrs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e043      	b.n	8003722 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	461a      	mov	r2, r3
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fc8e 	bl	8003fc8 <DMA_List_FindNode>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d132      	bne.n	8003718 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d11a      	bne.n	80036f2 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80036ce:	4013      	ands	r3, r2
 80036d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d4:	4319      	orrs	r1, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80036e2:	4013      	ands	r3, r2
 80036e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e8:	4319      	orrs	r1, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80036f0:	e017      	b.n	8003722 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80036f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003708:	4013      	ands	r3, r2
 800370a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800370c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800370e:	4319      	orrs	r1, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003716:	e004      	b.n	8003722 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2206      	movs	r2, #6
 800371c:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e00b      	b.n	800373a <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3730      	adds	r7, #48	@ 0x30
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b08a      	sub	sp, #40	@ 0x28
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e052      	b.n	80037fa <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e049      	b.n	80037fa <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d101      	bne.n	800377e <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e03d      	b.n	80037fa <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2204      	movs	r2, #4
 8003782:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e038      	b.n	80037fa <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d104      	bne.n	800379a <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e02f      	b.n	80037fa <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f107 0220 	add.w	r2, r7, #32
 80037ae:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fbd8 	bl	8003f68 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	461a      	mov	r2, r3
 80037c2:	2100      	movs	r1, #0
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fbff 	bl	8003fc8 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80037d4:	4013      	ands	r3, r2
 80037d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4610      	mov	r0, r2
 80037dc:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80037de:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80037e0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3728      	adds	r7, #40	@ 0x28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_DMAEx_List_LinkQ+0x16>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e072      	b.n	8003904 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003824:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d002      	beq.n	8003838 <HAL_DMAEx_List_LinkQ+0x34>
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d108      	bne.n	800384a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2240      	movs	r2, #64	@ 0x40
 800383c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e05c      	b.n	8003904 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	7b1b      	ldrb	r3, [r3, #12]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d104      	bne.n	800385e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2201      	movs	r2, #1
 8003858:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e052      	b.n	8003904 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2b      	ldr	r2, [pc, #172]	@ (8003910 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a29      	ldr	r2, [pc, #164]	@ (8003914 <HAL_DMAEx_List_LinkQ+0x110>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01d      	beq.n	80038ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a28      	ldr	r2, [pc, #160]	@ (8003918 <HAL_DMAEx_List_LinkQ+0x114>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_DMAEx_List_LinkQ+0xaa>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a26      	ldr	r2, [pc, #152]	@ (800391c <HAL_DMAEx_List_LinkQ+0x118>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a25      	ldr	r2, [pc, #148]	@ (8003920 <HAL_DMAEx_List_LinkQ+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_DMAEx_List_LinkQ+0xaa>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a23      	ldr	r2, [pc, #140]	@ (8003924 <HAL_DMAEx_List_LinkQ+0x120>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_DMAEx_List_LinkQ+0xaa>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a22      	ldr	r2, [pc, #136]	@ (8003928 <HAL_DMAEx_List_LinkQ+0x124>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_DMAEx_List_LinkQ+0xaa>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a20      	ldr	r2, [pc, #128]	@ (800392c <HAL_DMAEx_List_LinkQ+0x128>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_DMAEx_List_LinkQ+0xae>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_DMAEx_List_LinkQ+0xb0>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2203      	movs	r2, #3
 80038ca:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e019      	b.n	8003904 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d4:	2b81      	cmp	r3, #129	@ 0x81
 80038d6:	d108      	bne.n	80038ea <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10d      	bne.n	80038fc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2204      	movs	r2, #4
 80038e4:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00c      	b.n	8003904 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2204      	movs	r2, #4
 80038f6:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e003      	b.n	8003904 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40020650 	.word	0x40020650
 8003914:	50020650 	.word	0x50020650
 8003918:	400206d0 	.word	0x400206d0
 800391c:	500206d0 	.word	0x500206d0
 8003920:	40020750 	.word	0x40020750
 8003924:	50020750 	.word	0x50020750
 8003928:	400207d0 	.word	0x400207d0
 800392c:	500207d0 	.word	0x500207d0

08003930 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a85      	ldr	r2, [pc, #532]	@ (8003b60 <DMA_List_Init+0x230>)
 800394a:	4293      	cmp	r3, r2
 800394c:	f000 80a0 	beq.w	8003a90 <DMA_List_Init+0x160>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a83      	ldr	r2, [pc, #524]	@ (8003b64 <DMA_List_Init+0x234>)
 8003956:	4293      	cmp	r3, r2
 8003958:	f000 809a 	beq.w	8003a90 <DMA_List_Init+0x160>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a81      	ldr	r2, [pc, #516]	@ (8003b68 <DMA_List_Init+0x238>)
 8003962:	4293      	cmp	r3, r2
 8003964:	f000 8094 	beq.w	8003a90 <DMA_List_Init+0x160>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a7f      	ldr	r2, [pc, #508]	@ (8003b6c <DMA_List_Init+0x23c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	f000 808e 	beq.w	8003a90 <DMA_List_Init+0x160>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7d      	ldr	r2, [pc, #500]	@ (8003b70 <DMA_List_Init+0x240>)
 800397a:	4293      	cmp	r3, r2
 800397c:	f000 8088 	beq.w	8003a90 <DMA_List_Init+0x160>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a7b      	ldr	r2, [pc, #492]	@ (8003b74 <DMA_List_Init+0x244>)
 8003986:	4293      	cmp	r3, r2
 8003988:	f000 8082 	beq.w	8003a90 <DMA_List_Init+0x160>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a79      	ldr	r2, [pc, #484]	@ (8003b78 <DMA_List_Init+0x248>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d07c      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a78      	ldr	r2, [pc, #480]	@ (8003b7c <DMA_List_Init+0x24c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d077      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a76      	ldr	r2, [pc, #472]	@ (8003b80 <DMA_List_Init+0x250>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d072      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a75      	ldr	r2, [pc, #468]	@ (8003b84 <DMA_List_Init+0x254>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d06d      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a73      	ldr	r2, [pc, #460]	@ (8003b88 <DMA_List_Init+0x258>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d068      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a72      	ldr	r2, [pc, #456]	@ (8003b8c <DMA_List_Init+0x25c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d063      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a70      	ldr	r2, [pc, #448]	@ (8003b90 <DMA_List_Init+0x260>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d05e      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b94 <DMA_List_Init+0x264>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d059      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6d      	ldr	r2, [pc, #436]	@ (8003b98 <DMA_List_Init+0x268>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d054      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6c      	ldr	r2, [pc, #432]	@ (8003b9c <DMA_List_Init+0x26c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d04f      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba0 <DMA_List_Init+0x270>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d04a      	beq.n	8003a90 <DMA_List_Init+0x160>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a69      	ldr	r2, [pc, #420]	@ (8003ba4 <DMA_List_Init+0x274>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d045      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a67      	ldr	r2, [pc, #412]	@ (8003ba8 <DMA_List_Init+0x278>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d040      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a66      	ldr	r2, [pc, #408]	@ (8003bac <DMA_List_Init+0x27c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d03b      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a64      	ldr	r2, [pc, #400]	@ (8003bb0 <DMA_List_Init+0x280>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d036      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a63      	ldr	r2, [pc, #396]	@ (8003bb4 <DMA_List_Init+0x284>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d031      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a61      	ldr	r2, [pc, #388]	@ (8003bb8 <DMA_List_Init+0x288>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d02c      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a60      	ldr	r2, [pc, #384]	@ (8003bbc <DMA_List_Init+0x28c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d027      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc0 <DMA_List_Init+0x290>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d022      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a5d      	ldr	r2, [pc, #372]	@ (8003bc4 <DMA_List_Init+0x294>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d01d      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5b      	ldr	r2, [pc, #364]	@ (8003bc8 <DMA_List_Init+0x298>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d018      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5a      	ldr	r2, [pc, #360]	@ (8003bcc <DMA_List_Init+0x29c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	@ (8003bd0 <DMA_List_Init+0x2a0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a57      	ldr	r2, [pc, #348]	@ (8003bd4 <DMA_List_Init+0x2a4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a55      	ldr	r2, [pc, #340]	@ (8003bd8 <DMA_List_Init+0x2a8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <DMA_List_Init+0x160>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a54      	ldr	r2, [pc, #336]	@ (8003bdc <DMA_List_Init+0x2ac>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <DMA_List_Init+0x164>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <DMA_List_Init+0x166>
 8003a94:	2300      	movs	r3, #0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2200      	movs	r2, #0
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ac8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a36      	ldr	r2, [pc, #216]	@ (8003bc0 <DMA_List_Init+0x290>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <DMA_List_Init+0x202>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a34      	ldr	r2, [pc, #208]	@ (8003bc4 <DMA_List_Init+0x294>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <DMA_List_Init+0x202>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a33      	ldr	r2, [pc, #204]	@ (8003bc8 <DMA_List_Init+0x298>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <DMA_List_Init+0x202>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a31      	ldr	r2, [pc, #196]	@ (8003bcc <DMA_List_Init+0x29c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <DMA_List_Init+0x202>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a30      	ldr	r2, [pc, #192]	@ (8003bd0 <DMA_List_Init+0x2a0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <DMA_List_Init+0x202>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd4 <DMA_List_Init+0x2a4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <DMA_List_Init+0x202>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	@ (8003bd8 <DMA_List_Init+0x2a8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <DMA_List_Init+0x202>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <DMA_List_Init+0x2ac>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <DMA_List_Init+0x206>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <DMA_List_Init+0x208>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40020050 	.word	0x40020050
 8003b64:	50020050 	.word	0x50020050
 8003b68:	400200d0 	.word	0x400200d0
 8003b6c:	500200d0 	.word	0x500200d0
 8003b70:	40020150 	.word	0x40020150
 8003b74:	50020150 	.word	0x50020150
 8003b78:	400201d0 	.word	0x400201d0
 8003b7c:	500201d0 	.word	0x500201d0
 8003b80:	40020250 	.word	0x40020250
 8003b84:	50020250 	.word	0x50020250
 8003b88:	400202d0 	.word	0x400202d0
 8003b8c:	500202d0 	.word	0x500202d0
 8003b90:	40020350 	.word	0x40020350
 8003b94:	50020350 	.word	0x50020350
 8003b98:	400203d0 	.word	0x400203d0
 8003b9c:	500203d0 	.word	0x500203d0
 8003ba0:	40020450 	.word	0x40020450
 8003ba4:	50020450 	.word	0x50020450
 8003ba8:	400204d0 	.word	0x400204d0
 8003bac:	500204d0 	.word	0x500204d0
 8003bb0:	40020550 	.word	0x40020550
 8003bb4:	50020550 	.word	0x50020550
 8003bb8:	400205d0 	.word	0x400205d0
 8003bbc:	500205d0 	.word	0x500205d0
 8003bc0:	40020650 	.word	0x40020650
 8003bc4:	50020650 	.word	0x50020650
 8003bc8:	400206d0 	.word	0x400206d0
 8003bcc:	500206d0 	.word	0x500206d0
 8003bd0:	40020750 	.word	0x40020750
 8003bd4:	50020750 	.word	0x50020750
 8003bd8:	400207d0 	.word	0x400207d0
 8003bdc:	500207d0 	.word	0x500207d0

08003be0 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003bf2:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003bf8:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003bfe:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003c04:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d017      	beq.n	8003c46 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c22:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	051b      	lsls	r3, r3, #20
 8003c2c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003c30:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	3b01      	subs	r3, #1
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003c3e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003c40:	431a      	orrs	r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	f240 237f 	movw	r3, #639	@ 0x27f
 8003c52:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003c54:	431a      	orrs	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c62:	d10c      	bne.n	8003c7e <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d011      	beq.n	8003c94 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	e00a      	b.n	8003c94 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c86:	d105      	bne.n	8003c94 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003cb4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d04e      	beq.n	8003d70 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	0419      	lsls	r1, r3, #16
 8003cde:	4b6a      	ldr	r3, [pc, #424]	@ (8003e88 <DMA_List_BuildNode+0x2a8>)
 8003ce0:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da06      	bge.n	8003cfe <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	e005      	b.n	8003d0a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da06      	bge.n	8003d20 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	609a      	str	r2, [r3, #8]
 8003d1e:	e005      	b.n	8003d2c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da06      	bge.n	8003d42 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	e005      	b.n	8003d4e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da06      	bge.n	8003d64 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	609a      	str	r2, [r3, #8]
 8003d62:	e005      	b.n	8003d70 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05d      	beq.n	8003e48 <DMA_List_BuildNode+0x268>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	da09      	bge.n	8003da8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d98:	425b      	negs	r3, r3
 8003d9a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	615a      	str	r2, [r3, #20]
 8003da6:	e005      	b.n	8003db4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dac:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	da0d      	bge.n	8003dd8 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	0419      	lsls	r1, r3, #16
 8003dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8003e8c <DMA_List_BuildNode+0x2ac>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	e009      	b.n	8003dec <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de0:	0419      	lsls	r1, r3, #16
 8003de2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e8c <DMA_List_BuildNode+0x2ac>)
 8003de4:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003de6:	431a      	orrs	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	da08      	bge.n	8003e06 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df8:	425b      	negs	r3, r3
 8003dfa:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	619a      	str	r2, [r3, #24]
 8003e04:	e004      	b.n	8003e10 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	da0b      	bge.n	8003e30 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1c:	425b      	negs	r3, r3
 8003e1e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	619a      	str	r2, [r3, #24]
 8003e2e:	e007      	b.n	8003e40 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e38:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	619a      	str	r2, [r3, #24]
    /********************************************************************************* CBR2 register value is updated */


    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_2D_DEFAULT_OFFSET] = 0U;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
 8003e46:	e002      	b.n	8003e4e <DMA_List_BuildNode+0x26e>
  }
  else
  {
    /* Update CLLR register value *************************************************************************************/
    /* Reset CLLR Register value : channel linked-list address register offset */
    pNode->LinkRegisters[NODE_CLLR_LINEAR_DEFAULT_OFFSET] = 0U;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CLLR register value is cleared */
  }

  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003e6e:	e005      	b.n	8003e7c <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	07ff0000 	.word	0x07ff0000
 8003e8c:	1fff0000 	.word	0x1fff0000

08003e90 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e00a      	b.n	8003ed2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e004      	b.n	8003ed2 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d001      	beq.n	8003ee2 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e00e      	b.n	8003f2e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e006      	b.n	8003f2e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003f40:	2302      	movs	r3, #2
 8003f42:	e00b      	b.n	8003f5c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d001      	beq.n	8003f5a <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e000      	b.n	8003f5c <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00c      	beq.n	8003f9a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc0 <DMA_List_GetCLLRNodeInfo+0x58>)
 8003f8a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00f      	beq.n	8003fb2 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2207      	movs	r2, #7
 8003f96:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8003f98:	e00b      	b.n	8003fb2 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a08      	ldr	r2, [pc, #32]	@ (8003fc4 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8003fa4:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2205      	movs	r2, #5
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	fe010000 	.word	0xfe010000
 8003fc4:	f8010000 	.word	0xf8010000

08003fc8 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b089      	sub	sp, #36	@ 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d142      	bne.n	8004072 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003fec:	e01d      	b.n	800402a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e00f      	b.n	8004024 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4413      	add	r3, r2
 8004014:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800401c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	429a      	cmp	r2, r3
 8004032:	d3dc      	bcc.n	8003fee <DMA_List_FindNode+0x26>
 8004034:	e029      	b.n	800408a <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	e00f      	b.n	800406c <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4413      	add	r3, r2
 800405c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004064:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	429a      	cmp	r2, r3
 800407a:	d206      	bcs.n	800408a <DMA_List_FindNode+0xc2>
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004082:	4013      	ands	r3, r2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	429a      	cmp	r2, r3
 8004088:	d1d5      	bne.n	8004036 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004096:	4013      	ands	r3, r2
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	429a      	cmp	r2, r3
 800409c:	d001      	beq.n	80040a2 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800409e:	2301      	movs	r3, #1
 80040a0:	e02b      	b.n	80040fa <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0c1b      	lsrs	r3, r3, #16
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	461a      	mov	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00f      	beq.n	80040f8 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	461a      	mov	r2, r3
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80040e8:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	@ 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8004106:	b480      	push	{r7}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	460b      	mov	r3, r1
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004118:	7afb      	ldrb	r3, [r7, #11]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d011      	beq.n	8004142 <HAL_EXTI_RegisterCallback+0x3c>
 800411e:	2b02      	cmp	r3, #2
 8004120:	dc13      	bgt.n	800414a <HAL_EXTI_RegisterCallback+0x44>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_EXTI_RegisterCallback+0x26>
 8004126:	2b01      	cmp	r3, #1
 8004128:	d007      	beq.n	800413a <HAL_EXTI_RegisterCallback+0x34>
 800412a:	e00e      	b.n	800414a <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	609a      	str	r2, [r3, #8]
      break;
 8004138:	e00a      	b.n	8004150 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	605a      	str	r2, [r3, #4]
      break;
 8004140:	e006      	b.n	8004150 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	609a      	str	r2, [r3, #8]
      break;
 8004148:	e002      	b.n	8004150 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	75fb      	strb	r3, [r7, #23]
      break;
 800414e:	bf00      	nop
  }

  return status;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
}
 8004152:	4618      	mov	r0, r3
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e003      	b.n	800417a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2201      	movs	r2, #1
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	4b17      	ldr	r3, [pc, #92]	@ (8004210 <HAL_EXTI_IRQHandler+0x88>)
 80041b2:	4413      	add	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <HAL_EXTI_IRQHandler+0x8c>)
 80041e0:	4413      	add	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	4798      	blx	r3
    }
  }
}
 8004208:	bf00      	nop
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	4602200c 	.word	0x4602200c
 8004214:	46022010 	.word	0x46022010

08004218 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	@ 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800422a:	e1ba      	b.n	80045a2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 81aa 	beq.w	800459c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a55      	ldr	r2, [pc, #340]	@ (80043a0 <HAL_GPIO_Init+0x188>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d15d      	bne.n	800430c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004256:	2201      	movs	r2, #1
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	4013      	ands	r3, r2
 8004264:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0201 	and.w	r2, r3, #1
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	4313      	orrs	r3, r2
 8004278:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004280:	4a48      	ldr	r2, [pc, #288]	@ (80043a4 <HAL_GPIO_Init+0x18c>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004288:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800428a:	4a46      	ldr	r2, [pc, #280]	@ (80043a4 <HAL_GPIO_Init+0x18c>)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	08da      	lsrs	r2, r3, #3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	3208      	adds	r2, #8
 800429e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	220f      	movs	r2, #15
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	4013      	ands	r3, r2
 80042b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	220b      	movs	r2, #11
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	08da      	lsrs	r2, r3, #3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3208      	adds	r2, #8
 80042d6:	69f9      	ldr	r1, [r7, #28]
 80042d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2203      	movs	r2, #3
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	2202      	movs	r2, #2
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	4313      	orrs	r3, r2
 8004302:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e067      	b.n	80043dc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d003      	beq.n	800431c <HAL_GPIO_Init+0x104>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b12      	cmp	r3, #18
 800431a:	d145      	bne.n	80043a8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	4013      	ands	r3, r2
 800433e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	4313      	orrs	r3, r2
 8004358:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	08da      	lsrs	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3208      	adds	r2, #8
 8004362:	69f9      	ldr	r1, [r7, #28]
 8004364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	2203      	movs	r2, #3
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	4013      	ands	r3, r2
 800437e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0203 	and.w	r2, r3, #3
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	4313      	orrs	r3, r2
 8004394:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e01e      	b.n	80043dc <HAL_GPIO_Init+0x1c4>
 800439e:	bf00      	nop
 80043a0:	46020000 	.word	0x46020000
 80043a4:	0800f5ac 	.word	0x0800f5ac
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	4013      	ands	r3, r2
 80043be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0203 	and.w	r2, r3, #3
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d00b      	beq.n	80043fc <HAL_GPIO_Init+0x1e4>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d007      	beq.n	80043fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043f0:	2b11      	cmp	r3, #17
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b12      	cmp	r3, #18
 80043fa:	d130      	bne.n	800445e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	4013      	ands	r3, r2
 8004412:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	4313      	orrs	r3, r2
 8004424:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004432:	2201      	movs	r2, #1
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	4013      	ands	r3, r2
 8004440:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	091b      	lsrs	r3, r3, #4
 8004448:	f003 0201 	and.w	r2, r3, #1
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	4313      	orrs	r3, r2
 8004456:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d017      	beq.n	8004496 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	2203      	movs	r2, #3
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	4013      	ands	r3, r2
 800447c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	4313      	orrs	r3, r2
 800448e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07c      	beq.n	800459c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80044a2:	4a47      	ldr	r2, [pc, #284]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	3318      	adds	r3, #24
 80044aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	220f      	movs	r2, #15
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0a9a      	lsrs	r2, r3, #10
 80044ca:	4b3e      	ldr	r3, [pc, #248]	@ (80045c4 <HAL_GPIO_Init+0x3ac>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	f002 0203 	and.w	r2, r2, #3
 80044d4:	00d2      	lsls	r2, r2, #3
 80044d6:	4093      	lsls	r3, r2
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80044de:	4938      	ldr	r1, [pc, #224]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	3318      	adds	r3, #24
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80044ec:	4b34      	ldr	r3, [pc, #208]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004510:	4a2b      	ldr	r2, [pc, #172]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004516:	4b2a      	ldr	r3, [pc, #168]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	43db      	mvns	r3, r3
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	4013      	ands	r3, r2
 8004524:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800453a:	4a21      	ldr	r2, [pc, #132]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004540:	4b1f      	ldr	r3, [pc, #124]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004546:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43db      	mvns	r3, r3
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	4013      	ands	r3, r2
 8004550:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004566:	4a16      	ldr	r2, [pc, #88]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800456e:	4b14      	ldr	r3, [pc, #80]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 8004570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004574:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	43db      	mvns	r3, r3
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	4013      	ands	r3, r2
 800457e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4313      	orrs	r3, r2
 8004592:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004594:	4a0a      	ldr	r2, [pc, #40]	@ (80045c0 <HAL_GPIO_Init+0x3a8>)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3301      	adds	r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f47f ae3d 	bne.w	800422c <HAL_GPIO_Init+0x14>
  }
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	3724      	adds	r7, #36	@ 0x24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	46022000 	.word	0x46022000
 80045c4:	002f7f7f 	.word	0x002f7f7f

080045c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
 80045d4:	4613      	mov	r3, r2
 80045d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d8:	787b      	ldrb	r3, [r7, #1]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80045e4:	e002      	b.n	80045ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e059      	b.n	80046be <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d106      	bne.n	800462a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fd fbcb 	bl	8001dc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2203      	movs	r2, #3
 800462e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a24      	ldr	r2, [pc, #144]	@ (80046c8 <HAL_HCD_Init+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d102      	bne.n	8004640 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f006 fa3c 	bl	800aac2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7c1a      	ldrb	r2, [r3, #16]
 8004652:	f88d 2000 	strb.w	r2, [sp]
 8004656:	3304      	adds	r3, #4
 8004658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800465a:	f006 fa05 	bl	800aa68 <USB_CoreInit>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e026      	b.n	80046be <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f006 fa34 	bl	800aae4 <USB_SetCurrentMode>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e017      	b.n	80046be <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	7c1a      	ldrb	r2, [r3, #16]
 8004696:	f88d 2000 	strb.w	r2, [sp]
 800469a:	3304      	adds	r3, #4
 800469c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469e:	f006 fb0d 	bl	800acbc <USB_HostInit>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e004      	b.n	80046be <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	42040000 	.word	0x42040000

080046cc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80046d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	e007      	b.n	80046fa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80046ea:	4b07      	ldr	r3, [pc, #28]	@ (8004708 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 0204 	bic.w	r2, r3, #4
 80046f2:	4905      	ldr	r1, [pc, #20]	@ (8004708 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40030400 	.word	0x40030400

0800470c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_ICACHE_Enable+0x1c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a04      	ldr	r2, [pc, #16]	@ (8004728 <HAL_ICACHE_Enable+0x1c>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40030400 	.word	0x40030400

0800472c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004734:	4b39      	ldr	r3, [pc, #228]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800473c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d10b      	bne.n	800475e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d905      	bls.n	800475a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800474e:	4b33      	ldr	r3, [pc, #204]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	4a32      	ldr	r2, [pc, #200]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004758:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e057      	b.n	800480e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004764:	d90a      	bls.n	800477c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004766:	4b2d      	ldr	r3, [pc, #180]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4313      	orrs	r3, r2
 8004772:	4a2a      	ldr	r2, [pc, #168]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004778:	60d3      	str	r3, [r2, #12]
 800477a:	e007      	b.n	800478c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800477c:	4b27      	ldr	r3, [pc, #156]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004784:	4925      	ldr	r1, [pc, #148]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4313      	orrs	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800478c:	4b24      	ldr	r3, [pc, #144]	@ (8004820 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a24      	ldr	r2, [pc, #144]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2232      	movs	r2, #50	@ 0x32
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	4a21      	ldr	r2, [pc, #132]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047aa:	e002      	b.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047b2:	4b1a      	ldr	r3, [pc, #104]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f3      	bne.n	80047ac <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01b      	beq.n	8004802 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80047ca:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a15      	ldr	r2, [pc, #84]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	099b      	lsrs	r3, r3, #6
 80047d6:	2232      	movs	r2, #50	@ 0x32
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	4a11      	ldr	r2, [pc, #68]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047e8:	e002      	b.n	80047f0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80047f0:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80047f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f3      	bne.n	80047ea <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e000      	b.n	800480e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	46020800 	.word	0x46020800
 8004820:	20000000 	.word	0x20000000
 8004824:	10624dd3 	.word	0x10624dd3

08004828 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800482c:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <HAL_PWREx_GetVoltageRange+0x18>)
 800482e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004830:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	46020800 	.word	0x46020800

08004844 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800484c:	4b22      	ldr	r3, [pc, #136]	@ (80048d8 <HAL_PWREx_ConfigSupply+0x94>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a22      	ldr	r2, [pc, #136]	@ (80048dc <HAL_PWREx_ConfigSupply+0x98>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	2232      	movs	r2, #50	@ 0x32
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <HAL_PWREx_ConfigSupply+0x98>)
 8004860:	fba2 2303 	umull	r2, r3, r2, r3
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004870:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004876:	f023 0302 	bic.w	r3, r3, #2
 800487a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800487c:	e002      	b.n	8004884 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b01      	subs	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004884:	4b16      	ldr	r3, [pc, #88]	@ (80048e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d116      	bne.n	80048be <HAL_PWREx_ConfigSupply+0x7a>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f3      	bne.n	800487e <HAL_PWREx_ConfigSupply+0x3a>
 8004896:	e012      	b.n	80048be <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004898:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a10      	ldr	r2, [pc, #64]	@ (80048e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048a4:	e002      	b.n	80048ac <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048ac:	4b0c      	ldr	r3, [pc, #48]	@ (80048e0 <HAL_PWREx_ConfigSupply+0x9c>)
 80048ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <HAL_PWREx_ConfigSupply+0x7a>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f3      	bne.n	80048a6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e000      	b.n	80048ca <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000000 	.word	0x20000000
 80048dc:	10624dd3 	.word	0x10624dd3
 80048e0:	46020800 	.word	0x46020800

080048e4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_PWREx_EnableVddUSB+0x1c>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <HAL_PWREx_EnableVddUSB+0x1c>)
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	6113      	str	r3, [r2, #16]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	46020800 	.word	0x46020800

08004904 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004908:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <HAL_PWREx_EnableVddIO2+0x1c>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	4a04      	ldr	r2, [pc, #16]	@ (8004920 <HAL_PWREx_EnableVddIO2+0x1c>)
 800490e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004912:	6113      	str	r3, [r2, #16]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	46020800 	.word	0x46020800

08004924 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_PWREx_EnableVddA+0x1c>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	4a04      	ldr	r2, [pc, #16]	@ (8004940 <HAL_PWREx_EnableVddA+0x1c>)
 800492e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004932:	6113      	str	r3, [r2, #16]
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	46020800 	.word	0x46020800

08004944 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	4a04      	ldr	r2, [pc, #16]	@ (8004960 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004954:	bf00      	nop
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	46020800 	.word	0x46020800

08004964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08e      	sub	sp, #56	@ 0x38
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800496c:	2300      	movs	r3, #0
 800496e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f000 bec8 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497e:	4b99      	ldr	r3, [pc, #612]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004988:	4b96      	ldr	r3, [pc, #600]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 816c 	beq.w	8004c78 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_RCC_OscConfig+0x52>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	2b0c      	cmp	r3, #12
 80049aa:	f040 80de 	bne.w	8004b6a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	f040 80da 	bne.w	8004b6a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f000 bea5 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049c8:	4b86      	ldr	r3, [pc, #536]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <HAL_RCC_OscConfig+0x7a>
 80049d4:	4b83      	ldr	r3, [pc, #524]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049dc:	e005      	b.n	80049ea <HAL_RCC_OscConfig+0x86>
 80049de:	4b81      	ldr	r3, [pc, #516]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 80049e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d255      	bcs.n	8004a9a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fa11 	bl	8005e20 <RCC_SetFlashLatencyFromMSIRange>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f000 be82 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a0a:	4b76      	ldr	r3, [pc, #472]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	4a75      	ldr	r2, [pc, #468]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a14:	6093      	str	r3, [r2, #8]
 8004a16:	4b73      	ldr	r3, [pc, #460]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	4970      	ldr	r1, [pc, #448]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a30:	d309      	bcc.n	8004a46 <HAL_RCC_OscConfig+0xe2>
 8004a32:	4b6c      	ldr	r3, [pc, #432]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f023 021f 	bic.w	r2, r3, #31
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4969      	ldr	r1, [pc, #420]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60cb      	str	r3, [r1, #12]
 8004a44:	e07e      	b.n	8004b44 <HAL_RCC_OscConfig+0x1e0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	da0a      	bge.n	8004a64 <HAL_RCC_OscConfig+0x100>
 8004a4e:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	015b      	lsls	r3, r3, #5
 8004a5c:	4961      	ldr	r1, [pc, #388]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60cb      	str	r3, [r1, #12]
 8004a62:	e06f      	b.n	8004b44 <HAL_RCC_OscConfig+0x1e0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6c:	d30a      	bcc.n	8004a84 <HAL_RCC_OscConfig+0x120>
 8004a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	029b      	lsls	r3, r3, #10
 8004a7c:	4959      	ldr	r1, [pc, #356]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60cb      	str	r3, [r1, #12]
 8004a82:	e05f      	b.n	8004b44 <HAL_RCC_OscConfig+0x1e0>
 8004a84:	4b57      	ldr	r3, [pc, #348]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	03db      	lsls	r3, r3, #15
 8004a92:	4954      	ldr	r1, [pc, #336]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60cb      	str	r3, [r1, #12]
 8004a98:	e054      	b.n	8004b44 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a9a:	4b52      	ldr	r3, [pc, #328]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4a51      	ldr	r2, [pc, #324]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004aa4:	6093      	str	r3, [r2, #8]
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	494c      	ldr	r1, [pc, #304]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004ac0:	d309      	bcc.n	8004ad6 <HAL_RCC_OscConfig+0x172>
 8004ac2:	4b48      	ldr	r3, [pc, #288]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f023 021f 	bic.w	r2, r3, #31
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4945      	ldr	r1, [pc, #276]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60cb      	str	r3, [r1, #12]
 8004ad4:	e028      	b.n	8004b28 <HAL_RCC_OscConfig+0x1c4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da0a      	bge.n	8004af4 <HAL_RCC_OscConfig+0x190>
 8004ade:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	015b      	lsls	r3, r3, #5
 8004aec:	493d      	ldr	r1, [pc, #244]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60cb      	str	r3, [r1, #12]
 8004af2:	e019      	b.n	8004b28 <HAL_RCC_OscConfig+0x1c4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afc:	d30a      	bcc.n	8004b14 <HAL_RCC_OscConfig+0x1b0>
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	4935      	ldr	r1, [pc, #212]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60cb      	str	r3, [r1, #12]
 8004b12:	e009      	b.n	8004b28 <HAL_RCC_OscConfig+0x1c4>
 8004b14:	4b33      	ldr	r3, [pc, #204]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	03db      	lsls	r3, r3, #15
 8004b22:	4930      	ldr	r1, [pc, #192]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 f974 	bl	8005e20 <RCC_SetFlashLatencyFromMSIRange>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f000 bde5 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004b44:	f001 f8de 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b48:	4b27      	ldr	r3, [pc, #156]	@ (8004be8 <HAL_RCC_OscConfig+0x284>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fc feb3 	bl	80018b8 <HAL_InitTick>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 808a 	beq.w	8004c76 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004b62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b66:	f000 bdd2 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d066      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004b72:	4b1c      	ldr	r3, [pc, #112]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b7e:	f7fd fb49 	bl	8002214 <HAL_GetTick>
 8004b82:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b84:	e009      	b.n	8004b9a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b86:	f7fd fb45 	bl	8002214 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d902      	bls.n	8004b9a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	f000 bdba 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b9a:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0ef      	beq.n	8004b86 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	4a0e      	ldr	r2, [pc, #56]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004bac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	4909      	ldr	r1, [pc, #36]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004bcc:	d30e      	bcc.n	8004bec <HAL_RCC_OscConfig+0x288>
 8004bce:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f023 021f 	bic.w	r2, r3, #31
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4902      	ldr	r1, [pc, #8]	@ (8004be4 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60cb      	str	r3, [r1, #12]
 8004be0:	e04a      	b.n	8004c78 <HAL_RCC_OscConfig+0x314>
 8004be2:	bf00      	nop
 8004be4:	46020c00 	.word	0x46020c00
 8004be8:	2000001c 	.word	0x2000001c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	da0a      	bge.n	8004c0a <HAL_RCC_OscConfig+0x2a6>
 8004bf4:	4b98      	ldr	r3, [pc, #608]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	015b      	lsls	r3, r3, #5
 8004c02:	4995      	ldr	r1, [pc, #596]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60cb      	str	r3, [r1, #12]
 8004c08:	e036      	b.n	8004c78 <HAL_RCC_OscConfig+0x314>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c12:	d30a      	bcc.n	8004c2a <HAL_RCC_OscConfig+0x2c6>
 8004c14:	4b90      	ldr	r3, [pc, #576]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	029b      	lsls	r3, r3, #10
 8004c22:	498d      	ldr	r1, [pc, #564]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60cb      	str	r3, [r1, #12]
 8004c28:	e026      	b.n	8004c78 <HAL_RCC_OscConfig+0x314>
 8004c2a:	4b8b      	ldr	r3, [pc, #556]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	03db      	lsls	r3, r3, #15
 8004c38:	4987      	ldr	r1, [pc, #540]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
 8004c3e:	e01b      	b.n	8004c78 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004c40:	4b85      	ldr	r3, [pc, #532]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a84      	ldr	r2, [pc, #528]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c4c:	f7fd fae2 	bl	8002214 <HAL_GetTick>
 8004c50:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c52:	e009      	b.n	8004c68 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c54:	f7fd fade 	bl	8002214 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d902      	bls.n	8004c68 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	f000 bd53 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c68:	4b7b      	ldr	r3, [pc, #492]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ef      	bne.n	8004c54 <HAL_RCC_OscConfig+0x2f0>
 8004c74:	e000      	b.n	8004c78 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 808b 	beq.w	8004d9c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_OscConfig+0x334>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d109      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d17d      	bne.n	8004d9c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f000 bd34 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x35a>
 8004cb0:	4b69      	ldr	r3, [pc, #420]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a68      	ldr	r2, [pc, #416]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e041      	b.n	8004d42 <HAL_RCC_OscConfig+0x3de>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cc6:	d112      	bne.n	8004cee <HAL_RCC_OscConfig+0x38a>
 8004cc8:	4b63      	ldr	r3, [pc, #396]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a62      	ldr	r2, [pc, #392]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b60      	ldr	r3, [pc, #384]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5f      	ldr	r2, [pc, #380]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cda:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a5c      	ldr	r2, [pc, #368]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e029      	b.n	8004d42 <HAL_RCC_OscConfig+0x3de>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004cf6:	d112      	bne.n	8004d1e <HAL_RCC_OscConfig+0x3ba>
 8004cf8:	4b57      	ldr	r3, [pc, #348]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a56      	ldr	r2, [pc, #344]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004cfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b54      	ldr	r3, [pc, #336]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a53      	ldr	r2, [pc, #332]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b51      	ldr	r3, [pc, #324]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a50      	ldr	r2, [pc, #320]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	e011      	b.n	8004d42 <HAL_RCC_OscConfig+0x3de>
 8004d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a4d      	ldr	r2, [pc, #308]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b48      	ldr	r3, [pc, #288]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a47      	ldr	r2, [pc, #284]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004d40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d014      	beq.n	8004d74 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004d4a:	f7fd fa63 	bl	8002214 <HAL_GetTick>
 8004d4e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d50:	e009      	b.n	8004d66 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d52:	f7fd fa5f 	bl	8002214 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b64      	cmp	r3, #100	@ 0x64
 8004d5e:	d902      	bls.n	8004d66 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	f000 bcd4 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d66:	4b3c      	ldr	r3, [pc, #240]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0ef      	beq.n	8004d52 <HAL_RCC_OscConfig+0x3ee>
 8004d72:	e013      	b.n	8004d9c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004d74:	f7fd fa4e 	bl	8002214 <HAL_GetTick>
 8004d78:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d7a:	e009      	b.n	8004d90 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fd fa4a 	bl	8002214 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	d902      	bls.n	8004d90 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	f000 bcbf 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d90:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ef      	bne.n	8004d7c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d05f      	beq.n	8004e68 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d005      	beq.n	8004dba <HAL_RCC_OscConfig+0x456>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	d114      	bne.n	8004dde <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d111      	bne.n	8004dde <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f000 bca3 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b23      	ldr	r3, [pc, #140]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	4920      	ldr	r1, [pc, #128]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ddc:	e044      	b.n	8004e68 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d024      	beq.n	8004e30 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004de6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004df2:	f7fd fa0f 	bl	8002214 <HAL_GetTick>
 8004df6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df8:	e009      	b.n	8004e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fd fa0b 	bl	8002214 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d902      	bls.n	8004e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	f000 bc80 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e0e:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0ef      	beq.n	8004dfa <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	041b      	lsls	r3, r3, #16
 8004e28:	490b      	ldr	r1, [pc, #44]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	610b      	str	r3, [r1, #16]
 8004e2e:	e01b      	b.n	8004e68 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004e30:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a08      	ldr	r2, [pc, #32]	@ (8004e58 <HAL_RCC_OscConfig+0x4f4>)
 8004e36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e3c:	f7fd f9ea 	bl	8002214 <HAL_GetTick>
 8004e40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e44:	f7fd f9e6 	bl	8002214 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d904      	bls.n	8004e5c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	f000 bc5b 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
 8004e58:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e5c:	4baf      	ldr	r3, [pc, #700]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ed      	bne.n	8004e44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80c8 	beq.w	8005006 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7c:	4ba7      	ldr	r3, [pc, #668]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d111      	bne.n	8004eae <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	4ba4      	ldr	r3, [pc, #656]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e90:	4aa2      	ldr	r2, [pc, #648]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e9a:	4ba0      	ldr	r3, [pc, #640]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004eae:	4b9c      	ldr	r3, [pc, #624]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d119      	bne.n	8004eee <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004eba:	4b99      	ldr	r3, [pc, #612]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	4a98      	ldr	r2, [pc, #608]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec6:	f7fd f9a5 	bl	8002214 <HAL_GetTick>
 8004eca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ecc:	e009      	b.n	8004ee2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ece:	f7fd f9a1 	bl	8002214 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d902      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	f000 bc16 	b.w	800570e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ee2:	4b8f      	ldr	r3, [pc, #572]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0ef      	beq.n	8004ece <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d05f      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004ef6:	4b89      	ldr	r3, [pc, #548]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004efc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d037      	beq.n	8004f7c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e3f4      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01b      	beq.n	8004f66 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f34:	4a79      	ldr	r2, [pc, #484]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004f36:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004f3e:	f7fd f969 	bl	8002214 <HAL_GetTick>
 8004f42:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f46:	f7fd f965 	bl	8002214 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e3da      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f58:	4b70      	ldr	r3, [pc, #448]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1ef      	bne.n	8004f46 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004f66:	4b6d      	ldr	r3, [pc, #436]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f6c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	4969      	ldr	r1, [pc, #420]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004f7c:	4b67      	ldr	r3, [pc, #412]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f82:	4a66      	ldr	r2, [pc, #408]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004f8c:	f7fd f942 	bl	8002214 <HAL_GetTick>
 8004f90:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f94:	f7fd f93e 	bl	8002214 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e3b3      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ef      	beq.n	8004f94 <HAL_RCC_OscConfig+0x630>
 8004fb4:	e01b      	b.n	8004fee <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004fb6:	4b59      	ldr	r3, [pc, #356]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fbc:	4a57      	ldr	r2, [pc, #348]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004fbe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004fc6:	f7fd f925 	bl	8002214 <HAL_GetTick>
 8004fca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fce:	f7fd f921 	bl	8002214 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e396      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fe0:	4b4e      	ldr	r3, [pc, #312]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ef      	bne.n	8004fce <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff6:	4b49      	ldr	r3, [pc, #292]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ffc:	4a47      	ldr	r2, [pc, #284]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8111 	beq.w	8005236 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501a:	4b40      	ldr	r3, [pc, #256]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 800501c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005028:	4b3c      	ldr	r3, [pc, #240]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 800502a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800502e:	4a3b      	ldr	r2, [pc, #236]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005038:	4b38      	ldr	r3, [pc, #224]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 800503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800504c:	4b34      	ldr	r3, [pc, #208]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d118      	bne.n	800508a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005058:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505c:	4a30      	ldr	r2, [pc, #192]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005064:	f7fd f8d6 	bl	8002214 <HAL_GetTick>
 8005068:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506c:	f7fd f8d2 	bl	8002214 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e347      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800507e:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <HAL_RCC_OscConfig+0x7bc>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d01f      	beq.n	80050d6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d010      	beq.n	80050c4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050a2:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050a8:	4a1c      	ldr	r2, [pc, #112]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050aa:	f043 0304 	orr.w	r3, r3, #4
 80050ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050b2:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050b8:	4a18      	ldr	r2, [pc, #96]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050c2:	e018      	b.n	80050f6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050c4:	4b15      	ldr	r3, [pc, #84]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050ca:	4a14      	ldr	r2, [pc, #80]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80050d4:	e00f      	b.n	80050f6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050d6:	4b11      	ldr	r3, [pc, #68]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050dc:	4a0f      	ldr	r2, [pc, #60]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050ec:	4a0b      	ldr	r2, [pc, #44]	@ (800511c <HAL_RCC_OscConfig+0x7b8>)
 80050ee:	f023 0304 	bic.w	r3, r3, #4
 80050f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d057      	beq.n	80051ae <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80050fe:	f7fd f889 	bl	8002214 <HAL_GetTick>
 8005102:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005104:	e00e      	b.n	8005124 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fd f885 	bl	8002214 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d905      	bls.n	8005124 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e2f8      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
 800511c:	46020c00 	.word	0x46020c00
 8005120:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005124:	4b9c      	ldr	r3, [pc, #624]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0e9      	beq.n	8005106 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01b      	beq.n	8005176 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800513e:	4b96      	ldr	r3, [pc, #600]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005144:	4a94      	ldr	r2, [pc, #592]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd f860 	bl	8002214 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e2d3      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005166:	4b8c      	ldr	r3, [pc, #560]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800516c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ed      	beq.n	8005150 <HAL_RCC_OscConfig+0x7ec>
 8005174:	e053      	b.n	800521e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005176:	4b88      	ldr	r3, [pc, #544]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800517c:	4a86      	ldr	r2, [pc, #536]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 800517e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005182:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005186:	e00a      	b.n	800519e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005188:	f7fd f844 	bl	8002214 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e2b7      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800519e:	4b7e      	ldr	r3, [pc, #504]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80051a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ed      	bne.n	8005188 <HAL_RCC_OscConfig+0x824>
 80051ac:	e037      	b.n	800521e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80051ae:	f7fd f831 	bl	8002214 <HAL_GetTick>
 80051b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051b4:	e00a      	b.n	80051cc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b6:	f7fd f82d 	bl	8002214 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e2a0      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051cc:	4b72      	ldr	r3, [pc, #456]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80051ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1ed      	bne.n	80051b6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80051da:	4b6f      	ldr	r3, [pc, #444]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80051dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051e8:	4b6b      	ldr	r3, [pc, #428]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80051ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80051f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051f8:	e00a      	b.n	8005210 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fd f80b 	bl	8002214 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e27e      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005210:	4b61      	ldr	r3, [pc, #388]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1ed      	bne.n	80051fa <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800521e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005222:	2b01      	cmp	r3, #1
 8005224:	d107      	bne.n	8005236 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005226:	4b5c      	ldr	r3, [pc, #368]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800522c:	4a5a      	ldr	r2, [pc, #360]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d036      	beq.n	80052b0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d019      	beq.n	800527e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800524a:	4b53      	ldr	r3, [pc, #332]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a52      	ldr	r2, [pc, #328]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005254:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005256:	f7fc ffdd 	bl	8002214 <HAL_GetTick>
 800525a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800525e:	f7fc ffd9 	bl	8002214 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e24e      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005270:	4b49      	ldr	r3, [pc, #292]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x8fa>
 800527c:	e018      	b.n	80052b0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800527e:	4b46      	ldr	r3, [pc, #280]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a45      	ldr	r2, [pc, #276]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005284:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005288:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800528a:	f7fc ffc3 	bl	8002214 <HAL_GetTick>
 800528e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005292:	f7fc ffbf 	bl	8002214 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e234      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d036      	beq.n	800532a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d019      	beq.n	80052f8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80052c4:	4b34      	ldr	r3, [pc, #208]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a33      	ldr	r2, [pc, #204]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80052ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052d0:	f7fc ffa0 	bl	8002214 <HAL_GetTick>
 80052d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80052d8:	f7fc ff9c 	bl	8002214 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e211      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80052ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x974>
 80052f6:	e018      	b.n	800532a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80052f8:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a26      	ldr	r2, [pc, #152]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005302:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005304:	f7fc ff86 	bl	8002214 <HAL_GetTick>
 8005308:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800530c:	f7fc ff82 	bl	8002214 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e1f7      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800531e:	4b1e      	ldr	r3, [pc, #120]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d07f      	beq.n	8005436 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533a:	2b00      	cmp	r3, #0
 800533c:	d062      	beq.n	8005404 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800533e:	4b16      	ldr	r3, [pc, #88]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	4a15      	ldr	r2, [pc, #84]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005344:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005348:	6093      	str	r3, [r2, #8]
 800534a:	4b13      	ldr	r3, [pc, #76]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	4910      	ldr	r1, [pc, #64]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005364:	d309      	bcc.n	800537a <HAL_RCC_OscConfig+0xa16>
 8005366:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f023 021f 	bic.w	r2, r3, #31
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4909      	ldr	r1, [pc, #36]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005374:	4313      	orrs	r3, r2
 8005376:	60cb      	str	r3, [r1, #12]
 8005378:	e02a      	b.n	80053d0 <HAL_RCC_OscConfig+0xa6c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	da0c      	bge.n	800539c <HAL_RCC_OscConfig+0xa38>
 8005382:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	4901      	ldr	r1, [pc, #4]	@ (8005398 <HAL_RCC_OscConfig+0xa34>)
 8005392:	4313      	orrs	r3, r2
 8005394:	60cb      	str	r3, [r1, #12]
 8005396:	e01b      	b.n	80053d0 <HAL_RCC_OscConfig+0xa6c>
 8005398:	46020c00 	.word	0x46020c00
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a4:	d30a      	bcc.n	80053bc <HAL_RCC_OscConfig+0xa58>
 80053a6:	4ba1      	ldr	r3, [pc, #644]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	029b      	lsls	r3, r3, #10
 80053b4:	499d      	ldr	r1, [pc, #628]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60cb      	str	r3, [r1, #12]
 80053ba:	e009      	b.n	80053d0 <HAL_RCC_OscConfig+0xa6c>
 80053bc:	4b9b      	ldr	r3, [pc, #620]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	03db      	lsls	r3, r3, #15
 80053ca:	4998      	ldr	r1, [pc, #608]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80053d0:	4b96      	ldr	r3, [pc, #600]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a95      	ldr	r2, [pc, #596]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80053d6:	f043 0310 	orr.w	r3, r3, #16
 80053da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053dc:	f7fc ff1a 	bl	8002214 <HAL_GetTick>
 80053e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80053e4:	f7fc ff16 	bl	8002214 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e18b      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80053f6:	4b8d      	ldr	r3, [pc, #564]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0xa80>
 8005402:	e018      	b.n	8005436 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005404:	4b89      	ldr	r3, [pc, #548]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a88      	ldr	r2, [pc, #544]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800540a:	f023 0310 	bic.w	r3, r3, #16
 800540e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005410:	f7fc ff00 	bl	8002214 <HAL_GetTick>
 8005414:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005418:	f7fc fefc 	bl	8002214 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e171      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800542a:	4b80      	ldr	r3, [pc, #512]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8166 	beq.w	800570c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005446:	4b79      	ldr	r3, [pc, #484]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b0c      	cmp	r3, #12
 8005450:	f000 80f2 	beq.w	8005638 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005458:	2b02      	cmp	r3, #2
 800545a:	f040 80c5 	bne.w	80055e8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800545e:	4b73      	ldr	r3, [pc, #460]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a72      	ldr	r2, [pc, #456]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005464:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005468:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800546a:	f7fc fed3 	bl	8002214 <HAL_GetTick>
 800546e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005470:	e008      	b.n	8005484 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005472:	f7fc fecf 	bl	8002214 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e144      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005484:	4b69      	ldr	r3, [pc, #420]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f0      	bne.n	8005472 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005490:	4b66      	ldr	r3, [pc, #408]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d111      	bne.n	80054c2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800549e:	4b63      	ldr	r3, [pc, #396]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80054a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a4:	4a61      	ldr	r2, [pc, #388]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80054a6:	f043 0304 	orr.w	r3, r3, #4
 80054aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054ae:	4b5f      	ldr	r3, [pc, #380]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80054b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80054c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005630 <HAL_RCC_OscConfig+0xccc>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054ce:	d102      	bne.n	80054d6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80054d6:	4b56      	ldr	r3, [pc, #344]	@ (8005630 <HAL_RCC_OscConfig+0xccc>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4a55      	ldr	r2, [pc, #340]	@ (8005630 <HAL_RCC_OscConfig+0xccc>)
 80054dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054e0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80054e2:	4b52      	ldr	r3, [pc, #328]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054ea:	f023 0303 	bic.w	r3, r3, #3
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80054f6:	3a01      	subs	r2, #1
 80054f8:	0212      	lsls	r2, r2, #8
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005500:	430a      	orrs	r2, r1
 8005502:	494a      	ldr	r1, [pc, #296]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005504:	4313      	orrs	r3, r2
 8005506:	628b      	str	r3, [r1, #40]	@ 0x28
 8005508:	4b48      	ldr	r3, [pc, #288]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800550a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800550c:	4b49      	ldr	r3, [pc, #292]	@ (8005634 <HAL_RCC_OscConfig+0xcd0>)
 800550e:	4013      	ands	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005514:	3a01      	subs	r2, #1
 8005516:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800551e:	3a01      	subs	r2, #1
 8005520:	0252      	lsls	r2, r2, #9
 8005522:	b292      	uxth	r2, r2
 8005524:	4311      	orrs	r1, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800552a:	3a01      	subs	r2, #1
 800552c:	0412      	lsls	r2, r2, #16
 800552e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005532:	4311      	orrs	r1, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005538:	3a01      	subs	r2, #1
 800553a:	0612      	lsls	r2, r2, #24
 800553c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005540:	430a      	orrs	r2, r1
 8005542:	493a      	ldr	r1, [pc, #232]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005544:	4313      	orrs	r3, r2
 8005546:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005548:	4b38      	ldr	r3, [pc, #224]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800554a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554c:	4a37      	ldr	r2, [pc, #220]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800554e:	f023 0310 	bic.w	r3, r3, #16
 8005552:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005558:	4a34      	ldr	r2, [pc, #208]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800555e:	4b33      	ldr	r3, [pc, #204]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	4a32      	ldr	r2, [pc, #200]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005564:	f043 0310 	orr.w	r3, r3, #16
 8005568:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800556a:	4b30      	ldr	r3, [pc, #192]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800556c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556e:	f023 020c 	bic.w	r2, r3, #12
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005576:	492d      	ldr	r1, [pc, #180]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005578:	4313      	orrs	r3, r2
 800557a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800557c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005584:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <HAL_RCC_OscConfig+0xccc>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a29      	ldr	r2, [pc, #164]	@ (8005630 <HAL_RCC_OscConfig+0xccc>)
 800558a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800558e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005590:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005594:	2b01      	cmp	r3, #1
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005598:	4b24      	ldr	r3, [pc, #144]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800559a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800559e:	4a23      	ldr	r2, [pc, #140]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80055a8:	4b20      	ldr	r3, [pc, #128]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1f      	ldr	r2, [pc, #124]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055b4:	f7fc fe2e 	bl	8002214 <HAL_GetTick>
 80055b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fc fe2a 	bl	8002214 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e09f      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055ce:	4b17      	ldr	r3, [pc, #92]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055da:	4b14      	ldr	r3, [pc, #80]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	4a13      	ldr	r2, [pc, #76]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055e4:	6293      	str	r3, [r2, #40]	@ 0x28
 80055e6:	e091      	b.n	800570c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80055e8:	4b10      	ldr	r3, [pc, #64]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a0f      	ldr	r2, [pc, #60]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 80055ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055f4:	f7fc fe0e 	bl	8002214 <HAL_GetTick>
 80055f8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fc fe0a 	bl	8002214 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e07f      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800560e:	4b07      	ldr	r3, [pc, #28]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800561a:	4b04      	ldr	r3, [pc, #16]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	4a03      	ldr	r2, [pc, #12]	@ (800562c <HAL_RCC_OscConfig+0xcc8>)
 8005620:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005624:	f023 0303 	bic.w	r3, r3, #3
 8005628:	6293      	str	r3, [r2, #40]	@ 0x28
 800562a:	e06f      	b.n	800570c <HAL_RCC_OscConfig+0xda8>
 800562c:	46020c00 	.word	0x46020c00
 8005630:	46020800 	.word	0x46020800
 8005634:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005638:	4b37      	ldr	r3, [pc, #220]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800563e:	4b36      	ldr	r3, [pc, #216]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	2b01      	cmp	r3, #1
 800564a:	d039      	beq.n	80056c0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0203 	and.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d132      	bne.n	80056c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005668:	429a      	cmp	r2, r3
 800566a:	d129      	bne.n	80056c0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d122      	bne.n	80056c0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005684:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005686:	429a      	cmp	r2, r3
 8005688:	d11a      	bne.n	80056c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	0a5b      	lsrs	r3, r3, #9
 800568e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005696:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d111      	bne.n	80056c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	0c1b      	lsrs	r3, r3, #16
 80056a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d108      	bne.n	80056c0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	0e1b      	lsrs	r3, r3, #24
 80056b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e024      	b.n	800570e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80056c4:	4b14      	ldr	r3, [pc, #80]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	08db      	lsrs	r3, r3, #3
 80056ca:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d01a      	beq.n	800570c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80056d6:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	4a0f      	ldr	r2, [pc, #60]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 80056dc:	f023 0310 	bic.w	r3, r3, #16
 80056e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fc fd97 	bl	8002214 <HAL_GetTick>
 80056e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80056e8:	bf00      	nop
 80056ea:	f7fc fd93 	bl	8002214 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d0f9      	beq.n	80056ea <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fa:	4a07      	ldr	r2, [pc, #28]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005700:	4b05      	ldr	r3, [pc, #20]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	4a04      	ldr	r2, [pc, #16]	@ (8005718 <HAL_RCC_OscConfig+0xdb4>)
 8005706:	f043 0310 	orr.w	r3, r3, #16
 800570a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3738      	adds	r7, #56	@ 0x38
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	46020c00 	.word	0x46020c00

0800571c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e1d9      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005730:	4b9b      	ldr	r3, [pc, #620]	@ (80059a0 <HAL_RCC_ClockConfig+0x284>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d910      	bls.n	8005760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b98      	ldr	r3, [pc, #608]	@ (80059a0 <HAL_RCC_ClockConfig+0x284>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 020f 	bic.w	r2, r3, #15
 8005746:	4996      	ldr	r1, [pc, #600]	@ (80059a0 <HAL_RCC_ClockConfig+0x284>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	4b94      	ldr	r3, [pc, #592]	@ (80059a0 <HAL_RCC_ClockConfig+0x284>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e1c1      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d010      	beq.n	800578e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	4b8c      	ldr	r3, [pc, #560]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005774:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005778:	429a      	cmp	r2, r3
 800577a:	d908      	bls.n	800578e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800577c:	4b89      	ldr	r3, [pc, #548]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	4986      	ldr	r1, [pc, #536]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 800578a:	4313      	orrs	r3, r2
 800578c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d012      	beq.n	80057c0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	4b81      	ldr	r3, [pc, #516]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d909      	bls.n	80057c0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80057ac:	4b7d      	ldr	r3, [pc, #500]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	497a      	ldr	r1, [pc, #488]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	4b74      	ldr	r3, [pc, #464]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057d8:	429a      	cmp	r2, r3
 80057da:	d908      	bls.n	80057ee <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80057dc:	4b71      	ldr	r3, [pc, #452]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	496e      	ldr	r1, [pc, #440]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d010      	beq.n	800581c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	4b69      	ldr	r3, [pc, #420]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	429a      	cmp	r2, r3
 8005808:	d908      	bls.n	800581c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800580a:	4b66      	ldr	r3, [pc, #408]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 020f 	bic.w	r2, r3, #15
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	4963      	ldr	r1, [pc, #396]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005818:	4313      	orrs	r3, r2
 800581a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80d2 	beq.w	80059ce <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d143      	bne.n	80058be <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005836:	4b5b      	ldr	r3, [pc, #364]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d110      	bne.n	8005866 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005844:	4b57      	ldr	r3, [pc, #348]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800584a:	4a56      	ldr	r2, [pc, #344]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 800584c:	f043 0304 	orr.w	r3, r3, #4
 8005850:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005854:	4b53      	ldr	r3, [pc, #332]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	60bb      	str	r3, [r7, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005866:	f7fc fcd5 	bl	8002214 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800586c:	4b4e      	ldr	r3, [pc, #312]	@ (80059a8 <HAL_RCC_ClockConfig+0x28c>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00f      	beq.n	8005898 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005878:	e008      	b.n	800588c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800587a:	f7fc fccb 	bl	8002214 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e12b      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800588c:	4b46      	ldr	r3, [pc, #280]	@ (80059a8 <HAL_RCC_ClockConfig+0x28c>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800589e:	4b41      	ldr	r3, [pc, #260]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80058a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058a4:	4a3f      	ldr	r2, [pc, #252]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80058a6:	f023 0304 	bic.w	r3, r3, #4
 80058aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80058ae:	4b3d      	ldr	r3, [pc, #244]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d121      	bne.n	80058fe <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e112      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058c6:	4b37      	ldr	r3, [pc, #220]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d115      	bne.n	80058fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e106      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80058de:	4b31      	ldr	r3, [pc, #196]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0fa      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ee:	4b2d      	ldr	r3, [pc, #180]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0f2      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80058fe:	4b29      	ldr	r3, [pc, #164]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4926      	ldr	r1, [pc, #152]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 800590c:	4313      	orrs	r3, r2
 800590e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005910:	f7fc fc80 	bl	8002214 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d112      	bne.n	8005944 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fc fc78 	bl	8002214 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e0d6      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005936:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d1ee      	bne.n	8005920 <HAL_RCC_ClockConfig+0x204>
 8005942:	e044      	b.n	80059ce <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d112      	bne.n	8005972 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800594c:	e00a      	b.n	8005964 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594e:	f7fc fc61 	bl	8002214 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e0bf      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005964:	4b0f      	ldr	r3, [pc, #60]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	2b08      	cmp	r3, #8
 800596e:	d1ee      	bne.n	800594e <HAL_RCC_ClockConfig+0x232>
 8005970:	e02d      	b.n	80059ce <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d123      	bne.n	80059c2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800597a:	e00a      	b.n	8005992 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800597c:	f7fc fc4a 	bl	8002214 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e0a8      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005992:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <HAL_RCC_ClockConfig+0x288>)
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1ee      	bne.n	800597c <HAL_RCC_ClockConfig+0x260>
 800599e:	e016      	b.n	80059ce <HAL_RCC_ClockConfig+0x2b2>
 80059a0:	40022000 	.word	0x40022000
 80059a4:	46020c00 	.word	0x46020c00
 80059a8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ac:	f7fc fc32 	bl	8002214 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e090      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80059c2:	4b4a      	ldr	r3, [pc, #296]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d1ee      	bne.n	80059ac <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d010      	beq.n	80059fc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	4b43      	ldr	r3, [pc, #268]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d208      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80059ea:	4b40      	ldr	r3, [pc, #256]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 020f 	bic.w	r2, r3, #15
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	493d      	ldr	r1, [pc, #244]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059fc:	4b3c      	ldr	r3, [pc, #240]	@ (8005af0 <HAL_RCC_ClockConfig+0x3d4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d210      	bcs.n	8005a2c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0a:	4b39      	ldr	r3, [pc, #228]	@ (8005af0 <HAL_RCC_ClockConfig+0x3d4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 020f 	bic.w	r2, r3, #15
 8005a12:	4937      	ldr	r1, [pc, #220]	@ (8005af0 <HAL_RCC_ClockConfig+0x3d4>)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1a:	4b35      	ldr	r3, [pc, #212]	@ (8005af0 <HAL_RCC_ClockConfig+0x3d4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d001      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e05b      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d208      	bcs.n	8005a5a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005a48:	4b28      	ldr	r3, [pc, #160]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4925      	ldr	r1, [pc, #148]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d012      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	4b20      	ldr	r3, [pc, #128]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	091b      	lsrs	r3, r3, #4
 8005a70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d209      	bcs.n	8005a8c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005a78:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	4919      	ldr	r1, [pc, #100]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	4b13      	ldr	r3, [pc, #76]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d208      	bcs.n	8005aba <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005aa8:	4b10      	ldr	r3, [pc, #64]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	490d      	ldr	r1, [pc, #52]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005aba:	f000 f821 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <HAL_RCC_ClockConfig+0x3d0>)
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	490a      	ldr	r1, [pc, #40]	@ (8005af4 <HAL_RCC_ClockConfig+0x3d8>)
 8005aca:	5ccb      	ldrb	r3, [r1, r3]
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad0:	4a09      	ldr	r2, [pc, #36]	@ (8005af8 <HAL_RCC_ClockConfig+0x3dc>)
 8005ad2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ad4:	4b09      	ldr	r3, [pc, #36]	@ (8005afc <HAL_RCC_ClockConfig+0x3e0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fb feed 	bl	80018b8 <HAL_InitTick>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	46020c00 	.word	0x46020c00
 8005af0:	40022000 	.word	0x40022000
 8005af4:	0800f548 	.word	0x0800f548
 8005af8:	20000000 	.word	0x20000000
 8005afc:	2000001c 	.word	0x2000001c

08005b00 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b08b      	sub	sp, #44	@ 0x2c
 8005b04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b0e:	4b78      	ldr	r3, [pc, #480]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 030c 	and.w	r3, r3, #12
 8005b16:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b18:	4b75      	ldr	r3, [pc, #468]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0x34>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	d121      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d11e      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005b34:	4b6e      	ldr	r3, [pc, #440]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005b40:	4b6b      	ldr	r3, [pc, #428]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b46:	0b1b      	lsrs	r3, r3, #12
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4e:	e005      	b.n	8005b5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005b50:	4b67      	ldr	r3, [pc, #412]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	0f1b      	lsrs	r3, r3, #28
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b5c:	4a65      	ldr	r2, [pc, #404]	@ (8005cf4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d110      	bne.n	8005b8e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b70:	e00d      	b.n	8005b8e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b72:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005b80:	623b      	str	r3, [r7, #32]
 8005b82:	e004      	b.n	8005b8e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d101      	bne.n	8005b8e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005cf8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005b8c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	f040 80a5 	bne.w	8005ce0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b96:	4b56      	ldr	r3, [pc, #344]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005ba0:	4b53      	ldr	r3, [pc, #332]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005bae:	4b50      	ldr	r3, [pc, #320]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bba:	4b4d      	ldr	r3, [pc, #308]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	08db      	lsrs	r3, r3, #3
 8005bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d003      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0xe4>
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d022      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x128>
 8005be2:	e043      	b.n	8005c6c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005cfc <HAL_RCC_GetSysClockFreq+0x1fc>
 8005bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c06:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c0a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005d00 <HAL_RCC_GetSysClockFreq+0x200>
 8005c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c26:	e046      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c32:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005cfc <HAL_RCC_GetSysClockFreq+0x1fc>
 8005c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c4a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c4e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005d00 <HAL_RCC_GetSysClockFreq+0x200>
 8005c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c6a:	e024      	b.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c84:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c94:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c98:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005d00 <HAL_RCC_GetSysClockFreq+0x200>
 8005c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ca4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cb4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cba:	0e1b      	lsrs	r3, r3, #24
 8005cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cda:	ee17 3a90 	vmov	r3, s15
 8005cde:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	372c      	adds	r7, #44	@ 0x2c
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	46020c00 	.word	0x46020c00
 8005cf4:	0800f560 	.word	0x0800f560
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	4b742400 	.word	0x4b742400
 8005d00:	46000000 	.word	0x46000000

08005d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d08:	f7ff fefa 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b07      	ldr	r3, [pc, #28]	@ (8005d2c <HAL_RCC_GetHCLKFreq+0x28>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	4906      	ldr	r1, [pc, #24]	@ (8005d30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005d18:	5ccb      	ldrb	r3, [r1, r3]
 8005d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1e:	4a05      	ldr	r2, [pc, #20]	@ (8005d34 <HAL_RCC_GetHCLKFreq+0x30>)
 8005d20:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005d22:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <HAL_RCC_GetHCLKFreq+0x30>)
 8005d24:	681b      	ldr	r3, [r3, #0]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	46020c00 	.word	0x46020c00
 8005d30:	0800f548 	.word	0x0800f548
 8005d34:	20000000 	.word	0x20000000

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005d3c:	f7ff ffe2 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4903      	ldr	r1, [pc, #12]	@ (8005d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	46020c00 	.word	0x46020c00
 8005d5c:	0800f558 	.word	0x0800f558

08005d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005d64:	f7ff ffce 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	0a1b      	lsrs	r3, r3, #8
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	@ (8005d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	46020c00 	.word	0x46020c00
 8005d84:	0800f558 	.word	0x0800f558

08005d88 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005d8c:	f7ff ffba 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	@ (8005dac <HAL_RCC_GetPCLK3Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	46020c00 	.word	0x46020c00
 8005dac:	0800f558 	.word	0x0800f558

08005db0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	221f      	movs	r2, #31
 8005dbe:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005dc0:	4b15      	ldr	r3, [pc, #84]	@ (8005e18 <HAL_RCC_GetClockConfig+0x68>)
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f003 0203 	and.w	r2, r3, #3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005dcc:	4b12      	ldr	r3, [pc, #72]	@ (8005e18 <HAL_RCC_GetClockConfig+0x68>)
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f003 020f 	and.w	r2, r3, #15
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <HAL_RCC_GetClockConfig+0x68>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005de4:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <HAL_RCC_GetClockConfig+0x68>)
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005df2:	4b09      	ldr	r3, [pc, #36]	@ (8005e18 <HAL_RCC_GetClockConfig+0x68>)
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dfe:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <HAL_RCC_GetClockConfig+0x6c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	46020c00 	.word	0x46020c00
 8005e1c:	40022000 	.word	0x40022000

08005e20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e28:	4b3e      	ldr	r3, [pc, #248]	@ (8005f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e36:	f7fe fcf7 	bl	8004828 <HAL_PWREx_GetVoltageRange>
 8005e3a:	6178      	str	r0, [r7, #20]
 8005e3c:	e019      	b.n	8005e72 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e3e:	4b39      	ldr	r3, [pc, #228]	@ (8005f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e44:	4a37      	ldr	r2, [pc, #220]	@ (8005f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005e4e:	4b35      	ldr	r3, [pc, #212]	@ (8005f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e5c:	f7fe fce4 	bl	8004828 <HAL_PWREx_GetVoltageRange>
 8005e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b30      	ldr	r3, [pc, #192]	@ (8005f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e68:	4a2e      	ldr	r2, [pc, #184]	@ (8005f24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e6a:	f023 0304 	bic.w	r3, r3, #4
 8005e6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e78:	d003      	beq.n	8005e82 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e80:	d109      	bne.n	8005e96 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e88:	d202      	bcs.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005e8e:	e033      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005e94:	e030      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9c:	d208      	bcs.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea4:	d102      	bne.n	8005eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e025      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e035      	b.n	8005f1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb6:	d90f      	bls.n	8005ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ec4:	d902      	bls.n	8005ecc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e015      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005ecc:	2301      	movs	r3, #1
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	e012      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	e00f      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ede:	d109      	bne.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ee6:	d102      	bne.n	8005eee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005ee8:	2301      	movs	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	e004      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005eee:	2302      	movs	r3, #2
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	e001      	b.n	8005ef8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f023 020f 	bic.w	r2, r3, #15
 8005f00:	4909      	ldr	r1, [pc, #36]	@ (8005f28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005f08:	4b07      	ldr	r3, [pc, #28]	@ (8005f28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d001      	beq.n	8005f1a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	46020c00 	.word	0x46020c00
 8005f28:	40022000 	.word	0x40022000

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f30:	b0b8      	sub	sp, #224	@ 0xe0
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f002 0401 	and.w	r4, r2, #1
 8005f50:	2500      	movs	r5, #0
 8005f52:	ea54 0305 	orrs.w	r3, r4, r5
 8005f56:	d00b      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005f58:	4bca      	ldr	r3, [pc, #808]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f5e:	f023 0103 	bic.w	r1, r3, #3
 8005f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f68:	4ac6      	ldr	r2, [pc, #792]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 0802 	and.w	r8, r2, #2
 8005f7c:	f04f 0900 	mov.w	r9, #0
 8005f80:	ea58 0309 	orrs.w	r3, r8, r9
 8005f84:	d00b      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005f86:	4bbf      	ldr	r3, [pc, #764]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f8c:	f023 010c 	bic.w	r1, r3, #12
 8005f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f96:	4abb      	ldr	r2, [pc, #748]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	f002 0a04 	and.w	sl, r2, #4
 8005faa:	f04f 0b00 	mov.w	fp, #0
 8005fae:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fb2:	d00b      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005fb4:	4bb3      	ldr	r3, [pc, #716]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fba:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc4:	4aaf      	ldr	r2, [pc, #700]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f002 0308 	and.w	r3, r2, #8
 8005fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fe2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d00b      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005fec:	4ba5      	ldr	r3, [pc, #660]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ff2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ff6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ffc:	4aa1      	ldr	r2, [pc, #644]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ffe:	430b      	orrs	r3, r1
 8006000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f002 0310 	and.w	r3, r2, #16
 8006010:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006014:	2300      	movs	r3, #0
 8006016:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800601a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800601e:	460b      	mov	r3, r1
 8006020:	4313      	orrs	r3, r2
 8006022:	d00b      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006024:	4b97      	ldr	r3, [pc, #604]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800602a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800602e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006034:	4a93      	ldr	r2, [pc, #588]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006036:	430b      	orrs	r3, r1
 8006038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800603c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f002 0320 	and.w	r3, r2, #32
 8006048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006052:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006056:	460b      	mov	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	d00b      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800605c:	4b89      	ldr	r3, [pc, #548]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800605e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006062:	f023 0107 	bic.w	r1, r3, #7
 8006066:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800606a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800606c:	4a85      	ldr	r2, [pc, #532]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800606e:	430b      	orrs	r3, r1
 8006070:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006074:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800608a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800608e:	460b      	mov	r3, r1
 8006090:	4313      	orrs	r3, r2
 8006092:	d00b      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006094:	4b7b      	ldr	r3, [pc, #492]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800609a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800609e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a4:	4a77      	ldr	r2, [pc, #476]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060a6:	430b      	orrs	r3, r1
 80060a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80060b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060c2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80060cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060dc:	4a69      	ldr	r2, [pc, #420]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80060de:	430b      	orrs	r3, r1
 80060e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80060f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	d00b      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006104:	4b5f      	ldr	r3, [pc, #380]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800610a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800610e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006114:	4a5b      	ldr	r2, [pc, #364]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006116:	430b      	orrs	r3, r1
 8006118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800611c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800612c:	2300      	movs	r3, #0
 800612e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006132:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006136:	460b      	mov	r3, r1
 8006138:	4313      	orrs	r3, r2
 800613a:	d00b      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800613c:	4b51      	ldr	r3, [pc, #324]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800613e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006142:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8006146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800614a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614c:	4a4d      	ldr	r2, [pc, #308]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800614e:	430b      	orrs	r3, r1
 8006150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800616a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	d00b      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006174:	4b43      	ldr	r3, [pc, #268]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800617a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800617e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006182:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006184:	4a3f      	ldr	r2, [pc, #252]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006186:	430b      	orrs	r3, r1
 8006188:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800618c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006198:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061a6:	460b      	mov	r3, r1
 80061a8:	4313      	orrs	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80061ac:	4b35      	ldr	r3, [pc, #212]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061b2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80061b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061bc:	4a31      	ldr	r2, [pc, #196]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061be:	430b      	orrs	r3, r1
 80061c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80061c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80061d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061d2:	2300      	movs	r3, #0
 80061d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	d00c      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80061e0:	4b28      	ldr	r3, [pc, #160]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061f2:	4a24      	ldr	r2, [pc, #144]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80061f4:	430b      	orrs	r3, r1
 80061f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006206:	673b      	str	r3, [r7, #112]	@ 0x70
 8006208:	2300      	movs	r3, #0
 800620a:	677b      	str	r3, [r7, #116]	@ 0x74
 800620c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006210:	460b      	mov	r3, r1
 8006212:	4313      	orrs	r3, r2
 8006214:	d04f      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621e:	2b80      	cmp	r3, #128	@ 0x80
 8006220:	d02d      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8006222:	2b80      	cmp	r3, #128	@ 0x80
 8006224:	d827      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006226:	2b60      	cmp	r3, #96	@ 0x60
 8006228:	d02e      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800622a:	2b60      	cmp	r3, #96	@ 0x60
 800622c:	d823      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800622e:	2b40      	cmp	r3, #64	@ 0x40
 8006230:	d006      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006232:	2b40      	cmp	r3, #64	@ 0x40
 8006234:	d81f      	bhi.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800623a:	2b20      	cmp	r3, #32
 800623c:	d011      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800623e:	e01a      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006240:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	4a0f      	ldr	r2, [pc, #60]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800624a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800624c:	e01d      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800624e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006252:	3308      	adds	r3, #8
 8006254:	4618      	mov	r0, r3
 8006256:	f002 f9d1 	bl	80085fc <RCCEx_PLL2_Config>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006260:	e013      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006266:	332c      	adds	r3, #44	@ 0x2c
 8006268:	4618      	mov	r0, r3
 800626a:	f002 fa5f 	bl	800872c <RCCEx_PLL3_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006274:	e009      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800627c:	e005      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800627e:	bf00      	nop
 8006280:	e003      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006282:	bf00      	nop
 8006284:	46020c00 	.word	0x46020c00
        break;
 8006288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10d      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006292:	4bb6      	ldr	r3, [pc, #728]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006294:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006298:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800629c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a4:	4ab1      	ldr	r2, [pc, #708]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80062b2:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062c4:	2300      	movs	r3, #0
 80062c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062c8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80062cc:	460b      	mov	r3, r1
 80062ce:	4313      	orrs	r3, r2
 80062d0:	d053      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80062d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062de:	d033      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80062e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e4:	d82c      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80062e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ea:	d02f      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80062ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062f0:	d826      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80062f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062f6:	d008      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80062f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062fc:	d820      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006306:	d011      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006308:	e01a      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800630a:	4b98      	ldr	r3, [pc, #608]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	4a97      	ldr	r2, [pc, #604]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006314:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006316:	e01a      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006318:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800631c:	3308      	adds	r3, #8
 800631e:	4618      	mov	r0, r3
 8006320:	f002 f96c 	bl	80085fc <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800632a:	e010      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800632c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006330:	332c      	adds	r3, #44	@ 0x2c
 8006332:	4618      	mov	r0, r3
 8006334:	f002 f9fa 	bl	800872c <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800633e:	e006      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006346:	e002      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800634c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10d      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006356:	4b85      	ldr	r3, [pc, #532]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006358:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800635c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006368:	4a80      	ldr	r2, [pc, #512]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800636a:	430b      	orrs	r3, r1
 800636c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006370:	e003      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006372:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006376:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800637a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006386:	663b      	str	r3, [r7, #96]	@ 0x60
 8006388:	2300      	movs	r3, #0
 800638a:	667b      	str	r3, [r7, #100]	@ 0x64
 800638c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006390:	460b      	mov	r3, r1
 8006392:	4313      	orrs	r3, r2
 8006394:	d046      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800639a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800639e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063a2:	d028      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063a8:	d821      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80063aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063ae:	d022      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b4:	d81b      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80063b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ba:	d01c      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063c0:	d815      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c6:	d008      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063cc:	d80f      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d011      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d6:	d00e      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063d8:	e009      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063de:	3308      	adds	r3, #8
 80063e0:	4618      	mov	r0, r3
 80063e2:	f002 f90b 	bl	80085fc <RCCEx_PLL2_Config>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80063ec:	e004      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80063f4:	e000      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80063f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10d      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006400:	4b5a      	ldr	r3, [pc, #360]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006406:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800640a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800640e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006412:	4a56      	ldr	r2, [pc, #344]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006414:	430b      	orrs	r3, r1
 8006416:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800641a:	e003      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006420:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006430:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006432:	2300      	movs	r3, #0
 8006434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006436:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800643a:	460b      	mov	r3, r1
 800643c:	4313      	orrs	r3, r2
 800643e:	d03f      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006440:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006448:	2b04      	cmp	r3, #4
 800644a:	d81e      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006493 	.word	0x08006493
 8006458:	08006469 	.word	0x08006469
 800645c:	08006477 	.word	0x08006477
 8006460:	08006493 	.word	0x08006493
 8006464:	08006493 	.word	0x08006493
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006468:	4b40      	ldr	r3, [pc, #256]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800646a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646c:	4a3f      	ldr	r2, [pc, #252]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800646e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006472:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006474:	e00e      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006476:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800647a:	332c      	adds	r3, #44	@ 0x2c
 800647c:	4618      	mov	r0, r3
 800647e:	f002 f955 	bl	800872c <RCCEx_PLL3_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006488:	e004      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006490:	e000      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006492:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006494:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10d      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800649c:	4b33      	ldr	r3, [pc, #204]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800649e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064a2:	f023 0107 	bic.w	r1, r3, #7
 80064a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ae:	4a2f      	ldr	r2, [pc, #188]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80064b0:	430b      	orrs	r3, r1
 80064b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80064b6:	e003      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80064bc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80064c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80064cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80064ce:	2300      	movs	r3, #0
 80064d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80064d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80064d6:	460b      	mov	r3, r1
 80064d8:	4313      	orrs	r3, r2
 80064da:	d04d      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80064dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064e8:	d028      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x610>
 80064ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064ee:	d821      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80064f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064f4:	d024      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80064f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064fa:	d81b      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006500:	d00e      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006506:	d815      	bhi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006510:	d110      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006512:	4b16      	ldr	r3, [pc, #88]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	4a15      	ldr	r2, [pc, #84]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800651c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800651e:	e012      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006524:	332c      	adds	r3, #44	@ 0x2c
 8006526:	4618      	mov	r0, r3
 8006528:	f002 f900 	bl	800872c <RCCEx_PLL3_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006532:	e008      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800653a:	e004      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800653c:	bf00      	nop
 800653e:	e002      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006540:	bf00      	nop
 8006542:	e000      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006544:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006546:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800654a:	2b00      	cmp	r3, #0
 800654c:	d110      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800654e:	4b07      	ldr	r3, [pc, #28]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006554:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800655c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006560:	4a02      	ldr	r2, [pc, #8]	@ (800656c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006562:	430b      	orrs	r3, r1
 8006564:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006568:	e006      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800656a:	bf00      	nop
 800656c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006570:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006574:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006586:	2300      	movs	r3, #0
 8006588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800658e:	460b      	mov	r3, r1
 8006590:	4313      	orrs	r3, r2
 8006592:	f000 80b5 	beq.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800659c:	4b9d      	ldr	r3, [pc, #628]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800659e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d113      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065aa:	4b9a      	ldr	r3, [pc, #616]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065b0:	4a98      	ldr	r2, [pc, #608]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065b2:	f043 0304 	orr.w	r3, r3, #4
 80065b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80065ba:	4b96      	ldr	r3, [pc, #600]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80065bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80065d2:	4b91      	ldr	r3, [pc, #580]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d6:	4a90      	ldr	r2, [pc, #576]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065de:	f7fb fe19 	bl	8002214 <HAL_GetTick>
 80065e2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065e6:	e00b      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e8:	f7fb fe14 	bl	8002214 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d903      	bls.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80065fe:	e005      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006600:	4b85      	ldr	r3, [pc, #532]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0ed      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800660c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006610:	2b00      	cmp	r3, #0
 8006612:	d165      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006614:	4b7f      	ldr	r3, [pc, #508]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800661a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006626:	2b00      	cmp	r3, #0
 8006628:	d023      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800662a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800662e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006636:	4293      	cmp	r3, r2
 8006638:	d01b      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800663a:	4b76      	ldr	r3, [pc, #472]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800663c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006648:	4b72      	ldr	r3, [pc, #456]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800664a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800664e:	4a71      	ldr	r2, [pc, #452]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006654:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006658:	4b6e      	ldr	r3, [pc, #440]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800665a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800665e:	4a6d      	ldr	r2, [pc, #436]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006664:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006668:	4a6a      	ldr	r2, [pc, #424]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800666a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800666e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d019      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667e:	f7fb fdc9 	bl	8002214 <HAL_GetTick>
 8006682:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006686:	e00d      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006688:	f7fb fdc4 	bl	8002214 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006692:	1ad2      	subs	r2, r2, r3
 8006694:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006698:	429a      	cmp	r2, r3
 800669a:	d903      	bls.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80066a2:	e006      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0ea      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80066b2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10d      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80066ba:	4b56      	ldr	r3, [pc, #344]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80066cc:	4a51      	ldr	r2, [pc, #324]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066ce:	430b      	orrs	r3, r1
 80066d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066d4:	e008      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066d6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066da:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 80066de:	e003      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80066e4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066e8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d107      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f0:	4b48      	ldr	r3, [pc, #288]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f6:	4a47      	ldr	r2, [pc, #284]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800670c:	643b      	str	r3, [r7, #64]	@ 0x40
 800670e:	2300      	movs	r3, #0
 8006710:	647b      	str	r3, [r7, #68]	@ 0x44
 8006712:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d042      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800671c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006724:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006728:	d022      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800672a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800672e:	d81b      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006734:	d011      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800673a:	d815      	bhi.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d019      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006740:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006744:	d110      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006746:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800674a:	3308      	adds	r3, #8
 800674c:	4618      	mov	r0, r3
 800674e:	f001 ff55 	bl	80085fc <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006758:	e00d      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800675a:	4b2e      	ldr	r3, [pc, #184]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	4a2d      	ldr	r2, [pc, #180]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006764:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006766:	e006      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800676e:	e002      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006774:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006776:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10d      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800677e:	4b25      	ldr	r3, [pc, #148]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006784:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800678c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006790:	4a20      	ldr	r2, [pc, #128]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006792:	430b      	orrs	r3, r1
 8006794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800679e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067b0:	2300      	movs	r3, #0
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d032      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80067be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ca:	d00b      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d0:	d804      	bhi.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d008      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067da:	d007      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80067e2:	e004      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80067e4:	bf00      	nop
 80067e6:	e002      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 80067ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067ee:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d112      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80067f6:	4b07      	ldr	r3, [pc, #28]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80067f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006804:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006808:	4a02      	ldr	r2, [pc, #8]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800680a:	430b      	orrs	r3, r1
 800680c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006810:	e008      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006812:	bf00      	nop
 8006814:	46020c00 	.word	0x46020c00
 8006818:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006820:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006830:	633b      	str	r3, [r7, #48]	@ 0x30
 8006832:	2300      	movs	r3, #0
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
 8006836:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800683a:	460b      	mov	r3, r1
 800683c:	4313      	orrs	r3, r2
 800683e:	d019      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006844:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800684c:	d105      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800684e:	4b88      	ldr	r3, [pc, #544]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006852:	4a87      	ldr	r2, [pc, #540]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006858:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800685a:	4b85      	ldr	r3, [pc, #532]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800685c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006860:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800686c:	4a80      	ldr	r2, [pc, #512]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800686e:	430b      	orrs	r3, r1
 8006870:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006882:	2300      	movs	r3, #0
 8006884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006886:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d00c      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006890:	4b77      	ldr	r3, [pc, #476]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006896:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800689a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800689e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068a2:	4973      	ldr	r1, [pc, #460]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80068aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	2300      	movs	r3, #0
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80068bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d00c      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80068c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068d8:	4965      	ldr	r1, [pc, #404]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80068e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068f6:	460b      	mov	r3, r1
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d00c      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80068fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80068fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006902:	f023 0218 	bic.w	r2, r3, #24
 8006906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800690a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800690e:	4958      	ldr	r1, [pc, #352]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800692c:	460b      	mov	r3, r1
 800692e:	4313      	orrs	r3, r2
 8006930:	d032      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006932:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006936:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800693a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800693e:	d105      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006940:	4b4b      	ldr	r3, [pc, #300]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006944:	4a4a      	ldr	r2, [pc, #296]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800694a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800694c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006950:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006954:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006958:	d108      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800695a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800695e:	3308      	adds	r3, #8
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fe4b 	bl	80085fc <RCCEx_PLL2_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 800696c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006974:	4b3e      	ldr	r3, [pc, #248]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006976:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800697a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800697e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006982:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006986:	493a      	ldr	r1, [pc, #232]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800698e:	e003      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006990:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006994:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069ae:	460b      	mov	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d03a      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80069b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069c0:	d00e      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80069c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069c6:	d815      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d017      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 80069cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069d0:	d110      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d2:	4b27      	ldr	r3, [pc, #156]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d6:	4a26      	ldr	r2, [pc, #152]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80069d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069de:	e00e      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069e4:	3308      	adds	r3, #8
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 fe08 	bl	80085fc <RCCEx_PLL2_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069f2:	e004      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80069fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069fe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10d      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006a06:	4b1a      	ldr	r3, [pc, #104]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a0c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a18:	4915      	ldr	r1, [pc, #84]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a22:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a26:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006a2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d00c      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006a46:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a4c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006a50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a58:	4905      	ldr	r1, [pc, #20]	@ (8006a70 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006a60:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	37e0      	adds	r7, #224	@ 0xe0
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a6e:	bf00      	nop
 8006a70:	46020c00 	.word	0x46020c00

08006a74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	@ 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a86:	4ba4      	ldr	r3, [pc, #656]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006a90:	4ba1      	ldr	r3, [pc, #644]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006a9e:	4b9e      	ldr	r3, [pc, #632]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006aaa:	4b9b      	ldr	r3, [pc, #620]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d062      	beq.n	8006b92 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	f200 8081 	bhi.w	8006bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d024      	beq.n	8006b24 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d17a      	bne.n	8006bd6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b89      	ldr	r3, [pc, #548]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b06:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b22:	e08f      	b.n	8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b24:	4b7c      	ldr	r3, [pc, #496]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006b30:	4b79      	ldr	r3, [pc, #484]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	0f1b      	lsrs	r3, r3, #28
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	e006      	b.n	8006b4a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8006b3c:	4b76      	ldr	r3, [pc, #472]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	0f1b      	lsrs	r3, r3, #28
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	4a76      	ldr	r2, [pc, #472]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b70:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b74:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b90:	e058      	b.n	8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	ee07 3a90 	vmov	s15, r3
 8006b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bb8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd4:	e036      	b.n	8006c44 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006bd6:	4b50      	ldr	r3, [pc, #320]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006be2:	4b4d      	ldr	r3, [pc, #308]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	0f1b      	lsrs	r3, r3, #28
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	e006      	b.n	8006bfc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006bee:	4b4a      	ldr	r3, [pc, #296]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bf4:	041b      	lsls	r3, r3, #16
 8006bf6:	0f1b      	lsrs	r3, r3, #28
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	4a49      	ldr	r2, [pc, #292]	@ (8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c26:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c42:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006c44:	4b34      	ldr	r3, [pc, #208]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d017      	beq.n	8006c80 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c50:	4b31      	ldr	r3, [pc, #196]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c54:	0a5b      	lsrs	r3, r3, #9
 8006c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c76:	ee17 2a90 	vmov	r2, s15
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e002      	b.n	8006c86 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006c86:	4b24      	ldr	r3, [pc, #144]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d017      	beq.n	8006cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c92:	4b21      	ldr	r3, [pc, #132]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c96:	0c1b      	lsrs	r3, r3, #16
 8006c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c9c:	ee07 3a90 	vmov	s15, r3
 8006ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006ca4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb8:	ee17 2a90 	vmov	r2, s15
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	605a      	str	r2, [r3, #4]
 8006cc0:	e002      	b.n	8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006cc8:	4b13      	ldr	r3, [pc, #76]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d017      	beq.n	8006d04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cd4:	4b10      	ldr	r3, [pc, #64]	@ (8006d18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd8:	0e1b      	lsrs	r3, r3, #24
 8006cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfa:	ee17 2a90 	vmov	r2, s15
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006d02:	e002      	b.n	8006d0a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	3724      	adds	r7, #36	@ 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	46020c00 	.word	0x46020c00
 8006d1c:	4b742400 	.word	0x4b742400
 8006d20:	46000000 	.word	0x46000000
 8006d24:	0800f560 	.word	0x0800f560

08006d28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b089      	sub	sp, #36	@ 0x24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d30:	4ba6      	ldr	r3, [pc, #664]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d38:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d3a:	4ba4      	ldr	r3, [pc, #656]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006d44:	4ba1      	ldr	r3, [pc, #644]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	3301      	adds	r3, #1
 8006d50:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006d52:	4b9e      	ldr	r3, [pc, #632]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d5e:	4b9b      	ldr	r3, [pc, #620]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d062      	beq.n	8006e46 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	f200 8081 	bhi.w	8006e8a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d024      	beq.n	8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d17a      	bne.n	8006e8a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da6:	4b89      	ldr	r3, [pc, #548]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dba:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dd6:	e08f      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006dd8:	4b7c      	ldr	r3, [pc, #496]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006de4:	4b79      	ldr	r3, [pc, #484]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	0f1b      	lsrs	r3, r3, #28
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	e006      	b.n	8006dfe <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006df0:	4b76      	ldr	r3, [pc, #472]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006df2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006df6:	041b      	lsls	r3, r3, #16
 8006df8:	0f1b      	lsrs	r3, r3, #28
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	4a76      	ldr	r2, [pc, #472]	@ (8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e04:	ee07 3a90 	vmov	s15, r3
 8006e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	ee07 3a90 	vmov	s15, r3
 8006e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e24:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e28:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e44:	e058      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	ee07 3a90 	vmov	s15, r3
 8006e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e50:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e58:	4b5c      	ldr	r3, [pc, #368]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e60:	ee07 3a90 	vmov	s15, r3
 8006e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e68:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e6c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e88:	e036      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006e8a:	4b50      	ldr	r3, [pc, #320]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006e96:	4b4d      	ldr	r3, [pc, #308]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	0f1b      	lsrs	r3, r3, #28
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	e006      	b.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	0f1b      	lsrs	r3, r3, #28
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	4a49      	ldr	r2, [pc, #292]	@ (8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eda:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006ef8:	4b34      	ldr	r3, [pc, #208]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d017      	beq.n	8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f04:	4b31      	ldr	r3, [pc, #196]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f08:	0a5b      	lsrs	r3, r3, #9
 8006f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f2a:	ee17 2a90 	vmov	r2, s15
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e002      	b.n	8006f3a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f3a:	4b24      	ldr	r3, [pc, #144]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d017      	beq.n	8006f76 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f46:	4b21      	ldr	r3, [pc, #132]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6c:	ee17 2a90 	vmov	r2, s15
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	605a      	str	r2, [r3, #4]
 8006f74:	e002      	b.n	8006f7c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f7c:	4b13      	ldr	r3, [pc, #76]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d017      	beq.n	8006fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f88:	4b10      	ldr	r3, [pc, #64]	@ (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8c:	0e1b      	lsrs	r3, r3, #24
 8006f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006f9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fae:	ee17 2a90 	vmov	r2, s15
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fb6:	e002      	b.n	8006fbe <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	609a      	str	r2, [r3, #8]
}
 8006fbe:	bf00      	nop
 8006fc0:	3724      	adds	r7, #36	@ 0x24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	46020c00 	.word	0x46020c00
 8006fd0:	4b742400 	.word	0x4b742400
 8006fd4:	46000000 	.word	0x46000000
 8006fd8:	0800f560 	.word	0x0800f560

08006fdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	@ 0x24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006fe4:	4ba6      	ldr	r3, [pc, #664]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fec:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006fee:	4ba4      	ldr	r3, [pc, #656]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006ff8:	4ba1      	ldr	r3, [pc, #644]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	3301      	adds	r3, #1
 8007004:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007006:	4b9e      	ldr	r3, [pc, #632]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700a:	091b      	lsrs	r3, r3, #4
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007012:	4b9b      	ldr	r3, [pc, #620]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007016:	08db      	lsrs	r3, r3, #3
 8007018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b03      	cmp	r3, #3
 8007032:	d062      	beq.n	80070fa <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b03      	cmp	r3, #3
 8007038:	f200 8081 	bhi.w	800713e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d024      	beq.n	800708c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d17a      	bne.n	800713e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b89      	ldr	r3, [pc, #548]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800705c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800706a:	ed97 6a02 	vldr	s12, [r7, #8]
 800706e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800707a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800708a:	e08f      	b.n	80071ac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800708c:	4b7c      	ldr	r3, [pc, #496]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007098:	4b79      	ldr	r3, [pc, #484]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	0f1b      	lsrs	r3, r3, #28
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	e006      	b.n	80070b2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80070a4:	4b76      	ldr	r3, [pc, #472]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80070a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070aa:	041b      	lsls	r3, r3, #16
 80070ac:	0f1b      	lsrs	r3, r3, #28
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	4a76      	ldr	r2, [pc, #472]	@ (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80070b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b8:	ee07 3a90 	vmov	s15, r3
 80070bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80070dc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80070e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070f8:	e058      	b.n	80071ac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007104:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8007108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710c:	4b5c      	ldr	r3, [pc, #368]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800710e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800711c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007120:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007124:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007128:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800712c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007130:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800713c:	e036      	b.n	80071ac <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800713e:	4b50      	ldr	r3, [pc, #320]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800714a:	4b4d      	ldr	r3, [pc, #308]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	0f1b      	lsrs	r3, r3, #28
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	e006      	b.n	8007164 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8007156:	4b4a      	ldr	r3, [pc, #296]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800715c:	041b      	lsls	r3, r3, #16
 800715e:	0f1b      	lsrs	r3, r3, #28
 8007160:	f003 030f 	and.w	r3, r3, #15
 8007164:	4a49      	ldr	r2, [pc, #292]	@ (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a02 	vldr	s12, [r7, #8]
 800718e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071aa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071ac:	4b34      	ldr	r3, [pc, #208]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d017      	beq.n	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071b8:	4b31      	ldr	r3, [pc, #196]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071bc:	0a5b      	lsrs	r3, r3, #9
 80071be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80071ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071de:	ee17 2a90 	vmov	r2, s15
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e002      	b.n	80071ee <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80071ee:	4b24      	ldr	r3, [pc, #144]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d017      	beq.n	800722a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071fa:	4b21      	ldr	r3, [pc, #132]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	0c1b      	lsrs	r3, r3, #16
 8007200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800720c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007210:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007214:	edd7 6a07 	vldr	s13, [r7, #28]
 8007218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007220:	ee17 2a90 	vmov	r2, s15
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]
 8007228:	e002      	b.n	8007230 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007230:	4b13      	ldr	r3, [pc, #76]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800723c:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800723e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007240:	0e1b      	lsrs	r3, r3, #24
 8007242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800724e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007252:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007256:	edd7 6a07 	vldr	s13, [r7, #28]
 800725a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007262:	ee17 2a90 	vmov	r2, s15
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800726a:	e002      	b.n	8007272 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	609a      	str	r2, [r3, #8]
}
 8007272:	bf00      	nop
 8007274:	3724      	adds	r7, #36	@ 0x24
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	46020c00 	.word	0x46020c00
 8007284:	4b742400 	.word	0x4b742400
 8007288:	46000000 	.word	0x46000000
 800728c:	0800f560 	.word	0x0800f560

08007290 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	@ 0x38
 8007294:	af00      	add	r7, sp, #0
 8007296:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800729a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800729e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80072a2:	430b      	orrs	r3, r1
 80072a4:	d145      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072a6:	4baa      	ldr	r3, [pc, #680]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072b0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072b2:	4ba7      	ldr	r3, [pc, #668]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d108      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c6:	d104      	bne.n	80072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80072c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ce:	f001 b987 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80072d2:	4b9f      	ldr	r3, [pc, #636]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072e0:	d114      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072e8:	d110      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072ea:	4b99      	ldr	r3, [pc, #612]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f8:	d103      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80072fa:	23fa      	movs	r3, #250	@ 0xfa
 80072fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072fe:	f001 b96f 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007302:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007308:	f001 b96a 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800730c:	4b90      	ldr	r3, [pc, #576]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007318:	d107      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007320:	d103      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007322:	4b8c      	ldr	r3, [pc, #560]	@ (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007324:	637b      	str	r3, [r7, #52]	@ 0x34
 8007326:	f001 b95b 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	f001 b957 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007336:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800733a:	430b      	orrs	r3, r1
 800733c:	d151      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800733e:	4b84      	ldr	r3, [pc, #528]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007340:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007344:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007348:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	2b80      	cmp	r3, #128	@ 0x80
 800734e:	d035      	beq.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	2b80      	cmp	r3, #128	@ 0x80
 8007354:	d841      	bhi.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	2b60      	cmp	r3, #96	@ 0x60
 800735a:	d02a      	beq.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	2b60      	cmp	r3, #96	@ 0x60
 8007360:	d83b      	bhi.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	d009      	beq.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	2b40      	cmp	r3, #64	@ 0x40
 800736c:	d835      	bhi.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00c      	beq.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	2b20      	cmp	r3, #32
 8007378:	d012      	beq.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800737a:	e02e      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800737c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fb77 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800738a:	f001 b929 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738e:	f107 0318 	add.w	r3, r7, #24
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fcc8 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800739c:	f001 b920 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073a0:	f107 030c 	add.w	r3, r7, #12
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff fe19 	bl	8006fdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ae:	f001 b917 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073b8:	f001 b912 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073bc:	4b64      	ldr	r3, [pc, #400]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c8:	d103      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80073ca:	4b63      	ldr	r3, [pc, #396]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073ce:	f001 b907 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d6:	f001 b903 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073de:	f001 b8ff 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80073e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80073ea:	430b      	orrs	r3, r1
 80073ec:	d158      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80073ee:	4b58      	ldr	r3, [pc, #352]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80073f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007400:	d03b      	beq.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007408:	d846      	bhi.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007410:	d02e      	beq.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007418:	d83e      	bhi.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007420:	d00b      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007428:	d836      	bhi.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007436:	d012      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007438:	e02e      	b.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800743a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fb18 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007448:	f001 b8ca 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744c:	f107 0318 	add.w	r3, r7, #24
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fc69 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800745a:	f001 b8c1 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800745e:	f107 030c 	add.w	r3, r7, #12
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff fdba 	bl	8006fdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800746c:	f001 b8b8 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007470:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007474:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007476:	f001 b8b3 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800747a:	4b35      	ldr	r3, [pc, #212]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007482:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007486:	d103      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007488:	4b33      	ldr	r3, [pc, #204]	@ (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800748a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800748c:	f001 b8a8 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007494:	f001 b8a4 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800749c:	f001 b8a0 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80074a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a4:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80074a8:	430b      	orrs	r3, r1
 80074aa:	d16e      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80074ac:	4b28      	ldr	r3, [pc, #160]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074b2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80074b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80074be:	d034      	beq.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80074c6:	d85c      	bhi.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ce:	d00b      	beq.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074d6:	d854      	bhi.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d016      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074e4:	d009      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80074e6:	e04c      	b.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fac1 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074f6:	f001 b873 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074fa:	f107 0318 	add.w	r3, r7, #24
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fc12 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007508:	f001 b86a 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800750c:	4b10      	ldr	r3, [pc, #64]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007518:	d103      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800751a:	4b10      	ldr	r3, [pc, #64]	@ (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800751e:	f001 b85f 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007526:	f001 b85b 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800752a:	4b09      	ldr	r3, [pc, #36]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b20      	cmp	r3, #32
 8007534:	d121      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007536:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007542:	4b03      	ldr	r3, [pc, #12]	@ (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	0e1b      	lsrs	r3, r3, #24
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	e00f      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800754e:	bf00      	nop
 8007550:	46020c00 	.word	0x46020c00
 8007554:	0007a120 	.word	0x0007a120
 8007558:	00f42400 	.word	0x00f42400
 800755c:	02dc6c00 	.word	0x02dc6c00
 8007560:	4ba7      	ldr	r3, [pc, #668]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	4aa5      	ldr	r2, [pc, #660]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007574:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007576:	f001 b833 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800757e:	f001 b82f 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007586:	f001 b82b 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800758a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007592:	430b      	orrs	r3, r1
 8007594:	d17f      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007596:	4b9a      	ldr	r3, [pc, #616]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007598:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800759c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075a0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d165      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80075a8:	4b95      	ldr	r3, [pc, #596]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80075aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075ae:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80075b2:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80075b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80075ba:	d034      	beq.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80075c2:	d853      	bhi.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075ca:	d00b      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075d2:	d84b      	bhi.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80075d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d016      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075e0:	d009      	beq.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80075e2:	e043      	b.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff fa43 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80075f2:	f000 bff5 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f6:	f107 0318 	add.w	r3, r7, #24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fb94 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007604:	f000 bfec 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007608:	4b7d      	ldr	r3, [pc, #500]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007614:	d103      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8007616:	4b7c      	ldr	r3, [pc, #496]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007618:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800761a:	f000 bfe1 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007622:	f000 bfdd 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007626:	4b76      	ldr	r3, [pc, #472]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b20      	cmp	r3, #32
 8007630:	d118      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007632:	4b73      	ldr	r3, [pc, #460]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800763e:	4b70      	ldr	r3, [pc, #448]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	0e1b      	lsrs	r3, r3, #24
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	e006      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800764a:	4b6d      	ldr	r3, [pc, #436]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800764c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	0e1b      	lsrs	r3, r3, #24
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	4a6a      	ldr	r2, [pc, #424]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007660:	f000 bfbe 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007668:	f000 bfba 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007670:	f000 bfb6 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800767a:	d108      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800767c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff f9f7 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
 800768a:	f000 bfa9 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
 8007692:	f000 bfa5 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800769a:	1e51      	subs	r1, r2, #1
 800769c:	430b      	orrs	r3, r1
 800769e:	d136      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80076a0:	4b57      	ldr	r3, [pc, #348]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80076a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d104      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80076b2:	f7fe fb55 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 80076b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80076b8:	f000 bf92 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d104      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076c2:	f7fe fa1d 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80076c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80076c8:	f000 bf8a 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80076cc:	4b4c      	ldr	r3, [pc, #304]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076d8:	d106      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 80076da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d103      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 80076e0:	4b4a      	ldr	r3, [pc, #296]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80076e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e4:	f000 bf7c 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80076e8:	4b45      	ldr	r3, [pc, #276]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80076ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d107      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d104      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 80076fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34
 8007702:	f000 bf6d 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	637b      	str	r3, [r7, #52]	@ 0x34
 800770a:	f000 bf69 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800770e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007712:	1e91      	subs	r1, r2, #2
 8007714:	430b      	orrs	r3, r1
 8007716:	d136      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007718:	4b39      	ldr	r3, [pc, #228]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800771a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800771e:	f003 030c 	and.w	r3, r3, #12
 8007722:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800772a:	f7fe fb05 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 800772e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007730:	f000 bf56 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	2b04      	cmp	r3, #4
 8007738:	d104      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800773a:	f7fe f9e1 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 800773e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007740:	f000 bf4e 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007744:	4b2e      	ldr	r3, [pc, #184]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800774c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007750:	d106      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	2b08      	cmp	r3, #8
 8007756:	d103      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007758:	4b2c      	ldr	r3, [pc, #176]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
 800775c:	f000 bf40 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007760:	4b27      	ldr	r3, [pc, #156]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d107      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	2b0c      	cmp	r3, #12
 8007772:	d104      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
 800777a:	f000 bf31 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	637b      	str	r3, [r7, #52]	@ 0x34
 8007782:	f000 bf2d 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800778a:	1f11      	subs	r1, r2, #4
 800778c:	430b      	orrs	r3, r1
 800778e:	d13f      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007790:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007796:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800779a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800779c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077a2:	f7fe fac9 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80077a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80077a8:	f000 bf1a 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	d104      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077b2:	f7fe f9a5 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80077b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80077b8:	f000 bf12 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80077bc:	4b10      	ldr	r3, [pc, #64]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077c8:	d106      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d103      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 80077d0:	4b0e      	ldr	r3, [pc, #56]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80077d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d4:	f000 bf04 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80077d8:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80077da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d107      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	2b30      	cmp	r3, #48	@ 0x30
 80077ea:	d104      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 80077ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f2:	f000 bef5 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077fa:	f000 bef1 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80077fe:	bf00      	nop
 8007800:	46020c00 	.word	0x46020c00
 8007804:	0800f560 	.word	0x0800f560
 8007808:	02dc6c00 	.word	0x02dc6c00
 800780c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007814:	f1a2 0108 	sub.w	r1, r2, #8
 8007818:	430b      	orrs	r3, r1
 800781a:	d136      	bne.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800781c:	4ba4      	ldr	r3, [pc, #656]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800781e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007822:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007826:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800782e:	f7fe fa83 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007832:	6378      	str	r0, [r7, #52]	@ 0x34
 8007834:	f000 bed4 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	2b40      	cmp	r3, #64	@ 0x40
 800783c:	d104      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800783e:	f7fe f95f 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8007842:	6378      	str	r0, [r7, #52]	@ 0x34
 8007844:	f000 becc 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007848:	4b99      	ldr	r3, [pc, #612]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007854:	d106      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2b80      	cmp	r3, #128	@ 0x80
 800785a:	d103      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 800785c:	4b95      	ldr	r3, [pc, #596]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	f000 bebe 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007864:	4b92      	ldr	r3, [pc, #584]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	d107      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	2bc0      	cmp	r3, #192	@ 0xc0
 8007876:	d104      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
 800787e:	f000 beaf 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
 8007886:	f000 beab 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800788a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788e:	f1a2 0110 	sub.w	r1, r2, #16
 8007892:	430b      	orrs	r3, r1
 8007894:	d139      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007896:	4b86      	ldr	r3, [pc, #536]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800789c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80078a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078a8:	f7fe fa46 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80078ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80078ae:	f000 be97 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078b8:	d104      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078ba:	f7fe f921 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80078be:	6378      	str	r0, [r7, #52]	@ 0x34
 80078c0:	f000 be8e 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80078c4:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078d0:	d107      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d8:	d103      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 80078da:	4b76      	ldr	r3, [pc, #472]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078de:	f000 be7f 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80078e2:	4b73      	ldr	r3, [pc, #460]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80078e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d108      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078f6:	d104      	bne.n	8007902 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 80078f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078fe:	f000 be6f 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	637b      	str	r3, [r7, #52]	@ 0x34
 8007906:	f000 be6b 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800790a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790e:	f1a2 0120 	sub.w	r1, r2, #32
 8007912:	430b      	orrs	r3, r1
 8007914:	d158      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007916:	4b66      	ldr	r3, [pc, #408]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	2b00      	cmp	r3, #0
 8007926:	d104      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007928:	f7fe fa2e 	bl	8005d88 <HAL_RCC_GetPCLK3Freq>
 800792c:	6378      	str	r0, [r7, #52]	@ 0x34
 800792e:	f000 be57 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	2b01      	cmp	r3, #1
 8007936:	d104      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007938:	f7fe f8e2 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 800793c:	6378      	str	r0, [r7, #52]	@ 0x34
 800793e:	f000 be4f 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007942:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800794a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800794e:	d106      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8007950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007952:	2b02      	cmp	r3, #2
 8007954:	d103      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8007956:	4b57      	ldr	r3, [pc, #348]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
 800795a:	f000 be41 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800795e:	4b54      	ldr	r3, [pc, #336]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b02      	cmp	r3, #2
 800796a:	d107      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	2b03      	cmp	r3, #3
 8007970:	d104      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8007972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007976:	637b      	str	r3, [r7, #52]	@ 0x34
 8007978:	f000 be32 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800797c:	4b4c      	ldr	r3, [pc, #304]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b20      	cmp	r3, #32
 8007986:	d11b      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8007988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798a:	2b04      	cmp	r3, #4
 800798c:	d118      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800798e:	4b48      	ldr	r3, [pc, #288]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800799a:	4b45      	ldr	r3, [pc, #276]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0e1b      	lsrs	r3, r3, #24
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	e006      	b.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80079a6:	4b42      	ldr	r3, [pc, #264]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	0e1b      	lsrs	r3, r3, #24
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	4a40      	ldr	r2, [pc, #256]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80079b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80079bc:	f000 be10 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c4:	f000 be0c 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80079c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079cc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80079d0:	430b      	orrs	r3, r1
 80079d2:	d173      	bne.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80079d4:	4b36      	ldr	r3, [pc, #216]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80079d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079da:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80079de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e6:	d104      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079e8:	f7fe f88a 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80079ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80079ee:	f000 bdf7 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079f8:	d108      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079fa:	f107 0318 	add.w	r3, r7, #24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff f992 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a08:	f000 bdea 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007a12:	f7fe f977 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8007a16:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a18:	f000 bde2 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a22:	d122      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a24:	4b22      	ldr	r3, [pc, #136]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d118      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a30:	4b1f      	ldr	r3, [pc, #124]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	0e1b      	lsrs	r3, r3, #24
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	e006      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007a48:	4b19      	ldr	r3, [pc, #100]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a4e:	041b      	lsls	r3, r3, #16
 8007a50:	0e1b      	lsrs	r3, r3, #24
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	4a18      	ldr	r2, [pc, #96]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8007a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5e:	f000 bdbf 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a66:	f000 bdbb 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007a6a:	4b11      	ldr	r3, [pc, #68]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a76:	d107      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a7e:	d103      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007a80:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a84:	f000 bdac 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007a88:	4b09      	ldr	r3, [pc, #36]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a94:	d107      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a9c:	d103      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007a9e:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa2:	f000 bd9d 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aaa:	f000 bd99 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007aae:	bf00      	nop
 8007ab0:	46020c00 	.word	0x46020c00
 8007ab4:	00f42400 	.word	0x00f42400
 8007ab8:	0800f560 	.word	0x0800f560
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	d158      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007ac8:	4bad      	ldr	r3, [pc, #692]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007aca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d84b      	bhi.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007ada:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007b19 	.word	0x08007b19
 8007ae4:	08007af5 	.word	0x08007af5
 8007ae8:	08007b07 	.word	0x08007b07
 8007aec:	08007b23 	.word	0x08007b23
 8007af0:	08007b2d 	.word	0x08007b2d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe ffbb 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b02:	f000 bd6d 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b06:	f107 030c 	add.w	r3, r7, #12
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fa66 	bl	8006fdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b14:	f000 bd64 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007b18:	f7fe f8f4 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8007b1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b1e:	f000 bd5f 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b28:	f000 bd5a 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b2c:	4b94      	ldr	r3, [pc, #592]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	d118      	bne.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b38:	4b91      	ldr	r3, [pc, #580]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8007b44:	4b8e      	ldr	r3, [pc, #568]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	0e1b      	lsrs	r3, r3, #24
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	e006      	b.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8007b50:	4b8b      	ldr	r3, [pc, #556]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	0e1b      	lsrs	r3, r3, #24
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	4a89      	ldr	r2, [pc, #548]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b66:	f000 bd3b 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b6e:	f000 bd37 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b76:	f000 bd33 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b7e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007b82:	430b      	orrs	r3, r1
 8007b84:	d167      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007b86:	4b7e      	ldr	r3, [pc, #504]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b8c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007b90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b98:	d036      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ba0:	d855      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ba8:	d029      	beq.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bb0:	d84d      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bb8:	d013      	beq.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc0:	d845      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bce:	d13e      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe ff4d 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bde:	f000 bcff 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be2:	f107 030c 	add.w	r3, r7, #12
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff f9f8 	bl	8006fdc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bf0:	f000 bcf6 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007bf4:	f7fe f886 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8007bf8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007bfa:	f000 bcf1 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007bfe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007c02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c04:	f000 bcec 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c08:	4b5d      	ldr	r3, [pc, #372]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d118      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c14:	4b5a      	ldr	r3, [pc, #360]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8007c20:	4b57      	ldr	r3, [pc, #348]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	0e1b      	lsrs	r3, r3, #24
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	e006      	b.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007c2c:	4b54      	ldr	r3, [pc, #336]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	0e1b      	lsrs	r3, r3, #24
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	4a52      	ldr	r2, [pc, #328]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c42:	f000 bccd 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c4a:	f000 bcc9 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c52:	f000 bcc5 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c5a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	d14c      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c62:	4b47      	ldr	r3, [pc, #284]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fe f860 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007c78:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c7a:	f000 bcb1 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c84:	d104      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c86:	f7fd ff3b 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8007c8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c8c:	f000 bca8 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007c90:	4b3b      	ldr	r3, [pc, #236]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c9c:	d107      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ca4:	d103      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8007ca6:	4b38      	ldr	r3, [pc, #224]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007caa:	f000 bc99 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007cae:	4b34      	ldr	r3, [pc, #208]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d11c      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cc0:	d118      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007cce:	4b2c      	ldr	r3, [pc, #176]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	0e1b      	lsrs	r3, r3, #24
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	e006      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8007cda:	4b29      	ldr	r3, [pc, #164]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ce0:	041b      	lsls	r3, r3, #16
 8007ce2:	0e1b      	lsrs	r3, r3, #24
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	4a26      	ldr	r2, [pc, #152]	@ (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	f000 bc76 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf8:	f000 bc72 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d00:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007d04:	430b      	orrs	r3, r1
 8007d06:	d152      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d08:	4b1d      	ldr	r3, [pc, #116]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d1a:	f7fe f80d 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007d1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d20:	f000 bc5e 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2a:	d104      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d2c:	f7fd fee8 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8007d30:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d32:	f000 bc55 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007d36:	4b12      	ldr	r3, [pc, #72]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d42:	d107      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d4a:	d103      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8007d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d50:	f000 bc46 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007d54:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	d122      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d66:	d11e      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d68:	4b05      	ldr	r3, [pc, #20]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007d74:	4b02      	ldr	r3, [pc, #8]	@ (8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	0e1b      	lsrs	r3, r3, #24
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	e00c      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007d80:	46020c00 	.word	0x46020c00
 8007d84:	0800f560 	.word	0x0800f560
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	4ba1      	ldr	r3, [pc, #644]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	0e1b      	lsrs	r3, r3, #24
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	4a9f      	ldr	r2, [pc, #636]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da2:	f000 bc1d 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007daa:	f000 bc19 	b.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007db6:	430b      	orrs	r3, r1
 8007db8:	d151      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007dba:	4b96      	ldr	r3, [pc, #600]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007dc0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007dc4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dca:	d024      	beq.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dd0:	d842      	bhi.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd4:	2b80      	cmp	r3, #128	@ 0x80
 8007dd6:	d00d      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	2b80      	cmp	r3, #128	@ 0x80
 8007ddc:	d83c      	bhi.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d011      	beq.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8007dea:	e035      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007dec:	f7fd ffcc 	bl	8005d88 <HAL_RCC_GetPCLK3Freq>
 8007df0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007df2:	e3f5      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007df4:	4b87      	ldr	r3, [pc, #540]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e00:	d102      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007e02:	4b86      	ldr	r3, [pc, #536]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e06:	e3eb      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e0c:	e3e8      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007e0e:	f7fd fe77 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8007e12:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e14:	e3e4      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e16:	4b7f      	ldr	r3, [pc, #508]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d117      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e22:	4b7c      	ldr	r3, [pc, #496]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8007e2e:	4b79      	ldr	r3, [pc, #484]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8007e3a:	4b76      	ldr	r3, [pc, #472]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	4a73      	ldr	r2, [pc, #460]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e50:	e3c6      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e56:	e3c3      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e5c:	e3c0      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e62:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007e66:	430b      	orrs	r3, r1
 8007e68:	d147      	bne.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e7c:	f7fd ff5c 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007e80:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e82:	e3ad      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e8a:	d103      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e8c:	f7fd fe38 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8007e90:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e92:	e3a5      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007e94:	4b5f      	ldr	r3, [pc, #380]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea0:	d106      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ea8:	d102      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8007eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eae:	e397      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007eb0:	4b58      	ldr	r3, [pc, #352]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d11b      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ec2:	d117      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ec4:	4b53      	ldr	r3, [pc, #332]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007ed0:	4b50      	ldr	r3, [pc, #320]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	0e1b      	lsrs	r3, r3, #24
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	e006      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007edc:	4b4d      	ldr	r3, [pc, #308]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	0e1b      	lsrs	r3, r3, #24
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	4a4b      	ldr	r2, [pc, #300]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef2:	e375      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef8:	e372      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007efe:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007f02:	430b      	orrs	r3, r1
 8007f04:	d164      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007f06:	4b43      	ldr	r3, [pc, #268]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d120      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007f18:	4b3e      	ldr	r3, [pc, #248]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d117      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f24:	4b3b      	ldr	r3, [pc, #236]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007f30:	4b38      	ldr	r3, [pc, #224]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	0e1b      	lsrs	r3, r3, #24
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	e006      	b.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8007f3c:	4b35      	ldr	r3, [pc, #212]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	0e1b      	lsrs	r3, r3, #24
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	4a33      	ldr	r2, [pc, #204]	@ (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f52:	e345      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f58:	e342      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f68:	d112      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f70:	d10e      	bne.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f72:	4b28      	ldr	r3, [pc, #160]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f80:	d102      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007f82:	23fa      	movs	r3, #250	@ 0xfa
 8007f84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f86:	e32b      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f88:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f8e:	e327      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007f90:	4b20      	ldr	r3, [pc, #128]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f9c:	d106      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fa4:	d102      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8007fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800801c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007faa:	e319      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007fac:	4b19      	ldr	r3, [pc, #100]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d107      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fc0:	d103      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc8:	e30a      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fce:	e307      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	d16b      	bne.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fe2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fe6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d127      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007fee:	4b09      	ldr	r3, [pc, #36]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d11e      	bne.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ffa:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00c      	beq.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8008006:	4b03      	ldr	r3, [pc, #12]	@ (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	0e1b      	lsrs	r3, r3, #24
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	e00d      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008012:	bf00      	nop
 8008014:	46020c00 	.word	0x46020c00
 8008018:	0800f560 	.word	0x0800f560
 800801c:	00f42400 	.word	0x00f42400
 8008020:	4b94      	ldr	r3, [pc, #592]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008022:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	0e1b      	lsrs	r3, r3, #24
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	4a92      	ldr	r2, [pc, #584]	@ (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008034:	637b      	str	r3, [r7, #52]	@ 0x34
 8008036:	e2d3      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
 800803c:	e2d0      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800803e:	4b8d      	ldr	r3, [pc, #564]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800804c:	d112      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008054:	d10e      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008056:	4b87      	ldr	r3, [pc, #540]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800805c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008064:	d102      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8008066:	23fa      	movs	r3, #250	@ 0xfa
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800806a:	e2b9      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800806c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008070:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008072:	e2b5      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008074:	4b7f      	ldr	r3, [pc, #508]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800807c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008080:	d106      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008088:	d102      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800808a:	4b7c      	ldr	r3, [pc, #496]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800808c:	637b      	str	r3, [r7, #52]	@ 0x34
 800808e:	e2a7      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008090:	4b78      	ldr	r3, [pc, #480]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b02      	cmp	r3, #2
 800809c:	d107      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080a4:	d103      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80080a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ac:	e298      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b2:	e295      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80080b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80080bc:	430b      	orrs	r3, r1
 80080be:	d147      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80080c0:	4b6c      	ldr	r3, [pc, #432]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80080c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80080c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80080ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80080d2:	f7fd fe31 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80080d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80080d8:	e282      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80080da:	4b66      	ldr	r3, [pc, #408]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80080dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080e8:	d112      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080f0:	d10e      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080f2:	4b60      	ldr	r3, [pc, #384]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80080f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008100:	d102      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8008102:	23fa      	movs	r3, #250	@ 0xfa
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008106:	e26b      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008108:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800810c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800810e:	e267      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008110:	4b58      	ldr	r3, [pc, #352]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800811c:	d106      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008124:	d102      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8008126:	4b55      	ldr	r3, [pc, #340]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008128:	637b      	str	r3, [r7, #52]	@ 0x34
 800812a:	e259      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800812c:	4b51      	ldr	r3, [pc, #324]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800812e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b02      	cmp	r3, #2
 8008138:	d107      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008140:	d103      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8008142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008146:	637b      	str	r3, [r7, #52]	@ 0x34
 8008148:	e24a      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	637b      	str	r3, [r7, #52]	@ 0x34
 800814e:	e247      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008154:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8008158:	430b      	orrs	r3, r1
 800815a:	d12d      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800815c:	4b45      	ldr	r3, [pc, #276]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800815e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008162:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008166:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008168:	4b42      	ldr	r3, [pc, #264]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008174:	d105      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 800817c:	4b3f      	ldr	r3, [pc, #252]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800817e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008180:	e22e      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008188:	d107      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800818a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fc70 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008196:	637b      	str	r3, [r7, #52]	@ 0x34
 8008198:	e222      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a0:	d107      	bne.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081a2:	f107 0318 	add.w	r3, r7, #24
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fdbe 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b0:	e216      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b6:	e213      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80081b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081bc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80081c0:	430b      	orrs	r3, r1
 80081c2:	d15d      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80081c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80081c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80081ce:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081d6:	d028      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80081de:	d845      	bhi.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081e6:	d013      	beq.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081ee:	d83d      	bhi.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081fc:	d004      	beq.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80081fe:	e035      	b.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008200:	f7fd fdae 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8008204:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008206:	e1eb      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008208:	f7fd fc7a 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 800820c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800820e:	e1e7      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008210:	4b18      	ldr	r3, [pc, #96]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800821c:	d102      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800821e:	4b17      	ldr	r3, [pc, #92]	@ (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008220:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008222:	e1dd      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008228:	e1da      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800822a:	4b12      	ldr	r3, [pc, #72]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b20      	cmp	r3, #32
 8008234:	d117      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008236:	4b0f      	ldr	r3, [pc, #60]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008242:	4b0c      	ldr	r3, [pc, #48]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	0e1b      	lsrs	r3, r3, #24
 8008248:	f003 030f 	and.w	r3, r3, #15
 800824c:	e006      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800824e:	4b09      	ldr	r3, [pc, #36]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	0e1b      	lsrs	r3, r3, #24
 8008258:	f003 030f 	and.w	r3, r3, #15
 800825c:	4a06      	ldr	r2, [pc, #24]	@ (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800825e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008264:	e1bc      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800826a:	e1b9      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008270:	e1b6      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008272:	bf00      	nop
 8008274:	46020c00 	.word	0x46020c00
 8008278:	0800f560 	.word	0x0800f560
 800827c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008284:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8008288:	430b      	orrs	r3, r1
 800828a:	d156      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800828c:	4ba5      	ldr	r3, [pc, #660]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800828e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008292:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008296:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800829e:	d028      	beq.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80082a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082a6:	d845      	bhi.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ae:	d013      	beq.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b6:	d83d      	bhi.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80082be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082c4:	d004      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80082c6:	e035      	b.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80082c8:	f7fd fd36 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80082cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082ce:	e187      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082d0:	f7fd fc16 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80082d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082d6:	e183      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082d8:	4b92      	ldr	r3, [pc, #584]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082e4:	d102      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80082e6:	4b90      	ldr	r3, [pc, #576]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082ea:	e179      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082f0:	e176      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082f2:	4b8c      	ldr	r3, [pc, #560]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d117      	bne.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082fe:	4b89      	ldr	r3, [pc, #548]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800830a:	4b86      	ldr	r3, [pc, #536]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	0e1b      	lsrs	r3, r3, #24
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	e006      	b.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8008316:	4b83      	ldr	r3, [pc, #524]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800831c:	041b      	lsls	r3, r3, #16
 800831e:	0e1b      	lsrs	r3, r3, #24
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	4a81      	ldr	r2, [pc, #516]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800832c:	e158      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008332:	e155      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008338:	e152      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800833a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800833e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008342:	430b      	orrs	r3, r1
 8008344:	d177      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008346:	4b77      	ldr	r3, [pc, #476]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800834c:	f003 0318 	and.w	r3, r3, #24
 8008350:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	2b18      	cmp	r3, #24
 8008356:	d86b      	bhi.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8008358:	a201      	add	r2, pc, #4	@ (adr r2, 8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	080083c5 	.word	0x080083c5
 8008364:	08008431 	.word	0x08008431
 8008368:	08008431 	.word	0x08008431
 800836c:	08008431 	.word	0x08008431
 8008370:	08008431 	.word	0x08008431
 8008374:	08008431 	.word	0x08008431
 8008378:	08008431 	.word	0x08008431
 800837c:	08008431 	.word	0x08008431
 8008380:	080083cd 	.word	0x080083cd
 8008384:	08008431 	.word	0x08008431
 8008388:	08008431 	.word	0x08008431
 800838c:	08008431 	.word	0x08008431
 8008390:	08008431 	.word	0x08008431
 8008394:	08008431 	.word	0x08008431
 8008398:	08008431 	.word	0x08008431
 800839c:	08008431 	.word	0x08008431
 80083a0:	080083d5 	.word	0x080083d5
 80083a4:	08008431 	.word	0x08008431
 80083a8:	08008431 	.word	0x08008431
 80083ac:	08008431 	.word	0x08008431
 80083b0:	08008431 	.word	0x08008431
 80083b4:	08008431 	.word	0x08008431
 80083b8:	08008431 	.word	0x08008431
 80083bc:	08008431 	.word	0x08008431
 80083c0:	080083ef 	.word	0x080083ef
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80083c4:	f7fd fce0 	bl	8005d88 <HAL_RCC_GetPCLK3Freq>
 80083c8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083ca:	e109      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80083cc:	f7fd fb98 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80083d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80083d2:	e105      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083d4:	4b53      	ldr	r3, [pc, #332]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083e0:	d102      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80083e2:	4b51      	ldr	r3, [pc, #324]	@ (8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80083e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083e6:	e0fb      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083ec:	e0f8      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083ee:	4b4d      	ldr	r3, [pc, #308]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d117      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8008406:	4b47      	ldr	r3, [pc, #284]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	0e1b      	lsrs	r3, r3, #24
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	e006      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008412:	4b44      	ldr	r3, [pc, #272]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008418:	041b      	lsls	r3, r3, #16
 800841a:	0e1b      	lsrs	r3, r3, #24
 800841c:	f003 030f 	and.w	r3, r3, #15
 8008420:	4a42      	ldr	r2, [pc, #264]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008426:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008428:	e0da      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800842e:	e0d7      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008434:	e0d4      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800843e:	430b      	orrs	r3, r1
 8008440:	d155      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008442:	4b38      	ldr	r3, [pc, #224]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008444:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008448:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800844c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008454:	d013      	beq.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8008456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800845c:	d844      	bhi.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008464:	d013      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800846c:	d83c      	bhi.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	2b00      	cmp	r3, #0
 8008472:	d014      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800847a:	d014      	beq.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800847c:	e034      	b.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800847e:	f107 0318 	add.w	r3, r7, #24
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fc50 	bl	8006d28 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800848c:	e0a8      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800848e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe faee 	bl	8006a74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800849c:	e0a0      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800849e:	f7fd fb2f 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 80084a2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084a4:	e09c      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d117      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80084be:	4b19      	ldr	r3, [pc, #100]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	0e1b      	lsrs	r3, r3, #24
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	e006      	b.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 80084ca:	4b16      	ldr	r3, [pc, #88]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	0e1b      	lsrs	r3, r3, #24
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	4a14      	ldr	r2, [pc, #80]	@ (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80084da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084e0:	e07e      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084e6:	e07b      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084ec:	e078      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80084ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80084f6:	430b      	orrs	r3, r1
 80084f8:	d138      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80084fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80084fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008504:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008506:	4b07      	ldr	r3, [pc, #28]	@ (8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b02      	cmp	r3, #2
 8008512:	d10d      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800851a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800851e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008520:	e05e      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008522:	bf00      	nop
 8008524:	46020c00 	.word	0x46020c00
 8008528:	00f42400 	.word	0x00f42400
 800852c:	0800f560 	.word	0x0800f560
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008530:	4b2e      	ldr	r3, [pc, #184]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800853a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800853e:	d112      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008546:	d10e      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008548:	4b28      	ldr	r3, [pc, #160]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800854a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800854e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008556:	d102      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008558:	23fa      	movs	r3, #250	@ 0xfa
 800855a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800855c:	e040      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800855e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008564:	e03c      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	637b      	str	r3, [r7, #52]	@ 0x34
 800856a:	e039      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800856c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008570:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008574:	430b      	orrs	r3, r1
 8008576:	d131      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008578:	4b1c      	ldr	r3, [pc, #112]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800857a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800857e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008582:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008584:	4b19      	ldr	r3, [pc, #100]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800858c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008590:	d105      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008598:	4b15      	ldr	r3, [pc, #84]	@ (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800859a:	637b      	str	r3, [r7, #52]	@ 0x34
 800859c:	e020      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800859e:	4b13      	ldr	r3, [pc, #76]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085aa:	d106      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80085ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085b2:	d102      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80085b4:	4b0f      	ldr	r3, [pc, #60]	@ (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b8:	e012      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80085ba:	4b0c      	ldr	r3, [pc, #48]	@ (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085c6:	d106      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ce:	d102      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 80085d0:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d4:	e004      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085da:	e001      	b.n	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80085e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3738      	adds	r7, #56	@ 0x38
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	46020c00 	.word	0x46020c00
 80085f0:	02dc6c00 	.word	0x02dc6c00
 80085f4:	016e3600 	.word	0x016e3600
 80085f8:	00f42400 	.word	0x00f42400

080085fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008604:	4b47      	ldr	r3, [pc, #284]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a46      	ldr	r2, [pc, #280]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 800860a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800860e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008610:	f7f9 fe00 	bl	8002214 <HAL_GetTick>
 8008614:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008616:	e008      	b.n	800862a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008618:	f7f9 fdfc 	bl	8002214 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e077      	b.n	800871a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800862a:	4b3e      	ldr	r3, [pc, #248]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1f0      	bne.n	8008618 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008636:	4b3b      	ldr	r3, [pc, #236]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 8008638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6811      	ldr	r1, [r2, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6852      	ldr	r2, [r2, #4]
 800864a:	3a01      	subs	r2, #1
 800864c:	0212      	lsls	r2, r2, #8
 800864e:	430a      	orrs	r2, r1
 8008650:	4934      	ldr	r1, [pc, #208]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 8008652:	4313      	orrs	r3, r2
 8008654:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008656:	4b33      	ldr	r3, [pc, #204]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 8008658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800865a:	4b33      	ldr	r3, [pc, #204]	@ (8008728 <RCCEx_PLL2_Config+0x12c>)
 800865c:	4013      	ands	r3, r2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6892      	ldr	r2, [r2, #8]
 8008662:	3a01      	subs	r2, #1
 8008664:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	68d2      	ldr	r2, [r2, #12]
 800866c:	3a01      	subs	r2, #1
 800866e:	0252      	lsls	r2, r2, #9
 8008670:	b292      	uxth	r2, r2
 8008672:	4311      	orrs	r1, r2
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6912      	ldr	r2, [r2, #16]
 8008678:	3a01      	subs	r2, #1
 800867a:	0412      	lsls	r2, r2, #16
 800867c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008680:	4311      	orrs	r1, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6952      	ldr	r2, [r2, #20]
 8008686:	3a01      	subs	r2, #1
 8008688:	0612      	lsls	r2, r2, #24
 800868a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800868e:	430a      	orrs	r2, r1
 8008690:	4924      	ldr	r1, [pc, #144]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 8008692:	4313      	orrs	r3, r2
 8008694:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008696:	4b23      	ldr	r3, [pc, #140]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 8008698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869a:	f023 020c 	bic.w	r2, r3, #12
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	4920      	ldr	r1, [pc, #128]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80086a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	491c      	ldr	r1, [pc, #112]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80086b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086bc:	f023 0310 	bic.w	r3, r3, #16
 80086c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086c2:	4b18      	ldr	r3, [pc, #96]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086ca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	69d2      	ldr	r2, [r2, #28]
 80086d2:	00d2      	lsls	r2, r2, #3
 80086d4:	4913      	ldr	r1, [pc, #76]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80086da:	4b12      	ldr	r3, [pc, #72]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	4a11      	ldr	r2, [pc, #68]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086e0:	f043 0310 	orr.w	r3, r3, #16
 80086e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80086e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 80086ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80086f2:	f7f9 fd8f 	bl	8002214 <HAL_GetTick>
 80086f6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086f8:	e008      	b.n	800870c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086fa:	f7f9 fd8b 	bl	8002214 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d901      	bls.n	800870c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e006      	b.n	800871a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800870c:	4b05      	ldr	r3, [pc, #20]	@ (8008724 <RCCEx_PLL2_Config+0x128>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0f0      	beq.n	80086fa <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008718:	2300      	movs	r3, #0

}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	46020c00 	.word	0x46020c00
 8008728:	80800000 	.word	0x80800000

0800872c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008734:	4b47      	ldr	r3, [pc, #284]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a46      	ldr	r2, [pc, #280]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 800873a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800873e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008740:	f7f9 fd68 	bl	8002214 <HAL_GetTick>
 8008744:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008746:	e008      	b.n	800875a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008748:	f7f9 fd64 	bl	8002214 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d901      	bls.n	800875a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e077      	b.n	800884a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800875a:	4b3e      	ldr	r3, [pc, #248]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f0      	bne.n	8008748 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008766:	4b3b      	ldr	r3, [pc, #236]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800876e:	f023 0303 	bic.w	r3, r3, #3
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	6811      	ldr	r1, [r2, #0]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6852      	ldr	r2, [r2, #4]
 800877a:	3a01      	subs	r2, #1
 800877c:	0212      	lsls	r2, r2, #8
 800877e:	430a      	orrs	r2, r1
 8008780:	4934      	ldr	r1, [pc, #208]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 8008782:	4313      	orrs	r3, r2
 8008784:	630b      	str	r3, [r1, #48]	@ 0x30
 8008786:	4b33      	ldr	r3, [pc, #204]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 8008788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800878a:	4b33      	ldr	r3, [pc, #204]	@ (8008858 <RCCEx_PLL3_Config+0x12c>)
 800878c:	4013      	ands	r3, r2
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6892      	ldr	r2, [r2, #8]
 8008792:	3a01      	subs	r2, #1
 8008794:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	68d2      	ldr	r2, [r2, #12]
 800879c:	3a01      	subs	r2, #1
 800879e:	0252      	lsls	r2, r2, #9
 80087a0:	b292      	uxth	r2, r2
 80087a2:	4311      	orrs	r1, r2
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6912      	ldr	r2, [r2, #16]
 80087a8:	3a01      	subs	r2, #1
 80087aa:	0412      	lsls	r2, r2, #16
 80087ac:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80087b0:	4311      	orrs	r1, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6952      	ldr	r2, [r2, #20]
 80087b6:	3a01      	subs	r2, #1
 80087b8:	0612      	lsls	r2, r2, #24
 80087ba:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80087be:	430a      	orrs	r2, r1
 80087c0:	4924      	ldr	r1, [pc, #144]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80087c6:	4b23      	ldr	r3, [pc, #140]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ca:	f023 020c 	bic.w	r2, r3, #12
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	4920      	ldr	r1, [pc, #128]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80087d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	491c      	ldr	r1, [pc, #112]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80087e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087ec:	f023 0310 	bic.w	r3, r3, #16
 80087f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087f2:	4b18      	ldr	r3, [pc, #96]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 80087f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	69d2      	ldr	r2, [r2, #28]
 8008802:	00d2      	lsls	r2, r2, #3
 8008804:	4913      	ldr	r1, [pc, #76]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 8008806:	4313      	orrs	r3, r2
 8008808:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800880a:	4b12      	ldr	r3, [pc, #72]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800880e:	4a11      	ldr	r2, [pc, #68]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 8008810:	f043 0310 	orr.w	r3, r3, #16
 8008814:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008816:	4b0f      	ldr	r3, [pc, #60]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a0e      	ldr	r2, [pc, #56]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 800881c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008820:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008822:	f7f9 fcf7 	bl	8002214 <HAL_GetTick>
 8008826:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008828:	e008      	b.n	800883c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800882a:	f7f9 fcf3 	bl	8002214 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e006      	b.n	800884a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800883c:	4b05      	ldr	r3, [pc, #20]	@ (8008854 <RCCEx_PLL3_Config+0x128>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0f0      	beq.n	800882a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	46020c00 	.word	0x46020c00
 8008858:	80800000 	.word	0x80800000

0800885c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d904      	bls.n	800887a <HAL_SAI_InitProtocol+0x1e>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	3b03      	subs	r3, #3
 8008874:	2b01      	cmp	r3, #1
 8008876:	d812      	bhi.n	800889e <HAL_SAI_InitProtocol+0x42>
 8008878:	e008      	b.n	800888c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fd3d 	bl	8009300 <SAI_InitI2S>
 8008886:	4603      	mov	r3, r0
 8008888:	75fb      	strb	r3, [r7, #23]
      break;
 800888a:	e00b      	b.n	80088a4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fde6 	bl	8009464 <SAI_InitPCM>
 8008898:	4603      	mov	r3, r0
 800889a:	75fb      	strb	r3, [r7, #23]
      break;
 800889c:	e002      	b.n	80088a4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
      break;
 80088a2:	bf00      	nop
  }

  if (status == HAL_OK)
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d104      	bne.n	80088b4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 f808 	bl	80088c0 <HAL_SAI_Init>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08a      	sub	sp, #40	@ 0x28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e1ce      	b.n	8008c70 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d10e      	bne.n	80088fa <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a83      	ldr	r2, [pc, #524]	@ (8008af0 <HAL_SAI_Init+0x230>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d107      	bne.n	80088f6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d103      	bne.n	80088f6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e1ba      	b.n	8008c70 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7f8 fe58 	bl	80015c4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fe5f 	bl	80095d8 <SAI_Disable>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e1a5      	b.n	8008c70 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b02      	cmp	r3, #2
 8008932:	d00c      	beq.n	800894e <HAL_SAI_Init+0x8e>
 8008934:	2b02      	cmp	r3, #2
 8008936:	d80d      	bhi.n	8008954 <HAL_SAI_Init+0x94>
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_SAI_Init+0x82>
 800893c:	2b01      	cmp	r3, #1
 800893e:	d003      	beq.n	8008948 <HAL_SAI_Init+0x88>
 8008940:	e008      	b.n	8008954 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008946:	e008      	b.n	800895a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008948:	2310      	movs	r3, #16
 800894a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800894c:	e005      	b.n	800895a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800894e:	2320      	movs	r3, #32
 8008950:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008952:	e002      	b.n	800895a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008958:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2b03      	cmp	r3, #3
 8008960:	d81d      	bhi.n	800899e <HAL_SAI_Init+0xde>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <HAL_SAI_Init+0xa8>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008979 	.word	0x08008979
 800896c:	0800897f 	.word	0x0800897f
 8008970:	08008987 	.word	0x08008987
 8008974:	0800898f 	.word	0x0800898f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	61fb      	str	r3, [r7, #28]
      break;
 800897c:	e012      	b.n	80089a4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800897e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008982:	61fb      	str	r3, [r7, #28]
      break;
 8008984:	e00e      	b.n	80089a4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008986:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800898a:	61fb      	str	r3, [r7, #28]
      break;
 800898c:	e00a      	b.n	80089a4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800898e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008992:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	f043 0301 	orr.w	r3, r3, #1
 800899a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800899c:	e002      	b.n	80089a4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	61fb      	str	r3, [r7, #28]
      break;
 80089a2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a51      	ldr	r2, [pc, #324]	@ (8008af0 <HAL_SAI_Init+0x230>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d004      	beq.n	80089b8 <HAL_SAI_Init+0xf8>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a50      	ldr	r2, [pc, #320]	@ (8008af4 <HAL_SAI_Init+0x234>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d103      	bne.n	80089c0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80089b8:	4a4f      	ldr	r2, [pc, #316]	@ (8008af8 <HAL_SAI_Init+0x238>)
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	e002      	b.n	80089c6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80089c0:	4a4e      	ldr	r2, [pc, #312]	@ (8008afc <HAL_SAI_Init+0x23c>)
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d077      	beq.n	8008abe <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a47      	ldr	r2, [pc, #284]	@ (8008af0 <HAL_SAI_Init+0x230>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_SAI_Init+0x122>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a45      	ldr	r2, [pc, #276]	@ (8008af4 <HAL_SAI_Init+0x234>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d107      	bne.n	80089f2 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80089e2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80089e6:	f04f 0100 	mov.w	r1, #0
 80089ea:	f7fe fc51 	bl	8007290 <HAL_RCCEx_GetPeriphCLKFreq>
 80089ee:	61b8      	str	r0, [r7, #24]
 80089f0:	e006      	b.n	8008a00 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80089f2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80089f6:	f04f 0100 	mov.w	r1, #0
 80089fa:	f7fe fc49 	bl	8007290 <HAL_RCCEx_GetPeriphCLKFreq>
 80089fe:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a08:	d120      	bne.n	8008a4c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d102      	bne.n	8008a18 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008a12:	2340      	movs	r3, #64	@ 0x40
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	e00a      	b.n	8008a2e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d103      	bne.n	8008a28 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	e002      	b.n	8008a2e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a2c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	4619      	mov	r1, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	fb02 f303 	mul.w	r3, r2, r3
 8008a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	e017      	b.n	8008a7c <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a54:	d101      	bne.n	8008a5a <HAL_SAI_Init+0x19a>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e000      	b.n	8008a5c <HAL_SAI_Init+0x19c>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4613      	mov	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	4619      	mov	r1, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	fb02 f303 	mul.w	r3, r2, r3
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a7a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	4a20      	ldr	r2, [pc, #128]	@ (8008b00 <HAL_SAI_Init+0x240>)
 8008a80:	fba2 2303 	umull	r2, r3, r2, r3
 8008a84:	08da      	lsrs	r2, r3, #3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008a8a:	6979      	ldr	r1, [r7, #20]
 8008a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008b00 <HAL_SAI_Init+0x240>)
 8008a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8008a92:	08da      	lsrs	r2, r3, #3
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	1aca      	subs	r2, r1, r3
 8008a9e:	2a08      	cmp	r2, #8
 8008aa0:	d904      	bls.n	8008aac <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d104      	bne.n	8008abe <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab8:	085a      	lsrs	r2, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_SAI_Init+0x20e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d109      	bne.n	8008ae2 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_SAI_Init+0x21a>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e001      	b.n	8008ade <HAL_SAI_Init+0x21e>
 8008ada:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ade:	623b      	str	r3, [r7, #32]
 8008ae0:	e012      	b.n	8008b08 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d10c      	bne.n	8008b04 <HAL_SAI_Init+0x244>
 8008aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008aee:	e00a      	b.n	8008b06 <HAL_SAI_Init+0x246>
 8008af0:	40015404 	.word	0x40015404
 8008af4:	40015424 	.word	0x40015424
 8008af8:	40015400 	.word	0x40015400
 8008afc:	40015800 	.word	0x40015800
 8008b00:	cccccccd 	.word	0xcccccccd
 8008b04:	2300      	movs	r3, #0
 8008b06:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6819      	ldr	r1, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b59      	ldr	r3, [pc, #356]	@ (8008c78 <HAL_SAI_Init+0x3b8>)
 8008b14:	400b      	ands	r3, r1
 8008b16:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b26:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b2c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b32:	431a      	orrs	r2, r3
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8008b40:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008b4c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b52:	051b      	lsls	r3, r3, #20
 8008b54:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008b5a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6812      	ldr	r2, [r2, #0]
 8008b74:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008b78:	f023 030f 	bic.w	r3, r3, #15
 8008b7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6859      	ldr	r1, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6899      	ldr	r1, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b35      	ldr	r3, [pc, #212]	@ (8008c7c <HAL_SAI_Init+0x3bc>)
 8008ba8:	400b      	ands	r3, r1
 8008baa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6899      	ldr	r1, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008bbc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8008bc2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8008bc8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008bd2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68d9      	ldr	r1, [r3, #12]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008bea:	400b      	ands	r3, r1
 8008bec:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68d9      	ldr	r1, [r3, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bfc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c02:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c04:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	@ (8008c80 <HAL_SAI_Init+0x3c0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d119      	bne.n	8008c56 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008c22:	4b18      	ldr	r3, [pc, #96]	@ (8008c84 <HAL_SAI_Init+0x3c4>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c26:	4a17      	ldr	r2, [pc, #92]	@ (8008c84 <HAL_SAI_Init+0x3c4>)
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d10e      	bne.n	8008c56 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c40:	3b01      	subs	r3, #1
 8008c42:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c44:	490f      	ldr	r1, [pc, #60]	@ (8008c84 <HAL_SAI_Init+0x3c4>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c84 <HAL_SAI_Init+0x3c4>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c84 <HAL_SAI_Init+0x3c4>)
 8008c50:	f043 0301 	orr.w	r3, r3, #1
 8008c54:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3728      	adds	r7, #40	@ 0x28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	f005c010 	.word	0xf005c010
 8008c7c:	fff88000 	.word	0xfff88000
 8008c80:	40015404 	.word	0x40015404
 8008c84:	40015400 	.word	0x40015400

08008c88 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <HAL_SAI_Abort+0x1a>
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	e07d      	b.n	8008d9e <HAL_SAI_Abort+0x116>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fc94 	bl	80095d8 <SAI_Disable>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc8:	d14f      	bne.n	8008d6a <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008cd8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b12      	cmp	r3, #18
 8008ce4:	d11d      	bne.n	8008d22 <HAL_SAI_Abort+0x9a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d018      	beq.n	8008d22 <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fa f81c 	bl	8002d34 <HAL_DMA_Abort>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00f      	beq.n	8008d22 <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d009      	beq.n	8008d22 <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b22      	cmp	r3, #34	@ 0x22
 8008d2c:	d11d      	bne.n	8008d6a <HAL_SAI_Abort+0xe2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d018      	beq.n	8008d6a <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f9 fff8 	bl	8002d34 <HAL_DMA_Abort>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00f      	beq.n	8008d6a <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d52:	2b20      	cmp	r3, #32
 8008d54:	d009      	beq.n	8008d6a <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0208 	orr.w	r2, r2, #8
 8008d8a:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  if ((pData == NULL) || (Size == 0U))
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_SAI_Receive_DMA+0x1a>
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e0c6      	b.n	8008f54 <HAL_SAI_Receive_DMA+0x1ac>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	f040 80bf 	bne.w	8008f52 <HAL_SAI_Receive_DMA+0x1aa>
  {
    uint32_t dmaSrcSize;

    /* Process Locked */
    __HAL_LOCK(hsai);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_SAI_Receive_DMA+0x3a>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e0b8      	b.n	8008f54 <HAL_SAI_Receive_DMA+0x1ac>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	88fa      	ldrh	r2, [r7, #6]
 8008dfc:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2222      	movs	r2, #34	@ 0x22
 8008e0c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e16:	4a51      	ldr	r2, [pc, #324]	@ (8008f5c <HAL_SAI_Receive_DMA+0x1b4>)
 8008e18:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e20:	4a4f      	ldr	r2, [pc, #316]	@ (8008f60 <HAL_SAI_Receive_DMA+0x1b8>)
 8008e22:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8008f64 <HAL_SAI_Receive_DMA+0x1bc>)
 8008e2c:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e34:	2200      	movs	r2, #0
 8008e36:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* For reception, the DMA source is SAI DR register.
       We have to compute DMA size of a source block transfer in bytes according SAI data size. */
    if ((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e3c:	2b40      	cmp	r3, #64	@ 0x40
 8008e3e:	d106      	bne.n	8008e4e <HAL_SAI_Receive_DMA+0xa6>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <HAL_SAI_Receive_DMA+0xa6>
    {
      dmaSrcSize = (uint32_t) Size;
 8008e48:	88fb      	ldrh	r3, [r7, #6]
 8008e4a:	613b      	str	r3, [r7, #16]
 8008e4c:	e00a      	b.n	8008e64 <HAL_SAI_Receive_DMA+0xbc>
    }
    else if (hsai->Init.DataSize <= SAI_DATASIZE_16)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e52:	2b80      	cmp	r3, #128	@ 0x80
 8008e54:	d803      	bhi.n	8008e5e <HAL_SAI_Receive_DMA+0xb6>
    {
      dmaSrcSize = 2U * (uint32_t) Size;
 8008e56:	88fb      	ldrh	r3, [r7, #6]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	613b      	str	r3, [r7, #16]
 8008e5c:	e002      	b.n	8008e64 <HAL_SAI_Receive_DMA+0xbc>
    }
    else
    {
      dmaSrcSize = 4U * (uint32_t) Size;
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	613b      	str	r3, [r7, #16]
    }

    /* Enable the Rx DMA Stream */
    if ((hsai->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d02d      	beq.n	8008ed0 <HAL_SAI_Receive_DMA+0x128>
    {
      if (hsai->hdmarx->LinkedListQueue != NULL)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d021      	beq.n	8008ec4 <HAL_SAI_Receive_DMA+0x11c>
      {
        /* Set DMA data size */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = dmaSrcSize;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hsai->Instance->DR;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f103 021c 	add.w	r2, r3, #28
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hsai->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hsai->pBuffPtr;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hsai->hdmarx);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fa facf 	bl	800345c <HAL_DMAEx_List_Start_IT>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	75fb      	strb	r3, [r7, #23]
 8008ec2:	e014      	b.n	8008eee <HAL_SAI_Receive_DMA+0x146>
      }
      else
      {
        __HAL_UNLOCK(hsai);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        return  HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e041      	b.n	8008f54 <HAL_SAI_Receive_DMA+0x1ac>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, dmaSrcSize);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	331c      	adds	r3, #28
 8008edc:	4619      	mov	r1, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f7f9 fec5 	bl	8002c74 <HAL_DMA_Start_IT>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
    }

    if (status != HAL_OK)
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <HAL_SAI_Receive_DMA+0x158>
    {
      __HAL_UNLOCK(hsai);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e029      	b.n	8008f54 <HAL_SAI_Receive_DMA+0x1ac>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008f00:	2100      	movs	r1, #0
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 fb30 	bl	8009568 <SAI_InterruptFlag>
 8008f08:	4601      	mov	r1, r0
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	691a      	ldr	r2, [r3, #16]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008f26:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d107      	bne.n	8008f46 <HAL_SAI_Receive_DMA+0x19e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008f44:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e000      	b.n	8008f54 <HAL_SAI_Receive_DMA+0x1ac>
  }
  else
  {
    return HAL_BUSY;
 8008f52:	2302      	movs	r3, #2
  }
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	080096ab 	.word	0x080096ab
 8008f60:	0800964d 	.word	0x0800964d
 8008f64:	080096c7 	.word	0x080096c7

08008f68 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 81a7 	beq.w	80092cc <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <HAL_SAI_IRQHandler+0x4e>
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f003 0308 	and.w	r3, r3, #8
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
 8008fb4:	e18a      	b.n	80092cc <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01e      	beq.n	8008ffe <HAL_SAI_IRQHandler+0x96>
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d019      	beq.n	8008ffe <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b22      	cmp	r3, #34	@ 0x22
 8008fdc:	d101      	bne.n	8008fe2 <HAL_SAI_IRQHandler+0x7a>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e000      	b.n	8008fe4 <HAL_SAI_IRQHandler+0x7c>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f978 	bl	80092ec <HAL_SAI_ErrorCallback>
 8008ffc:	e166      	b.n	80092cc <HAL_SAI_IRQHandler+0x364>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d013      	beq.n	8009030 <HAL_SAI_IRQHandler+0xc8>
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00e      	beq.n	8009030 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2202      	movs	r2, #2
 8009018:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 8153 	beq.w	80092cc <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800902c:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800902e:	e14d      	b.n	80092cc <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d05b      	beq.n	80090f2 <HAL_SAI_IRQHandler+0x18a>
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f003 0320 	and.w	r3, r3, #32
 8009040:	2b00      	cmp	r3, #0
 8009042:	d056      	beq.n	80090f2 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2220      	movs	r2, #32
 800904a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009052:	f043 0204 	orr.w	r2, r3, #4
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d03e      	beq.n	80090e4 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800906c:	2b00      	cmp	r3, #0
 800906e:	d018      	beq.n	80090a2 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009076:	4a97      	ldr	r2, [pc, #604]	@ (80092d4 <HAL_SAI_IRQHandler+0x36c>)
 8009078:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009080:	4618      	mov	r0, r3
 8009082:	f7f9 fed3 	bl	8002e2c <HAL_DMA_Abort_IT>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00a      	beq.n	80090a2 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009092:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f925 	bl	80092ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 810a 	beq.w	80092c2 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090b4:	4a87      	ldr	r2, [pc, #540]	@ (80092d4 <HAL_SAI_IRQHandler+0x36c>)
 80090b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f9 feb4 	bl	8002e2c <HAL_DMA_Abort_IT>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80fb 	beq.w	80092c2 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f905 	bl	80092ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80090e2:	e0ee      	b.n	80092c2 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff fdcf 	bl	8008c88 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f8fe 	bl	80092ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80090f0:	e0e7      	b.n	80092c2 <HAL_SAI_IRQHandler+0x35a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d05b      	beq.n	80091b4 <HAL_SAI_IRQHandler+0x24c>
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	d056      	beq.n	80091b4 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2240      	movs	r2, #64	@ 0x40
 800910c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009114:	f043 0208 	orr.w	r2, r3, #8
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d03e      	beq.n	80091a6 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800912e:	2b00      	cmp	r3, #0
 8009130:	d018      	beq.n	8009164 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009138:	4a66      	ldr	r2, [pc, #408]	@ (80092d4 <HAL_SAI_IRQHandler+0x36c>)
 800913a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009142:	4618      	mov	r0, r3
 8009144:	f7f9 fe72 	bl	8002e2c <HAL_DMA_Abort_IT>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00a      	beq.n	8009164 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009154:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8c4 	bl	80092ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80ab 	beq.w	80092c6 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009176:	4a57      	ldr	r2, [pc, #348]	@ (80092d4 <HAL_SAI_IRQHandler+0x36c>)
 8009178:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009180:	4618      	mov	r0, r3
 8009182:	f7f9 fe53 	bl	8002e2c <HAL_DMA_Abort_IT>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 809c 	beq.w	80092c6 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009194:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8a4 	bl	80092ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80091a4:	e08f      	b.n	80092c6 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff fd6e 	bl	8008c88 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f89d 	bl	80092ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80091b2:	e088      	b.n	80092c6 <HAL_SAI_IRQHandler+0x35e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d067      	beq.n	800928e <HAL_SAI_IRQHandler+0x326>
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d062      	beq.n	800928e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2204      	movs	r2, #4
 80091ce:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091d6:	f043 0220 	orr.w	r2, r3, #32
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d03c      	beq.n	8009264 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d018      	beq.n	8009226 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091fa:	4a36      	ldr	r2, [pc, #216]	@ (80092d4 <HAL_SAI_IRQHandler+0x36c>)
 80091fc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009204:	4618      	mov	r0, r3
 8009206:	f7f9 fe11 	bl	8002e2c <HAL_DMA_Abort_IT>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00a      	beq.n	8009226 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009216:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f863 	bl	80092ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        if (hsai->hdmarx != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800922c:	2b00      	cmp	r3, #0
 800922e:	d04c      	beq.n	80092ca <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009236:	4a27      	ldr	r2, [pc, #156]	@ (80092d4 <HAL_SAI_IRQHandler+0x36c>)
 8009238:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009240:	4618      	mov	r0, r3
 8009242:	f7f9 fdf3 	bl	8002e2c <HAL_DMA_Abort_IT>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d03e      	beq.n	80092ca <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009252:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f845 	bl	80092ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009262:	e032      	b.n	80092ca <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2200      	movs	r2, #0
 800926a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f04f 32ff 	mov.w	r2, #4294967295
 8009274:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f830 	bl	80092ec <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800928c:	e01d      	b.n	80092ca <HAL_SAI_IRQHandler+0x362>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b00      	cmp	r3, #0
 8009296:	d019      	beq.n	80092cc <HAL_SAI_IRQHandler+0x364>
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d014      	beq.n	80092cc <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2210      	movs	r2, #16
 80092a8:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092b0:	f043 0210 	orr.w	r2, r3, #16
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let
      the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f816 	bl	80092ec <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80092c0:	e004      	b.n	80092cc <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80092c2:	bf00      	nop
 80092c4:	e002      	b.n	80092cc <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80092c6:	bf00      	nop
 80092c8:	e000      	b.n	80092cc <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80092ca:	bf00      	nop
}
 80092cc:	bf00      	nop
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	08009719 	.word	0x08009719

080092d8 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <SAI_InitI2S+0x2e>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d103      	bne.n	8009336 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	651a      	str	r2, [r3, #80]	@ 0x50
 8009334:	e002      	b.n	800933c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2201      	movs	r2, #1
 800933a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009342:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800934a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e077      	b.n	8009456 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d107      	bne.n	800937c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009378:	665a      	str	r2, [r3, #100]	@ 0x64
 800937a:	e006      	b.n	800938a <SAI_InitI2S+0x8a>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009382:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b03      	cmp	r3, #3
 800938e:	d84f      	bhi.n	8009430 <SAI_InitI2S+0x130>
 8009390:	a201      	add	r2, pc, #4	@ (adr r2, 8009398 <SAI_InitI2S+0x98>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093a9 	.word	0x080093a9
 800939c:	080093cb 	.word	0x080093cb
 80093a0:	080093ed 	.word	0x080093ed
 80093a4:	0800940f 	.word	0x0800940f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2280      	movs	r2, #128	@ 0x80
 80093ac:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	085b      	lsrs	r3, r3, #1
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	085b      	lsrs	r3, r3, #1
 80093bc:	011a      	lsls	r2, r3, #4
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2240      	movs	r2, #64	@ 0x40
 80093c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80093c8:	e035      	b.n	8009436 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2280      	movs	r2, #128	@ 0x80
 80093ce:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	019a      	lsls	r2, r3, #6
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	085b      	lsrs	r3, r3, #1
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2280      	movs	r2, #128	@ 0x80
 80093e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80093ea:	e024      	b.n	8009436 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	22c0      	movs	r2, #192	@ 0xc0
 80093f0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	085b      	lsrs	r3, r3, #1
 80093f6:	019a      	lsls	r2, r3, #6
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	085b      	lsrs	r3, r3, #1
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2280      	movs	r2, #128	@ 0x80
 800940a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800940c:	e013      	b.n	8009436 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	22e0      	movs	r2, #224	@ 0xe0
 8009412:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	019a      	lsls	r2, r3, #6
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	085b      	lsrs	r3, r3, #1
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2280      	movs	r2, #128	@ 0x80
 800942c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800942e:	e002      	b.n	8009436 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	75fb      	strb	r3, [r7, #23]
      break;
 8009434:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d10b      	bne.n	8009454 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d102      	bne.n	8009448 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2210      	movs	r2, #16
 8009446:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b02      	cmp	r3, #2
 800944c:	d102      	bne.n	8009454 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2208      	movs	r2, #8
 8009452:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
}
 8009456:	4618      	mov	r0, r3
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop

08009464 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <SAI_InitPCM+0x2e>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d103      	bne.n	800949a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	651a      	str	r2, [r3, #80]	@ 0x50
 8009498:	e002      	b.n	80094a0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80094ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80094b4:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80094c8:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d103      	bne.n	80094d8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80094d6:	e002      	b.n	80094de <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	220d      	movs	r2, #13
 80094dc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d837      	bhi.n	8009554 <SAI_InitPCM+0xf0>
 80094e4:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <SAI_InitPCM+0x88>)
 80094e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ea:	bf00      	nop
 80094ec:	080094fd 	.word	0x080094fd
 80094f0:	08009513 	.word	0x08009513
 80094f4:	08009529 	.word	0x08009529
 80094f8:	0800953f 	.word	0x0800953f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2280      	movs	r2, #128	@ 0x80
 8009500:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	011a      	lsls	r2, r3, #4
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2240      	movs	r2, #64	@ 0x40
 800950e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009510:	e023      	b.n	800955a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2280      	movs	r2, #128	@ 0x80
 8009516:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2280      	movs	r2, #128	@ 0x80
 8009524:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009526:	e018      	b.n	800955a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	22c0      	movs	r2, #192	@ 0xc0
 800952c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2280      	movs	r2, #128	@ 0x80
 800953a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800953c:	e00d      	b.n	800955a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	22e0      	movs	r2, #224	@ 0xe0
 8009542:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2280      	movs	r2, #128	@ 0x80
 8009550:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8009552:	e002      	b.n	800955a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	75fb      	strb	r3, [r7, #23]
      break;
 8009558:	bf00      	nop
  }

  return status;
 800955a:	7dfb      	ldrb	r3, [r7, #23]
}
 800955c:	4618      	mov	r0, r3
 800955e:	371c      	adds	r7, #28
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009574:	2301      	movs	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d103      	bne.n	8009586 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f043 0308 	orr.w	r3, r3, #8
 8009584:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800958a:	2b08      	cmp	r3, #8
 800958c:	d10b      	bne.n	80095a6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009592:	2b03      	cmp	r3, #3
 8009594:	d003      	beq.n	800959e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d103      	bne.n	80095a6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f043 0310 	orr.w	r3, r3, #16
 80095a4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d003      	beq.n	80095b6 <SAI_InterruptFlag+0x4e>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d104      	bne.n	80095c0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e003      	b.n	80095c8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f043 0304 	orr.w	r3, r3, #4
 80095c6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80095c8:	68fb      	ldr	r3, [r7, #12]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80095e0:	4b18      	ldr	r3, [pc, #96]	@ (8009644 <SAI_Disable+0x6c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a18      	ldr	r2, [pc, #96]	@ (8009648 <SAI_Disable+0x70>)
 80095e6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ea:	0b1b      	lsrs	r3, r3, #12
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009602:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009610:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	72fb      	strb	r3, [r7, #11]
      break;
 800961e:	e009      	b.n	8009634 <SAI_Disable+0x5c>
    }
    count--;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3b01      	subs	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e7      	bne.n	8009604 <SAI_Disable+0x2c>

  return status;
 8009634:	7afb      	ldrb	r3, [r7, #11]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20000000 	.word	0x20000000
 8009648:	95cbec1b 	.word	0x95cbec1b

0800964c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009658:	60fb      	str	r3, [r7, #12]

  /* Check if DMA in circular mode*/
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800965e:	2b81      	cmp	r3, #129	@ 0x81
 8009660:	d01c      	beq.n	800969c <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009670:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800967a:	2100      	movs	r1, #0
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff ff73 	bl	8009568 <SAI_InterruptFlag>
 8009682:	4603      	mov	r3, r0
 8009684:	43d9      	mvns	r1, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	691a      	ldr	r2, [r3, #16]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	400a      	ands	r2, r1
 8009692:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7f7 fe33 	bl	8001308 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff fe0d 	bl	80092d8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80096f2:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff ff6f 	bl	80095d8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff fdee 	bl	80092ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009724:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009734:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2200      	movs	r2, #0
 800973c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f04f 32ff 	mov.w	r2, #4294967295
 8009746:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800974e:	2b20      	cmp	r3, #32
 8009750:	d00a      	beq.n	8009768 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff ff40 	bl	80095d8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0208 	orr.w	r2, r2, #8
 8009766:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff fdb7 	bl	80092ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e049      	b.n	800982c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f841 	bl	8009834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2202      	movs	r2, #2
 80097b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3304      	adds	r3, #4
 80097c2:	4619      	mov	r1, r3
 80097c4:	4610      	mov	r0, r2
 80097c6:	f000 fa57 	bl	8009c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b01      	cmp	r3, #1
 800985a:	d001      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e072      	b.n	8009946 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f042 0201 	orr.w	r2, r2, #1
 8009876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a35      	ldr	r2, [pc, #212]	@ (8009954 <HAL_TIM_Base_Start_IT+0x10c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d040      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a34      	ldr	r2, [pc, #208]	@ (8009958 <HAL_TIM_Base_Start_IT+0x110>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d03b      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009894:	d036      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800989e:	d031      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a2d      	ldr	r2, [pc, #180]	@ (800995c <HAL_TIM_Base_Start_IT+0x114>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d02c      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009960 <HAL_TIM_Base_Start_IT+0x118>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d027      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a2a      	ldr	r2, [pc, #168]	@ (8009964 <HAL_TIM_Base_Start_IT+0x11c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d022      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a29      	ldr	r2, [pc, #164]	@ (8009968 <HAL_TIM_Base_Start_IT+0x120>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d01d      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a27      	ldr	r2, [pc, #156]	@ (800996c <HAL_TIM_Base_Start_IT+0x124>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d018      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a26      	ldr	r2, [pc, #152]	@ (8009970 <HAL_TIM_Base_Start_IT+0x128>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d013      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a24      	ldr	r2, [pc, #144]	@ (8009974 <HAL_TIM_Base_Start_IT+0x12c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00e      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a23      	ldr	r2, [pc, #140]	@ (8009978 <HAL_TIM_Base_Start_IT+0x130>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d009      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a21      	ldr	r2, [pc, #132]	@ (800997c <HAL_TIM_Base_Start_IT+0x134>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <HAL_TIM_Base_Start_IT+0xbc>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a20      	ldr	r2, [pc, #128]	@ (8009980 <HAL_TIM_Base_Start_IT+0x138>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d115      	bne.n	8009930 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	4b1e      	ldr	r3, [pc, #120]	@ (8009984 <HAL_TIM_Base_Start_IT+0x13c>)
 800990c:	4013      	ands	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b06      	cmp	r3, #6
 8009914:	d015      	beq.n	8009942 <HAL_TIM_Base_Start_IT+0xfa>
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800991c:	d011      	beq.n	8009942 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f042 0201 	orr.w	r2, r2, #1
 800992c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800992e:	e008      	b.n	8009942 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f042 0201 	orr.w	r2, r2, #1
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	e000      	b.n	8009944 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	40012c00 	.word	0x40012c00
 8009958:	50012c00 	.word	0x50012c00
 800995c:	40000400 	.word	0x40000400
 8009960:	50000400 	.word	0x50000400
 8009964:	40000800 	.word	0x40000800
 8009968:	50000800 	.word	0x50000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	50000c00 	.word	0x50000c00
 8009974:	40013400 	.word	0x40013400
 8009978:	50013400 	.word	0x50013400
 800997c:	40014000 	.word	0x40014000
 8009980:	50014000 	.word	0x50014000
 8009984:	00010007 	.word	0x00010007

08009988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d020      	beq.n	80099ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d01b      	beq.n	80099ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f06f 0202 	mvn.w	r2, #2
 80099bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	f003 0303 	and.w	r3, r3, #3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f931 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 80099d8:	e005      	b.n	80099e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f923 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f934 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d020      	beq.n	8009a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01b      	beq.n	8009a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f06f 0204 	mvn.w	r2, #4
 8009a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f90b 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 8009a24:	e005      	b.n	8009a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f8fd 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f90e 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f003 0308 	and.w	r3, r3, #8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d020      	beq.n	8009a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f003 0308 	and.w	r3, r3, #8
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01b      	beq.n	8009a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f06f 0208 	mvn.w	r2, #8
 8009a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2204      	movs	r2, #4
 8009a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f003 0303 	and.w	r3, r3, #3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f8e5 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 8009a70:	e005      	b.n	8009a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8d7 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f8e8 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d020      	beq.n	8009ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f003 0310 	and.w	r3, r3, #16
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01b      	beq.n	8009ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f06f 0210 	mvn.w	r2, #16
 8009aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2208      	movs	r2, #8
 8009aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f8bf 	bl	8009c3a <HAL_TIM_IC_CaptureCallback>
 8009abc:	e005      	b.n	8009aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f8b1 	bl	8009c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f8c2 	bl	8009c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00c      	beq.n	8009af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f06f 0201 	mvn.w	r2, #1
 8009aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7f7 fd1a 	bl	8001528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d104      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00c      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9b5 	bl	8009e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00c      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f9ad 	bl	8009ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00c      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f87c 	bl	8009c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f003 0320 	and.w	r3, r3, #32
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f06f 0220 	mvn.w	r2, #32
 8009b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f975 	bl	8009e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00c      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d007      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f981 	bl	8009eb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00c      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f979 	bl	8009ec8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00c      	beq.n	8009bfa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f971 	bl	8009edc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00c      	beq.n	8009c1e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d007      	beq.n	8009c1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f969 	bl	8009ef0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c2e:	bf00      	nop
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b083      	sub	sp, #12
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
	...

08009c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a6b      	ldr	r2, [pc, #428]	@ (8009e38 <TIM_Base_SetConfig+0x1c0>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d02b      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a6a      	ldr	r2, [pc, #424]	@ (8009e3c <TIM_Base_SetConfig+0x1c4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d027      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c9e:	d023      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ca6:	d01f      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a65      	ldr	r2, [pc, #404]	@ (8009e40 <TIM_Base_SetConfig+0x1c8>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d01b      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a64      	ldr	r2, [pc, #400]	@ (8009e44 <TIM_Base_SetConfig+0x1cc>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d017      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a63      	ldr	r2, [pc, #396]	@ (8009e48 <TIM_Base_SetConfig+0x1d0>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d013      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a62      	ldr	r2, [pc, #392]	@ (8009e4c <TIM_Base_SetConfig+0x1d4>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00f      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a61      	ldr	r2, [pc, #388]	@ (8009e50 <TIM_Base_SetConfig+0x1d8>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00b      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a60      	ldr	r2, [pc, #384]	@ (8009e54 <TIM_Base_SetConfig+0x1dc>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d007      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a5f      	ldr	r2, [pc, #380]	@ (8009e58 <TIM_Base_SetConfig+0x1e0>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d003      	beq.n	8009ce8 <TIM_Base_SetConfig+0x70>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8009e5c <TIM_Base_SetConfig+0x1e4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d108      	bne.n	8009cfa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8009e38 <TIM_Base_SetConfig+0x1c0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d043      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a4d      	ldr	r2, [pc, #308]	@ (8009e3c <TIM_Base_SetConfig+0x1c4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d03f      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d10:	d03b      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d18:	d037      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a48      	ldr	r2, [pc, #288]	@ (8009e40 <TIM_Base_SetConfig+0x1c8>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d033      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a47      	ldr	r2, [pc, #284]	@ (8009e44 <TIM_Base_SetConfig+0x1cc>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d02f      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a46      	ldr	r2, [pc, #280]	@ (8009e48 <TIM_Base_SetConfig+0x1d0>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d02b      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a45      	ldr	r2, [pc, #276]	@ (8009e4c <TIM_Base_SetConfig+0x1d4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d027      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a44      	ldr	r2, [pc, #272]	@ (8009e50 <TIM_Base_SetConfig+0x1d8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d023      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a43      	ldr	r2, [pc, #268]	@ (8009e54 <TIM_Base_SetConfig+0x1dc>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d01f      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a42      	ldr	r2, [pc, #264]	@ (8009e58 <TIM_Base_SetConfig+0x1e0>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d01b      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a41      	ldr	r2, [pc, #260]	@ (8009e5c <TIM_Base_SetConfig+0x1e4>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d017      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a40      	ldr	r2, [pc, #256]	@ (8009e60 <TIM_Base_SetConfig+0x1e8>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d013      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a3f      	ldr	r2, [pc, #252]	@ (8009e64 <TIM_Base_SetConfig+0x1ec>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d00f      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8009e68 <TIM_Base_SetConfig+0x1f0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d00b      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a3d      	ldr	r2, [pc, #244]	@ (8009e6c <TIM_Base_SetConfig+0x1f4>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d007      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8009e70 <TIM_Base_SetConfig+0x1f8>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d003      	beq.n	8009d8a <TIM_Base_SetConfig+0x112>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a3b      	ldr	r2, [pc, #236]	@ (8009e74 <TIM_Base_SetConfig+0x1fc>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d108      	bne.n	8009d9c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8009e38 <TIM_Base_SetConfig+0x1c0>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d023      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8009e3c <TIM_Base_SetConfig+0x1c4>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d01f      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a22      	ldr	r2, [pc, #136]	@ (8009e58 <TIM_Base_SetConfig+0x1e0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d01b      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a21      	ldr	r2, [pc, #132]	@ (8009e5c <TIM_Base_SetConfig+0x1e4>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d017      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a20      	ldr	r2, [pc, #128]	@ (8009e60 <TIM_Base_SetConfig+0x1e8>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d013      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e64 <TIM_Base_SetConfig+0x1ec>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d00f      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a1e      	ldr	r2, [pc, #120]	@ (8009e68 <TIM_Base_SetConfig+0x1f0>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d00b      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a1d      	ldr	r2, [pc, #116]	@ (8009e6c <TIM_Base_SetConfig+0x1f4>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d007      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8009e70 <TIM_Base_SetConfig+0x1f8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d003      	beq.n	8009e0a <TIM_Base_SetConfig+0x192>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a1b      	ldr	r2, [pc, #108]	@ (8009e74 <TIM_Base_SetConfig+0x1fc>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d103      	bne.n	8009e12 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	691a      	ldr	r2, [r3, #16]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f043 0204 	orr.w	r2, r3, #4
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	601a      	str	r2, [r3, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	40012c00 	.word	0x40012c00
 8009e3c:	50012c00 	.word	0x50012c00
 8009e40:	40000400 	.word	0x40000400
 8009e44:	50000400 	.word	0x50000400
 8009e48:	40000800 	.word	0x40000800
 8009e4c:	50000800 	.word	0x50000800
 8009e50:	40000c00 	.word	0x40000c00
 8009e54:	50000c00 	.word	0x50000c00
 8009e58:	40013400 	.word	0x40013400
 8009e5c:	50013400 	.word	0x50013400
 8009e60:	40014000 	.word	0x40014000
 8009e64:	50014000 	.word	0x50014000
 8009e68:	40014400 	.word	0x40014400
 8009e6c:	50014400 	.word	0x50014400
 8009e70:	40014800 	.word	0x40014800
 8009e74:	50014800 	.word	0x50014800

08009e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ebc:	bf00      	nop
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e042      	b.n	8009f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d106      	bne.n	8009f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7f7 febb 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2224      	movs	r2, #36	@ 0x24
 8009f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f022 0201 	bic.w	r2, r2, #1
 8009f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa68 	bl	800a424 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f8c3 	bl	800a0e0 <UART_SetConfig>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d101      	bne.n	8009f64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e01b      	b.n	8009f9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0201 	orr.w	r2, r2, #1
 8009f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fae7 	bl	800a568 <UART_CheckIdleState>
 8009f9a:	4603      	mov	r3, r0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	@ 0x28
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fba:	2b20      	cmp	r3, #32
 8009fbc:	f040 808b 	bne.w	800a0d6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <HAL_UART_Transmit+0x28>
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e083      	b.n	800a0d8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fda:	2b80      	cmp	r3, #128	@ 0x80
 8009fdc:	d107      	bne.n	8009fee <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fec:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2221      	movs	r2, #33	@ 0x21
 8009ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ffe:	f7f8 f909 	bl	8002214 <HAL_GetTick>
 800a002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	88fa      	ldrh	r2, [r7, #6]
 800a008:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	88fa      	ldrh	r2, [r7, #6]
 800a010:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a01c:	d108      	bne.n	800a030 <HAL_UART_Transmit+0x8c>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d104      	bne.n	800a030 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	e003      	b.n	800a038 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a038:	e030      	b.n	800a09c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2200      	movs	r2, #0
 800a042:	2180      	movs	r1, #128	@ 0x80
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 fb39 	bl	800a6bc <UART_WaitOnFlagUntilTimeout>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2220      	movs	r2, #32
 800a054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e03d      	b.n	800a0d8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10b      	bne.n	800a07a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a070:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	3302      	adds	r3, #2
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	e007      	b.n	800a08a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	781a      	ldrb	r2, [r3, #0]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	3301      	adds	r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a090:	b29b      	uxth	r3, r3
 800a092:	3b01      	subs	r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1c8      	bne.n	800a03a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2140      	movs	r1, #64	@ 0x40
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fb02 	bl	800a6bc <UART_WaitOnFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d005      	beq.n	800a0ca <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e006      	b.n	800a0d8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e000      	b.n	800a0d8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a0d6:	2302      	movs	r3, #2
  }
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3720      	adds	r7, #32
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0e4:	b094      	sub	sp, #80	@ 0x50
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	4b7e      	ldr	r3, [pc, #504]	@ (800a2f0 <UART_SetConfig+0x210>)
 800a0f6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	431a      	orrs	r2, r3
 800a102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	431a      	orrs	r2, r3
 800a108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10a:	69db      	ldr	r3, [r3, #28]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4977      	ldr	r1, [pc, #476]	@ (800a2f4 <UART_SetConfig+0x214>)
 800a118:	4019      	ands	r1, r3
 800a11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a120:	430b      	orrs	r3, r1
 800a122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a130:	68d9      	ldr	r1, [r3, #12]
 800a132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	ea40 0301 	orr.w	r3, r0, r1
 800a13a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b6a      	ldr	r3, [pc, #424]	@ (800a2f0 <UART_SetConfig+0x210>)
 800a148:	429a      	cmp	r2, r3
 800a14a:	d009      	beq.n	800a160 <UART_SetConfig+0x80>
 800a14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	4b69      	ldr	r3, [pc, #420]	@ (800a2f8 <UART_SetConfig+0x218>)
 800a152:	429a      	cmp	r2, r3
 800a154:	d004      	beq.n	800a160 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a158:	6a1a      	ldr	r2, [r3, #32]
 800a15a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a15c:	4313      	orrs	r3, r2
 800a15e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a16a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a174:	430b      	orrs	r3, r1
 800a176:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17e:	f023 000f 	bic.w	r0, r3, #15
 800a182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a184:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	ea40 0301 	orr.w	r3, r0, r1
 800a18e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	4b59      	ldr	r3, [pc, #356]	@ (800a2fc <UART_SetConfig+0x21c>)
 800a196:	429a      	cmp	r2, r3
 800a198:	d102      	bne.n	800a1a0 <UART_SetConfig+0xc0>
 800a19a:	2301      	movs	r3, #1
 800a19c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a19e:	e029      	b.n	800a1f4 <UART_SetConfig+0x114>
 800a1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	4b56      	ldr	r3, [pc, #344]	@ (800a300 <UART_SetConfig+0x220>)
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d102      	bne.n	800a1b0 <UART_SetConfig+0xd0>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ae:	e021      	b.n	800a1f4 <UART_SetConfig+0x114>
 800a1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	4b53      	ldr	r3, [pc, #332]	@ (800a304 <UART_SetConfig+0x224>)
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d102      	bne.n	800a1c0 <UART_SetConfig+0xe0>
 800a1ba:	2304      	movs	r3, #4
 800a1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1be:	e019      	b.n	800a1f4 <UART_SetConfig+0x114>
 800a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	4b50      	ldr	r3, [pc, #320]	@ (800a308 <UART_SetConfig+0x228>)
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d102      	bne.n	800a1d0 <UART_SetConfig+0xf0>
 800a1ca:	2308      	movs	r3, #8
 800a1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ce:	e011      	b.n	800a1f4 <UART_SetConfig+0x114>
 800a1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	4b4d      	ldr	r3, [pc, #308]	@ (800a30c <UART_SetConfig+0x22c>)
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d102      	bne.n	800a1e0 <UART_SetConfig+0x100>
 800a1da:	2310      	movs	r3, #16
 800a1dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1de:	e009      	b.n	800a1f4 <UART_SetConfig+0x114>
 800a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	4b42      	ldr	r3, [pc, #264]	@ (800a2f0 <UART_SetConfig+0x210>)
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d102      	bne.n	800a1f0 <UART_SetConfig+0x110>
 800a1ea:	2320      	movs	r3, #32
 800a1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ee:	e001      	b.n	800a1f4 <UART_SetConfig+0x114>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	4b3d      	ldr	r3, [pc, #244]	@ (800a2f0 <UART_SetConfig+0x210>)
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d005      	beq.n	800a20a <UART_SetConfig+0x12a>
 800a1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b3d      	ldr	r3, [pc, #244]	@ (800a2f8 <UART_SetConfig+0x218>)
 800a204:	429a      	cmp	r2, r3
 800a206:	f040 8085 	bne.w	800a314 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a20c:	2200      	movs	r2, #0
 800a20e:	623b      	str	r3, [r7, #32]
 800a210:	627a      	str	r2, [r7, #36]	@ 0x24
 800a212:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a216:	f7fd f83b 	bl	8007290 <HAL_RCCEx_GetPeriphCLKFreq>
 800a21a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 80e8 	beq.w	800a3f4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a228:	4a39      	ldr	r2, [pc, #228]	@ (800a310 <UART_SetConfig+0x230>)
 800a22a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a22e:	461a      	mov	r2, r3
 800a230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a232:	fbb3 f3f2 	udiv	r3, r3, r2
 800a236:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	4613      	mov	r3, r2
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	4413      	add	r3, r2
 800a242:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a244:	429a      	cmp	r2, r3
 800a246:	d305      	bcc.n	800a254 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a24e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a250:	429a      	cmp	r2, r3
 800a252:	d903      	bls.n	800a25c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a25a:	e048      	b.n	800a2ee <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a25c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a25e:	2200      	movs	r2, #0
 800a260:	61bb      	str	r3, [r7, #24]
 800a262:	61fa      	str	r2, [r7, #28]
 800a264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a268:	4a29      	ldr	r2, [pc, #164]	@ (800a310 <UART_SetConfig+0x230>)
 800a26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2200      	movs	r2, #0
 800a272:	613b      	str	r3, [r7, #16]
 800a274:	617a      	str	r2, [r7, #20]
 800a276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a27a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a27e:	f7f6 fd07 	bl	8000c90 <__aeabi_uldivmod>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	4610      	mov	r0, r2
 800a288:	4619      	mov	r1, r3
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	020b      	lsls	r3, r1, #8
 800a294:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a298:	0202      	lsls	r2, r0, #8
 800a29a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a29c:	6849      	ldr	r1, [r1, #4]
 800a29e:	0849      	lsrs	r1, r1, #1
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	eb12 0804 	adds.w	r8, r2, r4
 800a2aa:	eb43 0905 	adc.w	r9, r3, r5
 800a2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	60bb      	str	r3, [r7, #8]
 800a2b6:	60fa      	str	r2, [r7, #12]
 800a2b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2bc:	4640      	mov	r0, r8
 800a2be:	4649      	mov	r1, r9
 800a2c0:	f7f6 fce6 	bl	8000c90 <__aeabi_uldivmod>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2d2:	d308      	bcc.n	800a2e6 <UART_SetConfig+0x206>
 800a2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2da:	d204      	bcs.n	800a2e6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2e2:	60da      	str	r2, [r3, #12]
 800a2e4:	e003      	b.n	800a2ee <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a2ec:	e082      	b.n	800a3f4 <UART_SetConfig+0x314>
 800a2ee:	e081      	b.n	800a3f4 <UART_SetConfig+0x314>
 800a2f0:	46002400 	.word	0x46002400
 800a2f4:	cfff69f3 	.word	0xcfff69f3
 800a2f8:	56002400 	.word	0x56002400
 800a2fc:	40013800 	.word	0x40013800
 800a300:	40004400 	.word	0x40004400
 800a304:	40004800 	.word	0x40004800
 800a308:	40004c00 	.word	0x40004c00
 800a30c:	40005000 	.word	0x40005000
 800a310:	0800f62c 	.word	0x0800f62c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a31c:	d13c      	bne.n	800a398 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a31e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a320:	2200      	movs	r2, #0
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	607a      	str	r2, [r7, #4]
 800a326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a32a:	f7fc ffb1 	bl	8007290 <HAL_RCCEx_GetPeriphCLKFreq>
 800a32e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	d05e      	beq.n	800a3f4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33a:	4a39      	ldr	r2, [pc, #228]	@ (800a420 <UART_SetConfig+0x340>)
 800a33c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a340:	461a      	mov	r2, r3
 800a342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a344:	fbb3 f3f2 	udiv	r3, r3, r2
 800a348:	005a      	lsls	r2, r3, #1
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	085b      	lsrs	r3, r3, #1
 800a350:	441a      	add	r2, r3
 800a352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35e:	2b0f      	cmp	r3, #15
 800a360:	d916      	bls.n	800a390 <UART_SetConfig+0x2b0>
 800a362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a368:	d212      	bcs.n	800a390 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	f023 030f 	bic.w	r3, r3, #15
 800a372:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	b29b      	uxth	r3, r3
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	b29a      	uxth	r2, r3
 800a380:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a382:	4313      	orrs	r3, r2
 800a384:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a38c:	60da      	str	r2, [r3, #12]
 800a38e:	e031      	b.n	800a3f4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a396:	e02d      	b.n	800a3f4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a39a:	2200      	movs	r2, #0
 800a39c:	469a      	mov	sl, r3
 800a39e:	4693      	mov	fp, r2
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	4659      	mov	r1, fp
 800a3a4:	f7fc ff74 	bl	8007290 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3a8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a3aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d021      	beq.n	800a3f4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b4:	4a1a      	ldr	r2, [pc, #104]	@ (800a420 <UART_SetConfig+0x340>)
 800a3b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3be:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	441a      	add	r2, r3
 800a3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d6:	2b0f      	cmp	r3, #15
 800a3d8:	d909      	bls.n	800a3ee <UART_SetConfig+0x30e>
 800a3da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3e0:	d205      	bcs.n	800a3ee <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60da      	str	r2, [r3, #12]
 800a3ec:	e002      	b.n	800a3f4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fe:	2201      	movs	r2, #1
 800a400:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a406:	2200      	movs	r2, #0
 800a408:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	2200      	movs	r2, #0
 800a40e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a410:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a414:	4618      	mov	r0, r3
 800a416:	3750      	adds	r7, #80	@ 0x50
 800a418:	46bd      	mov	sp, r7
 800a41a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a41e:	bf00      	nop
 800a420:	0800f62c 	.word	0x0800f62c

0800a424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a430:	f003 0308 	and.w	r3, r3, #8
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00a      	beq.n	800a492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a496:	f003 0304 	and.w	r3, r3, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b8:	f003 0310 	and.w	r3, r3, #16
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00a      	beq.n	800a4d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4da:	f003 0320 	and.w	r3, r3, #32
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a500:	2b00      	cmp	r3, #0
 800a502:	d01a      	beq.n	800a53a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a522:	d10a      	bne.n	800a53a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	605a      	str	r2, [r3, #4]
  }
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b098      	sub	sp, #96	@ 0x60
 800a56c:	af02      	add	r7, sp, #8
 800a56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a578:	f7f7 fe4c 	bl	8002214 <HAL_GetTick>
 800a57c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0308 	and.w	r3, r3, #8
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d12f      	bne.n	800a5ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a58c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a594:	2200      	movs	r2, #0
 800a596:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f88e 	bl	800a6bc <UART_WaitOnFlagUntilTimeout>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d022      	beq.n	800a5ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ae:	e853 3f00 	ldrex	r3, [r3]
 800a5b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5cc:	e841 2300 	strex	r3, r2, [r1]
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e6      	bne.n	800a5a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e063      	b.n	800a6b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0304 	and.w	r3, r3, #4
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	d149      	bne.n	800a68e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a602:	2200      	movs	r2, #0
 800a604:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 f857 	bl	800a6bc <UART_WaitOnFlagUntilTimeout>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d03c      	beq.n	800a68e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	623b      	str	r3, [r7, #32]
   return(result);
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a628:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a632:	633b      	str	r3, [r7, #48]	@ 0x30
 800a634:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a63a:	e841 2300 	strex	r3, r2, [r1]
 800a63e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1e6      	bne.n	800a614 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	3308      	adds	r3, #8
 800a64c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	60fb      	str	r3, [r7, #12]
   return(result);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f023 0301 	bic.w	r3, r3, #1
 800a65c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3308      	adds	r3, #8
 800a664:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a666:	61fa      	str	r2, [r7, #28]
 800a668:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	69b9      	ldr	r1, [r7, #24]
 800a66c:	69fa      	ldr	r2, [r7, #28]
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	617b      	str	r3, [r7, #20]
   return(result);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e5      	bne.n	800a646 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2220      	movs	r2, #32
 800a67e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e012      	b.n	800a6b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2220      	movs	r2, #32
 800a692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2220      	movs	r2, #32
 800a69a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3758      	adds	r7, #88	@ 0x58
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6cc:	e04f      	b.n	800a76e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d4:	d04b      	beq.n	800a76e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6d6:	f7f7 fd9d 	bl	8002214 <HAL_GetTick>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d302      	bcc.n	800a6ec <UART_WaitOnFlagUntilTimeout+0x30>
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e04e      	b.n	800a78e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d037      	beq.n	800a76e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2b80      	cmp	r3, #128	@ 0x80
 800a702:	d034      	beq.n	800a76e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b40      	cmp	r3, #64	@ 0x40
 800a708:	d031      	beq.n	800a76e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	69db      	ldr	r3, [r3, #28]
 800a710:	f003 0308 	and.w	r3, r3, #8
 800a714:	2b08      	cmp	r3, #8
 800a716:	d110      	bne.n	800a73a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2208      	movs	r2, #8
 800a71e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 f838 	bl	800a796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2208      	movs	r2, #8
 800a72a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	e029      	b.n	800a78e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a748:	d111      	bne.n	800a76e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f81e 	bl	800a796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e00f      	b.n	800a78e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69da      	ldr	r2, [r3, #28]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	4013      	ands	r3, r2
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	bf0c      	ite	eq
 800a77e:	2301      	moveq	r3, #1
 800a780:	2300      	movne	r3, #0
 800a782:	b2db      	uxtb	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d0a0      	beq.n	800a6ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a796:	b480      	push	{r7}
 800a798:	b095      	sub	sp, #84	@ 0x54
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a6:	e853 3f00 	ldrex	r3, [r3]
 800a7aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7c4:	e841 2300 	strex	r3, r2, [r1]
 800a7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e6      	bne.n	800a79e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	e853 3f00 	ldrex	r3, [r3]
 800a7de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a7e6:	f023 0301 	bic.w	r3, r3, #1
 800a7ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7fc:	e841 2300 	strex	r3, r2, [r1]
 800a800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e3      	bne.n	800a7d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d118      	bne.n	800a842 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f023 0310 	bic.w	r3, r3, #16
 800a824:	647b      	str	r3, [r7, #68]	@ 0x44
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a82e:	61bb      	str	r3, [r7, #24]
 800a830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6979      	ldr	r1, [r7, #20]
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	613b      	str	r3, [r7, #16]
   return(result);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e6      	bne.n	800a810 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2220      	movs	r2, #32
 800a846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a856:	bf00      	nop
 800a858:	3754      	adds	r7, #84	@ 0x54
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a862:	b480      	push	{r7}
 800a864:	b085      	sub	sp, #20
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a870:	2b01      	cmp	r3, #1
 800a872:	d101      	bne.n	800a878 <HAL_UARTEx_DisableFifoMode+0x16>
 800a874:	2302      	movs	r3, #2
 800a876:	e027      	b.n	800a8c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2224      	movs	r2, #36	@ 0x24
 800a884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 0201 	bic.w	r2, r2, #1
 800a89e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e02d      	b.n	800a948 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	@ 0x24
 800a8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f84f 	bl	800a9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2220      	movs	r2, #32
 800a93a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a964:	2302      	movs	r3, #2
 800a966:	e02d      	b.n	800a9c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2224      	movs	r2, #36	@ 0x24
 800a974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0201 	bic.w	r2, r2, #1
 800a98e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f811 	bl	800a9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d108      	bne.n	800a9ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9ec:	e031      	b.n	800aa52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9ee:	2308      	movs	r3, #8
 800a9f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9f2:	2308      	movs	r3, #8
 800a9f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	0e5b      	lsrs	r3, r3, #25
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f003 0307 	and.w	r3, r3, #7
 800aa04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	0f5b      	lsrs	r3, r3, #29
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	f003 0307 	and.w	r3, r3, #7
 800aa14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
 800aa18:	7b3a      	ldrb	r2, [r7, #12]
 800aa1a:	4911      	ldr	r1, [pc, #68]	@ (800aa60 <UARTEx_SetNbDataToProcess+0x94>)
 800aa1c:	5c8a      	ldrb	r2, [r1, r2]
 800aa1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa22:	7b3a      	ldrb	r2, [r7, #12]
 800aa24:	490f      	ldr	r1, [pc, #60]	@ (800aa64 <UARTEx_SetNbDataToProcess+0x98>)
 800aa26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa28:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	7b7a      	ldrb	r2, [r7, #13]
 800aa38:	4909      	ldr	r1, [pc, #36]	@ (800aa60 <UARTEx_SetNbDataToProcess+0x94>)
 800aa3a:	5c8a      	ldrb	r2, [r1, r2]
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa40:	7b7a      	ldrb	r2, [r7, #13]
 800aa42:	4908      	ldr	r1, [pc, #32]	@ (800aa64 <UARTEx_SetNbDataToProcess+0x98>)
 800aa44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa46:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	0800f644 	.word	0x0800f644
 800aa64:	0800f64c 	.word	0x0800f64c

0800aa68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa68:	b084      	sub	sp, #16
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	f107 001c 	add.w	r0, r7, #28
 800aa76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f8e6 	bl	800ac58 <USB_CoreReset>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800aa90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	639a      	str	r2, [r3, #56]	@ 0x38
 800aaa4:	e005      	b.n	800aab2 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800aab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aabe:	b004      	add	sp, #16
 800aac0:	4770      	bx	lr

0800aac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f023 0201 	bic.w	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d115      	bne.n	800ab32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab12:	200a      	movs	r0, #10
 800ab14:	f7f7 fb8a 	bl	800222c <HAL_Delay>
      ms += 10U;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	330a      	adds	r3, #10
 800ab1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f88c 	bl	800ac3c <USB_GetMode>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d01e      	beq.n	800ab68 <USB_SetCurrentMode+0x84>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab2e:	d9f0      	bls.n	800ab12 <USB_SetCurrentMode+0x2e>
 800ab30:	e01a      	b.n	800ab68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d115      	bne.n	800ab64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab44:	200a      	movs	r0, #10
 800ab46:	f7f7 fb71 	bl	800222c <HAL_Delay>
      ms += 10U;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	330a      	adds	r3, #10
 800ab4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f873 	bl	800ac3c <USB_GetMode>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d005      	beq.n	800ab68 <USB_SetCurrentMode+0x84>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab60:	d9f0      	bls.n	800ab44 <USB_SetCurrentMode+0x60>
 800ab62:	e001      	b.n	800ab68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e005      	b.n	800ab74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ab6c:	d101      	bne.n	800ab72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e000      	b.n	800ab74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab96:	d901      	bls.n	800ab9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e01b      	b.n	800abd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	daf2      	bge.n	800ab8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	019b      	lsls	r3, r3, #6
 800abac:	f043 0220 	orr.w	r2, r3, #32
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	3301      	adds	r3, #1
 800abb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abc0:	d901      	bls.n	800abc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e006      	b.n	800abd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	f003 0320 	and.w	r3, r3, #32
 800abce:	2b20      	cmp	r3, #32
 800abd0:	d0f0      	beq.n	800abb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abe8:	2300      	movs	r3, #0
 800abea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3301      	adds	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abf8:	d901      	bls.n	800abfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e018      	b.n	800ac30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	daf2      	bge.n	800abec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2210      	movs	r2, #16
 800ac0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac1c:	d901      	bls.n	800ac22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e006      	b.n	800ac30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	f003 0310 	and.w	r3, r3, #16
 800ac2a:	2b10      	cmp	r3, #16
 800ac2c:	d0f0      	beq.n	800ac10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	f003 0301 	and.w	r3, r3, #1
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	3301      	adds	r3, #1
 800ac68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac70:	d901      	bls.n	800ac76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e01b      	b.n	800acae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	daf2      	bge.n	800ac64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	f043 0201 	orr.w	r2, r3, #1
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3301      	adds	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac9a:	d901      	bls.n	800aca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e006      	b.n	800acae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d0f0      	beq.n	800ac8e <USB_CoreReset+0x36>

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
	...

0800acbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acbc:	b084      	sub	sp, #16
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b086      	sub	sp, #24
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800acca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	60fb      	str	r3, [r7, #12]
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acdc:	461a      	mov	r2, r3
 800acde:	2300      	movs	r3, #0
 800ace0:	6013      	str	r3, [r2, #0]
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d119      	bne.n	800ad3a <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ad06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d10a      	bne.n	800ad24 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad1c:	f043 0304 	orr.w	r3, r3, #4
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	e014      	b.n	800ad4e <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad32:	f023 0304 	bic.w	r3, r3, #4
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	e009      	b.n	800ad4e <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad48:	f023 0304 	bic.w	r3, r3, #4
 800ad4c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad4e:	2110      	movs	r1, #16
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff ff13 	bl	800ab7c <USB_FlushTxFifo>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff ff3d 	bl	800abe0 <USB_FlushRxFifo>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ad70:	2300      	movs	r3, #0
 800ad72:	613b      	str	r3, [r7, #16]
 800ad74:	e015      	b.n	800ada2 <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad82:	461a      	mov	r2, r3
 800ad84:	f04f 33ff 	mov.w	r3, #4294967295
 800ad88:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4413      	add	r3, r2
 800ad92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad96:	461a      	mov	r2, r3
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
 800ada2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ada6:	461a      	mov	r2, r3
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	4293      	cmp	r3, r2
 800adac:	d3e3      	bcc.n	800ad76 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f04f 32ff 	mov.w	r2, #4294967295
 800adba:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2280      	movs	r2, #128	@ 0x80
 800adc0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a0e      	ldr	r2, [pc, #56]	@ (800ae00 <USB_HostInit+0x144>)
 800adc6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a0e      	ldr	r2, [pc, #56]	@ (800ae04 <USB_HostInit+0x148>)
 800adcc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800add0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800add4:	2b00      	cmp	r3, #0
 800add6:	d105      	bne.n	800ade4 <USB_HostInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	699b      	ldr	r3, [r3, #24]
 800addc:	f043 0210 	orr.w	r2, r3, #16
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	699a      	ldr	r2, [r3, #24]
 800ade8:	4b07      	ldr	r3, [pc, #28]	@ (800ae08 <USB_HostInit+0x14c>)
 800adea:	4313      	orrs	r3, r2
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adfc:	b004      	add	sp, #16
 800adfe:	4770      	bx	lr
 800ae00:	00600080 	.word	0x00600080
 800ae04:	004000e0 	.word	0x004000e0
 800ae08:	a3200008 	.word	0xa3200008

0800ae0c <__cvt>:
 800ae0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae10:	ec57 6b10 	vmov	r6, r7, d0
 800ae14:	2f00      	cmp	r7, #0
 800ae16:	460c      	mov	r4, r1
 800ae18:	4619      	mov	r1, r3
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	bfb4      	ite	lt
 800ae1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ae22:	2300      	movge	r3, #0
 800ae24:	4691      	mov	r9, r2
 800ae26:	bfbf      	itttt	lt
 800ae28:	4632      	movlt	r2, r6
 800ae2a:	461f      	movlt	r7, r3
 800ae2c:	232d      	movlt	r3, #45	@ 0x2d
 800ae2e:	4616      	movlt	r6, r2
 800ae30:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ae34:	700b      	strb	r3, [r1, #0]
 800ae36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae38:	f023 0820 	bic.w	r8, r3, #32
 800ae3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae40:	d005      	beq.n	800ae4e <__cvt+0x42>
 800ae42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ae46:	d100      	bne.n	800ae4a <__cvt+0x3e>
 800ae48:	3401      	adds	r4, #1
 800ae4a:	2102      	movs	r1, #2
 800ae4c:	e000      	b.n	800ae50 <__cvt+0x44>
 800ae4e:	2103      	movs	r1, #3
 800ae50:	ab03      	add	r3, sp, #12
 800ae52:	4622      	mov	r2, r4
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	ab02      	add	r3, sp, #8
 800ae58:	ec47 6b10 	vmov	d0, r6, r7
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	4653      	mov	r3, sl
 800ae60:	f001 f88a 	bl	800bf78 <_dtoa_r>
 800ae64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ae68:	4605      	mov	r5, r0
 800ae6a:	d119      	bne.n	800aea0 <__cvt+0x94>
 800ae6c:	f019 0f01 	tst.w	r9, #1
 800ae70:	d00e      	beq.n	800ae90 <__cvt+0x84>
 800ae72:	eb00 0904 	add.w	r9, r0, r4
 800ae76:	2200      	movs	r2, #0
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	f7f5 fe27 	bl	8000ad0 <__aeabi_dcmpeq>
 800ae82:	b108      	cbz	r0, 800ae88 <__cvt+0x7c>
 800ae84:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae88:	2230      	movs	r2, #48	@ 0x30
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	454b      	cmp	r3, r9
 800ae8e:	d31e      	bcc.n	800aece <__cvt+0xc2>
 800ae90:	9b03      	ldr	r3, [sp, #12]
 800ae92:	4628      	mov	r0, r5
 800ae94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae96:	1b5b      	subs	r3, r3, r5
 800ae98:	6013      	str	r3, [r2, #0]
 800ae9a:	b004      	add	sp, #16
 800ae9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aea4:	eb00 0904 	add.w	r9, r0, r4
 800aea8:	d1e5      	bne.n	800ae76 <__cvt+0x6a>
 800aeaa:	7803      	ldrb	r3, [r0, #0]
 800aeac:	2b30      	cmp	r3, #48	@ 0x30
 800aeae:	d10a      	bne.n	800aec6 <__cvt+0xba>
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	f7f5 fe0a 	bl	8000ad0 <__aeabi_dcmpeq>
 800aebc:	b918      	cbnz	r0, 800aec6 <__cvt+0xba>
 800aebe:	f1c4 0401 	rsb	r4, r4, #1
 800aec2:	f8ca 4000 	str.w	r4, [sl]
 800aec6:	f8da 3000 	ldr.w	r3, [sl]
 800aeca:	4499      	add	r9, r3
 800aecc:	e7d3      	b.n	800ae76 <__cvt+0x6a>
 800aece:	1c59      	adds	r1, r3, #1
 800aed0:	9103      	str	r1, [sp, #12]
 800aed2:	701a      	strb	r2, [r3, #0]
 800aed4:	e7d9      	b.n	800ae8a <__cvt+0x7e>

0800aed6 <__exponent>:
 800aed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aed8:	2900      	cmp	r1, #0
 800aeda:	7002      	strb	r2, [r0, #0]
 800aedc:	bfba      	itte	lt
 800aede:	4249      	neglt	r1, r1
 800aee0:	232d      	movlt	r3, #45	@ 0x2d
 800aee2:	232b      	movge	r3, #43	@ 0x2b
 800aee4:	2909      	cmp	r1, #9
 800aee6:	7043      	strb	r3, [r0, #1]
 800aee8:	dd28      	ble.n	800af3c <__exponent+0x66>
 800aeea:	f10d 0307 	add.w	r3, sp, #7
 800aeee:	270a      	movs	r7, #10
 800aef0:	461d      	mov	r5, r3
 800aef2:	461a      	mov	r2, r3
 800aef4:	3b01      	subs	r3, #1
 800aef6:	fbb1 f6f7 	udiv	r6, r1, r7
 800aefa:	fb07 1416 	mls	r4, r7, r6, r1
 800aefe:	3430      	adds	r4, #48	@ 0x30
 800af00:	f802 4c01 	strb.w	r4, [r2, #-1]
 800af04:	460c      	mov	r4, r1
 800af06:	4631      	mov	r1, r6
 800af08:	2c63      	cmp	r4, #99	@ 0x63
 800af0a:	dcf2      	bgt.n	800aef2 <__exponent+0x1c>
 800af0c:	3130      	adds	r1, #48	@ 0x30
 800af0e:	1e94      	subs	r4, r2, #2
 800af10:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af14:	1c41      	adds	r1, r0, #1
 800af16:	4623      	mov	r3, r4
 800af18:	42ab      	cmp	r3, r5
 800af1a:	d30a      	bcc.n	800af32 <__exponent+0x5c>
 800af1c:	f10d 0309 	add.w	r3, sp, #9
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	42ac      	cmp	r4, r5
 800af24:	bf88      	it	hi
 800af26:	2300      	movhi	r3, #0
 800af28:	3302      	adds	r3, #2
 800af2a:	4403      	add	r3, r0
 800af2c:	1a18      	subs	r0, r3, r0
 800af2e:	b003      	add	sp, #12
 800af30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af32:	f813 6b01 	ldrb.w	r6, [r3], #1
 800af36:	f801 6f01 	strb.w	r6, [r1, #1]!
 800af3a:	e7ed      	b.n	800af18 <__exponent+0x42>
 800af3c:	2330      	movs	r3, #48	@ 0x30
 800af3e:	3130      	adds	r1, #48	@ 0x30
 800af40:	7083      	strb	r3, [r0, #2]
 800af42:	1d03      	adds	r3, r0, #4
 800af44:	70c1      	strb	r1, [r0, #3]
 800af46:	e7f1      	b.n	800af2c <__exponent+0x56>

0800af48 <_printf_float>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	b08d      	sub	sp, #52	@ 0x34
 800af4e:	460c      	mov	r4, r1
 800af50:	4616      	mov	r6, r2
 800af52:	461f      	mov	r7, r3
 800af54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800af58:	4605      	mov	r5, r0
 800af5a:	f000 fef1 	bl	800bd40 <_localeconv_r>
 800af5e:	6803      	ldr	r3, [r0, #0]
 800af60:	4618      	mov	r0, r3
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	f7f5 f988 	bl	8000278 <strlen>
 800af68:	2300      	movs	r3, #0
 800af6a:	9005      	str	r0, [sp, #20]
 800af6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af6e:	f8d8 3000 	ldr.w	r3, [r8]
 800af72:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af76:	3307      	adds	r3, #7
 800af78:	f8d4 b000 	ldr.w	fp, [r4]
 800af7c:	f023 0307 	bic.w	r3, r3, #7
 800af80:	f103 0208 	add.w	r2, r3, #8
 800af84:	f8c8 2000 	str.w	r2, [r8]
 800af88:	f04f 32ff 	mov.w	r2, #4294967295
 800af8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800af94:	f8cd 8018 	str.w	r8, [sp, #24]
 800af98:	9307      	str	r3, [sp, #28]
 800af9a:	4b9d      	ldr	r3, [pc, #628]	@ (800b210 <_printf_float+0x2c8>)
 800af9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afa0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800afa4:	f7f5 fdc6 	bl	8000b34 <__aeabi_dcmpun>
 800afa8:	bb70      	cbnz	r0, 800b008 <_printf_float+0xc0>
 800afaa:	f04f 32ff 	mov.w	r2, #4294967295
 800afae:	4b98      	ldr	r3, [pc, #608]	@ (800b210 <_printf_float+0x2c8>)
 800afb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afb4:	f7f5 fda0 	bl	8000af8 <__aeabi_dcmple>
 800afb8:	bb30      	cbnz	r0, 800b008 <_printf_float+0xc0>
 800afba:	2200      	movs	r2, #0
 800afbc:	2300      	movs	r3, #0
 800afbe:	4640      	mov	r0, r8
 800afc0:	4649      	mov	r1, r9
 800afc2:	f7f5 fd8f 	bl	8000ae4 <__aeabi_dcmplt>
 800afc6:	b110      	cbz	r0, 800afce <_printf_float+0x86>
 800afc8:	232d      	movs	r3, #45	@ 0x2d
 800afca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afce:	4a91      	ldr	r2, [pc, #580]	@ (800b214 <_printf_float+0x2cc>)
 800afd0:	4b91      	ldr	r3, [pc, #580]	@ (800b218 <_printf_float+0x2d0>)
 800afd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800afd6:	bf94      	ite	ls
 800afd8:	4690      	movls	r8, r2
 800afda:	4698      	movhi	r8, r3
 800afdc:	2303      	movs	r3, #3
 800afde:	f04f 0900 	mov.w	r9, #0
 800afe2:	6123      	str	r3, [r4, #16]
 800afe4:	f02b 0304 	bic.w	r3, fp, #4
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	4633      	mov	r3, r6
 800afec:	aa0b      	add	r2, sp, #44	@ 0x2c
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	9700      	str	r7, [sp, #0]
 800aff4:	f000 f9d2 	bl	800b39c <_printf_common>
 800aff8:	3001      	adds	r0, #1
 800affa:	f040 808d 	bne.w	800b118 <_printf_float+0x1d0>
 800affe:	f04f 30ff 	mov.w	r0, #4294967295
 800b002:	b00d      	add	sp, #52	@ 0x34
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	4642      	mov	r2, r8
 800b00a:	464b      	mov	r3, r9
 800b00c:	4640      	mov	r0, r8
 800b00e:	4649      	mov	r1, r9
 800b010:	f7f5 fd90 	bl	8000b34 <__aeabi_dcmpun>
 800b014:	b140      	cbz	r0, 800b028 <_printf_float+0xe0>
 800b016:	464b      	mov	r3, r9
 800b018:	4a80      	ldr	r2, [pc, #512]	@ (800b21c <_printf_float+0x2d4>)
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	bfbc      	itt	lt
 800b01e:	232d      	movlt	r3, #45	@ 0x2d
 800b020:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b024:	4b7e      	ldr	r3, [pc, #504]	@ (800b220 <_printf_float+0x2d8>)
 800b026:	e7d4      	b.n	800afd2 <_printf_float+0x8a>
 800b028:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b02c:	6863      	ldr	r3, [r4, #4]
 800b02e:	9206      	str	r2, [sp, #24]
 800b030:	1c5a      	adds	r2, r3, #1
 800b032:	d13b      	bne.n	800b0ac <_printf_float+0x164>
 800b034:	2306      	movs	r3, #6
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b03c:	2300      	movs	r3, #0
 800b03e:	4628      	mov	r0, r5
 800b040:	6022      	str	r2, [r4, #0]
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	ab0a      	add	r3, sp, #40	@ 0x28
 800b046:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b04a:	ab09      	add	r3, sp, #36	@ 0x24
 800b04c:	ec49 8b10 	vmov	d0, r8, r9
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b056:	6861      	ldr	r1, [r4, #4]
 800b058:	f7ff fed8 	bl	800ae0c <__cvt>
 800b05c:	9b06      	ldr	r3, [sp, #24]
 800b05e:	4680      	mov	r8, r0
 800b060:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b062:	2b47      	cmp	r3, #71	@ 0x47
 800b064:	d129      	bne.n	800b0ba <_printf_float+0x172>
 800b066:	1cc8      	adds	r0, r1, #3
 800b068:	db02      	blt.n	800b070 <_printf_float+0x128>
 800b06a:	6863      	ldr	r3, [r4, #4]
 800b06c:	4299      	cmp	r1, r3
 800b06e:	dd41      	ble.n	800b0f4 <_printf_float+0x1ac>
 800b070:	f1aa 0a02 	sub.w	sl, sl, #2
 800b074:	fa5f fa8a 	uxtb.w	sl, sl
 800b078:	3901      	subs	r1, #1
 800b07a:	4652      	mov	r2, sl
 800b07c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b080:	9109      	str	r1, [sp, #36]	@ 0x24
 800b082:	f7ff ff28 	bl	800aed6 <__exponent>
 800b086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b088:	4681      	mov	r9, r0
 800b08a:	1813      	adds	r3, r2, r0
 800b08c:	2a01      	cmp	r2, #1
 800b08e:	6123      	str	r3, [r4, #16]
 800b090:	dc02      	bgt.n	800b098 <_printf_float+0x150>
 800b092:	6822      	ldr	r2, [r4, #0]
 800b094:	07d2      	lsls	r2, r2, #31
 800b096:	d501      	bpl.n	800b09c <_printf_float+0x154>
 800b098:	3301      	adds	r3, #1
 800b09a:	6123      	str	r3, [r4, #16]
 800b09c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0a2      	beq.n	800afea <_printf_float+0xa2>
 800b0a4:	232d      	movs	r3, #45	@ 0x2d
 800b0a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0aa:	e79e      	b.n	800afea <_printf_float+0xa2>
 800b0ac:	9a06      	ldr	r2, [sp, #24]
 800b0ae:	2a47      	cmp	r2, #71	@ 0x47
 800b0b0:	d1c2      	bne.n	800b038 <_printf_float+0xf0>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1c0      	bne.n	800b038 <_printf_float+0xf0>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e7bd      	b.n	800b036 <_printf_float+0xee>
 800b0ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b0be:	d9db      	bls.n	800b078 <_printf_float+0x130>
 800b0c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b0c4:	d118      	bne.n	800b0f8 <_printf_float+0x1b0>
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	6863      	ldr	r3, [r4, #4]
 800b0ca:	dd0b      	ble.n	800b0e4 <_printf_float+0x19c>
 800b0cc:	6121      	str	r1, [r4, #16]
 800b0ce:	b913      	cbnz	r3, 800b0d6 <_printf_float+0x18e>
 800b0d0:	6822      	ldr	r2, [r4, #0]
 800b0d2:	07d0      	lsls	r0, r2, #31
 800b0d4:	d502      	bpl.n	800b0dc <_printf_float+0x194>
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	440b      	add	r3, r1
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	f04f 0900 	mov.w	r9, #0
 800b0e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b0e2:	e7db      	b.n	800b09c <_printf_float+0x154>
 800b0e4:	b913      	cbnz	r3, 800b0ec <_printf_float+0x1a4>
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	07d2      	lsls	r2, r2, #31
 800b0ea:	d501      	bpl.n	800b0f0 <_printf_float+0x1a8>
 800b0ec:	3302      	adds	r3, #2
 800b0ee:	e7f4      	b.n	800b0da <_printf_float+0x192>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e7f2      	b.n	800b0da <_printf_float+0x192>
 800b0f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0fa:	4299      	cmp	r1, r3
 800b0fc:	db05      	blt.n	800b10a <_printf_float+0x1c2>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	6121      	str	r1, [r4, #16]
 800b102:	07d8      	lsls	r0, r3, #31
 800b104:	d5ea      	bpl.n	800b0dc <_printf_float+0x194>
 800b106:	1c4b      	adds	r3, r1, #1
 800b108:	e7e7      	b.n	800b0da <_printf_float+0x192>
 800b10a:	2900      	cmp	r1, #0
 800b10c:	bfd4      	ite	le
 800b10e:	f1c1 0202 	rsble	r2, r1, #2
 800b112:	2201      	movgt	r2, #1
 800b114:	4413      	add	r3, r2
 800b116:	e7e0      	b.n	800b0da <_printf_float+0x192>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	055a      	lsls	r2, r3, #21
 800b11c:	d407      	bmi.n	800b12e <_printf_float+0x1e6>
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	4642      	mov	r2, r8
 800b122:	4631      	mov	r1, r6
 800b124:	4628      	mov	r0, r5
 800b126:	47b8      	blx	r7
 800b128:	3001      	adds	r0, #1
 800b12a:	d12b      	bne.n	800b184 <_printf_float+0x23c>
 800b12c:	e767      	b.n	800affe <_printf_float+0xb6>
 800b12e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b132:	f240 80dd 	bls.w	800b2f0 <_printf_float+0x3a8>
 800b136:	2200      	movs	r2, #0
 800b138:	2300      	movs	r3, #0
 800b13a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b13e:	f7f5 fcc7 	bl	8000ad0 <__aeabi_dcmpeq>
 800b142:	2800      	cmp	r0, #0
 800b144:	d033      	beq.n	800b1ae <_printf_float+0x266>
 800b146:	2301      	movs	r3, #1
 800b148:	4a36      	ldr	r2, [pc, #216]	@ (800b224 <_printf_float+0x2dc>)
 800b14a:	4631      	mov	r1, r6
 800b14c:	4628      	mov	r0, r5
 800b14e:	47b8      	blx	r7
 800b150:	3001      	adds	r0, #1
 800b152:	f43f af54 	beq.w	800affe <_printf_float+0xb6>
 800b156:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b15a:	4543      	cmp	r3, r8
 800b15c:	db02      	blt.n	800b164 <_printf_float+0x21c>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	07d8      	lsls	r0, r3, #31
 800b162:	d50f      	bpl.n	800b184 <_printf_float+0x23c>
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b16c:	47b8      	blx	r7
 800b16e:	3001      	adds	r0, #1
 800b170:	f43f af45 	beq.w	800affe <_printf_float+0xb6>
 800b174:	f04f 0900 	mov.w	r9, #0
 800b178:	f108 38ff 	add.w	r8, r8, #4294967295
 800b17c:	f104 0a1a 	add.w	sl, r4, #26
 800b180:	45c8      	cmp	r8, r9
 800b182:	dc09      	bgt.n	800b198 <_printf_float+0x250>
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	079b      	lsls	r3, r3, #30
 800b188:	f100 8103 	bmi.w	800b392 <_printf_float+0x44a>
 800b18c:	68e0      	ldr	r0, [r4, #12]
 800b18e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b190:	4298      	cmp	r0, r3
 800b192:	bfb8      	it	lt
 800b194:	4618      	movlt	r0, r3
 800b196:	e734      	b.n	800b002 <_printf_float+0xba>
 800b198:	2301      	movs	r3, #1
 800b19a:	4652      	mov	r2, sl
 800b19c:	4631      	mov	r1, r6
 800b19e:	4628      	mov	r0, r5
 800b1a0:	47b8      	blx	r7
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	f43f af2b 	beq.w	800affe <_printf_float+0xb6>
 800b1a8:	f109 0901 	add.w	r9, r9, #1
 800b1ac:	e7e8      	b.n	800b180 <_printf_float+0x238>
 800b1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dc39      	bgt.n	800b228 <_printf_float+0x2e0>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	4a1b      	ldr	r2, [pc, #108]	@ (800b224 <_printf_float+0x2dc>)
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	47b8      	blx	r7
 800b1be:	3001      	adds	r0, #1
 800b1c0:	f43f af1d 	beq.w	800affe <_printf_float+0xb6>
 800b1c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b1c8:	ea59 0303 	orrs.w	r3, r9, r3
 800b1cc:	d102      	bne.n	800b1d4 <_printf_float+0x28c>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	07d9      	lsls	r1, r3, #31
 800b1d2:	d5d7      	bpl.n	800b184 <_printf_float+0x23c>
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f af0d 	beq.w	800affe <_printf_float+0xb6>
 800b1e4:	f04f 0a00 	mov.w	sl, #0
 800b1e8:	f104 0b1a 	add.w	fp, r4, #26
 800b1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ee:	425b      	negs	r3, r3
 800b1f0:	4553      	cmp	r3, sl
 800b1f2:	dc01      	bgt.n	800b1f8 <_printf_float+0x2b0>
 800b1f4:	464b      	mov	r3, r9
 800b1f6:	e793      	b.n	800b120 <_printf_float+0x1d8>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	465a      	mov	r2, fp
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f aefb 	beq.w	800affe <_printf_float+0xb6>
 800b208:	f10a 0a01 	add.w	sl, sl, #1
 800b20c:	e7ee      	b.n	800b1ec <_printf_float+0x2a4>
 800b20e:	bf00      	nop
 800b210:	7fefffff 	.word	0x7fefffff
 800b214:	0800f654 	.word	0x0800f654
 800b218:	0800f658 	.word	0x0800f658
 800b21c:	0800f65c 	.word	0x0800f65c
 800b220:	0800f660 	.word	0x0800f660
 800b224:	0800f664 	.word	0x0800f664
 800b228:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b22a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b22e:	4553      	cmp	r3, sl
 800b230:	bfa8      	it	ge
 800b232:	4653      	movge	r3, sl
 800b234:	2b00      	cmp	r3, #0
 800b236:	4699      	mov	r9, r3
 800b238:	dc36      	bgt.n	800b2a8 <_printf_float+0x360>
 800b23a:	f04f 0b00 	mov.w	fp, #0
 800b23e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b242:	f104 021a 	add.w	r2, r4, #26
 800b246:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b248:	9306      	str	r3, [sp, #24]
 800b24a:	eba3 0309 	sub.w	r3, r3, r9
 800b24e:	455b      	cmp	r3, fp
 800b250:	dc31      	bgt.n	800b2b6 <_printf_float+0x36e>
 800b252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b254:	459a      	cmp	sl, r3
 800b256:	dc3a      	bgt.n	800b2ce <_printf_float+0x386>
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	07da      	lsls	r2, r3, #31
 800b25c:	d437      	bmi.n	800b2ce <_printf_float+0x386>
 800b25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b260:	ebaa 0903 	sub.w	r9, sl, r3
 800b264:	9b06      	ldr	r3, [sp, #24]
 800b266:	ebaa 0303 	sub.w	r3, sl, r3
 800b26a:	4599      	cmp	r9, r3
 800b26c:	bfa8      	it	ge
 800b26e:	4699      	movge	r9, r3
 800b270:	f1b9 0f00 	cmp.w	r9, #0
 800b274:	dc33      	bgt.n	800b2de <_printf_float+0x396>
 800b276:	f04f 0800 	mov.w	r8, #0
 800b27a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b27e:	f104 0b1a 	add.w	fp, r4, #26
 800b282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b284:	ebaa 0303 	sub.w	r3, sl, r3
 800b288:	eba3 0309 	sub.w	r3, r3, r9
 800b28c:	4543      	cmp	r3, r8
 800b28e:	f77f af79 	ble.w	800b184 <_printf_float+0x23c>
 800b292:	2301      	movs	r3, #1
 800b294:	465a      	mov	r2, fp
 800b296:	4631      	mov	r1, r6
 800b298:	4628      	mov	r0, r5
 800b29a:	47b8      	blx	r7
 800b29c:	3001      	adds	r0, #1
 800b29e:	f43f aeae 	beq.w	800affe <_printf_float+0xb6>
 800b2a2:	f108 0801 	add.w	r8, r8, #1
 800b2a6:	e7ec      	b.n	800b282 <_printf_float+0x33a>
 800b2a8:	4642      	mov	r2, r8
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	47b8      	blx	r7
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d1c2      	bne.n	800b23a <_printf_float+0x2f2>
 800b2b4:	e6a3      	b.n	800affe <_printf_float+0xb6>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	9206      	str	r2, [sp, #24]
 800b2be:	47b8      	blx	r7
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f43f ae9c 	beq.w	800affe <_printf_float+0xb6>
 800b2c6:	f10b 0b01 	add.w	fp, fp, #1
 800b2ca:	9a06      	ldr	r2, [sp, #24]
 800b2cc:	e7bb      	b.n	800b246 <_printf_float+0x2fe>
 800b2ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d1c0      	bne.n	800b25e <_printf_float+0x316>
 800b2dc:	e68f      	b.n	800affe <_printf_float+0xb6>
 800b2de:	9a06      	ldr	r2, [sp, #24]
 800b2e0:	464b      	mov	r3, r9
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	4442      	add	r2, r8
 800b2e8:	47b8      	blx	r7
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d1c3      	bne.n	800b276 <_printf_float+0x32e>
 800b2ee:	e686      	b.n	800affe <_printf_float+0xb6>
 800b2f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b2f4:	f1ba 0f01 	cmp.w	sl, #1
 800b2f8:	dc01      	bgt.n	800b2fe <_printf_float+0x3b6>
 800b2fa:	07db      	lsls	r3, r3, #31
 800b2fc:	d536      	bpl.n	800b36c <_printf_float+0x424>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4642      	mov	r2, r8
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	47b8      	blx	r7
 800b308:	3001      	adds	r0, #1
 800b30a:	f43f ae78 	beq.w	800affe <_printf_float+0xb6>
 800b30e:	4631      	mov	r1, r6
 800b310:	4628      	mov	r0, r5
 800b312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	f43f ae70 	beq.w	800affe <_printf_float+0xb6>
 800b31e:	2200      	movs	r2, #0
 800b320:	2300      	movs	r3, #0
 800b322:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b326:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b32a:	f7f5 fbd1 	bl	8000ad0 <__aeabi_dcmpeq>
 800b32e:	b9c0      	cbnz	r0, 800b362 <_printf_float+0x41a>
 800b330:	4653      	mov	r3, sl
 800b332:	f108 0201 	add.w	r2, r8, #1
 800b336:	4631      	mov	r1, r6
 800b338:	4628      	mov	r0, r5
 800b33a:	47b8      	blx	r7
 800b33c:	3001      	adds	r0, #1
 800b33e:	d10c      	bne.n	800b35a <_printf_float+0x412>
 800b340:	e65d      	b.n	800affe <_printf_float+0xb6>
 800b342:	2301      	movs	r3, #1
 800b344:	465a      	mov	r2, fp
 800b346:	4631      	mov	r1, r6
 800b348:	4628      	mov	r0, r5
 800b34a:	47b8      	blx	r7
 800b34c:	3001      	adds	r0, #1
 800b34e:	f43f ae56 	beq.w	800affe <_printf_float+0xb6>
 800b352:	f108 0801 	add.w	r8, r8, #1
 800b356:	45d0      	cmp	r8, sl
 800b358:	dbf3      	blt.n	800b342 <_printf_float+0x3fa>
 800b35a:	464b      	mov	r3, r9
 800b35c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b360:	e6df      	b.n	800b122 <_printf_float+0x1da>
 800b362:	f04f 0800 	mov.w	r8, #0
 800b366:	f104 0b1a 	add.w	fp, r4, #26
 800b36a:	e7f4      	b.n	800b356 <_printf_float+0x40e>
 800b36c:	2301      	movs	r3, #1
 800b36e:	4642      	mov	r2, r8
 800b370:	e7e1      	b.n	800b336 <_printf_float+0x3ee>
 800b372:	2301      	movs	r3, #1
 800b374:	464a      	mov	r2, r9
 800b376:	4631      	mov	r1, r6
 800b378:	4628      	mov	r0, r5
 800b37a:	47b8      	blx	r7
 800b37c:	3001      	adds	r0, #1
 800b37e:	f43f ae3e 	beq.w	800affe <_printf_float+0xb6>
 800b382:	f108 0801 	add.w	r8, r8, #1
 800b386:	68e3      	ldr	r3, [r4, #12]
 800b388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b38a:	1a5b      	subs	r3, r3, r1
 800b38c:	4543      	cmp	r3, r8
 800b38e:	dcf0      	bgt.n	800b372 <_printf_float+0x42a>
 800b390:	e6fc      	b.n	800b18c <_printf_float+0x244>
 800b392:	f04f 0800 	mov.w	r8, #0
 800b396:	f104 0919 	add.w	r9, r4, #25
 800b39a:	e7f4      	b.n	800b386 <_printf_float+0x43e>

0800b39c <_printf_common>:
 800b39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a0:	4616      	mov	r6, r2
 800b3a2:	4698      	mov	r8, r3
 800b3a4:	688a      	ldr	r2, [r1, #8]
 800b3a6:	4607      	mov	r7, r0
 800b3a8:	690b      	ldr	r3, [r1, #16]
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	bfb8      	it	lt
 800b3b4:	4613      	movlt	r3, r2
 800b3b6:	6033      	str	r3, [r6, #0]
 800b3b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3bc:	b10a      	cbz	r2, 800b3c2 <_printf_common+0x26>
 800b3be:	3301      	adds	r3, #1
 800b3c0:	6033      	str	r3, [r6, #0]
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	0699      	lsls	r1, r3, #26
 800b3c6:	bf42      	ittt	mi
 800b3c8:	6833      	ldrmi	r3, [r6, #0]
 800b3ca:	3302      	addmi	r3, #2
 800b3cc:	6033      	strmi	r3, [r6, #0]
 800b3ce:	6825      	ldr	r5, [r4, #0]
 800b3d0:	f015 0506 	ands.w	r5, r5, #6
 800b3d4:	d106      	bne.n	800b3e4 <_printf_common+0x48>
 800b3d6:	f104 0a19 	add.w	sl, r4, #25
 800b3da:	68e3      	ldr	r3, [r4, #12]
 800b3dc:	6832      	ldr	r2, [r6, #0]
 800b3de:	1a9b      	subs	r3, r3, r2
 800b3e0:	42ab      	cmp	r3, r5
 800b3e2:	dc2b      	bgt.n	800b43c <_printf_common+0xa0>
 800b3e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3e8:	6822      	ldr	r2, [r4, #0]
 800b3ea:	3b00      	subs	r3, #0
 800b3ec:	bf18      	it	ne
 800b3ee:	2301      	movne	r3, #1
 800b3f0:	0692      	lsls	r2, r2, #26
 800b3f2:	d430      	bmi.n	800b456 <_printf_common+0xba>
 800b3f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3f8:	4641      	mov	r1, r8
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	47c8      	blx	r9
 800b3fe:	3001      	adds	r0, #1
 800b400:	d023      	beq.n	800b44a <_printf_common+0xae>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	341a      	adds	r4, #26
 800b406:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b40a:	f003 0306 	and.w	r3, r3, #6
 800b40e:	2b04      	cmp	r3, #4
 800b410:	bf0a      	itet	eq
 800b412:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b416:	2500      	movne	r5, #0
 800b418:	6833      	ldreq	r3, [r6, #0]
 800b41a:	f04f 0600 	mov.w	r6, #0
 800b41e:	bf08      	it	eq
 800b420:	1aed      	subeq	r5, r5, r3
 800b422:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b426:	bf08      	it	eq
 800b428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b42c:	4293      	cmp	r3, r2
 800b42e:	bfc4      	itt	gt
 800b430:	1a9b      	subgt	r3, r3, r2
 800b432:	18ed      	addgt	r5, r5, r3
 800b434:	42b5      	cmp	r5, r6
 800b436:	d11a      	bne.n	800b46e <_printf_common+0xd2>
 800b438:	2000      	movs	r0, #0
 800b43a:	e008      	b.n	800b44e <_printf_common+0xb2>
 800b43c:	2301      	movs	r3, #1
 800b43e:	4652      	mov	r2, sl
 800b440:	4641      	mov	r1, r8
 800b442:	4638      	mov	r0, r7
 800b444:	47c8      	blx	r9
 800b446:	3001      	adds	r0, #1
 800b448:	d103      	bne.n	800b452 <_printf_common+0xb6>
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295
 800b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b452:	3501      	adds	r5, #1
 800b454:	e7c1      	b.n	800b3da <_printf_common+0x3e>
 800b456:	18e1      	adds	r1, r4, r3
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	2030      	movs	r0, #48	@ 0x30
 800b45c:	3302      	adds	r3, #2
 800b45e:	4422      	add	r2, r4
 800b460:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b46c:	e7c2      	b.n	800b3f4 <_printf_common+0x58>
 800b46e:	2301      	movs	r3, #1
 800b470:	4622      	mov	r2, r4
 800b472:	4641      	mov	r1, r8
 800b474:	4638      	mov	r0, r7
 800b476:	47c8      	blx	r9
 800b478:	3001      	adds	r0, #1
 800b47a:	d0e6      	beq.n	800b44a <_printf_common+0xae>
 800b47c:	3601      	adds	r6, #1
 800b47e:	e7d9      	b.n	800b434 <_printf_common+0x98>

0800b480 <_printf_i>:
 800b480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	7e0f      	ldrb	r7, [r1, #24]
 800b486:	4691      	mov	r9, r2
 800b488:	4680      	mov	r8, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	2f78      	cmp	r7, #120	@ 0x78
 800b48e:	469a      	mov	sl, r3
 800b490:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b492:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b496:	d807      	bhi.n	800b4a8 <_printf_i+0x28>
 800b498:	2f62      	cmp	r7, #98	@ 0x62
 800b49a:	d80a      	bhi.n	800b4b2 <_printf_i+0x32>
 800b49c:	2f00      	cmp	r7, #0
 800b49e:	f000 80d2 	beq.w	800b646 <_printf_i+0x1c6>
 800b4a2:	2f58      	cmp	r7, #88	@ 0x58
 800b4a4:	f000 80b9 	beq.w	800b61a <_printf_i+0x19a>
 800b4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b4b0:	e03a      	b.n	800b528 <_printf_i+0xa8>
 800b4b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b4b6:	2b15      	cmp	r3, #21
 800b4b8:	d8f6      	bhi.n	800b4a8 <_printf_i+0x28>
 800b4ba:	a101      	add	r1, pc, #4	@ (adr r1, 800b4c0 <_printf_i+0x40>)
 800b4bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4c0:	0800b519 	.word	0x0800b519
 800b4c4:	0800b52d 	.word	0x0800b52d
 800b4c8:	0800b4a9 	.word	0x0800b4a9
 800b4cc:	0800b4a9 	.word	0x0800b4a9
 800b4d0:	0800b4a9 	.word	0x0800b4a9
 800b4d4:	0800b4a9 	.word	0x0800b4a9
 800b4d8:	0800b52d 	.word	0x0800b52d
 800b4dc:	0800b4a9 	.word	0x0800b4a9
 800b4e0:	0800b4a9 	.word	0x0800b4a9
 800b4e4:	0800b4a9 	.word	0x0800b4a9
 800b4e8:	0800b4a9 	.word	0x0800b4a9
 800b4ec:	0800b62d 	.word	0x0800b62d
 800b4f0:	0800b557 	.word	0x0800b557
 800b4f4:	0800b5e7 	.word	0x0800b5e7
 800b4f8:	0800b4a9 	.word	0x0800b4a9
 800b4fc:	0800b4a9 	.word	0x0800b4a9
 800b500:	0800b64f 	.word	0x0800b64f
 800b504:	0800b4a9 	.word	0x0800b4a9
 800b508:	0800b557 	.word	0x0800b557
 800b50c:	0800b4a9 	.word	0x0800b4a9
 800b510:	0800b4a9 	.word	0x0800b4a9
 800b514:	0800b5ef 	.word	0x0800b5ef
 800b518:	6833      	ldr	r3, [r6, #0]
 800b51a:	1d1a      	adds	r2, r3, #4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6032      	str	r2, [r6, #0]
 800b520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b524:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b528:	2301      	movs	r3, #1
 800b52a:	e09d      	b.n	800b668 <_printf_i+0x1e8>
 800b52c:	6833      	ldr	r3, [r6, #0]
 800b52e:	6820      	ldr	r0, [r4, #0]
 800b530:	1d19      	adds	r1, r3, #4
 800b532:	6031      	str	r1, [r6, #0]
 800b534:	0606      	lsls	r6, r0, #24
 800b536:	d501      	bpl.n	800b53c <_printf_i+0xbc>
 800b538:	681d      	ldr	r5, [r3, #0]
 800b53a:	e003      	b.n	800b544 <_printf_i+0xc4>
 800b53c:	0645      	lsls	r5, r0, #25
 800b53e:	d5fb      	bpl.n	800b538 <_printf_i+0xb8>
 800b540:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b544:	2d00      	cmp	r5, #0
 800b546:	da03      	bge.n	800b550 <_printf_i+0xd0>
 800b548:	232d      	movs	r3, #45	@ 0x2d
 800b54a:	426d      	negs	r5, r5
 800b54c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b550:	4859      	ldr	r0, [pc, #356]	@ (800b6b8 <_printf_i+0x238>)
 800b552:	230a      	movs	r3, #10
 800b554:	e011      	b.n	800b57a <_printf_i+0xfa>
 800b556:	6821      	ldr	r1, [r4, #0]
 800b558:	6833      	ldr	r3, [r6, #0]
 800b55a:	0608      	lsls	r0, r1, #24
 800b55c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b560:	d402      	bmi.n	800b568 <_printf_i+0xe8>
 800b562:	0649      	lsls	r1, r1, #25
 800b564:	bf48      	it	mi
 800b566:	b2ad      	uxthmi	r5, r5
 800b568:	2f6f      	cmp	r7, #111	@ 0x6f
 800b56a:	6033      	str	r3, [r6, #0]
 800b56c:	4852      	ldr	r0, [pc, #328]	@ (800b6b8 <_printf_i+0x238>)
 800b56e:	bf14      	ite	ne
 800b570:	230a      	movne	r3, #10
 800b572:	2308      	moveq	r3, #8
 800b574:	2100      	movs	r1, #0
 800b576:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b57a:	6866      	ldr	r6, [r4, #4]
 800b57c:	2e00      	cmp	r6, #0
 800b57e:	60a6      	str	r6, [r4, #8]
 800b580:	bfa2      	ittt	ge
 800b582:	6821      	ldrge	r1, [r4, #0]
 800b584:	f021 0104 	bicge.w	r1, r1, #4
 800b588:	6021      	strge	r1, [r4, #0]
 800b58a:	b90d      	cbnz	r5, 800b590 <_printf_i+0x110>
 800b58c:	2e00      	cmp	r6, #0
 800b58e:	d04b      	beq.n	800b628 <_printf_i+0x1a8>
 800b590:	4616      	mov	r6, r2
 800b592:	fbb5 f1f3 	udiv	r1, r5, r3
 800b596:	fb03 5711 	mls	r7, r3, r1, r5
 800b59a:	5dc7      	ldrb	r7, [r0, r7]
 800b59c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5a0:	462f      	mov	r7, r5
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	42bb      	cmp	r3, r7
 800b5a6:	d9f4      	bls.n	800b592 <_printf_i+0x112>
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d10b      	bne.n	800b5c4 <_printf_i+0x144>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	07df      	lsls	r7, r3, #31
 800b5b0:	d508      	bpl.n	800b5c4 <_printf_i+0x144>
 800b5b2:	6923      	ldr	r3, [r4, #16]
 800b5b4:	6861      	ldr	r1, [r4, #4]
 800b5b6:	4299      	cmp	r1, r3
 800b5b8:	bfde      	ittt	le
 800b5ba:	2330      	movle	r3, #48	@ 0x30
 800b5bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5c4:	1b92      	subs	r2, r2, r6
 800b5c6:	6122      	str	r2, [r4, #16]
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	aa03      	add	r2, sp, #12
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	f8cd a000 	str.w	sl, [sp]
 800b5d4:	f7ff fee2 	bl	800b39c <_printf_common>
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d14a      	bne.n	800b672 <_printf_i+0x1f2>
 800b5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e0:	b004      	add	sp, #16
 800b5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	f043 0320 	orr.w	r3, r3, #32
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	2778      	movs	r7, #120	@ 0x78
 800b5f0:	4832      	ldr	r0, [pc, #200]	@ (800b6bc <_printf_i+0x23c>)
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5f8:	061f      	lsls	r7, r3, #24
 800b5fa:	6831      	ldr	r1, [r6, #0]
 800b5fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b600:	d402      	bmi.n	800b608 <_printf_i+0x188>
 800b602:	065f      	lsls	r7, r3, #25
 800b604:	bf48      	it	mi
 800b606:	b2ad      	uxthmi	r5, r5
 800b608:	6031      	str	r1, [r6, #0]
 800b60a:	07d9      	lsls	r1, r3, #31
 800b60c:	bf44      	itt	mi
 800b60e:	f043 0320 	orrmi.w	r3, r3, #32
 800b612:	6023      	strmi	r3, [r4, #0]
 800b614:	b11d      	cbz	r5, 800b61e <_printf_i+0x19e>
 800b616:	2310      	movs	r3, #16
 800b618:	e7ac      	b.n	800b574 <_printf_i+0xf4>
 800b61a:	4827      	ldr	r0, [pc, #156]	@ (800b6b8 <_printf_i+0x238>)
 800b61c:	e7e9      	b.n	800b5f2 <_printf_i+0x172>
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	f023 0320 	bic.w	r3, r3, #32
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	e7f6      	b.n	800b616 <_printf_i+0x196>
 800b628:	4616      	mov	r6, r2
 800b62a:	e7bd      	b.n	800b5a8 <_printf_i+0x128>
 800b62c:	6833      	ldr	r3, [r6, #0]
 800b62e:	6825      	ldr	r5, [r4, #0]
 800b630:	1d18      	adds	r0, r3, #4
 800b632:	6961      	ldr	r1, [r4, #20]
 800b634:	6030      	str	r0, [r6, #0]
 800b636:	062e      	lsls	r6, r5, #24
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	d501      	bpl.n	800b640 <_printf_i+0x1c0>
 800b63c:	6019      	str	r1, [r3, #0]
 800b63e:	e002      	b.n	800b646 <_printf_i+0x1c6>
 800b640:	0668      	lsls	r0, r5, #25
 800b642:	d5fb      	bpl.n	800b63c <_printf_i+0x1bc>
 800b644:	8019      	strh	r1, [r3, #0]
 800b646:	2300      	movs	r3, #0
 800b648:	4616      	mov	r6, r2
 800b64a:	6123      	str	r3, [r4, #16]
 800b64c:	e7bc      	b.n	800b5c8 <_printf_i+0x148>
 800b64e:	6833      	ldr	r3, [r6, #0]
 800b650:	2100      	movs	r1, #0
 800b652:	1d1a      	adds	r2, r3, #4
 800b654:	6032      	str	r2, [r6, #0]
 800b656:	681e      	ldr	r6, [r3, #0]
 800b658:	6862      	ldr	r2, [r4, #4]
 800b65a:	4630      	mov	r0, r6
 800b65c:	f000 fbe7 	bl	800be2e <memchr>
 800b660:	b108      	cbz	r0, 800b666 <_printf_i+0x1e6>
 800b662:	1b80      	subs	r0, r0, r6
 800b664:	6060      	str	r0, [r4, #4]
 800b666:	6863      	ldr	r3, [r4, #4]
 800b668:	6123      	str	r3, [r4, #16]
 800b66a:	2300      	movs	r3, #0
 800b66c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b670:	e7aa      	b.n	800b5c8 <_printf_i+0x148>
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	4632      	mov	r2, r6
 800b676:	4649      	mov	r1, r9
 800b678:	4640      	mov	r0, r8
 800b67a:	47d0      	blx	sl
 800b67c:	3001      	adds	r0, #1
 800b67e:	d0ad      	beq.n	800b5dc <_printf_i+0x15c>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	079b      	lsls	r3, r3, #30
 800b684:	d413      	bmi.n	800b6ae <_printf_i+0x22e>
 800b686:	68e0      	ldr	r0, [r4, #12]
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	4298      	cmp	r0, r3
 800b68c:	bfb8      	it	lt
 800b68e:	4618      	movlt	r0, r3
 800b690:	e7a6      	b.n	800b5e0 <_printf_i+0x160>
 800b692:	2301      	movs	r3, #1
 800b694:	4632      	mov	r2, r6
 800b696:	4649      	mov	r1, r9
 800b698:	4640      	mov	r0, r8
 800b69a:	47d0      	blx	sl
 800b69c:	3001      	adds	r0, #1
 800b69e:	d09d      	beq.n	800b5dc <_printf_i+0x15c>
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	68e3      	ldr	r3, [r4, #12]
 800b6a4:	9903      	ldr	r1, [sp, #12]
 800b6a6:	1a5b      	subs	r3, r3, r1
 800b6a8:	42ab      	cmp	r3, r5
 800b6aa:	dcf2      	bgt.n	800b692 <_printf_i+0x212>
 800b6ac:	e7eb      	b.n	800b686 <_printf_i+0x206>
 800b6ae:	2500      	movs	r5, #0
 800b6b0:	f104 0619 	add.w	r6, r4, #25
 800b6b4:	e7f5      	b.n	800b6a2 <_printf_i+0x222>
 800b6b6:	bf00      	nop
 800b6b8:	0800f666 	.word	0x0800f666
 800b6bc:	0800f677 	.word	0x0800f677

0800b6c0 <_scanf_float>:
 800b6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	b087      	sub	sp, #28
 800b6c6:	4617      	mov	r7, r2
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	9303      	str	r3, [sp, #12]
 800b6ce:	688b      	ldr	r3, [r1, #8]
 800b6d0:	1e5a      	subs	r2, r3, #1
 800b6d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b6d6:	460a      	mov	r2, r1
 800b6d8:	bf89      	itett	hi
 800b6da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b6de:	f04f 0b00 	movls.w	fp, #0
 800b6e2:	eb03 0b05 	addhi.w	fp, r3, r5
 800b6e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b6ea:	f04f 0500 	mov.w	r5, #0
 800b6ee:	bf88      	it	hi
 800b6f0:	608b      	strhi	r3, [r1, #8]
 800b6f2:	680b      	ldr	r3, [r1, #0]
 800b6f4:	46aa      	mov	sl, r5
 800b6f6:	46a9      	mov	r9, r5
 800b6f8:	9502      	str	r5, [sp, #8]
 800b6fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b6fe:	f842 3b1c 	str.w	r3, [r2], #28
 800b702:	4616      	mov	r6, r2
 800b704:	9201      	str	r2, [sp, #4]
 800b706:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b70a:	68a2      	ldr	r2, [r4, #8]
 800b70c:	b152      	cbz	r2, 800b724 <_scanf_float+0x64>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b4e      	cmp	r3, #78	@ 0x4e
 800b714:	d864      	bhi.n	800b7e0 <_scanf_float+0x120>
 800b716:	2b40      	cmp	r3, #64	@ 0x40
 800b718:	d83c      	bhi.n	800b794 <_scanf_float+0xd4>
 800b71a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b71e:	b2c8      	uxtb	r0, r1
 800b720:	280e      	cmp	r0, #14
 800b722:	d93a      	bls.n	800b79a <_scanf_float+0xda>
 800b724:	f1b9 0f00 	cmp.w	r9, #0
 800b728:	d003      	beq.n	800b732 <_scanf_float+0x72>
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b736:	f1ba 0f01 	cmp.w	sl, #1
 800b73a:	f200 8117 	bhi.w	800b96c <_scanf_float+0x2ac>
 800b73e:	9b01      	ldr	r3, [sp, #4]
 800b740:	429e      	cmp	r6, r3
 800b742:	f200 8108 	bhi.w	800b956 <_scanf_float+0x296>
 800b746:	2001      	movs	r0, #1
 800b748:	b007      	add	sp, #28
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b752:	2a0d      	cmp	r2, #13
 800b754:	d8e6      	bhi.n	800b724 <_scanf_float+0x64>
 800b756:	a101      	add	r1, pc, #4	@ (adr r1, 800b75c <_scanf_float+0x9c>)
 800b758:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b75c:	0800b8a3 	.word	0x0800b8a3
 800b760:	0800b725 	.word	0x0800b725
 800b764:	0800b725 	.word	0x0800b725
 800b768:	0800b725 	.word	0x0800b725
 800b76c:	0800b903 	.word	0x0800b903
 800b770:	0800b8db 	.word	0x0800b8db
 800b774:	0800b725 	.word	0x0800b725
 800b778:	0800b725 	.word	0x0800b725
 800b77c:	0800b8b1 	.word	0x0800b8b1
 800b780:	0800b725 	.word	0x0800b725
 800b784:	0800b725 	.word	0x0800b725
 800b788:	0800b725 	.word	0x0800b725
 800b78c:	0800b725 	.word	0x0800b725
 800b790:	0800b869 	.word	0x0800b869
 800b794:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b798:	e7db      	b.n	800b752 <_scanf_float+0x92>
 800b79a:	290e      	cmp	r1, #14
 800b79c:	d8c2      	bhi.n	800b724 <_scanf_float+0x64>
 800b79e:	a001      	add	r0, pc, #4	@ (adr r0, 800b7a4 <_scanf_float+0xe4>)
 800b7a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b7a4:	0800b859 	.word	0x0800b859
 800b7a8:	0800b725 	.word	0x0800b725
 800b7ac:	0800b859 	.word	0x0800b859
 800b7b0:	0800b8ef 	.word	0x0800b8ef
 800b7b4:	0800b725 	.word	0x0800b725
 800b7b8:	0800b801 	.word	0x0800b801
 800b7bc:	0800b83f 	.word	0x0800b83f
 800b7c0:	0800b83f 	.word	0x0800b83f
 800b7c4:	0800b83f 	.word	0x0800b83f
 800b7c8:	0800b83f 	.word	0x0800b83f
 800b7cc:	0800b83f 	.word	0x0800b83f
 800b7d0:	0800b83f 	.word	0x0800b83f
 800b7d4:	0800b83f 	.word	0x0800b83f
 800b7d8:	0800b83f 	.word	0x0800b83f
 800b7dc:	0800b83f 	.word	0x0800b83f
 800b7e0:	2b6e      	cmp	r3, #110	@ 0x6e
 800b7e2:	d809      	bhi.n	800b7f8 <_scanf_float+0x138>
 800b7e4:	2b60      	cmp	r3, #96	@ 0x60
 800b7e6:	d8b2      	bhi.n	800b74e <_scanf_float+0x8e>
 800b7e8:	2b54      	cmp	r3, #84	@ 0x54
 800b7ea:	d07b      	beq.n	800b8e4 <_scanf_float+0x224>
 800b7ec:	2b59      	cmp	r3, #89	@ 0x59
 800b7ee:	d199      	bne.n	800b724 <_scanf_float+0x64>
 800b7f0:	2d07      	cmp	r5, #7
 800b7f2:	d197      	bne.n	800b724 <_scanf_float+0x64>
 800b7f4:	2508      	movs	r5, #8
 800b7f6:	e02c      	b.n	800b852 <_scanf_float+0x192>
 800b7f8:	2b74      	cmp	r3, #116	@ 0x74
 800b7fa:	d073      	beq.n	800b8e4 <_scanf_float+0x224>
 800b7fc:	2b79      	cmp	r3, #121	@ 0x79
 800b7fe:	e7f6      	b.n	800b7ee <_scanf_float+0x12e>
 800b800:	6821      	ldr	r1, [r4, #0]
 800b802:	05c8      	lsls	r0, r1, #23
 800b804:	d51b      	bpl.n	800b83e <_scanf_float+0x17e>
 800b806:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b80a:	f109 0901 	add.w	r9, r9, #1
 800b80e:	6021      	str	r1, [r4, #0]
 800b810:	f1bb 0f00 	cmp.w	fp, #0
 800b814:	d003      	beq.n	800b81e <_scanf_float+0x15e>
 800b816:	3201      	adds	r2, #1
 800b818:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b81c:	60a2      	str	r2, [r4, #8]
 800b81e:	68a3      	ldr	r3, [r4, #8]
 800b820:	3b01      	subs	r3, #1
 800b822:	60a3      	str	r3, [r4, #8]
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	3301      	adds	r3, #1
 800b828:	6123      	str	r3, [r4, #16]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
 800b832:	f340 8087 	ble.w	800b944 <_scanf_float+0x284>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	3301      	adds	r3, #1
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	e765      	b.n	800b70a <_scanf_float+0x4a>
 800b83e:	eb1a 0105 	adds.w	r1, sl, r5
 800b842:	f47f af6f 	bne.w	800b724 <_scanf_float+0x64>
 800b846:	6822      	ldr	r2, [r4, #0]
 800b848:	460d      	mov	r5, r1
 800b84a:	468a      	mov	sl, r1
 800b84c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b850:	6022      	str	r2, [r4, #0]
 800b852:	f806 3b01 	strb.w	r3, [r6], #1
 800b856:	e7e2      	b.n	800b81e <_scanf_float+0x15e>
 800b858:	6822      	ldr	r2, [r4, #0]
 800b85a:	0610      	lsls	r0, r2, #24
 800b85c:	f57f af62 	bpl.w	800b724 <_scanf_float+0x64>
 800b860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b864:	6022      	str	r2, [r4, #0]
 800b866:	e7f4      	b.n	800b852 <_scanf_float+0x192>
 800b868:	f1ba 0f00 	cmp.w	sl, #0
 800b86c:	d10e      	bne.n	800b88c <_scanf_float+0x1cc>
 800b86e:	f1b9 0f00 	cmp.w	r9, #0
 800b872:	d10e      	bne.n	800b892 <_scanf_float+0x1d2>
 800b874:	6822      	ldr	r2, [r4, #0]
 800b876:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b87a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b87e:	d108      	bne.n	800b892 <_scanf_float+0x1d2>
 800b880:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b884:	f04f 0a01 	mov.w	sl, #1
 800b888:	6022      	str	r2, [r4, #0]
 800b88a:	e7e2      	b.n	800b852 <_scanf_float+0x192>
 800b88c:	f1ba 0f02 	cmp.w	sl, #2
 800b890:	d055      	beq.n	800b93e <_scanf_float+0x27e>
 800b892:	2d01      	cmp	r5, #1
 800b894:	d002      	beq.n	800b89c <_scanf_float+0x1dc>
 800b896:	2d04      	cmp	r5, #4
 800b898:	f47f af44 	bne.w	800b724 <_scanf_float+0x64>
 800b89c:	3501      	adds	r5, #1
 800b89e:	b2ed      	uxtb	r5, r5
 800b8a0:	e7d7      	b.n	800b852 <_scanf_float+0x192>
 800b8a2:	f1ba 0f01 	cmp.w	sl, #1
 800b8a6:	f47f af3d 	bne.w	800b724 <_scanf_float+0x64>
 800b8aa:	f04f 0a02 	mov.w	sl, #2
 800b8ae:	e7d0      	b.n	800b852 <_scanf_float+0x192>
 800b8b0:	b97d      	cbnz	r5, 800b8d2 <_scanf_float+0x212>
 800b8b2:	f1b9 0f00 	cmp.w	r9, #0
 800b8b6:	f47f af38 	bne.w	800b72a <_scanf_float+0x6a>
 800b8ba:	6822      	ldr	r2, [r4, #0]
 800b8bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b8c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b8c4:	f040 8107 	bne.w	800bad6 <_scanf_float+0x416>
 800b8c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b8cc:	2501      	movs	r5, #1
 800b8ce:	6022      	str	r2, [r4, #0]
 800b8d0:	e7bf      	b.n	800b852 <_scanf_float+0x192>
 800b8d2:	2d03      	cmp	r5, #3
 800b8d4:	d0e2      	beq.n	800b89c <_scanf_float+0x1dc>
 800b8d6:	2d05      	cmp	r5, #5
 800b8d8:	e7de      	b.n	800b898 <_scanf_float+0x1d8>
 800b8da:	2d02      	cmp	r5, #2
 800b8dc:	f47f af22 	bne.w	800b724 <_scanf_float+0x64>
 800b8e0:	2503      	movs	r5, #3
 800b8e2:	e7b6      	b.n	800b852 <_scanf_float+0x192>
 800b8e4:	2d06      	cmp	r5, #6
 800b8e6:	f47f af1d 	bne.w	800b724 <_scanf_float+0x64>
 800b8ea:	2507      	movs	r5, #7
 800b8ec:	e7b1      	b.n	800b852 <_scanf_float+0x192>
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	0591      	lsls	r1, r2, #22
 800b8f2:	f57f af17 	bpl.w	800b724 <_scanf_float+0x64>
 800b8f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b8fa:	f8cd 9008 	str.w	r9, [sp, #8]
 800b8fe:	6022      	str	r2, [r4, #0]
 800b900:	e7a7      	b.n	800b852 <_scanf_float+0x192>
 800b902:	6822      	ldr	r2, [r4, #0]
 800b904:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b908:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b90c:	d006      	beq.n	800b91c <_scanf_float+0x25c>
 800b90e:	0550      	lsls	r0, r2, #21
 800b910:	f57f af08 	bpl.w	800b724 <_scanf_float+0x64>
 800b914:	f1b9 0f00 	cmp.w	r9, #0
 800b918:	f000 80dd 	beq.w	800bad6 <_scanf_float+0x416>
 800b91c:	0591      	lsls	r1, r2, #22
 800b91e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b922:	bf58      	it	pl
 800b924:	9902      	ldrpl	r1, [sp, #8]
 800b926:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b92a:	bf58      	it	pl
 800b92c:	eba9 0101 	subpl.w	r1, r9, r1
 800b930:	6022      	str	r2, [r4, #0]
 800b932:	f04f 0900 	mov.w	r9, #0
 800b936:	bf58      	it	pl
 800b938:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b93c:	e789      	b.n	800b852 <_scanf_float+0x192>
 800b93e:	f04f 0a03 	mov.w	sl, #3
 800b942:	e786      	b.n	800b852 <_scanf_float+0x192>
 800b944:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b948:	4639      	mov	r1, r7
 800b94a:	4640      	mov	r0, r8
 800b94c:	4798      	blx	r3
 800b94e:	2800      	cmp	r0, #0
 800b950:	f43f aedb 	beq.w	800b70a <_scanf_float+0x4a>
 800b954:	e6e6      	b.n	800b724 <_scanf_float+0x64>
 800b956:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b95a:	463a      	mov	r2, r7
 800b95c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b960:	4640      	mov	r0, r8
 800b962:	4798      	blx	r3
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	3b01      	subs	r3, #1
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	e6e8      	b.n	800b73e <_scanf_float+0x7e>
 800b96c:	1e6b      	subs	r3, r5, #1
 800b96e:	2b06      	cmp	r3, #6
 800b970:	d824      	bhi.n	800b9bc <_scanf_float+0x2fc>
 800b972:	2d02      	cmp	r5, #2
 800b974:	d836      	bhi.n	800b9e4 <_scanf_float+0x324>
 800b976:	9b01      	ldr	r3, [sp, #4]
 800b978:	429e      	cmp	r6, r3
 800b97a:	f67f aee4 	bls.w	800b746 <_scanf_float+0x86>
 800b97e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b982:	463a      	mov	r2, r7
 800b984:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b988:	4640      	mov	r0, r8
 800b98a:	4798      	blx	r3
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	3b01      	subs	r3, #1
 800b990:	6123      	str	r3, [r4, #16]
 800b992:	e7f0      	b.n	800b976 <_scanf_float+0x2b6>
 800b994:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b998:	463a      	mov	r2, r7
 800b99a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b99e:	4640      	mov	r0, r8
 800b9a0:	4798      	blx	r3
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9ac:	fa5f fa8a 	uxtb.w	sl, sl
 800b9b0:	f1ba 0f02 	cmp.w	sl, #2
 800b9b4:	d1ee      	bne.n	800b994 <_scanf_float+0x2d4>
 800b9b6:	3d03      	subs	r5, #3
 800b9b8:	b2ed      	uxtb	r5, r5
 800b9ba:	1b76      	subs	r6, r6, r5
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	05da      	lsls	r2, r3, #23
 800b9c0:	d52f      	bpl.n	800ba22 <_scanf_float+0x362>
 800b9c2:	055b      	lsls	r3, r3, #21
 800b9c4:	d511      	bpl.n	800b9ea <_scanf_float+0x32a>
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	429e      	cmp	r6, r3
 800b9ca:	f67f aebc 	bls.w	800b746 <_scanf_float+0x86>
 800b9ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b9d2:	463a      	mov	r2, r7
 800b9d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4798      	blx	r3
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	6123      	str	r3, [r4, #16]
 800b9e2:	e7f0      	b.n	800b9c6 <_scanf_float+0x306>
 800b9e4:	46aa      	mov	sl, r5
 800b9e6:	46b3      	mov	fp, r6
 800b9e8:	e7de      	b.n	800b9a8 <_scanf_float+0x2e8>
 800b9ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b9ee:	1e75      	subs	r5, r6, #1
 800b9f0:	6923      	ldr	r3, [r4, #16]
 800b9f2:	2965      	cmp	r1, #101	@ 0x65
 800b9f4:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9f8:	6123      	str	r3, [r4, #16]
 800b9fa:	d00c      	beq.n	800ba16 <_scanf_float+0x356>
 800b9fc:	2945      	cmp	r1, #69	@ 0x45
 800b9fe:	d00a      	beq.n	800ba16 <_scanf_float+0x356>
 800ba00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba04:	463a      	mov	r2, r7
 800ba06:	4640      	mov	r0, r8
 800ba08:	1eb5      	subs	r5, r6, #2
 800ba0a:	4798      	blx	r3
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	462e      	mov	r6, r5
 800ba18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ba1c:	463a      	mov	r2, r7
 800ba1e:	4640      	mov	r0, r8
 800ba20:	4798      	blx	r3
 800ba22:	6822      	ldr	r2, [r4, #0]
 800ba24:	f012 0210 	ands.w	r2, r2, #16
 800ba28:	d001      	beq.n	800ba2e <_scanf_float+0x36e>
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	e68c      	b.n	800b748 <_scanf_float+0x88>
 800ba2e:	7032      	strb	r2, [r6, #0]
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ba36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba3a:	d11c      	bne.n	800ba76 <_scanf_float+0x3b6>
 800ba3c:	9b02      	ldr	r3, [sp, #8]
 800ba3e:	454b      	cmp	r3, r9
 800ba40:	eba3 0209 	sub.w	r2, r3, r9
 800ba44:	d123      	bne.n	800ba8e <_scanf_float+0x3ce>
 800ba46:	2200      	movs	r2, #0
 800ba48:	9901      	ldr	r1, [sp, #4]
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	f002 fc18 	bl	800e280 <_strtod_r>
 800ba50:	6821      	ldr	r1, [r4, #0]
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	f011 0f02 	tst.w	r1, #2
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	ec57 6b10 	vmov	r6, r7, d0
 800ba5e:	f103 0204 	add.w	r2, r3, #4
 800ba62:	d01f      	beq.n	800baa4 <_scanf_float+0x3e4>
 800ba64:	9903      	ldr	r1, [sp, #12]
 800ba66:	600a      	str	r2, [r1, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	e9c3 6700 	strd	r6, r7, [r3]
 800ba6e:	68e3      	ldr	r3, [r4, #12]
 800ba70:	3301      	adds	r3, #1
 800ba72:	60e3      	str	r3, [r4, #12]
 800ba74:	e7d9      	b.n	800ba2a <_scanf_float+0x36a>
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d0e4      	beq.n	800ba46 <_scanf_float+0x386>
 800ba7c:	9905      	ldr	r1, [sp, #20]
 800ba7e:	230a      	movs	r3, #10
 800ba80:	4640      	mov	r0, r8
 800ba82:	3101      	adds	r1, #1
 800ba84:	f002 fc7c 	bl	800e380 <_strtol_r>
 800ba88:	9b04      	ldr	r3, [sp, #16]
 800ba8a:	9e05      	ldr	r6, [sp, #20]
 800ba8c:	1ac2      	subs	r2, r0, r3
 800ba8e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ba92:	4912      	ldr	r1, [pc, #72]	@ (800badc <_scanf_float+0x41c>)
 800ba94:	429e      	cmp	r6, r3
 800ba96:	bf28      	it	cs
 800ba98:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f000 f8e3 	bl	800bc68 <siprintf>
 800baa2:	e7d0      	b.n	800ba46 <_scanf_float+0x386>
 800baa4:	f011 0f04 	tst.w	r1, #4
 800baa8:	9903      	ldr	r1, [sp, #12]
 800baaa:	600a      	str	r2, [r1, #0]
 800baac:	d1dc      	bne.n	800ba68 <_scanf_float+0x3a8>
 800baae:	681d      	ldr	r5, [r3, #0]
 800bab0:	4632      	mov	r2, r6
 800bab2:	463b      	mov	r3, r7
 800bab4:	4630      	mov	r0, r6
 800bab6:	4639      	mov	r1, r7
 800bab8:	f7f5 f83c 	bl	8000b34 <__aeabi_dcmpun>
 800babc:	b128      	cbz	r0, 800baca <_scanf_float+0x40a>
 800babe:	4808      	ldr	r0, [pc, #32]	@ (800bae0 <_scanf_float+0x420>)
 800bac0:	f000 f9c4 	bl	800be4c <nanf>
 800bac4:	ed85 0a00 	vstr	s0, [r5]
 800bac8:	e7d1      	b.n	800ba6e <_scanf_float+0x3ae>
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f5 f88f 	bl	8000bf0 <__aeabi_d2f>
 800bad2:	6028      	str	r0, [r5, #0]
 800bad4:	e7cb      	b.n	800ba6e <_scanf_float+0x3ae>
 800bad6:	f04f 0900 	mov.w	r9, #0
 800bada:	e62a      	b.n	800b732 <_scanf_float+0x72>
 800badc:	0800f688 	.word	0x0800f688
 800bae0:	0800fa1d 	.word	0x0800fa1d

0800bae4 <std>:
 800bae4:	2300      	movs	r3, #0
 800bae6:	b510      	push	{r4, lr}
 800bae8:	4604      	mov	r4, r0
 800baea:	6083      	str	r3, [r0, #8]
 800baec:	8181      	strh	r1, [r0, #12]
 800baee:	4619      	mov	r1, r3
 800baf0:	6643      	str	r3, [r0, #100]	@ 0x64
 800baf2:	81c2      	strh	r2, [r0, #14]
 800baf4:	2208      	movs	r2, #8
 800baf6:	6183      	str	r3, [r0, #24]
 800baf8:	e9c0 3300 	strd	r3, r3, [r0]
 800bafc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb00:	305c      	adds	r0, #92	@ 0x5c
 800bb02:	f000 f914 	bl	800bd2e <memset>
 800bb06:	4b0d      	ldr	r3, [pc, #52]	@ (800bb3c <std+0x58>)
 800bb08:	6224      	str	r4, [r4, #32]
 800bb0a:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb0c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb40 <std+0x5c>)
 800bb0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb10:	4b0c      	ldr	r3, [pc, #48]	@ (800bb44 <std+0x60>)
 800bb12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb14:	4b0c      	ldr	r3, [pc, #48]	@ (800bb48 <std+0x64>)
 800bb16:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb18:	4b0c      	ldr	r3, [pc, #48]	@ (800bb4c <std+0x68>)
 800bb1a:	429c      	cmp	r4, r3
 800bb1c:	d006      	beq.n	800bb2c <std+0x48>
 800bb1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb22:	4294      	cmp	r4, r2
 800bb24:	d002      	beq.n	800bb2c <std+0x48>
 800bb26:	33d0      	adds	r3, #208	@ 0xd0
 800bb28:	429c      	cmp	r4, r3
 800bb2a:	d105      	bne.n	800bb38 <std+0x54>
 800bb2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb34:	f000 b978 	b.w	800be28 <__retarget_lock_init_recursive>
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	bf00      	nop
 800bb3c:	0800bca9 	.word	0x0800bca9
 800bb40:	0800bccb 	.word	0x0800bccb
 800bb44:	0800bd03 	.word	0x0800bd03
 800bb48:	0800bd27 	.word	0x0800bd27
 800bb4c:	20000900 	.word	0x20000900

0800bb50 <stdio_exit_handler>:
 800bb50:	4a02      	ldr	r2, [pc, #8]	@ (800bb5c <stdio_exit_handler+0xc>)
 800bb52:	4903      	ldr	r1, [pc, #12]	@ (800bb60 <stdio_exit_handler+0x10>)
 800bb54:	4803      	ldr	r0, [pc, #12]	@ (800bb64 <stdio_exit_handler+0x14>)
 800bb56:	f000 b869 	b.w	800bc2c <_fwalk_sglue>
 800bb5a:	bf00      	nop
 800bb5c:	20000024 	.word	0x20000024
 800bb60:	0800e73d 	.word	0x0800e73d
 800bb64:	20000034 	.word	0x20000034

0800bb68 <cleanup_stdio>:
 800bb68:	6841      	ldr	r1, [r0, #4]
 800bb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb9c <cleanup_stdio+0x34>)
 800bb6c:	4299      	cmp	r1, r3
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	4604      	mov	r4, r0
 800bb72:	d001      	beq.n	800bb78 <cleanup_stdio+0x10>
 800bb74:	f002 fde2 	bl	800e73c <_fflush_r>
 800bb78:	68a1      	ldr	r1, [r4, #8]
 800bb7a:	4b09      	ldr	r3, [pc, #36]	@ (800bba0 <cleanup_stdio+0x38>)
 800bb7c:	4299      	cmp	r1, r3
 800bb7e:	d002      	beq.n	800bb86 <cleanup_stdio+0x1e>
 800bb80:	4620      	mov	r0, r4
 800bb82:	f002 fddb 	bl	800e73c <_fflush_r>
 800bb86:	68e1      	ldr	r1, [r4, #12]
 800bb88:	4b06      	ldr	r3, [pc, #24]	@ (800bba4 <cleanup_stdio+0x3c>)
 800bb8a:	4299      	cmp	r1, r3
 800bb8c:	d004      	beq.n	800bb98 <cleanup_stdio+0x30>
 800bb8e:	4620      	mov	r0, r4
 800bb90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb94:	f002 bdd2 	b.w	800e73c <_fflush_r>
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000900 	.word	0x20000900
 800bba0:	20000968 	.word	0x20000968
 800bba4:	200009d0 	.word	0x200009d0

0800bba8 <global_stdio_init.part.0>:
 800bba8:	b510      	push	{r4, lr}
 800bbaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd8 <global_stdio_init.part.0+0x30>)
 800bbac:	2104      	movs	r1, #4
 800bbae:	4c0b      	ldr	r4, [pc, #44]	@ (800bbdc <global_stdio_init.part.0+0x34>)
 800bbb0:	4a0b      	ldr	r2, [pc, #44]	@ (800bbe0 <global_stdio_init.part.0+0x38>)
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f7ff ff94 	bl	800bae4 <std>
 800bbbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	2109      	movs	r1, #9
 800bbc4:	f7ff ff8e 	bl	800bae4 <std>
 800bbc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbcc:	2202      	movs	r2, #2
 800bbce:	2112      	movs	r1, #18
 800bbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbd4:	f7ff bf86 	b.w	800bae4 <std>
 800bbd8:	20000a38 	.word	0x20000a38
 800bbdc:	20000900 	.word	0x20000900
 800bbe0:	0800bb51 	.word	0x0800bb51

0800bbe4 <__sfp_lock_acquire>:
 800bbe4:	4801      	ldr	r0, [pc, #4]	@ (800bbec <__sfp_lock_acquire+0x8>)
 800bbe6:	f000 b920 	b.w	800be2a <__retarget_lock_acquire_recursive>
 800bbea:	bf00      	nop
 800bbec:	20000a41 	.word	0x20000a41

0800bbf0 <__sfp_lock_release>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	@ (800bbf8 <__sfp_lock_release+0x8>)
 800bbf2:	f000 b91b 	b.w	800be2c <__retarget_lock_release_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	20000a41 	.word	0x20000a41

0800bbfc <__sinit>:
 800bbfc:	b510      	push	{r4, lr}
 800bbfe:	4604      	mov	r4, r0
 800bc00:	f7ff fff0 	bl	800bbe4 <__sfp_lock_acquire>
 800bc04:	6a23      	ldr	r3, [r4, #32]
 800bc06:	b11b      	cbz	r3, 800bc10 <__sinit+0x14>
 800bc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc0c:	f7ff bff0 	b.w	800bbf0 <__sfp_lock_release>
 800bc10:	4b04      	ldr	r3, [pc, #16]	@ (800bc24 <__sinit+0x28>)
 800bc12:	6223      	str	r3, [r4, #32]
 800bc14:	4b04      	ldr	r3, [pc, #16]	@ (800bc28 <__sinit+0x2c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1f5      	bne.n	800bc08 <__sinit+0xc>
 800bc1c:	f7ff ffc4 	bl	800bba8 <global_stdio_init.part.0>
 800bc20:	e7f2      	b.n	800bc08 <__sinit+0xc>
 800bc22:	bf00      	nop
 800bc24:	0800bb69 	.word	0x0800bb69
 800bc28:	20000a38 	.word	0x20000a38

0800bc2c <_fwalk_sglue>:
 800bc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc30:	4607      	mov	r7, r0
 800bc32:	4688      	mov	r8, r1
 800bc34:	4614      	mov	r4, r2
 800bc36:	2600      	movs	r6, #0
 800bc38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc3c:	f1b9 0901 	subs.w	r9, r9, #1
 800bc40:	d505      	bpl.n	800bc4e <_fwalk_sglue+0x22>
 800bc42:	6824      	ldr	r4, [r4, #0]
 800bc44:	2c00      	cmp	r4, #0
 800bc46:	d1f7      	bne.n	800bc38 <_fwalk_sglue+0xc>
 800bc48:	4630      	mov	r0, r6
 800bc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc4e:	89ab      	ldrh	r3, [r5, #12]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d907      	bls.n	800bc64 <_fwalk_sglue+0x38>
 800bc54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	d003      	beq.n	800bc64 <_fwalk_sglue+0x38>
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	4638      	mov	r0, r7
 800bc60:	47c0      	blx	r8
 800bc62:	4306      	orrs	r6, r0
 800bc64:	3568      	adds	r5, #104	@ 0x68
 800bc66:	e7e9      	b.n	800bc3c <_fwalk_sglue+0x10>

0800bc68 <siprintf>:
 800bc68:	b40e      	push	{r1, r2, r3}
 800bc6a:	b500      	push	{lr}
 800bc6c:	b09c      	sub	sp, #112	@ 0x70
 800bc6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc72:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc74:	9002      	str	r0, [sp, #8]
 800bc76:	9006      	str	r0, [sp, #24]
 800bc78:	9107      	str	r1, [sp, #28]
 800bc7a:	9104      	str	r1, [sp, #16]
 800bc7c:	4808      	ldr	r0, [pc, #32]	@ (800bca0 <siprintf+0x38>)
 800bc7e:	4909      	ldr	r1, [pc, #36]	@ (800bca4 <siprintf+0x3c>)
 800bc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc84:	9105      	str	r1, [sp, #20]
 800bc86:	a902      	add	r1, sp, #8
 800bc88:	6800      	ldr	r0, [r0, #0]
 800bc8a:	9301      	str	r3, [sp, #4]
 800bc8c:	f002 fbd6 	bl	800e43c <_svfiprintf_r>
 800bc90:	9b02      	ldr	r3, [sp, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	b01c      	add	sp, #112	@ 0x70
 800bc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc9c:	b003      	add	sp, #12
 800bc9e:	4770      	bx	lr
 800bca0:	20000030 	.word	0x20000030
 800bca4:	ffff0208 	.word	0xffff0208

0800bca8 <__sread>:
 800bca8:	b510      	push	{r4, lr}
 800bcaa:	460c      	mov	r4, r1
 800bcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb0:	f000 f86c 	bl	800bd8c <_read_r>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	bfab      	itete	ge
 800bcb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcba:	89a3      	ldrhlt	r3, [r4, #12]
 800bcbc:	181b      	addge	r3, r3, r0
 800bcbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcc2:	bfac      	ite	ge
 800bcc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcc6:	81a3      	strhlt	r3, [r4, #12]
 800bcc8:	bd10      	pop	{r4, pc}

0800bcca <__swrite>:
 800bcca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcce:	461f      	mov	r7, r3
 800bcd0:	898b      	ldrh	r3, [r1, #12]
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	05db      	lsls	r3, r3, #23
 800bcd8:	4616      	mov	r6, r2
 800bcda:	d505      	bpl.n	800bce8 <__swrite+0x1e>
 800bcdc:	2302      	movs	r3, #2
 800bcde:	2200      	movs	r2, #0
 800bce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce4:	f000 f840 	bl	800bd68 <_lseek_r>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	4632      	mov	r2, r6
 800bcec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcf6:	81a3      	strh	r3, [r4, #12]
 800bcf8:	463b      	mov	r3, r7
 800bcfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfe:	f000 b857 	b.w	800bdb0 <_write_r>

0800bd02 <__sseek>:
 800bd02:	b510      	push	{r4, lr}
 800bd04:	460c      	mov	r4, r1
 800bd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd0a:	f000 f82d 	bl	800bd68 <_lseek_r>
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	bf15      	itete	ne
 800bd14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd1e:	81a3      	strheq	r3, [r4, #12]
 800bd20:	bf18      	it	ne
 800bd22:	81a3      	strhne	r3, [r4, #12]
 800bd24:	bd10      	pop	{r4, pc}

0800bd26 <__sclose>:
 800bd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2a:	f000 b80d 	b.w	800bd48 <_close_r>

0800bd2e <memset>:
 800bd2e:	4402      	add	r2, r0
 800bd30:	4603      	mov	r3, r0
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d100      	bne.n	800bd38 <memset+0xa>
 800bd36:	4770      	bx	lr
 800bd38:	f803 1b01 	strb.w	r1, [r3], #1
 800bd3c:	e7f9      	b.n	800bd32 <memset+0x4>
	...

0800bd40 <_localeconv_r>:
 800bd40:	4800      	ldr	r0, [pc, #0]	@ (800bd44 <_localeconv_r+0x4>)
 800bd42:	4770      	bx	lr
 800bd44:	20000170 	.word	0x20000170

0800bd48 <_close_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	4d05      	ldr	r5, [pc, #20]	@ (800bd64 <_close_r+0x1c>)
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	602b      	str	r3, [r5, #0]
 800bd54:	f7f5 feb6 	bl	8001ac4 <_close>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_close_r+0x1a>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_close_r+0x1a>
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	20000a3c 	.word	0x20000a3c

0800bd68 <_lseek_r>:
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4d06      	ldr	r5, [pc, #24]	@ (800bd88 <_lseek_r+0x20>)
 800bd6e:	4608      	mov	r0, r1
 800bd70:	4611      	mov	r1, r2
 800bd72:	2200      	movs	r2, #0
 800bd74:	602a      	str	r2, [r5, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	f7f5 fecb 	bl	8001b12 <_lseek>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_lseek_r+0x1e>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_lseek_r+0x1e>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	20000a3c 	.word	0x20000a3c

0800bd8c <_read_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4604      	mov	r4, r0
 800bd90:	4d06      	ldr	r5, [pc, #24]	@ (800bdac <_read_r+0x20>)
 800bd92:	4608      	mov	r0, r1
 800bd94:	4611      	mov	r1, r2
 800bd96:	2200      	movs	r2, #0
 800bd98:	602a      	str	r2, [r5, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	f7f5 fe75 	bl	8001a8a <_read>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_read_r+0x1e>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_read_r+0x1e>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	20000a3c 	.word	0x20000a3c

0800bdb0 <_write_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4d06      	ldr	r5, [pc, #24]	@ (800bdd0 <_write_r+0x20>)
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	4611      	mov	r1, r2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	602a      	str	r2, [r5, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f7f5 fb96 	bl	80014f0 <_write>
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	d102      	bne.n	800bdce <_write_r+0x1e>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	b103      	cbz	r3, 800bdce <_write_r+0x1e>
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	20000a3c 	.word	0x20000a3c

0800bdd4 <__errno>:
 800bdd4:	4b01      	ldr	r3, [pc, #4]	@ (800bddc <__errno+0x8>)
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	20000030 	.word	0x20000030

0800bde0 <__libc_init_array>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	4d0d      	ldr	r5, [pc, #52]	@ (800be18 <__libc_init_array+0x38>)
 800bde4:	2600      	movs	r6, #0
 800bde6:	4c0d      	ldr	r4, [pc, #52]	@ (800be1c <__libc_init_array+0x3c>)
 800bde8:	1b64      	subs	r4, r4, r5
 800bdea:	10a4      	asrs	r4, r4, #2
 800bdec:	42a6      	cmp	r6, r4
 800bdee:	d109      	bne.n	800be04 <__libc_init_array+0x24>
 800bdf0:	4d0b      	ldr	r5, [pc, #44]	@ (800be20 <__libc_init_array+0x40>)
 800bdf2:	2600      	movs	r6, #0
 800bdf4:	4c0b      	ldr	r4, [pc, #44]	@ (800be24 <__libc_init_array+0x44>)
 800bdf6:	f003 fb8d 	bl	800f514 <_init>
 800bdfa:	1b64      	subs	r4, r4, r5
 800bdfc:	10a4      	asrs	r4, r4, #2
 800bdfe:	42a6      	cmp	r6, r4
 800be00:	d105      	bne.n	800be0e <__libc_init_array+0x2e>
 800be02:	bd70      	pop	{r4, r5, r6, pc}
 800be04:	f855 3b04 	ldr.w	r3, [r5], #4
 800be08:	3601      	adds	r6, #1
 800be0a:	4798      	blx	r3
 800be0c:	e7ee      	b.n	800bdec <__libc_init_array+0xc>
 800be0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be12:	3601      	adds	r6, #1
 800be14:	4798      	blx	r3
 800be16:	e7f2      	b.n	800bdfe <__libc_init_array+0x1e>
 800be18:	0800fa88 	.word	0x0800fa88
 800be1c:	0800fa88 	.word	0x0800fa88
 800be20:	0800fa88 	.word	0x0800fa88
 800be24:	0800fa8c 	.word	0x0800fa8c

0800be28 <__retarget_lock_init_recursive>:
 800be28:	4770      	bx	lr

0800be2a <__retarget_lock_acquire_recursive>:
 800be2a:	4770      	bx	lr

0800be2c <__retarget_lock_release_recursive>:
 800be2c:	4770      	bx	lr

0800be2e <memchr>:
 800be2e:	b2c9      	uxtb	r1, r1
 800be30:	4603      	mov	r3, r0
 800be32:	4402      	add	r2, r0
 800be34:	b510      	push	{r4, lr}
 800be36:	4293      	cmp	r3, r2
 800be38:	4618      	mov	r0, r3
 800be3a:	d101      	bne.n	800be40 <memchr+0x12>
 800be3c:	2000      	movs	r0, #0
 800be3e:	e003      	b.n	800be48 <memchr+0x1a>
 800be40:	7804      	ldrb	r4, [r0, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	428c      	cmp	r4, r1
 800be46:	d1f6      	bne.n	800be36 <memchr+0x8>
 800be48:	bd10      	pop	{r4, pc}
	...

0800be4c <nanf>:
 800be4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800be54 <nanf+0x8>
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	7fc00000 	.word	0x7fc00000

0800be58 <quorem>:
 800be58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	6903      	ldr	r3, [r0, #16]
 800be5e:	4607      	mov	r7, r0
 800be60:	690c      	ldr	r4, [r1, #16]
 800be62:	42a3      	cmp	r3, r4
 800be64:	f2c0 8083 	blt.w	800bf6e <quorem+0x116>
 800be68:	3c01      	subs	r4, #1
 800be6a:	f100 0514 	add.w	r5, r0, #20
 800be6e:	f101 0814 	add.w	r8, r1, #20
 800be72:	00a3      	lsls	r3, r4, #2
 800be74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be88:	3301      	adds	r3, #1
 800be8a:	429a      	cmp	r2, r3
 800be8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800be90:	d331      	bcc.n	800bef6 <quorem+0x9e>
 800be92:	f04f 0a00 	mov.w	sl, #0
 800be96:	46c4      	mov	ip, r8
 800be98:	46ae      	mov	lr, r5
 800be9a:	46d3      	mov	fp, sl
 800be9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bea0:	b298      	uxth	r0, r3
 800bea2:	45e1      	cmp	r9, ip
 800bea4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bea8:	fb06 a000 	mla	r0, r6, r0, sl
 800beac:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800beb0:	b280      	uxth	r0, r0
 800beb2:	fb06 2303 	mla	r3, r6, r3, r2
 800beb6:	f8de 2000 	ldr.w	r2, [lr]
 800beba:	b292      	uxth	r2, r2
 800bebc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bec0:	eba2 0200 	sub.w	r2, r2, r0
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	f8de 0000 	ldr.w	r0, [lr]
 800beca:	445a      	add	r2, fp
 800becc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bed0:	b292      	uxth	r2, r2
 800bed2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bed6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800beda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bede:	f84e 2b04 	str.w	r2, [lr], #4
 800bee2:	d2db      	bcs.n	800be9c <quorem+0x44>
 800bee4:	9b00      	ldr	r3, [sp, #0]
 800bee6:	58eb      	ldr	r3, [r5, r3]
 800bee8:	b92b      	cbnz	r3, 800bef6 <quorem+0x9e>
 800beea:	9b01      	ldr	r3, [sp, #4]
 800beec:	3b04      	subs	r3, #4
 800beee:	429d      	cmp	r5, r3
 800bef0:	461a      	mov	r2, r3
 800bef2:	d330      	bcc.n	800bf56 <quorem+0xfe>
 800bef4:	613c      	str	r4, [r7, #16]
 800bef6:	4638      	mov	r0, r7
 800bef8:	f001 f9c8 	bl	800d28c <__mcmp>
 800befc:	2800      	cmp	r0, #0
 800befe:	db26      	blt.n	800bf4e <quorem+0xf6>
 800bf00:	4629      	mov	r1, r5
 800bf02:	2000      	movs	r0, #0
 800bf04:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf08:	f8d1 c000 	ldr.w	ip, [r1]
 800bf0c:	fa1f fe82 	uxth.w	lr, r2
 800bf10:	45c1      	cmp	r9, r8
 800bf12:	fa1f f38c 	uxth.w	r3, ip
 800bf16:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bf1a:	eba3 030e 	sub.w	r3, r3, lr
 800bf1e:	4403      	add	r3, r0
 800bf20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf32:	f841 3b04 	str.w	r3, [r1], #4
 800bf36:	d2e5      	bcs.n	800bf04 <quorem+0xac>
 800bf38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf40:	b922      	cbnz	r2, 800bf4c <quorem+0xf4>
 800bf42:	3b04      	subs	r3, #4
 800bf44:	429d      	cmp	r5, r3
 800bf46:	461a      	mov	r2, r3
 800bf48:	d30b      	bcc.n	800bf62 <quorem+0x10a>
 800bf4a:	613c      	str	r4, [r7, #16]
 800bf4c:	3601      	adds	r6, #1
 800bf4e:	4630      	mov	r0, r6
 800bf50:	b003      	add	sp, #12
 800bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	3b04      	subs	r3, #4
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	d1ca      	bne.n	800bef4 <quorem+0x9c>
 800bf5e:	3c01      	subs	r4, #1
 800bf60:	e7c5      	b.n	800beee <quorem+0x96>
 800bf62:	6812      	ldr	r2, [r2, #0]
 800bf64:	3b04      	subs	r3, #4
 800bf66:	2a00      	cmp	r2, #0
 800bf68:	d1ef      	bne.n	800bf4a <quorem+0xf2>
 800bf6a:	3c01      	subs	r4, #1
 800bf6c:	e7ea      	b.n	800bf44 <quorem+0xec>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	e7ee      	b.n	800bf50 <quorem+0xf8>
 800bf72:	0000      	movs	r0, r0
 800bf74:	0000      	movs	r0, r0
	...

0800bf78 <_dtoa_r>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	69c7      	ldr	r7, [r0, #28]
 800bf7e:	b099      	sub	sp, #100	@ 0x64
 800bf80:	4683      	mov	fp, r0
 800bf82:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bf84:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf86:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf8a:	ec55 4b10 	vmov	r4, r5, d0
 800bf8e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bf92:	b97f      	cbnz	r7, 800bfb4 <_dtoa_r+0x3c>
 800bf94:	2010      	movs	r0, #16
 800bf96:	f000 fdfd 	bl	800cb94 <malloc>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	f8cb 001c 	str.w	r0, [fp, #28]
 800bfa0:	b920      	cbnz	r0, 800bfac <_dtoa_r+0x34>
 800bfa2:	4ba7      	ldr	r3, [pc, #668]	@ (800c240 <_dtoa_r+0x2c8>)
 800bfa4:	21ef      	movs	r1, #239	@ 0xef
 800bfa6:	48a7      	ldr	r0, [pc, #668]	@ (800c244 <_dtoa_r+0x2cc>)
 800bfa8:	f002 fc42 	bl	800e830 <__assert_func>
 800bfac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfb0:	6007      	str	r7, [r0, #0]
 800bfb2:	60c7      	str	r7, [r0, #12]
 800bfb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfb8:	6819      	ldr	r1, [r3, #0]
 800bfba:	b159      	cbz	r1, 800bfd4 <_dtoa_r+0x5c>
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4658      	mov	r0, fp
 800bfc2:	4093      	lsls	r3, r2
 800bfc4:	604a      	str	r2, [r1, #4]
 800bfc6:	608b      	str	r3, [r1, #8]
 800bfc8:	f000 feda 	bl	800cd80 <_Bfree>
 800bfcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	1e2b      	subs	r3, r5, #0
 800bfd6:	bfb7      	itett	lt
 800bfd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bfdc:	2300      	movge	r3, #0
 800bfde:	2201      	movlt	r2, #1
 800bfe0:	9303      	strlt	r3, [sp, #12]
 800bfe2:	bfa8      	it	ge
 800bfe4:	6033      	strge	r3, [r6, #0]
 800bfe6:	9f03      	ldr	r7, [sp, #12]
 800bfe8:	4b97      	ldr	r3, [pc, #604]	@ (800c248 <_dtoa_r+0x2d0>)
 800bfea:	bfb8      	it	lt
 800bfec:	6032      	strlt	r2, [r6, #0]
 800bfee:	43bb      	bics	r3, r7
 800bff0:	d112      	bne.n	800c018 <_dtoa_r+0xa0>
 800bff2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bff6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bffe:	4323      	orrs	r3, r4
 800c000:	f000 854c 	beq.w	800ca9c <_dtoa_r+0xb24>
 800c004:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c006:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c25c <_dtoa_r+0x2e4>
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 854e 	beq.w	800caac <_dtoa_r+0xb34>
 800c010:	f10a 0303 	add.w	r3, sl, #3
 800c014:	f000 bd48 	b.w	800caa8 <_dtoa_r+0xb30>
 800c018:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c01c:	2200      	movs	r2, #0
 800c01e:	2300      	movs	r3, #0
 800c020:	ec51 0b17 	vmov	r0, r1, d7
 800c024:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c028:	f7f4 fd52 	bl	8000ad0 <__aeabi_dcmpeq>
 800c02c:	4680      	mov	r8, r0
 800c02e:	b158      	cbz	r0, 800c048 <_dtoa_r+0xd0>
 800c030:	2301      	movs	r3, #1
 800c032:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c038:	b113      	cbz	r3, 800c040 <_dtoa_r+0xc8>
 800c03a:	4b84      	ldr	r3, [pc, #528]	@ (800c24c <_dtoa_r+0x2d4>)
 800c03c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800c260 <_dtoa_r+0x2e8>
 800c044:	f000 bd32 	b.w	800caac <_dtoa_r+0xb34>
 800c048:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c04c:	aa16      	add	r2, sp, #88	@ 0x58
 800c04e:	a917      	add	r1, sp, #92	@ 0x5c
 800c050:	4658      	mov	r0, fp
 800c052:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c056:	f001 fa41 	bl	800d4dc <__d2b>
 800c05a:	4681      	mov	r9, r0
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	d075      	beq.n	800c14c <_dtoa_r+0x1d4>
 800c060:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c062:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c066:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c06a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c06e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c076:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c07a:	4619      	mov	r1, r3
 800c07c:	2200      	movs	r2, #0
 800c07e:	4b74      	ldr	r3, [pc, #464]	@ (800c250 <_dtoa_r+0x2d8>)
 800c080:	f7f4 f906 	bl	8000290 <__aeabi_dsub>
 800c084:	a368      	add	r3, pc, #416	@ (adr r3, 800c228 <_dtoa_r+0x2b0>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f7f4 fab9 	bl	8000600 <__aeabi_dmul>
 800c08e:	a368      	add	r3, pc, #416	@ (adr r3, 800c230 <_dtoa_r+0x2b8>)
 800c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c094:	f7f4 f8fe 	bl	8000294 <__adddf3>
 800c098:	4604      	mov	r4, r0
 800c09a:	460d      	mov	r5, r1
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7f4 fa45 	bl	800052c <__aeabi_i2d>
 800c0a2:	a365      	add	r3, pc, #404	@ (adr r3, 800c238 <_dtoa_r+0x2c0>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f7f4 faaa 	bl	8000600 <__aeabi_dmul>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	f7f4 f8ee 	bl	8000294 <__adddf3>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	460d      	mov	r5, r1
 800c0bc:	f7f4 fd50 	bl	8000b60 <__aeabi_d2iz>
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	4607      	mov	r7, r0
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 fd0b 	bl	8000ae4 <__aeabi_dcmplt>
 800c0ce:	b140      	cbz	r0, 800c0e2 <_dtoa_r+0x16a>
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f7f4 fa2b 	bl	800052c <__aeabi_i2d>
 800c0d6:	4622      	mov	r2, r4
 800c0d8:	462b      	mov	r3, r5
 800c0da:	f7f4 fcf9 	bl	8000ad0 <__aeabi_dcmpeq>
 800c0de:	b900      	cbnz	r0, 800c0e2 <_dtoa_r+0x16a>
 800c0e0:	3f01      	subs	r7, #1
 800c0e2:	2f16      	cmp	r7, #22
 800c0e4:	d851      	bhi.n	800c18a <_dtoa_r+0x212>
 800c0e6:	4b5b      	ldr	r3, [pc, #364]	@ (800c254 <_dtoa_r+0x2dc>)
 800c0e8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f7f4 fcf6 	bl	8000ae4 <__aeabi_dcmplt>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d048      	beq.n	800c18e <_dtoa_r+0x216>
 800c0fc:	3f01      	subs	r7, #1
 800c0fe:	2300      	movs	r3, #0
 800c100:	9312      	str	r3, [sp, #72]	@ 0x48
 800c102:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c104:	1b9b      	subs	r3, r3, r6
 800c106:	1e5a      	subs	r2, r3, #1
 800c108:	bf46      	itte	mi
 800c10a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c10e:	2300      	movmi	r3, #0
 800c110:	f04f 0800 	movpl.w	r8, #0
 800c114:	9208      	str	r2, [sp, #32]
 800c116:	bf48      	it	mi
 800c118:	9308      	strmi	r3, [sp, #32]
 800c11a:	2f00      	cmp	r7, #0
 800c11c:	db39      	blt.n	800c192 <_dtoa_r+0x21a>
 800c11e:	9b08      	ldr	r3, [sp, #32]
 800c120:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c122:	443b      	add	r3, r7
 800c124:	9308      	str	r3, [sp, #32]
 800c126:	2300      	movs	r3, #0
 800c128:	930a      	str	r3, [sp, #40]	@ 0x28
 800c12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c12c:	2b09      	cmp	r3, #9
 800c12e:	d864      	bhi.n	800c1fa <_dtoa_r+0x282>
 800c130:	2b05      	cmp	r3, #5
 800c132:	bfc5      	ittet	gt
 800c134:	3b04      	subgt	r3, #4
 800c136:	2400      	movgt	r4, #0
 800c138:	2401      	movle	r4, #1
 800c13a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c13e:	3b02      	subs	r3, #2
 800c140:	2b03      	cmp	r3, #3
 800c142:	d865      	bhi.n	800c210 <_dtoa_r+0x298>
 800c144:	e8df f003 	tbb	[pc, r3]
 800c148:	5737392c 	.word	0x5737392c
 800c14c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c150:	441e      	add	r6, r3
 800c152:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c156:	2b20      	cmp	r3, #32
 800c158:	bfc9      	itett	gt
 800c15a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c15e:	f1c3 0320 	rsble	r3, r3, #32
 800c162:	409f      	lslgt	r7, r3
 800c164:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c168:	bfd8      	it	le
 800c16a:	fa04 f003 	lslle.w	r0, r4, r3
 800c16e:	f106 36ff 	add.w	r6, r6, #4294967295
 800c172:	bfc4      	itt	gt
 800c174:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c178:	ea47 0003 	orrgt.w	r0, r7, r3
 800c17c:	f7f4 f9c6 	bl	800050c <__aeabi_ui2d>
 800c180:	2201      	movs	r2, #1
 800c182:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c186:	9214      	str	r2, [sp, #80]	@ 0x50
 800c188:	e777      	b.n	800c07a <_dtoa_r+0x102>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e7b8      	b.n	800c100 <_dtoa_r+0x188>
 800c18e:	9012      	str	r0, [sp, #72]	@ 0x48
 800c190:	e7b7      	b.n	800c102 <_dtoa_r+0x18a>
 800c192:	427b      	negs	r3, r7
 800c194:	eba8 0807 	sub.w	r8, r8, r7
 800c198:	930a      	str	r3, [sp, #40]	@ 0x28
 800c19a:	2300      	movs	r3, #0
 800c19c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c19e:	e7c4      	b.n	800c12a <_dtoa_r+0x1b2>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dc35      	bgt.n	800c216 <_dtoa_r+0x29e>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	9307      	str	r3, [sp, #28]
 800c1b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1b4:	e00b      	b.n	800c1ce <_dtoa_r+0x256>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e7f3      	b.n	800c1a2 <_dtoa_r+0x22a>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1c0:	18fb      	adds	r3, r7, r3
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	9307      	str	r3, [sp, #28]
 800c1ca:	bfb8      	it	lt
 800c1cc:	2301      	movlt	r3, #1
 800c1ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	2204      	movs	r2, #4
 800c1d6:	f102 0514 	add.w	r5, r2, #20
 800c1da:	429d      	cmp	r5, r3
 800c1dc:	d91f      	bls.n	800c21e <_dtoa_r+0x2a6>
 800c1de:	6041      	str	r1, [r0, #4]
 800c1e0:	4658      	mov	r0, fp
 800c1e2:	f000 fd8d 	bl	800cd00 <_Balloc>
 800c1e6:	4682      	mov	sl, r0
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d13b      	bne.n	800c264 <_dtoa_r+0x2ec>
 800c1ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c258 <_dtoa_r+0x2e0>)
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	f240 11af 	movw	r1, #431	@ 0x1af
 800c1f4:	e6d7      	b.n	800bfa6 <_dtoa_r+0x2e>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e7e0      	b.n	800c1bc <_dtoa_r+0x244>
 800c1fa:	2401      	movs	r4, #1
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c200:	9309      	str	r3, [sp, #36]	@ 0x24
 800c202:	f04f 33ff 	mov.w	r3, #4294967295
 800c206:	2200      	movs	r2, #0
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	9307      	str	r3, [sp, #28]
 800c20c:	2312      	movs	r3, #18
 800c20e:	e7d0      	b.n	800c1b2 <_dtoa_r+0x23a>
 800c210:	2301      	movs	r3, #1
 800c212:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c214:	e7f5      	b.n	800c202 <_dtoa_r+0x28a>
 800c216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	9307      	str	r3, [sp, #28]
 800c21c:	e7d7      	b.n	800c1ce <_dtoa_r+0x256>
 800c21e:	3101      	adds	r1, #1
 800c220:	0052      	lsls	r2, r2, #1
 800c222:	e7d8      	b.n	800c1d6 <_dtoa_r+0x25e>
 800c224:	f3af 8000 	nop.w
 800c228:	636f4361 	.word	0x636f4361
 800c22c:	3fd287a7 	.word	0x3fd287a7
 800c230:	8b60c8b3 	.word	0x8b60c8b3
 800c234:	3fc68a28 	.word	0x3fc68a28
 800c238:	509f79fb 	.word	0x509f79fb
 800c23c:	3fd34413 	.word	0x3fd34413
 800c240:	0800f69a 	.word	0x0800f69a
 800c244:	0800f6b1 	.word	0x0800f6b1
 800c248:	7ff00000 	.word	0x7ff00000
 800c24c:	0800f665 	.word	0x0800f665
 800c250:	3ff80000 	.word	0x3ff80000
 800c254:	0800f7a8 	.word	0x0800f7a8
 800c258:	0800f709 	.word	0x0800f709
 800c25c:	0800f696 	.word	0x0800f696
 800c260:	0800f664 	.word	0x0800f664
 800c264:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c268:	6018      	str	r0, [r3, #0]
 800c26a:	9b07      	ldr	r3, [sp, #28]
 800c26c:	2b0e      	cmp	r3, #14
 800c26e:	f200 80a4 	bhi.w	800c3ba <_dtoa_r+0x442>
 800c272:	2c00      	cmp	r4, #0
 800c274:	f000 80a1 	beq.w	800c3ba <_dtoa_r+0x442>
 800c278:	2f00      	cmp	r7, #0
 800c27a:	dd33      	ble.n	800c2e4 <_dtoa_r+0x36c>
 800c27c:	f007 020f 	and.w	r2, r7, #15
 800c280:	4bac      	ldr	r3, [pc, #688]	@ (800c534 <_dtoa_r+0x5bc>)
 800c282:	05f8      	lsls	r0, r7, #23
 800c284:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c28c:	ed93 7b00 	vldr	d7, [r3]
 800c290:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c294:	d516      	bpl.n	800c2c4 <_dtoa_r+0x34c>
 800c296:	4ba8      	ldr	r3, [pc, #672]	@ (800c538 <_dtoa_r+0x5c0>)
 800c298:	f004 040f 	and.w	r4, r4, #15
 800c29c:	2603      	movs	r6, #3
 800c29e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2a6:	f7f4 fad5 	bl	8000854 <__aeabi_ddiv>
 800c2aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ae:	4da2      	ldr	r5, [pc, #648]	@ (800c538 <_dtoa_r+0x5c0>)
 800c2b0:	b954      	cbnz	r4, 800c2c8 <_dtoa_r+0x350>
 800c2b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ba:	f7f4 facb 	bl	8000854 <__aeabi_ddiv>
 800c2be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2c2:	e028      	b.n	800c316 <_dtoa_r+0x39e>
 800c2c4:	2602      	movs	r6, #2
 800c2c6:	e7f2      	b.n	800c2ae <_dtoa_r+0x336>
 800c2c8:	07e1      	lsls	r1, r4, #31
 800c2ca:	d508      	bpl.n	800c2de <_dtoa_r+0x366>
 800c2cc:	3601      	adds	r6, #1
 800c2ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2d6:	f7f4 f993 	bl	8000600 <__aeabi_dmul>
 800c2da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2de:	1064      	asrs	r4, r4, #1
 800c2e0:	3508      	adds	r5, #8
 800c2e2:	e7e5      	b.n	800c2b0 <_dtoa_r+0x338>
 800c2e4:	f000 80d2 	beq.w	800c48c <_dtoa_r+0x514>
 800c2e8:	427c      	negs	r4, r7
 800c2ea:	4b92      	ldr	r3, [pc, #584]	@ (800c534 <_dtoa_r+0x5bc>)
 800c2ec:	4d92      	ldr	r5, [pc, #584]	@ (800c538 <_dtoa_r+0x5c0>)
 800c2ee:	2602      	movs	r6, #2
 800c2f0:	f004 020f 	and.w	r2, r4, #15
 800c2f4:	1124      	asrs	r4, r4, #4
 800c2f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	f7f4 f97d 	bl	8000600 <__aeabi_dmul>
 800c306:	2300      	movs	r3, #0
 800c308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c30c:	2c00      	cmp	r4, #0
 800c30e:	f040 80b2 	bne.w	800c476 <_dtoa_r+0x4fe>
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1d3      	bne.n	800c2be <_dtoa_r+0x346>
 800c316:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c318:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f000 80b7 	beq.w	800c490 <_dtoa_r+0x518>
 800c322:	2200      	movs	r2, #0
 800c324:	4b85      	ldr	r3, [pc, #532]	@ (800c53c <_dtoa_r+0x5c4>)
 800c326:	4620      	mov	r0, r4
 800c328:	4629      	mov	r1, r5
 800c32a:	f7f4 fbdb 	bl	8000ae4 <__aeabi_dcmplt>
 800c32e:	2800      	cmp	r0, #0
 800c330:	f000 80ae 	beq.w	800c490 <_dtoa_r+0x518>
 800c334:	9b07      	ldr	r3, [sp, #28]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 80aa 	beq.w	800c490 <_dtoa_r+0x518>
 800c33c:	9b00      	ldr	r3, [sp, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	dd37      	ble.n	800c3b2 <_dtoa_r+0x43a>
 800c342:	1e7b      	subs	r3, r7, #1
 800c344:	4620      	mov	r0, r4
 800c346:	2200      	movs	r2, #0
 800c348:	4629      	mov	r1, r5
 800c34a:	9304      	str	r3, [sp, #16]
 800c34c:	3601      	adds	r6, #1
 800c34e:	4b7c      	ldr	r3, [pc, #496]	@ (800c540 <_dtoa_r+0x5c8>)
 800c350:	f7f4 f956 	bl	8000600 <__aeabi_dmul>
 800c354:	9c00      	ldr	r4, [sp, #0]
 800c356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7f4 f8e6 	bl	800052c <__aeabi_i2d>
 800c360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c364:	f7f4 f94c 	bl	8000600 <__aeabi_dmul>
 800c368:	2200      	movs	r2, #0
 800c36a:	4b76      	ldr	r3, [pc, #472]	@ (800c544 <_dtoa_r+0x5cc>)
 800c36c:	f7f3 ff92 	bl	8000294 <__adddf3>
 800c370:	4605      	mov	r5, r0
 800c372:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c376:	2c00      	cmp	r4, #0
 800c378:	f040 808d 	bne.w	800c496 <_dtoa_r+0x51e>
 800c37c:	2200      	movs	r2, #0
 800c37e:	4b72      	ldr	r3, [pc, #456]	@ (800c548 <_dtoa_r+0x5d0>)
 800c380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c384:	f7f3 ff84 	bl	8000290 <__aeabi_dsub>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c390:	462a      	mov	r2, r5
 800c392:	4633      	mov	r3, r6
 800c394:	f7f4 fbc4 	bl	8000b20 <__aeabi_dcmpgt>
 800c398:	2800      	cmp	r0, #0
 800c39a:	f040 828b 	bne.w	800c8b4 <_dtoa_r+0x93c>
 800c39e:	462a      	mov	r2, r5
 800c3a0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c3a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3a8:	f7f4 fb9c 	bl	8000ae4 <__aeabi_dcmplt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 8128 	bne.w	800c602 <_dtoa_r+0x68a>
 800c3b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c3b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c3ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f2c0 815a 	blt.w	800c676 <_dtoa_r+0x6fe>
 800c3c2:	2f0e      	cmp	r7, #14
 800c3c4:	f300 8157 	bgt.w	800c676 <_dtoa_r+0x6fe>
 800c3c8:	4b5a      	ldr	r3, [pc, #360]	@ (800c534 <_dtoa_r+0x5bc>)
 800c3ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3ce:	ed93 7b00 	vldr	d7, [r3]
 800c3d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	ed8d 7b00 	vstr	d7, [sp]
 800c3da:	da03      	bge.n	800c3e4 <_dtoa_r+0x46c>
 800c3dc:	9b07      	ldr	r3, [sp, #28]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f340 8101 	ble.w	800c5e6 <_dtoa_r+0x66e>
 800c3e4:	4656      	mov	r6, sl
 800c3e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f4 fa2f 	bl	8000854 <__aeabi_ddiv>
 800c3f6:	f7f4 fbb3 	bl	8000b60 <__aeabi_d2iz>
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	f7f4 f896 	bl	800052c <__aeabi_i2d>
 800c400:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c404:	f7f4 f8fc 	bl	8000600 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	4620      	mov	r0, r4
 800c40c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c410:	460b      	mov	r3, r1
 800c412:	4629      	mov	r1, r5
 800c414:	f7f3 ff3c 	bl	8000290 <__aeabi_dsub>
 800c418:	9d07      	ldr	r5, [sp, #28]
 800c41a:	f806 4b01 	strb.w	r4, [r6], #1
 800c41e:	eba6 040a 	sub.w	r4, r6, sl
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	42a5      	cmp	r5, r4
 800c428:	f040 8117 	bne.w	800c65a <_dtoa_r+0x6e2>
 800c42c:	f7f3 ff32 	bl	8000294 <__adddf3>
 800c430:	4604      	mov	r4, r0
 800c432:	460d      	mov	r5, r1
 800c434:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c438:	f7f4 fb72 	bl	8000b20 <__aeabi_dcmpgt>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f040 80f9 	bne.w	800c634 <_dtoa_r+0x6bc>
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c44a:	f7f4 fb41 	bl	8000ad0 <__aeabi_dcmpeq>
 800c44e:	b118      	cbz	r0, 800c458 <_dtoa_r+0x4e0>
 800c450:	f018 0f01 	tst.w	r8, #1
 800c454:	f040 80ee 	bne.w	800c634 <_dtoa_r+0x6bc>
 800c458:	4649      	mov	r1, r9
 800c45a:	4658      	mov	r0, fp
 800c45c:	f000 fc90 	bl	800cd80 <_Bfree>
 800c460:	2300      	movs	r3, #0
 800c462:	3701      	adds	r7, #1
 800c464:	7033      	strb	r3, [r6, #0]
 800c466:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c468:	601f      	str	r7, [r3, #0]
 800c46a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f000 831d 	beq.w	800caac <_dtoa_r+0xb34>
 800c472:	601e      	str	r6, [r3, #0]
 800c474:	e31a      	b.n	800caac <_dtoa_r+0xb34>
 800c476:	07e2      	lsls	r2, r4, #31
 800c478:	d505      	bpl.n	800c486 <_dtoa_r+0x50e>
 800c47a:	3601      	adds	r6, #1
 800c47c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c480:	f7f4 f8be 	bl	8000600 <__aeabi_dmul>
 800c484:	2301      	movs	r3, #1
 800c486:	1064      	asrs	r4, r4, #1
 800c488:	3508      	adds	r5, #8
 800c48a:	e73f      	b.n	800c30c <_dtoa_r+0x394>
 800c48c:	2602      	movs	r6, #2
 800c48e:	e742      	b.n	800c316 <_dtoa_r+0x39e>
 800c490:	9c07      	ldr	r4, [sp, #28]
 800c492:	9704      	str	r7, [sp, #16]
 800c494:	e761      	b.n	800c35a <_dtoa_r+0x3e2>
 800c496:	4b27      	ldr	r3, [pc, #156]	@ (800c534 <_dtoa_r+0x5bc>)
 800c498:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c49a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c49e:	4454      	add	r4, sl
 800c4a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4a4:	2900      	cmp	r1, #0
 800c4a6:	d053      	beq.n	800c550 <_dtoa_r+0x5d8>
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	4928      	ldr	r1, [pc, #160]	@ (800c54c <_dtoa_r+0x5d4>)
 800c4ac:	f7f4 f9d2 	bl	8000854 <__aeabi_ddiv>
 800c4b0:	4633      	mov	r3, r6
 800c4b2:	4656      	mov	r6, sl
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	f7f3 feeb 	bl	8000290 <__aeabi_dsub>
 800c4ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c2:	f7f4 fb4d 	bl	8000b60 <__aeabi_d2iz>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	f7f4 f830 	bl	800052c <__aeabi_i2d>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	3530      	adds	r5, #48	@ 0x30
 800c4d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4d6:	f7f3 fedb 	bl	8000290 <__aeabi_dsub>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	f806 5b01 	strb.w	r5, [r6], #1
 800c4e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4ea:	f7f4 fafb 	bl	8000ae4 <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d171      	bne.n	800c5d6 <_dtoa_r+0x65e>
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	4911      	ldr	r1, [pc, #68]	@ (800c53c <_dtoa_r+0x5c4>)
 800c4f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4fa:	f7f3 fec9 	bl	8000290 <__aeabi_dsub>
 800c4fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c502:	f7f4 faef 	bl	8000ae4 <__aeabi_dcmplt>
 800c506:	2800      	cmp	r0, #0
 800c508:	f040 8095 	bne.w	800c636 <_dtoa_r+0x6be>
 800c50c:	42a6      	cmp	r6, r4
 800c50e:	f43f af50 	beq.w	800c3b2 <_dtoa_r+0x43a>
 800c512:	2200      	movs	r2, #0
 800c514:	4b0a      	ldr	r3, [pc, #40]	@ (800c540 <_dtoa_r+0x5c8>)
 800c516:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c51a:	f7f4 f871 	bl	8000600 <__aeabi_dmul>
 800c51e:	2200      	movs	r2, #0
 800c520:	4b07      	ldr	r3, [pc, #28]	@ (800c540 <_dtoa_r+0x5c8>)
 800c522:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c52a:	f7f4 f869 	bl	8000600 <__aeabi_dmul>
 800c52e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c532:	e7c4      	b.n	800c4be <_dtoa_r+0x546>
 800c534:	0800f7a8 	.word	0x0800f7a8
 800c538:	0800f780 	.word	0x0800f780
 800c53c:	3ff00000 	.word	0x3ff00000
 800c540:	40240000 	.word	0x40240000
 800c544:	401c0000 	.word	0x401c0000
 800c548:	40140000 	.word	0x40140000
 800c54c:	3fe00000 	.word	0x3fe00000
 800c550:	4631      	mov	r1, r6
 800c552:	4656      	mov	r6, sl
 800c554:	4628      	mov	r0, r5
 800c556:	f7f4 f853 	bl	8000600 <__aeabi_dmul>
 800c55a:	9415      	str	r4, [sp, #84]	@ 0x54
 800c55c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c564:	f7f4 fafc 	bl	8000b60 <__aeabi_d2iz>
 800c568:	4605      	mov	r5, r0
 800c56a:	f7f3 ffdf 	bl	800052c <__aeabi_i2d>
 800c56e:	4602      	mov	r2, r0
 800c570:	3530      	adds	r5, #48	@ 0x30
 800c572:	460b      	mov	r3, r1
 800c574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c578:	f7f3 fe8a 	bl	8000290 <__aeabi_dsub>
 800c57c:	f806 5b01 	strb.w	r5, [r6], #1
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	42a6      	cmp	r6, r4
 800c586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c58a:	f04f 0200 	mov.w	r2, #0
 800c58e:	d124      	bne.n	800c5da <_dtoa_r+0x662>
 800c590:	4bac      	ldr	r3, [pc, #688]	@ (800c844 <_dtoa_r+0x8cc>)
 800c592:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c596:	f7f3 fe7d 	bl	8000294 <__adddf3>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5a2:	f7f4 fabd 	bl	8000b20 <__aeabi_dcmpgt>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d145      	bne.n	800c636 <_dtoa_r+0x6be>
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	49a5      	ldr	r1, [pc, #660]	@ (800c844 <_dtoa_r+0x8cc>)
 800c5ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5b2:	f7f3 fe6d 	bl	8000290 <__aeabi_dsub>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5be:	f7f4 fa91 	bl	8000ae4 <__aeabi_dcmplt>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	f43f aef5 	beq.w	800c3b2 <_dtoa_r+0x43a>
 800c5c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c5ca:	1e73      	subs	r3, r6, #1
 800c5cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c5ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5d2:	2b30      	cmp	r3, #48	@ 0x30
 800c5d4:	d0f8      	beq.n	800c5c8 <_dtoa_r+0x650>
 800c5d6:	9f04      	ldr	r7, [sp, #16]
 800c5d8:	e73e      	b.n	800c458 <_dtoa_r+0x4e0>
 800c5da:	4b9b      	ldr	r3, [pc, #620]	@ (800c848 <_dtoa_r+0x8d0>)
 800c5dc:	f7f4 f810 	bl	8000600 <__aeabi_dmul>
 800c5e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5e4:	e7bc      	b.n	800c560 <_dtoa_r+0x5e8>
 800c5e6:	d10c      	bne.n	800c602 <_dtoa_r+0x68a>
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	4b98      	ldr	r3, [pc, #608]	@ (800c84c <_dtoa_r+0x8d4>)
 800c5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5f0:	f7f4 f806 	bl	8000600 <__aeabi_dmul>
 800c5f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5f8:	f7f4 fa88 	bl	8000b0c <__aeabi_dcmpge>
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	f000 8157 	beq.w	800c8b0 <_dtoa_r+0x938>
 800c602:	2400      	movs	r4, #0
 800c604:	4625      	mov	r5, r4
 800c606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c608:	4656      	mov	r6, sl
 800c60a:	43db      	mvns	r3, r3
 800c60c:	9304      	str	r3, [sp, #16]
 800c60e:	2700      	movs	r7, #0
 800c610:	4621      	mov	r1, r4
 800c612:	4658      	mov	r0, fp
 800c614:	f000 fbb4 	bl	800cd80 <_Bfree>
 800c618:	2d00      	cmp	r5, #0
 800c61a:	d0dc      	beq.n	800c5d6 <_dtoa_r+0x65e>
 800c61c:	b12f      	cbz	r7, 800c62a <_dtoa_r+0x6b2>
 800c61e:	42af      	cmp	r7, r5
 800c620:	d003      	beq.n	800c62a <_dtoa_r+0x6b2>
 800c622:	4639      	mov	r1, r7
 800c624:	4658      	mov	r0, fp
 800c626:	f000 fbab 	bl	800cd80 <_Bfree>
 800c62a:	4629      	mov	r1, r5
 800c62c:	4658      	mov	r0, fp
 800c62e:	f000 fba7 	bl	800cd80 <_Bfree>
 800c632:	e7d0      	b.n	800c5d6 <_dtoa_r+0x65e>
 800c634:	9704      	str	r7, [sp, #16]
 800c636:	4633      	mov	r3, r6
 800c638:	461e      	mov	r6, r3
 800c63a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c63e:	2a39      	cmp	r2, #57	@ 0x39
 800c640:	d107      	bne.n	800c652 <_dtoa_r+0x6da>
 800c642:	459a      	cmp	sl, r3
 800c644:	d1f8      	bne.n	800c638 <_dtoa_r+0x6c0>
 800c646:	9a04      	ldr	r2, [sp, #16]
 800c648:	3201      	adds	r2, #1
 800c64a:	9204      	str	r2, [sp, #16]
 800c64c:	2230      	movs	r2, #48	@ 0x30
 800c64e:	f88a 2000 	strb.w	r2, [sl]
 800c652:	781a      	ldrb	r2, [r3, #0]
 800c654:	3201      	adds	r2, #1
 800c656:	701a      	strb	r2, [r3, #0]
 800c658:	e7bd      	b.n	800c5d6 <_dtoa_r+0x65e>
 800c65a:	2200      	movs	r2, #0
 800c65c:	4b7a      	ldr	r3, [pc, #488]	@ (800c848 <_dtoa_r+0x8d0>)
 800c65e:	f7f3 ffcf 	bl	8000600 <__aeabi_dmul>
 800c662:	2200      	movs	r2, #0
 800c664:	2300      	movs	r3, #0
 800c666:	4604      	mov	r4, r0
 800c668:	460d      	mov	r5, r1
 800c66a:	f7f4 fa31 	bl	8000ad0 <__aeabi_dcmpeq>
 800c66e:	2800      	cmp	r0, #0
 800c670:	f43f aebb 	beq.w	800c3ea <_dtoa_r+0x472>
 800c674:	e6f0      	b.n	800c458 <_dtoa_r+0x4e0>
 800c676:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c678:	2a00      	cmp	r2, #0
 800c67a:	f000 80db 	beq.w	800c834 <_dtoa_r+0x8bc>
 800c67e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c680:	2a01      	cmp	r2, #1
 800c682:	f300 80bf 	bgt.w	800c804 <_dtoa_r+0x88c>
 800c686:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c688:	2a00      	cmp	r2, #0
 800c68a:	f000 80b7 	beq.w	800c7fc <_dtoa_r+0x884>
 800c68e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c692:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c694:	4646      	mov	r6, r8
 800c696:	9a08      	ldr	r2, [sp, #32]
 800c698:	2101      	movs	r1, #1
 800c69a:	4658      	mov	r0, fp
 800c69c:	4498      	add	r8, r3
 800c69e:	441a      	add	r2, r3
 800c6a0:	9208      	str	r2, [sp, #32]
 800c6a2:	f000 fc6d 	bl	800cf80 <__i2b>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	b15e      	cbz	r6, 800c6c2 <_dtoa_r+0x74a>
 800c6aa:	9b08      	ldr	r3, [sp, #32]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	dd08      	ble.n	800c6c2 <_dtoa_r+0x74a>
 800c6b0:	42b3      	cmp	r3, r6
 800c6b2:	9a08      	ldr	r2, [sp, #32]
 800c6b4:	bfa8      	it	ge
 800c6b6:	4633      	movge	r3, r6
 800c6b8:	eba8 0803 	sub.w	r8, r8, r3
 800c6bc:	1af6      	subs	r6, r6, r3
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	9308      	str	r3, [sp, #32]
 800c6c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6c4:	b1f3      	cbz	r3, 800c704 <_dtoa_r+0x78c>
 800c6c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80b7 	beq.w	800c83c <_dtoa_r+0x8c4>
 800c6ce:	b18c      	cbz	r4, 800c6f4 <_dtoa_r+0x77c>
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	f000 fd13 	bl	800d100 <__pow5mult>
 800c6da:	464a      	mov	r2, r9
 800c6dc:	4601      	mov	r1, r0
 800c6de:	4605      	mov	r5, r0
 800c6e0:	4658      	mov	r0, fp
 800c6e2:	f000 fc63 	bl	800cfac <__multiply>
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	9004      	str	r0, [sp, #16]
 800c6ea:	4658      	mov	r0, fp
 800c6ec:	f000 fb48 	bl	800cd80 <_Bfree>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	4699      	mov	r9, r3
 800c6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6f6:	1b1a      	subs	r2, r3, r4
 800c6f8:	d004      	beq.n	800c704 <_dtoa_r+0x78c>
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	4658      	mov	r0, fp
 800c6fe:	f000 fcff 	bl	800d100 <__pow5mult>
 800c702:	4681      	mov	r9, r0
 800c704:	2101      	movs	r1, #1
 800c706:	4658      	mov	r0, fp
 800c708:	f000 fc3a 	bl	800cf80 <__i2b>
 800c70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c70e:	4604      	mov	r4, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 81cf 	beq.w	800cab4 <_dtoa_r+0xb3c>
 800c716:	461a      	mov	r2, r3
 800c718:	4601      	mov	r1, r0
 800c71a:	4658      	mov	r0, fp
 800c71c:	f000 fcf0 	bl	800d100 <__pow5mult>
 800c720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c722:	4604      	mov	r4, r0
 800c724:	2b01      	cmp	r3, #1
 800c726:	f300 8095 	bgt.w	800c854 <_dtoa_r+0x8dc>
 800c72a:	9b02      	ldr	r3, [sp, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f040 8087 	bne.w	800c840 <_dtoa_r+0x8c8>
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f040 8089 	bne.w	800c850 <_dtoa_r+0x8d8>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c744:	0d1b      	lsrs	r3, r3, #20
 800c746:	051b      	lsls	r3, r3, #20
 800c748:	b12b      	cbz	r3, 800c756 <_dtoa_r+0x7de>
 800c74a:	9b08      	ldr	r3, [sp, #32]
 800c74c:	f108 0801 	add.w	r8, r8, #1
 800c750:	3301      	adds	r3, #1
 800c752:	9308      	str	r3, [sp, #32]
 800c754:	2301      	movs	r3, #1
 800c756:	930a      	str	r3, [sp, #40]	@ 0x28
 800c758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 81b0 	beq.w	800cac0 <_dtoa_r+0xb48>
 800c760:	6923      	ldr	r3, [r4, #16]
 800c762:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c766:	6918      	ldr	r0, [r3, #16]
 800c768:	f000 fbbe 	bl	800cee8 <__hi0bits>
 800c76c:	f1c0 0020 	rsb	r0, r0, #32
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	4418      	add	r0, r3
 800c774:	f010 001f 	ands.w	r0, r0, #31
 800c778:	d077      	beq.n	800c86a <_dtoa_r+0x8f2>
 800c77a:	f1c0 0320 	rsb	r3, r0, #32
 800c77e:	2b04      	cmp	r3, #4
 800c780:	dd6b      	ble.n	800c85a <_dtoa_r+0x8e2>
 800c782:	f1c0 001c 	rsb	r0, r0, #28
 800c786:	9b08      	ldr	r3, [sp, #32]
 800c788:	4480      	add	r8, r0
 800c78a:	4403      	add	r3, r0
 800c78c:	4406      	add	r6, r0
 800c78e:	9308      	str	r3, [sp, #32]
 800c790:	f1b8 0f00 	cmp.w	r8, #0
 800c794:	dd05      	ble.n	800c7a2 <_dtoa_r+0x82a>
 800c796:	4649      	mov	r1, r9
 800c798:	4642      	mov	r2, r8
 800c79a:	4658      	mov	r0, fp
 800c79c:	f000 fd0a 	bl	800d1b4 <__lshift>
 800c7a0:	4681      	mov	r9, r0
 800c7a2:	9b08      	ldr	r3, [sp, #32]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd05      	ble.n	800c7b4 <_dtoa_r+0x83c>
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	4658      	mov	r0, fp
 800c7ae:	f000 fd01 	bl	800d1b4 <__lshift>
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d059      	beq.n	800c86e <_dtoa_r+0x8f6>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f000 fd65 	bl	800d28c <__mcmp>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	da53      	bge.n	800c86e <_dtoa_r+0x8f6>
 800c7c6:	1e7b      	subs	r3, r7, #1
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	220a      	movs	r2, #10
 800c7cc:	4658      	mov	r0, fp
 800c7ce:	9304      	str	r3, [sp, #16]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	f000 faf7 	bl	800cdc4 <__multadd>
 800c7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7d8:	4681      	mov	r9, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 8172 	beq.w	800cac4 <_dtoa_r+0xb4c>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	220a      	movs	r2, #10
 800c7e6:	4658      	mov	r0, fp
 800c7e8:	f000 faec 	bl	800cdc4 <__multadd>
 800c7ec:	9b00      	ldr	r3, [sp, #0]
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dc67      	bgt.n	800c8c4 <_dtoa_r+0x94c>
 800c7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	dc41      	bgt.n	800c87e <_dtoa_r+0x906>
 800c7fa:	e063      	b.n	800c8c4 <_dtoa_r+0x94c>
 800c7fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c7fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c802:	e746      	b.n	800c692 <_dtoa_r+0x71a>
 800c804:	9b07      	ldr	r3, [sp, #28]
 800c806:	1e5c      	subs	r4, r3, #1
 800c808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c80a:	42a3      	cmp	r3, r4
 800c80c:	bfb7      	itett	lt
 800c80e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c810:	1b1c      	subge	r4, r3, r4
 800c812:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c814:	1ae3      	sublt	r3, r4, r3
 800c816:	bfbe      	ittt	lt
 800c818:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c81a:	2400      	movlt	r4, #0
 800c81c:	18d2      	addlt	r2, r2, r3
 800c81e:	9b07      	ldr	r3, [sp, #28]
 800c820:	bfb8      	it	lt
 800c822:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c824:	2b00      	cmp	r3, #0
 800c826:	bfb5      	itete	lt
 800c828:	eba8 0603 	sublt.w	r6, r8, r3
 800c82c:	4646      	movge	r6, r8
 800c82e:	2300      	movlt	r3, #0
 800c830:	9b07      	ldrge	r3, [sp, #28]
 800c832:	e730      	b.n	800c696 <_dtoa_r+0x71e>
 800c834:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c836:	4646      	mov	r6, r8
 800c838:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c83a:	e735      	b.n	800c6a8 <_dtoa_r+0x730>
 800c83c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c83e:	e75c      	b.n	800c6fa <_dtoa_r+0x782>
 800c840:	2300      	movs	r3, #0
 800c842:	e788      	b.n	800c756 <_dtoa_r+0x7de>
 800c844:	3fe00000 	.word	0x3fe00000
 800c848:	40240000 	.word	0x40240000
 800c84c:	40140000 	.word	0x40140000
 800c850:	9b02      	ldr	r3, [sp, #8]
 800c852:	e780      	b.n	800c756 <_dtoa_r+0x7de>
 800c854:	2300      	movs	r3, #0
 800c856:	930a      	str	r3, [sp, #40]	@ 0x28
 800c858:	e782      	b.n	800c760 <_dtoa_r+0x7e8>
 800c85a:	d099      	beq.n	800c790 <_dtoa_r+0x818>
 800c85c:	331c      	adds	r3, #28
 800c85e:	9a08      	ldr	r2, [sp, #32]
 800c860:	441a      	add	r2, r3
 800c862:	4498      	add	r8, r3
 800c864:	441e      	add	r6, r3
 800c866:	9208      	str	r2, [sp, #32]
 800c868:	e792      	b.n	800c790 <_dtoa_r+0x818>
 800c86a:	4603      	mov	r3, r0
 800c86c:	e7f6      	b.n	800c85c <_dtoa_r+0x8e4>
 800c86e:	9b07      	ldr	r3, [sp, #28]
 800c870:	9704      	str	r7, [sp, #16]
 800c872:	2b00      	cmp	r3, #0
 800c874:	dc20      	bgt.n	800c8b8 <_dtoa_r+0x940>
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	dd1e      	ble.n	800c8bc <_dtoa_r+0x944>
 800c87e:	9b00      	ldr	r3, [sp, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f47f aec0 	bne.w	800c606 <_dtoa_r+0x68e>
 800c886:	4621      	mov	r1, r4
 800c888:	2205      	movs	r2, #5
 800c88a:	4658      	mov	r0, fp
 800c88c:	f000 fa9a 	bl	800cdc4 <__multadd>
 800c890:	4601      	mov	r1, r0
 800c892:	4604      	mov	r4, r0
 800c894:	4648      	mov	r0, r9
 800c896:	f000 fcf9 	bl	800d28c <__mcmp>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	f77f aeb3 	ble.w	800c606 <_dtoa_r+0x68e>
 800c8a0:	2331      	movs	r3, #49	@ 0x31
 800c8a2:	4656      	mov	r6, sl
 800c8a4:	f806 3b01 	strb.w	r3, [r6], #1
 800c8a8:	9b04      	ldr	r3, [sp, #16]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	e6ae      	b.n	800c60e <_dtoa_r+0x696>
 800c8b0:	9c07      	ldr	r4, [sp, #28]
 800c8b2:	9704      	str	r7, [sp, #16]
 800c8b4:	4625      	mov	r5, r4
 800c8b6:	e7f3      	b.n	800c8a0 <_dtoa_r+0x928>
 800c8b8:	9b07      	ldr	r3, [sp, #28]
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 8104 	beq.w	800cacc <_dtoa_r+0xb54>
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	dd05      	ble.n	800c8d4 <_dtoa_r+0x95c>
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	4658      	mov	r0, fp
 800c8ce:	f000 fc71 	bl	800d1b4 <__lshift>
 800c8d2:	4605      	mov	r5, r0
 800c8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d05a      	beq.n	800c990 <_dtoa_r+0xa18>
 800c8da:	6869      	ldr	r1, [r5, #4]
 800c8dc:	4658      	mov	r0, fp
 800c8de:	f000 fa0f 	bl	800cd00 <_Balloc>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	b928      	cbnz	r0, 800c8f2 <_dtoa_r+0x97a>
 800c8e6:	4b84      	ldr	r3, [pc, #528]	@ (800caf8 <_dtoa_r+0xb80>)
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c8ee:	f7ff bb5a 	b.w	800bfa6 <_dtoa_r+0x2e>
 800c8f2:	692a      	ldr	r2, [r5, #16]
 800c8f4:	f105 010c 	add.w	r1, r5, #12
 800c8f8:	300c      	adds	r0, #12
 800c8fa:	3202      	adds	r2, #2
 800c8fc:	0092      	lsls	r2, r2, #2
 800c8fe:	f001 ff81 	bl	800e804 <memcpy>
 800c902:	2201      	movs	r2, #1
 800c904:	4631      	mov	r1, r6
 800c906:	4658      	mov	r0, fp
 800c908:	f000 fc54 	bl	800d1b4 <__lshift>
 800c90c:	f10a 0301 	add.w	r3, sl, #1
 800c910:	462f      	mov	r7, r5
 800c912:	4605      	mov	r5, r0
 800c914:	9307      	str	r3, [sp, #28]
 800c916:	9b00      	ldr	r3, [sp, #0]
 800c918:	4453      	add	r3, sl
 800c91a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	930a      	str	r3, [sp, #40]	@ 0x28
 800c924:	9b07      	ldr	r3, [sp, #28]
 800c926:	4621      	mov	r1, r4
 800c928:	4648      	mov	r0, r9
 800c92a:	3b01      	subs	r3, #1
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	f7ff fa93 	bl	800be58 <quorem>
 800c932:	4639      	mov	r1, r7
 800c934:	9002      	str	r0, [sp, #8]
 800c936:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c93a:	4648      	mov	r0, r9
 800c93c:	f000 fca6 	bl	800d28c <__mcmp>
 800c940:	462a      	mov	r2, r5
 800c942:	9008      	str	r0, [sp, #32]
 800c944:	4621      	mov	r1, r4
 800c946:	4658      	mov	r0, fp
 800c948:	f000 fcbc 	bl	800d2c4 <__mdiff>
 800c94c:	68c2      	ldr	r2, [r0, #12]
 800c94e:	4606      	mov	r6, r0
 800c950:	bb02      	cbnz	r2, 800c994 <_dtoa_r+0xa1c>
 800c952:	4601      	mov	r1, r0
 800c954:	4648      	mov	r0, r9
 800c956:	f000 fc99 	bl	800d28c <__mcmp>
 800c95a:	4602      	mov	r2, r0
 800c95c:	4631      	mov	r1, r6
 800c95e:	4658      	mov	r0, fp
 800c960:	920e      	str	r2, [sp, #56]	@ 0x38
 800c962:	f000 fa0d 	bl	800cd80 <_Bfree>
 800c966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c968:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c96a:	9e07      	ldr	r6, [sp, #28]
 800c96c:	ea43 0102 	orr.w	r1, r3, r2
 800c970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c972:	4319      	orrs	r1, r3
 800c974:	d110      	bne.n	800c998 <_dtoa_r+0xa20>
 800c976:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c97a:	d029      	beq.n	800c9d0 <_dtoa_r+0xa58>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dd02      	ble.n	800c988 <_dtoa_r+0xa10>
 800c982:	9b02      	ldr	r3, [sp, #8]
 800c984:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c988:	9b00      	ldr	r3, [sp, #0]
 800c98a:	f883 8000 	strb.w	r8, [r3]
 800c98e:	e63f      	b.n	800c610 <_dtoa_r+0x698>
 800c990:	4628      	mov	r0, r5
 800c992:	e7bb      	b.n	800c90c <_dtoa_r+0x994>
 800c994:	2201      	movs	r2, #1
 800c996:	e7e1      	b.n	800c95c <_dtoa_r+0x9e4>
 800c998:	9b08      	ldr	r3, [sp, #32]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	db04      	blt.n	800c9a8 <_dtoa_r+0xa30>
 800c99e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9a0:	430b      	orrs	r3, r1
 800c9a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c9a4:	430b      	orrs	r3, r1
 800c9a6:	d120      	bne.n	800c9ea <_dtoa_r+0xa72>
 800c9a8:	2a00      	cmp	r2, #0
 800c9aa:	dded      	ble.n	800c988 <_dtoa_r+0xa10>
 800c9ac:	4649      	mov	r1, r9
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4658      	mov	r0, fp
 800c9b2:	f000 fbff 	bl	800d1b4 <__lshift>
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4681      	mov	r9, r0
 800c9ba:	f000 fc67 	bl	800d28c <__mcmp>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	dc03      	bgt.n	800c9ca <_dtoa_r+0xa52>
 800c9c2:	d1e1      	bne.n	800c988 <_dtoa_r+0xa10>
 800c9c4:	f018 0f01 	tst.w	r8, #1
 800c9c8:	d0de      	beq.n	800c988 <_dtoa_r+0xa10>
 800c9ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c9ce:	d1d8      	bne.n	800c982 <_dtoa_r+0xa0a>
 800c9d0:	2339      	movs	r3, #57	@ 0x39
 800c9d2:	9a00      	ldr	r2, [sp, #0]
 800c9d4:	7013      	strb	r3, [r2, #0]
 800c9d6:	4633      	mov	r3, r6
 800c9d8:	461e      	mov	r6, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c9e0:	2a39      	cmp	r2, #57	@ 0x39
 800c9e2:	d052      	beq.n	800ca8a <_dtoa_r+0xb12>
 800c9e4:	3201      	adds	r2, #1
 800c9e6:	701a      	strb	r2, [r3, #0]
 800c9e8:	e612      	b.n	800c610 <_dtoa_r+0x698>
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	dd07      	ble.n	800c9fe <_dtoa_r+0xa86>
 800c9ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c9f2:	d0ed      	beq.n	800c9d0 <_dtoa_r+0xa58>
 800c9f4:	f108 0301 	add.w	r3, r8, #1
 800c9f8:	9a00      	ldr	r2, [sp, #0]
 800c9fa:	7013      	strb	r3, [r2, #0]
 800c9fc:	e608      	b.n	800c610 <_dtoa_r+0x698>
 800c9fe:	9b07      	ldr	r3, [sp, #28]
 800ca00:	9a07      	ldr	r2, [sp, #28]
 800ca02:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ca06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d028      	beq.n	800ca5e <_dtoa_r+0xae6>
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	2300      	movs	r3, #0
 800ca10:	220a      	movs	r2, #10
 800ca12:	4658      	mov	r0, fp
 800ca14:	f000 f9d6 	bl	800cdc4 <__multadd>
 800ca18:	42af      	cmp	r7, r5
 800ca1a:	4681      	mov	r9, r0
 800ca1c:	f04f 0300 	mov.w	r3, #0
 800ca20:	f04f 020a 	mov.w	r2, #10
 800ca24:	4639      	mov	r1, r7
 800ca26:	4658      	mov	r0, fp
 800ca28:	d107      	bne.n	800ca3a <_dtoa_r+0xac2>
 800ca2a:	f000 f9cb 	bl	800cdc4 <__multadd>
 800ca2e:	4607      	mov	r7, r0
 800ca30:	4605      	mov	r5, r0
 800ca32:	9b07      	ldr	r3, [sp, #28]
 800ca34:	3301      	adds	r3, #1
 800ca36:	9307      	str	r3, [sp, #28]
 800ca38:	e774      	b.n	800c924 <_dtoa_r+0x9ac>
 800ca3a:	f000 f9c3 	bl	800cdc4 <__multadd>
 800ca3e:	4629      	mov	r1, r5
 800ca40:	4607      	mov	r7, r0
 800ca42:	2300      	movs	r3, #0
 800ca44:	220a      	movs	r2, #10
 800ca46:	4658      	mov	r0, fp
 800ca48:	f000 f9bc 	bl	800cdc4 <__multadd>
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	e7f0      	b.n	800ca32 <_dtoa_r+0xaba>
 800ca50:	9b00      	ldr	r3, [sp, #0]
 800ca52:	2700      	movs	r7, #0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfcc      	ite	gt
 800ca58:	461e      	movgt	r6, r3
 800ca5a:	2601      	movle	r6, #1
 800ca5c:	4456      	add	r6, sl
 800ca5e:	4649      	mov	r1, r9
 800ca60:	2201      	movs	r2, #1
 800ca62:	4658      	mov	r0, fp
 800ca64:	f000 fba6 	bl	800d1b4 <__lshift>
 800ca68:	4621      	mov	r1, r4
 800ca6a:	4681      	mov	r9, r0
 800ca6c:	f000 fc0e 	bl	800d28c <__mcmp>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	dcb0      	bgt.n	800c9d6 <_dtoa_r+0xa5e>
 800ca74:	d102      	bne.n	800ca7c <_dtoa_r+0xb04>
 800ca76:	f018 0f01 	tst.w	r8, #1
 800ca7a:	d1ac      	bne.n	800c9d6 <_dtoa_r+0xa5e>
 800ca7c:	4633      	mov	r3, r6
 800ca7e:	461e      	mov	r6, r3
 800ca80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca84:	2a30      	cmp	r2, #48	@ 0x30
 800ca86:	d0fa      	beq.n	800ca7e <_dtoa_r+0xb06>
 800ca88:	e5c2      	b.n	800c610 <_dtoa_r+0x698>
 800ca8a:	459a      	cmp	sl, r3
 800ca8c:	d1a4      	bne.n	800c9d8 <_dtoa_r+0xa60>
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	3301      	adds	r3, #1
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	2331      	movs	r3, #49	@ 0x31
 800ca96:	f88a 3000 	strb.w	r3, [sl]
 800ca9a:	e5b9      	b.n	800c610 <_dtoa_r+0x698>
 800ca9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cafc <_dtoa_r+0xb84>
 800caa2:	b11b      	cbz	r3, 800caac <_dtoa_r+0xb34>
 800caa4:	f10a 0308 	add.w	r3, sl, #8
 800caa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800caaa:	6013      	str	r3, [r2, #0]
 800caac:	4650      	mov	r0, sl
 800caae:	b019      	add	sp, #100	@ 0x64
 800cab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	f77f ae37 	ble.w	800c72a <_dtoa_r+0x7b2>
 800cabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cabe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cac0:	2001      	movs	r0, #1
 800cac2:	e655      	b.n	800c770 <_dtoa_r+0x7f8>
 800cac4:	9b00      	ldr	r3, [sp, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f77f aed6 	ble.w	800c878 <_dtoa_r+0x900>
 800cacc:	4656      	mov	r6, sl
 800cace:	4621      	mov	r1, r4
 800cad0:	4648      	mov	r0, r9
 800cad2:	f7ff f9c1 	bl	800be58 <quorem>
 800cad6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cada:	9b00      	ldr	r3, [sp, #0]
 800cadc:	f806 8b01 	strb.w	r8, [r6], #1
 800cae0:	eba6 020a 	sub.w	r2, r6, sl
 800cae4:	4293      	cmp	r3, r2
 800cae6:	ddb3      	ble.n	800ca50 <_dtoa_r+0xad8>
 800cae8:	4649      	mov	r1, r9
 800caea:	2300      	movs	r3, #0
 800caec:	220a      	movs	r2, #10
 800caee:	4658      	mov	r0, fp
 800caf0:	f000 f968 	bl	800cdc4 <__multadd>
 800caf4:	4681      	mov	r9, r0
 800caf6:	e7ea      	b.n	800cace <_dtoa_r+0xb56>
 800caf8:	0800f709 	.word	0x0800f709
 800cafc:	0800f68d 	.word	0x0800f68d

0800cb00 <_free_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	4605      	mov	r5, r0
 800cb04:	2900      	cmp	r1, #0
 800cb06:	d041      	beq.n	800cb8c <_free_r+0x8c>
 800cb08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb0c:	1f0c      	subs	r4, r1, #4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	bfb8      	it	lt
 800cb12:	18e4      	addlt	r4, r4, r3
 800cb14:	f000 f8e8 	bl	800cce8 <__malloc_lock>
 800cb18:	4a1d      	ldr	r2, [pc, #116]	@ (800cb90 <_free_r+0x90>)
 800cb1a:	6813      	ldr	r3, [r2, #0]
 800cb1c:	b933      	cbnz	r3, 800cb2c <_free_r+0x2c>
 800cb1e:	6063      	str	r3, [r4, #4]
 800cb20:	6014      	str	r4, [r2, #0]
 800cb22:	4628      	mov	r0, r5
 800cb24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb28:	f000 b8e4 	b.w	800ccf4 <__malloc_unlock>
 800cb2c:	42a3      	cmp	r3, r4
 800cb2e:	d908      	bls.n	800cb42 <_free_r+0x42>
 800cb30:	6820      	ldr	r0, [r4, #0]
 800cb32:	1821      	adds	r1, r4, r0
 800cb34:	428b      	cmp	r3, r1
 800cb36:	bf01      	itttt	eq
 800cb38:	6819      	ldreq	r1, [r3, #0]
 800cb3a:	685b      	ldreq	r3, [r3, #4]
 800cb3c:	1809      	addeq	r1, r1, r0
 800cb3e:	6021      	streq	r1, [r4, #0]
 800cb40:	e7ed      	b.n	800cb1e <_free_r+0x1e>
 800cb42:	461a      	mov	r2, r3
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	b10b      	cbz	r3, 800cb4c <_free_r+0x4c>
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	d9fa      	bls.n	800cb42 <_free_r+0x42>
 800cb4c:	6811      	ldr	r1, [r2, #0]
 800cb4e:	1850      	adds	r0, r2, r1
 800cb50:	42a0      	cmp	r0, r4
 800cb52:	d10b      	bne.n	800cb6c <_free_r+0x6c>
 800cb54:	6820      	ldr	r0, [r4, #0]
 800cb56:	4401      	add	r1, r0
 800cb58:	1850      	adds	r0, r2, r1
 800cb5a:	6011      	str	r1, [r2, #0]
 800cb5c:	4283      	cmp	r3, r0
 800cb5e:	d1e0      	bne.n	800cb22 <_free_r+0x22>
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	4408      	add	r0, r1
 800cb66:	6053      	str	r3, [r2, #4]
 800cb68:	6010      	str	r0, [r2, #0]
 800cb6a:	e7da      	b.n	800cb22 <_free_r+0x22>
 800cb6c:	d902      	bls.n	800cb74 <_free_r+0x74>
 800cb6e:	230c      	movs	r3, #12
 800cb70:	602b      	str	r3, [r5, #0]
 800cb72:	e7d6      	b.n	800cb22 <_free_r+0x22>
 800cb74:	6820      	ldr	r0, [r4, #0]
 800cb76:	1821      	adds	r1, r4, r0
 800cb78:	428b      	cmp	r3, r1
 800cb7a:	bf02      	ittt	eq
 800cb7c:	6819      	ldreq	r1, [r3, #0]
 800cb7e:	685b      	ldreq	r3, [r3, #4]
 800cb80:	1809      	addeq	r1, r1, r0
 800cb82:	6063      	str	r3, [r4, #4]
 800cb84:	bf08      	it	eq
 800cb86:	6021      	streq	r1, [r4, #0]
 800cb88:	6054      	str	r4, [r2, #4]
 800cb8a:	e7ca      	b.n	800cb22 <_free_r+0x22>
 800cb8c:	bd38      	pop	{r3, r4, r5, pc}
 800cb8e:	bf00      	nop
 800cb90:	20000a48 	.word	0x20000a48

0800cb94 <malloc>:
 800cb94:	4b02      	ldr	r3, [pc, #8]	@ (800cba0 <malloc+0xc>)
 800cb96:	4601      	mov	r1, r0
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	f000 b825 	b.w	800cbe8 <_malloc_r>
 800cb9e:	bf00      	nop
 800cba0:	20000030 	.word	0x20000030

0800cba4 <sbrk_aligned>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	4e0f      	ldr	r6, [pc, #60]	@ (800cbe4 <sbrk_aligned+0x40>)
 800cba8:	460c      	mov	r4, r1
 800cbaa:	4605      	mov	r5, r0
 800cbac:	6831      	ldr	r1, [r6, #0]
 800cbae:	b911      	cbnz	r1, 800cbb6 <sbrk_aligned+0x12>
 800cbb0:	f001 fe18 	bl	800e7e4 <_sbrk_r>
 800cbb4:	6030      	str	r0, [r6, #0]
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f001 fe13 	bl	800e7e4 <_sbrk_r>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	d103      	bne.n	800cbca <sbrk_aligned+0x26>
 800cbc2:	f04f 34ff 	mov.w	r4, #4294967295
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	bd70      	pop	{r4, r5, r6, pc}
 800cbca:	1cc4      	adds	r4, r0, #3
 800cbcc:	f024 0403 	bic.w	r4, r4, #3
 800cbd0:	42a0      	cmp	r0, r4
 800cbd2:	d0f8      	beq.n	800cbc6 <sbrk_aligned+0x22>
 800cbd4:	1a21      	subs	r1, r4, r0
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f001 fe04 	bl	800e7e4 <_sbrk_r>
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d1f2      	bne.n	800cbc6 <sbrk_aligned+0x22>
 800cbe0:	e7ef      	b.n	800cbc2 <sbrk_aligned+0x1e>
 800cbe2:	bf00      	nop
 800cbe4:	20000a44 	.word	0x20000a44

0800cbe8 <_malloc_r>:
 800cbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbec:	1ccd      	adds	r5, r1, #3
 800cbee:	4606      	mov	r6, r0
 800cbf0:	f025 0503 	bic.w	r5, r5, #3
 800cbf4:	3508      	adds	r5, #8
 800cbf6:	2d0c      	cmp	r5, #12
 800cbf8:	bf38      	it	cc
 800cbfa:	250c      	movcc	r5, #12
 800cbfc:	2d00      	cmp	r5, #0
 800cbfe:	db01      	blt.n	800cc04 <_malloc_r+0x1c>
 800cc00:	42a9      	cmp	r1, r5
 800cc02:	d904      	bls.n	800cc0e <_malloc_r+0x26>
 800cc04:	230c      	movs	r3, #12
 800cc06:	6033      	str	r3, [r6, #0]
 800cc08:	2000      	movs	r0, #0
 800cc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cce4 <_malloc_r+0xfc>
 800cc12:	f000 f869 	bl	800cce8 <__malloc_lock>
 800cc16:	f8d8 3000 	ldr.w	r3, [r8]
 800cc1a:	461c      	mov	r4, r3
 800cc1c:	bb44      	cbnz	r4, 800cc70 <_malloc_r+0x88>
 800cc1e:	4629      	mov	r1, r5
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7ff ffbf 	bl	800cba4 <sbrk_aligned>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	4604      	mov	r4, r0
 800cc2a:	d158      	bne.n	800ccde <_malloc_r+0xf6>
 800cc2c:	f8d8 4000 	ldr.w	r4, [r8]
 800cc30:	4627      	mov	r7, r4
 800cc32:	2f00      	cmp	r7, #0
 800cc34:	d143      	bne.n	800ccbe <_malloc_r+0xd6>
 800cc36:	2c00      	cmp	r4, #0
 800cc38:	d04b      	beq.n	800ccd2 <_malloc_r+0xea>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	4630      	mov	r0, r6
 800cc40:	eb04 0903 	add.w	r9, r4, r3
 800cc44:	f001 fdce 	bl	800e7e4 <_sbrk_r>
 800cc48:	4581      	cmp	r9, r0
 800cc4a:	d142      	bne.n	800ccd2 <_malloc_r+0xea>
 800cc4c:	6821      	ldr	r1, [r4, #0]
 800cc4e:	4630      	mov	r0, r6
 800cc50:	1a6d      	subs	r5, r5, r1
 800cc52:	4629      	mov	r1, r5
 800cc54:	f7ff ffa6 	bl	800cba4 <sbrk_aligned>
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d03a      	beq.n	800ccd2 <_malloc_r+0xea>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	442b      	add	r3, r5
 800cc60:	6023      	str	r3, [r4, #0]
 800cc62:	f8d8 3000 	ldr.w	r3, [r8]
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	bb62      	cbnz	r2, 800ccc4 <_malloc_r+0xdc>
 800cc6a:	f8c8 7000 	str.w	r7, [r8]
 800cc6e:	e00f      	b.n	800cc90 <_malloc_r+0xa8>
 800cc70:	6822      	ldr	r2, [r4, #0]
 800cc72:	1b52      	subs	r2, r2, r5
 800cc74:	d420      	bmi.n	800ccb8 <_malloc_r+0xd0>
 800cc76:	2a0b      	cmp	r2, #11
 800cc78:	d917      	bls.n	800ccaa <_malloc_r+0xc2>
 800cc7a:	1961      	adds	r1, r4, r5
 800cc7c:	42a3      	cmp	r3, r4
 800cc7e:	6025      	str	r5, [r4, #0]
 800cc80:	bf18      	it	ne
 800cc82:	6059      	strne	r1, [r3, #4]
 800cc84:	6863      	ldr	r3, [r4, #4]
 800cc86:	bf08      	it	eq
 800cc88:	f8c8 1000 	streq.w	r1, [r8]
 800cc8c:	5162      	str	r2, [r4, r5]
 800cc8e:	604b      	str	r3, [r1, #4]
 800cc90:	4630      	mov	r0, r6
 800cc92:	f000 f82f 	bl	800ccf4 <__malloc_unlock>
 800cc96:	f104 000b 	add.w	r0, r4, #11
 800cc9a:	1d23      	adds	r3, r4, #4
 800cc9c:	f020 0007 	bic.w	r0, r0, #7
 800cca0:	1ac2      	subs	r2, r0, r3
 800cca2:	bf1c      	itt	ne
 800cca4:	1a1b      	subne	r3, r3, r0
 800cca6:	50a3      	strne	r3, [r4, r2]
 800cca8:	e7af      	b.n	800cc0a <_malloc_r+0x22>
 800ccaa:	6862      	ldr	r2, [r4, #4]
 800ccac:	42a3      	cmp	r3, r4
 800ccae:	bf0c      	ite	eq
 800ccb0:	f8c8 2000 	streq.w	r2, [r8]
 800ccb4:	605a      	strne	r2, [r3, #4]
 800ccb6:	e7eb      	b.n	800cc90 <_malloc_r+0xa8>
 800ccb8:	4623      	mov	r3, r4
 800ccba:	6864      	ldr	r4, [r4, #4]
 800ccbc:	e7ae      	b.n	800cc1c <_malloc_r+0x34>
 800ccbe:	463c      	mov	r4, r7
 800ccc0:	687f      	ldr	r7, [r7, #4]
 800ccc2:	e7b6      	b.n	800cc32 <_malloc_r+0x4a>
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	42a3      	cmp	r3, r4
 800ccca:	d1fb      	bne.n	800ccc4 <_malloc_r+0xdc>
 800cccc:	2300      	movs	r3, #0
 800ccce:	6053      	str	r3, [r2, #4]
 800ccd0:	e7de      	b.n	800cc90 <_malloc_r+0xa8>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	6033      	str	r3, [r6, #0]
 800ccd8:	f000 f80c 	bl	800ccf4 <__malloc_unlock>
 800ccdc:	e794      	b.n	800cc08 <_malloc_r+0x20>
 800ccde:	6005      	str	r5, [r0, #0]
 800cce0:	e7d6      	b.n	800cc90 <_malloc_r+0xa8>
 800cce2:	bf00      	nop
 800cce4:	20000a48 	.word	0x20000a48

0800cce8 <__malloc_lock>:
 800cce8:	4801      	ldr	r0, [pc, #4]	@ (800ccf0 <__malloc_lock+0x8>)
 800ccea:	f7ff b89e 	b.w	800be2a <__retarget_lock_acquire_recursive>
 800ccee:	bf00      	nop
 800ccf0:	20000a40 	.word	0x20000a40

0800ccf4 <__malloc_unlock>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	@ (800ccfc <__malloc_unlock+0x8>)
 800ccf6:	f7ff b899 	b.w	800be2c <__retarget_lock_release_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	20000a40 	.word	0x20000a40

0800cd00 <_Balloc>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	69c6      	ldr	r6, [r0, #28]
 800cd04:	4604      	mov	r4, r0
 800cd06:	460d      	mov	r5, r1
 800cd08:	b976      	cbnz	r6, 800cd28 <_Balloc+0x28>
 800cd0a:	2010      	movs	r0, #16
 800cd0c:	f7ff ff42 	bl	800cb94 <malloc>
 800cd10:	4602      	mov	r2, r0
 800cd12:	61e0      	str	r0, [r4, #28]
 800cd14:	b920      	cbnz	r0, 800cd20 <_Balloc+0x20>
 800cd16:	4b18      	ldr	r3, [pc, #96]	@ (800cd78 <_Balloc+0x78>)
 800cd18:	216b      	movs	r1, #107	@ 0x6b
 800cd1a:	4818      	ldr	r0, [pc, #96]	@ (800cd7c <_Balloc+0x7c>)
 800cd1c:	f001 fd88 	bl	800e830 <__assert_func>
 800cd20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd24:	6006      	str	r6, [r0, #0]
 800cd26:	60c6      	str	r6, [r0, #12]
 800cd28:	69e6      	ldr	r6, [r4, #28]
 800cd2a:	68f3      	ldr	r3, [r6, #12]
 800cd2c:	b183      	cbz	r3, 800cd50 <_Balloc+0x50>
 800cd2e:	69e3      	ldr	r3, [r4, #28]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd36:	b9b8      	cbnz	r0, 800cd68 <_Balloc+0x68>
 800cd38:	2101      	movs	r1, #1
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	fa01 f605 	lsl.w	r6, r1, r5
 800cd40:	1d72      	adds	r2, r6, #5
 800cd42:	0092      	lsls	r2, r2, #2
 800cd44:	f001 fd92 	bl	800e86c <_calloc_r>
 800cd48:	b160      	cbz	r0, 800cd64 <_Balloc+0x64>
 800cd4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd4e:	e00e      	b.n	800cd6e <_Balloc+0x6e>
 800cd50:	2221      	movs	r2, #33	@ 0x21
 800cd52:	2104      	movs	r1, #4
 800cd54:	4620      	mov	r0, r4
 800cd56:	f001 fd89 	bl	800e86c <_calloc_r>
 800cd5a:	69e3      	ldr	r3, [r4, #28]
 800cd5c:	60f0      	str	r0, [r6, #12]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1e4      	bne.n	800cd2e <_Balloc+0x2e>
 800cd64:	2000      	movs	r0, #0
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	6802      	ldr	r2, [r0, #0]
 800cd6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd74:	e7f7      	b.n	800cd66 <_Balloc+0x66>
 800cd76:	bf00      	nop
 800cd78:	0800f69a 	.word	0x0800f69a
 800cd7c:	0800f71a 	.word	0x0800f71a

0800cd80 <_Bfree>:
 800cd80:	b570      	push	{r4, r5, r6, lr}
 800cd82:	69c6      	ldr	r6, [r0, #28]
 800cd84:	4605      	mov	r5, r0
 800cd86:	460c      	mov	r4, r1
 800cd88:	b976      	cbnz	r6, 800cda8 <_Bfree+0x28>
 800cd8a:	2010      	movs	r0, #16
 800cd8c:	f7ff ff02 	bl	800cb94 <malloc>
 800cd90:	4602      	mov	r2, r0
 800cd92:	61e8      	str	r0, [r5, #28]
 800cd94:	b920      	cbnz	r0, 800cda0 <_Bfree+0x20>
 800cd96:	4b09      	ldr	r3, [pc, #36]	@ (800cdbc <_Bfree+0x3c>)
 800cd98:	218f      	movs	r1, #143	@ 0x8f
 800cd9a:	4809      	ldr	r0, [pc, #36]	@ (800cdc0 <_Bfree+0x40>)
 800cd9c:	f001 fd48 	bl	800e830 <__assert_func>
 800cda0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cda4:	6006      	str	r6, [r0, #0]
 800cda6:	60c6      	str	r6, [r0, #12]
 800cda8:	b13c      	cbz	r4, 800cdba <_Bfree+0x3a>
 800cdaa:	69eb      	ldr	r3, [r5, #28]
 800cdac:	6862      	ldr	r2, [r4, #4]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdb4:	6021      	str	r1, [r4, #0]
 800cdb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
 800cdbc:	0800f69a 	.word	0x0800f69a
 800cdc0:	0800f71a 	.word	0x0800f71a

0800cdc4 <__multadd>:
 800cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc8:	f101 0c14 	add.w	ip, r1, #20
 800cdcc:	4607      	mov	r7, r0
 800cdce:	460c      	mov	r4, r1
 800cdd0:	461e      	mov	r6, r3
 800cdd2:	690d      	ldr	r5, [r1, #16]
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f8dc 3000 	ldr.w	r3, [ip]
 800cdda:	3001      	adds	r0, #1
 800cddc:	b299      	uxth	r1, r3
 800cdde:	4285      	cmp	r5, r0
 800cde0:	fb02 6101 	mla	r1, r2, r1, r6
 800cde4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cde8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800cdec:	b289      	uxth	r1, r1
 800cdee:	fb02 3306 	mla	r3, r2, r6, r3
 800cdf2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdfa:	f84c 1b04 	str.w	r1, [ip], #4
 800cdfe:	dcea      	bgt.n	800cdd6 <__multadd+0x12>
 800ce00:	b30e      	cbz	r6, 800ce46 <__multadd+0x82>
 800ce02:	68a3      	ldr	r3, [r4, #8]
 800ce04:	42ab      	cmp	r3, r5
 800ce06:	dc19      	bgt.n	800ce3c <__multadd+0x78>
 800ce08:	6861      	ldr	r1, [r4, #4]
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	3101      	adds	r1, #1
 800ce0e:	f7ff ff77 	bl	800cd00 <_Balloc>
 800ce12:	4680      	mov	r8, r0
 800ce14:	b928      	cbnz	r0, 800ce22 <__multadd+0x5e>
 800ce16:	4602      	mov	r2, r0
 800ce18:	4b0c      	ldr	r3, [pc, #48]	@ (800ce4c <__multadd+0x88>)
 800ce1a:	21ba      	movs	r1, #186	@ 0xba
 800ce1c:	480c      	ldr	r0, [pc, #48]	@ (800ce50 <__multadd+0x8c>)
 800ce1e:	f001 fd07 	bl	800e830 <__assert_func>
 800ce22:	6922      	ldr	r2, [r4, #16]
 800ce24:	f104 010c 	add.w	r1, r4, #12
 800ce28:	300c      	adds	r0, #12
 800ce2a:	3202      	adds	r2, #2
 800ce2c:	0092      	lsls	r2, r2, #2
 800ce2e:	f001 fce9 	bl	800e804 <memcpy>
 800ce32:	4621      	mov	r1, r4
 800ce34:	4644      	mov	r4, r8
 800ce36:	4638      	mov	r0, r7
 800ce38:	f7ff ffa2 	bl	800cd80 <_Bfree>
 800ce3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce40:	3501      	adds	r5, #1
 800ce42:	615e      	str	r6, [r3, #20]
 800ce44:	6125      	str	r5, [r4, #16]
 800ce46:	4620      	mov	r0, r4
 800ce48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce4c:	0800f709 	.word	0x0800f709
 800ce50:	0800f71a 	.word	0x0800f71a

0800ce54 <__s2b>:
 800ce54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce58:	4615      	mov	r5, r2
 800ce5a:	461f      	mov	r7, r3
 800ce5c:	2209      	movs	r2, #9
 800ce5e:	3308      	adds	r3, #8
 800ce60:	460c      	mov	r4, r1
 800ce62:	4606      	mov	r6, r0
 800ce64:	2100      	movs	r1, #0
 800ce66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	db09      	blt.n	800ce84 <__s2b+0x30>
 800ce70:	4630      	mov	r0, r6
 800ce72:	f7ff ff45 	bl	800cd00 <_Balloc>
 800ce76:	b940      	cbnz	r0, 800ce8a <__s2b+0x36>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	4b19      	ldr	r3, [pc, #100]	@ (800cee0 <__s2b+0x8c>)
 800ce7c:	21d3      	movs	r1, #211	@ 0xd3
 800ce7e:	4819      	ldr	r0, [pc, #100]	@ (800cee4 <__s2b+0x90>)
 800ce80:	f001 fcd6 	bl	800e830 <__assert_func>
 800ce84:	0052      	lsls	r2, r2, #1
 800ce86:	3101      	adds	r1, #1
 800ce88:	e7f0      	b.n	800ce6c <__s2b+0x18>
 800ce8a:	9b08      	ldr	r3, [sp, #32]
 800ce8c:	2d09      	cmp	r5, #9
 800ce8e:	6143      	str	r3, [r0, #20]
 800ce90:	f04f 0301 	mov.w	r3, #1
 800ce94:	6103      	str	r3, [r0, #16]
 800ce96:	dd16      	ble.n	800cec6 <__s2b+0x72>
 800ce98:	f104 0909 	add.w	r9, r4, #9
 800ce9c:	442c      	add	r4, r5
 800ce9e:	46c8      	mov	r8, r9
 800cea0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cea4:	4601      	mov	r1, r0
 800cea6:	220a      	movs	r2, #10
 800cea8:	4630      	mov	r0, r6
 800ceaa:	3b30      	subs	r3, #48	@ 0x30
 800ceac:	f7ff ff8a 	bl	800cdc4 <__multadd>
 800ceb0:	45a0      	cmp	r8, r4
 800ceb2:	d1f5      	bne.n	800cea0 <__s2b+0x4c>
 800ceb4:	f1a5 0408 	sub.w	r4, r5, #8
 800ceb8:	444c      	add	r4, r9
 800ceba:	1b2d      	subs	r5, r5, r4
 800cebc:	1963      	adds	r3, r4, r5
 800cebe:	42bb      	cmp	r3, r7
 800cec0:	db04      	blt.n	800cecc <__s2b+0x78>
 800cec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec6:	340a      	adds	r4, #10
 800cec8:	2509      	movs	r5, #9
 800ceca:	e7f6      	b.n	800ceba <__s2b+0x66>
 800cecc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ced0:	4601      	mov	r1, r0
 800ced2:	220a      	movs	r2, #10
 800ced4:	4630      	mov	r0, r6
 800ced6:	3b30      	subs	r3, #48	@ 0x30
 800ced8:	f7ff ff74 	bl	800cdc4 <__multadd>
 800cedc:	e7ee      	b.n	800cebc <__s2b+0x68>
 800cede:	bf00      	nop
 800cee0:	0800f709 	.word	0x0800f709
 800cee4:	0800f71a 	.word	0x0800f71a

0800cee8 <__hi0bits>:
 800cee8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ceec:	4603      	mov	r3, r0
 800ceee:	bf36      	itet	cc
 800cef0:	0403      	lslcc	r3, r0, #16
 800cef2:	2000      	movcs	r0, #0
 800cef4:	2010      	movcc	r0, #16
 800cef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cefa:	bf3c      	itt	cc
 800cefc:	021b      	lslcc	r3, r3, #8
 800cefe:	3008      	addcc	r0, #8
 800cf00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf04:	bf3c      	itt	cc
 800cf06:	011b      	lslcc	r3, r3, #4
 800cf08:	3004      	addcc	r0, #4
 800cf0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf0e:	bf3c      	itt	cc
 800cf10:	009b      	lslcc	r3, r3, #2
 800cf12:	3002      	addcc	r0, #2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	db05      	blt.n	800cf24 <__hi0bits+0x3c>
 800cf18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf1c:	f100 0001 	add.w	r0, r0, #1
 800cf20:	bf08      	it	eq
 800cf22:	2020      	moveq	r0, #32
 800cf24:	4770      	bx	lr

0800cf26 <__lo0bits>:
 800cf26:	6803      	ldr	r3, [r0, #0]
 800cf28:	4602      	mov	r2, r0
 800cf2a:	f013 0007 	ands.w	r0, r3, #7
 800cf2e:	d00b      	beq.n	800cf48 <__lo0bits+0x22>
 800cf30:	07d9      	lsls	r1, r3, #31
 800cf32:	d421      	bmi.n	800cf78 <__lo0bits+0x52>
 800cf34:	0798      	lsls	r0, r3, #30
 800cf36:	bf47      	ittee	mi
 800cf38:	085b      	lsrmi	r3, r3, #1
 800cf3a:	2001      	movmi	r0, #1
 800cf3c:	089b      	lsrpl	r3, r3, #2
 800cf3e:	2002      	movpl	r0, #2
 800cf40:	bf4c      	ite	mi
 800cf42:	6013      	strmi	r3, [r2, #0]
 800cf44:	6013      	strpl	r3, [r2, #0]
 800cf46:	4770      	bx	lr
 800cf48:	b299      	uxth	r1, r3
 800cf4a:	b909      	cbnz	r1, 800cf50 <__lo0bits+0x2a>
 800cf4c:	0c1b      	lsrs	r3, r3, #16
 800cf4e:	2010      	movs	r0, #16
 800cf50:	b2d9      	uxtb	r1, r3
 800cf52:	b909      	cbnz	r1, 800cf58 <__lo0bits+0x32>
 800cf54:	3008      	adds	r0, #8
 800cf56:	0a1b      	lsrs	r3, r3, #8
 800cf58:	0719      	lsls	r1, r3, #28
 800cf5a:	bf04      	itt	eq
 800cf5c:	091b      	lsreq	r3, r3, #4
 800cf5e:	3004      	addeq	r0, #4
 800cf60:	0799      	lsls	r1, r3, #30
 800cf62:	bf04      	itt	eq
 800cf64:	089b      	lsreq	r3, r3, #2
 800cf66:	3002      	addeq	r0, #2
 800cf68:	07d9      	lsls	r1, r3, #31
 800cf6a:	d403      	bmi.n	800cf74 <__lo0bits+0x4e>
 800cf6c:	085b      	lsrs	r3, r3, #1
 800cf6e:	f100 0001 	add.w	r0, r0, #1
 800cf72:	d003      	beq.n	800cf7c <__lo0bits+0x56>
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	4770      	bx	lr
 800cf78:	2000      	movs	r0, #0
 800cf7a:	4770      	bx	lr
 800cf7c:	2020      	movs	r0, #32
 800cf7e:	4770      	bx	lr

0800cf80 <__i2b>:
 800cf80:	b510      	push	{r4, lr}
 800cf82:	460c      	mov	r4, r1
 800cf84:	2101      	movs	r1, #1
 800cf86:	f7ff febb 	bl	800cd00 <_Balloc>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	b928      	cbnz	r0, 800cf9a <__i2b+0x1a>
 800cf8e:	4b05      	ldr	r3, [pc, #20]	@ (800cfa4 <__i2b+0x24>)
 800cf90:	f240 1145 	movw	r1, #325	@ 0x145
 800cf94:	4804      	ldr	r0, [pc, #16]	@ (800cfa8 <__i2b+0x28>)
 800cf96:	f001 fc4b 	bl	800e830 <__assert_func>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	6144      	str	r4, [r0, #20]
 800cf9e:	6103      	str	r3, [r0, #16]
 800cfa0:	bd10      	pop	{r4, pc}
 800cfa2:	bf00      	nop
 800cfa4:	0800f709 	.word	0x0800f709
 800cfa8:	0800f71a 	.word	0x0800f71a

0800cfac <__multiply>:
 800cfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	690a      	ldr	r2, [r1, #16]
 800cfb4:	460f      	mov	r7, r1
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	6923      	ldr	r3, [r4, #16]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	bfa2      	ittt	ge
 800cfbe:	4623      	movge	r3, r4
 800cfc0:	460c      	movge	r4, r1
 800cfc2:	461f      	movge	r7, r3
 800cfc4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cfc8:	68a3      	ldr	r3, [r4, #8]
 800cfca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cfce:	6861      	ldr	r1, [r4, #4]
 800cfd0:	eb0a 0609 	add.w	r6, sl, r9
 800cfd4:	42b3      	cmp	r3, r6
 800cfd6:	bfb8      	it	lt
 800cfd8:	3101      	addlt	r1, #1
 800cfda:	f7ff fe91 	bl	800cd00 <_Balloc>
 800cfde:	b930      	cbnz	r0, 800cfee <__multiply+0x42>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	4b45      	ldr	r3, [pc, #276]	@ (800d0f8 <__multiply+0x14c>)
 800cfe4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cfe8:	4844      	ldr	r0, [pc, #272]	@ (800d0fc <__multiply+0x150>)
 800cfea:	f001 fc21 	bl	800e830 <__assert_func>
 800cfee:	f100 0514 	add.w	r5, r0, #20
 800cff2:	2200      	movs	r2, #0
 800cff4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cff8:	462b      	mov	r3, r5
 800cffa:	4543      	cmp	r3, r8
 800cffc:	d321      	bcc.n	800d042 <__multiply+0x96>
 800cffe:	f107 0114 	add.w	r1, r7, #20
 800d002:	f104 0214 	add.w	r2, r4, #20
 800d006:	f104 0715 	add.w	r7, r4, #21
 800d00a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d00e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d012:	9302      	str	r3, [sp, #8]
 800d014:	1b13      	subs	r3, r2, r4
 800d016:	3b15      	subs	r3, #21
 800d018:	f023 0303 	bic.w	r3, r3, #3
 800d01c:	3304      	adds	r3, #4
 800d01e:	42ba      	cmp	r2, r7
 800d020:	bf38      	it	cc
 800d022:	2304      	movcc	r3, #4
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	9b02      	ldr	r3, [sp, #8]
 800d028:	9103      	str	r1, [sp, #12]
 800d02a:	428b      	cmp	r3, r1
 800d02c:	d80c      	bhi.n	800d048 <__multiply+0x9c>
 800d02e:	2e00      	cmp	r6, #0
 800d030:	dd03      	ble.n	800d03a <__multiply+0x8e>
 800d032:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d036:	2b00      	cmp	r3, #0
 800d038:	d05b      	beq.n	800d0f2 <__multiply+0x146>
 800d03a:	6106      	str	r6, [r0, #16]
 800d03c:	b005      	add	sp, #20
 800d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d042:	f843 2b04 	str.w	r2, [r3], #4
 800d046:	e7d8      	b.n	800cffa <__multiply+0x4e>
 800d048:	f8b1 a000 	ldrh.w	sl, [r1]
 800d04c:	f1ba 0f00 	cmp.w	sl, #0
 800d050:	d024      	beq.n	800d09c <__multiply+0xf0>
 800d052:	f104 0e14 	add.w	lr, r4, #20
 800d056:	46a9      	mov	r9, r5
 800d058:	f04f 0c00 	mov.w	ip, #0
 800d05c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d060:	f8d9 3000 	ldr.w	r3, [r9]
 800d064:	fa1f fb87 	uxth.w	fp, r7
 800d068:	4572      	cmp	r2, lr
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d070:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d074:	f8d9 7000 	ldr.w	r7, [r9]
 800d078:	4463      	add	r3, ip
 800d07a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d07e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d082:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d086:	b29b      	uxth	r3, r3
 800d088:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d08c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d090:	f849 3b04 	str.w	r3, [r9], #4
 800d094:	d8e2      	bhi.n	800d05c <__multiply+0xb0>
 800d096:	9b01      	ldr	r3, [sp, #4]
 800d098:	f845 c003 	str.w	ip, [r5, r3]
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	3104      	adds	r1, #4
 800d0a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0a4:	f1b9 0f00 	cmp.w	r9, #0
 800d0a8:	d021      	beq.n	800d0ee <__multiply+0x142>
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	f104 0c14 	add.w	ip, r4, #20
 800d0b0:	46ae      	mov	lr, r5
 800d0b2:	f04f 0a00 	mov.w	sl, #0
 800d0b6:	f8bc b000 	ldrh.w	fp, [ip]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d0c0:	fb09 770b 	mla	r7, r9, fp, r7
 800d0c4:	4457      	add	r7, sl
 800d0c6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0ca:	f84e 3b04 	str.w	r3, [lr], #4
 800d0ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0d6:	f8be 3000 	ldrh.w	r3, [lr]
 800d0da:	4562      	cmp	r2, ip
 800d0dc:	fb09 330a 	mla	r3, r9, sl, r3
 800d0e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d0e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0e8:	d8e5      	bhi.n	800d0b6 <__multiply+0x10a>
 800d0ea:	9f01      	ldr	r7, [sp, #4]
 800d0ec:	51eb      	str	r3, [r5, r7]
 800d0ee:	3504      	adds	r5, #4
 800d0f0:	e799      	b.n	800d026 <__multiply+0x7a>
 800d0f2:	3e01      	subs	r6, #1
 800d0f4:	e79b      	b.n	800d02e <__multiply+0x82>
 800d0f6:	bf00      	nop
 800d0f8:	0800f709 	.word	0x0800f709
 800d0fc:	0800f71a 	.word	0x0800f71a

0800d100 <__pow5mult>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	4615      	mov	r5, r2
 800d106:	f012 0203 	ands.w	r2, r2, #3
 800d10a:	4607      	mov	r7, r0
 800d10c:	460e      	mov	r6, r1
 800d10e:	d007      	beq.n	800d120 <__pow5mult+0x20>
 800d110:	3a01      	subs	r2, #1
 800d112:	4c25      	ldr	r4, [pc, #148]	@ (800d1a8 <__pow5mult+0xa8>)
 800d114:	2300      	movs	r3, #0
 800d116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d11a:	f7ff fe53 	bl	800cdc4 <__multadd>
 800d11e:	4606      	mov	r6, r0
 800d120:	10ad      	asrs	r5, r5, #2
 800d122:	d03d      	beq.n	800d1a0 <__pow5mult+0xa0>
 800d124:	69fc      	ldr	r4, [r7, #28]
 800d126:	b97c      	cbnz	r4, 800d148 <__pow5mult+0x48>
 800d128:	2010      	movs	r0, #16
 800d12a:	f7ff fd33 	bl	800cb94 <malloc>
 800d12e:	4602      	mov	r2, r0
 800d130:	61f8      	str	r0, [r7, #28]
 800d132:	b928      	cbnz	r0, 800d140 <__pow5mult+0x40>
 800d134:	4b1d      	ldr	r3, [pc, #116]	@ (800d1ac <__pow5mult+0xac>)
 800d136:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d13a:	481d      	ldr	r0, [pc, #116]	@ (800d1b0 <__pow5mult+0xb0>)
 800d13c:	f001 fb78 	bl	800e830 <__assert_func>
 800d140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d144:	6004      	str	r4, [r0, #0]
 800d146:	60c4      	str	r4, [r0, #12]
 800d148:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d14c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d150:	b94c      	cbnz	r4, 800d166 <__pow5mult+0x66>
 800d152:	f240 2171 	movw	r1, #625	@ 0x271
 800d156:	4638      	mov	r0, r7
 800d158:	f7ff ff12 	bl	800cf80 <__i2b>
 800d15c:	2300      	movs	r3, #0
 800d15e:	4604      	mov	r4, r0
 800d160:	f8c8 0008 	str.w	r0, [r8, #8]
 800d164:	6003      	str	r3, [r0, #0]
 800d166:	f04f 0900 	mov.w	r9, #0
 800d16a:	07eb      	lsls	r3, r5, #31
 800d16c:	d50a      	bpl.n	800d184 <__pow5mult+0x84>
 800d16e:	4631      	mov	r1, r6
 800d170:	4622      	mov	r2, r4
 800d172:	4638      	mov	r0, r7
 800d174:	f7ff ff1a 	bl	800cfac <__multiply>
 800d178:	4680      	mov	r8, r0
 800d17a:	4631      	mov	r1, r6
 800d17c:	4638      	mov	r0, r7
 800d17e:	4646      	mov	r6, r8
 800d180:	f7ff fdfe 	bl	800cd80 <_Bfree>
 800d184:	106d      	asrs	r5, r5, #1
 800d186:	d00b      	beq.n	800d1a0 <__pow5mult+0xa0>
 800d188:	6820      	ldr	r0, [r4, #0]
 800d18a:	b938      	cbnz	r0, 800d19c <__pow5mult+0x9c>
 800d18c:	4622      	mov	r2, r4
 800d18e:	4621      	mov	r1, r4
 800d190:	4638      	mov	r0, r7
 800d192:	f7ff ff0b 	bl	800cfac <__multiply>
 800d196:	6020      	str	r0, [r4, #0]
 800d198:	f8c0 9000 	str.w	r9, [r0]
 800d19c:	4604      	mov	r4, r0
 800d19e:	e7e4      	b.n	800d16a <__pow5mult+0x6a>
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0800f774 	.word	0x0800f774
 800d1ac:	0800f69a 	.word	0x0800f69a
 800d1b0:	0800f71a 	.word	0x0800f71a

0800d1b4 <__lshift>:
 800d1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	4691      	mov	r9, r2
 800d1be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	6849      	ldr	r1, [r1, #4]
 800d1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1ca:	68a3      	ldr	r3, [r4, #8]
 800d1cc:	f108 0601 	add.w	r6, r8, #1
 800d1d0:	42b3      	cmp	r3, r6
 800d1d2:	db0b      	blt.n	800d1ec <__lshift+0x38>
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	f7ff fd93 	bl	800cd00 <_Balloc>
 800d1da:	4605      	mov	r5, r0
 800d1dc:	b948      	cbnz	r0, 800d1f2 <__lshift+0x3e>
 800d1de:	4602      	mov	r2, r0
 800d1e0:	4b28      	ldr	r3, [pc, #160]	@ (800d284 <__lshift+0xd0>)
 800d1e2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d1e6:	4828      	ldr	r0, [pc, #160]	@ (800d288 <__lshift+0xd4>)
 800d1e8:	f001 fb22 	bl	800e830 <__assert_func>
 800d1ec:	3101      	adds	r1, #1
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	e7ee      	b.n	800d1d0 <__lshift+0x1c>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f100 0114 	add.w	r1, r0, #20
 800d1f8:	f100 0210 	add.w	r2, r0, #16
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	4553      	cmp	r3, sl
 800d200:	db33      	blt.n	800d26a <__lshift+0xb6>
 800d202:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d206:	f104 0314 	add.w	r3, r4, #20
 800d20a:	6920      	ldr	r0, [r4, #16]
 800d20c:	f019 091f 	ands.w	r9, r9, #31
 800d210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d218:	d02b      	beq.n	800d272 <__lshift+0xbe>
 800d21a:	f1c9 0e20 	rsb	lr, r9, #32
 800d21e:	468a      	mov	sl, r1
 800d220:	2200      	movs	r2, #0
 800d222:	6818      	ldr	r0, [r3, #0]
 800d224:	fa00 f009 	lsl.w	r0, r0, r9
 800d228:	4310      	orrs	r0, r2
 800d22a:	f84a 0b04 	str.w	r0, [sl], #4
 800d22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d232:	459c      	cmp	ip, r3
 800d234:	fa22 f20e 	lsr.w	r2, r2, lr
 800d238:	d8f3      	bhi.n	800d222 <__lshift+0x6e>
 800d23a:	ebac 0304 	sub.w	r3, ip, r4
 800d23e:	f104 0015 	add.w	r0, r4, #21
 800d242:	3b15      	subs	r3, #21
 800d244:	f023 0303 	bic.w	r3, r3, #3
 800d248:	3304      	adds	r3, #4
 800d24a:	4584      	cmp	ip, r0
 800d24c:	bf38      	it	cc
 800d24e:	2304      	movcc	r3, #4
 800d250:	50ca      	str	r2, [r1, r3]
 800d252:	b10a      	cbz	r2, 800d258 <__lshift+0xa4>
 800d254:	f108 0602 	add.w	r6, r8, #2
 800d258:	3e01      	subs	r6, #1
 800d25a:	4638      	mov	r0, r7
 800d25c:	4621      	mov	r1, r4
 800d25e:	612e      	str	r6, [r5, #16]
 800d260:	f7ff fd8e 	bl	800cd80 <_Bfree>
 800d264:	4628      	mov	r0, r5
 800d266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26a:	3301      	adds	r3, #1
 800d26c:	f842 0f04 	str.w	r0, [r2, #4]!
 800d270:	e7c5      	b.n	800d1fe <__lshift+0x4a>
 800d272:	3904      	subs	r1, #4
 800d274:	f853 2b04 	ldr.w	r2, [r3], #4
 800d278:	459c      	cmp	ip, r3
 800d27a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d27e:	d8f9      	bhi.n	800d274 <__lshift+0xc0>
 800d280:	e7ea      	b.n	800d258 <__lshift+0xa4>
 800d282:	bf00      	nop
 800d284:	0800f709 	.word	0x0800f709
 800d288:	0800f71a 	.word	0x0800f71a

0800d28c <__mcmp>:
 800d28c:	4603      	mov	r3, r0
 800d28e:	690a      	ldr	r2, [r1, #16]
 800d290:	6900      	ldr	r0, [r0, #16]
 800d292:	1a80      	subs	r0, r0, r2
 800d294:	b530      	push	{r4, r5, lr}
 800d296:	d10e      	bne.n	800d2b6 <__mcmp+0x2a>
 800d298:	3314      	adds	r3, #20
 800d29a:	3114      	adds	r1, #20
 800d29c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2ac:	4295      	cmp	r5, r2
 800d2ae:	d003      	beq.n	800d2b8 <__mcmp+0x2c>
 800d2b0:	d205      	bcs.n	800d2be <__mcmp+0x32>
 800d2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b6:	bd30      	pop	{r4, r5, pc}
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	d3f3      	bcc.n	800d2a4 <__mcmp+0x18>
 800d2bc:	e7fb      	b.n	800d2b6 <__mcmp+0x2a>
 800d2be:	2001      	movs	r0, #1
 800d2c0:	e7f9      	b.n	800d2b6 <__mcmp+0x2a>
	...

0800d2c4 <__mdiff>:
 800d2c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c8:	4689      	mov	r9, r1
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4614      	mov	r4, r2
 800d2d0:	4648      	mov	r0, r9
 800d2d2:	f7ff ffdb 	bl	800d28c <__mcmp>
 800d2d6:	1e05      	subs	r5, r0, #0
 800d2d8:	d112      	bne.n	800d300 <__mdiff+0x3c>
 800d2da:	4629      	mov	r1, r5
 800d2dc:	4630      	mov	r0, r6
 800d2de:	f7ff fd0f 	bl	800cd00 <_Balloc>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	b928      	cbnz	r0, 800d2f2 <__mdiff+0x2e>
 800d2e6:	4b41      	ldr	r3, [pc, #260]	@ (800d3ec <__mdiff+0x128>)
 800d2e8:	f240 2137 	movw	r1, #567	@ 0x237
 800d2ec:	4840      	ldr	r0, [pc, #256]	@ (800d3f0 <__mdiff+0x12c>)
 800d2ee:	f001 fa9f 	bl	800e830 <__assert_func>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	b003      	add	sp, #12
 800d2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d300:	bfbc      	itt	lt
 800d302:	464b      	movlt	r3, r9
 800d304:	46a1      	movlt	r9, r4
 800d306:	4630      	mov	r0, r6
 800d308:	bfb8      	it	lt
 800d30a:	2501      	movlt	r5, #1
 800d30c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d310:	bfb4      	ite	lt
 800d312:	461c      	movlt	r4, r3
 800d314:	2500      	movge	r5, #0
 800d316:	f7ff fcf3 	bl	800cd00 <_Balloc>
 800d31a:	4602      	mov	r2, r0
 800d31c:	b918      	cbnz	r0, 800d326 <__mdiff+0x62>
 800d31e:	4b33      	ldr	r3, [pc, #204]	@ (800d3ec <__mdiff+0x128>)
 800d320:	f240 2145 	movw	r1, #581	@ 0x245
 800d324:	e7e2      	b.n	800d2ec <__mdiff+0x28>
 800d326:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d32a:	f104 0e14 	add.w	lr, r4, #20
 800d32e:	6926      	ldr	r6, [r4, #16]
 800d330:	f100 0b14 	add.w	fp, r0, #20
 800d334:	60c5      	str	r5, [r0, #12]
 800d336:	f109 0514 	add.w	r5, r9, #20
 800d33a:	f109 0310 	add.w	r3, r9, #16
 800d33e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d342:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d346:	46d9      	mov	r9, fp
 800d348:	f04f 0c00 	mov.w	ip, #0
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	9b01      	ldr	r3, [sp, #4]
 800d350:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d354:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d358:	4576      	cmp	r6, lr
 800d35a:	9301      	str	r3, [sp, #4]
 800d35c:	fa1f f38a 	uxth.w	r3, sl
 800d360:	4619      	mov	r1, r3
 800d362:	b283      	uxth	r3, r0
 800d364:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d368:	eba1 0303 	sub.w	r3, r1, r3
 800d36c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d370:	4463      	add	r3, ip
 800d372:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d376:	b29b      	uxth	r3, r3
 800d378:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d37c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d380:	f849 3b04 	str.w	r3, [r9], #4
 800d384:	d8e3      	bhi.n	800d34e <__mdiff+0x8a>
 800d386:	1b33      	subs	r3, r6, r4
 800d388:	3415      	adds	r4, #21
 800d38a:	3b15      	subs	r3, #21
 800d38c:	f023 0303 	bic.w	r3, r3, #3
 800d390:	3304      	adds	r3, #4
 800d392:	42a6      	cmp	r6, r4
 800d394:	bf38      	it	cc
 800d396:	2304      	movcc	r3, #4
 800d398:	441d      	add	r5, r3
 800d39a:	445b      	add	r3, fp
 800d39c:	462c      	mov	r4, r5
 800d39e:	461e      	mov	r6, r3
 800d3a0:	4544      	cmp	r4, r8
 800d3a2:	d30e      	bcc.n	800d3c2 <__mdiff+0xfe>
 800d3a4:	f108 0103 	add.w	r1, r8, #3
 800d3a8:	1b49      	subs	r1, r1, r5
 800d3aa:	3d03      	subs	r5, #3
 800d3ac:	f021 0103 	bic.w	r1, r1, #3
 800d3b0:	45a8      	cmp	r8, r5
 800d3b2:	bf38      	it	cc
 800d3b4:	2100      	movcc	r1, #0
 800d3b6:	440b      	add	r3, r1
 800d3b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3bc:	b199      	cbz	r1, 800d3e6 <__mdiff+0x122>
 800d3be:	6117      	str	r7, [r2, #16]
 800d3c0:	e79a      	b.n	800d2f8 <__mdiff+0x34>
 800d3c2:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3c6:	46e6      	mov	lr, ip
 800d3c8:	fa1f fc81 	uxth.w	ip, r1
 800d3cc:	0c08      	lsrs	r0, r1, #16
 800d3ce:	4471      	add	r1, lr
 800d3d0:	44f4      	add	ip, lr
 800d3d2:	b289      	uxth	r1, r1
 800d3d4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d3d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3e0:	f846 1b04 	str.w	r1, [r6], #4
 800d3e4:	e7dc      	b.n	800d3a0 <__mdiff+0xdc>
 800d3e6:	3f01      	subs	r7, #1
 800d3e8:	e7e6      	b.n	800d3b8 <__mdiff+0xf4>
 800d3ea:	bf00      	nop
 800d3ec:	0800f709 	.word	0x0800f709
 800d3f0:	0800f71a 	.word	0x0800f71a

0800d3f4 <__ulp>:
 800d3f4:	b082      	sub	sp, #8
 800d3f6:	4b11      	ldr	r3, [pc, #68]	@ (800d43c <__ulp+0x48>)
 800d3f8:	ed8d 0b00 	vstr	d0, [sp]
 800d3fc:	9a01      	ldr	r2, [sp, #4]
 800d3fe:	4013      	ands	r3, r2
 800d400:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d404:	2b00      	cmp	r3, #0
 800d406:	dc08      	bgt.n	800d41a <__ulp+0x26>
 800d408:	425b      	negs	r3, r3
 800d40a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d40e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d412:	da04      	bge.n	800d41e <__ulp+0x2a>
 800d414:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d418:	4113      	asrs	r3, r2
 800d41a:	2200      	movs	r2, #0
 800d41c:	e008      	b.n	800d430 <__ulp+0x3c>
 800d41e:	f1a2 0314 	sub.w	r3, r2, #20
 800d422:	2b1e      	cmp	r3, #30
 800d424:	bfd6      	itet	le
 800d426:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d42a:	2201      	movgt	r2, #1
 800d42c:	40da      	lsrle	r2, r3
 800d42e:	2300      	movs	r3, #0
 800d430:	4619      	mov	r1, r3
 800d432:	4610      	mov	r0, r2
 800d434:	ec41 0b10 	vmov	d0, r0, r1
 800d438:	b002      	add	sp, #8
 800d43a:	4770      	bx	lr
 800d43c:	7ff00000 	.word	0x7ff00000

0800d440 <__b2d>:
 800d440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d444:	6906      	ldr	r6, [r0, #16]
 800d446:	f100 0814 	add.w	r8, r0, #20
 800d44a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d44e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d452:	1f37      	subs	r7, r6, #4
 800d454:	4610      	mov	r0, r2
 800d456:	f7ff fd47 	bl	800cee8 <__hi0bits>
 800d45a:	f1c0 0320 	rsb	r3, r0, #32
 800d45e:	280a      	cmp	r0, #10
 800d460:	600b      	str	r3, [r1, #0]
 800d462:	491d      	ldr	r1, [pc, #116]	@ (800d4d8 <__b2d+0x98>)
 800d464:	dc16      	bgt.n	800d494 <__b2d+0x54>
 800d466:	f1c0 0c0b 	rsb	ip, r0, #11
 800d46a:	45b8      	cmp	r8, r7
 800d46c:	f100 0015 	add.w	r0, r0, #21
 800d470:	fa22 f30c 	lsr.w	r3, r2, ip
 800d474:	fa02 f000 	lsl.w	r0, r2, r0
 800d478:	ea43 0501 	orr.w	r5, r3, r1
 800d47c:	bf34      	ite	cc
 800d47e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d482:	2300      	movcs	r3, #0
 800d484:	fa23 f30c 	lsr.w	r3, r3, ip
 800d488:	4303      	orrs	r3, r0
 800d48a:	461c      	mov	r4, r3
 800d48c:	ec45 4b10 	vmov	d0, r4, r5
 800d490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d494:	45b8      	cmp	r8, r7
 800d496:	bf3a      	itte	cc
 800d498:	f1a6 0708 	subcc.w	r7, r6, #8
 800d49c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d4a0:	2300      	movcs	r3, #0
 800d4a2:	380b      	subs	r0, #11
 800d4a4:	d014      	beq.n	800d4d0 <__b2d+0x90>
 800d4a6:	f1c0 0120 	rsb	r1, r0, #32
 800d4aa:	4082      	lsls	r2, r0
 800d4ac:	4547      	cmp	r7, r8
 800d4ae:	fa23 f401 	lsr.w	r4, r3, r1
 800d4b2:	fa03 f300 	lsl.w	r3, r3, r0
 800d4b6:	ea42 0204 	orr.w	r2, r2, r4
 800d4ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d4be:	bf8c      	ite	hi
 800d4c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d4c4:	2200      	movls	r2, #0
 800d4c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d4ca:	40ca      	lsrs	r2, r1
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	e7dc      	b.n	800d48a <__b2d+0x4a>
 800d4d0:	ea42 0501 	orr.w	r5, r2, r1
 800d4d4:	e7d9      	b.n	800d48a <__b2d+0x4a>
 800d4d6:	bf00      	nop
 800d4d8:	3ff00000 	.word	0x3ff00000

0800d4dc <__d2b>:
 800d4dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4e0:	460f      	mov	r7, r1
 800d4e2:	2101      	movs	r1, #1
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	ec59 8b10 	vmov	r8, r9, d0
 800d4ea:	f7ff fc09 	bl	800cd00 <_Balloc>
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	b930      	cbnz	r0, 800d500 <__d2b+0x24>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	4b23      	ldr	r3, [pc, #140]	@ (800d584 <__d2b+0xa8>)
 800d4f6:	f240 310f 	movw	r1, #783	@ 0x30f
 800d4fa:	4823      	ldr	r0, [pc, #140]	@ (800d588 <__d2b+0xac>)
 800d4fc:	f001 f998 	bl	800e830 <__assert_func>
 800d500:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d504:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d508:	b10d      	cbz	r5, 800d50e <__d2b+0x32>
 800d50a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d50e:	9301      	str	r3, [sp, #4]
 800d510:	f1b8 0300 	subs.w	r3, r8, #0
 800d514:	d023      	beq.n	800d55e <__d2b+0x82>
 800d516:	4668      	mov	r0, sp
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	f7ff fd04 	bl	800cf26 <__lo0bits>
 800d51e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d522:	b1d0      	cbz	r0, 800d55a <__d2b+0x7e>
 800d524:	f1c0 0320 	rsb	r3, r0, #32
 800d528:	fa02 f303 	lsl.w	r3, r2, r3
 800d52c:	40c2      	lsrs	r2, r0
 800d52e:	430b      	orrs	r3, r1
 800d530:	9201      	str	r2, [sp, #4]
 800d532:	6163      	str	r3, [r4, #20]
 800d534:	9b01      	ldr	r3, [sp, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	61a3      	str	r3, [r4, #24]
 800d53a:	bf0c      	ite	eq
 800d53c:	2201      	moveq	r2, #1
 800d53e:	2202      	movne	r2, #2
 800d540:	6122      	str	r2, [r4, #16]
 800d542:	b1a5      	cbz	r5, 800d56e <__d2b+0x92>
 800d544:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d548:	4405      	add	r5, r0
 800d54a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d54e:	603d      	str	r5, [r7, #0]
 800d550:	6030      	str	r0, [r6, #0]
 800d552:	4620      	mov	r0, r4
 800d554:	b003      	add	sp, #12
 800d556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d55a:	6161      	str	r1, [r4, #20]
 800d55c:	e7ea      	b.n	800d534 <__d2b+0x58>
 800d55e:	a801      	add	r0, sp, #4
 800d560:	f7ff fce1 	bl	800cf26 <__lo0bits>
 800d564:	9b01      	ldr	r3, [sp, #4]
 800d566:	3020      	adds	r0, #32
 800d568:	2201      	movs	r2, #1
 800d56a:	6163      	str	r3, [r4, #20]
 800d56c:	e7e8      	b.n	800d540 <__d2b+0x64>
 800d56e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d572:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d576:	6038      	str	r0, [r7, #0]
 800d578:	6918      	ldr	r0, [r3, #16]
 800d57a:	f7ff fcb5 	bl	800cee8 <__hi0bits>
 800d57e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d582:	e7e5      	b.n	800d550 <__d2b+0x74>
 800d584:	0800f709 	.word	0x0800f709
 800d588:	0800f71a 	.word	0x0800f71a

0800d58c <__ratio>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	b085      	sub	sp, #20
 800d592:	e9cd 1000 	strd	r1, r0, [sp]
 800d596:	a902      	add	r1, sp, #8
 800d598:	f7ff ff52 	bl	800d440 <__b2d>
 800d59c:	a903      	add	r1, sp, #12
 800d59e:	9800      	ldr	r0, [sp, #0]
 800d5a0:	ec55 4b10 	vmov	r4, r5, d0
 800d5a4:	f7ff ff4c 	bl	800d440 <__b2d>
 800d5a8:	9b01      	ldr	r3, [sp, #4]
 800d5aa:	462f      	mov	r7, r5
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	6919      	ldr	r1, [r3, #16]
 800d5b0:	9b00      	ldr	r3, [sp, #0]
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	1ac9      	subs	r1, r1, r3
 800d5b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d5ba:	ec5b ab10 	vmov	sl, fp, d0
 800d5be:	1a9b      	subs	r3, r3, r2
 800d5c0:	46d9      	mov	r9, fp
 800d5c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	bfcd      	iteet	gt
 800d5ca:	462a      	movgt	r2, r5
 800d5cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d5d0:	465a      	movle	r2, fp
 800d5d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d5d6:	bfd8      	it	le
 800d5d8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d5dc:	4652      	mov	r2, sl
 800d5de:	4639      	mov	r1, r7
 800d5e0:	464b      	mov	r3, r9
 800d5e2:	f7f3 f937 	bl	8000854 <__aeabi_ddiv>
 800d5e6:	ec41 0b10 	vmov	d0, r0, r1
 800d5ea:	b005      	add	sp, #20
 800d5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5f0 <__copybits>:
 800d5f0:	3901      	subs	r1, #1
 800d5f2:	f102 0314 	add.w	r3, r2, #20
 800d5f6:	1149      	asrs	r1, r1, #5
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	3101      	adds	r1, #1
 800d5fc:	6914      	ldr	r4, [r2, #16]
 800d5fe:	1f05      	subs	r5, r0, #4
 800d600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d604:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d608:	42a3      	cmp	r3, r4
 800d60a:	d30c      	bcc.n	800d626 <__copybits+0x36>
 800d60c:	1aa3      	subs	r3, r4, r2
 800d60e:	3211      	adds	r2, #17
 800d610:	3b11      	subs	r3, #17
 800d612:	f023 0303 	bic.w	r3, r3, #3
 800d616:	42a2      	cmp	r2, r4
 800d618:	bf88      	it	hi
 800d61a:	2300      	movhi	r3, #0
 800d61c:	4418      	add	r0, r3
 800d61e:	2300      	movs	r3, #0
 800d620:	4288      	cmp	r0, r1
 800d622:	d305      	bcc.n	800d630 <__copybits+0x40>
 800d624:	bd70      	pop	{r4, r5, r6, pc}
 800d626:	f853 6b04 	ldr.w	r6, [r3], #4
 800d62a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d62e:	e7eb      	b.n	800d608 <__copybits+0x18>
 800d630:	f840 3b04 	str.w	r3, [r0], #4
 800d634:	e7f4      	b.n	800d620 <__copybits+0x30>

0800d636 <__any_on>:
 800d636:	f100 0214 	add.w	r2, r0, #20
 800d63a:	114b      	asrs	r3, r1, #5
 800d63c:	6900      	ldr	r0, [r0, #16]
 800d63e:	4298      	cmp	r0, r3
 800d640:	b510      	push	{r4, lr}
 800d642:	db11      	blt.n	800d668 <__any_on+0x32>
 800d644:	dd0a      	ble.n	800d65c <__any_on+0x26>
 800d646:	f011 011f 	ands.w	r1, r1, #31
 800d64a:	d007      	beq.n	800d65c <__any_on+0x26>
 800d64c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d650:	fa24 f001 	lsr.w	r0, r4, r1
 800d654:	fa00 f101 	lsl.w	r1, r0, r1
 800d658:	428c      	cmp	r4, r1
 800d65a:	d10b      	bne.n	800d674 <__any_on+0x3e>
 800d65c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d660:	4293      	cmp	r3, r2
 800d662:	d803      	bhi.n	800d66c <__any_on+0x36>
 800d664:	2000      	movs	r0, #0
 800d666:	bd10      	pop	{r4, pc}
 800d668:	4603      	mov	r3, r0
 800d66a:	e7f7      	b.n	800d65c <__any_on+0x26>
 800d66c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d670:	2900      	cmp	r1, #0
 800d672:	d0f5      	beq.n	800d660 <__any_on+0x2a>
 800d674:	2001      	movs	r0, #1
 800d676:	e7f6      	b.n	800d666 <__any_on+0x30>

0800d678 <sulp>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	4604      	mov	r4, r0
 800d67c:	460d      	mov	r5, r1
 800d67e:	4616      	mov	r6, r2
 800d680:	ec45 4b10 	vmov	d0, r4, r5
 800d684:	f7ff feb6 	bl	800d3f4 <__ulp>
 800d688:	ec51 0b10 	vmov	r0, r1, d0
 800d68c:	b17e      	cbz	r6, 800d6ae <sulp+0x36>
 800d68e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d692:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d696:	2b00      	cmp	r3, #0
 800d698:	dd09      	ble.n	800d6ae <sulp+0x36>
 800d69a:	051b      	lsls	r3, r3, #20
 800d69c:	2400      	movs	r4, #0
 800d69e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d6a8:	462b      	mov	r3, r5
 800d6aa:	f7f2 ffa9 	bl	8000600 <__aeabi_dmul>
 800d6ae:	ec41 0b10 	vmov	d0, r0, r1
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	0000      	movs	r0, r0
	...

0800d6b8 <_strtod_l>:
 800d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	b09f      	sub	sp, #124	@ 0x7c
 800d6be:	460c      	mov	r4, r1
 800d6c0:	f04f 0a00 	mov.w	sl, #0
 800d6c4:	f04f 0b00 	mov.w	fp, #0
 800d6c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	9005      	str	r0, [sp, #20]
 800d6ce:	921a      	str	r2, [sp, #104]	@ 0x68
 800d6d0:	460a      	mov	r2, r1
 800d6d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6d4:	7811      	ldrb	r1, [r2, #0]
 800d6d6:	292b      	cmp	r1, #43	@ 0x2b
 800d6d8:	d04a      	beq.n	800d770 <_strtod_l+0xb8>
 800d6da:	d838      	bhi.n	800d74e <_strtod_l+0x96>
 800d6dc:	290d      	cmp	r1, #13
 800d6de:	d832      	bhi.n	800d746 <_strtod_l+0x8e>
 800d6e0:	2908      	cmp	r1, #8
 800d6e2:	d832      	bhi.n	800d74a <_strtod_l+0x92>
 800d6e4:	2900      	cmp	r1, #0
 800d6e6:	d03b      	beq.n	800d760 <_strtod_l+0xa8>
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d6ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d6ee:	782a      	ldrb	r2, [r5, #0]
 800d6f0:	2a30      	cmp	r2, #48	@ 0x30
 800d6f2:	f040 80b3 	bne.w	800d85c <_strtod_l+0x1a4>
 800d6f6:	786a      	ldrb	r2, [r5, #1]
 800d6f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d6fc:	2a58      	cmp	r2, #88	@ 0x58
 800d6fe:	d16e      	bne.n	800d7de <_strtod_l+0x126>
 800d700:	9302      	str	r3, [sp, #8]
 800d702:	a919      	add	r1, sp, #100	@ 0x64
 800d704:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d706:	4a90      	ldr	r2, [pc, #576]	@ (800d948 <_strtod_l+0x290>)
 800d708:	9301      	str	r3, [sp, #4]
 800d70a:	ab1a      	add	r3, sp, #104	@ 0x68
 800d70c:	9805      	ldr	r0, [sp, #20]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d712:	f001 f925 	bl	800e960 <__gethex>
 800d716:	f010 060f 	ands.w	r6, r0, #15
 800d71a:	4604      	mov	r4, r0
 800d71c:	d005      	beq.n	800d72a <_strtod_l+0x72>
 800d71e:	2e06      	cmp	r6, #6
 800d720:	d128      	bne.n	800d774 <_strtod_l+0xbc>
 800d722:	3501      	adds	r5, #1
 800d724:	2300      	movs	r3, #0
 800d726:	9519      	str	r5, [sp, #100]	@ 0x64
 800d728:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d72a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f040 858e 	bne.w	800e24e <_strtod_l+0xb96>
 800d732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d734:	b1cb      	cbz	r3, 800d76a <_strtod_l+0xb2>
 800d736:	4652      	mov	r2, sl
 800d738:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d73c:	ec43 2b10 	vmov	d0, r2, r3
 800d740:	b01f      	add	sp, #124	@ 0x7c
 800d742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d746:	2920      	cmp	r1, #32
 800d748:	d1ce      	bne.n	800d6e8 <_strtod_l+0x30>
 800d74a:	3201      	adds	r2, #1
 800d74c:	e7c1      	b.n	800d6d2 <_strtod_l+0x1a>
 800d74e:	292d      	cmp	r1, #45	@ 0x2d
 800d750:	d1ca      	bne.n	800d6e8 <_strtod_l+0x30>
 800d752:	2101      	movs	r1, #1
 800d754:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d756:	1c51      	adds	r1, r2, #1
 800d758:	9119      	str	r1, [sp, #100]	@ 0x64
 800d75a:	7852      	ldrb	r2, [r2, #1]
 800d75c:	2a00      	cmp	r2, #0
 800d75e:	d1c5      	bne.n	800d6ec <_strtod_l+0x34>
 800d760:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d762:	9419      	str	r4, [sp, #100]	@ 0x64
 800d764:	2b00      	cmp	r3, #0
 800d766:	f040 8570 	bne.w	800e24a <_strtod_l+0xb92>
 800d76a:	4652      	mov	r2, sl
 800d76c:	465b      	mov	r3, fp
 800d76e:	e7e5      	b.n	800d73c <_strtod_l+0x84>
 800d770:	2100      	movs	r1, #0
 800d772:	e7ef      	b.n	800d754 <_strtod_l+0x9c>
 800d774:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d776:	b13a      	cbz	r2, 800d788 <_strtod_l+0xd0>
 800d778:	2135      	movs	r1, #53	@ 0x35
 800d77a:	a81c      	add	r0, sp, #112	@ 0x70
 800d77c:	f7ff ff38 	bl	800d5f0 <__copybits>
 800d780:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d782:	9805      	ldr	r0, [sp, #20]
 800d784:	f7ff fafc 	bl	800cd80 <_Bfree>
 800d788:	3e01      	subs	r6, #1
 800d78a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d78c:	2e04      	cmp	r6, #4
 800d78e:	d806      	bhi.n	800d79e <_strtod_l+0xe6>
 800d790:	e8df f006 	tbb	[pc, r6]
 800d794:	201d0314 	.word	0x201d0314
 800d798:	14          	.byte	0x14
 800d799:	00          	.byte	0x00
 800d79a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d79e:	05e1      	lsls	r1, r4, #23
 800d7a0:	bf48      	it	mi
 800d7a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d7a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7aa:	0d1b      	lsrs	r3, r3, #20
 800d7ac:	051b      	lsls	r3, r3, #20
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1bb      	bne.n	800d72a <_strtod_l+0x72>
 800d7b2:	f7fe fb0f 	bl	800bdd4 <__errno>
 800d7b6:	2322      	movs	r3, #34	@ 0x22
 800d7b8:	6003      	str	r3, [r0, #0]
 800d7ba:	e7b6      	b.n	800d72a <_strtod_l+0x72>
 800d7bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d7c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d7c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d7c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d7cc:	e7e7      	b.n	800d79e <_strtod_l+0xe6>
 800d7ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d950 <_strtod_l+0x298>
 800d7d2:	e7e4      	b.n	800d79e <_strtod_l+0xe6>
 800d7d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d7d8:	f04f 3aff 	mov.w	sl, #4294967295
 800d7dc:	e7df      	b.n	800d79e <_strtod_l+0xe6>
 800d7de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7e4:	785b      	ldrb	r3, [r3, #1]
 800d7e6:	2b30      	cmp	r3, #48	@ 0x30
 800d7e8:	d0f9      	beq.n	800d7de <_strtod_l+0x126>
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d09d      	beq.n	800d72a <_strtod_l+0x72>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7f2:	220a      	movs	r2, #10
 800d7f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	461f      	mov	r7, r3
 800d7fc:	9308      	str	r3, [sp, #32]
 800d7fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d800:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d802:	7805      	ldrb	r5, [r0, #0]
 800d804:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d808:	b2d9      	uxtb	r1, r3
 800d80a:	2909      	cmp	r1, #9
 800d80c:	d928      	bls.n	800d860 <_strtod_l+0x1a8>
 800d80e:	2201      	movs	r2, #1
 800d810:	494e      	ldr	r1, [pc, #312]	@ (800d94c <_strtod_l+0x294>)
 800d812:	f000 ffd5 	bl	800e7c0 <strncmp>
 800d816:	2800      	cmp	r0, #0
 800d818:	d033      	beq.n	800d882 <_strtod_l+0x1ca>
 800d81a:	2000      	movs	r0, #0
 800d81c:	462a      	mov	r2, r5
 800d81e:	463d      	mov	r5, r7
 800d820:	4681      	mov	r9, r0
 800d822:	4603      	mov	r3, r0
 800d824:	2a65      	cmp	r2, #101	@ 0x65
 800d826:	d001      	beq.n	800d82c <_strtod_l+0x174>
 800d828:	2a45      	cmp	r2, #69	@ 0x45
 800d82a:	d114      	bne.n	800d856 <_strtod_l+0x19e>
 800d82c:	b91d      	cbnz	r5, 800d836 <_strtod_l+0x17e>
 800d82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d830:	4302      	orrs	r2, r0
 800d832:	d095      	beq.n	800d760 <_strtod_l+0xa8>
 800d834:	2500      	movs	r5, #0
 800d836:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d838:	1c62      	adds	r2, r4, #1
 800d83a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d83c:	7862      	ldrb	r2, [r4, #1]
 800d83e:	2a2b      	cmp	r2, #43	@ 0x2b
 800d840:	d078      	beq.n	800d934 <_strtod_l+0x27c>
 800d842:	2a2d      	cmp	r2, #45	@ 0x2d
 800d844:	d07c      	beq.n	800d940 <_strtod_l+0x288>
 800d846:	f04f 0c00 	mov.w	ip, #0
 800d84a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d84e:	2909      	cmp	r1, #9
 800d850:	f240 8084 	bls.w	800d95c <_strtod_l+0x2a4>
 800d854:	9419      	str	r4, [sp, #100]	@ 0x64
 800d856:	f04f 0800 	mov.w	r8, #0
 800d85a:	e0a4      	b.n	800d9a6 <_strtod_l+0x2ee>
 800d85c:	2300      	movs	r3, #0
 800d85e:	e7c7      	b.n	800d7f0 <_strtod_l+0x138>
 800d860:	2f08      	cmp	r7, #8
 800d862:	f100 0001 	add.w	r0, r0, #1
 800d866:	f107 0701 	add.w	r7, r7, #1
 800d86a:	bfd5      	itete	le
 800d86c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d86e:	9908      	ldrgt	r1, [sp, #32]
 800d870:	fb02 3301 	mlale	r3, r2, r1, r3
 800d874:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d878:	bfd4      	ite	le
 800d87a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d87c:	9308      	strgt	r3, [sp, #32]
 800d87e:	9019      	str	r0, [sp, #100]	@ 0x64
 800d880:	e7be      	b.n	800d800 <_strtod_l+0x148>
 800d882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d884:	1c5a      	adds	r2, r3, #1
 800d886:	9219      	str	r2, [sp, #100]	@ 0x64
 800d888:	785a      	ldrb	r2, [r3, #1]
 800d88a:	b37f      	cbz	r7, 800d8ec <_strtod_l+0x234>
 800d88c:	4681      	mov	r9, r0
 800d88e:	463d      	mov	r5, r7
 800d890:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d894:	2b09      	cmp	r3, #9
 800d896:	d912      	bls.n	800d8be <_strtod_l+0x206>
 800d898:	2301      	movs	r3, #1
 800d89a:	e7c3      	b.n	800d824 <_strtod_l+0x16c>
 800d89c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d89e:	3001      	adds	r0, #1
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8a4:	785a      	ldrb	r2, [r3, #1]
 800d8a6:	2a30      	cmp	r2, #48	@ 0x30
 800d8a8:	d0f8      	beq.n	800d89c <_strtod_l+0x1e4>
 800d8aa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d8ae:	2b08      	cmp	r3, #8
 800d8b0:	f200 84d2 	bhi.w	800e258 <_strtod_l+0xba0>
 800d8b4:	4681      	mov	r9, r0
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8be:	3a30      	subs	r2, #48	@ 0x30
 800d8c0:	f100 0301 	add.w	r3, r0, #1
 800d8c4:	d02a      	beq.n	800d91c <_strtod_l+0x264>
 800d8c6:	4499      	add	r9, r3
 800d8c8:	eb00 0c05 	add.w	ip, r0, r5
 800d8cc:	462b      	mov	r3, r5
 800d8ce:	210a      	movs	r1, #10
 800d8d0:	4563      	cmp	r3, ip
 800d8d2:	d10d      	bne.n	800d8f0 <_strtod_l+0x238>
 800d8d4:	1c69      	adds	r1, r5, #1
 800d8d6:	4401      	add	r1, r0
 800d8d8:	4428      	add	r0, r5
 800d8da:	2808      	cmp	r0, #8
 800d8dc:	dc16      	bgt.n	800d90c <_strtod_l+0x254>
 800d8de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d8e0:	230a      	movs	r3, #10
 800d8e2:	fb03 2300 	mla	r3, r3, r0, r2
 800d8e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e018      	b.n	800d91e <_strtod_l+0x266>
 800d8ec:	4638      	mov	r0, r7
 800d8ee:	e7da      	b.n	800d8a6 <_strtod_l+0x1ee>
 800d8f0:	2b08      	cmp	r3, #8
 800d8f2:	f103 0301 	add.w	r3, r3, #1
 800d8f6:	dc03      	bgt.n	800d900 <_strtod_l+0x248>
 800d8f8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d8fa:	434e      	muls	r6, r1
 800d8fc:	960a      	str	r6, [sp, #40]	@ 0x28
 800d8fe:	e7e7      	b.n	800d8d0 <_strtod_l+0x218>
 800d900:	2b10      	cmp	r3, #16
 800d902:	bfde      	ittt	le
 800d904:	9e08      	ldrle	r6, [sp, #32]
 800d906:	434e      	mulle	r6, r1
 800d908:	9608      	strle	r6, [sp, #32]
 800d90a:	e7e1      	b.n	800d8d0 <_strtod_l+0x218>
 800d90c:	280f      	cmp	r0, #15
 800d90e:	dceb      	bgt.n	800d8e8 <_strtod_l+0x230>
 800d910:	9808      	ldr	r0, [sp, #32]
 800d912:	230a      	movs	r3, #10
 800d914:	fb03 2300 	mla	r3, r3, r0, r2
 800d918:	9308      	str	r3, [sp, #32]
 800d91a:	e7e5      	b.n	800d8e8 <_strtod_l+0x230>
 800d91c:	4629      	mov	r1, r5
 800d91e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d920:	460d      	mov	r5, r1
 800d922:	1c50      	adds	r0, r2, #1
 800d924:	9019      	str	r0, [sp, #100]	@ 0x64
 800d926:	4618      	mov	r0, r3
 800d928:	7852      	ldrb	r2, [r2, #1]
 800d92a:	e7b1      	b.n	800d890 <_strtod_l+0x1d8>
 800d92c:	f04f 0900 	mov.w	r9, #0
 800d930:	2301      	movs	r3, #1
 800d932:	e77c      	b.n	800d82e <_strtod_l+0x176>
 800d934:	f04f 0c00 	mov.w	ip, #0
 800d938:	1ca2      	adds	r2, r4, #2
 800d93a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d93c:	78a2      	ldrb	r2, [r4, #2]
 800d93e:	e784      	b.n	800d84a <_strtod_l+0x192>
 800d940:	f04f 0c01 	mov.w	ip, #1
 800d944:	e7f8      	b.n	800d938 <_strtod_l+0x280>
 800d946:	bf00      	nop
 800d948:	0800f888 	.word	0x0800f888
 800d94c:	0800f870 	.word	0x0800f870
 800d950:	7ff00000 	.word	0x7ff00000
 800d954:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d956:	1c51      	adds	r1, r2, #1
 800d958:	9119      	str	r1, [sp, #100]	@ 0x64
 800d95a:	7852      	ldrb	r2, [r2, #1]
 800d95c:	2a30      	cmp	r2, #48	@ 0x30
 800d95e:	d0f9      	beq.n	800d954 <_strtod_l+0x29c>
 800d960:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d964:	2908      	cmp	r1, #8
 800d966:	f63f af76 	bhi.w	800d856 <_strtod_l+0x19e>
 800d96a:	3a30      	subs	r2, #48	@ 0x30
 800d96c:	f04f 080a 	mov.w	r8, #10
 800d970:	920e      	str	r2, [sp, #56]	@ 0x38
 800d972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d974:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d976:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d978:	1c56      	adds	r6, r2, #1
 800d97a:	9619      	str	r6, [sp, #100]	@ 0x64
 800d97c:	7852      	ldrb	r2, [r2, #1]
 800d97e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d982:	f1be 0f09 	cmp.w	lr, #9
 800d986:	d939      	bls.n	800d9fc <_strtod_l+0x344>
 800d988:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d98a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d98e:	1a76      	subs	r6, r6, r1
 800d990:	2e08      	cmp	r6, #8
 800d992:	dc03      	bgt.n	800d99c <_strtod_l+0x2e4>
 800d994:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d996:	4588      	cmp	r8, r1
 800d998:	bfa8      	it	ge
 800d99a:	4688      	movge	r8, r1
 800d99c:	f1bc 0f00 	cmp.w	ip, #0
 800d9a0:	d001      	beq.n	800d9a6 <_strtod_l+0x2ee>
 800d9a2:	f1c8 0800 	rsb	r8, r8, #0
 800d9a6:	2d00      	cmp	r5, #0
 800d9a8:	d14e      	bne.n	800da48 <_strtod_l+0x390>
 800d9aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9ac:	4308      	orrs	r0, r1
 800d9ae:	f47f aebc 	bne.w	800d72a <_strtod_l+0x72>
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f47f aed4 	bne.w	800d760 <_strtod_l+0xa8>
 800d9b8:	2a69      	cmp	r2, #105	@ 0x69
 800d9ba:	d028      	beq.n	800da0e <_strtod_l+0x356>
 800d9bc:	dc25      	bgt.n	800da0a <_strtod_l+0x352>
 800d9be:	2a49      	cmp	r2, #73	@ 0x49
 800d9c0:	d025      	beq.n	800da0e <_strtod_l+0x356>
 800d9c2:	2a4e      	cmp	r2, #78	@ 0x4e
 800d9c4:	f47f aecc 	bne.w	800d760 <_strtod_l+0xa8>
 800d9c8:	499b      	ldr	r1, [pc, #620]	@ (800dc38 <_strtod_l+0x580>)
 800d9ca:	a819      	add	r0, sp, #100	@ 0x64
 800d9cc:	f001 f9e8 	bl	800eda0 <__match>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	f43f aec5 	beq.w	800d760 <_strtod_l+0xa8>
 800d9d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	2b28      	cmp	r3, #40	@ 0x28
 800d9dc:	d12e      	bne.n	800da3c <_strtod_l+0x384>
 800d9de:	aa1c      	add	r2, sp, #112	@ 0x70
 800d9e0:	4996      	ldr	r1, [pc, #600]	@ (800dc3c <_strtod_l+0x584>)
 800d9e2:	a819      	add	r0, sp, #100	@ 0x64
 800d9e4:	f001 f9f0 	bl	800edc8 <__hexnan>
 800d9e8:	2805      	cmp	r0, #5
 800d9ea:	d127      	bne.n	800da3c <_strtod_l+0x384>
 800d9ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d9ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d9f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d9f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d9fa:	e696      	b.n	800d72a <_strtod_l+0x72>
 800d9fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d9fe:	fb08 2101 	mla	r1, r8, r1, r2
 800da02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800da06:	920e      	str	r2, [sp, #56]	@ 0x38
 800da08:	e7b5      	b.n	800d976 <_strtod_l+0x2be>
 800da0a:	2a6e      	cmp	r2, #110	@ 0x6e
 800da0c:	e7da      	b.n	800d9c4 <_strtod_l+0x30c>
 800da0e:	498c      	ldr	r1, [pc, #560]	@ (800dc40 <_strtod_l+0x588>)
 800da10:	a819      	add	r0, sp, #100	@ 0x64
 800da12:	f001 f9c5 	bl	800eda0 <__match>
 800da16:	2800      	cmp	r0, #0
 800da18:	f43f aea2 	beq.w	800d760 <_strtod_l+0xa8>
 800da1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da1e:	a819      	add	r0, sp, #100	@ 0x64
 800da20:	4988      	ldr	r1, [pc, #544]	@ (800dc44 <_strtod_l+0x58c>)
 800da22:	3b01      	subs	r3, #1
 800da24:	9319      	str	r3, [sp, #100]	@ 0x64
 800da26:	f001 f9bb 	bl	800eda0 <__match>
 800da2a:	b910      	cbnz	r0, 800da32 <_strtod_l+0x37a>
 800da2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da2e:	3301      	adds	r3, #1
 800da30:	9319      	str	r3, [sp, #100]	@ 0x64
 800da32:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800dc54 <_strtod_l+0x59c>
 800da36:	f04f 0a00 	mov.w	sl, #0
 800da3a:	e676      	b.n	800d72a <_strtod_l+0x72>
 800da3c:	4882      	ldr	r0, [pc, #520]	@ (800dc48 <_strtod_l+0x590>)
 800da3e:	f000 feef 	bl	800e820 <nan>
 800da42:	ec5b ab10 	vmov	sl, fp, d0
 800da46:	e670      	b.n	800d72a <_strtod_l+0x72>
 800da48:	eba8 0309 	sub.w	r3, r8, r9
 800da4c:	2f00      	cmp	r7, #0
 800da4e:	bf08      	it	eq
 800da50:	462f      	moveq	r7, r5
 800da52:	2d10      	cmp	r5, #16
 800da54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800da56:	462c      	mov	r4, r5
 800da58:	9309      	str	r3, [sp, #36]	@ 0x24
 800da5a:	bfa8      	it	ge
 800da5c:	2410      	movge	r4, #16
 800da5e:	f7f2 fd55 	bl	800050c <__aeabi_ui2d>
 800da62:	2d09      	cmp	r5, #9
 800da64:	4682      	mov	sl, r0
 800da66:	468b      	mov	fp, r1
 800da68:	dc13      	bgt.n	800da92 <_strtod_l+0x3da>
 800da6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f43f ae5c 	beq.w	800d72a <_strtod_l+0x72>
 800da72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da74:	dd78      	ble.n	800db68 <_strtod_l+0x4b0>
 800da76:	2b16      	cmp	r3, #22
 800da78:	dc5f      	bgt.n	800db3a <_strtod_l+0x482>
 800da7a:	4974      	ldr	r1, [pc, #464]	@ (800dc4c <_strtod_l+0x594>)
 800da7c:	4652      	mov	r2, sl
 800da7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da82:	465b      	mov	r3, fp
 800da84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da88:	f7f2 fdba 	bl	8000600 <__aeabi_dmul>
 800da8c:	4682      	mov	sl, r0
 800da8e:	468b      	mov	fp, r1
 800da90:	e64b      	b.n	800d72a <_strtod_l+0x72>
 800da92:	4b6e      	ldr	r3, [pc, #440]	@ (800dc4c <_strtod_l+0x594>)
 800da94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da98:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800da9c:	f7f2 fdb0 	bl	8000600 <__aeabi_dmul>
 800daa0:	4682      	mov	sl, r0
 800daa2:	468b      	mov	fp, r1
 800daa4:	9808      	ldr	r0, [sp, #32]
 800daa6:	f7f2 fd31 	bl	800050c <__aeabi_ui2d>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4650      	mov	r0, sl
 800dab0:	4659      	mov	r1, fp
 800dab2:	f7f2 fbef 	bl	8000294 <__adddf3>
 800dab6:	2d0f      	cmp	r5, #15
 800dab8:	4682      	mov	sl, r0
 800daba:	468b      	mov	fp, r1
 800dabc:	ddd5      	ble.n	800da6a <_strtod_l+0x3b2>
 800dabe:	1b2c      	subs	r4, r5, r4
 800dac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac2:	441c      	add	r4, r3
 800dac4:	2c00      	cmp	r4, #0
 800dac6:	f340 8096 	ble.w	800dbf6 <_strtod_l+0x53e>
 800daca:	f014 030f 	ands.w	r3, r4, #15
 800dace:	d00a      	beq.n	800dae6 <_strtod_l+0x42e>
 800dad0:	495e      	ldr	r1, [pc, #376]	@ (800dc4c <_strtod_l+0x594>)
 800dad2:	4652      	mov	r2, sl
 800dad4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dad8:	465b      	mov	r3, fp
 800dada:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dade:	f7f2 fd8f 	bl	8000600 <__aeabi_dmul>
 800dae2:	4682      	mov	sl, r0
 800dae4:	468b      	mov	fp, r1
 800dae6:	f034 040f 	bics.w	r4, r4, #15
 800daea:	d073      	beq.n	800dbd4 <_strtod_l+0x51c>
 800daec:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800daf0:	dd48      	ble.n	800db84 <_strtod_l+0x4cc>
 800daf2:	2400      	movs	r4, #0
 800daf4:	46a0      	mov	r8, r4
 800daf6:	46a1      	mov	r9, r4
 800daf8:	940a      	str	r4, [sp, #40]	@ 0x28
 800dafa:	2322      	movs	r3, #34	@ 0x22
 800dafc:	9a05      	ldr	r2, [sp, #20]
 800dafe:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800dc54 <_strtod_l+0x59c>
 800db02:	f04f 0a00 	mov.w	sl, #0
 800db06:	6013      	str	r3, [r2, #0]
 800db08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f43f ae0d 	beq.w	800d72a <_strtod_l+0x72>
 800db10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db12:	9805      	ldr	r0, [sp, #20]
 800db14:	f7ff f934 	bl	800cd80 <_Bfree>
 800db18:	4649      	mov	r1, r9
 800db1a:	9805      	ldr	r0, [sp, #20]
 800db1c:	f7ff f930 	bl	800cd80 <_Bfree>
 800db20:	4641      	mov	r1, r8
 800db22:	9805      	ldr	r0, [sp, #20]
 800db24:	f7ff f92c 	bl	800cd80 <_Bfree>
 800db28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db2a:	9805      	ldr	r0, [sp, #20]
 800db2c:	f7ff f928 	bl	800cd80 <_Bfree>
 800db30:	4621      	mov	r1, r4
 800db32:	9805      	ldr	r0, [sp, #20]
 800db34:	f7ff f924 	bl	800cd80 <_Bfree>
 800db38:	e5f7      	b.n	800d72a <_strtod_l+0x72>
 800db3a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800db3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db40:	4293      	cmp	r3, r2
 800db42:	dbbc      	blt.n	800dabe <_strtod_l+0x406>
 800db44:	f1c5 050f 	rsb	r5, r5, #15
 800db48:	4c40      	ldr	r4, [pc, #256]	@ (800dc4c <_strtod_l+0x594>)
 800db4a:	4652      	mov	r2, sl
 800db4c:	465b      	mov	r3, fp
 800db4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800db52:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db56:	f7f2 fd53 	bl	8000600 <__aeabi_dmul>
 800db5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db5c:	1b5d      	subs	r5, r3, r5
 800db5e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800db62:	e9d4 2300 	ldrd	r2, r3, [r4]
 800db66:	e78f      	b.n	800da88 <_strtod_l+0x3d0>
 800db68:	3316      	adds	r3, #22
 800db6a:	dba8      	blt.n	800dabe <_strtod_l+0x406>
 800db6c:	eba9 0808 	sub.w	r8, r9, r8
 800db70:	4b36      	ldr	r3, [pc, #216]	@ (800dc4c <_strtod_l+0x594>)
 800db72:	4650      	mov	r0, sl
 800db74:	4659      	mov	r1, fp
 800db76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800db7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800db7e:	f7f2 fe69 	bl	8000854 <__aeabi_ddiv>
 800db82:	e783      	b.n	800da8c <_strtod_l+0x3d4>
 800db84:	4b32      	ldr	r3, [pc, #200]	@ (800dc50 <_strtod_l+0x598>)
 800db86:	1124      	asrs	r4, r4, #4
 800db88:	4650      	mov	r0, sl
 800db8a:	4659      	mov	r1, fp
 800db8c:	9308      	str	r3, [sp, #32]
 800db8e:	2300      	movs	r3, #0
 800db90:	461e      	mov	r6, r3
 800db92:	2c01      	cmp	r4, #1
 800db94:	dc21      	bgt.n	800dbda <_strtod_l+0x522>
 800db96:	b10b      	cbz	r3, 800db9c <_strtod_l+0x4e4>
 800db98:	4682      	mov	sl, r0
 800db9a:	468b      	mov	fp, r1
 800db9c:	492c      	ldr	r1, [pc, #176]	@ (800dc50 <_strtod_l+0x598>)
 800db9e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dba2:	4652      	mov	r2, sl
 800dba4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dba8:	465b      	mov	r3, fp
 800dbaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbae:	f7f2 fd27 	bl	8000600 <__aeabi_dmul>
 800dbb2:	4b28      	ldr	r3, [pc, #160]	@ (800dc54 <_strtod_l+0x59c>)
 800dbb4:	460a      	mov	r2, r1
 800dbb6:	4682      	mov	sl, r0
 800dbb8:	400b      	ands	r3, r1
 800dbba:	4927      	ldr	r1, [pc, #156]	@ (800dc58 <_strtod_l+0x5a0>)
 800dbbc:	428b      	cmp	r3, r1
 800dbbe:	d898      	bhi.n	800daf2 <_strtod_l+0x43a>
 800dbc0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dbc4:	428b      	cmp	r3, r1
 800dbc6:	bf86      	itte	hi
 800dbc8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dc5c <_strtod_l+0x5a4>
 800dbcc:	f04f 3aff 	movhi.w	sl, #4294967295
 800dbd0:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	9308      	str	r3, [sp, #32]
 800dbd8:	e07a      	b.n	800dcd0 <_strtod_l+0x618>
 800dbda:	07e2      	lsls	r2, r4, #31
 800dbdc:	d505      	bpl.n	800dbea <_strtod_l+0x532>
 800dbde:	9b08      	ldr	r3, [sp, #32]
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f7f2 fd0c 	bl	8000600 <__aeabi_dmul>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	9a08      	ldr	r2, [sp, #32]
 800dbec:	3601      	adds	r6, #1
 800dbee:	1064      	asrs	r4, r4, #1
 800dbf0:	3208      	adds	r2, #8
 800dbf2:	9208      	str	r2, [sp, #32]
 800dbf4:	e7cd      	b.n	800db92 <_strtod_l+0x4da>
 800dbf6:	d0ed      	beq.n	800dbd4 <_strtod_l+0x51c>
 800dbf8:	4264      	negs	r4, r4
 800dbfa:	f014 020f 	ands.w	r2, r4, #15
 800dbfe:	d00a      	beq.n	800dc16 <_strtod_l+0x55e>
 800dc00:	4b12      	ldr	r3, [pc, #72]	@ (800dc4c <_strtod_l+0x594>)
 800dc02:	4650      	mov	r0, sl
 800dc04:	4659      	mov	r1, fp
 800dc06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	f7f2 fe21 	bl	8000854 <__aeabi_ddiv>
 800dc12:	4682      	mov	sl, r0
 800dc14:	468b      	mov	fp, r1
 800dc16:	1124      	asrs	r4, r4, #4
 800dc18:	d0dc      	beq.n	800dbd4 <_strtod_l+0x51c>
 800dc1a:	2c1f      	cmp	r4, #31
 800dc1c:	dd20      	ble.n	800dc60 <_strtod_l+0x5a8>
 800dc1e:	2400      	movs	r4, #0
 800dc20:	46a0      	mov	r8, r4
 800dc22:	46a1      	mov	r9, r4
 800dc24:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc26:	2322      	movs	r3, #34	@ 0x22
 800dc28:	9a05      	ldr	r2, [sp, #20]
 800dc2a:	f04f 0a00 	mov.w	sl, #0
 800dc2e:	f04f 0b00 	mov.w	fp, #0
 800dc32:	6013      	str	r3, [r2, #0]
 800dc34:	e768      	b.n	800db08 <_strtod_l+0x450>
 800dc36:	bf00      	nop
 800dc38:	0800f661 	.word	0x0800f661
 800dc3c:	0800f874 	.word	0x0800f874
 800dc40:	0800f659 	.word	0x0800f659
 800dc44:	0800f690 	.word	0x0800f690
 800dc48:	0800fa1d 	.word	0x0800fa1d
 800dc4c:	0800f7a8 	.word	0x0800f7a8
 800dc50:	0800f780 	.word	0x0800f780
 800dc54:	7ff00000 	.word	0x7ff00000
 800dc58:	7ca00000 	.word	0x7ca00000
 800dc5c:	7fefffff 	.word	0x7fefffff
 800dc60:	f014 0310 	ands.w	r3, r4, #16
 800dc64:	4650      	mov	r0, sl
 800dc66:	4659      	mov	r1, fp
 800dc68:	4ea9      	ldr	r6, [pc, #676]	@ (800df10 <_strtod_l+0x858>)
 800dc6a:	bf18      	it	ne
 800dc6c:	236a      	movne	r3, #106	@ 0x6a
 800dc6e:	9308      	str	r3, [sp, #32]
 800dc70:	2300      	movs	r3, #0
 800dc72:	07e2      	lsls	r2, r4, #31
 800dc74:	d504      	bpl.n	800dc80 <_strtod_l+0x5c8>
 800dc76:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc7a:	f7f2 fcc1 	bl	8000600 <__aeabi_dmul>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	1064      	asrs	r4, r4, #1
 800dc82:	f106 0608 	add.w	r6, r6, #8
 800dc86:	d1f4      	bne.n	800dc72 <_strtod_l+0x5ba>
 800dc88:	b10b      	cbz	r3, 800dc8e <_strtod_l+0x5d6>
 800dc8a:	4682      	mov	sl, r0
 800dc8c:	468b      	mov	fp, r1
 800dc8e:	9b08      	ldr	r3, [sp, #32]
 800dc90:	b1b3      	cbz	r3, 800dcc0 <_strtod_l+0x608>
 800dc92:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dc96:	4659      	mov	r1, fp
 800dc98:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	dd0f      	ble.n	800dcc0 <_strtod_l+0x608>
 800dca0:	2b1f      	cmp	r3, #31
 800dca2:	dd55      	ble.n	800dd50 <_strtod_l+0x698>
 800dca4:	2b34      	cmp	r3, #52	@ 0x34
 800dca6:	f04f 0a00 	mov.w	sl, #0
 800dcaa:	bfdb      	ittet	le
 800dcac:	f04f 33ff 	movle.w	r3, #4294967295
 800dcb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dcb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dcb8:	4093      	lslle	r3, r2
 800dcba:	bfd8      	it	le
 800dcbc:	ea03 0b01 	andle.w	fp, r3, r1
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4650      	mov	r0, sl
 800dcc6:	4659      	mov	r1, fp
 800dcc8:	f7f2 ff02 	bl	8000ad0 <__aeabi_dcmpeq>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1a6      	bne.n	800dc1e <_strtod_l+0x566>
 800dcd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcd2:	463a      	mov	r2, r7
 800dcd4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dcd6:	9300      	str	r3, [sp, #0]
 800dcd8:	462b      	mov	r3, r5
 800dcda:	9805      	ldr	r0, [sp, #20]
 800dcdc:	f7ff f8ba 	bl	800ce54 <__s2b>
 800dce0:	900a      	str	r0, [sp, #40]	@ 0x28
 800dce2:	2800      	cmp	r0, #0
 800dce4:	f43f af05 	beq.w	800daf2 <_strtod_l+0x43a>
 800dce8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcea:	eba9 0308 	sub.w	r3, r9, r8
 800dcee:	2400      	movs	r4, #0
 800dcf0:	2a00      	cmp	r2, #0
 800dcf2:	46a0      	mov	r8, r4
 800dcf4:	bfa8      	it	ge
 800dcf6:	2300      	movge	r3, #0
 800dcf8:	9312      	str	r3, [sp, #72]	@ 0x48
 800dcfa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dcfe:	9316      	str	r3, [sp, #88]	@ 0x58
 800dd00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd02:	9805      	ldr	r0, [sp, #20]
 800dd04:	6859      	ldr	r1, [r3, #4]
 800dd06:	f7fe fffb 	bl	800cd00 <_Balloc>
 800dd0a:	4681      	mov	r9, r0
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f43f aef4 	beq.w	800dafa <_strtod_l+0x442>
 800dd12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd14:	300c      	adds	r0, #12
 800dd16:	691a      	ldr	r2, [r3, #16]
 800dd18:	f103 010c 	add.w	r1, r3, #12
 800dd1c:	3202      	adds	r2, #2
 800dd1e:	0092      	lsls	r2, r2, #2
 800dd20:	f000 fd70 	bl	800e804 <memcpy>
 800dd24:	aa1c      	add	r2, sp, #112	@ 0x70
 800dd26:	a91b      	add	r1, sp, #108	@ 0x6c
 800dd28:	9805      	ldr	r0, [sp, #20]
 800dd2a:	ec4b ab10 	vmov	d0, sl, fp
 800dd2e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dd32:	f7ff fbd3 	bl	800d4dc <__d2b>
 800dd36:	901a      	str	r0, [sp, #104]	@ 0x68
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	f43f aede 	beq.w	800dafa <_strtod_l+0x442>
 800dd3e:	2101      	movs	r1, #1
 800dd40:	9805      	ldr	r0, [sp, #20]
 800dd42:	f7ff f91d 	bl	800cf80 <__i2b>
 800dd46:	4680      	mov	r8, r0
 800dd48:	b948      	cbnz	r0, 800dd5e <_strtod_l+0x6a6>
 800dd4a:	f04f 0800 	mov.w	r8, #0
 800dd4e:	e6d4      	b.n	800dafa <_strtod_l+0x442>
 800dd50:	f04f 32ff 	mov.w	r2, #4294967295
 800dd54:	fa02 f303 	lsl.w	r3, r2, r3
 800dd58:	ea03 0a0a 	and.w	sl, r3, sl
 800dd5c:	e7b0      	b.n	800dcc0 <_strtod_l+0x608>
 800dd5e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dd60:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dd62:	2d00      	cmp	r5, #0
 800dd64:	bfa9      	itett	ge
 800dd66:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dd68:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dd6a:	18ef      	addge	r7, r5, r3
 800dd6c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dd6e:	bfb8      	it	lt
 800dd70:	1b5e      	sublt	r6, r3, r5
 800dd72:	9b08      	ldr	r3, [sp, #32]
 800dd74:	bfb8      	it	lt
 800dd76:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dd78:	1aed      	subs	r5, r5, r3
 800dd7a:	4b66      	ldr	r3, [pc, #408]	@ (800df14 <_strtod_l+0x85c>)
 800dd7c:	4415      	add	r5, r2
 800dd7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dd82:	3d01      	subs	r5, #1
 800dd84:	429d      	cmp	r5, r3
 800dd86:	da4f      	bge.n	800de28 <_strtod_l+0x770>
 800dd88:	1b5b      	subs	r3, r3, r5
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	2b1f      	cmp	r3, #31
 800dd8e:	eba2 0203 	sub.w	r2, r2, r3
 800dd92:	dc3d      	bgt.n	800de10 <_strtod_l+0x758>
 800dd94:	fa01 f303 	lsl.w	r3, r1, r3
 800dd98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd9e:	18bd      	adds	r5, r7, r2
 800dda0:	9b08      	ldr	r3, [sp, #32]
 800dda2:	4416      	add	r6, r2
 800dda4:	42af      	cmp	r7, r5
 800dda6:	441e      	add	r6, r3
 800dda8:	463b      	mov	r3, r7
 800ddaa:	bfa8      	it	ge
 800ddac:	462b      	movge	r3, r5
 800ddae:	42b3      	cmp	r3, r6
 800ddb0:	bfa8      	it	ge
 800ddb2:	4633      	movge	r3, r6
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	bfc2      	ittt	gt
 800ddb8:	1aed      	subgt	r5, r5, r3
 800ddba:	1af6      	subgt	r6, r6, r3
 800ddbc:	1aff      	subgt	r7, r7, r3
 800ddbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dd16      	ble.n	800ddf2 <_strtod_l+0x73a>
 800ddc4:	4641      	mov	r1, r8
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	9805      	ldr	r0, [sp, #20]
 800ddca:	f7ff f999 	bl	800d100 <__pow5mult>
 800ddce:	4680      	mov	r8, r0
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d0ba      	beq.n	800dd4a <_strtod_l+0x692>
 800ddd4:	4601      	mov	r1, r0
 800ddd6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ddd8:	9805      	ldr	r0, [sp, #20]
 800ddda:	f7ff f8e7 	bl	800cfac <__multiply>
 800ddde:	900e      	str	r0, [sp, #56]	@ 0x38
 800dde0:	2800      	cmp	r0, #0
 800dde2:	f43f ae8a 	beq.w	800dafa <_strtod_l+0x442>
 800dde6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dde8:	9805      	ldr	r0, [sp, #20]
 800ddea:	f7fe ffc9 	bl	800cd80 <_Bfree>
 800ddee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddf2:	2d00      	cmp	r5, #0
 800ddf4:	dc1d      	bgt.n	800de32 <_strtod_l+0x77a>
 800ddf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	dd23      	ble.n	800de44 <_strtod_l+0x78c>
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800de00:	9805      	ldr	r0, [sp, #20]
 800de02:	f7ff f97d 	bl	800d100 <__pow5mult>
 800de06:	4681      	mov	r9, r0
 800de08:	b9e0      	cbnz	r0, 800de44 <_strtod_l+0x78c>
 800de0a:	f04f 0900 	mov.w	r9, #0
 800de0e:	e674      	b.n	800dafa <_strtod_l+0x442>
 800de10:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800de14:	9113      	str	r1, [sp, #76]	@ 0x4c
 800de16:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800de1a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800de1e:	35e2      	adds	r5, #226	@ 0xe2
 800de20:	fa01 f305 	lsl.w	r3, r1, r5
 800de24:	9310      	str	r3, [sp, #64]	@ 0x40
 800de26:	e7ba      	b.n	800dd9e <_strtod_l+0x6e6>
 800de28:	2300      	movs	r3, #0
 800de2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800de2c:	2301      	movs	r3, #1
 800de2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de30:	e7b5      	b.n	800dd9e <_strtod_l+0x6e6>
 800de32:	462a      	mov	r2, r5
 800de34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de36:	9805      	ldr	r0, [sp, #20]
 800de38:	f7ff f9bc 	bl	800d1b4 <__lshift>
 800de3c:	901a      	str	r0, [sp, #104]	@ 0x68
 800de3e:	2800      	cmp	r0, #0
 800de40:	d1d9      	bne.n	800ddf6 <_strtod_l+0x73e>
 800de42:	e65a      	b.n	800dafa <_strtod_l+0x442>
 800de44:	2e00      	cmp	r6, #0
 800de46:	dd07      	ble.n	800de58 <_strtod_l+0x7a0>
 800de48:	4649      	mov	r1, r9
 800de4a:	4632      	mov	r2, r6
 800de4c:	9805      	ldr	r0, [sp, #20]
 800de4e:	f7ff f9b1 	bl	800d1b4 <__lshift>
 800de52:	4681      	mov	r9, r0
 800de54:	2800      	cmp	r0, #0
 800de56:	d0d8      	beq.n	800de0a <_strtod_l+0x752>
 800de58:	2f00      	cmp	r7, #0
 800de5a:	dd08      	ble.n	800de6e <_strtod_l+0x7b6>
 800de5c:	4641      	mov	r1, r8
 800de5e:	463a      	mov	r2, r7
 800de60:	9805      	ldr	r0, [sp, #20]
 800de62:	f7ff f9a7 	bl	800d1b4 <__lshift>
 800de66:	4680      	mov	r8, r0
 800de68:	2800      	cmp	r0, #0
 800de6a:	f43f ae46 	beq.w	800dafa <_strtod_l+0x442>
 800de6e:	464a      	mov	r2, r9
 800de70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de72:	9805      	ldr	r0, [sp, #20]
 800de74:	f7ff fa26 	bl	800d2c4 <__mdiff>
 800de78:	4604      	mov	r4, r0
 800de7a:	2800      	cmp	r0, #0
 800de7c:	f43f ae3d 	beq.w	800dafa <_strtod_l+0x442>
 800de80:	68c3      	ldr	r3, [r0, #12]
 800de82:	4641      	mov	r1, r8
 800de84:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de86:	2300      	movs	r3, #0
 800de88:	60c3      	str	r3, [r0, #12]
 800de8a:	f7ff f9ff 	bl	800d28c <__mcmp>
 800de8e:	2800      	cmp	r0, #0
 800de90:	da46      	bge.n	800df20 <_strtod_l+0x868>
 800de92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de94:	ea53 030a 	orrs.w	r3, r3, sl
 800de98:	d16c      	bne.n	800df74 <_strtod_l+0x8bc>
 800de9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d168      	bne.n	800df74 <_strtod_l+0x8bc>
 800dea2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dea6:	0d1b      	lsrs	r3, r3, #20
 800dea8:	051b      	lsls	r3, r3, #20
 800deaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800deae:	d961      	bls.n	800df74 <_strtod_l+0x8bc>
 800deb0:	6963      	ldr	r3, [r4, #20]
 800deb2:	b913      	cbnz	r3, 800deba <_strtod_l+0x802>
 800deb4:	6923      	ldr	r3, [r4, #16]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	dd5c      	ble.n	800df74 <_strtod_l+0x8bc>
 800deba:	4621      	mov	r1, r4
 800debc:	2201      	movs	r2, #1
 800debe:	9805      	ldr	r0, [sp, #20]
 800dec0:	f7ff f978 	bl	800d1b4 <__lshift>
 800dec4:	4641      	mov	r1, r8
 800dec6:	4604      	mov	r4, r0
 800dec8:	f7ff f9e0 	bl	800d28c <__mcmp>
 800decc:	2800      	cmp	r0, #0
 800dece:	dd51      	ble.n	800df74 <_strtod_l+0x8bc>
 800ded0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ded4:	9a08      	ldr	r2, [sp, #32]
 800ded6:	0d1b      	lsrs	r3, r3, #20
 800ded8:	051b      	lsls	r3, r3, #20
 800deda:	2a00      	cmp	r2, #0
 800dedc:	d06b      	beq.n	800dfb6 <_strtod_l+0x8fe>
 800dede:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dee2:	d868      	bhi.n	800dfb6 <_strtod_l+0x8fe>
 800dee4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dee8:	f67f ae9d 	bls.w	800dc26 <_strtod_l+0x56e>
 800deec:	4b0a      	ldr	r3, [pc, #40]	@ (800df18 <_strtod_l+0x860>)
 800deee:	4650      	mov	r0, sl
 800def0:	4659      	mov	r1, fp
 800def2:	2200      	movs	r2, #0
 800def4:	f7f2 fb84 	bl	8000600 <__aeabi_dmul>
 800def8:	4b08      	ldr	r3, [pc, #32]	@ (800df1c <_strtod_l+0x864>)
 800defa:	4682      	mov	sl, r0
 800defc:	468b      	mov	fp, r1
 800defe:	400b      	ands	r3, r1
 800df00:	2b00      	cmp	r3, #0
 800df02:	f47f ae05 	bne.w	800db10 <_strtod_l+0x458>
 800df06:	2322      	movs	r3, #34	@ 0x22
 800df08:	9a05      	ldr	r2, [sp, #20]
 800df0a:	6013      	str	r3, [r2, #0]
 800df0c:	e600      	b.n	800db10 <_strtod_l+0x458>
 800df0e:	bf00      	nop
 800df10:	0800f8a0 	.word	0x0800f8a0
 800df14:	fffffc02 	.word	0xfffffc02
 800df18:	39500000 	.word	0x39500000
 800df1c:	7ff00000 	.word	0x7ff00000
 800df20:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800df24:	d165      	bne.n	800dff2 <_strtod_l+0x93a>
 800df26:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800df28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df2c:	b35a      	cbz	r2, 800df86 <_strtod_l+0x8ce>
 800df2e:	4a9e      	ldr	r2, [pc, #632]	@ (800e1a8 <_strtod_l+0xaf0>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d12b      	bne.n	800df8c <_strtod_l+0x8d4>
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	4651      	mov	r1, sl
 800df38:	b303      	cbz	r3, 800df7c <_strtod_l+0x8c4>
 800df3a:	465a      	mov	r2, fp
 800df3c:	4b9b      	ldr	r3, [pc, #620]	@ (800e1ac <_strtod_l+0xaf4>)
 800df3e:	4013      	ands	r3, r2
 800df40:	f04f 32ff 	mov.w	r2, #4294967295
 800df44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800df48:	d81b      	bhi.n	800df82 <_strtod_l+0x8ca>
 800df4a:	0d1b      	lsrs	r3, r3, #20
 800df4c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800df50:	fa02 f303 	lsl.w	r3, r2, r3
 800df54:	4299      	cmp	r1, r3
 800df56:	d119      	bne.n	800df8c <_strtod_l+0x8d4>
 800df58:	4b95      	ldr	r3, [pc, #596]	@ (800e1b0 <_strtod_l+0xaf8>)
 800df5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d102      	bne.n	800df66 <_strtod_l+0x8ae>
 800df60:	3101      	adds	r1, #1
 800df62:	f43f adca 	beq.w	800dafa <_strtod_l+0x442>
 800df66:	4b91      	ldr	r3, [pc, #580]	@ (800e1ac <_strtod_l+0xaf4>)
 800df68:	f04f 0a00 	mov.w	sl, #0
 800df6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df6e:	401a      	ands	r2, r3
 800df70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800df74:	9b08      	ldr	r3, [sp, #32]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1b8      	bne.n	800deec <_strtod_l+0x834>
 800df7a:	e5c9      	b.n	800db10 <_strtod_l+0x458>
 800df7c:	f04f 33ff 	mov.w	r3, #4294967295
 800df80:	e7e8      	b.n	800df54 <_strtod_l+0x89c>
 800df82:	4613      	mov	r3, r2
 800df84:	e7e6      	b.n	800df54 <_strtod_l+0x89c>
 800df86:	ea53 030a 	orrs.w	r3, r3, sl
 800df8a:	d0a1      	beq.n	800ded0 <_strtod_l+0x818>
 800df8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df8e:	b1db      	cbz	r3, 800dfc8 <_strtod_l+0x910>
 800df90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df92:	4213      	tst	r3, r2
 800df94:	d0ee      	beq.n	800df74 <_strtod_l+0x8bc>
 800df96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df98:	4650      	mov	r0, sl
 800df9a:	9a08      	ldr	r2, [sp, #32]
 800df9c:	4659      	mov	r1, fp
 800df9e:	b1bb      	cbz	r3, 800dfd0 <_strtod_l+0x918>
 800dfa0:	f7ff fb6a 	bl	800d678 <sulp>
 800dfa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfa8:	ec53 2b10 	vmov	r2, r3, d0
 800dfac:	f7f2 f972 	bl	8000294 <__adddf3>
 800dfb0:	4682      	mov	sl, r0
 800dfb2:	468b      	mov	fp, r1
 800dfb4:	e7de      	b.n	800df74 <_strtod_l+0x8bc>
 800dfb6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dfba:	f04f 3aff 	mov.w	sl, #4294967295
 800dfbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dfc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dfc6:	e7d5      	b.n	800df74 <_strtod_l+0x8bc>
 800dfc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfca:	ea13 0f0a 	tst.w	r3, sl
 800dfce:	e7e1      	b.n	800df94 <_strtod_l+0x8dc>
 800dfd0:	f7ff fb52 	bl	800d678 <sulp>
 800dfd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfd8:	ec53 2b10 	vmov	r2, r3, d0
 800dfdc:	f7f2 f958 	bl	8000290 <__aeabi_dsub>
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	4682      	mov	sl, r0
 800dfe6:	468b      	mov	fp, r1
 800dfe8:	f7f2 fd72 	bl	8000ad0 <__aeabi_dcmpeq>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d0c1      	beq.n	800df74 <_strtod_l+0x8bc>
 800dff0:	e619      	b.n	800dc26 <_strtod_l+0x56e>
 800dff2:	4641      	mov	r1, r8
 800dff4:	4620      	mov	r0, r4
 800dff6:	f7ff fac9 	bl	800d58c <__ratio>
 800dffa:	2200      	movs	r2, #0
 800dffc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e000:	ec57 6b10 	vmov	r6, r7, d0
 800e004:	4630      	mov	r0, r6
 800e006:	4639      	mov	r1, r7
 800e008:	f7f2 fd76 	bl	8000af8 <__aeabi_dcmple>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d06f      	beq.n	800e0f0 <_strtod_l+0xa38>
 800e010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e012:	2b00      	cmp	r3, #0
 800e014:	d17a      	bne.n	800e10c <_strtod_l+0xa54>
 800e016:	f1ba 0f00 	cmp.w	sl, #0
 800e01a:	d158      	bne.n	800e0ce <_strtod_l+0xa16>
 800e01c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e01e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e022:	2b00      	cmp	r3, #0
 800e024:	d15a      	bne.n	800e0dc <_strtod_l+0xa24>
 800e026:	2200      	movs	r2, #0
 800e028:	4b62      	ldr	r3, [pc, #392]	@ (800e1b4 <_strtod_l+0xafc>)
 800e02a:	4630      	mov	r0, r6
 800e02c:	4639      	mov	r1, r7
 800e02e:	f7f2 fd59 	bl	8000ae4 <__aeabi_dcmplt>
 800e032:	2800      	cmp	r0, #0
 800e034:	d159      	bne.n	800e0ea <_strtod_l+0xa32>
 800e036:	4630      	mov	r0, r6
 800e038:	4639      	mov	r1, r7
 800e03a:	2200      	movs	r2, #0
 800e03c:	4b5e      	ldr	r3, [pc, #376]	@ (800e1b8 <_strtod_l+0xb00>)
 800e03e:	f7f2 fadf 	bl	8000600 <__aeabi_dmul>
 800e042:	4606      	mov	r6, r0
 800e044:	460f      	mov	r7, r1
 800e046:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e04a:	9606      	str	r6, [sp, #24]
 800e04c:	9307      	str	r3, [sp, #28]
 800e04e:	4d57      	ldr	r5, [pc, #348]	@ (800e1ac <_strtod_l+0xaf4>)
 800e050:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e054:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e05a:	401d      	ands	r5, r3
 800e05c:	4b57      	ldr	r3, [pc, #348]	@ (800e1bc <_strtod_l+0xb04>)
 800e05e:	429d      	cmp	r5, r3
 800e060:	f040 80b0 	bne.w	800e1c4 <_strtod_l+0xb0c>
 800e064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e066:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e06a:	ec4b ab10 	vmov	d0, sl, fp
 800e06e:	f7ff f9c1 	bl	800d3f4 <__ulp>
 800e072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e076:	ec51 0b10 	vmov	r0, r1, d0
 800e07a:	f7f2 fac1 	bl	8000600 <__aeabi_dmul>
 800e07e:	4652      	mov	r2, sl
 800e080:	465b      	mov	r3, fp
 800e082:	f7f2 f907 	bl	8000294 <__adddf3>
 800e086:	460b      	mov	r3, r1
 800e088:	4948      	ldr	r1, [pc, #288]	@ (800e1ac <_strtod_l+0xaf4>)
 800e08a:	4682      	mov	sl, r0
 800e08c:	4a4c      	ldr	r2, [pc, #304]	@ (800e1c0 <_strtod_l+0xb08>)
 800e08e:	4019      	ands	r1, r3
 800e090:	4291      	cmp	r1, r2
 800e092:	d942      	bls.n	800e11a <_strtod_l+0xa62>
 800e094:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e096:	4b46      	ldr	r3, [pc, #280]	@ (800e1b0 <_strtod_l+0xaf8>)
 800e098:	429a      	cmp	r2, r3
 800e09a:	d103      	bne.n	800e0a4 <_strtod_l+0x9ec>
 800e09c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e09e:	3301      	adds	r3, #1
 800e0a0:	f43f ad2b 	beq.w	800dafa <_strtod_l+0x442>
 800e0a4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800e1b0 <_strtod_l+0xaf8>
 800e0a8:	f04f 3aff 	mov.w	sl, #4294967295
 800e0ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0ae:	9805      	ldr	r0, [sp, #20]
 800e0b0:	f7fe fe66 	bl	800cd80 <_Bfree>
 800e0b4:	4649      	mov	r1, r9
 800e0b6:	9805      	ldr	r0, [sp, #20]
 800e0b8:	f7fe fe62 	bl	800cd80 <_Bfree>
 800e0bc:	4641      	mov	r1, r8
 800e0be:	9805      	ldr	r0, [sp, #20]
 800e0c0:	f7fe fe5e 	bl	800cd80 <_Bfree>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	9805      	ldr	r0, [sp, #20]
 800e0c8:	f7fe fe5a 	bl	800cd80 <_Bfree>
 800e0cc:	e618      	b.n	800dd00 <_strtod_l+0x648>
 800e0ce:	f1ba 0f01 	cmp.w	sl, #1
 800e0d2:	d103      	bne.n	800e0dc <_strtod_l+0xa24>
 800e0d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f43f ada5 	beq.w	800dc26 <_strtod_l+0x56e>
 800e0dc:	2600      	movs	r6, #0
 800e0de:	4f35      	ldr	r7, [pc, #212]	@ (800e1b4 <_strtod_l+0xafc>)
 800e0e0:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800e188 <_strtod_l+0xad0>
 800e0e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0e8:	e7b1      	b.n	800e04e <_strtod_l+0x996>
 800e0ea:	2600      	movs	r6, #0
 800e0ec:	4f32      	ldr	r7, [pc, #200]	@ (800e1b8 <_strtod_l+0xb00>)
 800e0ee:	e7aa      	b.n	800e046 <_strtod_l+0x98e>
 800e0f0:	4b31      	ldr	r3, [pc, #196]	@ (800e1b8 <_strtod_l+0xb00>)
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	4639      	mov	r1, r7
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	f7f2 fa82 	bl	8000600 <__aeabi_dmul>
 800e0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fe:	4606      	mov	r6, r0
 800e100:	460f      	mov	r7, r1
 800e102:	2b00      	cmp	r3, #0
 800e104:	d09f      	beq.n	800e046 <_strtod_l+0x98e>
 800e106:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e10a:	e7a0      	b.n	800e04e <_strtod_l+0x996>
 800e10c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800e190 <_strtod_l+0xad8>
 800e110:	ec57 6b17 	vmov	r6, r7, d7
 800e114:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e118:	e799      	b.n	800e04e <_strtod_l+0x996>
 800e11a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e11e:	9b08      	ldr	r3, [sp, #32]
 800e120:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1c1      	bne.n	800e0ac <_strtod_l+0x9f4>
 800e128:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e12c:	0d1b      	lsrs	r3, r3, #20
 800e12e:	051b      	lsls	r3, r3, #20
 800e130:	429d      	cmp	r5, r3
 800e132:	d1bb      	bne.n	800e0ac <_strtod_l+0x9f4>
 800e134:	4630      	mov	r0, r6
 800e136:	4639      	mov	r1, r7
 800e138:	f7f2 fdc2 	bl	8000cc0 <__aeabi_d2lz>
 800e13c:	f7f2 fa32 	bl	80005a4 <__aeabi_l2d>
 800e140:	4602      	mov	r2, r0
 800e142:	460b      	mov	r3, r1
 800e144:	4630      	mov	r0, r6
 800e146:	4639      	mov	r1, r7
 800e148:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e14c:	f7f2 f8a0 	bl	8000290 <__aeabi_dsub>
 800e150:	460b      	mov	r3, r1
 800e152:	4602      	mov	r2, r0
 800e154:	ea46 060a 	orr.w	r6, r6, sl
 800e158:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e15e:	431e      	orrs	r6, r3
 800e160:	d06d      	beq.n	800e23e <_strtod_l+0xb86>
 800e162:	a30d      	add	r3, pc, #52	@ (adr r3, 800e198 <_strtod_l+0xae0>)
 800e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e168:	f7f2 fcbc 	bl	8000ae4 <__aeabi_dcmplt>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	f47f accf 	bne.w	800db10 <_strtod_l+0x458>
 800e172:	a30b      	add	r3, pc, #44	@ (adr r3, 800e1a0 <_strtod_l+0xae8>)
 800e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e17c:	f7f2 fcd0 	bl	8000b20 <__aeabi_dcmpgt>
 800e180:	2800      	cmp	r0, #0
 800e182:	d093      	beq.n	800e0ac <_strtod_l+0x9f4>
 800e184:	e4c4      	b.n	800db10 <_strtod_l+0x458>
 800e186:	bf00      	nop
 800e188:	00000000 	.word	0x00000000
 800e18c:	bff00000 	.word	0xbff00000
 800e190:	00000000 	.word	0x00000000
 800e194:	3ff00000 	.word	0x3ff00000
 800e198:	94a03595 	.word	0x94a03595
 800e19c:	3fdfffff 	.word	0x3fdfffff
 800e1a0:	35afe535 	.word	0x35afe535
 800e1a4:	3fe00000 	.word	0x3fe00000
 800e1a8:	000fffff 	.word	0x000fffff
 800e1ac:	7ff00000 	.word	0x7ff00000
 800e1b0:	7fefffff 	.word	0x7fefffff
 800e1b4:	3ff00000 	.word	0x3ff00000
 800e1b8:	3fe00000 	.word	0x3fe00000
 800e1bc:	7fe00000 	.word	0x7fe00000
 800e1c0:	7c9fffff 	.word	0x7c9fffff
 800e1c4:	9b08      	ldr	r3, [sp, #32]
 800e1c6:	b323      	cbz	r3, 800e212 <_strtod_l+0xb5a>
 800e1c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e1cc:	d821      	bhi.n	800e212 <_strtod_l+0xb5a>
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	4639      	mov	r1, r7
 800e1d2:	a327      	add	r3, pc, #156	@ (adr r3, 800e270 <_strtod_l+0xbb8>)
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	f7f2 fc8e 	bl	8000af8 <__aeabi_dcmple>
 800e1dc:	b1a0      	cbz	r0, 800e208 <_strtod_l+0xb50>
 800e1de:	4639      	mov	r1, r7
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f7f2 fce5 	bl	8000bb0 <__aeabi_d2uiz>
 800e1e6:	2801      	cmp	r0, #1
 800e1e8:	bf38      	it	cc
 800e1ea:	2001      	movcc	r0, #1
 800e1ec:	f7f2 f98e 	bl	800050c <__aeabi_ui2d>
 800e1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	460f      	mov	r7, r1
 800e1f6:	b9fb      	cbnz	r3, 800e238 <_strtod_l+0xb80>
 800e1f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e1fc:	9014      	str	r0, [sp, #80]	@ 0x50
 800e1fe:	9315      	str	r3, [sp, #84]	@ 0x54
 800e200:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e204:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e208:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e20a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e20e:	1b5b      	subs	r3, r3, r5
 800e210:	9311      	str	r3, [sp, #68]	@ 0x44
 800e212:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e216:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e21a:	f7ff f8eb 	bl	800d3f4 <__ulp>
 800e21e:	4650      	mov	r0, sl
 800e220:	4659      	mov	r1, fp
 800e222:	ec53 2b10 	vmov	r2, r3, d0
 800e226:	f7f2 f9eb 	bl	8000600 <__aeabi_dmul>
 800e22a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e22e:	f7f2 f831 	bl	8000294 <__adddf3>
 800e232:	4682      	mov	sl, r0
 800e234:	468b      	mov	fp, r1
 800e236:	e772      	b.n	800e11e <_strtod_l+0xa66>
 800e238:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e23c:	e7e0      	b.n	800e200 <_strtod_l+0xb48>
 800e23e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e278 <_strtod_l+0xbc0>)
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	f7f2 fc4e 	bl	8000ae4 <__aeabi_dcmplt>
 800e248:	e79a      	b.n	800e180 <_strtod_l+0xac8>
 800e24a:	2300      	movs	r3, #0
 800e24c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e24e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e250:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e252:	6013      	str	r3, [r2, #0]
 800e254:	f7ff ba6d 	b.w	800d732 <_strtod_l+0x7a>
 800e258:	2a65      	cmp	r2, #101	@ 0x65
 800e25a:	f43f ab67 	beq.w	800d92c <_strtod_l+0x274>
 800e25e:	2a45      	cmp	r2, #69	@ 0x45
 800e260:	f43f ab64 	beq.w	800d92c <_strtod_l+0x274>
 800e264:	2301      	movs	r3, #1
 800e266:	f7ff bba0 	b.w	800d9aa <_strtod_l+0x2f2>
 800e26a:	bf00      	nop
 800e26c:	f3af 8000 	nop.w
 800e270:	ffc00000 	.word	0xffc00000
 800e274:	41dfffff 	.word	0x41dfffff
 800e278:	94a03595 	.word	0x94a03595
 800e27c:	3fcfffff 	.word	0x3fcfffff

0800e280 <_strtod_r>:
 800e280:	4b01      	ldr	r3, [pc, #4]	@ (800e288 <_strtod_r+0x8>)
 800e282:	f7ff ba19 	b.w	800d6b8 <_strtod_l>
 800e286:	bf00      	nop
 800e288:	20000080 	.word	0x20000080

0800e28c <_strtol_l.constprop.0>:
 800e28c:	2b24      	cmp	r3, #36	@ 0x24
 800e28e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e292:	4686      	mov	lr, r0
 800e294:	4690      	mov	r8, r2
 800e296:	d801      	bhi.n	800e29c <_strtol_l.constprop.0+0x10>
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d106      	bne.n	800e2aa <_strtol_l.constprop.0+0x1e>
 800e29c:	f7fd fd9a 	bl	800bdd4 <__errno>
 800e2a0:	2316      	movs	r3, #22
 800e2a2:	6003      	str	r3, [r0, #0]
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2aa:	460d      	mov	r5, r1
 800e2ac:	4833      	ldr	r0, [pc, #204]	@ (800e37c <_strtol_l.constprop.0+0xf0>)
 800e2ae:	462a      	mov	r2, r5
 800e2b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2b4:	5d06      	ldrb	r6, [r0, r4]
 800e2b6:	f016 0608 	ands.w	r6, r6, #8
 800e2ba:	d1f8      	bne.n	800e2ae <_strtol_l.constprop.0+0x22>
 800e2bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e2be:	d12d      	bne.n	800e31c <_strtol_l.constprop.0+0x90>
 800e2c0:	782c      	ldrb	r4, [r5, #0]
 800e2c2:	2601      	movs	r6, #1
 800e2c4:	1c95      	adds	r5, r2, #2
 800e2c6:	f033 0210 	bics.w	r2, r3, #16
 800e2ca:	d109      	bne.n	800e2e0 <_strtol_l.constprop.0+0x54>
 800e2cc:	2c30      	cmp	r4, #48	@ 0x30
 800e2ce:	d12a      	bne.n	800e326 <_strtol_l.constprop.0+0x9a>
 800e2d0:	782a      	ldrb	r2, [r5, #0]
 800e2d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e2d6:	2a58      	cmp	r2, #88	@ 0x58
 800e2d8:	d125      	bne.n	800e326 <_strtol_l.constprop.0+0x9a>
 800e2da:	786c      	ldrb	r4, [r5, #1]
 800e2dc:	2310      	movs	r3, #16
 800e2de:	3502      	adds	r5, #2
 800e2e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	fbbc f9f3 	udiv	r9, ip, r3
 800e2f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e2f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e2f8:	2f09      	cmp	r7, #9
 800e2fa:	d81b      	bhi.n	800e334 <_strtol_l.constprop.0+0xa8>
 800e2fc:	463c      	mov	r4, r7
 800e2fe:	42a3      	cmp	r3, r4
 800e300:	dd27      	ble.n	800e352 <_strtol_l.constprop.0+0xc6>
 800e302:	1c57      	adds	r7, r2, #1
 800e304:	d007      	beq.n	800e316 <_strtol_l.constprop.0+0x8a>
 800e306:	4581      	cmp	r9, r0
 800e308:	d320      	bcc.n	800e34c <_strtol_l.constprop.0+0xc0>
 800e30a:	d101      	bne.n	800e310 <_strtol_l.constprop.0+0x84>
 800e30c:	45a2      	cmp	sl, r4
 800e30e:	db1d      	blt.n	800e34c <_strtol_l.constprop.0+0xc0>
 800e310:	fb00 4003 	mla	r0, r0, r3, r4
 800e314:	2201      	movs	r2, #1
 800e316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e31a:	e7eb      	b.n	800e2f4 <_strtol_l.constprop.0+0x68>
 800e31c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e31e:	bf04      	itt	eq
 800e320:	782c      	ldrbeq	r4, [r5, #0]
 800e322:	1c95      	addeq	r5, r2, #2
 800e324:	e7cf      	b.n	800e2c6 <_strtol_l.constprop.0+0x3a>
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1da      	bne.n	800e2e0 <_strtol_l.constprop.0+0x54>
 800e32a:	2c30      	cmp	r4, #48	@ 0x30
 800e32c:	bf0c      	ite	eq
 800e32e:	2308      	moveq	r3, #8
 800e330:	230a      	movne	r3, #10
 800e332:	e7d5      	b.n	800e2e0 <_strtol_l.constprop.0+0x54>
 800e334:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e338:	2f19      	cmp	r7, #25
 800e33a:	d801      	bhi.n	800e340 <_strtol_l.constprop.0+0xb4>
 800e33c:	3c37      	subs	r4, #55	@ 0x37
 800e33e:	e7de      	b.n	800e2fe <_strtol_l.constprop.0+0x72>
 800e340:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e344:	2f19      	cmp	r7, #25
 800e346:	d804      	bhi.n	800e352 <_strtol_l.constprop.0+0xc6>
 800e348:	3c57      	subs	r4, #87	@ 0x57
 800e34a:	e7d8      	b.n	800e2fe <_strtol_l.constprop.0+0x72>
 800e34c:	f04f 32ff 	mov.w	r2, #4294967295
 800e350:	e7e1      	b.n	800e316 <_strtol_l.constprop.0+0x8a>
 800e352:	1c53      	adds	r3, r2, #1
 800e354:	d108      	bne.n	800e368 <_strtol_l.constprop.0+0xdc>
 800e356:	2322      	movs	r3, #34	@ 0x22
 800e358:	4660      	mov	r0, ip
 800e35a:	f8ce 3000 	str.w	r3, [lr]
 800e35e:	f1b8 0f00 	cmp.w	r8, #0
 800e362:	d0a0      	beq.n	800e2a6 <_strtol_l.constprop.0+0x1a>
 800e364:	1e69      	subs	r1, r5, #1
 800e366:	e006      	b.n	800e376 <_strtol_l.constprop.0+0xea>
 800e368:	b106      	cbz	r6, 800e36c <_strtol_l.constprop.0+0xe0>
 800e36a:	4240      	negs	r0, r0
 800e36c:	f1b8 0f00 	cmp.w	r8, #0
 800e370:	d099      	beq.n	800e2a6 <_strtol_l.constprop.0+0x1a>
 800e372:	2a00      	cmp	r2, #0
 800e374:	d1f6      	bne.n	800e364 <_strtol_l.constprop.0+0xd8>
 800e376:	f8c8 1000 	str.w	r1, [r8]
 800e37a:	e794      	b.n	800e2a6 <_strtol_l.constprop.0+0x1a>
 800e37c:	0800f8c9 	.word	0x0800f8c9

0800e380 <_strtol_r>:
 800e380:	f7ff bf84 	b.w	800e28c <_strtol_l.constprop.0>

0800e384 <__ssputs_r>:
 800e384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e388:	461f      	mov	r7, r3
 800e38a:	688e      	ldr	r6, [r1, #8]
 800e38c:	4682      	mov	sl, r0
 800e38e:	460c      	mov	r4, r1
 800e390:	42be      	cmp	r6, r7
 800e392:	4690      	mov	r8, r2
 800e394:	680b      	ldr	r3, [r1, #0]
 800e396:	d82d      	bhi.n	800e3f4 <__ssputs_r+0x70>
 800e398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e39c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3a0:	d026      	beq.n	800e3f0 <__ssputs_r+0x6c>
 800e3a2:	6965      	ldr	r5, [r4, #20]
 800e3a4:	6909      	ldr	r1, [r1, #16]
 800e3a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3aa:	eba3 0901 	sub.w	r9, r3, r1
 800e3ae:	1c7b      	adds	r3, r7, #1
 800e3b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3b4:	444b      	add	r3, r9
 800e3b6:	106d      	asrs	r5, r5, #1
 800e3b8:	429d      	cmp	r5, r3
 800e3ba:	bf38      	it	cc
 800e3bc:	461d      	movcc	r5, r3
 800e3be:	0553      	lsls	r3, r2, #21
 800e3c0:	d527      	bpl.n	800e412 <__ssputs_r+0x8e>
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	f7fe fc10 	bl	800cbe8 <_malloc_r>
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	b360      	cbz	r0, 800e426 <__ssputs_r+0xa2>
 800e3cc:	464a      	mov	r2, r9
 800e3ce:	6921      	ldr	r1, [r4, #16]
 800e3d0:	f000 fa18 	bl	800e804 <memcpy>
 800e3d4:	89a3      	ldrh	r3, [r4, #12]
 800e3d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3de:	81a3      	strh	r3, [r4, #12]
 800e3e0:	6126      	str	r6, [r4, #16]
 800e3e2:	444e      	add	r6, r9
 800e3e4:	6165      	str	r5, [r4, #20]
 800e3e6:	eba5 0509 	sub.w	r5, r5, r9
 800e3ea:	6026      	str	r6, [r4, #0]
 800e3ec:	463e      	mov	r6, r7
 800e3ee:	60a5      	str	r5, [r4, #8]
 800e3f0:	42be      	cmp	r6, r7
 800e3f2:	d900      	bls.n	800e3f6 <__ssputs_r+0x72>
 800e3f4:	463e      	mov	r6, r7
 800e3f6:	4632      	mov	r2, r6
 800e3f8:	4641      	mov	r1, r8
 800e3fa:	6820      	ldr	r0, [r4, #0]
 800e3fc:	f000 f9c6 	bl	800e78c <memmove>
 800e400:	68a3      	ldr	r3, [r4, #8]
 800e402:	2000      	movs	r0, #0
 800e404:	1b9b      	subs	r3, r3, r6
 800e406:	60a3      	str	r3, [r4, #8]
 800e408:	6823      	ldr	r3, [r4, #0]
 800e40a:	4433      	add	r3, r6
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e412:	462a      	mov	r2, r5
 800e414:	f000 fd85 	bl	800ef22 <_realloc_r>
 800e418:	4606      	mov	r6, r0
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d1e0      	bne.n	800e3e0 <__ssputs_r+0x5c>
 800e41e:	6921      	ldr	r1, [r4, #16]
 800e420:	4650      	mov	r0, sl
 800e422:	f7fe fb6d 	bl	800cb00 <_free_r>
 800e426:	230c      	movs	r3, #12
 800e428:	f04f 30ff 	mov.w	r0, #4294967295
 800e42c:	f8ca 3000 	str.w	r3, [sl]
 800e430:	89a3      	ldrh	r3, [r4, #12]
 800e432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	e7e9      	b.n	800e40e <__ssputs_r+0x8a>
	...

0800e43c <_svfiprintf_r>:
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	4698      	mov	r8, r3
 800e442:	898b      	ldrh	r3, [r1, #12]
 800e444:	b09d      	sub	sp, #116	@ 0x74
 800e446:	4607      	mov	r7, r0
 800e448:	061b      	lsls	r3, r3, #24
 800e44a:	460d      	mov	r5, r1
 800e44c:	4614      	mov	r4, r2
 800e44e:	d510      	bpl.n	800e472 <_svfiprintf_r+0x36>
 800e450:	690b      	ldr	r3, [r1, #16]
 800e452:	b973      	cbnz	r3, 800e472 <_svfiprintf_r+0x36>
 800e454:	2140      	movs	r1, #64	@ 0x40
 800e456:	f7fe fbc7 	bl	800cbe8 <_malloc_r>
 800e45a:	6028      	str	r0, [r5, #0]
 800e45c:	6128      	str	r0, [r5, #16]
 800e45e:	b930      	cbnz	r0, 800e46e <_svfiprintf_r+0x32>
 800e460:	230c      	movs	r3, #12
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	f04f 30ff 	mov.w	r0, #4294967295
 800e468:	b01d      	add	sp, #116	@ 0x74
 800e46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e46e:	2340      	movs	r3, #64	@ 0x40
 800e470:	616b      	str	r3, [r5, #20]
 800e472:	2300      	movs	r3, #0
 800e474:	f8cd 800c 	str.w	r8, [sp, #12]
 800e478:	f04f 0901 	mov.w	r9, #1
 800e47c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800e620 <_svfiprintf_r+0x1e4>
 800e480:	9309      	str	r3, [sp, #36]	@ 0x24
 800e482:	2320      	movs	r3, #32
 800e484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e488:	2330      	movs	r3, #48	@ 0x30
 800e48a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e48e:	4623      	mov	r3, r4
 800e490:	469a      	mov	sl, r3
 800e492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e496:	b10a      	cbz	r2, 800e49c <_svfiprintf_r+0x60>
 800e498:	2a25      	cmp	r2, #37	@ 0x25
 800e49a:	d1f9      	bne.n	800e490 <_svfiprintf_r+0x54>
 800e49c:	ebba 0b04 	subs.w	fp, sl, r4
 800e4a0:	d00b      	beq.n	800e4ba <_svfiprintf_r+0x7e>
 800e4a2:	465b      	mov	r3, fp
 800e4a4:	4622      	mov	r2, r4
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	f7ff ff6b 	bl	800e384 <__ssputs_r>
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	f000 80a7 	beq.w	800e602 <_svfiprintf_r+0x1c6>
 800e4b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4b6:	445a      	add	r2, fp
 800e4b8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f000 809f 	beq.w	800e602 <_svfiprintf_r+0x1c6>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ca:	f10a 0a01 	add.w	sl, sl, #1
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	9307      	str	r3, [sp, #28]
 800e4d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4dc:	4654      	mov	r4, sl
 800e4de:	2205      	movs	r2, #5
 800e4e0:	484f      	ldr	r0, [pc, #316]	@ (800e620 <_svfiprintf_r+0x1e4>)
 800e4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e6:	f7fd fca2 	bl	800be2e <memchr>
 800e4ea:	9a04      	ldr	r2, [sp, #16]
 800e4ec:	b9d8      	cbnz	r0, 800e526 <_svfiprintf_r+0xea>
 800e4ee:	06d0      	lsls	r0, r2, #27
 800e4f0:	bf44      	itt	mi
 800e4f2:	2320      	movmi	r3, #32
 800e4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4f8:	0711      	lsls	r1, r2, #28
 800e4fa:	bf44      	itt	mi
 800e4fc:	232b      	movmi	r3, #43	@ 0x2b
 800e4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e502:	f89a 3000 	ldrb.w	r3, [sl]
 800e506:	2b2a      	cmp	r3, #42	@ 0x2a
 800e508:	d015      	beq.n	800e536 <_svfiprintf_r+0xfa>
 800e50a:	9a07      	ldr	r2, [sp, #28]
 800e50c:	4654      	mov	r4, sl
 800e50e:	2000      	movs	r0, #0
 800e510:	f04f 0c0a 	mov.w	ip, #10
 800e514:	4621      	mov	r1, r4
 800e516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e51a:	3b30      	subs	r3, #48	@ 0x30
 800e51c:	2b09      	cmp	r3, #9
 800e51e:	d94b      	bls.n	800e5b8 <_svfiprintf_r+0x17c>
 800e520:	b1b0      	cbz	r0, 800e550 <_svfiprintf_r+0x114>
 800e522:	9207      	str	r2, [sp, #28]
 800e524:	e014      	b.n	800e550 <_svfiprintf_r+0x114>
 800e526:	eba0 0308 	sub.w	r3, r0, r8
 800e52a:	46a2      	mov	sl, r4
 800e52c:	fa09 f303 	lsl.w	r3, r9, r3
 800e530:	4313      	orrs	r3, r2
 800e532:	9304      	str	r3, [sp, #16]
 800e534:	e7d2      	b.n	800e4dc <_svfiprintf_r+0xa0>
 800e536:	9b03      	ldr	r3, [sp, #12]
 800e538:	1d19      	adds	r1, r3, #4
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	9103      	str	r1, [sp, #12]
 800e540:	bfbb      	ittet	lt
 800e542:	425b      	neglt	r3, r3
 800e544:	f042 0202 	orrlt.w	r2, r2, #2
 800e548:	9307      	strge	r3, [sp, #28]
 800e54a:	9307      	strlt	r3, [sp, #28]
 800e54c:	bfb8      	it	lt
 800e54e:	9204      	strlt	r2, [sp, #16]
 800e550:	7823      	ldrb	r3, [r4, #0]
 800e552:	2b2e      	cmp	r3, #46	@ 0x2e
 800e554:	d10a      	bne.n	800e56c <_svfiprintf_r+0x130>
 800e556:	7863      	ldrb	r3, [r4, #1]
 800e558:	2b2a      	cmp	r3, #42	@ 0x2a
 800e55a:	d132      	bne.n	800e5c2 <_svfiprintf_r+0x186>
 800e55c:	9b03      	ldr	r3, [sp, #12]
 800e55e:	3402      	adds	r4, #2
 800e560:	1d1a      	adds	r2, r3, #4
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e568:	9203      	str	r2, [sp, #12]
 800e56a:	9305      	str	r3, [sp, #20]
 800e56c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e630 <_svfiprintf_r+0x1f4>
 800e570:	2203      	movs	r2, #3
 800e572:	7821      	ldrb	r1, [r4, #0]
 800e574:	4650      	mov	r0, sl
 800e576:	f7fd fc5a 	bl	800be2e <memchr>
 800e57a:	b138      	cbz	r0, 800e58c <_svfiprintf_r+0x150>
 800e57c:	eba0 000a 	sub.w	r0, r0, sl
 800e580:	2240      	movs	r2, #64	@ 0x40
 800e582:	9b04      	ldr	r3, [sp, #16]
 800e584:	3401      	adds	r4, #1
 800e586:	4082      	lsls	r2, r0
 800e588:	4313      	orrs	r3, r2
 800e58a:	9304      	str	r3, [sp, #16]
 800e58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e590:	2206      	movs	r2, #6
 800e592:	4824      	ldr	r0, [pc, #144]	@ (800e624 <_svfiprintf_r+0x1e8>)
 800e594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e598:	f7fd fc49 	bl	800be2e <memchr>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d036      	beq.n	800e60e <_svfiprintf_r+0x1d2>
 800e5a0:	4b21      	ldr	r3, [pc, #132]	@ (800e628 <_svfiprintf_r+0x1ec>)
 800e5a2:	bb1b      	cbnz	r3, 800e5ec <_svfiprintf_r+0x1b0>
 800e5a4:	9b03      	ldr	r3, [sp, #12]
 800e5a6:	3307      	adds	r3, #7
 800e5a8:	f023 0307 	bic.w	r3, r3, #7
 800e5ac:	3308      	adds	r3, #8
 800e5ae:	9303      	str	r3, [sp, #12]
 800e5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b2:	4433      	add	r3, r6
 800e5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5b6:	e76a      	b.n	800e48e <_svfiprintf_r+0x52>
 800e5b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5bc:	460c      	mov	r4, r1
 800e5be:	2001      	movs	r0, #1
 800e5c0:	e7a8      	b.n	800e514 <_svfiprintf_r+0xd8>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	3401      	adds	r4, #1
 800e5c6:	f04f 0c0a 	mov.w	ip, #10
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	9305      	str	r3, [sp, #20]
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5d4:	3a30      	subs	r2, #48	@ 0x30
 800e5d6:	2a09      	cmp	r2, #9
 800e5d8:	d903      	bls.n	800e5e2 <_svfiprintf_r+0x1a6>
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d0c6      	beq.n	800e56c <_svfiprintf_r+0x130>
 800e5de:	9105      	str	r1, [sp, #20]
 800e5e0:	e7c4      	b.n	800e56c <_svfiprintf_r+0x130>
 800e5e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e7f0      	b.n	800e5ce <_svfiprintf_r+0x192>
 800e5ec:	ab03      	add	r3, sp, #12
 800e5ee:	462a      	mov	r2, r5
 800e5f0:	a904      	add	r1, sp, #16
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	9300      	str	r3, [sp, #0]
 800e5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e62c <_svfiprintf_r+0x1f0>)
 800e5f8:	f7fc fca6 	bl	800af48 <_printf_float>
 800e5fc:	1c42      	adds	r2, r0, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	d1d6      	bne.n	800e5b0 <_svfiprintf_r+0x174>
 800e602:	89ab      	ldrh	r3, [r5, #12]
 800e604:	065b      	lsls	r3, r3, #25
 800e606:	f53f af2d 	bmi.w	800e464 <_svfiprintf_r+0x28>
 800e60a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e60c:	e72c      	b.n	800e468 <_svfiprintf_r+0x2c>
 800e60e:	ab03      	add	r3, sp, #12
 800e610:	462a      	mov	r2, r5
 800e612:	a904      	add	r1, sp, #16
 800e614:	4638      	mov	r0, r7
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	4b04      	ldr	r3, [pc, #16]	@ (800e62c <_svfiprintf_r+0x1f0>)
 800e61a:	f7fc ff31 	bl	800b480 <_printf_i>
 800e61e:	e7ed      	b.n	800e5fc <_svfiprintf_r+0x1c0>
 800e620:	0800f9c9 	.word	0x0800f9c9
 800e624:	0800f9d3 	.word	0x0800f9d3
 800e628:	0800af49 	.word	0x0800af49
 800e62c:	0800e385 	.word	0x0800e385
 800e630:	0800f9cf 	.word	0x0800f9cf

0800e634 <__sflush_r>:
 800e634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e63c:	0716      	lsls	r6, r2, #28
 800e63e:	4605      	mov	r5, r0
 800e640:	460c      	mov	r4, r1
 800e642:	d454      	bmi.n	800e6ee <__sflush_r+0xba>
 800e644:	684b      	ldr	r3, [r1, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	dc02      	bgt.n	800e650 <__sflush_r+0x1c>
 800e64a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	dd48      	ble.n	800e6e2 <__sflush_r+0xae>
 800e650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e652:	2e00      	cmp	r6, #0
 800e654:	d045      	beq.n	800e6e2 <__sflush_r+0xae>
 800e656:	2300      	movs	r3, #0
 800e658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e65c:	682f      	ldr	r7, [r5, #0]
 800e65e:	6a21      	ldr	r1, [r4, #32]
 800e660:	602b      	str	r3, [r5, #0]
 800e662:	d030      	beq.n	800e6c6 <__sflush_r+0x92>
 800e664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	0759      	lsls	r1, r3, #29
 800e66a:	d505      	bpl.n	800e678 <__sflush_r+0x44>
 800e66c:	6863      	ldr	r3, [r4, #4]
 800e66e:	1ad2      	subs	r2, r2, r3
 800e670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e672:	b10b      	cbz	r3, 800e678 <__sflush_r+0x44>
 800e674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e676:	1ad2      	subs	r2, r2, r3
 800e678:	2300      	movs	r3, #0
 800e67a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e67c:	6a21      	ldr	r1, [r4, #32]
 800e67e:	4628      	mov	r0, r5
 800e680:	47b0      	blx	r6
 800e682:	1c43      	adds	r3, r0, #1
 800e684:	89a3      	ldrh	r3, [r4, #12]
 800e686:	d106      	bne.n	800e696 <__sflush_r+0x62>
 800e688:	6829      	ldr	r1, [r5, #0]
 800e68a:	291d      	cmp	r1, #29
 800e68c:	d82b      	bhi.n	800e6e6 <__sflush_r+0xb2>
 800e68e:	4a2a      	ldr	r2, [pc, #168]	@ (800e738 <__sflush_r+0x104>)
 800e690:	410a      	asrs	r2, r1
 800e692:	07d6      	lsls	r6, r2, #31
 800e694:	d427      	bmi.n	800e6e6 <__sflush_r+0xb2>
 800e696:	2200      	movs	r2, #0
 800e698:	04d9      	lsls	r1, r3, #19
 800e69a:	6062      	str	r2, [r4, #4]
 800e69c:	6922      	ldr	r2, [r4, #16]
 800e69e:	6022      	str	r2, [r4, #0]
 800e6a0:	d504      	bpl.n	800e6ac <__sflush_r+0x78>
 800e6a2:	1c42      	adds	r2, r0, #1
 800e6a4:	d101      	bne.n	800e6aa <__sflush_r+0x76>
 800e6a6:	682b      	ldr	r3, [r5, #0]
 800e6a8:	b903      	cbnz	r3, 800e6ac <__sflush_r+0x78>
 800e6aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800e6ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6ae:	602f      	str	r7, [r5, #0]
 800e6b0:	b1b9      	cbz	r1, 800e6e2 <__sflush_r+0xae>
 800e6b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6b6:	4299      	cmp	r1, r3
 800e6b8:	d002      	beq.n	800e6c0 <__sflush_r+0x8c>
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f7fe fa20 	bl	800cb00 <_free_r>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6c4:	e00d      	b.n	800e6e2 <__sflush_r+0xae>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	47b0      	blx	r6
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	1c50      	adds	r0, r2, #1
 800e6d0:	d1c9      	bne.n	800e666 <__sflush_r+0x32>
 800e6d2:	682b      	ldr	r3, [r5, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d0c6      	beq.n	800e666 <__sflush_r+0x32>
 800e6d8:	2b1d      	cmp	r3, #29
 800e6da:	d001      	beq.n	800e6e0 <__sflush_r+0xac>
 800e6dc:	2b16      	cmp	r3, #22
 800e6de:	d11d      	bne.n	800e71c <__sflush_r+0xe8>
 800e6e0:	602f      	str	r7, [r5, #0]
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	e021      	b.n	800e72a <__sflush_r+0xf6>
 800e6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ea:	b21b      	sxth	r3, r3
 800e6ec:	e01a      	b.n	800e724 <__sflush_r+0xf0>
 800e6ee:	690f      	ldr	r7, [r1, #16]
 800e6f0:	2f00      	cmp	r7, #0
 800e6f2:	d0f6      	beq.n	800e6e2 <__sflush_r+0xae>
 800e6f4:	0793      	lsls	r3, r2, #30
 800e6f6:	680e      	ldr	r6, [r1, #0]
 800e6f8:	600f      	str	r7, [r1, #0]
 800e6fa:	bf0c      	ite	eq
 800e6fc:	694b      	ldreq	r3, [r1, #20]
 800e6fe:	2300      	movne	r3, #0
 800e700:	eba6 0807 	sub.w	r8, r6, r7
 800e704:	608b      	str	r3, [r1, #8]
 800e706:	f1b8 0f00 	cmp.w	r8, #0
 800e70a:	ddea      	ble.n	800e6e2 <__sflush_r+0xae>
 800e70c:	4643      	mov	r3, r8
 800e70e:	463a      	mov	r2, r7
 800e710:	6a21      	ldr	r1, [r4, #32]
 800e712:	4628      	mov	r0, r5
 800e714:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e716:	47b0      	blx	r6
 800e718:	2800      	cmp	r0, #0
 800e71a:	dc08      	bgt.n	800e72e <__sflush_r+0xfa>
 800e71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	81a3      	strh	r3, [r4, #12]
 800e72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72e:	4407      	add	r7, r0
 800e730:	eba8 0800 	sub.w	r8, r8, r0
 800e734:	e7e7      	b.n	800e706 <__sflush_r+0xd2>
 800e736:	bf00      	nop
 800e738:	dfbffffe 	.word	0xdfbffffe

0800e73c <_fflush_r>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	690b      	ldr	r3, [r1, #16]
 800e740:	4605      	mov	r5, r0
 800e742:	460c      	mov	r4, r1
 800e744:	b913      	cbnz	r3, 800e74c <_fflush_r+0x10>
 800e746:	2500      	movs	r5, #0
 800e748:	4628      	mov	r0, r5
 800e74a:	bd38      	pop	{r3, r4, r5, pc}
 800e74c:	b118      	cbz	r0, 800e756 <_fflush_r+0x1a>
 800e74e:	6a03      	ldr	r3, [r0, #32]
 800e750:	b90b      	cbnz	r3, 800e756 <_fflush_r+0x1a>
 800e752:	f7fd fa53 	bl	800bbfc <__sinit>
 800e756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d0f3      	beq.n	800e746 <_fflush_r+0xa>
 800e75e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e760:	07d0      	lsls	r0, r2, #31
 800e762:	d404      	bmi.n	800e76e <_fflush_r+0x32>
 800e764:	0599      	lsls	r1, r3, #22
 800e766:	d402      	bmi.n	800e76e <_fflush_r+0x32>
 800e768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e76a:	f7fd fb5e 	bl	800be2a <__retarget_lock_acquire_recursive>
 800e76e:	4628      	mov	r0, r5
 800e770:	4621      	mov	r1, r4
 800e772:	f7ff ff5f 	bl	800e634 <__sflush_r>
 800e776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e778:	4605      	mov	r5, r0
 800e77a:	07da      	lsls	r2, r3, #31
 800e77c:	d4e4      	bmi.n	800e748 <_fflush_r+0xc>
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	059b      	lsls	r3, r3, #22
 800e782:	d4e1      	bmi.n	800e748 <_fflush_r+0xc>
 800e784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e786:	f7fd fb51 	bl	800be2c <__retarget_lock_release_recursive>
 800e78a:	e7dd      	b.n	800e748 <_fflush_r+0xc>

0800e78c <memmove>:
 800e78c:	4288      	cmp	r0, r1
 800e78e:	b510      	push	{r4, lr}
 800e790:	eb01 0402 	add.w	r4, r1, r2
 800e794:	d902      	bls.n	800e79c <memmove+0x10>
 800e796:	4284      	cmp	r4, r0
 800e798:	4623      	mov	r3, r4
 800e79a:	d807      	bhi.n	800e7ac <memmove+0x20>
 800e79c:	1e43      	subs	r3, r0, #1
 800e79e:	42a1      	cmp	r1, r4
 800e7a0:	d008      	beq.n	800e7b4 <memmove+0x28>
 800e7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7aa:	e7f8      	b.n	800e79e <memmove+0x12>
 800e7ac:	4402      	add	r2, r0
 800e7ae:	4601      	mov	r1, r0
 800e7b0:	428a      	cmp	r2, r1
 800e7b2:	d100      	bne.n	800e7b6 <memmove+0x2a>
 800e7b4:	bd10      	pop	{r4, pc}
 800e7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7be:	e7f7      	b.n	800e7b0 <memmove+0x24>

0800e7c0 <strncmp>:
 800e7c0:	b510      	push	{r4, lr}
 800e7c2:	b16a      	cbz	r2, 800e7e0 <strncmp+0x20>
 800e7c4:	3901      	subs	r1, #1
 800e7c6:	1884      	adds	r4, r0, r2
 800e7c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d103      	bne.n	800e7dc <strncmp+0x1c>
 800e7d4:	42a0      	cmp	r0, r4
 800e7d6:	d001      	beq.n	800e7dc <strncmp+0x1c>
 800e7d8:	2a00      	cmp	r2, #0
 800e7da:	d1f5      	bne.n	800e7c8 <strncmp+0x8>
 800e7dc:	1ad0      	subs	r0, r2, r3
 800e7de:	bd10      	pop	{r4, pc}
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	e7fc      	b.n	800e7de <strncmp+0x1e>

0800e7e4 <_sbrk_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	4d05      	ldr	r5, [pc, #20]	@ (800e800 <_sbrk_r+0x1c>)
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	4608      	mov	r0, r1
 800e7ee:	602b      	str	r3, [r5, #0]
 800e7f0:	f7f3 f99c 	bl	8001b2c <_sbrk>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	d102      	bne.n	800e7fe <_sbrk_r+0x1a>
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	b103      	cbz	r3, 800e7fe <_sbrk_r+0x1a>
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
 800e800:	20000a3c 	.word	0x20000a3c

0800e804 <memcpy>:
 800e804:	440a      	add	r2, r1
 800e806:	1e43      	subs	r3, r0, #1
 800e808:	4291      	cmp	r1, r2
 800e80a:	d100      	bne.n	800e80e <memcpy+0xa>
 800e80c:	4770      	bx	lr
 800e80e:	b510      	push	{r4, lr}
 800e810:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e814:	4291      	cmp	r1, r2
 800e816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e81a:	d1f9      	bne.n	800e810 <memcpy+0xc>
 800e81c:	bd10      	pop	{r4, pc}
	...

0800e820 <nan>:
 800e820:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e828 <nan+0x8>
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	00000000 	.word	0x00000000
 800e82c:	7ff80000 	.word	0x7ff80000

0800e830 <__assert_func>:
 800e830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e832:	4614      	mov	r4, r2
 800e834:	461a      	mov	r2, r3
 800e836:	4b09      	ldr	r3, [pc, #36]	@ (800e85c <__assert_func+0x2c>)
 800e838:	4605      	mov	r5, r0
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68d8      	ldr	r0, [r3, #12]
 800e83e:	b954      	cbnz	r4, 800e856 <__assert_func+0x26>
 800e840:	4b07      	ldr	r3, [pc, #28]	@ (800e860 <__assert_func+0x30>)
 800e842:	461c      	mov	r4, r3
 800e844:	9100      	str	r1, [sp, #0]
 800e846:	4907      	ldr	r1, [pc, #28]	@ (800e864 <__assert_func+0x34>)
 800e848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e84c:	462b      	mov	r3, r5
 800e84e:	f000 fba3 	bl	800ef98 <fiprintf>
 800e852:	f000 fbb3 	bl	800efbc <abort>
 800e856:	4b04      	ldr	r3, [pc, #16]	@ (800e868 <__assert_func+0x38>)
 800e858:	e7f4      	b.n	800e844 <__assert_func+0x14>
 800e85a:	bf00      	nop
 800e85c:	20000030 	.word	0x20000030
 800e860:	0800fa1d 	.word	0x0800fa1d
 800e864:	0800f9ef 	.word	0x0800f9ef
 800e868:	0800f9e2 	.word	0x0800f9e2

0800e86c <_calloc_r>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	fba1 5402 	umull	r5, r4, r1, r2
 800e872:	b93c      	cbnz	r4, 800e884 <_calloc_r+0x18>
 800e874:	4629      	mov	r1, r5
 800e876:	f7fe f9b7 	bl	800cbe8 <_malloc_r>
 800e87a:	4606      	mov	r6, r0
 800e87c:	b928      	cbnz	r0, 800e88a <_calloc_r+0x1e>
 800e87e:	2600      	movs	r6, #0
 800e880:	4630      	mov	r0, r6
 800e882:	bd70      	pop	{r4, r5, r6, pc}
 800e884:	220c      	movs	r2, #12
 800e886:	6002      	str	r2, [r0, #0]
 800e888:	e7f9      	b.n	800e87e <_calloc_r+0x12>
 800e88a:	462a      	mov	r2, r5
 800e88c:	4621      	mov	r1, r4
 800e88e:	f7fd fa4e 	bl	800bd2e <memset>
 800e892:	e7f5      	b.n	800e880 <_calloc_r+0x14>

0800e894 <rshift>:
 800e894:	6903      	ldr	r3, [r0, #16]
 800e896:	114a      	asrs	r2, r1, #5
 800e898:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	f100 0414 	add.w	r4, r0, #20
 800e8a4:	dd45      	ble.n	800e932 <rshift+0x9e>
 800e8a6:	f011 011f 	ands.w	r1, r1, #31
 800e8aa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e8ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e8b2:	d10c      	bne.n	800e8ce <rshift+0x3a>
 800e8b4:	f100 0710 	add.w	r7, r0, #16
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	42b1      	cmp	r1, r6
 800e8bc:	d334      	bcc.n	800e928 <rshift+0x94>
 800e8be:	1a9b      	subs	r3, r3, r2
 800e8c0:	1eea      	subs	r2, r5, #3
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4296      	cmp	r6, r2
 800e8c6:	bf38      	it	cc
 800e8c8:	2300      	movcc	r3, #0
 800e8ca:	4423      	add	r3, r4
 800e8cc:	e015      	b.n	800e8fa <rshift+0x66>
 800e8ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e8d2:	f1c1 0820 	rsb	r8, r1, #32
 800e8d6:	f105 0e04 	add.w	lr, r5, #4
 800e8da:	46a1      	mov	r9, r4
 800e8dc:	40cf      	lsrs	r7, r1
 800e8de:	4576      	cmp	r6, lr
 800e8e0:	46f4      	mov	ip, lr
 800e8e2:	d815      	bhi.n	800e910 <rshift+0x7c>
 800e8e4:	1a9a      	subs	r2, r3, r2
 800e8e6:	3501      	adds	r5, #1
 800e8e8:	0092      	lsls	r2, r2, #2
 800e8ea:	3a04      	subs	r2, #4
 800e8ec:	42ae      	cmp	r6, r5
 800e8ee:	bf38      	it	cc
 800e8f0:	2200      	movcc	r2, #0
 800e8f2:	18a3      	adds	r3, r4, r2
 800e8f4:	50a7      	str	r7, [r4, r2]
 800e8f6:	b107      	cbz	r7, 800e8fa <rshift+0x66>
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	1b1a      	subs	r2, r3, r4
 800e8fc:	42a3      	cmp	r3, r4
 800e8fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e902:	bf08      	it	eq
 800e904:	2300      	moveq	r3, #0
 800e906:	6102      	str	r2, [r0, #16]
 800e908:	bf08      	it	eq
 800e90a:	6143      	streq	r3, [r0, #20]
 800e90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e910:	f8dc c000 	ldr.w	ip, [ip]
 800e914:	fa0c fc08 	lsl.w	ip, ip, r8
 800e918:	ea4c 0707 	orr.w	r7, ip, r7
 800e91c:	f849 7b04 	str.w	r7, [r9], #4
 800e920:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e924:	40cf      	lsrs	r7, r1
 800e926:	e7da      	b.n	800e8de <rshift+0x4a>
 800e928:	f851 cb04 	ldr.w	ip, [r1], #4
 800e92c:	f847 cf04 	str.w	ip, [r7, #4]!
 800e930:	e7c3      	b.n	800e8ba <rshift+0x26>
 800e932:	4623      	mov	r3, r4
 800e934:	e7e1      	b.n	800e8fa <rshift+0x66>

0800e936 <__hexdig_fun>:
 800e936:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e93a:	2b09      	cmp	r3, #9
 800e93c:	d802      	bhi.n	800e944 <__hexdig_fun+0xe>
 800e93e:	3820      	subs	r0, #32
 800e940:	b2c0      	uxtb	r0, r0
 800e942:	4770      	bx	lr
 800e944:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e948:	2b05      	cmp	r3, #5
 800e94a:	d801      	bhi.n	800e950 <__hexdig_fun+0x1a>
 800e94c:	3847      	subs	r0, #71	@ 0x47
 800e94e:	e7f7      	b.n	800e940 <__hexdig_fun+0xa>
 800e950:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e954:	2b05      	cmp	r3, #5
 800e956:	d801      	bhi.n	800e95c <__hexdig_fun+0x26>
 800e958:	3827      	subs	r0, #39	@ 0x27
 800e95a:	e7f1      	b.n	800e940 <__hexdig_fun+0xa>
 800e95c:	2000      	movs	r0, #0
 800e95e:	4770      	bx	lr

0800e960 <__gethex>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	b085      	sub	sp, #20
 800e966:	468a      	mov	sl, r1
 800e968:	4690      	mov	r8, r2
 800e96a:	9302      	str	r3, [sp, #8]
 800e96c:	680b      	ldr	r3, [r1, #0]
 800e96e:	9001      	str	r0, [sp, #4]
 800e970:	1c9c      	adds	r4, r3, #2
 800e972:	46a1      	mov	r9, r4
 800e974:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e978:	2830      	cmp	r0, #48	@ 0x30
 800e97a:	d0fa      	beq.n	800e972 <__gethex+0x12>
 800e97c:	eba9 0303 	sub.w	r3, r9, r3
 800e980:	f1a3 0b02 	sub.w	fp, r3, #2
 800e984:	f7ff ffd7 	bl	800e936 <__hexdig_fun>
 800e988:	4605      	mov	r5, r0
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d166      	bne.n	800ea5c <__gethex+0xfc>
 800e98e:	2201      	movs	r2, #1
 800e990:	499e      	ldr	r1, [pc, #632]	@ (800ec0c <__gethex+0x2ac>)
 800e992:	4648      	mov	r0, r9
 800e994:	f7ff ff14 	bl	800e7c0 <strncmp>
 800e998:	4607      	mov	r7, r0
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d165      	bne.n	800ea6a <__gethex+0x10a>
 800e99e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e9a2:	4626      	mov	r6, r4
 800e9a4:	f7ff ffc7 	bl	800e936 <__hexdig_fun>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d060      	beq.n	800ea6e <__gethex+0x10e>
 800e9ac:	4623      	mov	r3, r4
 800e9ae:	7818      	ldrb	r0, [r3, #0]
 800e9b0:	4699      	mov	r9, r3
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	2830      	cmp	r0, #48	@ 0x30
 800e9b6:	d0fa      	beq.n	800e9ae <__gethex+0x4e>
 800e9b8:	f7ff ffbd 	bl	800e936 <__hexdig_fun>
 800e9bc:	fab0 f580 	clz	r5, r0
 800e9c0:	f04f 0b01 	mov.w	fp, #1
 800e9c4:	096d      	lsrs	r5, r5, #5
 800e9c6:	464a      	mov	r2, r9
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	3201      	adds	r2, #1
 800e9cc:	7830      	ldrb	r0, [r6, #0]
 800e9ce:	f7ff ffb2 	bl	800e936 <__hexdig_fun>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d1f8      	bne.n	800e9c8 <__gethex+0x68>
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	498c      	ldr	r1, [pc, #560]	@ (800ec0c <__gethex+0x2ac>)
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7ff fef0 	bl	800e7c0 <strncmp>
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	d13e      	bne.n	800ea62 <__gethex+0x102>
 800e9e4:	b944      	cbnz	r4, 800e9f8 <__gethex+0x98>
 800e9e6:	1c74      	adds	r4, r6, #1
 800e9e8:	4622      	mov	r2, r4
 800e9ea:	4616      	mov	r6, r2
 800e9ec:	3201      	adds	r2, #1
 800e9ee:	7830      	ldrb	r0, [r6, #0]
 800e9f0:	f7ff ffa1 	bl	800e936 <__hexdig_fun>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d1f8      	bne.n	800e9ea <__gethex+0x8a>
 800e9f8:	1ba4      	subs	r4, r4, r6
 800e9fa:	00a7      	lsls	r7, r4, #2
 800e9fc:	7833      	ldrb	r3, [r6, #0]
 800e9fe:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ea02:	2b50      	cmp	r3, #80	@ 0x50
 800ea04:	d13d      	bne.n	800ea82 <__gethex+0x122>
 800ea06:	7873      	ldrb	r3, [r6, #1]
 800ea08:	2b2b      	cmp	r3, #43	@ 0x2b
 800ea0a:	d032      	beq.n	800ea72 <__gethex+0x112>
 800ea0c:	2b2d      	cmp	r3, #45	@ 0x2d
 800ea0e:	d033      	beq.n	800ea78 <__gethex+0x118>
 800ea10:	1c71      	adds	r1, r6, #1
 800ea12:	2400      	movs	r4, #0
 800ea14:	7808      	ldrb	r0, [r1, #0]
 800ea16:	f7ff ff8e 	bl	800e936 <__hexdig_fun>
 800ea1a:	1e43      	subs	r3, r0, #1
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b18      	cmp	r3, #24
 800ea20:	d82f      	bhi.n	800ea82 <__gethex+0x122>
 800ea22:	f1a0 0210 	sub.w	r2, r0, #16
 800ea26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea2a:	f7ff ff84 	bl	800e936 <__hexdig_fun>
 800ea2e:	f100 3cff 	add.w	ip, r0, #4294967295
 800ea32:	230a      	movs	r3, #10
 800ea34:	fa5f fc8c 	uxtb.w	ip, ip
 800ea38:	f1bc 0f18 	cmp.w	ip, #24
 800ea3c:	d91e      	bls.n	800ea7c <__gethex+0x11c>
 800ea3e:	b104      	cbz	r4, 800ea42 <__gethex+0xe2>
 800ea40:	4252      	negs	r2, r2
 800ea42:	4417      	add	r7, r2
 800ea44:	f8ca 1000 	str.w	r1, [sl]
 800ea48:	b1ed      	cbz	r5, 800ea86 <__gethex+0x126>
 800ea4a:	f1bb 0f00 	cmp.w	fp, #0
 800ea4e:	bf0c      	ite	eq
 800ea50:	2506      	moveq	r5, #6
 800ea52:	2500      	movne	r5, #0
 800ea54:	4628      	mov	r0, r5
 800ea56:	b005      	add	sp, #20
 800ea58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea5c:	2500      	movs	r5, #0
 800ea5e:	462c      	mov	r4, r5
 800ea60:	e7b1      	b.n	800e9c6 <__gethex+0x66>
 800ea62:	2c00      	cmp	r4, #0
 800ea64:	d1c8      	bne.n	800e9f8 <__gethex+0x98>
 800ea66:	4627      	mov	r7, r4
 800ea68:	e7c8      	b.n	800e9fc <__gethex+0x9c>
 800ea6a:	464e      	mov	r6, r9
 800ea6c:	462f      	mov	r7, r5
 800ea6e:	2501      	movs	r5, #1
 800ea70:	e7c4      	b.n	800e9fc <__gethex+0x9c>
 800ea72:	2400      	movs	r4, #0
 800ea74:	1cb1      	adds	r1, r6, #2
 800ea76:	e7cd      	b.n	800ea14 <__gethex+0xb4>
 800ea78:	2401      	movs	r4, #1
 800ea7a:	e7fb      	b.n	800ea74 <__gethex+0x114>
 800ea7c:	fb03 0002 	mla	r0, r3, r2, r0
 800ea80:	e7cf      	b.n	800ea22 <__gethex+0xc2>
 800ea82:	4631      	mov	r1, r6
 800ea84:	e7de      	b.n	800ea44 <__gethex+0xe4>
 800ea86:	eba6 0309 	sub.w	r3, r6, r9
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	2b07      	cmp	r3, #7
 800ea90:	dc0a      	bgt.n	800eaa8 <__gethex+0x148>
 800ea92:	9801      	ldr	r0, [sp, #4]
 800ea94:	f7fe f934 	bl	800cd00 <_Balloc>
 800ea98:	4604      	mov	r4, r0
 800ea9a:	b940      	cbnz	r0, 800eaae <__gethex+0x14e>
 800ea9c:	4b5c      	ldr	r3, [pc, #368]	@ (800ec10 <__gethex+0x2b0>)
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	21e4      	movs	r1, #228	@ 0xe4
 800eaa2:	485c      	ldr	r0, [pc, #368]	@ (800ec14 <__gethex+0x2b4>)
 800eaa4:	f7ff fec4 	bl	800e830 <__assert_func>
 800eaa8:	3101      	adds	r1, #1
 800eaaa:	105b      	asrs	r3, r3, #1
 800eaac:	e7ef      	b.n	800ea8e <__gethex+0x12e>
 800eaae:	f100 0a14 	add.w	sl, r0, #20
 800eab2:	2300      	movs	r3, #0
 800eab4:	4655      	mov	r5, sl
 800eab6:	469b      	mov	fp, r3
 800eab8:	45b1      	cmp	r9, r6
 800eaba:	d337      	bcc.n	800eb2c <__gethex+0x1cc>
 800eabc:	f845 bb04 	str.w	fp, [r5], #4
 800eac0:	eba5 050a 	sub.w	r5, r5, sl
 800eac4:	4658      	mov	r0, fp
 800eac6:	10ad      	asrs	r5, r5, #2
 800eac8:	6125      	str	r5, [r4, #16]
 800eaca:	016d      	lsls	r5, r5, #5
 800eacc:	f7fe fa0c 	bl	800cee8 <__hi0bits>
 800ead0:	f8d8 6000 	ldr.w	r6, [r8]
 800ead4:	1a2d      	subs	r5, r5, r0
 800ead6:	42b5      	cmp	r5, r6
 800ead8:	dd54      	ble.n	800eb84 <__gethex+0x224>
 800eada:	1bad      	subs	r5, r5, r6
 800eadc:	4620      	mov	r0, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	f7fe fda9 	bl	800d636 <__any_on>
 800eae4:	4681      	mov	r9, r0
 800eae6:	b178      	cbz	r0, 800eb08 <__gethex+0x1a8>
 800eae8:	1e6b      	subs	r3, r5, #1
 800eaea:	f04f 0901 	mov.w	r9, #1
 800eaee:	1159      	asrs	r1, r3, #5
 800eaf0:	f003 021f 	and.w	r2, r3, #31
 800eaf4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eaf8:	fa09 f202 	lsl.w	r2, r9, r2
 800eafc:	420a      	tst	r2, r1
 800eafe:	d003      	beq.n	800eb08 <__gethex+0x1a8>
 800eb00:	454b      	cmp	r3, r9
 800eb02:	dc36      	bgt.n	800eb72 <__gethex+0x212>
 800eb04:	f04f 0902 	mov.w	r9, #2
 800eb08:	442f      	add	r7, r5
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f7ff fec1 	bl	800e894 <rshift>
 800eb12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb16:	42bb      	cmp	r3, r7
 800eb18:	da42      	bge.n	800eba0 <__gethex+0x240>
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	9801      	ldr	r0, [sp, #4]
 800eb1e:	f7fe f92f 	bl	800cd80 <_Bfree>
 800eb22:	2300      	movs	r3, #0
 800eb24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb26:	25a3      	movs	r5, #163	@ 0xa3
 800eb28:	6013      	str	r3, [r2, #0]
 800eb2a:	e793      	b.n	800ea54 <__gethex+0xf4>
 800eb2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eb30:	2a2e      	cmp	r2, #46	@ 0x2e
 800eb32:	d012      	beq.n	800eb5a <__gethex+0x1fa>
 800eb34:	2b20      	cmp	r3, #32
 800eb36:	d104      	bne.n	800eb42 <__gethex+0x1e2>
 800eb38:	f845 bb04 	str.w	fp, [r5], #4
 800eb3c:	f04f 0b00 	mov.w	fp, #0
 800eb40:	465b      	mov	r3, fp
 800eb42:	7830      	ldrb	r0, [r6, #0]
 800eb44:	9303      	str	r3, [sp, #12]
 800eb46:	f7ff fef6 	bl	800e936 <__hexdig_fun>
 800eb4a:	9b03      	ldr	r3, [sp, #12]
 800eb4c:	f000 000f 	and.w	r0, r0, #15
 800eb50:	4098      	lsls	r0, r3
 800eb52:	3304      	adds	r3, #4
 800eb54:	ea4b 0b00 	orr.w	fp, fp, r0
 800eb58:	e7ae      	b.n	800eab8 <__gethex+0x158>
 800eb5a:	45b1      	cmp	r9, r6
 800eb5c:	d8ea      	bhi.n	800eb34 <__gethex+0x1d4>
 800eb5e:	2201      	movs	r2, #1
 800eb60:	492a      	ldr	r1, [pc, #168]	@ (800ec0c <__gethex+0x2ac>)
 800eb62:	4630      	mov	r0, r6
 800eb64:	9303      	str	r3, [sp, #12]
 800eb66:	f7ff fe2b 	bl	800e7c0 <strncmp>
 800eb6a:	9b03      	ldr	r3, [sp, #12]
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d1e1      	bne.n	800eb34 <__gethex+0x1d4>
 800eb70:	e7a2      	b.n	800eab8 <__gethex+0x158>
 800eb72:	1ea9      	subs	r1, r5, #2
 800eb74:	4620      	mov	r0, r4
 800eb76:	f7fe fd5e 	bl	800d636 <__any_on>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d0c2      	beq.n	800eb04 <__gethex+0x1a4>
 800eb7e:	f04f 0903 	mov.w	r9, #3
 800eb82:	e7c1      	b.n	800eb08 <__gethex+0x1a8>
 800eb84:	da09      	bge.n	800eb9a <__gethex+0x23a>
 800eb86:	1b75      	subs	r5, r6, r5
 800eb88:	4621      	mov	r1, r4
 800eb8a:	9801      	ldr	r0, [sp, #4]
 800eb8c:	462a      	mov	r2, r5
 800eb8e:	1b7f      	subs	r7, r7, r5
 800eb90:	f7fe fb10 	bl	800d1b4 <__lshift>
 800eb94:	4604      	mov	r4, r0
 800eb96:	f100 0a14 	add.w	sl, r0, #20
 800eb9a:	f04f 0900 	mov.w	r9, #0
 800eb9e:	e7b8      	b.n	800eb12 <__gethex+0x1b2>
 800eba0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eba4:	42bd      	cmp	r5, r7
 800eba6:	dd6f      	ble.n	800ec88 <__gethex+0x328>
 800eba8:	1bed      	subs	r5, r5, r7
 800ebaa:	42ae      	cmp	r6, r5
 800ebac:	dc34      	bgt.n	800ec18 <__gethex+0x2b8>
 800ebae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	d022      	beq.n	800ebfc <__gethex+0x29c>
 800ebb6:	2b03      	cmp	r3, #3
 800ebb8:	d024      	beq.n	800ec04 <__gethex+0x2a4>
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d115      	bne.n	800ebea <__gethex+0x28a>
 800ebbe:	42ae      	cmp	r6, r5
 800ebc0:	d113      	bne.n	800ebea <__gethex+0x28a>
 800ebc2:	2e01      	cmp	r6, #1
 800ebc4:	d10b      	bne.n	800ebde <__gethex+0x27e>
 800ebc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ebca:	2562      	movs	r5, #98	@ 0x62
 800ebcc:	9a02      	ldr	r2, [sp, #8]
 800ebce:	6013      	str	r3, [r2, #0]
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	6123      	str	r3, [r4, #16]
 800ebd4:	f8ca 3000 	str.w	r3, [sl]
 800ebd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebda:	601c      	str	r4, [r3, #0]
 800ebdc:	e73a      	b.n	800ea54 <__gethex+0xf4>
 800ebde:	1e71      	subs	r1, r6, #1
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	f7fe fd28 	bl	800d636 <__any_on>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d1ed      	bne.n	800ebc6 <__gethex+0x266>
 800ebea:	4621      	mov	r1, r4
 800ebec:	9801      	ldr	r0, [sp, #4]
 800ebee:	f7fe f8c7 	bl	800cd80 <_Bfree>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebf6:	2550      	movs	r5, #80	@ 0x50
 800ebf8:	6013      	str	r3, [r2, #0]
 800ebfa:	e72b      	b.n	800ea54 <__gethex+0xf4>
 800ebfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1f3      	bne.n	800ebea <__gethex+0x28a>
 800ec02:	e7e0      	b.n	800ebc6 <__gethex+0x266>
 800ec04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d1dd      	bne.n	800ebc6 <__gethex+0x266>
 800ec0a:	e7ee      	b.n	800ebea <__gethex+0x28a>
 800ec0c:	0800f870 	.word	0x0800f870
 800ec10:	0800f709 	.word	0x0800f709
 800ec14:	0800fa1e 	.word	0x0800fa1e
 800ec18:	1e6f      	subs	r7, r5, #1
 800ec1a:	f1b9 0f00 	cmp.w	r9, #0
 800ec1e:	d130      	bne.n	800ec82 <__gethex+0x322>
 800ec20:	b127      	cbz	r7, 800ec2c <__gethex+0x2cc>
 800ec22:	4639      	mov	r1, r7
 800ec24:	4620      	mov	r0, r4
 800ec26:	f7fe fd06 	bl	800d636 <__any_on>
 800ec2a:	4681      	mov	r9, r0
 800ec2c:	117a      	asrs	r2, r7, #5
 800ec2e:	2301      	movs	r3, #1
 800ec30:	f007 071f 	and.w	r7, r7, #31
 800ec34:	4629      	mov	r1, r5
 800ec36:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	40bb      	lsls	r3, r7
 800ec3e:	1b76      	subs	r6, r6, r5
 800ec40:	2502      	movs	r5, #2
 800ec42:	4213      	tst	r3, r2
 800ec44:	bf18      	it	ne
 800ec46:	f049 0902 	orrne.w	r9, r9, #2
 800ec4a:	f7ff fe23 	bl	800e894 <rshift>
 800ec4e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ec52:	f1b9 0f00 	cmp.w	r9, #0
 800ec56:	d047      	beq.n	800ece8 <__gethex+0x388>
 800ec58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d015      	beq.n	800ec8c <__gethex+0x32c>
 800ec60:	2b03      	cmp	r3, #3
 800ec62:	d017      	beq.n	800ec94 <__gethex+0x334>
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d109      	bne.n	800ec7c <__gethex+0x31c>
 800ec68:	f019 0f02 	tst.w	r9, #2
 800ec6c:	d006      	beq.n	800ec7c <__gethex+0x31c>
 800ec6e:	f8da 3000 	ldr.w	r3, [sl]
 800ec72:	ea49 0903 	orr.w	r9, r9, r3
 800ec76:	f019 0f01 	tst.w	r9, #1
 800ec7a:	d10e      	bne.n	800ec9a <__gethex+0x33a>
 800ec7c:	f045 0510 	orr.w	r5, r5, #16
 800ec80:	e032      	b.n	800ece8 <__gethex+0x388>
 800ec82:	f04f 0901 	mov.w	r9, #1
 800ec86:	e7d1      	b.n	800ec2c <__gethex+0x2cc>
 800ec88:	2501      	movs	r5, #1
 800ec8a:	e7e2      	b.n	800ec52 <__gethex+0x2f2>
 800ec8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec8e:	f1c3 0301 	rsb	r3, r3, #1
 800ec92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d0f0      	beq.n	800ec7c <__gethex+0x31c>
 800ec9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec9e:	f104 0314 	add.w	r3, r4, #20
 800eca2:	f04f 0c00 	mov.w	ip, #0
 800eca6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ecaa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ecb8:	d01b      	beq.n	800ecf2 <__gethex+0x392>
 800ecba:	3201      	adds	r2, #1
 800ecbc:	6002      	str	r2, [r0, #0]
 800ecbe:	2d02      	cmp	r5, #2
 800ecc0:	f104 0314 	add.w	r3, r4, #20
 800ecc4:	d13c      	bne.n	800ed40 <__gethex+0x3e0>
 800ecc6:	f8d8 2000 	ldr.w	r2, [r8]
 800ecca:	3a01      	subs	r2, #1
 800eccc:	42b2      	cmp	r2, r6
 800ecce:	d109      	bne.n	800ece4 <__gethex+0x384>
 800ecd0:	1171      	asrs	r1, r6, #5
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f006 061f 	and.w	r6, r6, #31
 800ecd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ecdc:	fa02 f606 	lsl.w	r6, r2, r6
 800ece0:	421e      	tst	r6, r3
 800ece2:	d13a      	bne.n	800ed5a <__gethex+0x3fa>
 800ece4:	f045 0520 	orr.w	r5, r5, #32
 800ece8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecea:	601c      	str	r4, [r3, #0]
 800ecec:	9b02      	ldr	r3, [sp, #8]
 800ecee:	601f      	str	r7, [r3, #0]
 800ecf0:	e6b0      	b.n	800ea54 <__gethex+0xf4>
 800ecf2:	4299      	cmp	r1, r3
 800ecf4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ecf8:	d8d9      	bhi.n	800ecae <__gethex+0x34e>
 800ecfa:	68a3      	ldr	r3, [r4, #8]
 800ecfc:	459b      	cmp	fp, r3
 800ecfe:	db17      	blt.n	800ed30 <__gethex+0x3d0>
 800ed00:	6861      	ldr	r1, [r4, #4]
 800ed02:	9801      	ldr	r0, [sp, #4]
 800ed04:	3101      	adds	r1, #1
 800ed06:	f7fd fffb 	bl	800cd00 <_Balloc>
 800ed0a:	4681      	mov	r9, r0
 800ed0c:	b918      	cbnz	r0, 800ed16 <__gethex+0x3b6>
 800ed0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ed78 <__gethex+0x418>)
 800ed10:	4602      	mov	r2, r0
 800ed12:	2184      	movs	r1, #132	@ 0x84
 800ed14:	e6c5      	b.n	800eaa2 <__gethex+0x142>
 800ed16:	6922      	ldr	r2, [r4, #16]
 800ed18:	f104 010c 	add.w	r1, r4, #12
 800ed1c:	300c      	adds	r0, #12
 800ed1e:	3202      	adds	r2, #2
 800ed20:	0092      	lsls	r2, r2, #2
 800ed22:	f7ff fd6f 	bl	800e804 <memcpy>
 800ed26:	4621      	mov	r1, r4
 800ed28:	464c      	mov	r4, r9
 800ed2a:	9801      	ldr	r0, [sp, #4]
 800ed2c:	f7fe f828 	bl	800cd80 <_Bfree>
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	1c5a      	adds	r2, r3, #1
 800ed34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed38:	6122      	str	r2, [r4, #16]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	615a      	str	r2, [r3, #20]
 800ed3e:	e7be      	b.n	800ecbe <__gethex+0x35e>
 800ed40:	6922      	ldr	r2, [r4, #16]
 800ed42:	455a      	cmp	r2, fp
 800ed44:	dd0b      	ble.n	800ed5e <__gethex+0x3fe>
 800ed46:	2101      	movs	r1, #1
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f7ff fda3 	bl	800e894 <rshift>
 800ed4e:	3701      	adds	r7, #1
 800ed50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed54:	42bb      	cmp	r3, r7
 800ed56:	f6ff aee0 	blt.w	800eb1a <__gethex+0x1ba>
 800ed5a:	2501      	movs	r5, #1
 800ed5c:	e7c2      	b.n	800ece4 <__gethex+0x384>
 800ed5e:	f016 061f 	ands.w	r6, r6, #31
 800ed62:	d0fa      	beq.n	800ed5a <__gethex+0x3fa>
 800ed64:	4453      	add	r3, sl
 800ed66:	f1c6 0620 	rsb	r6, r6, #32
 800ed6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ed6e:	f7fe f8bb 	bl	800cee8 <__hi0bits>
 800ed72:	42b0      	cmp	r0, r6
 800ed74:	dbe7      	blt.n	800ed46 <__gethex+0x3e6>
 800ed76:	e7f0      	b.n	800ed5a <__gethex+0x3fa>
 800ed78:	0800f709 	.word	0x0800f709

0800ed7c <L_shift>:
 800ed7c:	f1c2 0208 	rsb	r2, r2, #8
 800ed80:	0092      	lsls	r2, r2, #2
 800ed82:	b570      	push	{r4, r5, r6, lr}
 800ed84:	f1c2 0620 	rsb	r6, r2, #32
 800ed88:	6843      	ldr	r3, [r0, #4]
 800ed8a:	6804      	ldr	r4, [r0, #0]
 800ed8c:	fa03 f506 	lsl.w	r5, r3, r6
 800ed90:	40d3      	lsrs	r3, r2
 800ed92:	432c      	orrs	r4, r5
 800ed94:	6004      	str	r4, [r0, #0]
 800ed96:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed9a:	4288      	cmp	r0, r1
 800ed9c:	d3f4      	bcc.n	800ed88 <L_shift+0xc>
 800ed9e:	bd70      	pop	{r4, r5, r6, pc}

0800eda0 <__match>:
 800eda0:	6803      	ldr	r3, [r0, #0]
 800eda2:	3301      	adds	r3, #1
 800eda4:	b530      	push	{r4, r5, lr}
 800eda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edaa:	b914      	cbnz	r4, 800edb2 <__match+0x12>
 800edac:	6003      	str	r3, [r0, #0]
 800edae:	2001      	movs	r0, #1
 800edb0:	bd30      	pop	{r4, r5, pc}
 800edb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800edba:	2d19      	cmp	r5, #25
 800edbc:	bf98      	it	ls
 800edbe:	3220      	addls	r2, #32
 800edc0:	42a2      	cmp	r2, r4
 800edc2:	d0f0      	beq.n	800eda6 <__match+0x6>
 800edc4:	2000      	movs	r0, #0
 800edc6:	e7f3      	b.n	800edb0 <__match+0x10>

0800edc8 <__hexnan>:
 800edc8:	680b      	ldr	r3, [r1, #0]
 800edca:	6801      	ldr	r1, [r0, #0]
 800edcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd0:	115e      	asrs	r6, r3, #5
 800edd2:	f013 031f 	ands.w	r3, r3, #31
 800edd6:	f04f 0500 	mov.w	r5, #0
 800edda:	b087      	sub	sp, #28
 800eddc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ede0:	4682      	mov	sl, r0
 800ede2:	4690      	mov	r8, r2
 800ede4:	46ab      	mov	fp, r5
 800ede6:	bf18      	it	ne
 800ede8:	3604      	addne	r6, #4
 800edea:	9301      	str	r3, [sp, #4]
 800edec:	9502      	str	r5, [sp, #8]
 800edee:	1f37      	subs	r7, r6, #4
 800edf0:	f846 5c04 	str.w	r5, [r6, #-4]
 800edf4:	46b9      	mov	r9, r7
 800edf6:	463c      	mov	r4, r7
 800edf8:	1c4b      	adds	r3, r1, #1
 800edfa:	784a      	ldrb	r2, [r1, #1]
 800edfc:	9303      	str	r3, [sp, #12]
 800edfe:	b342      	cbz	r2, 800ee52 <__hexnan+0x8a>
 800ee00:	4610      	mov	r0, r2
 800ee02:	9105      	str	r1, [sp, #20]
 800ee04:	9204      	str	r2, [sp, #16]
 800ee06:	f7ff fd96 	bl	800e936 <__hexdig_fun>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d151      	bne.n	800eeb2 <__hexnan+0xea>
 800ee0e:	9a04      	ldr	r2, [sp, #16]
 800ee10:	9905      	ldr	r1, [sp, #20]
 800ee12:	2a20      	cmp	r2, #32
 800ee14:	d818      	bhi.n	800ee48 <__hexnan+0x80>
 800ee16:	9b02      	ldr	r3, [sp, #8]
 800ee18:	459b      	cmp	fp, r3
 800ee1a:	dd13      	ble.n	800ee44 <__hexnan+0x7c>
 800ee1c:	454c      	cmp	r4, r9
 800ee1e:	d206      	bcs.n	800ee2e <__hexnan+0x66>
 800ee20:	2d07      	cmp	r5, #7
 800ee22:	dc04      	bgt.n	800ee2e <__hexnan+0x66>
 800ee24:	462a      	mov	r2, r5
 800ee26:	4649      	mov	r1, r9
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f7ff ffa7 	bl	800ed7c <L_shift>
 800ee2e:	4544      	cmp	r4, r8
 800ee30:	d951      	bls.n	800eed6 <__hexnan+0x10e>
 800ee32:	2300      	movs	r3, #0
 800ee34:	f1a4 0904 	sub.w	r9, r4, #4
 800ee38:	f8cd b008 	str.w	fp, [sp, #8]
 800ee3c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee40:	461d      	mov	r5, r3
 800ee42:	464c      	mov	r4, r9
 800ee44:	9903      	ldr	r1, [sp, #12]
 800ee46:	e7d7      	b.n	800edf8 <__hexnan+0x30>
 800ee48:	2a29      	cmp	r2, #41	@ 0x29
 800ee4a:	d156      	bne.n	800eefa <__hexnan+0x132>
 800ee4c:	3102      	adds	r1, #2
 800ee4e:	f8ca 1000 	str.w	r1, [sl]
 800ee52:	f1bb 0f00 	cmp.w	fp, #0
 800ee56:	d050      	beq.n	800eefa <__hexnan+0x132>
 800ee58:	454c      	cmp	r4, r9
 800ee5a:	d206      	bcs.n	800ee6a <__hexnan+0xa2>
 800ee5c:	2d07      	cmp	r5, #7
 800ee5e:	dc04      	bgt.n	800ee6a <__hexnan+0xa2>
 800ee60:	462a      	mov	r2, r5
 800ee62:	4649      	mov	r1, r9
 800ee64:	4620      	mov	r0, r4
 800ee66:	f7ff ff89 	bl	800ed7c <L_shift>
 800ee6a:	4544      	cmp	r4, r8
 800ee6c:	d935      	bls.n	800eeda <__hexnan+0x112>
 800ee6e:	f1a8 0204 	sub.w	r2, r8, #4
 800ee72:	4623      	mov	r3, r4
 800ee74:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee78:	429f      	cmp	r7, r3
 800ee7a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee7e:	d2f9      	bcs.n	800ee74 <__hexnan+0xac>
 800ee80:	1b3b      	subs	r3, r7, r4
 800ee82:	3e03      	subs	r6, #3
 800ee84:	3401      	adds	r4, #1
 800ee86:	2200      	movs	r2, #0
 800ee88:	f023 0303 	bic.w	r3, r3, #3
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	42b4      	cmp	r4, r6
 800ee90:	bf88      	it	hi
 800ee92:	2304      	movhi	r3, #4
 800ee94:	4443      	add	r3, r8
 800ee96:	f843 2b04 	str.w	r2, [r3], #4
 800ee9a:	429f      	cmp	r7, r3
 800ee9c:	d2fb      	bcs.n	800ee96 <__hexnan+0xce>
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	b91b      	cbnz	r3, 800eeaa <__hexnan+0xe2>
 800eea2:	4547      	cmp	r7, r8
 800eea4:	d127      	bne.n	800eef6 <__hexnan+0x12e>
 800eea6:	2301      	movs	r3, #1
 800eea8:	603b      	str	r3, [r7, #0]
 800eeaa:	2005      	movs	r0, #5
 800eeac:	b007      	add	sp, #28
 800eeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb2:	3501      	adds	r5, #1
 800eeb4:	f10b 0b01 	add.w	fp, fp, #1
 800eeb8:	2d08      	cmp	r5, #8
 800eeba:	dd05      	ble.n	800eec8 <__hexnan+0x100>
 800eebc:	4544      	cmp	r4, r8
 800eebe:	d9c1      	bls.n	800ee44 <__hexnan+0x7c>
 800eec0:	2300      	movs	r3, #0
 800eec2:	3c04      	subs	r4, #4
 800eec4:	2501      	movs	r5, #1
 800eec6:	6023      	str	r3, [r4, #0]
 800eec8:	6822      	ldr	r2, [r4, #0]
 800eeca:	f000 000f 	and.w	r0, r0, #15
 800eece:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eed2:	6020      	str	r0, [r4, #0]
 800eed4:	e7b6      	b.n	800ee44 <__hexnan+0x7c>
 800eed6:	2508      	movs	r5, #8
 800eed8:	e7b4      	b.n	800ee44 <__hexnan+0x7c>
 800eeda:	9b01      	ldr	r3, [sp, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0de      	beq.n	800ee9e <__hexnan+0xd6>
 800eee0:	f1c3 0320 	rsb	r3, r3, #32
 800eee4:	f04f 32ff 	mov.w	r2, #4294967295
 800eee8:	40da      	lsrs	r2, r3
 800eeea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eeee:	4013      	ands	r3, r2
 800eef0:	f846 3c04 	str.w	r3, [r6, #-4]
 800eef4:	e7d3      	b.n	800ee9e <__hexnan+0xd6>
 800eef6:	3f04      	subs	r7, #4
 800eef8:	e7d1      	b.n	800ee9e <__hexnan+0xd6>
 800eefa:	2004      	movs	r0, #4
 800eefc:	e7d6      	b.n	800eeac <__hexnan+0xe4>

0800eefe <__ascii_mbtowc>:
 800eefe:	b082      	sub	sp, #8
 800ef00:	b901      	cbnz	r1, 800ef04 <__ascii_mbtowc+0x6>
 800ef02:	a901      	add	r1, sp, #4
 800ef04:	b142      	cbz	r2, 800ef18 <__ascii_mbtowc+0x1a>
 800ef06:	b14b      	cbz	r3, 800ef1c <__ascii_mbtowc+0x1e>
 800ef08:	7813      	ldrb	r3, [r2, #0]
 800ef0a:	600b      	str	r3, [r1, #0]
 800ef0c:	7812      	ldrb	r2, [r2, #0]
 800ef0e:	1e10      	subs	r0, r2, #0
 800ef10:	bf18      	it	ne
 800ef12:	2001      	movne	r0, #1
 800ef14:	b002      	add	sp, #8
 800ef16:	4770      	bx	lr
 800ef18:	4610      	mov	r0, r2
 800ef1a:	e7fb      	b.n	800ef14 <__ascii_mbtowc+0x16>
 800ef1c:	f06f 0001 	mvn.w	r0, #1
 800ef20:	e7f8      	b.n	800ef14 <__ascii_mbtowc+0x16>

0800ef22 <_realloc_r>:
 800ef22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef26:	4680      	mov	r8, r0
 800ef28:	4615      	mov	r5, r2
 800ef2a:	460c      	mov	r4, r1
 800ef2c:	b921      	cbnz	r1, 800ef38 <_realloc_r+0x16>
 800ef2e:	4611      	mov	r1, r2
 800ef30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef34:	f7fd be58 	b.w	800cbe8 <_malloc_r>
 800ef38:	b92a      	cbnz	r2, 800ef46 <_realloc_r+0x24>
 800ef3a:	f7fd fde1 	bl	800cb00 <_free_r>
 800ef3e:	2400      	movs	r4, #0
 800ef40:	4620      	mov	r0, r4
 800ef42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef46:	f000 f840 	bl	800efca <_malloc_usable_size_r>
 800ef4a:	4285      	cmp	r5, r0
 800ef4c:	4606      	mov	r6, r0
 800ef4e:	d802      	bhi.n	800ef56 <_realloc_r+0x34>
 800ef50:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ef54:	d8f4      	bhi.n	800ef40 <_realloc_r+0x1e>
 800ef56:	4629      	mov	r1, r5
 800ef58:	4640      	mov	r0, r8
 800ef5a:	f7fd fe45 	bl	800cbe8 <_malloc_r>
 800ef5e:	4607      	mov	r7, r0
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d0ec      	beq.n	800ef3e <_realloc_r+0x1c>
 800ef64:	42b5      	cmp	r5, r6
 800ef66:	462a      	mov	r2, r5
 800ef68:	4621      	mov	r1, r4
 800ef6a:	bf28      	it	cs
 800ef6c:	4632      	movcs	r2, r6
 800ef6e:	f7ff fc49 	bl	800e804 <memcpy>
 800ef72:	4621      	mov	r1, r4
 800ef74:	4640      	mov	r0, r8
 800ef76:	463c      	mov	r4, r7
 800ef78:	f7fd fdc2 	bl	800cb00 <_free_r>
 800ef7c:	e7e0      	b.n	800ef40 <_realloc_r+0x1e>

0800ef7e <__ascii_wctomb>:
 800ef7e:	4603      	mov	r3, r0
 800ef80:	4608      	mov	r0, r1
 800ef82:	b141      	cbz	r1, 800ef96 <__ascii_wctomb+0x18>
 800ef84:	2aff      	cmp	r2, #255	@ 0xff
 800ef86:	d904      	bls.n	800ef92 <__ascii_wctomb+0x14>
 800ef88:	228a      	movs	r2, #138	@ 0x8a
 800ef8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8e:	601a      	str	r2, [r3, #0]
 800ef90:	4770      	bx	lr
 800ef92:	2001      	movs	r0, #1
 800ef94:	700a      	strb	r2, [r1, #0]
 800ef96:	4770      	bx	lr

0800ef98 <fiprintf>:
 800ef98:	b40e      	push	{r1, r2, r3}
 800ef9a:	b503      	push	{r0, r1, lr}
 800ef9c:	ab03      	add	r3, sp, #12
 800ef9e:	4601      	mov	r1, r0
 800efa0:	4805      	ldr	r0, [pc, #20]	@ (800efb8 <fiprintf+0x20>)
 800efa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800efa6:	6800      	ldr	r0, [r0, #0]
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	f000 f83f 	bl	800f02c <_vfiprintf_r>
 800efae:	b002      	add	sp, #8
 800efb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efb4:	b003      	add	sp, #12
 800efb6:	4770      	bx	lr
 800efb8:	20000030 	.word	0x20000030

0800efbc <abort>:
 800efbc:	2006      	movs	r0, #6
 800efbe:	b508      	push	{r3, lr}
 800efc0:	f000 fa08 	bl	800f3d4 <raise>
 800efc4:	2001      	movs	r0, #1
 800efc6:	f7f2 fd55 	bl	8001a74 <_exit>

0800efca <_malloc_usable_size_r>:
 800efca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efce:	1f18      	subs	r0, r3, #4
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	bfbc      	itt	lt
 800efd4:	580b      	ldrlt	r3, [r1, r0]
 800efd6:	18c0      	addlt	r0, r0, r3
 800efd8:	4770      	bx	lr

0800efda <__sfputc_r>:
 800efda:	6893      	ldr	r3, [r2, #8]
 800efdc:	3b01      	subs	r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	6093      	str	r3, [r2, #8]
 800efe2:	b410      	push	{r4}
 800efe4:	da08      	bge.n	800eff8 <__sfputc_r+0x1e>
 800efe6:	6994      	ldr	r4, [r2, #24]
 800efe8:	42a3      	cmp	r3, r4
 800efea:	db01      	blt.n	800eff0 <__sfputc_r+0x16>
 800efec:	290a      	cmp	r1, #10
 800efee:	d103      	bne.n	800eff8 <__sfputc_r+0x1e>
 800eff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eff4:	f000 b932 	b.w	800f25c <__swbuf_r>
 800eff8:	6813      	ldr	r3, [r2, #0]
 800effa:	1c58      	adds	r0, r3, #1
 800effc:	6010      	str	r0, [r2, #0]
 800effe:	4608      	mov	r0, r1
 800f000:	7019      	strb	r1, [r3, #0]
 800f002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <__sfputs_r>:
 800f008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f00a:	4606      	mov	r6, r0
 800f00c:	460f      	mov	r7, r1
 800f00e:	4614      	mov	r4, r2
 800f010:	18d5      	adds	r5, r2, r3
 800f012:	42ac      	cmp	r4, r5
 800f014:	d101      	bne.n	800f01a <__sfputs_r+0x12>
 800f016:	2000      	movs	r0, #0
 800f018:	e007      	b.n	800f02a <__sfputs_r+0x22>
 800f01a:	463a      	mov	r2, r7
 800f01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f020:	4630      	mov	r0, r6
 800f022:	f7ff ffda 	bl	800efda <__sfputc_r>
 800f026:	1c43      	adds	r3, r0, #1
 800f028:	d1f3      	bne.n	800f012 <__sfputs_r+0xa>
 800f02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f02c <_vfiprintf_r>:
 800f02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f030:	460d      	mov	r5, r1
 800f032:	b09d      	sub	sp, #116	@ 0x74
 800f034:	4614      	mov	r4, r2
 800f036:	4698      	mov	r8, r3
 800f038:	4606      	mov	r6, r0
 800f03a:	b118      	cbz	r0, 800f044 <_vfiprintf_r+0x18>
 800f03c:	6a03      	ldr	r3, [r0, #32]
 800f03e:	b90b      	cbnz	r3, 800f044 <_vfiprintf_r+0x18>
 800f040:	f7fc fddc 	bl	800bbfc <__sinit>
 800f044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f046:	07d9      	lsls	r1, r3, #31
 800f048:	d405      	bmi.n	800f056 <_vfiprintf_r+0x2a>
 800f04a:	89ab      	ldrh	r3, [r5, #12]
 800f04c:	059a      	lsls	r2, r3, #22
 800f04e:	d402      	bmi.n	800f056 <_vfiprintf_r+0x2a>
 800f050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f052:	f7fc feea 	bl	800be2a <__retarget_lock_acquire_recursive>
 800f056:	89ab      	ldrh	r3, [r5, #12]
 800f058:	071b      	lsls	r3, r3, #28
 800f05a:	d501      	bpl.n	800f060 <_vfiprintf_r+0x34>
 800f05c:	692b      	ldr	r3, [r5, #16]
 800f05e:	b99b      	cbnz	r3, 800f088 <_vfiprintf_r+0x5c>
 800f060:	4629      	mov	r1, r5
 800f062:	4630      	mov	r0, r6
 800f064:	f000 f938 	bl	800f2d8 <__swsetup_r>
 800f068:	b170      	cbz	r0, 800f088 <_vfiprintf_r+0x5c>
 800f06a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f06c:	07dc      	lsls	r4, r3, #31
 800f06e:	d504      	bpl.n	800f07a <_vfiprintf_r+0x4e>
 800f070:	f04f 30ff 	mov.w	r0, #4294967295
 800f074:	b01d      	add	sp, #116	@ 0x74
 800f076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07a:	89ab      	ldrh	r3, [r5, #12]
 800f07c:	0598      	lsls	r0, r3, #22
 800f07e:	d4f7      	bmi.n	800f070 <_vfiprintf_r+0x44>
 800f080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f082:	f7fc fed3 	bl	800be2c <__retarget_lock_release_recursive>
 800f086:	e7f3      	b.n	800f070 <_vfiprintf_r+0x44>
 800f088:	2300      	movs	r3, #0
 800f08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f08e:	f04f 0901 	mov.w	r9, #1
 800f092:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f248 <_vfiprintf_r+0x21c>
 800f096:	9309      	str	r3, [sp, #36]	@ 0x24
 800f098:	2320      	movs	r3, #32
 800f09a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f09e:	2330      	movs	r3, #48	@ 0x30
 800f0a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0a4:	4623      	mov	r3, r4
 800f0a6:	469a      	mov	sl, r3
 800f0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0ac:	b10a      	cbz	r2, 800f0b2 <_vfiprintf_r+0x86>
 800f0ae:	2a25      	cmp	r2, #37	@ 0x25
 800f0b0:	d1f9      	bne.n	800f0a6 <_vfiprintf_r+0x7a>
 800f0b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f0b6:	d00b      	beq.n	800f0d0 <_vfiprintf_r+0xa4>
 800f0b8:	465b      	mov	r3, fp
 800f0ba:	4622      	mov	r2, r4
 800f0bc:	4629      	mov	r1, r5
 800f0be:	4630      	mov	r0, r6
 800f0c0:	f7ff ffa2 	bl	800f008 <__sfputs_r>
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	f000 80a7 	beq.w	800f218 <_vfiprintf_r+0x1ec>
 800f0ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0cc:	445a      	add	r2, fp
 800f0ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 809f 	beq.w	800f218 <_vfiprintf_r+0x1ec>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e0:	f10a 0a01 	add.w	sl, sl, #1
 800f0e4:	9304      	str	r3, [sp, #16]
 800f0e6:	9307      	str	r3, [sp, #28]
 800f0e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0f2:	4654      	mov	r4, sl
 800f0f4:	2205      	movs	r2, #5
 800f0f6:	4854      	ldr	r0, [pc, #336]	@ (800f248 <_vfiprintf_r+0x21c>)
 800f0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0fc:	f7fc fe97 	bl	800be2e <memchr>
 800f100:	9a04      	ldr	r2, [sp, #16]
 800f102:	b9d8      	cbnz	r0, 800f13c <_vfiprintf_r+0x110>
 800f104:	06d1      	lsls	r1, r2, #27
 800f106:	bf44      	itt	mi
 800f108:	2320      	movmi	r3, #32
 800f10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f10e:	0713      	lsls	r3, r2, #28
 800f110:	bf44      	itt	mi
 800f112:	232b      	movmi	r3, #43	@ 0x2b
 800f114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f118:	f89a 3000 	ldrb.w	r3, [sl]
 800f11c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f11e:	d015      	beq.n	800f14c <_vfiprintf_r+0x120>
 800f120:	9a07      	ldr	r2, [sp, #28]
 800f122:	4654      	mov	r4, sl
 800f124:	2000      	movs	r0, #0
 800f126:	f04f 0c0a 	mov.w	ip, #10
 800f12a:	4621      	mov	r1, r4
 800f12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f130:	3b30      	subs	r3, #48	@ 0x30
 800f132:	2b09      	cmp	r3, #9
 800f134:	d94b      	bls.n	800f1ce <_vfiprintf_r+0x1a2>
 800f136:	b1b0      	cbz	r0, 800f166 <_vfiprintf_r+0x13a>
 800f138:	9207      	str	r2, [sp, #28]
 800f13a:	e014      	b.n	800f166 <_vfiprintf_r+0x13a>
 800f13c:	eba0 0308 	sub.w	r3, r0, r8
 800f140:	46a2      	mov	sl, r4
 800f142:	fa09 f303 	lsl.w	r3, r9, r3
 800f146:	4313      	orrs	r3, r2
 800f148:	9304      	str	r3, [sp, #16]
 800f14a:	e7d2      	b.n	800f0f2 <_vfiprintf_r+0xc6>
 800f14c:	9b03      	ldr	r3, [sp, #12]
 800f14e:	1d19      	adds	r1, r3, #4
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	9103      	str	r1, [sp, #12]
 800f156:	bfbb      	ittet	lt
 800f158:	425b      	neglt	r3, r3
 800f15a:	f042 0202 	orrlt.w	r2, r2, #2
 800f15e:	9307      	strge	r3, [sp, #28]
 800f160:	9307      	strlt	r3, [sp, #28]
 800f162:	bfb8      	it	lt
 800f164:	9204      	strlt	r2, [sp, #16]
 800f166:	7823      	ldrb	r3, [r4, #0]
 800f168:	2b2e      	cmp	r3, #46	@ 0x2e
 800f16a:	d10a      	bne.n	800f182 <_vfiprintf_r+0x156>
 800f16c:	7863      	ldrb	r3, [r4, #1]
 800f16e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f170:	d132      	bne.n	800f1d8 <_vfiprintf_r+0x1ac>
 800f172:	9b03      	ldr	r3, [sp, #12]
 800f174:	3402      	adds	r4, #2
 800f176:	1d1a      	adds	r2, r3, #4
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f17e:	9203      	str	r2, [sp, #12]
 800f180:	9305      	str	r3, [sp, #20]
 800f182:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f258 <_vfiprintf_r+0x22c>
 800f186:	2203      	movs	r2, #3
 800f188:	7821      	ldrb	r1, [r4, #0]
 800f18a:	4650      	mov	r0, sl
 800f18c:	f7fc fe4f 	bl	800be2e <memchr>
 800f190:	b138      	cbz	r0, 800f1a2 <_vfiprintf_r+0x176>
 800f192:	eba0 000a 	sub.w	r0, r0, sl
 800f196:	2240      	movs	r2, #64	@ 0x40
 800f198:	9b04      	ldr	r3, [sp, #16]
 800f19a:	3401      	adds	r4, #1
 800f19c:	4082      	lsls	r2, r0
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	9304      	str	r3, [sp, #16]
 800f1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1a6:	2206      	movs	r2, #6
 800f1a8:	4828      	ldr	r0, [pc, #160]	@ (800f24c <_vfiprintf_r+0x220>)
 800f1aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1ae:	f7fc fe3e 	bl	800be2e <memchr>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d03f      	beq.n	800f236 <_vfiprintf_r+0x20a>
 800f1b6:	4b26      	ldr	r3, [pc, #152]	@ (800f250 <_vfiprintf_r+0x224>)
 800f1b8:	bb1b      	cbnz	r3, 800f202 <_vfiprintf_r+0x1d6>
 800f1ba:	9b03      	ldr	r3, [sp, #12]
 800f1bc:	3307      	adds	r3, #7
 800f1be:	f023 0307 	bic.w	r3, r3, #7
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	9303      	str	r3, [sp, #12]
 800f1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1c8:	443b      	add	r3, r7
 800f1ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1cc:	e76a      	b.n	800f0a4 <_vfiprintf_r+0x78>
 800f1ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	2001      	movs	r0, #1
 800f1d6:	e7a8      	b.n	800f12a <_vfiprintf_r+0xfe>
 800f1d8:	2300      	movs	r3, #0
 800f1da:	3401      	adds	r4, #1
 800f1dc:	f04f 0c0a 	mov.w	ip, #10
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	9305      	str	r3, [sp, #20]
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1ea:	3a30      	subs	r2, #48	@ 0x30
 800f1ec:	2a09      	cmp	r2, #9
 800f1ee:	d903      	bls.n	800f1f8 <_vfiprintf_r+0x1cc>
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0c6      	beq.n	800f182 <_vfiprintf_r+0x156>
 800f1f4:	9105      	str	r1, [sp, #20]
 800f1f6:	e7c4      	b.n	800f182 <_vfiprintf_r+0x156>
 800f1f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	2301      	movs	r3, #1
 800f200:	e7f0      	b.n	800f1e4 <_vfiprintf_r+0x1b8>
 800f202:	ab03      	add	r3, sp, #12
 800f204:	462a      	mov	r2, r5
 800f206:	a904      	add	r1, sp, #16
 800f208:	4630      	mov	r0, r6
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	4b11      	ldr	r3, [pc, #68]	@ (800f254 <_vfiprintf_r+0x228>)
 800f20e:	f7fb fe9b 	bl	800af48 <_printf_float>
 800f212:	4607      	mov	r7, r0
 800f214:	1c78      	adds	r0, r7, #1
 800f216:	d1d6      	bne.n	800f1c6 <_vfiprintf_r+0x19a>
 800f218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f21a:	07d9      	lsls	r1, r3, #31
 800f21c:	d405      	bmi.n	800f22a <_vfiprintf_r+0x1fe>
 800f21e:	89ab      	ldrh	r3, [r5, #12]
 800f220:	059a      	lsls	r2, r3, #22
 800f222:	d402      	bmi.n	800f22a <_vfiprintf_r+0x1fe>
 800f224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f226:	f7fc fe01 	bl	800be2c <__retarget_lock_release_recursive>
 800f22a:	89ab      	ldrh	r3, [r5, #12]
 800f22c:	065b      	lsls	r3, r3, #25
 800f22e:	f53f af1f 	bmi.w	800f070 <_vfiprintf_r+0x44>
 800f232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f234:	e71e      	b.n	800f074 <_vfiprintf_r+0x48>
 800f236:	ab03      	add	r3, sp, #12
 800f238:	462a      	mov	r2, r5
 800f23a:	a904      	add	r1, sp, #16
 800f23c:	4630      	mov	r0, r6
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	4b04      	ldr	r3, [pc, #16]	@ (800f254 <_vfiprintf_r+0x228>)
 800f242:	f7fc f91d 	bl	800b480 <_printf_i>
 800f246:	e7e4      	b.n	800f212 <_vfiprintf_r+0x1e6>
 800f248:	0800f9c9 	.word	0x0800f9c9
 800f24c:	0800f9d3 	.word	0x0800f9d3
 800f250:	0800af49 	.word	0x0800af49
 800f254:	0800f009 	.word	0x0800f009
 800f258:	0800f9cf 	.word	0x0800f9cf

0800f25c <__swbuf_r>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	460e      	mov	r6, r1
 800f260:	4614      	mov	r4, r2
 800f262:	4605      	mov	r5, r0
 800f264:	b118      	cbz	r0, 800f26e <__swbuf_r+0x12>
 800f266:	6a03      	ldr	r3, [r0, #32]
 800f268:	b90b      	cbnz	r3, 800f26e <__swbuf_r+0x12>
 800f26a:	f7fc fcc7 	bl	800bbfc <__sinit>
 800f26e:	69a3      	ldr	r3, [r4, #24]
 800f270:	60a3      	str	r3, [r4, #8]
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	071a      	lsls	r2, r3, #28
 800f276:	d501      	bpl.n	800f27c <__swbuf_r+0x20>
 800f278:	6923      	ldr	r3, [r4, #16]
 800f27a:	b943      	cbnz	r3, 800f28e <__swbuf_r+0x32>
 800f27c:	4621      	mov	r1, r4
 800f27e:	4628      	mov	r0, r5
 800f280:	f000 f82a 	bl	800f2d8 <__swsetup_r>
 800f284:	b118      	cbz	r0, 800f28e <__swbuf_r+0x32>
 800f286:	f04f 37ff 	mov.w	r7, #4294967295
 800f28a:	4638      	mov	r0, r7
 800f28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	b2f6      	uxtb	r6, r6
 800f292:	6922      	ldr	r2, [r4, #16]
 800f294:	4637      	mov	r7, r6
 800f296:	1a98      	subs	r0, r3, r2
 800f298:	6963      	ldr	r3, [r4, #20]
 800f29a:	4283      	cmp	r3, r0
 800f29c:	dc05      	bgt.n	800f2aa <__swbuf_r+0x4e>
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f7ff fa4b 	bl	800e73c <_fflush_r>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d1ed      	bne.n	800f286 <__swbuf_r+0x2a>
 800f2aa:	68a3      	ldr	r3, [r4, #8]
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	60a3      	str	r3, [r4, #8]
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	1c5a      	adds	r2, r3, #1
 800f2b4:	6022      	str	r2, [r4, #0]
 800f2b6:	701e      	strb	r6, [r3, #0]
 800f2b8:	1c43      	adds	r3, r0, #1
 800f2ba:	6962      	ldr	r2, [r4, #20]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d004      	beq.n	800f2ca <__swbuf_r+0x6e>
 800f2c0:	89a3      	ldrh	r3, [r4, #12]
 800f2c2:	07db      	lsls	r3, r3, #31
 800f2c4:	d5e1      	bpl.n	800f28a <__swbuf_r+0x2e>
 800f2c6:	2e0a      	cmp	r6, #10
 800f2c8:	d1df      	bne.n	800f28a <__swbuf_r+0x2e>
 800f2ca:	4621      	mov	r1, r4
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	f7ff fa35 	bl	800e73c <_fflush_r>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d0d9      	beq.n	800f28a <__swbuf_r+0x2e>
 800f2d6:	e7d6      	b.n	800f286 <__swbuf_r+0x2a>

0800f2d8 <__swsetup_r>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	4b29      	ldr	r3, [pc, #164]	@ (800f380 <__swsetup_r+0xa8>)
 800f2dc:	4605      	mov	r5, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	6818      	ldr	r0, [r3, #0]
 800f2e2:	b118      	cbz	r0, 800f2ec <__swsetup_r+0x14>
 800f2e4:	6a03      	ldr	r3, [r0, #32]
 800f2e6:	b90b      	cbnz	r3, 800f2ec <__swsetup_r+0x14>
 800f2e8:	f7fc fc88 	bl	800bbfc <__sinit>
 800f2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2f0:	0719      	lsls	r1, r3, #28
 800f2f2:	d422      	bmi.n	800f33a <__swsetup_r+0x62>
 800f2f4:	06da      	lsls	r2, r3, #27
 800f2f6:	d407      	bmi.n	800f308 <__swsetup_r+0x30>
 800f2f8:	2209      	movs	r2, #9
 800f2fa:	602a      	str	r2, [r5, #0]
 800f2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f300:	f04f 30ff 	mov.w	r0, #4294967295
 800f304:	81a3      	strh	r3, [r4, #12]
 800f306:	e033      	b.n	800f370 <__swsetup_r+0x98>
 800f308:	0758      	lsls	r0, r3, #29
 800f30a:	d512      	bpl.n	800f332 <__swsetup_r+0x5a>
 800f30c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f30e:	b141      	cbz	r1, 800f322 <__swsetup_r+0x4a>
 800f310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f314:	4299      	cmp	r1, r3
 800f316:	d002      	beq.n	800f31e <__swsetup_r+0x46>
 800f318:	4628      	mov	r0, r5
 800f31a:	f7fd fbf1 	bl	800cb00 <_free_r>
 800f31e:	2300      	movs	r3, #0
 800f320:	6363      	str	r3, [r4, #52]	@ 0x34
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f328:	81a3      	strh	r3, [r4, #12]
 800f32a:	2300      	movs	r3, #0
 800f32c:	6063      	str	r3, [r4, #4]
 800f32e:	6923      	ldr	r3, [r4, #16]
 800f330:	6023      	str	r3, [r4, #0]
 800f332:	89a3      	ldrh	r3, [r4, #12]
 800f334:	f043 0308 	orr.w	r3, r3, #8
 800f338:	81a3      	strh	r3, [r4, #12]
 800f33a:	6923      	ldr	r3, [r4, #16]
 800f33c:	b94b      	cbnz	r3, 800f352 <__swsetup_r+0x7a>
 800f33e:	89a3      	ldrh	r3, [r4, #12]
 800f340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f348:	d003      	beq.n	800f352 <__swsetup_r+0x7a>
 800f34a:	4621      	mov	r1, r4
 800f34c:	4628      	mov	r0, r5
 800f34e:	f000 f882 	bl	800f456 <__smakebuf_r>
 800f352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f356:	f013 0201 	ands.w	r2, r3, #1
 800f35a:	d00a      	beq.n	800f372 <__swsetup_r+0x9a>
 800f35c:	2200      	movs	r2, #0
 800f35e:	60a2      	str	r2, [r4, #8]
 800f360:	6962      	ldr	r2, [r4, #20]
 800f362:	4252      	negs	r2, r2
 800f364:	61a2      	str	r2, [r4, #24]
 800f366:	6922      	ldr	r2, [r4, #16]
 800f368:	b942      	cbnz	r2, 800f37c <__swsetup_r+0xa4>
 800f36a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f36e:	d1c5      	bne.n	800f2fc <__swsetup_r+0x24>
 800f370:	bd38      	pop	{r3, r4, r5, pc}
 800f372:	0799      	lsls	r1, r3, #30
 800f374:	bf58      	it	pl
 800f376:	6962      	ldrpl	r2, [r4, #20]
 800f378:	60a2      	str	r2, [r4, #8]
 800f37a:	e7f4      	b.n	800f366 <__swsetup_r+0x8e>
 800f37c:	2000      	movs	r0, #0
 800f37e:	e7f7      	b.n	800f370 <__swsetup_r+0x98>
 800f380:	20000030 	.word	0x20000030

0800f384 <_raise_r>:
 800f384:	291f      	cmp	r1, #31
 800f386:	b538      	push	{r3, r4, r5, lr}
 800f388:	4605      	mov	r5, r0
 800f38a:	460c      	mov	r4, r1
 800f38c:	d904      	bls.n	800f398 <_raise_r+0x14>
 800f38e:	2316      	movs	r3, #22
 800f390:	6003      	str	r3, [r0, #0]
 800f392:	f04f 30ff 	mov.w	r0, #4294967295
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f39a:	b112      	cbz	r2, 800f3a2 <_raise_r+0x1e>
 800f39c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3a0:	b94b      	cbnz	r3, 800f3b6 <_raise_r+0x32>
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f000 f830 	bl	800f408 <_getpid_r>
 800f3a8:	4622      	mov	r2, r4
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3b2:	f000 b817 	b.w	800f3e4 <_kill_r>
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d00a      	beq.n	800f3d0 <_raise_r+0x4c>
 800f3ba:	1c59      	adds	r1, r3, #1
 800f3bc:	d103      	bne.n	800f3c6 <_raise_r+0x42>
 800f3be:	2316      	movs	r3, #22
 800f3c0:	6003      	str	r3, [r0, #0]
 800f3c2:	2001      	movs	r0, #1
 800f3c4:	e7e7      	b.n	800f396 <_raise_r+0x12>
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f3ce:	4798      	blx	r3
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e7e0      	b.n	800f396 <_raise_r+0x12>

0800f3d4 <raise>:
 800f3d4:	4b02      	ldr	r3, [pc, #8]	@ (800f3e0 <raise+0xc>)
 800f3d6:	4601      	mov	r1, r0
 800f3d8:	6818      	ldr	r0, [r3, #0]
 800f3da:	f7ff bfd3 	b.w	800f384 <_raise_r>
 800f3de:	bf00      	nop
 800f3e0:	20000030 	.word	0x20000030

0800f3e4 <_kill_r>:
 800f3e4:	b538      	push	{r3, r4, r5, lr}
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	4d06      	ldr	r5, [pc, #24]	@ (800f404 <_kill_r+0x20>)
 800f3ea:	4604      	mov	r4, r0
 800f3ec:	4608      	mov	r0, r1
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	602b      	str	r3, [r5, #0]
 800f3f2:	f7f2 fb2f 	bl	8001a54 <_kill>
 800f3f6:	1c43      	adds	r3, r0, #1
 800f3f8:	d102      	bne.n	800f400 <_kill_r+0x1c>
 800f3fa:	682b      	ldr	r3, [r5, #0]
 800f3fc:	b103      	cbz	r3, 800f400 <_kill_r+0x1c>
 800f3fe:	6023      	str	r3, [r4, #0]
 800f400:	bd38      	pop	{r3, r4, r5, pc}
 800f402:	bf00      	nop
 800f404:	20000a3c 	.word	0x20000a3c

0800f408 <_getpid_r>:
 800f408:	f7f2 bb1c 	b.w	8001a44 <_getpid>

0800f40c <__swhatbuf_r>:
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	460c      	mov	r4, r1
 800f410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f414:	b096      	sub	sp, #88	@ 0x58
 800f416:	4615      	mov	r5, r2
 800f418:	2900      	cmp	r1, #0
 800f41a:	461e      	mov	r6, r3
 800f41c:	da0c      	bge.n	800f438 <__swhatbuf_r+0x2c>
 800f41e:	89a3      	ldrh	r3, [r4, #12]
 800f420:	2100      	movs	r1, #0
 800f422:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f426:	bf14      	ite	ne
 800f428:	2340      	movne	r3, #64	@ 0x40
 800f42a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f42e:	2000      	movs	r0, #0
 800f430:	6031      	str	r1, [r6, #0]
 800f432:	602b      	str	r3, [r5, #0]
 800f434:	b016      	add	sp, #88	@ 0x58
 800f436:	bd70      	pop	{r4, r5, r6, pc}
 800f438:	466a      	mov	r2, sp
 800f43a:	f000 f849 	bl	800f4d0 <_fstat_r>
 800f43e:	2800      	cmp	r0, #0
 800f440:	dbed      	blt.n	800f41e <__swhatbuf_r+0x12>
 800f442:	9901      	ldr	r1, [sp, #4]
 800f444:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f448:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f44c:	4259      	negs	r1, r3
 800f44e:	4159      	adcs	r1, r3
 800f450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f454:	e7eb      	b.n	800f42e <__swhatbuf_r+0x22>

0800f456 <__smakebuf_r>:
 800f456:	898b      	ldrh	r3, [r1, #12]
 800f458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f45a:	079d      	lsls	r5, r3, #30
 800f45c:	4606      	mov	r6, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	d507      	bpl.n	800f472 <__smakebuf_r+0x1c>
 800f462:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f466:	6023      	str	r3, [r4, #0]
 800f468:	6123      	str	r3, [r4, #16]
 800f46a:	2301      	movs	r3, #1
 800f46c:	6163      	str	r3, [r4, #20]
 800f46e:	b003      	add	sp, #12
 800f470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f472:	ab01      	add	r3, sp, #4
 800f474:	466a      	mov	r2, sp
 800f476:	f7ff ffc9 	bl	800f40c <__swhatbuf_r>
 800f47a:	9f00      	ldr	r7, [sp, #0]
 800f47c:	4605      	mov	r5, r0
 800f47e:	4630      	mov	r0, r6
 800f480:	4639      	mov	r1, r7
 800f482:	f7fd fbb1 	bl	800cbe8 <_malloc_r>
 800f486:	b948      	cbnz	r0, 800f49c <__smakebuf_r+0x46>
 800f488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f48c:	059a      	lsls	r2, r3, #22
 800f48e:	d4ee      	bmi.n	800f46e <__smakebuf_r+0x18>
 800f490:	f023 0303 	bic.w	r3, r3, #3
 800f494:	f043 0302 	orr.w	r3, r3, #2
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	e7e2      	b.n	800f462 <__smakebuf_r+0xc>
 800f49c:	89a3      	ldrh	r3, [r4, #12]
 800f49e:	6020      	str	r0, [r4, #0]
 800f4a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4a4:	81a3      	strh	r3, [r4, #12]
 800f4a6:	9b01      	ldr	r3, [sp, #4]
 800f4a8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f4ac:	b15b      	cbz	r3, 800f4c6 <__smakebuf_r+0x70>
 800f4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	f000 f81e 	bl	800f4f4 <_isatty_r>
 800f4b8:	b128      	cbz	r0, 800f4c6 <__smakebuf_r+0x70>
 800f4ba:	89a3      	ldrh	r3, [r4, #12]
 800f4bc:	f023 0303 	bic.w	r3, r3, #3
 800f4c0:	f043 0301 	orr.w	r3, r3, #1
 800f4c4:	81a3      	strh	r3, [r4, #12]
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	431d      	orrs	r5, r3
 800f4ca:	81a5      	strh	r5, [r4, #12]
 800f4cc:	e7cf      	b.n	800f46e <__smakebuf_r+0x18>
	...

0800f4d0 <_fstat_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	4d06      	ldr	r5, [pc, #24]	@ (800f4f0 <_fstat_r+0x20>)
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	4608      	mov	r0, r1
 800f4da:	4611      	mov	r1, r2
 800f4dc:	602b      	str	r3, [r5, #0]
 800f4de:	f7f2 fafd 	bl	8001adc <_fstat>
 800f4e2:	1c43      	adds	r3, r0, #1
 800f4e4:	d102      	bne.n	800f4ec <_fstat_r+0x1c>
 800f4e6:	682b      	ldr	r3, [r5, #0]
 800f4e8:	b103      	cbz	r3, 800f4ec <_fstat_r+0x1c>
 800f4ea:	6023      	str	r3, [r4, #0]
 800f4ec:	bd38      	pop	{r3, r4, r5, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20000a3c 	.word	0x20000a3c

0800f4f4 <_isatty_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	4d05      	ldr	r5, [pc, #20]	@ (800f510 <_isatty_r+0x1c>)
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	4608      	mov	r0, r1
 800f4fe:	602b      	str	r3, [r5, #0]
 800f500:	f7f2 fafc 	bl	8001afc <_isatty>
 800f504:	1c43      	adds	r3, r0, #1
 800f506:	d102      	bne.n	800f50e <_isatty_r+0x1a>
 800f508:	682b      	ldr	r3, [r5, #0]
 800f50a:	b103      	cbz	r3, 800f50e <_isatty_r+0x1a>
 800f50c:	6023      	str	r3, [r4, #0]
 800f50e:	bd38      	pop	{r3, r4, r5, pc}
 800f510:	20000a3c 	.word	0x20000a3c

0800f514 <_init>:
 800f514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f516:	bf00      	nop
 800f518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f51a:	bc08      	pop	{r3}
 800f51c:	469e      	mov	lr, r3
 800f51e:	4770      	bx	lr

0800f520 <_fini>:
 800f520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f522:	bf00      	nop
 800f524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f526:	bc08      	pop	{r3}
 800f528:	469e      	mov	lr, r3
 800f52a:	4770      	bx	lr
